
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc14  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800cdd8  0800cdd8  0001cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf6c  0800cf6c  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf74  0800cf74  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf74  0800cf74  0001cf74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800cf7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  20000278  0800d1f4  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba0  0800d1f4  00020ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002973f  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004044  00000000  00000000  000499e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  0004da30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c8  00000000  00000000  0004f270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d25  00000000  00000000  00050938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012181  00000000  00000000  0007965d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0ade  00000000  00000000  0008b7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c2bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b60  00000000  00000000  0016c338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000278 	.word	0x20000278
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800cdc0 	.word	0x0800cdc0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000027c 	.word	0x2000027c
 8000200:	0800cdc0 	.word	0x0800cdc0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 ffa1 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00c f88e 	bl	800c658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ffb9 	bl	80014de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 ff81 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000020c 	.word	0x2000020c
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000730 	.word	0x20000730

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000730 	.word	0x20000730

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e0ed      	b.n	800081a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f00c f82c 	bl	800c6a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f022 0202 	bic.w	r2, r2, #2
 800065e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000660:	f7ff ffb6 	bl	80005d0 <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000666:	e012      	b.n	800068e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d90b      	bls.n	800068e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2205      	movs	r2, #5
 8000686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e0c5      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e5      	bne.n	8000668 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006ac:	f7ff ff90 	bl	80005d0 <HAL_GetTick>
 80006b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006b2:	e012      	b.n	80006da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006b4:	f7ff ff8c 	bl	80005d0 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d90b      	bls.n	80006da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2205      	movs	r2, #5
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e09f      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0e5      	beq.n	80006b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7e1b      	ldrb	r3, [r3, #24]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d108      	bne.n	8000702 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e007      	b.n	8000712 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7e5b      	ldrb	r3, [r3, #25]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e007      	b.n	800073c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800073a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e9b      	ldrb	r3, [r3, #26]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0220 	orr.w	r2, r2, #32
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0220 	bic.w	r2, r2, #32
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7edb      	ldrb	r3, [r3, #27]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0210 	bic.w	r2, r2, #16
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0210 	orr.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7f1b      	ldrb	r3, [r3, #28]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0208 	orr.w	r2, r2, #8
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0208 	bic.w	r2, r2, #8
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7f5b      	ldrb	r3, [r3, #29]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0204 	orr.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0204 	bic.w	r2, r2, #4
 80007e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	ea42 0103 	orr.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	430a      	orrs	r2, r1
 8000808:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800083c:	7cfb      	ldrb	r3, [r7, #19]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d003      	beq.n	800084a <HAL_CAN_ConfigFilter+0x26>
 8000842:	7cfb      	ldrb	r3, [r7, #19]
 8000844:	2b02      	cmp	r3, #2
 8000846:	f040 80be 	bne.w	80009c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800084a:	4b65      	ldr	r3, [pc, #404]	; (80009e0 <HAL_CAN_ConfigFilter+0x1bc>)
 800084c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000854:	f043 0201 	orr.w	r2, r3, #1
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000864:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	431a      	orrs	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	2201      	movs	r2, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	43db      	mvns	r3, r3
 800089c:	401a      	ands	r2, r3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d123      	bne.n	80008f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3248      	adds	r2, #72	; 0x48
 80008d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008ea:	6979      	ldr	r1, [r7, #20]
 80008ec:	3348      	adds	r3, #72	; 0x48
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	440b      	add	r3, r1
 80008f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d122      	bne.n	8000942 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	431a      	orrs	r2, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800091c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3248      	adds	r2, #72	; 0x48
 8000922:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000936:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000938:	6979      	ldr	r1, [r7, #20]
 800093a:	3348      	adds	r3, #72	; 0x48
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800095c:	e007      	b.n	800096e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d109      	bne.n	800098a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	43db      	mvns	r3, r3
 8000980:	401a      	ands	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000988:	e007      	b.n	800099a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	431a      	orrs	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d107      	bne.n	80009b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009b8:	f023 0201 	bic.w	r2, r3, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e006      	b.n	80009d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
  }
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40006400 	.word	0x40006400

080009e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d12e      	bne.n	8000a56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2202      	movs	r2, #2
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a10:	f7ff fdde 	bl	80005d0 <HAL_GetTick>
 8000a14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a16:	e012      	b.n	8000a3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a18:	f7ff fdda 	bl	80005d0 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b0a      	cmp	r3, #10
 8000a24:	d90b      	bls.n	8000a3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2205      	movs	r2, #5
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e012      	b.n	8000a64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e5      	bne.n	8000a18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e006      	b.n	8000a64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
  }
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d003      	beq.n	8000a98 <HAL_CAN_AddTxMessage+0x2c>
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 80b8 	bne.w	8000c08 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10a      	bne.n	8000ab8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 80a0 	beq.w	8000bf8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	0e1b      	lsrs	r3, r3, #24
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d907      	bls.n	8000ad8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000acc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e09e      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	409a      	lsls	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10d      	bne.n	8000b06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000af4:	68f9      	ldr	r1, [r7, #12]
 8000af6:	6809      	ldr	r1, [r1, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3318      	adds	r3, #24
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	440b      	add	r3, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e00f      	b.n	8000b26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3318      	adds	r3, #24
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	440b      	add	r3, r1
 8000b24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3318      	adds	r3, #24
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	440b      	add	r3, r1
 8000b36:	3304      	adds	r3, #4
 8000b38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	7d1b      	ldrb	r3, [r3, #20]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d111      	bne.n	8000b66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3318      	adds	r3, #24
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	4413      	add	r3, r2
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3318      	adds	r3, #24
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	440b      	add	r3, r1
 8000b62:	3304      	adds	r3, #4
 8000b64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3307      	adds	r3, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	061a      	lsls	r2, r3, #24
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3306      	adds	r3, #6
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3305      	adds	r3, #5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4313      	orrs	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	3204      	adds	r2, #4
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	4610      	mov	r0, r2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	6811      	ldr	r1, [r2, #0]
 8000b8e:	ea43 0200 	orr.w	r2, r3, r0
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	440b      	add	r3, r1
 8000b98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3303      	adds	r3, #3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	061a      	lsls	r2, r3, #24
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	6811      	ldr	r1, [r2, #0]
 8000bc4:	ea43 0200 	orr.w	r2, r3, r0
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	440b      	add	r3, r1
 8000bce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000bd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	f043 0201 	orr.w	r2, r3, #1
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3318      	adds	r3, #24
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	440b      	add	r3, r1
 8000bf2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e00e      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e006      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
  }
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c22:	b480      	push	{r7}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c36:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d003      	beq.n	8000c46 <HAL_CAN_GetRxMessage+0x24>
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	f040 80f4 	bne.w	8000e2e <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10e      	bne.n	8000c6a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d116      	bne.n	8000c88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0e8      	b.n	8000e3c <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0d9      	b.n	8000e3c <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	331b      	adds	r3, #27
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	4413      	add	r3, r2
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0204 	and.w	r2, r3, #4
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	331b      	adds	r3, #27
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	4413      	add	r3, r2
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	0d5b      	lsrs	r3, r3, #21
 8000cb6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	331b      	adds	r3, #27
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	331b      	adds	r3, #27
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	085b      	lsrs	r3, r3, #1
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	331b      	adds	r3, #27
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 020f 	and.w	r2, r3, #15
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	331b      	adds	r3, #27
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4413      	add	r3, r2
 8000d14:	3304      	adds	r3, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	331b      	adds	r3, #27
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	0c1b      	lsrs	r3, r3, #16
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	4413      	add	r3, r2
 8000d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	0a1a      	lsrs	r2, r3, #8
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	4413      	add	r3, r2
 8000d72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0c1a      	lsrs	r2, r3, #16
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	4413      	add	r3, r2
 8000d8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	0e1a      	lsrs	r2, r3, #24
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	3303      	adds	r3, #3
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	3304      	adds	r3, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	0a1a      	lsrs	r2, r3, #8
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3305      	adds	r3, #5
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0c1a      	lsrs	r2, r3, #16
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3306      	adds	r3, #6
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	0e1a      	lsrs	r2, r3, #24
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d108      	bne.n	8000e1a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	e007      	b.n	8000e2a <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0220 	orr.w	r2, r2, #32
 8000e28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e006      	b.n	8000e3c <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
  }
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d002      	beq.n	8000e66 <HAL_CAN_ActivateNotification+0x1e>
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d109      	bne.n	8000e7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6959      	ldr	r1, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e006      	b.n	8000e88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
  }
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d07c      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d023      	beq.n	8000f2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f97d 	bl	80011f6 <HAL_CAN_TxMailbox0CompleteCallback>
 8000efc:	e016      	b.n	8000f2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f10:	e00c      	b.n	8000f2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
 8000f24:	e002      	b.n	8000f2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f983 	bl	8001232 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d024      	beq.n	8000f80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f95d 	bl	800120a <HAL_CAN_TxMailbox1CompleteCallback>
 8000f50:	e016      	b.n	8000f80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
 8000f64:	e00c      	b.n	8000f80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	e002      	b.n	8000f80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f963 	bl	8001246 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d024      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f93d 	bl	800121e <HAL_CAN_TxMailbox2CompleteCallback>
 8000fa4:	e016      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb8:	e00c      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	e002      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f943 	bl	800125a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2208      	movs	r2, #8
 8001012:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f92a 	bl	800126e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d009      	beq.n	8001038 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f00a f89e 	bl	800b174 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00c      	beq.n	800105c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2210      	movs	r2, #16
 800105a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2208      	movs	r2, #8
 8001076:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f902 	bl	8001282 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f00a f88e 	bl	800b1b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2210      	movs	r2, #16
 80010b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8ec 	bl	8001296 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2208      	movs	r2, #8
 80010d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f8e5 	bl	80012aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d075      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d06c      	beq.n	80011ce <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03d      	beq.n	80011ce <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001158:	2b00      	cmp	r3, #0
 800115a:	d038      	beq.n	80011ce <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001162:	2b30      	cmp	r3, #48	; 0x30
 8001164:	d017      	beq.n	8001196 <HAL_CAN_IRQHandler+0x302>
 8001166:	2b30      	cmp	r3, #48	; 0x30
 8001168:	d804      	bhi.n	8001174 <HAL_CAN_IRQHandler+0x2e0>
 800116a:	2b10      	cmp	r3, #16
 800116c:	d009      	beq.n	8001182 <HAL_CAN_IRQHandler+0x2ee>
 800116e:	2b20      	cmp	r3, #32
 8001170:	d00c      	beq.n	800118c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001172:	e024      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001174:	2b50      	cmp	r3, #80	; 0x50
 8001176:	d018      	beq.n	80011aa <HAL_CAN_IRQHandler+0x316>
 8001178:	2b60      	cmp	r3, #96	; 0x60
 800117a:	d01b      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x320>
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d00f      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001180:	e01d      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800118a:	e018      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001194:	e013      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800119e:	e00e      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011a8:	e009      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011b2:	e004      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f868 	bl	80012be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e165      	b.n	80017e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8154 	bne.w	80017da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x4a>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0203 	and.w	r2, r3, #3
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d00b      	beq.n	80015de <HAL_GPIO_Init+0xe6>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80ae 	beq.w	80017da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b5c      	ldr	r3, [pc, #368]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a5b      	ldr	r2, [pc, #364]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_GPIO_Init+0x300>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4e      	ldr	r2, [pc, #312]	; (80017fc <HAL_GPIO_Init+0x304>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d025      	beq.n	8001712 <HAL_GPIO_Init+0x21a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x308>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01f      	beq.n	800170e <HAL_GPIO_Init+0x216>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x30c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <HAL_GPIO_Init+0x310>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x20a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x206>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a48      	ldr	r2, [pc, #288]	; (8001814 <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x202>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4934      	ldr	r1, [pc, #208]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_GPIO_Init+0x320>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae96 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	3724      	adds	r7, #36	; 0x24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40021400 	.word	0x40021400
 8001814:	40021800 	.word	0x40021800
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e001      	b.n	800183e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	401a      	ands	r2, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	429a      	cmp	r2, r3
 8001896:	d104      	bne.n	80018a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0ca      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b67      	ldr	r3, [pc, #412]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d90c      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b6      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800192a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494c      	ldr	r1, [pc, #304]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d044      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d119      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e065      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7fe fe14 	bl	80005d0 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7fe fe10 	bl	80005d0 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20c      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e030      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4915      	ldr	r1, [pc, #84]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490d      	ldr	r1, [pc, #52]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 fb47 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8001a3e:	4601      	mov	r1, r0
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7fe fd76 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	0800cf5c 	.word	0x0800cf5c
 8001a74:	2000020c 	.word	0x2000020c

08001a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	496c      	ldr	r1, [pc, #432]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d010      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	4960      	ldr	r1, [pc, #384]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4955      	ldr	r1, [pc, #340]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b48:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	4946      	ldr	r1, [pc, #280]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b66:	d101      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 808a 	beq.w	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bae:	f7fe fd0f 	bl	80005d0 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7fe fd0b 	bl	80005d0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e278      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bdc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d02f      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bec:	6a3a      	ldr	r2, [r7, #32]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bfa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d114      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fcd9 	bl	80005d0 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe fcd5 	bl	80005d0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e240      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ee      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c50:	d114      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c66:	4902      	ldr	r1, [pc, #8]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
 8001c6c:	e00c      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
 8001c78:	42470e40 	.word	0x42470e40
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c86:	6093      	str	r3, [r2, #8]
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	4944      	ldr	r1, [pc, #272]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001cac:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001cae:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	492e      	ldr	r1, [pc, #184]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d011      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	4926      	ldr	r1, [pc, #152]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	491a      	ldr	r1, [pc, #104]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d011      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d60:	4911      	ldr	r1, [pc, #68]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d70:	d101      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001d72:	2301      	movs	r3, #1
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d84:	f040 80ff 	bne.w	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d8e:	f7fe fc1f 	bl	80005d0 <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d94:	e00e      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d96:	f7fe fc1b 	bl	80005d0 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e188      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	424711e0 	.word	0x424711e0
 8001db0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001db4:	4b7e      	ldr	r3, [pc, #504]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ea      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d028      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d124      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001de8:	4b71      	ldr	r3, [pc, #452]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dee:	0c1b      	lsrs	r3, r3, #16
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	3301      	adds	r3, #1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e00:	0e1b      	lsrs	r3, r3, #24
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	431a      	orrs	r2, r3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	071b      	lsls	r3, r3, #28
 8001e2a:	4961      	ldr	r1, [pc, #388]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d035      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5c:	d130      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e70:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e76:	0f1b      	lsrs	r3, r3, #28
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	019b      	lsls	r3, r3, #6
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	071b      	lsls	r3, r3, #28
 8001ea0:	4943      	ldr	r1, [pc, #268]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eae:	f023 021f 	bic.w	r2, r3, #31
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d029      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed4:	d124      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eee:	0f1b      	lsrs	r3, r3, #28
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	019b      	lsls	r3, r3, #6
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	431a      	orrs	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	071b      	lsls	r3, r3, #28
 8001f18:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d016      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	071b      	lsls	r3, r3, #28
 8001f52:	4917      	ldr	r1, [pc, #92]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fb36 	bl	80005d0 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f68:	f7fe fb32 	bl	80005d0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e09f      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 8095 	bne.w	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fb1c 	bl	80005d0 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f9c:	f7fe fb18 	bl	80005d0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e085      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	42470068 	.word	0x42470068
 8001fb8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fbc:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fc8:	d0e8      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d02b      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d127      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	431a      	orrs	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4928      	ldr	r1, [pc, #160]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800202a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	3b01      	subs	r3, #1
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01d      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002056:	d118      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	3b01      	subs	r3, #1
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002090:	f7fe fa9e 	bl	80005d0 <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002098:	f7fe fa9a 	bl	80005d0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e007      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b6:	d1ef      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3730      	adds	r7, #48	; 0x30
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470070 	.word	0x42470070

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e6:	4b9f      	ldr	r3, [pc, #636]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	f200 8130 	bhi.w	8002354 <HAL_RCC_GetSysClockFreq+0x288>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <HAL_RCC_GetSysClockFreq+0x30>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002131 	.word	0x08002131
 8002100:	08002355 	.word	0x08002355
 8002104:	08002355 	.word	0x08002355
 8002108:	08002355 	.word	0x08002355
 800210c:	08002137 	.word	0x08002137
 8002110:	08002355 	.word	0x08002355
 8002114:	08002355 	.word	0x08002355
 8002118:	08002355 	.word	0x08002355
 800211c:	0800213d 	.word	0x0800213d
 8002120:	08002355 	.word	0x08002355
 8002124:	08002355 	.word	0x08002355
 8002128:	08002355 	.word	0x08002355
 800212c:	0800224b 	.word	0x0800224b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b8d      	ldr	r3, [pc, #564]	; (8002368 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002132:	613b      	str	r3, [r7, #16]
       break;
 8002134:	e111      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002136:	4b8d      	ldr	r3, [pc, #564]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002138:	613b      	str	r3, [r7, #16]
      break;
 800213a:	e10e      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800213c:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002144:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002146:	4b87      	ldr	r3, [pc, #540]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d023      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea03 0501 	and.w	r5, r3, r1
 8002168:	ea04 0602 	and.w	r6, r4, r2
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800216e:	fb02 f106 	mul.w	r1, r2, r6
 8002172:	2200      	movs	r2, #0
 8002174:	fb02 f205 	mul.w	r2, r2, r5
 8002178:	440a      	add	r2, r1
 800217a:	497c      	ldr	r1, [pc, #496]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800217c:	fba5 0101 	umull	r0, r1, r5, r1
 8002180:	1853      	adds	r3, r2, r1
 8002182:	4619      	mov	r1, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f04f 0400 	mov.w	r4, #0
 800218a:	461a      	mov	r2, r3
 800218c:	4623      	mov	r3, r4
 800218e:	f7fe f839 	bl	8000204 <__aeabi_uldivmod>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e049      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	ea03 0501 	and.w	r5, r3, r1
 80021b0:	ea04 0602 	and.w	r6, r4, r2
 80021b4:	4629      	mov	r1, r5
 80021b6:	4632      	mov	r2, r6
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	0154      	lsls	r4, r2, #5
 80021c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021c6:	014b      	lsls	r3, r1, #5
 80021c8:	4619      	mov	r1, r3
 80021ca:	4622      	mov	r2, r4
 80021cc:	1b49      	subs	r1, r1, r5
 80021ce:	eb62 0206 	sbc.w	r2, r2, r6
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	0194      	lsls	r4, r2, #6
 80021dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021e0:	018b      	lsls	r3, r1, #6
 80021e2:	1a5b      	subs	r3, r3, r1
 80021e4:	eb64 0402 	sbc.w	r4, r4, r2
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	00e2      	lsls	r2, r4, #3
 80021f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021f6:	00d9      	lsls	r1, r3, #3
 80021f8:	460b      	mov	r3, r1
 80021fa:	4614      	mov	r4, r2
 80021fc:	195b      	adds	r3, r3, r5
 80021fe:	eb44 0406 	adc.w	r4, r4, r6
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	02a2      	lsls	r2, r4, #10
 800220c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002210:	0299      	lsls	r1, r3, #10
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	f7fd ffee 	bl	8000204 <__aeabi_uldivmod>
 8002228:	4603      	mov	r3, r0
 800222a:	460c      	mov	r4, r1
 800222c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800222e:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	e087      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002252:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	ea03 0501 	and.w	r5, r3, r1
 8002276:	ea04 0602 	and.w	r6, r4, r2
 800227a:	4a3c      	ldr	r2, [pc, #240]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800227c:	fb02 f106 	mul.w	r1, r2, r6
 8002280:	2200      	movs	r2, #0
 8002282:	fb02 f205 	mul.w	r2, r2, r5
 8002286:	440a      	add	r2, r1
 8002288:	4938      	ldr	r1, [pc, #224]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800228a:	fba5 0101 	umull	r0, r1, r5, r1
 800228e:	1853      	adds	r3, r2, r1
 8002290:	4619      	mov	r1, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	461a      	mov	r2, r3
 800229a:	4623      	mov	r3, r4
 800229c:	f7fd ffb2 	bl	8000204 <__aeabi_uldivmod>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e049      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	ea03 0501 	and.w	r5, r3, r1
 80022be:	ea04 0602 	and.w	r6, r4, r2
 80022c2:	4629      	mov	r1, r5
 80022c4:	4632      	mov	r2, r6
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	0154      	lsls	r4, r2, #5
 80022d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022d4:	014b      	lsls	r3, r1, #5
 80022d6:	4619      	mov	r1, r3
 80022d8:	4622      	mov	r2, r4
 80022da:	1b49      	subs	r1, r1, r5
 80022dc:	eb62 0206 	sbc.w	r2, r2, r6
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	0194      	lsls	r4, r2, #6
 80022ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	1a5b      	subs	r3, r3, r1
 80022f2:	eb64 0402 	sbc.w	r4, r4, r2
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002304:	00d9      	lsls	r1, r3, #3
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	195b      	adds	r3, r3, r5
 800230c:	eb44 0406 	adc.w	r4, r4, r6
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	02a2      	lsls	r2, r4, #10
 800231a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800231e:	0299      	lsls	r1, r3, #10
 8002320:	460b      	mov	r3, r1
 8002322:	4614      	mov	r4, r2
 8002324:	4618      	mov	r0, r3
 8002326:	4621      	mov	r1, r4
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	461a      	mov	r2, r3
 8002330:	4623      	mov	r3, r4
 8002332:	f7fd ff67 	bl	8000204 <__aeabi_uldivmod>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0f1b      	lsrs	r3, r3, #28
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	613b      	str	r3, [r7, #16]
      break;
 8002352:	e002      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002356:	613b      	str	r3, [r7, #16]
      break;
 8002358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235a:	693b      	ldr	r3, [r7, #16]
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	00f42400 	.word	0x00f42400
 800236c:	017d7840 	.word	0x017d7840

08002370 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8083 	beq.w	8002490 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800238a:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002396:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a2:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ae:	d00c      	beq.n	80023ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b0:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d112      	bne.n	80023e2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c8:	d10b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d05b      	beq.n	800248e <HAL_RCC_OscConfig+0x11e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d157      	bne.n	800248e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e216      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x8a>
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e01d      	b.n	8002436 <HAL_RCC_OscConfig+0xc6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0xae>
 8002404:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800240a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0xc6>
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6c      	ldr	r2, [pc, #432]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe f8c7 	bl	80005d0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002446:	f7fe f8c3 	bl	80005d0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1db      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002458:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0xd6>
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe f8b3 	bl	80005d0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246e:	f7fe f8af 	bl	80005d0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1c7      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0xfe>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d06f      	beq.n	800257c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d017      	beq.n	80024d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024b4:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c0:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d11c      	bne.n	8002506 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024cc:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d116      	bne.n	8002506 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x180>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e18f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4938      	ldr	r1, [pc, #224]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002504:	e03a      	b.n	800257c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe f85c 	bl	80005d0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe f858 	bl	80005d0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e170      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4925      	ldr	r1, [pc, #148]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	e015      	b.n	800257c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe f83b 	bl	80005d0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe f837 	bl	80005d0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e14f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d037      	beq.n	80025f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d016      	beq.n	80025be <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x278>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe f81b 	bl	80005d0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259e:	f7fe f817 	bl	80005d0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e12f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x22e>
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_RCC_OscConfig+0x278>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe f804 	bl	80005d0 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ca:	e00f      	b.n	80025ec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025cc:	f7fe f800 	bl	80005d0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d908      	bls.n	80025ec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e118      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	42470000 	.word	0x42470000
 80025e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b8a      	ldr	r3, [pc, #552]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e9      	bne.n	80025cc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8097 	beq.w	8002734 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b83      	ldr	r3, [pc, #524]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b7c      	ldr	r3, [pc, #496]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7fd ffbf 	bl	80005d0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7fd ffbb 	bl	80005d0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0d3      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x31a>
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x354>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x33c>
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x354>
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a59      	ldr	r2, [pc, #356]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026be:	f023 0304 	bic.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fd ff80 	bl	80005d0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fd ff7c 	bl	80005d0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e092      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ee      	beq.n	80026d4 <HAL_RCC_OscConfig+0x364>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fd ff6a 	bl	80005d0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fd ff66 	bl	80005d0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e07c      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ee      	bne.n	8002700 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d068      	beq.n	800280e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d060      	beq.n	800280a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d145      	bne.n	80027dc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4b0>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fd ff3b 	bl	80005d0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fd ff37 	bl	80005d0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e04f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	019b      	lsls	r3, r3, #6
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	061b      	lsls	r3, r3, #24
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	071b      	lsls	r3, r3, #28
 80027a8:	491b      	ldr	r1, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x4b0>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fd ff0c 	bl	80005d0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fd ff08 	bl	80005d0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e020      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x44c>
 80027da:	e018      	b.n	800280e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x4b0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fd fef5 	bl	80005d0 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fd fef1 	bl	80005d0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e009      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x47a>
 8002808:	e001      	b.n	800280e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000
 8002820:	42470060 	.word	0x42470060

08002824 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e01d      	b.n	8002872 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f009 ffdf 	bl	800c80c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f810 	bl	800287c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b08e      	sub	sp, #56	; 0x38
 8002880:	af04      	add	r7, sp, #16
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800289c:	2376      	movs	r3, #118	; 0x76
 800289e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681d      	ldr	r5, [r3, #0]
 80028a4:	466c      	mov	r4, sp
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b8:	4628      	mov	r0, r5
 80028ba:	f001 fe81 	bl	80045c0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_SD_InitCard+0xb4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 fec2 	bl	8004652 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_SD_InitCard+0xb4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80028d4:	2002      	movs	r0, #2
 80028d6:	f7fd fe87 	bl	80005e8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fee6 	bl	80036ac <SD_PowerON>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e013      	b.n	8002928 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fe0a 	bl	800351a <SD_InitCard>
 8002906:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bdb0      	pop	{r4, r5, r7, pc}
 8002930:	422580a0 	.word	0x422580a0

08002934 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08f      	sub	sp, #60	; 0x3c
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002946:	f7fd fe43 	bl	80005d0 <HAL_GetTick>
 800294a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e176      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 8169 	bne.w	8002c4a <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	441a      	add	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	429a      	cmp	r2, r3
 800298a:	d907      	bls.n	800299c <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e15d      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fed9 	bl	800477a <SDMMC_CmdBlockLength>
 80029c8:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e132      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80029fe:	2390      	movs	r3, #144	; 0x90
 8002a00:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f107 0210 	add.w	r2, r7, #16
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 fe82 	bl	8004722 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d90a      	bls.n	8002a3a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2202      	movs	r2, #2
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 feea 	bl	800480a <SDMMC_CmdReadMultiBlock>
 8002a36:	6378      	str	r0, [r7, #52]	; 0x34
 8002a38:	e009      	b.n	8002a4e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 febb 	bl	80047c2 <SDMMC_CmdReadSingleBlock>
 8002a4c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d04a      	beq.n	8002aea <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0f0      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
 8002a88:	e00d      	b.n	8002aa6 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	18d4      	adds	r4, r2, r3
 8002a96:	4608      	mov	r0, r1
 8002a98:	f001 fdbd 	bl	8004616 <SDIO_ReadFIFO>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d9ee      	bls.n	8002a8a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	3320      	adds	r3, #32
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_SD_ReadBlocks+0x194>
 8002ab8:	f7fd fd8a 	bl	80005d0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d810      	bhi.n	8002aea <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0b6      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0be      	beq.n	8002a76 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d020      	beq.n	8002b48 <HAL_SD_ReadBlocks+0x214>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d91d      	bls.n	8002b48 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d019      	beq.n	8002b48 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 fee3 	bl	80048e4 <SDMMC_CmdStopTransfer>
 8002b1e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e087      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	f043 0208 	orr.w	r2, r3, #8
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e06f      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f043 0202 	orr.w	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e057      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d037      	beq.n	8002c26 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e03f      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fd1a 	bl	8004616 <SDIO_ReadFIFO>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	3304      	adds	r3, #4
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_SD_ReadBlocks+0x2d0>
 8002bf4:	f7fd fcec 	bl	80005d0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d810      	bhi.n	8002c26 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e018      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1d1      	bne.n	8002bd8 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e006      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	373c      	adds	r7, #60	; 0x3c
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}

08002c60 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8002c72:	f7fd fcad 	bl	80005d0 <HAL_GetTick>
 8002c76:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e147      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	f040 813a 	bne.w	8002f18 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	441a      	add	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d907      	bls.n	8002cc8 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e12e      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	025b      	lsls	r3, r3, #9
 8002ce4:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fd43 	bl	800477a <SDMMC_CmdBlockLength>
 8002cf4:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e103      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d90a      	bls.n	8002d3a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fdb2 	bl	800489a <SDMMC_CmdWriteMultiBlock>
 8002d36:	6378      	str	r0, [r7, #52]	; 0x34
 8002d38:	e009      	b.n	8002d4e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 fd83 	bl	8004852 <SDMMC_CmdWriteSingleBlock>
 8002d4c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0d7      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	025b      	lsls	r3, r3, #9
 8002d80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d82:	2390      	movs	r3, #144	; 0x90
 8002d84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f107 0210 	add.w	r2, r7, #16
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fcc0 	bl	8004722 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002da2:	e037      	b.n	8002e14 <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
 8002db6:	e00b      	b.n	8002dd0 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f001 fc33 	bl	8004630 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	3301      	adds	r3, #1
 8002dce:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	2b07      	cmp	r3, #7
 8002dd4:	d9f0      	bls.n	8002db8 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	3320      	adds	r3, #32
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_SD_WriteBlocks+0x192>
 8002de2:	f7fd fbf5 	bl	80005d0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d810      	bhi.n	8002e14 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e088      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0c0      	beq.n	8002da4 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_SD_WriteBlocks+0x212>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d91d      	bls.n	8002e72 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d019      	beq.n	8002e72 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fd4e 	bl	80048e4 <SDMMC_CmdStopTransfer>
 8002e48:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e059      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e029      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e011      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e006      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3738      	adds	r7, #56	; 0x38
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	0e1b      	lsrs	r3, r3, #24
 8002fac:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	88db      	ldrh	r3, [r3, #6]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	09db      	lsrs	r3, r3, #7
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2200      	movs	r2, #0
 800303a:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 8087 	bne.w	8003154 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003056:	b2db      	uxtb	r3, r3
 8003058:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	431a      	orrs	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306c:	0e1b      	lsrs	r3, r3, #24
 800306e:	b2db      	uxtb	r3, r3
 8003070:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	431a      	orrs	r2, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b2da      	uxtb	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	b2da      	uxtb	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0306 	and.w	r3, r3, #6
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	7e1b      	ldrb	r3, [r3, #24]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	09db      	lsrs	r3, r3, #7
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3302      	adds	r3, #2
 8003114:	2201      	movs	r2, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800311e:	fb02 f203 	mul.w	r2, r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	7a1b      	ldrb	r3, [r3, #8]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	2301      	movs	r3, #1
 8003130:	fa03 f202 	lsl.w	r2, r3, r2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003140:	0a52      	lsrs	r2, r2, #9
 8003142:	fb02 f203 	mul.w	r2, r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003150:	661a      	str	r2, [r3, #96]	; 0x60
 8003152:	e04d      	b.n	80031f0 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	2b01      	cmp	r3, #1
 800315a:	d138      	bne.n	80031ce <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003160:	b2db      	uxtb	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003174:	0e1b      	lsrs	r3, r3, #24
 8003176:	b2db      	uxtb	r3, r3
 8003178:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	431a      	orrs	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	b2db      	uxtb	r3, r3
 8003190:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	431a      	orrs	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	029a      	lsls	r2, r3, #10
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
 80031cc:	e010      	b.n	80031f0 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0c1      	b.n	8003374 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800320c:	b2da      	uxtb	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003216:	b2db      	uxtb	r3, r3
 8003218:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	7e9b      	ldrb	r3, [r3, #26]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4313      	orrs	r3, r2
 800322e:	b2da      	uxtb	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323c:	b2da      	uxtb	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	b2db      	uxtb	r3, r3
 800324a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	09db      	lsrs	r3, r3, #7
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	b2da      	uxtb	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b2db      	uxtb	r3, r3
 8003296:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	7fdb      	ldrb	r3, [r3, #31]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4313      	orrs	r3, r2
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	09db      	lsrs	r3, r3, #7
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	b2da      	uxtb	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	b2da      	uxtb	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	b2db      	uxtb	r3, r3
 8003356:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003362:	b2da      	uxtb	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b08e      	sub	sp, #56	; 0x38
 80033dc:	af04      	add	r7, sp, #16
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d02e      	beq.n	8003454 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d106      	bne.n	800340c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
 800340a:	e029      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d10a      	bne.n	800342a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa1b 	bl	8003850 <SD_WideBus_Enable>
 800341a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
 8003428:	e01a      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fa5a 	bl	80038ea <SD_WideBus_Disable>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
 8003444:	e00c      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
 8003452:	e005      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e024      	b.n	80034c8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681d      	ldr	r5, [r3, #0]
 80034a4:	466c      	mov	r4, sp
 80034a6:	f107 0318 	add.w	r3, r7, #24
 80034aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b8:	4628      	mov	r0, r5
 80034ba:	f001 f881 	bl	80045c0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}

080034d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80034d8:	2304      	movs	r3, #4
 80034da:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f986 	bl	80037fc <SD_SendStatus>
 80034f0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0a5b      	lsrs	r3, r3, #9
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003510:	7dfb      	ldrb	r3, [r7, #23]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800351a:	b5b0      	push	{r4, r5, r7, lr}
 800351c:	b094      	sub	sp, #80	; 0x50
 800351e:	af04      	add	r7, sp, #16
 8003520:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8003526:	2301      	movs	r3, #1
 8003528:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f001 f89d 	bl	800466e <SDIO_GetPowerState>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800353a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800353e:	e0b1      	b.n	80036a4 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	2b03      	cmp	r3, #3
 8003546:	d02f      	beq.n	80035a8 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fae3 	bl	8004b18 <SDMMC_CmdSendCID>
 8003552:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <SD_InitCard+0x44>
    {
      return errorstate;
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	e0a2      	b.n	80036a4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f8c7 	bl	80046f8 <SDIO_GetResponse>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2104      	movs	r1, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f8be 	bl	80046f8 <SDIO_GetResponse>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2108      	movs	r1, #8
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f8b5 	bl	80046f8 <SDIO_GetResponse>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	210c      	movs	r1, #12
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f8ac 	bl	80046f8 <SDIO_GetResponse>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d00d      	beq.n	80035cc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f107 020e 	add.w	r2, r7, #14
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 faed 	bl	8004b9a <SDMMC_CmdSetRelAdd>
 80035c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <SD_InitCard+0xb2>
    {
      return errorstate;
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	e06b      	b.n	80036a4 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d036      	beq.n	8003642 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f001 fab5 	bl	8004b58 <SDMMC_CmdSendCSD>
 80035ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80035f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <SD_InitCard+0xe0>
    {
      return errorstate;
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	e054      	b.n	80036a4 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f879 	bl	80046f8 <SDIO_GetResponse>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2104      	movs	r1, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f870 	bl	80046f8 <SDIO_GetResponse>
 8003618:	4602      	mov	r2, r0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2108      	movs	r1, #8
 8003624:	4618      	mov	r0, r3
 8003626:	f001 f867 	bl	80046f8 <SDIO_GetResponse>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	210c      	movs	r1, #12
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f85e 	bl	80046f8 <SDIO_GetResponse>
 800363c:	4602      	mov	r2, r0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2104      	movs	r1, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f855 	bl	80046f8 <SDIO_GetResponse>
 800364e:	4603      	mov	r3, r0
 8003650:	0d1a      	lsrs	r2, r3, #20
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4619      	mov	r1, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fc66 	bl	8002f2e <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	461a      	mov	r2, r3
 8003672:	4623      	mov	r3, r4
 8003674:	4608      	mov	r0, r1
 8003676:	f001 f959 	bl	800492c <SDMMC_CmdSelDesel>
 800367a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <SD_InitCard+0x16c>
  {
    return errorstate;
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	e00e      	b.n	80036a4 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681d      	ldr	r5, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	466c      	mov	r4, sp
 800368e:	f103 0210 	add.w	r2, r3, #16
 8003692:	ca07      	ldmia	r2, {r0, r1, r2}
 8003694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003698:	3304      	adds	r3, #4
 800369a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369c:	4628      	mov	r0, r5
 800369e:	f000 ff8f 	bl	80045c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3740      	adds	r7, #64	; 0x40
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bdb0      	pop	{r4, r5, r7, pc}

080036ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 f954 	bl	8004976 <SDMMC_CmdGoIdleState>
 80036ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <SD_PowerON+0x2e>
  {
    return errorstate;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	e08c      	b.n	80037f4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f969 	bl	80049b6 <SDMMC_CmdOperCond>
 80036e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03d      	beq.n	8003768 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80036f2:	e032      	b.n	800375a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fe:	4293      	cmp	r3, r2
 8003700:	d102      	bne.n	8003708 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003706:	e075      	b.n	80037f4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f972 	bl	80049f8 <SDMMC_CmdAppCommand>
 8003714:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800371c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003720:	e068      	b.n	80037f4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f989 	bl	8004a40 <SDMMC_CmdAppOperCommand>
 800372e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003736:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800373a:	e05b      	b.n	80037f4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ffd8 	bl	80046f8 <SDIO_GetResponse>
 8003748:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	0fdb      	lsrs	r3, r3, #31
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <SD_PowerON+0xaa>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <SD_PowerON+0xac>
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0c9      	beq.n	80036f4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
 8003766:	e044      	b.n	80037f2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800376e:	e031      	b.n	80037d4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	60ba      	str	r2, [r7, #8]
 8003776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377a:	4293      	cmp	r3, r2
 800377c:	d102      	bne.n	8003784 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800377e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003782:	e037      	b.n	80037f4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 f934 	bl	80049f8 <SDMMC_CmdAppCommand>
 8003790:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SD_PowerON+0xf0>
      {
        return errorstate;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	e02b      	b.n	80037f4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 f94b 	bl	8004a40 <SDMMC_CmdAppOperCommand>
 80037aa:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SD_PowerON+0x10a>
      {
        return errorstate;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e01e      	b.n	80037f4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 ff9b 	bl	80046f8 <SDIO_GetResponse>
 80037c2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	0fdb      	lsrs	r3, r3, #31
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <SD_PowerON+0x124>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <SD_PowerON+0x126>
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ca      	beq.n	8003770 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ea:	e002      	b.n	80037f2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003814:	e018      	b.n	8003848 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f001 f9dc 	bl	8004be0 <SDMMC_CmdSendStatus>
 8003828:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	e009      	b.n	8003848 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 ff5c 	bl	80046f8 <SDIO_GetResponse>
 8003840:	4602      	mov	r2, r0
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 ff44 	bl	80046f8 <SDIO_GetResponse>
 8003870:	4603      	mov	r3, r0
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387a:	d102      	bne.n	8003882 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800387c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003880:	e02f      	b.n	80038e2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f87b 	bl	8003984 <SD_FindSCR>
 800388e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	e023      	b.n	80038e2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01c      	beq.n	80038de <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f001 f8a1 	bl	80049f8 <SDMMC_CmdAppCommand>
 80038b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	e00f      	b.n	80038e2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 f8de 	bl	8004a8a <SDMMC_CmdBusWidth>
 80038ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	e003      	b.n	80038e2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80038da:	2300      	movs	r3, #0
 80038dc:	e001      	b.n	80038e2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fef7 	bl	80046f8 <SDIO_GetResponse>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003914:	d102      	bne.n	800391c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800391a:	e02f      	b.n	800397c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f82e 	bl	8003984 <SD_FindSCR>
 8003928:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e023      	b.n	800397c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01c      	beq.n	8003978 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f001 f854 	bl	80049f8 <SDMMC_CmdAppCommand>
 8003950:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	e00f      	b.n	800397c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f001 f891 	bl	8004a8a <SDMMC_CmdBusWidth>
 8003968:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	e003      	b.n	800397c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8003974:	2300      	movs	r3, #0
 8003976:	e001      	b.n	800397c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003978:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b08f      	sub	sp, #60	; 0x3c
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800398e:	2300      	movs	r3, #0
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003992:	f7fc fe1d 	bl	80005d0 <HAL_GetTick>
 8003996:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2108      	movs	r1, #8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fee5 	bl	800477a <SDMMC_CmdBlockLength>
 80039b0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <SD_FindSCR+0x38>
  {
    return errorstate;
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	e0a8      	b.n	8003b0e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f001 f815 	bl	80049f8 <SDMMC_CmdAppCommand>
 80039ce:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SD_FindSCR+0x56>
  {
    return errorstate;
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	e099      	b.n	8003b0e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80039e0:	2308      	movs	r3, #8
 80039e2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80039e4:	2330      	movs	r3, #48	; 0x30
 80039e6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f107 0214 	add.w	r2, r7, #20
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fe8f 	bl	8004722 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f862 	bl	8004ad2 <SDMMC_CmdSendSCR>
 8003a0e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d022      	beq.n	8003a5c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	e079      	b.n	8003b0e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f107 020c 	add.w	r2, r7, #12
 8003a34:	18d4      	adds	r4, r2, r3
 8003a36:	4608      	mov	r0, r1
 8003a38:	f000 fded 	bl	8004616 <SDIO_ReadFIFO>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	6023      	str	r3, [r4, #0]
      index++;
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	3301      	adds	r3, #1
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a46:	f7fc fdc3 	bl	80005d0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d102      	bne.n	8003a5c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003a56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a5a:	e058      	b.n	8003b0e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a62:	f240 432a 	movw	r3, #1066	; 0x42a
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0d6      	beq.n	8003a1a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003a82:	2308      	movs	r3, #8
 8003a84:	e043      	b.n	8003b0e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e036      	b.n	8003b0e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e029      	b.n	8003b0e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	061a      	lsls	r2, r3, #24
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ad0:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003ada:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003ae6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003ae8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	061a      	lsls	r2, r3, #24
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003af6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b00:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	373c      	adds	r7, #60	; 0x3c
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}

08003b16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e056      	b.n	8003bd6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f008 feca 	bl	800c8dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0104 	and.w	r1, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * const pData, uint16_t Size, uint32_t Timeout)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_SPI_Transmit+0x22>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e11e      	b.n	8003e3e <HAL_SPI_Transmit+0x260>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c08:	f7fc fce2 	bl	80005d0 <HAL_GetTick>
 8003c0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d002      	beq.n	8003c24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c22:	e103      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0x52>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c34:	e0fa      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d107      	bne.n	8003c8e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d007      	beq.n	8003cac <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb4:	d14b      	bne.n	8003d4e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0xe6>
 8003cbe:	8afb      	ldrh	r3, [r7, #22]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13e      	bne.n	8003d42 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ce8:	e02b      	b.n	8003d42 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d112      	bne.n	8003d1e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d1c:	e011      	b.n	8003d42 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1e:	f7fc fc57 	bl	80005d0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d803      	bhi.n	8003d36 <HAL_SPI_Transmit+0x158>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_Transmit+0x15e>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d40:	e074      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ce      	bne.n	8003cea <HAL_SPI_Transmit+0x10c>
 8003d4c:	e04c      	b.n	8003de8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x17e>
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d140      	bne.n	8003dde <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d82:	e02c      	b.n	8003dde <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d113      	bne.n	8003dba <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003db8:	e011      	b.n	8003dde <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dba:	f7fc fc09 	bl	80005d0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d803      	bhi.n	8003dd2 <HAL_SPI_Transmit+0x1f4>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d102      	bne.n	8003dd8 <HAL_SPI_Transmit+0x1fa>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ddc:	e026      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1cd      	bne.n	8003d84 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	6839      	ldr	r1, [r7, #0]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fba5 	bl	800453c <SPI_EndRxTxTransaction>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e000      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
  }

error:
 8003e2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t* const pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b088      	sub	sp, #32
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e62:	d112      	bne.n	8003e8a <HAL_SPI_Receive+0x44>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10e      	bne.n	8003e8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8e9 	bl	8004058 <HAL_SPI_TransmitReceive>
 8003e86:	4603      	mov	r3, r0
 8003e88:	e0e2      	b.n	8004050 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_SPI_Receive+0x52>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e0db      	b.n	8004050 <HAL_SPI_Receive+0x20a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea0:	f7fc fb96 	bl	80005d0 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d002      	beq.n	8003eb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eb6:	e0c2      	b.n	800403e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_SPI_Receive+0x7e>
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ec8:	e0b9      	b.n	800403e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f10:	d107      	bne.n	8003f22 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d162      	bne.n	800400e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f48:	e02e      	b.n	8003fa8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d115      	bne.n	8003f84 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f103 020c 	add.w	r2, r3, #12
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f82:	e011      	b.n	8003fa8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f84:	f7fc fb24 	bl	80005d0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d803      	bhi.n	8003f9c <HAL_SPI_Receive+0x156>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d102      	bne.n	8003fa2 <HAL_SPI_Receive+0x15c>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fa6:	e04a      	b.n	800403e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1cb      	bne.n	8003f4a <HAL_SPI_Receive+0x104>
 8003fb2:	e031      	b.n	8004018 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d113      	bne.n	8003fea <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe8:	e011      	b.n	800400e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fea:	f7fc faf1 	bl	80005d0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d803      	bhi.n	8004002 <HAL_SPI_Receive+0x1bc>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d102      	bne.n	8004008 <HAL_SPI_Receive+0x1c2>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800400c:	e017      	b.n	800403e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1cd      	bne.n	8003fb4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fa27 	bl	8004470 <SPI_EndRxTransaction>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
 800403a:	e000      	b.n	800403e <HAL_SPI_Receive+0x1f8>
  }

error :
 800403c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004066:	2301      	movs	r3, #1
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_SPI_TransmitReceive+0x26>
 800407a:	2302      	movs	r3, #2
 800407c:	e18a      	b.n	8004394 <HAL_SPI_TransmitReceive+0x33c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004086:	f7fc faa3 	bl	80005d0 <HAL_GetTick>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d00f      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x70>
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ae:	d107      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x68>
 80040b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d003      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
 80040c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040c6:	e15b      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_SPI_TransmitReceive+0x82>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_TransmitReceive+0x82>
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040e0:	e14e      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d003      	beq.n	80040f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2205      	movs	r2, #5
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	887a      	ldrh	r2, [r7, #2]
 800411e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d007      	beq.n	800414a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d178      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x10a>
 800415c:	8b7b      	ldrh	r3, [r7, #26]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d166      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004186:	e053      	b.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d11b      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x176>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x176>
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d113      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d119      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x1b8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	b292      	uxth	r2, r2
 80041f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420c:	2301      	movs	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004210:	f7fc f9de 	bl	80005d0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421c:	429a      	cmp	r2, r3
 800421e:	d807      	bhi.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d003      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800422e:	e0a7      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1a6      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x130>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1a1      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x130>
 8004244:	e07c      	b.n	8004340 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x1fc>
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d16b      	bne.n	800432c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	e057      	b.n	800432c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d11c      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x26c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x26c>
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b01      	cmp	r3, #1
 8004298:	d114      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d119      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x2ae>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d014      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004302:	2301      	movs	r3, #1
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004306:	f7fc f963 	bl	80005d0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004312:	429a      	cmp	r2, r3
 8004314:	d803      	bhi.n	800431e <HAL_SPI_TransmitReceive+0x2c6>
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d102      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x2cc>
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d103      	bne.n	800432c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800432a:	e029      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1a2      	bne.n	800427c <HAL_SPI_TransmitReceive+0x224>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d19d      	bne.n	800427c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f8f9 	bl	800453c <SPI_EndRxTxTransaction>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800435c:	e010      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	e000      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800437e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004394:	4618      	mov	r0, r3
 8004396:	3730      	adds	r7, #48	; 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ac:	e04c      	b.n	8004448 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d048      	beq.n	8004448 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043b6:	f7fc f90b 	bl	80005d0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d902      	bls.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x30>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d13d      	bne.n	8004448 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e4:	d111      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ee:	d004      	beq.n	80043fa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f8:	d107      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004408:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004412:	d10f      	bne.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e00f      	b.n	8004468 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	429a      	cmp	r2, r3
 8004464:	d1a3      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004484:	d111      	bne.n	80044aa <SPI_EndRxTransaction+0x3a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448e:	d004      	beq.n	800449a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d107      	bne.n	80044aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d12a      	bne.n	800450a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d012      	beq.n	80044e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff ff67 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02d      	beq.n	8004530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e026      	b.n	8004532 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	2101      	movs	r1, #1
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ff54 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01a      	beq.n	8004530 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e013      	b.n	8004532 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	2101      	movs	r1, #1
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff ff41 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e000      	b.n	8004532 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <SPI_EndRxTxTransaction+0x7c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <SPI_EndRxTxTransaction+0x80>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0d5b      	lsrs	r3, r3, #21
 8004554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d112      	bne.n	800458e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ff12 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e00f      	b.n	80045ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3b01      	subs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d0f2      	beq.n	800458e <SPI_EndRxTxTransaction+0x52>
 80045a8:	e000      	b.n	80045ac <SPI_EndRxTxTransaction+0x70>
        break;
 80045aa:	bf00      	nop
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000020c 	.word	0x2000020c
 80045bc:	165e9f81 	.word	0x165e9f81

080045c0 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80045c0:	b084      	sub	sp, #16
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	f107 001c 	add.w	r0, r7, #28
 80045ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80045d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80045d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80045da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80045de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80045e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80045e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80045ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80045fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	b004      	add	sp, #16
 8004614:	4770      	bx	lr

08004616 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0303 	and.w	r3, r3, #3
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80046ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80046b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80046c4:	f023 030f 	bic.w	r3, r3, #15
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	b2db      	uxtb	r3, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3314      	adds	r3, #20
 800470a:	461a      	mov	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4413      	add	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
}  
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004748:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800474e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004754:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0

}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b088      	sub	sp, #32
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800478c:	2310      	movs	r3, #16
 800478e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004790:	2340      	movs	r3, #64	; 0x40
 8004792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff70 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	2110      	movs	r1, #16
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fa63 	bl	8004c7c <SDMMC_GetCmdResp1>
 80047b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047b8:	69fb      	ldr	r3, [r7, #28]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b088      	sub	sp, #32
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80047d4:	2311      	movs	r3, #17
 80047d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff4c 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	2111      	movs	r1, #17
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa3f 	bl	8004c7c <SDMMC_GetCmdResp1>
 80047fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004800:	69fb      	ldr	r3, [r7, #28]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800481c:	2312      	movs	r3, #18
 800481e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004820:	2340      	movs	r3, #64	; 0x40
 8004822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ff28 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800483a:	f241 3288 	movw	r2, #5000	; 0x1388
 800483e:	2112      	movs	r1, #18
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa1b 	bl	8004c7c <SDMMC_GetCmdResp1>
 8004846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004864:	2318      	movs	r3, #24
 8004866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004868:	2340      	movs	r3, #64	; 0x40
 800486a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004874:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004876:	f107 0308 	add.w	r3, r7, #8
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff04 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	2118      	movs	r1, #24
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f9f7 	bl	8004c7c <SDMMC_GetCmdResp1>
 800488e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b088      	sub	sp, #32
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80048ac:	2319      	movs	r3, #25
 80048ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048b0:	2340      	movs	r3, #64	; 0x40
 80048b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048bc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fee0 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	2119      	movs	r1, #25
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f9d3 	bl	8004c7c <SDMMC_GetCmdResp1>
 80048d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048d8:	69fb      	ldr	r3, [r7, #28]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80048f4:	230c      	movs	r3, #12
 80048f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004904:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004906:	f107 0308 	add.w	r3, r7, #8
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff febc 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <SDMMC_CmdStopTransfer+0x44>)
 8004914:	210c      	movs	r1, #12
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9b0 	bl	8004c7c <SDMMC_GetCmdResp1>
 800491c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800491e:	69fb      	ldr	r3, [r7, #28]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	05f5e100 	.word	0x05f5e100

0800492c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004940:	2307      	movs	r3, #7
 8004942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004944:	2340      	movs	r3, #64	; 0x40
 8004946:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800494c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004950:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	4619      	mov	r1, r3
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fe96 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	2107      	movs	r1, #7
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f989 	bl	8004c7c <SDMMC_GetCmdResp1>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	; 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b088      	sub	sp, #32
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004996:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004998:	f107 0308 	add.w	r3, r7, #8
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fe73 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f93f 	bl	8004c28 <SDMMC_GetCmdError>
 80049aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ac:	69fb      	ldr	r3, [r7, #28]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80049c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80049c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80049c8:	2308      	movs	r3, #8
 80049ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049cc:	2340      	movs	r3, #64	; 0x40
 80049ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049da:	f107 0308 	add.w	r3, r7, #8
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fe52 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb10 	bl	800500c <SDMMC_GetCmdResp7>
 80049ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ee:	69fb      	ldr	r3, [r7, #28]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004a0a:	2337      	movs	r3, #55	; 0x37
 8004a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff fe31 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	2137      	movs	r1, #55	; 0x37
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f924 	bl	8004c7c <SDMMC_GetCmdResp1>
 8004a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a36:	69fb      	ldr	r3, [r7, #28]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004a5a:	2329      	movs	r3, #41	; 0x29
 8004a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a5e:	2340      	movs	r3, #64	; 0x40
 8004a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a6a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fe09 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fa25 	bl	8004ec8 <SDMMC_GetCmdResp3>
 8004a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a80:	69fb      	ldr	r3, [r7, #28]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b088      	sub	sp, #32
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004a9c:	2306      	movs	r3, #6
 8004a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004aa0:	2340      	movs	r3, #64	; 0x40
 8004aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fde8 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	2106      	movs	r1, #6
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8db 	bl	8004c7c <SDMMC_GetCmdResp1>
 8004ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b088      	sub	sp, #32
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004ae2:	2333      	movs	r3, #51	; 0x33
 8004ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004af4:	f107 0308 	add.w	r3, r7, #8
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fdc5 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	2133      	movs	r1, #51	; 0x33
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8b8 	bl	8004c7c <SDMMC_GetCmdResp1>
 8004b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004b2c:	23c0      	movs	r3, #192	; 0xc0
 8004b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b38:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b3a:	f107 0308 	add.w	r3, r7, #8
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fda2 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f97e 	bl	8004e48 <SDMMC_GetCmdResp2>
 8004b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004b6a:	2309      	movs	r3, #9
 8004b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004b6e:	23c0      	movs	r3, #192	; 0xc0
 8004b70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b7c:	f107 0308 	add.w	r3, r7, #8
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fd81 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f95d 	bl	8004e48 <SDMMC_GetCmdResp2>
 8004b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b90:	69fb      	ldr	r3, [r7, #28]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004bac:	2303      	movs	r3, #3
 8004bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bb0:	2340      	movs	r3, #64	; 0x40
 8004bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bbc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fd60 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	2103      	movs	r1, #3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9ae 	bl	8004f30 <SDMMC_GetCmdResp6>
 8004bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004bf2:	230d      	movs	r3, #13
 8004bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bf6:	2340      	movs	r3, #64	; 0x40
 8004bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c02:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c04:	f107 0308 	add.w	r3, r7, #8
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fd3d 	bl	800468a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c14:	210d      	movs	r1, #13
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f830 	bl	8004c7c <SDMMC_GetCmdResp1>
 8004c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004c28:	b490      	push	{r4, r7}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <SDMMC_GetCmdError+0x4c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <SDMMC_GetCmdError+0x50>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	0a5b      	lsrs	r3, r3, #9
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c44:	4623      	mov	r3, r4
 8004c46:	1e5c      	subs	r4, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c50:	e00a      	b.n	8004c68 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f2      	beq.n	8004c44 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc90      	pop	{r4, r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	2000020c 	.word	0x2000020c
 8004c78:	10624dd3 	.word	0x10624dd3

08004c7c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	460b      	mov	r3, r1
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c8a:	4b6c      	ldr	r3, [pc, #432]	; (8004e3c <SDMMC_GetCmdResp1+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a6c      	ldr	r2, [pc, #432]	; (8004e40 <SDMMC_GetCmdResp1+0x1c4>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	1e5c      	subs	r4, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ca8:	e0c3      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f2      	beq.n	8004c9c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cc8:	2304      	movs	r3, #4
 8004cca:	e0b2      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0a7      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff fcfb 	bl	80046de <SDIO_GetCommandResponse>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	7afb      	ldrb	r3, [r7, #11]
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d001      	beq.n	8004cf6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e09d      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff fcf9 	bl	80046f8 <SDIO_GetResponse>
 8004d06:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <SDMMC_GetCmdResp1+0x1c8>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e08d      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	da02      	bge.n	8004d22 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d20:	e087      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	e080      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	e079      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4c:	e071      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d5c:	e069      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6c:	e061      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d7c:	e059      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d8c:	e051      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d9c:	e049      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004da8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dac:	e041      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8004db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbc:	e039      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dcc:	e031      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004dd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ddc:	e029      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004de8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004dec:	e021      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004df8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dfc:	e019      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e0c:	e011      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004e18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e1c:	e009      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004e28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e2c:	e001      	b.n	8004e32 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	2000020c 	.word	0x2000020c
 8004e40:	10624dd3 	.word	0x10624dd3
 8004e44:	fdffe008 	.word	0xfdffe008

08004e48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004e48:	b490      	push	{r4, r7}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <SDMMC_GetCmdResp2+0x78>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <SDMMC_GetCmdResp2+0x7c>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	0a5b      	lsrs	r3, r3, #9
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e64:	4623      	mov	r3, r4
 8004e66:	1e5c      	subs	r4, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e70:	e020      	b.n	8004eb4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f2      	beq.n	8004e64 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e90:	2304      	movs	r3, #4
 8004e92:	e00f      	b.n	8004eb4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e004      	b.n	8004eb4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc90      	pop	{r4, r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	2000020c 	.word	0x2000020c
 8004ec4:	10624dd3 	.word	0x10624dd3

08004ec8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004ec8:	b490      	push	{r4, r7}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <SDMMC_GetCmdResp3+0x60>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <SDMMC_GetCmdResp3+0x64>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	0a5b      	lsrs	r3, r3, #9
 8004edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	1e5c      	subs	r4, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ef0:	e015      	b.n	8004f1e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f2      	beq.n	8004ee4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f10:	2304      	movs	r3, #4
 8004f12:	e004      	b.n	8004f1e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc90      	pop	{r4, r7}
 8004f26:	4770      	bx	lr
 8004f28:	2000020c 	.word	0x2000020c
 8004f2c:	10624dd3 	.word	0x10624dd3

08004f30 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <SDMMC_GetCmdResp6+0xd4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a31      	ldr	r2, [pc, #196]	; (8005008 <SDMMC_GetCmdResp6+0xd8>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	0a5b      	lsrs	r3, r3, #9
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f52:	4623      	mov	r3, r4
 8004f54:	1e5c      	subs	r4, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f5e:	e04c      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f64:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f2      	beq.n	8004f52 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f7e:	2304      	movs	r3, #4
 8004f80:	e03b      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e030      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fba0 	bl	80046de <SDIO_GetCommandResponse>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d001      	beq.n	8004fac <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e026      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff fb9e 	bl	80046f8 <SDIO_GetResponse>
 8004fbc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e011      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fe4:	e009      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ff4:	e001      	b.n	8004ffa <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd90      	pop	{r4, r7, pc}
 8005002:	bf00      	nop
 8005004:	2000020c 	.word	0x2000020c
 8005008:	10624dd3 	.word	0x10624dd3

0800500c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800500c:	b490      	push	{r4, r7}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005014:	4b18      	ldr	r3, [pc, #96]	; (8005078 <SDMMC_GetCmdResp7+0x6c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a18      	ldr	r2, [pc, #96]	; (800507c <SDMMC_GetCmdResp7+0x70>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0a5b      	lsrs	r3, r3, #9
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005028:	4623      	mov	r3, r4
 800502a:	1e5c      	subs	r4, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005034:	e01a      	b.n	800506c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f2      	beq.n	8005028 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005054:	2304      	movs	r3, #4
 8005056:	e009      	b.n	800506c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800506a:	2300      	movs	r3, #0
  
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bc90      	pop	{r4, r7}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	2000020c 	.word	0x2000020c
 800507c:	10624dd3 	.word	0x10624dd3

08005080 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <disk_status+0x30>)
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	79fa      	ldrb	r2, [r7, #7]
 8005098:	4905      	ldr	r1, [pc, #20]	; (80050b0 <disk_status+0x30>)
 800509a:	440a      	add	r2, r1
 800509c:	7a12      	ldrb	r2, [r2, #8]
 800509e:	4610      	mov	r0, r2
 80050a0:	4798      	blx	r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	200002bc 	.word	0x200002bc

080050b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	4a0d      	ldr	r2, [pc, #52]	; (80050fc <disk_initialize+0x48>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d111      	bne.n	80050f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <disk_initialize+0x48>)
 80050d0:	2101      	movs	r1, #1
 80050d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <disk_initialize+0x48>)
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	79fa      	ldrb	r2, [r7, #7]
 80050e2:	4906      	ldr	r1, [pc, #24]	; (80050fc <disk_initialize+0x48>)
 80050e4:	440a      	add	r2, r1
 80050e6:	7a12      	ldrb	r2, [r2, #8]
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200002bc 	.word	0x200002bc

08005100 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <disk_read+0x3c>)
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	689c      	ldr	r4, [r3, #8]
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	4a07      	ldr	r2, [pc, #28]	; (800513c <disk_read+0x3c>)
 8005120:	4413      	add	r3, r2
 8005122:	7a18      	ldrb	r0, [r3, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	47a0      	blx	r4
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005130:	7dfb      	ldrb	r3, [r7, #23]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}
 800513a:	bf00      	nop
 800513c:	200002bc 	.word	0x200002bc

08005140 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4603      	mov	r3, r0
 800514e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	4a0a      	ldr	r2, [pc, #40]	; (800517c <disk_write+0x3c>)
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68dc      	ldr	r4, [r3, #12]
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <disk_write+0x3c>)
 8005160:	4413      	add	r3, r2
 8005162:	7a18      	ldrb	r0, [r3, #8]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	47a0      	blx	r4
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd90      	pop	{r4, r7, pc}
 800517a:	bf00      	nop
 800517c:	200002bc 	.word	0x200002bc

08005180 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	603a      	str	r2, [r7, #0]
 800518a:	71fb      	strb	r3, [r7, #7]
 800518c:	460b      	mov	r3, r1
 800518e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <disk_ioctl+0x38>)
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	79fa      	ldrb	r2, [r7, #7]
 800519e:	4906      	ldr	r1, [pc, #24]	; (80051b8 <disk_ioctl+0x38>)
 80051a0:	440a      	add	r2, r1
 80051a2:	7a10      	ldrb	r0, [r2, #8]
 80051a4:	79b9      	ldrb	r1, [r7, #6]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	4798      	blx	r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	200002bc 	.word	0x200002bc

080051bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3301      	adds	r3, #1
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	b21a      	sxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	b21b      	sxth	r3, r3
 80051dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051de:	89fb      	ldrh	r3, [r7, #14]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3303      	adds	r3, #3
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	3202      	adds	r2, #2
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	3201      	adds	r2, #1
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
	return rv;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	887a      	ldrh	r2, [r7, #2]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	887b      	ldrh	r3, [r7, #2]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	887a      	ldrh	r2, [r7, #2]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	0a1b      	lsrs	r3, r3, #8
 80052a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00d      	beq.n	80052f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	1c53      	adds	r3, r2, #1
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1c59      	adds	r1, r3, #1
 80052e4:	6179      	str	r1, [r7, #20]
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f1      	bne.n	80052da <mem_cpy+0x1a>
	}
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005302:	b480      	push	{r7}
 8005304:	b087      	sub	sp, #28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	617a      	str	r2, [r7, #20]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3b01      	subs	r3, #1
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f3      	bne.n	8005312 <mem_set+0x10>
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005336:	b480      	push	{r7}
 8005338:	b089      	sub	sp, #36	; 0x24
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	61fa      	str	r2, [r7, #28]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	61ba      	str	r2, [r7, #24]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	1acb      	subs	r3, r1, r3
 8005362:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3b01      	subs	r3, #1
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <mem_cmp+0x40>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0eb      	beq.n	800534e <mem_cmp+0x18>

	return r;
 8005376:	697b      	ldr	r3, [r7, #20]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3724      	adds	r7, #36	; 0x24
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800538e:	e002      	b.n	8005396 <chk_chr+0x12>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3301      	adds	r3, #1
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <chk_chr+0x26>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d1f2      	bne.n	8005390 <chk_chr+0xc>
	return *str;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	781b      	ldrb	r3, [r3, #0]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e029      	b.n	8005424 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80053d0:	4a27      	ldr	r2, [pc, #156]	; (8005470 <chk_lock+0xb4>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	4413      	add	r3, r2
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01d      	beq.n	800541a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80053de:	4a24      	ldr	r2, [pc, #144]	; (8005470 <chk_lock+0xb4>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	4413      	add	r3, r2
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d116      	bne.n	800541e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80053f0:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <chk_lock+0xb4>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4413      	add	r3, r2
 80053f8:	3304      	adds	r3, #4
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005400:	429a      	cmp	r2, r3
 8005402:	d10c      	bne.n	800541e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005404:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <chk_lock+0xb4>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	3308      	adds	r3, #8
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005414:	429a      	cmp	r2, r3
 8005416:	d102      	bne.n	800541e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005418:	e007      	b.n	800542a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800541a:	2301      	movs	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d9d2      	bls.n	80053d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d109      	bne.n	8005444 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <chk_lock+0x80>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d101      	bne.n	8005440 <chk_lock+0x84>
 800543c:	2300      	movs	r3, #0
 800543e:	e010      	b.n	8005462 <chk_lock+0xa6>
 8005440:	2312      	movs	r3, #18
 8005442:	e00e      	b.n	8005462 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <chk_lock+0xa0>
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <chk_lock+0xb4>)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	4413      	add	r3, r2
 8005452:	330c      	adds	r3, #12
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545a:	d101      	bne.n	8005460 <chk_lock+0xa4>
 800545c:	2310      	movs	r3, #16
 800545e:	e000      	b.n	8005462 <chk_lock+0xa6>
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	2000029c 	.word	0x2000029c

08005474 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	e002      	b.n	8005486 <enq_lock+0x12>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3301      	adds	r3, #1
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d806      	bhi.n	800549a <enq_lock+0x26>
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <enq_lock+0x40>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	4413      	add	r3, r2
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f2      	bne.n	8005480 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b02      	cmp	r3, #2
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	2000029c 	.word	0x2000029c

080054b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e01f      	b.n	8005508 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80054c8:	4a41      	ldr	r2, [pc, #260]	; (80055d0 <inc_lock+0x118>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4413      	add	r3, r2
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d113      	bne.n	8005502 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80054da:	4a3d      	ldr	r2, [pc, #244]	; (80055d0 <inc_lock+0x118>)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	4413      	add	r3, r2
 80054e2:	3304      	adds	r3, #4
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d109      	bne.n	8005502 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80054ee:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <inc_lock+0x118>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	4413      	add	r3, r2
 80054f6:	3308      	adds	r3, #8
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80054fe:	429a      	cmp	r2, r3
 8005500:	d006      	beq.n	8005510 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d9dc      	bls.n	80054c8 <inc_lock+0x10>
 800550e:	e000      	b.n	8005512 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005510:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d132      	bne.n	800557e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e002      	b.n	8005524 <inc_lock+0x6c>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d806      	bhi.n	8005538 <inc_lock+0x80>
 800552a:	4a29      	ldr	r2, [pc, #164]	; (80055d0 <inc_lock+0x118>)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	4413      	add	r3, r2
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f2      	bne.n	800551e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d101      	bne.n	8005542 <inc_lock+0x8a>
 800553e:	2300      	movs	r3, #0
 8005540:	e040      	b.n	80055c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4922      	ldr	r1, [pc, #136]	; (80055d0 <inc_lock+0x118>)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	440b      	add	r3, r1
 800554e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	491e      	ldr	r1, [pc, #120]	; (80055d0 <inc_lock+0x118>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	440b      	add	r3, r1
 800555c:	3304      	adds	r3, #4
 800555e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695a      	ldr	r2, [r3, #20]
 8005564:	491a      	ldr	r1, [pc, #104]	; (80055d0 <inc_lock+0x118>)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	440b      	add	r3, r1
 800556c:	3308      	adds	r3, #8
 800556e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005570:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <inc_lock+0x118>)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	4413      	add	r3, r2
 8005578:	330c      	adds	r3, #12
 800557a:	2200      	movs	r2, #0
 800557c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <inc_lock+0xe0>
 8005584:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <inc_lock+0x118>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	4413      	add	r3, r2
 800558c:	330c      	adds	r3, #12
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <inc_lock+0xe0>
 8005594:	2300      	movs	r3, #0
 8005596:	e015      	b.n	80055c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <inc_lock+0xf8>
 800559e:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <inc_lock+0x118>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	4413      	add	r3, r2
 80055a6:	330c      	adds	r3, #12
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	e001      	b.n	80055b4 <inc_lock+0xfc>
 80055b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b4:	4906      	ldr	r1, [pc, #24]	; (80055d0 <inc_lock+0x118>)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	440b      	add	r3, r1
 80055bc:	330c      	adds	r3, #12
 80055be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	2000029c 	.word	0x2000029c

080055d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d825      	bhi.n	8005634 <dec_lock+0x60>
		n = Files[i].ctr;
 80055e8:	4a17      	ldr	r2, [pc, #92]	; (8005648 <dec_lock+0x74>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	4413      	add	r3, r2
 80055f0:	330c      	adds	r3, #12
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80055f6:	89fb      	ldrh	r3, [r7, #14]
 80055f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fc:	d101      	bne.n	8005602 <dec_lock+0x2e>
 80055fe:	2300      	movs	r3, #0
 8005600:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005602:	89fb      	ldrh	r3, [r7, #14]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <dec_lock+0x3a>
 8005608:	89fb      	ldrh	r3, [r7, #14]
 800560a:	3b01      	subs	r3, #1
 800560c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800560e:	4a0e      	ldr	r2, [pc, #56]	; (8005648 <dec_lock+0x74>)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	4413      	add	r3, r2
 8005616:	330c      	adds	r3, #12
 8005618:	89fa      	ldrh	r2, [r7, #14]
 800561a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <dec_lock+0x5a>
 8005622:	4a09      	ldr	r2, [pc, #36]	; (8005648 <dec_lock+0x74>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	4413      	add	r3, r2
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	737b      	strb	r3, [r7, #13]
 8005632:	e001      	b.n	8005638 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005634:	2302      	movs	r3, #2
 8005636:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005638:	7b7b      	ldrb	r3, [r7, #13]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	2000029c 	.word	0x2000029c

0800564c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e010      	b.n	800567c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800565a:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <clear_lock+0x44>)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d105      	bne.n	8005676 <clear_lock+0x2a>
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <clear_lock+0x44>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d9eb      	bls.n	800565a <clear_lock+0xe>
	}
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	2000029c 	.word	0x2000029c

08005694 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	78db      	ldrb	r3, [r3, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d034      	beq.n	8005712 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7858      	ldrb	r0, [r3, #1]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056b8:	2301      	movs	r3, #1
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	f7ff fd40 	bl	8005140 <disk_write>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
 80056ca:	e022      	b.n	8005712 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	1ad2      	subs	r2, r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d217      	bcs.n	8005712 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	789b      	ldrb	r3, [r3, #2]
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	e010      	b.n	800570c <sync_window+0x78>
					wsect += fs->fsize;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7858      	ldrb	r0, [r3, #1]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056fe:	2301      	movs	r3, #1
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	f7ff fd1d 	bl	8005140 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3b01      	subs	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d8eb      	bhi.n	80056ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d01b      	beq.n	800576c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ffad 	bl	8005694 <sync_window>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d113      	bne.n	800576c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7858      	ldrb	r0, [r3, #1]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800574e:	2301      	movs	r3, #1
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	f7ff fcd5 	bl	8005100 <disk_read>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800575c:	f04f 33ff 	mov.w	r3, #4294967295
 8005760:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff87 	bl	8005694 <sync_window>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d158      	bne.n	8005842 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d148      	bne.n	800582a <sync_fs+0xb2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d144      	bne.n	800582a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3330      	adds	r3, #48	; 0x30
 80057a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fda9 	bl	8005302 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3330      	adds	r3, #48	; 0x30
 80057b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fd38 	bl	8005232 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3330      	adds	r3, #48	; 0x30
 80057c6:	4921      	ldr	r1, [pc, #132]	; (800584c <sync_fs+0xd4>)
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fd4d 	bl	8005268 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3330      	adds	r3, #48	; 0x30
 80057d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057d6:	491e      	ldr	r1, [pc, #120]	; (8005850 <sync_fs+0xd8>)
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fd45 	bl	8005268 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3330      	adds	r3, #48	; 0x30
 80057e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7ff fd3b 	bl	8005268 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3330      	adds	r3, #48	; 0x30
 80057f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f7ff fd31 	bl	8005268 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7858      	ldrb	r0, [r3, #1]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581e:	2301      	movs	r3, #1
 8005820:	f7ff fc8e 	bl	8005140 <disk_write>
			fs->fsi_flag = 0;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fca4 	bl	8005180 <disk_ioctl>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <sync_fs+0xca>
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005842:	7bfb      	ldrb	r3, [r7, #15]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	41615252 	.word	0x41615252
 8005850:	61417272 	.word	0x61417272

08005854 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	3b02      	subs	r3, #2
 8005862:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	3b02      	subs	r3, #2
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d301      	bcc.n	8005874 <clust2sect+0x20>
 8005870:	2300      	movs	r3, #0
 8005872:	e008      	b.n	8005886 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	895b      	ldrh	r3, [r3, #10]
 8005878:	461a      	mov	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	fb03 f202 	mul.w	r2, r3, r2
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	4413      	add	r3, r2
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d904      	bls.n	80058b2 <get_fat+0x20>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e08c      	b.n	80059d2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d045      	beq.n	8005952 <get_fat+0xc0>
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d05d      	beq.n	8005986 <get_fat+0xf4>
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d177      	bne.n	80059be <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6a1a      	ldr	r2, [r3, #32]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	0a5b      	lsrs	r3, r3, #9
 80058e4:	4413      	add	r3, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	6938      	ldr	r0, [r7, #16]
 80058ea:	f7ff ff17 	bl	800571c <move_window>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d167      	bne.n	80059c4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	60fa      	str	r2, [r7, #12]
 80058fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005906:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6a1a      	ldr	r2, [r3, #32]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0a5b      	lsrs	r3, r3, #9
 8005910:	4413      	add	r3, r2
 8005912:	4619      	mov	r1, r3
 8005914:	6938      	ldr	r0, [r7, #16]
 8005916:	f7ff ff01 	bl	800571c <move_window>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d153      	bne.n	80059c8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4313      	orrs	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <get_fat+0xb6>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	e002      	b.n	800594e <get_fat+0xbc>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594e:	617b      	str	r3, [r7, #20]
			break;
 8005950:	e03f      	b.n	80059d2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6a1a      	ldr	r2, [r3, #32]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	4413      	add	r3, r2
 800595c:	4619      	mov	r1, r3
 800595e:	6938      	ldr	r0, [r7, #16]
 8005960:	f7ff fedc 	bl	800571c <move_window>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d130      	bne.n	80059cc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005978:	4413      	add	r3, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fc1e 	bl	80051bc <ld_word>
 8005980:	4603      	mov	r3, r0
 8005982:	617b      	str	r3, [r7, #20]
			break;
 8005984:	e025      	b.n	80059d2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6a1a      	ldr	r2, [r3, #32]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	09db      	lsrs	r3, r3, #7
 800598e:	4413      	add	r3, r2
 8005990:	4619      	mov	r1, r3
 8005992:	6938      	ldr	r0, [r7, #16]
 8005994:	f7ff fec2 	bl	800571c <move_window>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d118      	bne.n	80059d0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80059ac:	4413      	add	r3, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fc1c 	bl	80051ec <ld_dword>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ba:	617b      	str	r3, [r7, #20]
			break;
 80059bc:	e009      	b.n	80059d2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e006      	b.n	80059d2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059c4:	bf00      	nop
 80059c6:	e004      	b.n	80059d2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059c8:	bf00      	nop
 80059ca:	e002      	b.n	80059d2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059cc:	bf00      	nop
 80059ce:	e000      	b.n	80059d2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059d0:	bf00      	nop
		}
	}

	return val;
 80059d2:	697b      	ldr	r3, [r7, #20]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80059e8:	2302      	movs	r3, #2
 80059ea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	f240 80d6 	bls.w	8005ba0 <put_fat+0x1c4>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f080 80d0 	bcs.w	8005ba0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d073      	beq.n	8005af0 <put_fat+0x114>
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	f000 8091 	beq.w	8005b30 <put_fat+0x154>
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	f040 80c6 	bne.w	8005ba0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4413      	add	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	4413      	add	r3, r2
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fe74 	bl	800571c <move_window>
 8005a34:	4603      	mov	r3, r0
 8005a36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a38:	7ffb      	ldrb	r3, [r7, #31]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 80a9 	bne.w	8005b92 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	61b9      	str	r1, [r7, #24]
 8005a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a50:	4413      	add	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <put_fat+0x9e>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	b25a      	sxtb	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	4313      	orrs	r3, r2
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e001      	b.n	8005a7e <put_fat+0xa2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	0a5b      	lsrs	r3, r3, #9
 8005a90:	4413      	add	r3, r2
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff fe41 	bl	800571c <move_window>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a9e:	7ffb      	ldrb	r3, [r7, #31]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d178      	bne.n	8005b96 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab0:	4413      	add	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <put_fat+0xea>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	e00e      	b.n	8005ae4 <put_fat+0x108>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b25b      	sxtb	r3, r3
 8005acc:	f023 030f 	bic.w	r3, r3, #15
 8005ad0:	b25a      	sxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	b25b      	sxtb	r3, r3
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	70da      	strb	r2, [r3, #3]
			break;
 8005aee:	e057      	b.n	8005ba0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	4413      	add	r3, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fe0d 	bl	800571c <move_window>
 8005b02:	4603      	mov	r3, r0
 8005b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b06:	7ffb      	ldrb	r3, [r7, #31]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d146      	bne.n	8005b9a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005b1a:	4413      	add	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fb85 	bl	8005232 <st_word>
			fs->wflag = 1;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	70da      	strb	r2, [r3, #3]
			break;
 8005b2e:	e037      	b.n	8005ba0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	4413      	add	r3, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fded 	bl	800571c <move_window>
 8005b42:	4603      	mov	r3, r0
 8005b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b46:	7ffb      	ldrb	r3, [r7, #31]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d128      	bne.n	8005b9e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b60:	4413      	add	r3, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fb42 	bl	80051ec <ld_dword>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b6e:	4323      	orrs	r3, r4
 8005b70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b80:	4413      	add	r3, r2
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fb6f 	bl	8005268 <st_dword>
			fs->wflag = 1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	70da      	strb	r2, [r3, #3]
			break;
 8005b90:	e006      	b.n	8005ba0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005b92:	bf00      	nop
 8005b94:	e004      	b.n	8005ba0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005b9e:	bf00      	nop
		}
	}
	return res;
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3724      	adds	r7, #36	; 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd90      	pop	{r4, r7, pc}

08005baa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b088      	sub	sp, #32
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d904      	bls.n	8005bd0 <remove_chain+0x26>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d301      	bcc.n	8005bd4 <remove_chain+0x2a>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e04b      	b.n	8005c6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	69b8      	ldr	r0, [r7, #24]
 8005be2:	f7ff fefb 	bl	80059dc <put_fat>
 8005be6:	4603      	mov	r3, r0
 8005be8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005bea:	7ffb      	ldrb	r3, [r7, #31]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <remove_chain+0x4a>
 8005bf0:	7ffb      	ldrb	r3, [r7, #31]
 8005bf2:	e03b      	b.n	8005c6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7ff fe4b 	bl	8005892 <get_fat>
 8005bfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d031      	beq.n	8005c68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <remove_chain+0x64>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e02e      	b.n	8005c6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d101      	bne.n	8005c1a <remove_chain+0x70>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e028      	b.n	8005c6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	69b8      	ldr	r0, [r7, #24]
 8005c20:	f7ff fedc 	bl	80059dc <put_fat>
 8005c24:	4603      	mov	r3, r0
 8005c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c28:	7ffb      	ldrb	r3, [r7, #31]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <remove_chain+0x88>
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	e01c      	b.n	8005c6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	3b02      	subs	r3, #2
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d20b      	bcs.n	8005c58 <remove_chain+0xae>
			fs->free_clst++;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	791b      	ldrb	r3, [r3, #4]
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d3c6      	bcc.n	8005bf4 <remove_chain+0x4a>
 8005c66:	e000      	b.n	8005c6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <create_chain+0x2c>
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d31b      	bcc.n	8005cd8 <create_chain+0x64>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e018      	b.n	8005cd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fdf2 	bl	8005892 <get_fat>
 8005cae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d801      	bhi.n	8005cba <create_chain+0x46>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e070      	b.n	8005d9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d101      	bne.n	8005cc6 <create_chain+0x52>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e06a      	b.n	8005d9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d201      	bcs.n	8005cd4 <create_chain+0x60>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	e063      	b.n	8005d9c <create_chain+0x128>
		scl = clst;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d307      	bcc.n	8005cfc <create_chain+0x88>
				ncl = 2;
 8005cec:	2302      	movs	r3, #2
 8005cee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d901      	bls.n	8005cfc <create_chain+0x88>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e04f      	b.n	8005d9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005cfc:	69f9      	ldr	r1, [r7, #28]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fdc7 	bl	8005892 <get_fat>
 8005d04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00e      	beq.n	8005d2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d003      	beq.n	8005d1a <create_chain+0xa6>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d101      	bne.n	8005d1e <create_chain+0xaa>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	e03e      	b.n	8005d9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d1da      	bne.n	8005cdc <create_chain+0x68>
 8005d26:	2300      	movs	r3, #0
 8005d28:	e038      	b.n	8005d9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d30:	69f9      	ldr	r1, [r7, #28]
 8005d32:	6938      	ldr	r0, [r7, #16]
 8005d34:	f7ff fe52 	bl	80059dc <put_fat>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <create_chain+0xe2>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6938      	ldr	r0, [r7, #16]
 8005d4e:	f7ff fe45 	bl	80059dc <put_fat>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d116      	bne.n	8005d8a <create_chain+0x116>
		fs->last_clst = ncl;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	3b02      	subs	r3, #2
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d804      	bhi.n	8005d7a <create_chain+0x106>
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	1e5a      	subs	r2, r3, #1
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	791b      	ldrb	r3, [r3, #4]
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	711a      	strb	r2, [r3, #4]
 8005d88:	e007      	b.n	8005d9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d102      	bne.n	8005d96 <create_chain+0x122>
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	e000      	b.n	8005d98 <create_chain+0x124>
 8005d96:	2301      	movs	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005d9a:	69fb      	ldr	r3, [r7, #28]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	3304      	adds	r3, #4
 8005dba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	0a5b      	lsrs	r3, r3, #9
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	8952      	ldrh	r2, [r2, #10]
 8005dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1d1a      	adds	r2, r3, #4
 8005dce:	613a      	str	r2, [r7, #16]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <clmt_clust+0x3a>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e010      	b.n	8005e00 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d307      	bcc.n	8005df6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3304      	adds	r3, #4
 8005df2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005df4:	e7e9      	b.n	8005dca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005df6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	4413      	add	r3, r2
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e22:	d204      	bcs.n	8005e2e <dir_sdi+0x22>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e063      	b.n	8005efa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <dir_sdi+0x46>
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d902      	bls.n	8005e52 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10c      	bne.n	8005e72 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	8912      	ldrh	r2, [r2, #8]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d301      	bcc.n	8005e68 <dir_sdi+0x5c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e048      	b.n	8005efa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	61da      	str	r2, [r3, #28]
 8005e70:	e029      	b.n	8005ec6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	895b      	ldrh	r3, [r3, #10]
 8005e76:	025b      	lsls	r3, r3, #9
 8005e78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e7a:	e019      	b.n	8005eb0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6979      	ldr	r1, [r7, #20]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fd06 	bl	8005892 <get_fat>
 8005e86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d101      	bne.n	8005e94 <dir_sdi+0x88>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e032      	b.n	8005efa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d904      	bls.n	8005ea4 <dir_sdi+0x98>
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d301      	bcc.n	8005ea8 <dir_sdi+0x9c>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e028      	b.n	8005efa <dir_sdi+0xee>
			ofs -= csz;
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d2e1      	bcs.n	8005e7c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005eb8:	6979      	ldr	r1, [r7, #20]
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f7ff fcca 	bl	8005854 <clust2sect>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <dir_sdi+0xcc>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e010      	b.n	8005efa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	0a5b      	lsrs	r3, r3, #9
 8005ee0:	441a      	add	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	441a      	add	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	3320      	adds	r3, #32
 8005f18:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <dir_next+0x28>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f28:	d301      	bcc.n	8005f2e <dir_next+0x2c>
 8005f2a:	2304      	movs	r3, #4
 8005f2c:	e0aa      	b.n	8006084 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f040 8098 	bne.w	800606a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	8912      	ldrh	r2, [r2, #8]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	f0c0 8088 	bcc.w	800606a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	61da      	str	r2, [r3, #28]
 8005f60:	2304      	movs	r3, #4
 8005f62:	e08f      	b.n	8006084 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	0a5b      	lsrs	r3, r3, #9
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	8952      	ldrh	r2, [r2, #10]
 8005f6c:	3a01      	subs	r2, #1
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d17a      	bne.n	800606a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7ff fc88 	bl	8005892 <get_fat>
 8005f82:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d801      	bhi.n	8005f8e <dir_next+0x8c>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e07a      	b.n	8006084 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d101      	bne.n	8005f9a <dir_next+0x98>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e074      	b.n	8006084 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d358      	bcc.n	8006056 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	61da      	str	r2, [r3, #28]
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	e067      	b.n	8006084 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7ff fe59 	bl	8005c74 <create_chain>
 8005fc2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <dir_next+0xcc>
 8005fca:	2307      	movs	r3, #7
 8005fcc:	e05a      	b.n	8006084 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <dir_next+0xd6>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e055      	b.n	8006084 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d101      	bne.n	8005fe4 <dir_next+0xe2>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e04f      	b.n	8006084 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fb55 	bl	8005694 <sync_window>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <dir_next+0xf2>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e047      	b.n	8006084 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3330      	adds	r3, #48	; 0x30
 8005ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff f97f 	bl	8005302 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	6979      	ldr	r1, [r7, #20]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff fc22 	bl	8005854 <clust2sect>
 8006010:	4602      	mov	r2, r0
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c
 8006016:	e012      	b.n	800603e <dir_next+0x13c>
						fs->wflag = 1;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff fb38 	bl	8005694 <sync_window>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <dir_next+0x12c>
 800602a:	2301      	movs	r3, #1
 800602c:	e02a      	b.n	8006084 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3301      	adds	r3, #1
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	62da      	str	r2, [r3, #44]	; 0x2c
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	895b      	ldrh	r3, [r3, #10]
 8006042:	461a      	mov	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4293      	cmp	r3, r2
 8006048:	d3e6      	bcc.n	8006018 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800605c:	6979      	ldr	r1, [r7, #20]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff fbf8 	bl	8005854 <clust2sect>
 8006064:	4602      	mov	r2, r0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff feb4 	bl	8005e0c <dir_sdi>
 80060a4:	4603      	mov	r3, r0
 80060a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d12b      	bne.n	8006106 <dir_alloc+0x7a>
		n = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4619      	mov	r1, r3
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fb2f 	bl	800571c <move_window>
 80060be:	4603      	mov	r3, r0
 80060c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11d      	bne.n	8006104 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2be5      	cmp	r3, #229	; 0xe5
 80060d0:	d004      	beq.n	80060dc <dir_alloc+0x50>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d107      	bne.n	80060ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3301      	adds	r3, #1
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d102      	bne.n	80060f0 <dir_alloc+0x64>
 80060ea:	e00c      	b.n	8006106 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80060f0:	2101      	movs	r1, #1
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff ff05 	bl	8005f02 <dir_next>
 80060f8:	4603      	mov	r3, r0
 80060fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0d7      	beq.n	80060b2 <dir_alloc+0x26>
 8006102:	e000      	b.n	8006106 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006104:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006106:	7dfb      	ldrb	r3, [r7, #23]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d101      	bne.n	8006110 <dir_alloc+0x84>
 800610c:	2307      	movs	r3, #7
 800610e:	75fb      	strb	r3, [r7, #23]
	return res;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	331a      	adds	r3, #26
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff f847 	bl	80051bc <ld_word>
 800612e:	4603      	mov	r3, r0
 8006130:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d109      	bne.n	800614e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	3314      	adds	r3, #20
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff f83c 	bl	80051bc <ld_word>
 8006144:	4603      	mov	r3, r0
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800614e:	68fb      	ldr	r3, [r7, #12]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	331a      	adds	r3, #26
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	b292      	uxth	r2, r2
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff f85f 	bl	8005232 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d109      	bne.n	8006190 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f103 0214 	add.w	r2, r3, #20
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	b29b      	uxth	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f7ff f851 	bl	8005232 <st_word>
	}
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80061a2:	2304      	movs	r3, #4
 80061a4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80061ac:	e03c      	b.n	8006228 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6938      	ldr	r0, [r7, #16]
 80061b6:	f7ff fab1 	bl	800571c <move_window>
 80061ba:	4603      	mov	r3, r0
 80061bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d136      	bne.n	8006232 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80061d2:	2304      	movs	r3, #4
 80061d4:	75fb      	strb	r3, [r7, #23]
 80061d6:	e031      	b.n	800623c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	330b      	adds	r3, #11
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e4:	73bb      	strb	r3, [r7, #14]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	7bba      	ldrb	r2, [r7, #14]
 80061ea:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2be5      	cmp	r3, #229	; 0xe5
 80061f0:	d011      	beq.n	8006216 <dir_read+0x7e>
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b2e      	cmp	r3, #46	; 0x2e
 80061f6:	d00e      	beq.n	8006216 <dir_read+0x7e>
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b0f      	cmp	r3, #15
 80061fc:	d00b      	beq.n	8006216 <dir_read+0x7e>
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	f023 0320 	bic.w	r3, r3, #32
 8006204:	2b08      	cmp	r3, #8
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	4293      	cmp	r3, r2
 8006214:	d00f      	beq.n	8006236 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006216:	2100      	movs	r1, #0
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fe72 	bl	8005f02 <dir_next>
 800621e:	4603      	mov	r3, r0
 8006220:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d108      	bne.n	800623a <dir_read+0xa2>
	while (dp->sect) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1be      	bne.n	80061ae <dir_read+0x16>
 8006230:	e004      	b.n	800623c <dir_read+0xa4>
		if (res != FR_OK) break;
 8006232:	bf00      	nop
 8006234:	e002      	b.n	800623c <dir_read+0xa4>
				break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <dir_read+0xa4>
		if (res != FR_OK) break;
 800623a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <dir_read+0xb0>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	61da      	str	r2, [r3, #28]
	return res;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b086      	sub	sp, #24
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fdd2 	bl	8005e0c <dir_sdi>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <dir_find+0x24>
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	e03e      	b.n	80062f4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4619      	mov	r1, r3
 800627c:	6938      	ldr	r0, [r7, #16]
 800627e:	f7ff fa4d 	bl	800571c <move_window>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d12f      	bne.n	80062ec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <dir_find+0x4e>
 800629a:	2304      	movs	r3, #4
 800629c:	75fb      	strb	r3, [r7, #23]
 800629e:	e028      	b.n	80062f2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	330b      	adds	r3, #11
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	330b      	adds	r3, #11
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <dir_find+0x86>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a18      	ldr	r0, [r3, #32]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3324      	adds	r3, #36	; 0x24
 80062ca:	220b      	movs	r2, #11
 80062cc:	4619      	mov	r1, r3
 80062ce:	f7ff f832 	bl	8005336 <mem_cmp>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062d8:	2100      	movs	r1, #0
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff fe11 	bl	8005f02 <dir_next>
 80062e0:	4603      	mov	r3, r0
 80062e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0c5      	beq.n	8006276 <dir_find+0x24>
 80062ea:	e002      	b.n	80062f2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80062ec:	bf00      	nop
 80062ee:	e000      	b.n	80062f2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062f0:	bf00      	nop

	return res;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800630a:	2101      	movs	r1, #1
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff febd 	bl	800608c <dir_alloc>
 8006312:	4603      	mov	r3, r0
 8006314:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11c      	bne.n	8006356 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4619      	mov	r1, r3
 8006322:	68b8      	ldr	r0, [r7, #8]
 8006324:	f7ff f9fa 	bl	800571c <move_window>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d111      	bne.n	8006356 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	2220      	movs	r2, #32
 8006338:	2100      	movs	r1, #0
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe ffe1 	bl	8005302 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a18      	ldr	r0, [r3, #32]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	220b      	movs	r2, #11
 800634a:	4619      	mov	r1, r3
 800634c:	f7fe ffb8 	bl	80052c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2201      	movs	r2, #1
 8006354:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff f9d1 	bl	800571c <move_window>
 800637a:	4603      	mov	r3, r0
 800637c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	22e5      	movs	r2, #229	; 0xe5
 800638a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006392:	7afb      	ldrb	r3, [r7, #11]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d04e      	beq.n	8006452 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80063bc:	e021      	b.n	8006402 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1a      	ldr	r2, [r3, #32]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	6179      	str	r1, [r7, #20]
 80063c8:	4413      	add	r3, r2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d100      	bne.n	80063d6 <get_fileinfo+0x3a>
 80063d4:	e015      	b.n	8006402 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b05      	cmp	r3, #5
 80063da:	d101      	bne.n	80063e0 <get_fileinfo+0x44>
 80063dc:	23e5      	movs	r3, #229	; 0xe5
 80063de:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	d106      	bne.n	80063f4 <get_fileinfo+0x58>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	613a      	str	r2, [r7, #16]
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	4413      	add	r3, r2
 80063f0:	222e      	movs	r2, #46	; 0x2e
 80063f2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	613a      	str	r2, [r7, #16]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	4413      	add	r3, r2
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b0a      	cmp	r3, #10
 8006406:	d9da      	bls.n	80063be <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4413      	add	r3, r2
 800640e:	3309      	adds	r3, #9
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	7ada      	ldrb	r2, [r3, #11]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	331c      	adds	r3, #28
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fee1 	bl	80051ec <ld_dword>
 800642a:	4602      	mov	r2, r0
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	3316      	adds	r3, #22
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fed8 	bl	80051ec <ld_dword>
 800643c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	b29a      	uxth	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	80da      	strh	r2, [r3, #6]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	0c1b      	lsrs	r3, r3, #16
 800644a:	b29a      	uxth	r2, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	809a      	strh	r2, [r3, #4]
 8006450:	e000      	b.n	8006454 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006452:	bf00      	nop
}
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006472:	220b      	movs	r2, #11
 8006474:	2120      	movs	r1, #32
 8006476:	68b8      	ldr	r0, [r7, #8]
 8006478:	f7fe ff43 	bl	8005302 <mem_set>
	si = i = 0; ni = 8;
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	2308      	movs	r3, #8
 8006486:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	617a      	str	r2, [r7, #20]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006496:	7ffb      	ldrb	r3, [r7, #31]
 8006498:	2b20      	cmp	r3, #32
 800649a:	d94e      	bls.n	800653a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800649c:	7ffb      	ldrb	r3, [r7, #31]
 800649e:	2b2f      	cmp	r3, #47	; 0x2f
 80064a0:	d006      	beq.n	80064b0 <create_name+0x54>
 80064a2:	7ffb      	ldrb	r3, [r7, #31]
 80064a4:	2b5c      	cmp	r3, #92	; 0x5c
 80064a6:	d110      	bne.n	80064ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80064a8:	e002      	b.n	80064b0 <create_name+0x54>
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3301      	adds	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b2f      	cmp	r3, #47	; 0x2f
 80064ba:	d0f6      	beq.n	80064aa <create_name+0x4e>
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b5c      	cmp	r3, #92	; 0x5c
 80064c6:	d0f0      	beq.n	80064aa <create_name+0x4e>
			break;
 80064c8:	e038      	b.n	800653c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80064ca:	7ffb      	ldrb	r3, [r7, #31]
 80064cc:	2b2e      	cmp	r3, #46	; 0x2e
 80064ce:	d003      	beq.n	80064d8 <create_name+0x7c>
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d30c      	bcc.n	80064f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b0b      	cmp	r3, #11
 80064dc:	d002      	beq.n	80064e4 <create_name+0x88>
 80064de:	7ffb      	ldrb	r3, [r7, #31]
 80064e0:	2b2e      	cmp	r3, #46	; 0x2e
 80064e2:	d001      	beq.n	80064e8 <create_name+0x8c>
 80064e4:	2306      	movs	r3, #6
 80064e6:	e044      	b.n	8006572 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80064e8:	2308      	movs	r3, #8
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	230b      	movs	r3, #11
 80064ee:	61bb      	str	r3, [r7, #24]
			continue;
 80064f0:	e022      	b.n	8006538 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80064f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	da04      	bge.n	8006504 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80064fa:	7ffb      	ldrb	r3, [r7, #31]
 80064fc:	3b80      	subs	r3, #128	; 0x80
 80064fe:	4a1f      	ldr	r2, [pc, #124]	; (800657c <create_name+0x120>)
 8006500:	5cd3      	ldrb	r3, [r2, r3]
 8006502:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006504:	7ffb      	ldrb	r3, [r7, #31]
 8006506:	4619      	mov	r1, r3
 8006508:	481d      	ldr	r0, [pc, #116]	; (8006580 <create_name+0x124>)
 800650a:	f7fe ff3b 	bl	8005384 <chk_chr>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <create_name+0xbc>
 8006514:	2306      	movs	r3, #6
 8006516:	e02c      	b.n	8006572 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006518:	7ffb      	ldrb	r3, [r7, #31]
 800651a:	2b60      	cmp	r3, #96	; 0x60
 800651c:	d905      	bls.n	800652a <create_name+0xce>
 800651e:	7ffb      	ldrb	r3, [r7, #31]
 8006520:	2b7a      	cmp	r3, #122	; 0x7a
 8006522:	d802      	bhi.n	800652a <create_name+0xce>
 8006524:	7ffb      	ldrb	r3, [r7, #31]
 8006526:	3b20      	subs	r3, #32
 8006528:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	613a      	str	r2, [r7, #16]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	4413      	add	r3, r2
 8006534:	7ffa      	ldrb	r2, [r7, #31]
 8006536:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006538:	e7a6      	b.n	8006488 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800653a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	441a      	add	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <create_name+0xf4>
 800654c:	2306      	movs	r3, #6
 800654e:	e010      	b.n	8006572 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2be5      	cmp	r3, #229	; 0xe5
 8006556:	d102      	bne.n	800655e <create_name+0x102>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2205      	movs	r2, #5
 800655c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800655e:	7ffb      	ldrb	r3, [r7, #31]
 8006560:	2b20      	cmp	r3, #32
 8006562:	d801      	bhi.n	8006568 <create_name+0x10c>
 8006564:	2204      	movs	r2, #4
 8006566:	e000      	b.n	800656a <create_name+0x10e>
 8006568:	2200      	movs	r2, #0
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	330b      	adds	r3, #11
 800656e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006570:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	0800ce88 	.word	0x0800ce88
 8006580:	0800cdd8 	.word	0x0800cdd8

08006584 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006598:	e002      	b.n	80065a0 <follow_path+0x1c>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b2f      	cmp	r3, #47	; 0x2f
 80065a6:	d0f8      	beq.n	800659a <follow_path+0x16>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b5c      	cmp	r3, #92	; 0x5c
 80065ae:	d0f4      	beq.n	800659a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b1f      	cmp	r3, #31
 80065bc:	d80a      	bhi.n	80065d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2280      	movs	r2, #128	; 0x80
 80065c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80065c6:	2100      	movs	r1, #0
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fc1f 	bl	8005e0c <dir_sdi>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
 80065d2:	e043      	b.n	800665c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065d4:	463b      	mov	r3, r7
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff ff3f 	bl	800645c <create_name>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d134      	bne.n	8006652 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff fe32 	bl	8006252 <dir_find>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80065f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d127      	bne.n	8006656 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d122      	bne.n	8006656 <follow_path+0xd2>
 8006610:	2305      	movs	r3, #5
 8006612:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006614:	e01f      	b.n	8006656 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11c      	bne.n	800665a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	799b      	ldrb	r3, [r3, #6]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800662c:	2305      	movs	r3, #5
 800662e:	75fb      	strb	r3, [r7, #23]
 8006630:	e014      	b.n	800665c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	4413      	add	r3, r2
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff fd68 	bl	800611a <ld_clust>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006650:	e7c0      	b.n	80065d4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <follow_path+0xd8>
				break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800665a:	bf00      	nop
			}
		}
	}

	return res;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800666e:	f04f 33ff 	mov.w	r3, #4294967295
 8006672:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d031      	beq.n	80066e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e002      	b.n	800668a <get_ldnumber+0x24>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b20      	cmp	r3, #32
 8006690:	d903      	bls.n	800669a <get_ldnumber+0x34>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b3a      	cmp	r3, #58	; 0x3a
 8006698:	d1f4      	bne.n	8006684 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b3a      	cmp	r3, #58	; 0x3a
 80066a0:	d11c      	bne.n	80066dc <get_ldnumber+0x76>
			tp = *path;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	60fa      	str	r2, [r7, #12]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	3b30      	subs	r3, #48	; 0x30
 80066b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d80e      	bhi.n	80066d8 <get_ldnumber+0x72>
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d10a      	bne.n	80066d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d107      	bne.n	80066d8 <get_ldnumber+0x72>
					vol = (int)i;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	3301      	adds	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	e002      	b.n	80066e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80066e0:	693b      	ldr	r3, [r7, #16]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	70da      	strb	r2, [r3, #3]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff f806 	bl	800571c <move_window>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <check_fs+0x2a>
 8006716:	2304      	movs	r3, #4
 8006718:	e038      	b.n	800678c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3330      	adds	r3, #48	; 0x30
 800671e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fd4a 	bl	80051bc <ld_word>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <check_fs+0x48>
 8006734:	2303      	movs	r3, #3
 8006736:	e029      	b.n	800678c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800673e:	2be9      	cmp	r3, #233	; 0xe9
 8006740:	d009      	beq.n	8006756 <check_fs+0x66>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006748:	2beb      	cmp	r3, #235	; 0xeb
 800674a:	d11e      	bne.n	800678a <check_fs+0x9a>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006752:	2b90      	cmp	r3, #144	; 0x90
 8006754:	d119      	bne.n	800678a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3330      	adds	r3, #48	; 0x30
 800675a:	3336      	adds	r3, #54	; 0x36
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe fd45 	bl	80051ec <ld_dword>
 8006762:	4603      	mov	r3, r0
 8006764:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006768:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <check_fs+0xa4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <check_fs+0x82>
 800676e:	2300      	movs	r3, #0
 8006770:	e00c      	b.n	800678c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3330      	adds	r3, #48	; 0x30
 8006776:	3352      	adds	r3, #82	; 0x52
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fd37 	bl	80051ec <ld_dword>
 800677e:	4602      	mov	r2, r0
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <check_fs+0xa8>)
 8006782:	429a      	cmp	r2, r3
 8006784:	d101      	bne.n	800678a <check_fs+0x9a>
 8006786:	2300      	movs	r3, #0
 8006788:	e000      	b.n	800678c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800678a:	2302      	movs	r3, #2
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	00544146 	.word	0x00544146
 8006798:	33544146 	.word	0x33544146

0800679c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b096      	sub	sp, #88	; 0x58
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff ff58 	bl	8006666 <get_ldnumber>
 80067b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80067b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da01      	bge.n	80067c2 <find_volume+0x26>
 80067be:	230b      	movs	r3, #11
 80067c0:	e22e      	b.n	8006c20 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80067c2:	4aa8      	ldr	r2, [pc, #672]	; (8006a64 <find_volume+0x2c8>)
 80067c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <find_volume+0x3a>
 80067d2:	230c      	movs	r3, #12
 80067d4:	e224      	b.n	8006c20 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	f023 0301 	bic.w	r3, r3, #1
 80067e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01a      	beq.n	8006822 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fc45 	bl	8005080 <disk_status>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80067fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <find_volume+0x82>
 800680e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800681a:	230a      	movs	r3, #10
 800681c:	e200      	b.n	8006c20 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800681e:	2300      	movs	r3, #0
 8006820:	e1fe      	b.n	8006c20 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	b2da      	uxtb	r2, r3
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fc3d 	bl	80050b4 <disk_initialize>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006840:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800684c:	2303      	movs	r3, #3
 800684e:	e1e7      	b.n	8006c20 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <find_volume+0xca>
 8006856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006862:	230a      	movs	r3, #10
 8006864:	e1dc      	b.n	8006c20 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800686a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800686c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800686e:	f7ff ff3f 	bl	80066f0 <check_fs>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006878:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800687c:	2b02      	cmp	r3, #2
 800687e:	d14b      	bne.n	8006918 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006880:	2300      	movs	r3, #0
 8006882:	643b      	str	r3, [r7, #64]	; 0x40
 8006884:	e01f      	b.n	80068c6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800688c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006894:	4413      	add	r3, r2
 8006896:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	3304      	adds	r3, #4
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d006      	beq.n	80068b0 <find_volume+0x114>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	3308      	adds	r3, #8
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fca0 	bl	80051ec <ld_dword>
 80068ac:	4602      	mov	r2, r0
 80068ae:	e000      	b.n	80068b2 <find_volume+0x116>
 80068b0:	2200      	movs	r2, #0
 80068b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80068ba:	440b      	add	r3, r1
 80068bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80068c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c2:	3301      	adds	r3, #1
 80068c4:	643b      	str	r3, [r7, #64]	; 0x40
 80068c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d9dc      	bls.n	8006886 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80068cc:	2300      	movs	r3, #0
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80068d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <find_volume+0x140>
 80068d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d8:	3b01      	subs	r3, #1
 80068da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80068dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80068e4:	4413      	add	r3, r2
 80068e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80068ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80068ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <find_volume+0x162>
 80068f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068f6:	f7ff fefb 	bl	80066f0 <check_fs>
 80068fa:	4603      	mov	r3, r0
 80068fc:	e000      	b.n	8006900 <find_volume+0x164>
 80068fe:	2303      	movs	r3, #3
 8006900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006908:	2b01      	cmp	r3, #1
 800690a:	d905      	bls.n	8006918 <find_volume+0x17c>
 800690c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690e:	3301      	adds	r3, #1
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
 8006912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006914:	2b03      	cmp	r3, #3
 8006916:	d9e1      	bls.n	80068dc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800691c:	2b04      	cmp	r3, #4
 800691e:	d101      	bne.n	8006924 <find_volume+0x188>
 8006920:	2301      	movs	r3, #1
 8006922:	e17d      	b.n	8006c20 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006928:	2b01      	cmp	r3, #1
 800692a:	d901      	bls.n	8006930 <find_volume+0x194>
 800692c:	230d      	movs	r3, #13
 800692e:	e177      	b.n	8006c20 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	3330      	adds	r3, #48	; 0x30
 8006934:	330b      	adds	r3, #11
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fc40 	bl	80051bc <ld_word>
 800693c:	4603      	mov	r3, r0
 800693e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006942:	d001      	beq.n	8006948 <find_volume+0x1ac>
 8006944:	230d      	movs	r3, #13
 8006946:	e16b      	b.n	8006c20 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	3330      	adds	r3, #48	; 0x30
 800694c:	3316      	adds	r3, #22
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fc34 	bl	80051bc <ld_word>
 8006954:	4603      	mov	r3, r0
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <find_volume+0x1d0>
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	3330      	adds	r3, #48	; 0x30
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fc41 	bl	80051ec <ld_dword>
 800696a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006970:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	789b      	ldrb	r3, [r3, #2]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d005      	beq.n	8006990 <find_volume+0x1f4>
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d001      	beq.n	8006990 <find_volume+0x1f4>
 800698c:	230d      	movs	r3, #13
 800698e:	e147      	b.n	8006c20 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	789b      	ldrb	r3, [r3, #2]
 8006994:	461a      	mov	r2, r3
 8006996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	895b      	ldrh	r3, [r3, #10]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <find_volume+0x228>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	895b      	ldrh	r3, [r3, #10]
 80069b6:	461a      	mov	r2, r3
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	895b      	ldrh	r3, [r3, #10]
 80069bc:	3b01      	subs	r3, #1
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <find_volume+0x22c>
 80069c4:	230d      	movs	r3, #13
 80069c6:	e12b      	b.n	8006c20 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	3330      	adds	r3, #48	; 0x30
 80069cc:	3311      	adds	r3, #17
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fbf4 	bl	80051bc <ld_word>
 80069d4:	4603      	mov	r3, r0
 80069d6:	461a      	mov	r2, r3
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	891b      	ldrh	r3, [r3, #8]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <find_volume+0x252>
 80069ea:	230d      	movs	r3, #13
 80069ec:	e118      	b.n	8006c20 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	3330      	adds	r3, #48	; 0x30
 80069f2:	3313      	adds	r3, #19
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fbe1 	bl	80051bc <ld_word>
 80069fa:	4603      	mov	r3, r0
 80069fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <find_volume+0x276>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	3330      	adds	r3, #48	; 0x30
 8006a08:	3320      	adds	r3, #32
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fbee 	bl	80051ec <ld_dword>
 8006a10:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	3330      	adds	r3, #48	; 0x30
 8006a16:	330e      	adds	r3, #14
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe fbcf 	bl	80051bc <ld_word>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006a22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <find_volume+0x290>
 8006a28:	230d      	movs	r3, #13
 8006a2a:	e0f9      	b.n	8006c20 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006a2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a30:	4413      	add	r3, r2
 8006a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a34:	8912      	ldrh	r2, [r2, #8]
 8006a36:	0912      	lsrs	r2, r2, #4
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d201      	bcs.n	8006a4a <find_volume+0x2ae>
 8006a46:	230d      	movs	r3, #13
 8006a48:	e0ea      	b.n	8006c20 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a52:	8952      	ldrh	r2, [r2, #10]
 8006a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <find_volume+0x2cc>
 8006a60:	230d      	movs	r3, #13
 8006a62:	e0dd      	b.n	8006c20 <find_volume+0x484>
 8006a64:	20000294 	.word	0x20000294
		fmt = FS_FAT32;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d802      	bhi.n	8006a7e <find_volume+0x2e2>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d802      	bhi.n	8006a8e <find_volume+0x2f2>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	1c9a      	adds	r2, r3, #2
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a9a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	441a      	add	r2, r3
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006aa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	441a      	add	r2, r3
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d11e      	bne.n	8006af6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	3330      	adds	r3, #48	; 0x30
 8006abc:	332a      	adds	r3, #42	; 0x2a
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fb7c 	bl	80051bc <ld_word>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <find_volume+0x332>
 8006aca:	230d      	movs	r3, #13
 8006acc:	e0a8      	b.n	8006c20 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	891b      	ldrh	r3, [r3, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <find_volume+0x33e>
 8006ad6:	230d      	movs	r3, #13
 8006ad8:	e0a2      	b.n	8006c20 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	3330      	adds	r3, #48	; 0x30
 8006ade:	332c      	adds	r3, #44	; 0x2c
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fb83 	bl	80051ec <ld_dword>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	647b      	str	r3, [r7, #68]	; 0x44
 8006af4:	e01f      	b.n	8006b36 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	891b      	ldrh	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <find_volume+0x366>
 8006afe:	230d      	movs	r3, #13
 8006b00:	e08e      	b.n	8006c20 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b08:	441a      	add	r2, r3
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d103      	bne.n	8006b1e <find_volume+0x382>
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	e00a      	b.n	8006b34 <find_volume+0x398>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	085a      	lsrs	r2, r3, #1
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006b34:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006b40:	0a5b      	lsrs	r3, r3, #9
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d201      	bcs.n	8006b4a <find_volume+0x3ae>
 8006b46:	230d      	movs	r3, #13
 8006b48:	e06a      	b.n	8006c20 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d149      	bne.n	8006bfc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	3330      	adds	r3, #48	; 0x30
 8006b6c:	3330      	adds	r3, #48	; 0x30
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fb24 	bl	80051bc <ld_word>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d140      	bne.n	8006bfc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b82:	f7fe fdcb 	bl	800571c <move_window>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d137      	bne.n	8006bfc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	2200      	movs	r2, #0
 8006b90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	3330      	adds	r3, #48	; 0x30
 8006b96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fb0e 	bl	80051bc <ld_word>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d127      	bne.n	8006bfc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	3330      	adds	r3, #48	; 0x30
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fb1b 	bl	80051ec <ld_dword>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <find_volume+0x48c>)
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d11e      	bne.n	8006bfc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	3330      	adds	r3, #48	; 0x30
 8006bc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fb10 	bl	80051ec <ld_dword>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <find_volume+0x490>)
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d113      	bne.n	8006bfc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	3330      	adds	r3, #48	; 0x30
 8006bd8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe fb05 	bl	80051ec <ld_dword>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	3330      	adds	r3, #48	; 0x30
 8006bec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe fafb 	bl	80051ec <ld_dword>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <find_volume+0x494>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <find_volume+0x494>)
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <find_volume+0x494>)
 8006c12:	881a      	ldrh	r2, [r3, #0]
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c1a:	f7fe fd17 	bl	800564c <clear_lock>
#endif
	return FR_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3758      	adds	r7, #88	; 0x58
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	41615252 	.word	0x41615252
 8006c2c:	61417272 	.word	0x61417272
 8006c30:	20000298 	.word	0x20000298

08006c34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c3e:	2309      	movs	r3, #9
 8006c40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01c      	beq.n	8006c82 <validate+0x4e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d018      	beq.n	8006c82 <validate+0x4e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d013      	beq.n	8006c82 <validate+0x4e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	889a      	ldrh	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	88db      	ldrh	r3, [r3, #6]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d10c      	bne.n	8006c82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fa06 	bl	8005080 <disk_status>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <validate+0x4e>
			res = FR_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <validate+0x5a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	e000      	b.n	8006c90 <validate+0x5c>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	6013      	str	r3, [r2, #0]
	return res;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006cb2:	f107 0310 	add.w	r3, r7, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fcd5 	bl	8006666 <get_ldnumber>
 8006cbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	da01      	bge.n	8006cc8 <f_mount+0x28>
 8006cc4:	230b      	movs	r3, #11
 8006cc6:	e02b      	b.n	8006d20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <f_mount+0x88>)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f7fe fcb7 	bl	800564c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	490d      	ldr	r1, [pc, #52]	; (8006d28 <f_mount+0x88>)
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <f_mount+0x66>
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d001      	beq.n	8006d0a <f_mount+0x6a>
 8006d06:	2300      	movs	r3, #0
 8006d08:	e00a      	b.n	8006d20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006d0a:	f107 010c 	add.w	r1, r7, #12
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	2200      	movs	r2, #0
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fd41 	bl	800679c <find_volume>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3720      	adds	r7, #32
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000294 	.word	0x20000294

08006d2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b098      	sub	sp, #96	; 0x60
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <f_open+0x18>
 8006d40:	2309      	movs	r3, #9
 8006d42:	e1ad      	b.n	80070a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d4c:	79fa      	ldrb	r2, [r7, #7]
 8006d4e:	f107 0110 	add.w	r1, r7, #16
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fd20 	bl	800679c <find_volume>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 8191 	bne.w	800708e <f_open+0x362>
		dj.obj.fs = fs;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fc03 	bl	8006584 <follow_path>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11a      	bne.n	8006dc2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da03      	bge.n	8006d9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d96:	2306      	movs	r3, #6
 8006d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d9c:	e011      	b.n	8006dc2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	f107 0314 	add.w	r3, r7, #20
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fb00 	bl	80053bc <chk_lock>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	f003 031c 	and.w	r3, r3, #28
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d07f      	beq.n	8006ecc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d017      	beq.n	8006e04 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d10e      	bne.n	8006dfa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ddc:	f7fe fb4a 	bl	8005474 <enq_lock>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d006      	beq.n	8006df4 <f_open+0xc8>
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fa86 	bl	80062fc <dir_register>
 8006df0:	4603      	mov	r3, r0
 8006df2:	e000      	b.n	8006df6 <f_open+0xca>
 8006df4:	2312      	movs	r3, #18
 8006df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	f043 0308 	orr.w	r3, r3, #8
 8006e00:	71fb      	strb	r3, [r7, #7]
 8006e02:	e010      	b.n	8006e26 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006e04:	7ebb      	ldrb	r3, [r7, #26]
 8006e06:	f003 0311 	and.w	r3, r3, #17
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <f_open+0xea>
					res = FR_DENIED;
 8006e0e:	2307      	movs	r3, #7
 8006e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e14:	e007      	b.n	8006e26 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <f_open+0xfa>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d168      	bne.n	8006f00 <f_open+0x1d4>
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d063      	beq.n	8006f00 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006e38:	f003 f804 	bl	8009e44 <get_fattime>
 8006e3c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e40:	330e      	adds	r3, #14
 8006e42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fa0f 	bl	8005268 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4c:	3316      	adds	r3, #22
 8006e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fa09 	bl	8005268 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	330b      	adds	r3, #11
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff f958 	bl	800611a <ld_clust>
 8006e6a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e70:	2200      	movs	r2, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff f970 	bl	8006158 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	331c      	adds	r3, #28
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe f9f2 	bl	8005268 <st_dword>
					fs->wflag = 1;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2201      	movs	r2, #1
 8006e88:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d037      	beq.n	8006f00 <f_open+0x1d4>
						dw = fs->winsect;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e96:	f107 0314 	add.w	r3, r7, #20
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fe83 	bl	8005baa <remove_chain>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d126      	bne.n	8006f00 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fc30 	bl	800571c <move_window>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	e019      	b.n	8006f00 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d115      	bne.n	8006f00 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006ed4:	7ebb      	ldrb	r3, [r7, #26]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006ede:	2304      	movs	r3, #4
 8006ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ee4:	e00c      	b.n	8006f00 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <f_open+0x1d4>
 8006ef0:	7ebb      	ldrb	r3, [r7, #26]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <f_open+0x1d4>
						res = FR_DENIED;
 8006efa:	2307      	movs	r3, #7
 8006efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d128      	bne.n	8006f5a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f18:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f107 0314 	add.w	r3, r7, #20
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fab9 	bl	80054b8 <inc_lock>
 8006f46:	4602      	mov	r2, r0
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <f_open+0x22e>
 8006f54:	2302      	movs	r3, #2
 8006f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 8095 	bne.w	800708e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f8d5 	bl	800611a <ld_clust>
 8006f70:	4602      	mov	r2, r0
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	331c      	adds	r3, #28
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f936 	bl	80051ec <ld_dword>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	88da      	ldrh	r2, [r3, #6]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	79fa      	ldrb	r2, [r7, #7]
 8006f9e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3330      	adds	r3, #48	; 0x30
 8006fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe f9a0 	bl	8005302 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d060      	beq.n	800708e <f_open+0x362>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d05c      	beq.n	800708e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	895b      	ldrh	r3, [r3, #10]
 8006fe0:	025b      	lsls	r3, r3, #9
 8006fe2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff0:	e016      	b.n	8007020 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fc4b 	bl	8005892 <get_fat>
 8006ffc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007000:	2b01      	cmp	r3, #1
 8007002:	d802      	bhi.n	800700a <f_open+0x2de>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800700a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d102      	bne.n	8007018 <f_open+0x2ec>
 8007012:	2301      	movs	r3, #1
 8007014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800701a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	657b      	str	r3, [r7, #84]	; 0x54
 8007020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <f_open+0x304>
 8007028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800702a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702c:	429a      	cmp	r2, r3
 800702e:	d8e0      	bhi.n	8006ff2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007034:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d127      	bne.n	800708e <f_open+0x362>
 800703e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007044:	2b00      	cmp	r3, #0
 8007046:	d022      	beq.n	800708e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fc01 	bl	8005854 <clust2sect>
 8007052:	6478      	str	r0, [r7, #68]	; 0x44
 8007054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <f_open+0x336>
						res = FR_INT_ERR;
 800705a:	2302      	movs	r3, #2
 800705c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007060:	e015      	b.n	800708e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007064:	0a5a      	lsrs	r2, r3, #9
 8007066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007068:	441a      	add	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	7858      	ldrb	r0, [r3, #1]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	2301      	movs	r3, #1
 800707e:	f7fe f83f 	bl	8005100 <disk_read>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <f_open+0x362>
 8007088:	2301      	movs	r3, #1
 800708a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800708e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <f_open+0x370>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800709c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3760      	adds	r7, #96	; 0x60
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f107 0210 	add.w	r2, r7, #16
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fdb3 	bl	8006c34 <validate>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <f_write+0x44>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	7d5b      	ldrb	r3, [r3, #21]
 80070e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80070e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <f_write+0x4a>
 80070ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070f0:	e14b      	b.n	800738a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	7d1b      	ldrb	r3, [r3, #20]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <f_write+0x5a>
 80070fe:	2307      	movs	r3, #7
 8007100:	e143      	b.n	800738a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	441a      	add	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	429a      	cmp	r2, r3
 8007110:	f080 812d 	bcs.w	800736e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	43db      	mvns	r3, r3
 800711a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800711c:	e127      	b.n	800736e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	2b00      	cmp	r3, #0
 8007128:	f040 80e3 	bne.w	80072f2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	0a5b      	lsrs	r3, r3, #9
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	8952      	ldrh	r2, [r2, #10]
 8007136:	3a01      	subs	r2, #1
 8007138:	4013      	ands	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d143      	bne.n	80071ca <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10c      	bne.n	8007164 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11a      	bne.n	800718c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd8a 	bl	8005c74 <create_chain>
 8007160:	62b8      	str	r0, [r7, #40]	; 0x28
 8007162:	e013      	b.n	800718c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	4619      	mov	r1, r3
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7fe fe16 	bl	8005da4 <clmt_clust>
 8007178:	62b8      	str	r0, [r7, #40]	; 0x28
 800717a:	e007      	b.n	800718c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7fe fd75 	bl	8005c74 <create_chain>
 800718a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 80f2 	beq.w	8007378 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b01      	cmp	r3, #1
 8007198:	d104      	bne.n	80071a4 <f_write+0xfc>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2202      	movs	r2, #2
 800719e:	755a      	strb	r2, [r3, #21]
 80071a0:	2302      	movs	r3, #2
 80071a2:	e0f2      	b.n	800738a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d104      	bne.n	80071b6 <f_write+0x10e>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	755a      	strb	r2, [r3, #21]
 80071b2:	2301      	movs	r3, #1
 80071b4:	e0e9      	b.n	800738a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <f_write+0x122>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	7d1b      	ldrb	r3, [r3, #20]
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da18      	bge.n	8007206 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	7858      	ldrb	r0, [r3, #1]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	2301      	movs	r3, #1
 80071e4:	f7fd ffac 	bl	8005140 <disk_write>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <f_write+0x150>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	755a      	strb	r2, [r3, #21]
 80071f4:	2301      	movs	r3, #1
 80071f6:	e0c8      	b.n	800738a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	7d1b      	ldrb	r3, [r3, #20]
 80071fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007200:	b2da      	uxtb	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f7fe fb20 	bl	8005854 <clust2sect>
 8007214:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <f_write+0x17e>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	755a      	strb	r2, [r3, #21]
 8007222:	2302      	movs	r3, #2
 8007224:	e0b1      	b.n	800738a <f_write+0x2e2>
			sect += csect;
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	4413      	add	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	0a5b      	lsrs	r3, r3, #9
 8007232:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d03c      	beq.n	80072b4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	4413      	add	r3, r2
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	8952      	ldrh	r2, [r2, #10]
 8007244:	4293      	cmp	r3, r2
 8007246:	d905      	bls.n	8007254 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	895b      	ldrh	r3, [r3, #10]
 800724c:	461a      	mov	r2, r3
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	7858      	ldrb	r0, [r3, #1]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	69f9      	ldr	r1, [r7, #28]
 800725e:	f7fd ff6f 	bl	8005140 <disk_write>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d004      	beq.n	8007272 <f_write+0x1ca>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	755a      	strb	r2, [r3, #21]
 800726e:	2301      	movs	r3, #1
 8007270:	e08b      	b.n	800738a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1a      	ldr	r2, [r3, #32]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	429a      	cmp	r2, r3
 800727e:	d915      	bls.n	80072ac <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1a      	ldr	r2, [r3, #32]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	025b      	lsls	r3, r3, #9
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	4619      	mov	r1, r3
 800729a:	f7fe f811 	bl	80052c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	7d1b      	ldrb	r3, [r3, #20]
 80072a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	025b      	lsls	r3, r3, #9
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80072b2:	e03f      	b.n	8007334 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d016      	beq.n	80072ec <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d210      	bcs.n	80072ec <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	7858      	ldrb	r0, [r3, #1]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072d4:	2301      	movs	r3, #1
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f7fd ff12 	bl	8005100 <disk_read>
 80072dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	755a      	strb	r2, [r3, #21]
 80072e8:	2301      	movs	r3, #1
 80072ea:	e04e      	b.n	800738a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d901      	bls.n	800730c <f_write+0x264>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731a:	4413      	add	r3, r2
 800731c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731e:	69f9      	ldr	r1, [r7, #28]
 8007320:	4618      	mov	r0, r3
 8007322:	f7fd ffcd 	bl	80052c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	7d1b      	ldrb	r3, [r3, #20]
 800732a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	4413      	add	r3, r2
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	441a      	add	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	619a      	str	r2, [r3, #24]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	bf38      	it	cc
 8007354:	461a      	movcc	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	60da      	str	r2, [r3, #12]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	441a      	add	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f aed4 	bne.w	800711e <f_write+0x76>
 8007376:	e000      	b.n	800737a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007378:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	7d1b      	ldrb	r3, [r3, #20]
 800737e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007382:	b2da      	uxtb	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3730      	adds	r7, #48	; 0x30
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f107 0208 	add.w	r2, r7, #8
 80073a0:	4611      	mov	r1, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fc46 	bl	8006c34 <validate>
 80073a8:	4603      	mov	r3, r0
 80073aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d168      	bne.n	8007484 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	7d1b      	ldrb	r3, [r3, #20]
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d062      	beq.n	8007484 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7d1b      	ldrb	r3, [r3, #20]
 80073c2:	b25b      	sxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	da15      	bge.n	80073f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	7858      	ldrb	r0, [r3, #1]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1a      	ldr	r2, [r3, #32]
 80073d6:	2301      	movs	r3, #1
 80073d8:	f7fd feb2 	bl	8005140 <disk_write>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <f_sync+0x54>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e04f      	b.n	8007486 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7d1b      	ldrb	r3, [r3, #20]
 80073ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80073f4:	f002 fd26 	bl	8009e44 <get_fattime>
 80073f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f7fe f98a 	bl	800571c <move_window>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d138      	bne.n	8007484 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	330b      	adds	r3, #11
 800741c:	781a      	ldrb	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	330b      	adds	r3, #11
 8007422:	f042 0220 	orr.w	r2, r2, #32
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	461a      	mov	r2, r3
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	f7fe fe8f 	bl	8006158 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f103 021c 	add.w	r2, r3, #28
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7fd ff0e 	bl	8005268 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3316      	adds	r3, #22
 8007450:	6939      	ldr	r1, [r7, #16]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd ff08 	bl	8005268 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3312      	adds	r3, #18
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f7fd fee7 	bl	8005232 <st_word>
					fs->wflag = 1;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2201      	movs	r2, #1
 8007468:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe f983 	bl	8005778 <sync_fs>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	7d1b      	ldrb	r3, [r3, #20]
 800747a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747e:	b2da      	uxtb	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007484:	7dfb      	ldrb	r3, [r7, #23]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff ff7b 	bl	8007392 <f_sync>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d118      	bne.n	80074d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f107 0208 	add.w	r2, r7, #8
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fbc0 	bl	8006c34 <validate>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10c      	bne.n	80074d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe f886 	bl	80055d4 <dec_lock>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b090      	sub	sp, #64	; 0x40
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80074ec:	f107 010c 	add.w	r1, r7, #12
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	2200      	movs	r2, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff f951 	bl	800679c <find_volume>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11f      	bne.n	8007548 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	f107 030c 	add.w	r3, r7, #12
 800750e:	4611      	mov	r1, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff f837 	bl	8006584 <follow_path>
 8007516:	4603      	mov	r3, r0
 8007518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800751c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007520:	2b00      	cmp	r3, #0
 8007522:	d111      	bne.n	8007548 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007524:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007528:	b25b      	sxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	da03      	bge.n	8007536 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800752e:	2306      	movs	r3, #6
 8007530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007534:	e008      	b.n	8007548 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <f_stat+0x66>
 800753c:	f107 030c 	add.w	r3, r7, #12
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe ff2a 	bl	800639c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007548:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800754c:	4618      	mov	r0, r3
 800754e:	3740      	adds	r7, #64	; 0x40
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b09e      	sub	sp, #120	; 0x78
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007560:	f107 010c 	add.w	r1, r7, #12
 8007564:	1d3b      	adds	r3, r7, #4
 8007566:	2202      	movs	r2, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff f917 	bl	800679c <find_volume>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8007578:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 808e 	bne.w	800769e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fffa 	bl	8006584 <follow_path>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007596:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800759a:	2b00      	cmp	r3, #0
 800759c:	d108      	bne.n	80075b0 <f_unlink+0x5c>
 800759e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80075a2:	2102      	movs	r1, #2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd ff09 	bl	80053bc <chk_lock>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80075b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d172      	bne.n	800769e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80075b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075bc:	b25b      	sxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da03      	bge.n	80075ca <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80075c2:	2306      	movs	r3, #6
 80075c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80075c8:	e008      	b.n	80075dc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80075ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80075d6:	2307      	movs	r3, #7
 80075d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80075dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d134      	bne.n	800764e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fd95 	bl	800611a <ld_clust>
 80075f0:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80075f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d027      	beq.n	800764e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007604:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007606:	f107 0310 	add.w	r3, r7, #16
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe fbfd 	bl	8005e0c <dir_sdi>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8007618:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800761c:	2b00      	cmp	r3, #0
 800761e:	d116      	bne.n	800764e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007620:	f107 0310 	add.w	r3, r7, #16
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fdb6 	bl	8006198 <dir_read>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007632:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <f_unlink+0xec>
 800763a:	2307      	movs	r3, #7
 800763c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007640:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007644:	2b04      	cmp	r3, #4
 8007646:	d102      	bne.n	800764e <f_unlink+0xfa>
 8007648:	2300      	movs	r3, #0
 800764a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800764e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007652:	2b00      	cmp	r3, #0
 8007654:	d123      	bne.n	800769e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fe80 	bl	8006360 <dir_remove>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007666:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10c      	bne.n	8007688 <f_unlink+0x134>
 800766e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007674:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007678:	2200      	movs	r2, #0
 800767a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fa94 	bl	8005baa <remove_chain>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007688:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <f_unlink+0x14a>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe f870 	bl	8005778 <sync_fs>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800769e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3778      	adds	r7, #120	; 0x78
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b096      	sub	sp, #88	; 0x58
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80076b2:	f107 0108 	add.w	r1, r7, #8
 80076b6:	1d3b      	adds	r3, r7, #4
 80076b8:	2202      	movs	r2, #2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff f86e 	bl	800679c <find_volume>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80076ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 80ec 	bne.w	80078ac <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f107 030c 	add.w	r3, r7, #12
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe ff51 	bl	8006584 <follow_path>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80076e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <f_mkdir+0x4c>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80076f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	f040 80d6 	bne.w	80078ac <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fab4 	bl	8005c74 <create_chain>
 800770c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	895b      	ldrh	r3, [r3, #10]
 8007712:	025b      	lsls	r3, r3, #9
 8007714:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800771c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <f_mkdir+0x7e>
 8007722:	2307      	movs	r3, #7
 8007724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8007728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772a:	2b01      	cmp	r3, #1
 800772c:	d102      	bne.n	8007734 <f_mkdir+0x8a>
 800772e:	2302      	movs	r3, #2
 8007730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d102      	bne.n	8007742 <f_mkdir+0x98>
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8007742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <f_mkdir+0xae>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4618      	mov	r0, r3
 800774e:	f7fd ffa1 	bl	8005694 <sync_window>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8007758:	f002 fb74 	bl	8009e44 <get_fattime>
 800775c:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800775e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007762:	2b00      	cmp	r3, #0
 8007764:	d16a      	bne.n	800783c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe f872 	bl	8005854 <clust2sect>
 8007770:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	3330      	adds	r3, #48	; 0x30
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8007778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800777c:	2100      	movs	r1, #0
 800777e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007780:	f7fd fdbf 	bl	8005302 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8007784:	220b      	movs	r2, #11
 8007786:	2120      	movs	r1, #32
 8007788:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800778a:	f7fd fdba 	bl	8005302 <mem_set>
					dir[DIR_Name] = '.';
 800778e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007790:	222e      	movs	r2, #46	; 0x2e
 8007792:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8007794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007796:	330b      	adds	r3, #11
 8007798:	2210      	movs	r2, #16
 800779a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779e:	3316      	adds	r3, #22
 80077a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fd fd60 	bl	8005268 <st_dword>
					st_clust(fs, dir, dcl);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fcd2 	bl	8006158 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	3320      	adds	r3, #32
 80077b8:	2220      	movs	r2, #32
 80077ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fd fd7f 	bl	80052c0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80077c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c4:	3321      	adds	r3, #33	; 0x21
 80077c6:	222e      	movs	r2, #46	; 0x2e
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d106      	bne.n	80077e4 <f_mkdir+0x13a>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077dc:	429a      	cmp	r2, r3
 80077de:	d101      	bne.n	80077e4 <f_mkdir+0x13a>
 80077e0:	2300      	movs	r3, #0
 80077e2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	3320      	adds	r3, #32
 80077ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ec:	4619      	mov	r1, r3
 80077ee:	f7fe fcb3 	bl	8006158 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	895b      	ldrh	r3, [r3, #10]
 80077f6:	653b      	str	r3, [r7, #80]	; 0x50
 80077f8:	e01b      	b.n	8007832 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80077fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2201      	movs	r2, #1
 8007808:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4618      	mov	r0, r3
 800780e:	f7fd ff41 	bl	8005694 <sync_window>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8007818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10c      	bne.n	800783a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8007820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007824:	2100      	movs	r1, #0
 8007826:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007828:	f7fd fd6b 	bl	8005302 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800782c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782e:	3b01      	subs	r3, #1
 8007830:	653b      	str	r3, [r7, #80]	; 0x50
 8007832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e0      	bne.n	80077fa <f_mkdir+0x150>
 8007838:	e000      	b.n	800783c <f_mkdir+0x192>
					if (res != FR_OK) break;
 800783a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800783c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007840:	2b00      	cmp	r3, #0
 8007842:	d107      	bne.n	8007854 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fd57 	bl	80062fc <dir_register>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8007854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007858:	2b00      	cmp	r3, #0
 800785a:	d120      	bne.n	800789e <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8007860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007862:	3316      	adds	r3, #22
 8007864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd fcfe 	bl	8005268 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fc70 	bl	8006158 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8007878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787a:	330b      	adds	r3, #11
 800787c:	2210      	movs	r2, #16
 800787e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2201      	movs	r2, #1
 8007884:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8007886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10e      	bne.n	80078ac <f_mkdir+0x202>
					res = sync_fs(fs);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fd ff71 	bl	8005778 <sync_fs>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800789c:	e006      	b.n	80078ac <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800789e:	f107 030c 	add.w	r3, r7, #12
 80078a2:	2200      	movs	r2, #0
 80078a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe f97f 	bl	8005baa <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80078ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3758      	adds	r7, #88	; 0x58
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	2b0a      	cmp	r3, #10
 80078c8:	d103      	bne.n	80078d2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80078ca:	210d      	movs	r1, #13
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fff3 	bl	80078b8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	db25      	blt.n	800792a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	60fa      	str	r2, [r7, #12]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b3c      	cmp	r3, #60	; 0x3c
 80078f0:	dd12      	ble.n	8007918 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f103 010c 	add.w	r1, r3, #12
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f107 0308 	add.w	r3, r7, #8
 8007902:	f7ff fbd1 	bl	80070a8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	429a      	cmp	r2, r3
 800790c:	d101      	bne.n	8007912 <putc_bfd+0x5a>
 800790e:	2300      	movs	r3, #0
 8007910:	e001      	b.n	8007916 <putc_bfd+0x5e>
 8007912:	f04f 33ff 	mov.w	r3, #4294967295
 8007916:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	e000      	b.n	800792c <putc_bfd+0x74>
	if (i < 0) return;
 800792a:	bf00      	nop
}
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	db17      	blt.n	8007972 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f103 010c 	add.w	r1, r3, #12
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	461a      	mov	r2, r3
 8007952:	f107 030c 	add.w	r3, r7, #12
 8007956:	f7ff fba7 	bl	80070a8 <f_write>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	461a      	mov	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	429a      	cmp	r2, r3
 800796a:	d102      	bne.n	8007972 <putc_flush+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	e001      	b.n	8007976 <putc_flush+0x44>
	return EOF;
 8007972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	609a      	str	r2, [r3, #8]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b0a7      	sub	sp, #156	; 0x9c
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80079b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ffe0 	bl	800797e <putc_init>

	va_start(arp, fmt);
 80079be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80079c2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80079c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80079d4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 81f4 	beq.w	8007dc6 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 80079de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80079e2:	2b25      	cmp	r3, #37	; 0x25
 80079e4:	d008      	beq.n	80079f8 <f_printf+0x50>
			putc_bfd(&pb, c);
 80079e6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80079ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff ff61 	bl	80078b8 <putc_bfd>
			continue;
 80079f6:	e1e5      	b.n	8007dc4 <f_printf+0x41c>
		}
		w = f = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80079fe:	2300      	movs	r3, #0
 8007a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8007a04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8007a14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a18:	2b30      	cmp	r3, #48	; 0x30
 8007a1a:	d10b      	bne.n	8007a34 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007a32:	e024      	b.n	8007a7e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8007a34:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a38:	2b2d      	cmp	r3, #45	; 0x2d
 8007a3a:	d120      	bne.n	8007a7e <f_printf+0xd6>
				f = 2; c = *fmt++;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007a52:	e014      	b.n	8007a7e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8007a54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	461a      	mov	r2, r3
 8007a62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a66:	4413      	add	r3, r2
 8007a68:	3b30      	subs	r3, #48	; 0x30
 8007a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8007a6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8007a7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a82:	2b2f      	cmp	r3, #47	; 0x2f
 8007a84:	d903      	bls.n	8007a8e <f_printf+0xe6>
 8007a86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a8a:	2b39      	cmp	r3, #57	; 0x39
 8007a8c:	d9e2      	bls.n	8007a54 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8007a8e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a92:	2b6c      	cmp	r3, #108	; 0x6c
 8007a94:	d003      	beq.n	8007a9e <f_printf+0xf6>
 8007a96:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007a9a:	2b4c      	cmp	r3, #76	; 0x4c
 8007a9c:	d10d      	bne.n	8007aba <f_printf+0x112>
			f |= 4; c = *fmt++;
 8007a9e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007aa2:	f043 0304 	orr.w	r3, r3, #4
 8007aa6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8007aba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8183 	beq.w	8007dca <f_printf+0x422>
		d = c;
 8007ac4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ac8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8007acc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007ad0:	2b60      	cmp	r3, #96	; 0x60
 8007ad2:	d908      	bls.n	8007ae6 <f_printf+0x13e>
 8007ad4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007ad8:	2b7a      	cmp	r3, #122	; 0x7a
 8007ada:	d804      	bhi.n	8007ae6 <f_printf+0x13e>
 8007adc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007ae0:	3b20      	subs	r3, #32
 8007ae2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8007ae6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007aea:	3b42      	subs	r3, #66	; 0x42
 8007aec:	2b16      	cmp	r3, #22
 8007aee:	f200 8098 	bhi.w	8007c22 <f_printf+0x27a>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <f_printf+0x150>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007c03 	.word	0x08007c03
 8007afc:	08007beb 	.word	0x08007beb
 8007b00:	08007c13 	.word	0x08007c13
 8007b04:	08007c23 	.word	0x08007c23
 8007b08:	08007c23 	.word	0x08007c23
 8007b0c:	08007c23 	.word	0x08007c23
 8007b10:	08007c23 	.word	0x08007c23
 8007b14:	08007c23 	.word	0x08007c23
 8007b18:	08007c23 	.word	0x08007c23
 8007b1c:	08007c23 	.word	0x08007c23
 8007b20:	08007c23 	.word	0x08007c23
 8007b24:	08007c23 	.word	0x08007c23
 8007b28:	08007c23 	.word	0x08007c23
 8007b2c:	08007c0b 	.word	0x08007c0b
 8007b30:	08007c23 	.word	0x08007c23
 8007b34:	08007c23 	.word	0x08007c23
 8007b38:	08007c23 	.word	0x08007c23
 8007b3c:	08007b55 	.word	0x08007b55
 8007b40:	08007c23 	.word	0x08007c23
 8007b44:	08007c13 	.word	0x08007c13
 8007b48:	08007c23 	.word	0x08007c23
 8007b4c:	08007c23 	.word	0x08007c23
 8007b50:	08007c1b 	.word	0x08007c1b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8007b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b56:	1d1a      	adds	r2, r3, #4
 8007b58:	67ba      	str	r2, [r7, #120]	; 0x78
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b64:	e004      	b.n	8007b70 <f_printf+0x1c8>
 8007b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b76:	4413      	add	r3, r2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f3      	bne.n	8007b66 <f_printf+0x1be>
			if (!(f & 2)) {
 8007b7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d11a      	bne.n	8007bc0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8007b8a:	e005      	b.n	8007b98 <f_printf+0x1f0>
 8007b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b90:	2120      	movs	r1, #32
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff fe90 	bl	80078b8 <putc_bfd>
 8007b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ba2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d8f0      	bhi.n	8007b8c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8007baa:	e009      	b.n	8007bc0 <f_printf+0x218>
 8007bac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff fe7c 	bl	80078b8 <putc_bfd>
 8007bc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1f1      	bne.n	8007bac <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8007bc8:	e005      	b.n	8007bd6 <f_printf+0x22e>
 8007bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bce:	2120      	movs	r1, #32
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fe71 	bl	80078b8 <putc_bfd>
 8007bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007be0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d8f0      	bhi.n	8007bca <f_printf+0x222>
			continue;
 8007be8:	e0ec      	b.n	8007dc4 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8007bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bec:	1d1a      	adds	r2, r3, #4
 8007bee:	67ba      	str	r2, [r7, #120]	; 0x78
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff fe5c 	bl	80078b8 <putc_bfd>
 8007c00:	e0e0      	b.n	8007dc4 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8007c02:	2302      	movs	r3, #2
 8007c04:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007c08:	e014      	b.n	8007c34 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007c10:	e010      	b.n	8007c34 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8007c12:	230a      	movs	r3, #10
 8007c14:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007c18:	e00c      	b.n	8007c34 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007c20:	e008      	b.n	8007c34 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8007c22:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8007c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff fe43 	bl	80078b8 <putc_bfd>
 8007c32:	e0c7      	b.n	8007dc4 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007c34:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <f_printf+0x2a2>
 8007c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c42:	1d1a      	adds	r2, r3, #4
 8007c44:	67ba      	str	r2, [r7, #120]	; 0x78
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	e00c      	b.n	8007c64 <f_printf+0x2bc>
 8007c4a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007c4e:	2b44      	cmp	r3, #68	; 0x44
 8007c50:	d104      	bne.n	8007c5c <f_printf+0x2b4>
 8007c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	67ba      	str	r2, [r7, #120]	; 0x78
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	e003      	b.n	8007c64 <f_printf+0x2bc>
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c5e:	1d1a      	adds	r2, r3, #4
 8007c60:	67ba      	str	r2, [r7, #120]	; 0x78
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8007c68:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007c6c:	2b44      	cmp	r3, #68	; 0x44
 8007c6e:	d10e      	bne.n	8007c8e <f_printf+0x2e6>
 8007c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da0a      	bge.n	8007c8e <f_printf+0x2e6>
			v = 0 - v;
 8007c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c7c:	425b      	negs	r3, r3
 8007c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8007c82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c86:	f043 0308 	orr.w	r3, r3, #8
 8007c8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8007c94:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8007c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ca0:	fb02 f201 	mul.w	r2, r2, r1
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8007caa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8007cae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007cba:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007cbe:	2b09      	cmp	r3, #9
 8007cc0:	d90b      	bls.n	8007cda <f_printf+0x332>
 8007cc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007cc6:	2b78      	cmp	r3, #120	; 0x78
 8007cc8:	d101      	bne.n	8007cce <f_printf+0x326>
 8007cca:	2227      	movs	r2, #39	; 0x27
 8007ccc:	e000      	b.n	8007cd0 <f_printf+0x328>
 8007cce:	2207      	movs	r2, #7
 8007cd0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8007cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007ce4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007ce8:	3230      	adds	r2, #48	; 0x30
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8007cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <f_printf+0x35e>
 8007cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d02:	2b1f      	cmp	r3, #31
 8007d04:	d9c6      	bls.n	8007c94 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8007d06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <f_printf+0x380>
 8007d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007d1c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007d20:	4413      	add	r3, r2
 8007d22:	222d      	movs	r2, #45	; 0x2d
 8007d24:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8007d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <f_printf+0x398>
 8007d3c:	2330      	movs	r3, #48	; 0x30
 8007d3e:	e000      	b.n	8007d42 <f_printf+0x39a>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8007d46:	e007      	b.n	8007d58 <f_printf+0x3b0>
 8007d48:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d50:	4611      	mov	r1, r2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fdb0 	bl	80078b8 <putc_bfd>
 8007d58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d108      	bne.n	8007d76 <f_printf+0x3ce>
 8007d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8e8      	bhi.n	8007d48 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8007d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d80:	f107 020c 	add.w	r2, r7, #12
 8007d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d88:	4413      	add	r3, r2
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fd90 	bl	80078b8 <putc_bfd>
		} while (i);
 8007d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ea      	bne.n	8007d76 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8007da0:	e007      	b.n	8007db2 <f_printf+0x40a>
 8007da2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff fd83 	bl	80078b8 <putc_bfd>
 8007db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007dbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d8ee      	bhi.n	8007da2 <f_printf+0x3fa>
		c = *fmt++;
 8007dc4:	e5fe      	b.n	80079c4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <f_printf+0x424>
		if (!c) break;
 8007dca:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8007dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff fdae 	bl	8007932 <putc_flush>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	379c      	adds	r7, #156	; 0x9c
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007de2:	b003      	add	sp, #12
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007df6:	2301      	movs	r3, #1
 8007df8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e00:	7a5b      	ldrb	r3, [r3, #9]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d131      	bne.n	8007e6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e0a:	7a5b      	ldrb	r3, [r3, #9]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e12:	2100      	movs	r1, #0
 8007e14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e16:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e18:	7a5b      	ldrb	r3, [r3, #9]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e26:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e28:	7a5b      	ldrb	r3, [r3, #9]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e30:	4413      	add	r3, r2
 8007e32:	79fa      	ldrb	r2, [r7, #7]
 8007e34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e36:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e38:	7a5b      	ldrb	r3, [r3, #9]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	b2d1      	uxtb	r1, r2
 8007e40:	4a0e      	ldr	r2, [pc, #56]	; (8007e7c <FATFS_LinkDriverEx+0x94>)
 8007e42:	7251      	strb	r1, [r2, #9]
 8007e44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e46:	7dbb      	ldrb	r3, [r7, #22]
 8007e48:	3330      	adds	r3, #48	; 0x30
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	3301      	adds	r3, #1
 8007e54:	223a      	movs	r2, #58	; 0x3a
 8007e56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	3302      	adds	r3, #2
 8007e5c:	222f      	movs	r2, #47	; 0x2f
 8007e5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	3303      	adds	r3, #3
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	200002bc 	.word	0x200002bc

08007e80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff ffaa 	bl	8007de8 <FATFS_LinkDriverEx>
 8007e94:	4603      	mov	r3, r0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <_ZNK6Status7OpenAIREv>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
	}

	/* De-energize AIR (Accumulator Indicator Relay). */
	void OpenAIR(void) const {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	2102      	movs	r1, #2
 8007eac:	4805      	ldr	r0, [pc, #20]	; (8007ec4 <_ZNK6Status7OpenAIREv+0x24>)
 8007eae:	f7f9 fccd 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	2104      	movs	r1, #4
 8007eb6:	4804      	ldr	r0, [pc, #16]	; (8007ec8 <_ZNK6Status7OpenAIREv+0x28>)
 8007eb8:	f7f9 fcc8 	bl	800184c <HAL_GPIO_WritePin>
	}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40020400 	.word	0x40020400
 8007ec8:	40020800 	.word	0x40020800

08007ecc <_ZN6Status7OpenPREEv>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // LED1
		precharge_flag = true;
	}

	/* De-energize PRE (Pre-charge Relay). */
	void OpenPRE(void) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PRECHARGE
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	4807      	ldr	r0, [pc, #28]	; (8007ef8 <_ZN6Status7OpenPREEv+0x2c>)
 8007eda:	f7f9 fcb7 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // LED1
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	4806      	ldr	r0, [pc, #24]	; (8007efc <_ZN6Status7OpenPREEv+0x30>)
 8007ee4:	f7f9 fcb2 	bl	800184c <HAL_GPIO_WritePin>
		precharge_flag = false;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	731a      	strb	r2, [r3, #12]
	}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40020400 	.word	0x40020400
 8007efc:	40020800 	.word	0x40020800

08007f00 <_ZN6Status13SetMinVoltageEtRKSt4pairIhhE>:
			return kFanLowDutyCycle;
		else
			return (max_temp * kT2DC_M) + (kFanLowDutyCycle - kT2DC_M * kT2DCLowTemp);
	};

	void SetMinVoltage(uint16_t min_voltage, const std::pair<uint8_t, uint8_t>& min_voltage_index) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	817b      	strh	r3, [r7, #10]
		this->min_voltage = min_voltage;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	897a      	ldrh	r2, [r7, #10]
 8007f12:	869a      	strh	r2, [r3, #52]	; 0x34
		this->min_voltage_index = min_voltage_index;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3338      	adds	r3, #56	; 0x38
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fc94 	bl	8008848 <_ZNSt4pairIhhEaSERKS0_>
		if (this->min_voltage < kLimpMinVoltage) { // TODO might be checking this too often
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007f24:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d814      	bhi.n	8007f56 <_ZN6Status13SetMinVoltageEtRKSt4pairIhhE+0x56>
			if (++limp_counter > kLimpCountLimit)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	651a      	str	r2, [r3, #80]	; 0x50
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	bf8c      	ite	hi
 8007f3e:	2301      	movhi	r3, #1
 8007f40:	2300      	movls	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00f      	beq.n	8007f68 <_ZN6Status13SetMinVoltageEtRKSt4pairIhhE+0x68>
				limp_counter += 9;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4c:	f103 0209 	add.w	r2, r3, #9
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	651a      	str	r2, [r3, #80]	; 0x50
 8007f54:	e008      	b.n	8007f68 <_ZN6Status13SetMinVoltageEtRKSt4pairIhhE+0x68>
		} else if (limp_counter > 0)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <_ZN6Status13SetMinVoltageEtRKSt4pairIhhE+0x68>
			--limp_counter;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	1e5a      	subs	r2, r3, #1
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	651a      	str	r2, [r3, #80]	; 0x50

#if TEST_UNDERVOLTAGE
		ErrorCheck(Status::Undervoltage, min_voltage < kMinVoltage);
 8007f68:	897b      	ldrh	r3, [r7, #10]
 8007f6a:	f647 1217 	movw	r2, #30999	; 0x7917
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	bf94      	ite	ls
 8007f72:	2301      	movls	r3, #1
 8007f74:	2300      	movhi	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2102      	movs	r1, #2
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f8c1 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif
	}
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZN6Status13SetMaxVoltageEtRKSt4pairIhhE>:

	void SetMaxVoltage(uint16_t max_voltage, const std::pair<uint8_t, uint8_t>& max_voltage_index) {
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	460b      	mov	r3, r1
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	817b      	strh	r3, [r7, #10]
		this->max_voltage = max_voltage;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	897a      	ldrh	r2, [r7, #10]
 8007f9c:	86da      	strh	r2, [r3, #54]	; 0x36
		this->max_voltage_index = max_voltage_index;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	333a      	adds	r3, #58	; 0x3a
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fc4f 	bl	8008848 <_ZNSt4pairIhhEaSERKS0_>
		if (this->max_voltage > kChargerDis)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fae:	f24a 3248 	movw	r2, #41800	; 0xa348
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d904      	bls.n	8007fc0 <_ZN6Status13SetMaxVoltageEtRKSt4pairIhhE+0x36>
			nlg5.ctrl = 0;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e009      	b.n	8007fd4 <_ZN6Status13SetMaxVoltageEtRKSt4pairIhhE+0x4a>
		else if (this->max_voltage < kChargerEn)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc4:	f24a 221b 	movw	r2, #41499	; 0xa21b
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d803      	bhi.n	8007fd4 <_ZN6Status13SetMaxVoltageEtRKSt4pairIhhE+0x4a>
			nlg5.ctrl = NLG5::C_C_EN;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd0:	2280      	movs	r2, #128	; 0x80
 8007fd2:	701a      	strb	r2, [r3, #0]

#if TEST_OVERVOLTAGE
		ErrorCheck(Status::Overvoltage, this->max_voltage > kMaxVoltage);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd8:	f24a 4210 	movw	r2, #42000	; 0xa410
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	bf8c      	ite	hi
 8007fe0:	2301      	movhi	r3, #1
 8007fe2:	2300      	movls	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2101      	movs	r1, #1
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 f88a 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif
	}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <_ZN6Status10SetMinTempEsRKSt4pairIhhE>:

	void SetMinTemp(int16_t min_temp, const std::pair<uint8_t, uint8_t>& min_temp_index) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	460b      	mov	r3, r1
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	817b      	strh	r3, [r7, #10]
		this->min_temp = min_temp;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	897a      	ldrh	r2, [r7, #10]
 800800a:	87da      	strh	r2, [r3, #62]	; 0x3e
		this->min_temp_index = min_temp_index;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3342      	adds	r3, #66	; 0x42
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fc18 	bl	8008848 <_ZNSt4pairIhhEaSERKS0_>

#if TEST_UNDERTEMPERATURE
		ErrorCheck(Status::Undertemp, this->min_temp < kMinTemp);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800801e:	4a07      	ldr	r2, [pc, #28]	; (800803c <_ZN6Status10SetMinTempEsRKSt4pairIhhE+0x44>)
 8008020:	4293      	cmp	r3, r2
 8008022:	bfb4      	ite	lt
 8008024:	2301      	movlt	r3, #1
 8008026:	2300      	movge	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	2104      	movs	r1, #4
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f868 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif
	}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	fffffa24 	.word	0xfffffa24

08008040 <_ZN6Status10SetMaxTempEsRKSt4pairIhhE>:

	void SetMaxTemp(int16_t max_temp, const std::pair<uint8_t, uint8_t>& max_temp_index) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	460b      	mov	r3, r1
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	817b      	strh	r3, [r7, #10]
		this->max_temp = max_temp;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	897a      	ldrh	r2, [r7, #10]
 8008052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		this->max_temp_index = max_temp_index;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3344      	adds	r3, #68	; 0x44
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fbf3 	bl	8008848 <_ZNSt4pairIhhEaSERKS0_>

#if TEST_OVERTEMPERATURE
		ErrorCheck(Status::Overtemp, this->max_temp > kMaxTemp);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008068:	f241 720c 	movw	r2, #5900	; 0x170c
 800806c:	4293      	cmp	r3, r2
 800806e:	bfcc      	ite	gt
 8008070:	2301      	movgt	r3, #1
 8008072:	2300      	movle	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	2103      	movs	r1, #3
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f842 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif

#if TEST_OVERTEMPERATURE_CHARGING
		if (op_mode & Charging)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00e      	beq.n	80080aa <_ZN6Status10SetMaxTempEsRKSt4pairIhhE+0x6a>
			ErrorCheck(Status::OvertempCharging, this->max_temp > kMaxChargeTemp);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008092:	f241 1230 	movw	r2, #4400	; 0x1130
 8008096:	4293      	cmp	r3, r2
 8008098:	bfcc      	ite	gt
 800809a:	2301      	movgt	r3, #1
 800809c:	2300      	movle	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	210b      	movs	r1, #11
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f82d 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif
	}
 80080aa:	bf00      	nop
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <_ZN6Status9CalcPowerEv>:
			OpenPRE();

		return 0;
	}

	void CalcPower() {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
		power = current * sum_of_cells / 10000;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 80080c4:	fb02 f303 	mul.w	r3, r2, r3
 80080c8:	4a0c      	ldr	r2, [pc, #48]	; (80080fc <_ZN6Status9CalcPowerEv+0x48>)
 80080ca:	fb82 1203 	smull	r1, r2, r2, r3
 80080ce:	1312      	asrs	r2, r2, #12
 80080d0:	17db      	asrs	r3, r3, #31
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	64da      	str	r2, [r3, #76]	; 0x4c
#if TEST_OVERPOWER
		ErrorCheck(Status::Overpower, power > kMaxPower);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <_ZN6Status9CalcPowerEv+0x4c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	bfcc      	ite	gt
 80080e2:	2301      	movgt	r3, #1
 80080e4:	2300      	movle	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	2106      	movs	r1, #6
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f809 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif
	}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	68db8bad 	.word	0x68db8bad
 8008100:	007a1200 	.word	0x007a1200

08008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>:
	bool CheckVoltageMatch() {
		float percentage = AccuVoltage * 100 / (sum_of_cells / 10000) - 100;
		return percentage < 10 && percentage > -10;
	}

	uint8_t ErrorCheck(ErrorEvent e, bool error) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
 8008110:	4613      	mov	r3, r2
 8008112:	70bb      	strb	r3, [r7, #2]
		if (error) {
 8008114:	78bb      	ldrb	r3, [r7, #2]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d025      	beq.n	8008166 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x62>
			if (++error_counters[e] > kErrorLimit || !tested) {
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	f103 0118 	add.w	r1, r3, #24
 8008122:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008126:	1c50      	adds	r0, r2, #1
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	f103 0118 	add.w	r1, r3, #24
 800812e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	3318      	adds	r3, #24
 8008136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d807      	bhi.n	800814e <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x4a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8008144:	f083 0301 	eor.w	r3, r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x4e>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x50>
 8008152:	2300      	movs	r3, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d018      	beq.n	800818a <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x86>
				GoToSafeState(e);
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f819 	bl	8008194 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>
				return 1;
 8008162:	2301      	movs	r3, #1
 8008164:	e012      	b.n	800818c <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x88>
			}
		} else if (error_counters[e] > 0)
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3218      	adds	r2, #24
 800816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x86>
			--error_counters[e];
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	f103 0118 	add.w	r1, r3, #24
 800817c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008180:	1e51      	subs	r1, r2, #1
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	3318      	adds	r3, #24
 8008186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		return 0;
 800818a:	2300      	movs	r3, #0
	}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>:

	/* Sets BMS into safe state. */
	void GoToSafeState(ErrorEvent e) {
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
#if BMS_RELAY_CTRL_BYPASS
		// Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
		if (e != PecError) {
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d005      	beq.n	80081b2 <_ZN6Status13GoToSafeStateENS_10ErrorEventE+0x1e>
			OpenAIR();
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fe7a 	bl	8007ea0 <_ZNK6Status7OpenAIREv>
			OpenPRE();
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fe8d 	bl	8007ecc <_ZN6Status7OpenPREEv>
		OpenAIR();
		OpenPRE();
#endif

#if STOP_CORE_ON_SAFE_STATE
		op_mode &= ~Core;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f023 0301 	bic.w	r3, r3, #1
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	701a      	strb	r2, [r3, #0]
#endif

#if START_DEBUG_ON_SAFE_STATE
		op_mode |= Debug;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	701a      	strb	r2, [r3, #0]
#endif
		safe_state_executed = true;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	735a      	strb	r2, [r3, #13]
		last_error = e;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	739a      	strb	r2, [r3, #14]
	}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <_ZN9__gnu_cxx5__ops15__iter_less_valEv>:
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }
 80081e2:	b480      	push	{r7}
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>:
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <_ZN3gsl7details9terminateEv>:
    }

#endif

    [[noreturn]] inline void terminate() noexcept
    {
 80081fe:	b580      	push	{r7, lr}
 8008200:	af00      	add	r7, sp, #0
#if defined(GSL_MSVC_USE_STL_NOEXCEPTION_WORKAROUND)
        (*gsl::details::get_terminate_handler())();
#else
        std::terminate();
 8008202:	f004 fce7 	bl	800cbd4 <_ZSt9terminatev>

08008206 <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej>:

        template <size_type Other>
        explicit constexpr extent_type(extent_type<Other> ext) : size_(ext.size())
        {}

        explicit constexpr extent_type(size_type size) : size_(size)
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	601a      	str	r2, [r3, #0]
        {
            Expects(size != dynamic_extent);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej+0x26>
 8008228:	f7ff ffe9 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>:

        constexpr size_type size() const noexcept { return size_; }
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <_ZN7LTC681112WakeFromIdleEv>:
	HAL_SPI_Transmit(&hspi, &data, 1, 10);
	HAL_Delay(kDaisyChainLength * T_READY);
#endif
}

void WakeFromIdle(void) {
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
	uint8_t data = 0xFF;
 8008256:	23ff      	movs	r3, #255	; 0xff
 8008258:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi, &data, 1, 10);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f107 010f 	add.w	r1, r7, #15
 8008262:	230a      	movs	r3, #10
 8008264:	2201      	movs	r2, #1
 8008266:	f7fb fcba 	bl	8003bde <HAL_SPI_Transmit>
	HAL_Delay(kDaisyChainLength * T_READY);
 800826a:	2078      	movs	r0, #120	; 0x78
 800826c:	f7f8 f9bc 	bl	80005e8 <HAL_Delay>
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4dataEv>:
    {
        Expects(size() > 0);
        return data()[size() - 1];
    }

    constexpr pointer data() const noexcept { return storage_.data(); }
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f805 	bl	8008292 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>
 8008288:	4603      	mov	r3, r0
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>:
        {
            Expects(ExtentType::size() != dynamic_extent);
            Expects(data || ExtentType::size() == 0);
        }

        constexpr pointer data() const noexcept { return data_; }
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <_ZNK3gsl4spanINS_4byteELj4294967295EE4dataEv>:
    constexpr pointer data() const noexcept { return storage_.data(); }
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f805 	bl	80082c4 <_ZNK3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>
 80082ba:	4603      	mov	r3, r0
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZNK3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>:
        constexpr pointer data() const noexcept { return data_; }
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE>:
template <typename T>
uint8_t ReadRegister(LTC6811Command const& command, LTC6811Register<T>& reg) {
	return ReadRegister(command, gsl::as_writable_bytes(span(reg)));
}

uint8_t ReadRegister(LTC6811Command const& command, gsl::span<gsl::byte> data) {
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	4639      	mov	r1, r7
 80082e8:	e881 000c 	stmia.w	r1, {r2, r3}
	//WakeFromSleep(); probably want this
	WakeFromIdle();
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff ffae 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	// NSS PIN (PA4) low
	if (HAL_SPI_Transmit(&hspi, command.data(), kCommandLength, 100) != HAL_ERROR) {
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681c      	ldr	r4, [r3, #0]
 80082f6:	68b8      	ldr	r0, [r7, #8]
 80082f8:	f000 fb3a 	bl	8008970 <_ZNKSt5arrayIhLj4EE4dataEv>
 80082fc:	4601      	mov	r1, r0
 80082fe:	2364      	movs	r3, #100	; 0x64
 8008300:	2204      	movs	r2, #4
 8008302:	4620      	mov	r0, r4
 8008304:	f7fb fc6b 	bl	8003bde <HAL_SPI_Transmit>
 8008308:	4603      	mov	r3, r0
 800830a:	2b01      	cmp	r3, #1
 800830c:	bf14      	ite	ne
 800830e:	2301      	movne	r3, #1
 8008310:	2300      	moveq	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d015      	beq.n	8008344 <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE+0x68>
		// NSS PIN (PA4) high
		if (HAL_SPI_Receive(&hspi, (uint8_t *) data.data(), kBytesPerRegister * kDaisyChainLength, 100) == HAL_ERROR)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681c      	ldr	r4, [r3, #0]
 800831c:	463b      	mov	r3, r7
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff ffc3 	bl	80082aa <_ZNK3gsl4spanINS_4byteELj4294967295EE4dataEv>
 8008324:	4601      	mov	r1, r0
 8008326:	2364      	movs	r3, #100	; 0x64
 8008328:	2260      	movs	r2, #96	; 0x60
 800832a:	4620      	mov	r0, r4
 800832c:	f7fb fd8b 	bl	8003e46 <HAL_SPI_Receive>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	bf0c      	ite	eq
 8008336:	2301      	moveq	r3, #1
 8008338:	2300      	movne	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE+0x68>
			return 1;
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE+0x6a>
	}
	return 0;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}

0800834e <_ZN7LTC68114adcvEv>:
		0xfc41, 0x39d8, 0x32ea, 0xf773, 0x248e, 0xe117, 0xea25, 0x2fbc, 0x0846, 0xcddf, 0xc6ed, 0x0374, 0xd089, 0x1510, 0x1e22, 0xdbbb,
		0x0af8, 0xcf61, 0xc453, 0x01ca, 0xd237, 0x17ae, 0x1c9c, 0xd905, 0xfeff, 0x3b66, 0x3054, 0xf5cd, 0x2630, 0xe3a9, 0xe89b, 0x2d02,
		0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
};

void LTC6811::adcv(void) {
 800834e:	b590      	push	{r4, r7, lr}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
	WakeFromIdle();
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ff79 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	HAL_SPI_Transmit(&hspi, ADCV.data(), 4, 10);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681c      	ldr	r4, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3324      	adds	r3, #36	; 0x24
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fb10 	bl	800898a <_ZNSt5arrayIhLj4EE4dataEv>
 800836a:	4601      	mov	r1, r0
 800836c:	230a      	movs	r3, #10
 800836e:	2204      	movs	r2, #4
 8008370:	4620      	mov	r0, r4
 8008372:	f7fb fc34 	bl	8003bde <HAL_SPI_Transmit>
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bd90      	pop	{r4, r7, pc}

0800837e <_ZN7LTC68114adaxEv>:


/* Start an GPIO Conversion. */
void LTC6811::adax(void) {
 800837e:	b590      	push	{r4, r7, lr}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
	WakeFromIdle();
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff ff61 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	HAL_SPI_Transmit(&hspi, ADAX.data(), 4, 10);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681c      	ldr	r4, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3328      	adds	r3, #40	; 0x28
 8008394:	4618      	mov	r0, r3
 8008396:	f000 faf8 	bl	800898a <_ZNSt5arrayIhLj4EE4dataEv>
 800839a:	4601      	mov	r1, r0
 800839c:	230a      	movs	r3, #10
 800839e:	2204      	movs	r2, #4
 80083a0:	4620      	mov	r0, r4
 80083a2:	f7fb fc1c 	bl	8003bde <HAL_SPI_Transmit>
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd90      	pop	{r4, r7, pc}

080083ae <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE>:
	WakeFromIdle();
	HAL_SPI_Transmit(&hspi, ADSTAT.data(), 4, 10);
}

/* Reads and parses the LTC6804 cell voltage registers. */
uint8_t LTC6811::ReadVoltageHelper(std::array<LTC6811Register<uint16_t>, 4>& cell_data) {
 80083ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b0:	b095      	sub	sp, #84	; 0x54
 80083b2:	af02      	add	r7, sp, #8
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
	uint8_t pec_error{ 0 }, reg_index{ 0 }, ic_index{ 0 }, cell_index{ 0 };
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80083c4:	2300      	movs	r3, #0
 80083c6:	72fb      	strb	r3, [r7, #11]
 80083c8:	2300      	movs	r3, #0
 80083ca:	72bb      	strb	r3, [r7, #10]
	status.sum_of_cells = 0;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	879a      	strh	r2, [r3, #60]	; 0x3c
	// TODO min and max might need to be reset
	for (auto& reg : cell_data) { 		// For each LTC6811 cell voltage register
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80083d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083da:	f000 fae3 	bl	80089a4 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE5beginEv>
 80083de:	6438      	str	r0, [r7, #64]	; 0x40
 80083e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083e2:	f000 faeb 	bl	80089bc <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE3endEv>
 80083e6:	6378      	str	r0, [r7, #52]	; 0x34
 80083e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d05e      	beq.n	80084ae <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x100>
 80083f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f2:	633b      	str	r3, [r7, #48]	; 0x30
		ic_index = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	72fb      	strb	r3, [r7, #11]
		if (ReadVoltageRegister(reg_index + 1, reg))
 80083f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80083fc:	3301      	adds	r3, #1
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f85d 	bl	80084c4 <_ZN7LTC681119ReadVoltageRegisterEhRSt5arrayIS0_ItLj4EELj12EE>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x72>
			pec_error = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		for (auto& ic : reg) { 			// For each LTC6811 in the daisy chain
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008426:	f000 fad7 	bl	80089d8 <_ZNSt5arrayIS_ItLj4EELj12EE5beginEv>
 800842a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800842c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800842e:	f000 fadf 	bl	80089f0 <_ZNSt5arrayIS_ItLj4EELj12EE3endEv>
 8008432:	62b8      	str	r0, [r7, #40]	; 0x28
 8008434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	429a      	cmp	r2, r3
 800843a:	d02f      	beq.n	800849c <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0xee>
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
			/* Starting index of cells within each LTC6811 register. Will repeat { 0, 1, 2 } on 0th register, { 3, 4, 5 } on 1st, and so on.
			 * Note that this is here PURELY for recording the index of the cell with the max voltage so that the array does not need to be
			 * iterated through later */
			cell_index = reg_index * kCellsInReg;
 8008440:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008444:	461a      	mov	r2, r3
 8008446:	0052      	lsls	r2, r2, #1
 8008448:	4413      	add	r3, r2
 800844a:	b2db      	uxtb	r3, r3
 800844c:	72bb      	strb	r3, [r7, #10]
					status.SetMinVoltage(voltage, { ic_index, cell_index });
				else if (voltage > status.max_voltage)
					status.SetMaxVoltage(voltage, { ic_index, cell_index });

				++cell_index;
			});
 800844e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008450:	f000 fadb 	bl	8008a0a <_ZNSt5arrayItLj4EE5beginEv>
 8008454:	4606      	mov	r6, r0
			std::for_each(ic.begin(), ic.begin() + kCellsInReg, [&](auto& voltage) { // For each voltage of current LTC6811
 8008456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008458:	f000 fad7 	bl	8008a0a <_ZNSt5arrayItLj4EE5beginEv>
 800845c:	4603      	mov	r3, r0
			});
 800845e:	1d9a      	adds	r2, r3, #6
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	f107 030b 	add.w	r3, r7, #11
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	f107 030a 	add.w	r3, r7, #10
 800846e:	623b      	str	r3, [r7, #32]
			std::for_each(ic.begin(), ic.begin() + kCellsInReg, [&](auto& voltage) { // For each voltage of current LTC6811
 8008470:	f107 040c 	add.w	r4, r7, #12
 8008474:	466d      	mov	r5, sp
 8008476:	f107 031c 	add.w	r3, r7, #28
 800847a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800847e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	4631      	mov	r1, r6
 8008486:	4620      	mov	r0, r4
 8008488:	f000 fb40 	bl	8008b0c <_ZSt8for_eachIPtZN7LTC681117ReadVoltageHelperERSt5arrayIS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_S7_S7_SA_>
			++ic_index;
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	3301      	adds	r3, #1
 8008490:	b2db      	uxtb	r3, r3
 8008492:	72fb      	strb	r3, [r7, #11]
		for (auto& ic : reg) { 			// For each LTC6811 in the daisy chain
 8008494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008496:	3308      	adds	r3, #8
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800849a:	e7cb      	b.n	8008434 <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x86>
		}
		++reg_index;
 800849c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084a0:	3301      	adds	r3, #1
 80084a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	for (auto& reg : cell_data) { 		// For each LTC6811 cell voltage register
 80084a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a8:	3360      	adds	r3, #96	; 0x60
 80084aa:	643b      	str	r3, [r7, #64]	; 0x40
 80084ac:	e79c      	b.n	80083e8 <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x3a>
	}
	status.CalcPower(); // TODO: sum_of_cells on Atmel was being divided by 10000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff fdfe 	bl	80080b4 <_ZN6Status9CalcPowerEv>
	return pec_error;
 80084b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80084bc:	4618      	mov	r0, r3
 80084be:	374c      	adds	r7, #76	; 0x4c
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084c4 <_ZN7LTC681119ReadVoltageRegisterEhRSt5arrayIS0_ItLj4EELj12EE>:

/* Read the raw data from the LTC6804 cell voltage register. */
uint8_t LTC6811::ReadVoltageRegister(uint8_t reg_id, LTC6811Register<uint16_t>& reg) {
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b08b      	sub	sp, #44	; 0x2c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
	LTC6811Command command = { 0, static_cast<uint8_t>(0x2 + reg_id * 0x2) };
 80084d2:	2300      	movs	r3, #0
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	7afb      	ldrb	r3, [r7, #11]
 80084d8:	3301      	adds	r3, #1
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	747b      	strb	r3, [r7, #17]
	auto PEC = PEC15Calc(command);
 80084e2:	6938      	ldr	r0, [r7, #16]
 80084e4:	f000 f9f4 	bl	80088d0 <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	command[2] = static_cast<uint8_t>(PEC >> 8);
 80084ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f2:	121c      	asrs	r4, r3, #8
 80084f4:	f107 0310 	add.w	r3, r7, #16
 80084f8:	2102      	movs	r1, #2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f9b8 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 8008500:	4603      	mov	r3, r0
 8008502:	b2e2      	uxtb	r2, r4
 8008504:	701a      	strb	r2, [r3, #0]
	command[3] = static_cast<uint8_t>(PEC);
 8008506:	f107 0310 	add.w	r3, r7, #16
 800850a:	2103      	movs	r1, #3
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f9af 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 8008512:	4602      	mov	r2, r0
 8008514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008518:	7013      	strb	r3, [r2, #0]

	WakeFromIdle();
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fe97 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	ReadRegister(command, reg);
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fb33 	bl	8008b94 <_ZN7LTC681112ReadRegisterItEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>

	PEC = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (auto& ic : reg)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	69f8      	ldr	r0, [r7, #28]
 800853a:	f000 fa4d 	bl	80089d8 <_ZNSt5arrayIS_ItLj4EELj12EE5beginEv>
 800853e:	6238      	str	r0, [r7, #32]
 8008540:	69f8      	ldr	r0, [r7, #28]
 8008542:	f000 fa55 	bl	80089f0 <_ZNSt5arrayIS_ItLj4EELj12EE3endEv>
 8008546:	61b8      	str	r0, [r7, #24]
 8008548:	6a3a      	ldr	r2, [r7, #32]
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d020      	beq.n	8008592 <_ZN7LTC681119ReadVoltageRegisterEhRSt5arrayIS0_ItLj4EELj12EE+0xce>
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	617b      	str	r3, [r7, #20]
		if (ic.back() != PEC15Calc(ic))
 8008554:	6978      	ldr	r0, [r7, #20]
 8008556:	f000 fb3d 	bl	8008bd4 <_ZNSt5arrayItLj4EE4backEv>
 800855a:	4603      	mov	r3, r0
 800855c:	881c      	ldrh	r4, [r3, #0]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	2100      	movs	r1, #0
 8008564:	4611      	mov	r1, r2
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	461a      	mov	r2, r3
 800856c:	4608      	mov	r0, r1
 800856e:	4611      	mov	r1, r2
 8008570:	f000 fb52 	bl	8008c18 <_ZN7LTC68119PEC15CalcItLj4EEET_St5arrayIS1_XT0_EE>
 8008574:	4603      	mov	r3, r0
 8008576:	429c      	cmp	r4, r3
 8008578:	bf14      	ite	ne
 800857a:	2301      	movne	r3, #1
 800857c:	2300      	moveq	r3, #0
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <_ZN7LTC681119ReadVoltageRegisterEhRSt5arrayIS0_ItLj4EELj12EE+0xc6>
			PEC = 1;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (auto& ic : reg)
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	3308      	adds	r3, #8
 800858e:	623b      	str	r3, [r7, #32]
 8008590:	e7da      	b.n	8008548 <_ZN7LTC681119ReadVoltageRegisterEhRSt5arrayIS0_ItLj4EELj12EE+0x84>
	return PEC;
 8008592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008596:	4618      	mov	r0, r3
 8008598:	372c      	adds	r7, #44	; 0x2c
 800859a:	46bd      	mov	sp, r7
 800859c:	bd90      	pop	{r4, r7, pc}

0800859e <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE>:

/* Reads and parses the LTC6804 auxiliary registers. */
uint8_t LTC6811::ReadTemperatureHelper(std::array<LTC6811Register<int16_t>, 2>& temp_data) {
 800859e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a0:	b095      	sub	sp, #84	; 0x54
 80085a2:	af02      	add	r7, sp, #8
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
	uint8_t pec_error{ 0 }, reg_index{ 0 }, ic_index{ 0 }, temp_index{ 0 };
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80085ae:	2300      	movs	r3, #0
 80085b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80085b4:	2300      	movs	r3, #0
 80085b6:	72fb      	strb	r3, [r7, #11]
 80085b8:	2300      	movs	r3, #0
 80085ba:	72bb      	strb	r3, [r7, #10]
	for (auto& reg : temp_data) {
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
 80085c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085c2:	f000 fb7b 	bl	8008cbc <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE5beginEv>
 80085c6:	6438      	str	r0, [r7, #64]	; 0x40
 80085c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085ca:	f000 fb83 	bl	8008cd4 <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE3endEv>
 80085ce:	6378      	str	r0, [r7, #52]	; 0x34
 80085d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d05e      	beq.n	8008696 <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0xf8>
 80085d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085da:	633b      	str	r3, [r7, #48]	; 0x30
		ic_index = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	72fb      	strb	r3, [r7, #11]

		if (ReadAuxRegister(reg_index + 1, reg))
 80085e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80085e4:	3301      	adds	r3, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f858 	bl	80086a2 <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bf14      	ite	ne
 80085f8:	2301      	movne	r3, #1
 80085fa:	2300      	moveq	r3, #0
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x6a>
			pec_error = 1;
 8008602:	2301      	movs	r3, #1
 8008604:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		for (auto& ic : reg) {
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800860c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800860e:	f000 fb6e 	bl	8008cee <_ZNSt5arrayIS_IsLj4EELj12EE5beginEv>
 8008612:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008616:	f000 fb76 	bl	8008d06 <_ZNSt5arrayIS_IsLj4EELj12EE3endEv>
 800861a:	62b8      	str	r0, [r7, #40]	; 0x28
 800861c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	429a      	cmp	r2, r3
 8008622:	d02f      	beq.n	8008684 <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0xe6>
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
			temp_index = reg_index * kCellsInReg;
 8008628:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800862c:	461a      	mov	r2, r3
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	4413      	add	r3, r2
 8008632:	b2db      	uxtb	r3, r3
 8008634:	72bb      	strb	r3, [r7, #10]
					status.SetMinTemp(temperature, { ic_index, temp_index });
				else if (temperature > status.max_temp)
					status.SetMaxTemp(temperature, { ic_index, temp_index });

				++temp_index;
			});
 8008636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008638:	f000 fb72 	bl	8008d20 <_ZNSt5arrayIsLj4EE5beginEv>
 800863c:	4606      	mov	r6, r0
			std::for_each(ic.begin(), ic.begin() + kCellsInReg, [&](auto& temperature) {
 800863e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008640:	f000 fb6e 	bl	8008d20 <_ZNSt5arrayIsLj4EE5beginEv>
 8008644:	4603      	mov	r3, r0
			});
 8008646:	1d9a      	adds	r2, r3, #6
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	f107 030b 	add.w	r3, r7, #11
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	f107 030a 	add.w	r3, r7, #10
 8008656:	623b      	str	r3, [r7, #32]
			std::for_each(ic.begin(), ic.begin() + kCellsInReg, [&](auto& temperature) {
 8008658:	f107 040c 	add.w	r4, r7, #12
 800865c:	466d      	mov	r5, sp
 800865e:	f107 031c 	add.w	r3, r7, #28
 8008662:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008666:	e885 0003 	stmia.w	r5, {r0, r1}
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	4631      	mov	r1, r6
 800866e:	4620      	mov	r0, r4
 8008670:	f000 fbc0 	bl	8008df4 <_ZSt8for_eachIPsZN7LTC681121ReadTemperatureHelperERSt5arrayIS2_IS2_IsLj4EELj12EELj2EEEUlRT_E_ET0_S7_S7_SA_>
			++ic_index;
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	3301      	adds	r3, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	72fb      	strb	r3, [r7, #11]
		for (auto& ic : reg) {
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867e:	3308      	adds	r3, #8
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008682:	e7cb      	b.n	800861c <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x7e>
		}
		++reg_index;
 8008684:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008688:	3301      	adds	r3, #1
 800868a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	for (auto& reg : temp_data) {
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	3360      	adds	r3, #96	; 0x60
 8008692:	643b      	str	r3, [r7, #64]	; 0x40
 8008694:	e79c      	b.n	80085d0 <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x32>
	}
	return pec_error;
 8008696:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800869a:	4618      	mov	r0, r3
 800869c:	374c      	adds	r7, #76	; 0x4c
 800869e:	46bd      	mov	sp, r7
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086a2 <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE>:

/* Reads the raw data from the LTC-6811 auxiliary register,
 * then verifies that the data was received correctly.
 * */
uint8_t LTC6811::ReadAuxRegister(uint8_t reg_id, LTC6811Register<int16_t>& reg) {
 80086a2:	b590      	push	{r4, r7, lr}
 80086a4:	b08b      	sub	sp, #44	; 0x2c
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	460b      	mov	r3, r1
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	72fb      	strb	r3, [r7, #11]
	LTC6811Command command = { 0x0, reg_id == 2 ? static_cast<uint8_t>(0xE) : static_cast<uint8_t>(0xC) };
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d101      	bne.n	80086be <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE+0x1c>
 80086ba:	230e      	movs	r3, #14
 80086bc:	e000      	b.n	80086c0 <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE+0x1e>
 80086be:	230c      	movs	r3, #12
 80086c0:	747b      	strb	r3, [r7, #17]
	auto PEC = PEC15Calc(command);
 80086c2:	6938      	ldr	r0, [r7, #16]
 80086c4:	f000 f904 	bl	80088d0 <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	command[2] = static_cast<uint8_t>(PEC >> 8);
 80086ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d2:	121c      	asrs	r4, r3, #8
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	2102      	movs	r1, #2
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f8c8 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 80086e0:	4603      	mov	r3, r0
 80086e2:	b2e2      	uxtb	r2, r4
 80086e4:	701a      	strb	r2, [r3, #0]
	command[3] = static_cast<uint8_t>(PEC);
 80086e6:	f107 0310 	add.w	r3, r7, #16
 80086ea:	2103      	movs	r1, #3
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f8bf 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 80086f2:	4602      	mov	r2, r0
 80086f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f8:	7013      	strb	r3, [r2, #0]

	WakeFromIdle();
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7ff fda7 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	ReadRegister(command, reg);
 8008700:	f107 0310 	add.w	r3, r7, #16
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4619      	mov	r1, r3
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fbb7 	bl	8008e7c <_ZN7LTC681112ReadRegisterIsEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>

	PEC = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (auto& ic : reg)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	69f8      	ldr	r0, [r7, #28]
 800871a:	f000 fae8 	bl	8008cee <_ZNSt5arrayIS_IsLj4EELj12EE5beginEv>
 800871e:	6238      	str	r0, [r7, #32]
 8008720:	69f8      	ldr	r0, [r7, #28]
 8008722:	f000 faf0 	bl	8008d06 <_ZNSt5arrayIS_IsLj4EELj12EE3endEv>
 8008726:	61b8      	str	r0, [r7, #24]
 8008728:	6a3a      	ldr	r2, [r7, #32]
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	429a      	cmp	r2, r3
 800872e:	d021      	beq.n	8008774 <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE+0xd2>
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	617b      	str	r3, [r7, #20]
		if (ic.back() != PEC15Calc(ic))
 8008734:	6978      	ldr	r0, [r7, #20]
 8008736:	f000 fbc1 	bl	8008ebc <_ZNSt5arrayIsLj4EE4backEv>
 800873a:	4603      	mov	r3, r0
 800873c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	2100      	movs	r1, #0
 8008746:	4611      	mov	r1, r2
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	461a      	mov	r2, r3
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	f000 fbd5 	bl	8008f00 <_ZN7LTC68119PEC15CalcIsLj4EEET_St5arrayIS1_XT0_EE>
 8008756:	4603      	mov	r3, r0
 8008758:	429c      	cmp	r4, r3
 800875a:	bf14      	ite	ne
 800875c:	2301      	movne	r3, #1
 800875e:	2300      	moveq	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE+0xca>
			PEC = 1;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (auto& ic : reg)
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	3308      	adds	r3, #8
 8008770:	623b      	str	r3, [r7, #32]
 8008772:	e7d9      	b.n	8008728 <_ZN7LTC681115ReadAuxRegisterEhRSt5arrayIS0_IsLj4EELj12EE+0x86>
	return PEC;
 8008774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008778:	4618      	mov	r0, r3
 800877a:	372c      	adds	r7, #44	; 0x2c
 800877c:	46bd      	mov	sp, r7
 800877e:	bd90      	pop	{r4, r7, pc}

08008780 <_ZN7LTC68118CalcTempEt>:

/* Calculates the temperature from thermistor voltage using lookup table. Linear equations are used for approximation. */
int16_t LTC6811::CalcTemp(uint16_t ntc_voltage) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b08a      	sub	sp, #40	; 0x28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
			18000, 17332, 16662, 15994, 15330, 14672, 14023, 13385,
			12760, 12150, 11556, 10980, 10423,  9885,  9367,  8870,
			8394,  7939,  7505,  7091,  6697,  6323,  5969,  5633
	};

	auto indices = std::equal_range(std::rbegin(LUT), std::rend(LUT), ntc_voltage);
 800878c:	f107 0310 	add.w	r3, r7, #16
 8008790:	492b      	ldr	r1, [pc, #172]	; (8008840 <_ZN7LTC68118CalcTempEt+0xc0>)
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fc06 	bl	8008fa4 <_ZSt6rbeginIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>
 8008798:	f107 0314 	add.w	r3, r7, #20
 800879c:	4928      	ldr	r1, [pc, #160]	; (8008840 <_ZN7LTC68118CalcTempEt+0xc0>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fc0f 	bl	8008fc2 <_ZSt4rendIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>
 80087a4:	f107 0008 	add.w	r0, r7, #8
 80087a8:	1cbb      	adds	r3, r7, #2
 80087aa:	f107 0214 	add.w	r2, r7, #20
 80087ae:	f107 0110 	add.w	r1, r7, #16
 80087b2:	f000 fc23 	bl	8008ffc <_ZSt11equal_rangeISt16reverse_iteratorIPKsEtESt4pairIT_S5_ES5_S5_RKT0_>

	int16_t x0 = *indices.first;
 80087b6:	f107 0308 	add.w	r3, r7, #8
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fc45 	bl	800904a <_ZNKSt16reverse_iteratorIPKsEdeEv>
 80087c0:	4603      	mov	r3, r0
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t x1 = *indices.second;
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fc3c 	bl	800904a <_ZNKSt16reverse_iteratorIPKsEdeEv>
 80087d2:	4603      	mov	r3, r0
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	84bb      	strh	r3, [r7, #36]	; 0x24
	int32_t m = (2 << 20) / (x1 - x0);
 80087d8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80087dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80087ea:	623b      	str	r3, [r7, #32]
	int32_t b = ((std::rend(LUT) - indices.first - 1) * 2) - m * x0; //TODO possibly off by 1, but I don't think so
 80087ec:	f107 0318 	add.w	r3, r7, #24
 80087f0:	4913      	ldr	r1, [pc, #76]	; (8008840 <_ZN7LTC68118CalcTempEt+0xc0>)
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fbe5 	bl	8008fc2 <_ZSt4rendIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>
 80087f8:	f107 0208 	add.w	r2, r7, #8
 80087fc:	f107 0318 	add.w	r3, r7, #24
 8008800:	4611      	mov	r1, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fc32 	bl	800906c <_ZStmiIPKsS1_EDTmicldtfp0_4baseEcldtfp_4baseEERKSt16reverse_iteratorIT_ERKS3_IT0_E>
 8008808:	4603      	mov	r3, r0
 800880a:	3b01      	subs	r3, #1
 800880c:	005a      	lsls	r2, r3, #1
 800880e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008812:	6a39      	ldr	r1, [r7, #32]
 8008814:	fb01 f303 	mul.w	r3, r1, r3
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	61fb      	str	r3, [r7, #28]
	return (m * ntc_voltage + b) / 10486; // (2^20 / 100) == 1048576
 800881c:	887b      	ldrh	r3, [r7, #2]
 800881e:	461a      	mov	r2, r3
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	fb03 f202 	mul.w	r2, r3, r2
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	4a06      	ldr	r2, [pc, #24]	; (8008844 <_ZN7LTC68118CalcTempEt+0xc4>)
 800882c:	fb82 1203 	smull	r1, r2, r2, r3
 8008830:	1312      	asrs	r2, r2, #12
 8008832:	17db      	asrs	r3, r3, #31
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	b21b      	sxth	r3, r3
}
 8008838:	4618      	mov	r0, r3
 800883a:	3728      	adds	r7, #40	; 0x28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	0800cf08 	.word	0x0800cf08
 8008844:	63ff6a01 	.word	0x63ff6a01

08008848 <_ZNSt4pairIhhEaSERKS0_>:

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch_no_braces&>::type __p)
      {
	first = __p.first;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	701a      	strb	r2, [r3, #0]
	second = __p.second;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785a      	ldrb	r2, [r3, #1]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	705a      	strb	r2, [r3, #1]
	return *this;
 8008862:	687b      	ldr	r3, [r7, #4]
      }
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <_ZNSt5arrayIhLj4EEixEj>:
      constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fc08 	bl	8009094 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 8008884:	4603      	mov	r3, r0
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <_ZN3gsl4spanIhLj4294967295EEC1ILj4ELi0EEERSt5arrayIhXT_EE>:
    constexpr span(std::array<element_type, N>& arr) noexcept
 800888e:	b5b0      	push	{r4, r5, r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
        : storage_(KnownNotNull{arr.data()}, details::extent_type<N>())
 8008898:	687c      	ldr	r4, [r7, #4]
 800889a:	6838      	ldr	r0, [r7, #0]
 800889c:	f000 f875 	bl	800898a <_ZNSt5arrayIhLj4EE4dataEv>
 80088a0:	4603      	mov	r3, r0
 80088a2:	462a      	mov	r2, r5
 80088a4:	4619      	mov	r1, r3
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fc02 	bl	80090b0 <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_>
    {}
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bdb0      	pop	{r4, r5, r7, pc}

080088b6 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4sizeEv>:
    constexpr size_type size() const noexcept { return storage_.size(); }
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fcb8 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE>:

static uint16_t crc15Table[256];

/* 	Calculates and returns the CRC15 */
template <typename T, size_t S>
static T PEC15Calc(std::array<T, S> data) {
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b089      	sub	sp, #36	; 0x24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	uint16_t remainder = 16, addr;
 80088d8:	2310      	movs	r3, #16
 80088da:	83fb      	strh	r3, [r7, #30]
	auto data_as_bytes = gsl::as_bytes(gsl::span<T>(data));
 80088dc:	1d3a      	adds	r2, r7, #4
 80088de:	f107 0310 	add.w	r3, r7, #16
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff ffd2 	bl	800888e <_ZN3gsl4spanIhLj4294967295EEC1ILj4ELi0EEERSt5arrayIhXT_EE>
 80088ea:	f107 0008 	add.w	r0, r7, #8
 80088ee:	f107 0310 	add.w	r3, r7, #16
 80088f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80088f6:	f000 fc3d 	bl	8009174 <_ZN3gsl8as_bytesIhLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>

	for (uint8_t i = 0; i < data_as_bytes.size() - 2; ++i) {
 80088fa:	2300      	movs	r3, #0
 80088fc:	777b      	strb	r3, [r7, #29]
 80088fe:	7f7c      	ldrb	r4, [r7, #29]
 8008900:	f107 0308 	add.w	r3, r7, #8
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff ffd6 	bl	80088b6 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4sizeEv>
 800890a:	4603      	mov	r3, r0
 800890c:	3b02      	subs	r3, #2
 800890e:	429c      	cmp	r4, r3
 8008910:	bf34      	ite	cc
 8008912:	2301      	movcc	r3, #1
 8008914:	2300      	movcs	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d01f      	beq.n	800895c <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE+0x8c>
		addr = (remainder >> 7 ^ (uint8_t)data_as_bytes[i]) & 0xFF;
 800891c:	8bfb      	ldrh	r3, [r7, #30]
 800891e:	11db      	asrs	r3, r3, #7
 8008920:	b21c      	sxth	r4, r3
 8008922:	7f7a      	ldrb	r2, [r7, #29]
 8008924:	f107 0308 	add.w	r3, r7, #8
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fc3c 	bl	80091a8 <_ZNK3gsl4spanIKNS_4byteELj4294967295EEixEj>
 8008930:	4603      	mov	r3, r0
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b21b      	sxth	r3, r3
 8008936:	4063      	eors	r3, r4
 8008938:	b21b      	sxth	r3, r3
 800893a:	b29b      	uxth	r3, r3
 800893c:	b2db      	uxtb	r3, r3
 800893e:	837b      	strh	r3, [r7, #26]
		remainder <<= 8 ^ LTC6811::crc15Table[addr];
 8008940:	8bfb      	ldrh	r3, [r7, #30]
 8008942:	8b7a      	ldrh	r2, [r7, #26]
 8008944:	4909      	ldr	r1, [pc, #36]	; (800896c <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE+0x9c>)
 8008946:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800894a:	f082 0208 	eor.w	r2, r2, #8
 800894e:	b292      	uxth	r2, r2
 8008950:	4093      	lsls	r3, r2
 8008952:	83fb      	strh	r3, [r7, #30]
	for (uint8_t i = 0; i < data_as_bytes.size() - 2; ++i) {
 8008954:	7f7b      	ldrb	r3, [r7, #29]
 8008956:	3301      	adds	r3, #1
 8008958:	777b      	strb	r3, [r7, #29]
 800895a:	e7d0      	b.n	80088fe <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE+0x2e>
	}

	return remainder * 2;
 800895c:	8bfb      	ldrh	r3, [r7, #30]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	b2db      	uxtb	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	3724      	adds	r7, #36	; 0x24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd90      	pop	{r4, r7, pc}
 800896c:	20000008 	.word	0x20000008

08008970 <_ZNKSt5arrayIhLj4EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fc31 	bl	80091e2 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8008980:	4603      	mov	r3, r0
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <_ZNSt5arrayIhLj4EE4dataEv>:
      data() noexcept
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 fc24 	bl	80091e2 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 800899a:	4603      	mov	r3, r0
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE5beginEv>:
      begin() noexcept
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc23 	bl	80091f8 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE4dataEv>
 80089b2:	4603      	mov	r3, r0
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE3endEv>:
      end() noexcept
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fc17 	bl	80091f8 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE4dataEv>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_ZNSt5arrayIS_ItLj4EELj12EE5beginEv>:
      begin() noexcept
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fc16 	bl	8009212 <_ZNSt5arrayIS_ItLj4EELj12EE4dataEv>
 80089e6:	4603      	mov	r3, r0
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <_ZNSt5arrayIS_ItLj4EELj12EE3endEv>:
      end() noexcept
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fc0a 	bl	8009212 <_ZNSt5arrayIS_ItLj4EELj12EE4dataEv>
 80089fe:	4603      	mov	r3, r0
 8008a00:	3360      	adds	r3, #96	; 0x60
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <_ZNSt5arrayItLj4EE5beginEv>:
      begin() noexcept
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fc0a 	bl	800922c <_ZNSt5arrayItLj4EE4dataEv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <_ZNSt4pairIhhEC1IRhS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008a2e:	68b8      	ldr	r0, [r7, #8]
 8008a30:	f000 fc09 	bl	8009246 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8008a34:	4603      	mov	r3, r0
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fc02 	bl	8009246 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8008a42:	4603      	mov	r3, r0
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	705a      	strb	r2, [r3, #1]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <_ZZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EEENKUlRT_E_clItEEDaS6_>:
			std::for_each(ic.begin(), ic.begin() + kCellsInReg, [&](auto& voltage) { // For each voltage of current LTC6811
 8008a54:	b5b0      	push	{r4, r5, r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
				status.sum_of_cells += voltage;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	440a      	add	r2, r1
 8008a72:	b292      	uxth	r2, r2
 8008a74:	879a      	strh	r2, [r3, #60]	; 0x3c
				if (voltage < status.min_voltage && voltage > 5000) // Ignore cells under 500 mV
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	881a      	ldrh	r2, [r3, #0]
				status.sum_of_cells += voltage;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
				if (voltage < status.min_voltage && voltage > 5000) // Ignore cells under 500 mV
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d21b      	bcs.n	8008abe <_ZZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EEENKUlRT_E_clItEEDaS6_+0x6a>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d915      	bls.n	8008abe <_ZZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EEENKUlRT_E_clItEEDaS6_+0x6a>
				status.sum_of_cells += voltage;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
					status.SetMinVoltage(voltage, { ic_index, cell_index });
 8008a96:	685c      	ldr	r4, [r3, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	881d      	ldrh	r5, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6859      	ldr	r1, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff ffba 	bl	8008a22 <_ZNSt4pairIhhEC1IRhS2_Lb1EEEOT_OT0_>
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f7ff fa22 	bl	8007f00 <_ZN6Status13SetMinVoltageEtRKSt4pairIhhE>
 8008abc:	e01c      	b.n	8008af8 <_ZZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EEENKUlRT_E_clItEEDaS6_+0xa4>
				else if (voltage > status.max_voltage)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	881a      	ldrh	r2, [r3, #0]
				status.sum_of_cells += voltage;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
				else if (voltage > status.max_voltage)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d914      	bls.n	8008af8 <_ZZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EEENKUlRT_E_clItEEDaS6_+0xa4>
				status.sum_of_cells += voltage;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
					status.SetMaxVoltage(voltage, { ic_index, cell_index });
 8008ad2:	685c      	ldr	r4, [r3, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	881d      	ldrh	r5, [r3, #0]
					status.SetMinVoltage(voltage, { ic_index, cell_index });
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6859      	ldr	r1, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
					status.SetMaxVoltage(voltage, { ic_index, cell_index });
 8008ae0:	f107 030c 	add.w	r3, r7, #12
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff ff9c 	bl	8008a22 <_ZNSt4pairIhhEC1IRhS2_Lb1EEEOT_OT0_>
 8008aea:	f107 030c 	add.w	r3, r7, #12
 8008aee:	461a      	mov	r2, r3
 8008af0:	4629      	mov	r1, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7ff fa49 	bl	8007f8a <_ZN6Status13SetMaxVoltageEtRKSt4pairIhhE>
					status.SetMinVoltage(voltage, { ic_index, cell_index });
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
				++cell_index;
 8008afc:	781a      	ldrb	r2, [r3, #0]
 8008afe:	3201      	adds	r2, #1
 8008b00:	b2d2      	uxtb	r2, r2
 8008b02:	701a      	strb	r2, [r3, #0]
			});
 8008b04:	bf00      	nop
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bdb0      	pop	{r4, r5, r7, pc}

08008b0c <_ZSt8for_eachIPtZN7LTC681117ReadVoltageHelperERSt5arrayIS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_S7_S7_SA_>:
   *  @p [first,last).  @p __f must not modify the order of the sequence.
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	b590      	push	{r4, r7, lr}
 8008b10:	b085      	sub	sp, #20
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d009      	beq.n	8008b38 <_ZSt8for_eachIPtZN7LTC681117ReadVoltageHelperERSt5arrayIS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_S7_S7_SA_+0x2c>
	__f(*__first);
 8008b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff ff92 	bl	8008a54 <_ZZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EEENKUlRT_E_clItEEDaS6_>
      for (; __first != __last; ++__first)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3302      	adds	r3, #2
 8008b34:	60bb      	str	r3, [r7, #8]
 8008b36:	e7f1      	b.n	8008b1c <_ZSt8for_eachIPtZN7LTC681117ReadVoltageHelperERSt5arrayIS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_S7_S7_SA_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	461c      	mov	r4, r3
 8008b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008b52:	b002      	add	sp, #8
 8008b54:	4770      	bx	lr

08008b56 <_Z4spanItEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>:
auto span(LTC6811Register<T>& data) {
 8008b56:	b590      	push	{r4, r7, lr}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
	return gsl::span<T>(data.data()->data(), data.data()->data() + kDaisyChainLength * kBytesPerRegister / sizeof(T));
 8008b60:	6838      	ldr	r0, [r7, #0]
 8008b62:	f000 fb56 	bl	8009212 <_ZNSt5arrayIS_ItLj4EELj12EE4dataEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fb5f 	bl	800922c <_ZNSt5arrayItLj4EE4dataEv>
 8008b6e:	4604      	mov	r4, r0
 8008b70:	6838      	ldr	r0, [r7, #0]
 8008b72:	f000 fb4e 	bl	8009212 <_ZNSt5arrayIS_ItLj4EELj12EE4dataEv>
 8008b76:	4603      	mov	r3, r0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fb57 	bl	800922c <_ZNSt5arrayItLj4EE4dataEv>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	3360      	adds	r3, #96	; 0x60
 8008b82:	461a      	mov	r2, r3
 8008b84:	4621      	mov	r1, r4
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fba0 	bl	80092cc <_ZN3gsl4spanItLj4294967295EEC1EPtS2_>
}
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd90      	pop	{r4, r7, pc}

08008b94 <_ZN7LTC681112ReadRegisterItEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>:
uint8_t ReadRegister(LTC6811Command const& command, LTC6811Register<T>& reg) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
	return ReadRegister(command, gsl::as_writable_bytes(span(reg)));
 8008ba0:	f107 0310 	add.w	r3, r7, #16
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff ffd5 	bl	8008b56 <_Z4spanItEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 8008bac:	f107 0018 	add.w	r0, r7, #24
 8008bb0:	f107 0310 	add.w	r3, r7, #16
 8008bb4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008bb8:	f000 fbe0 	bl	800937c <_ZN3gsl17as_writable_bytesItLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>
 8008bbc:	f107 0318 	add.w	r3, r7, #24
 8008bc0:	cb0c      	ldmia	r3, {r2, r3}
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fb89 	bl	80082dc <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZNSt5arrayItLj4EE4backEv>:
      back() noexcept
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
      { return _Nm ? *(end() - 1) : *end(); }
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fbe7 	bl	80093b0 <_ZNSt5arrayItLj4EE3endEv>
 8008be2:	4603      	mov	r3, r0
 8008be4:	3b02      	subs	r3, #2
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <_ZN3gsl4spanItLj4294967295EEC1ILj4ELi0EEERSt5arrayItXT_EE>:
    constexpr span(std::array<element_type, N>& arr) noexcept
 8008bee:	b5b0      	push	{r4, r5, r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
        : storage_(KnownNotNull{arr.data()}, details::extent_type<N>())
 8008bf8:	687c      	ldr	r4, [r7, #4]
 8008bfa:	6838      	ldr	r0, [r7, #0]
 8008bfc:	f000 fb16 	bl	800922c <_ZNSt5arrayItLj4EE4dataEv>
 8008c00:	4603      	mov	r3, r0
 8008c02:	462a      	mov	r2, r5
 8008c04:	4619      	mov	r1, r3
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fbdf 	bl	80093ca <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_>
    {}
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c18 <_ZN7LTC68119PEC15CalcItLj4EEET_St5arrayIS1_XT0_EE>:
static T PEC15Calc(std::array<T, S> data) {
 8008c18:	b590      	push	{r4, r7, lr}
 8008c1a:	b089      	sub	sp, #36	; 0x24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	463b      	mov	r3, r7
 8008c20:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t remainder = 16, addr;
 8008c24:	2310      	movs	r3, #16
 8008c26:	83fb      	strh	r3, [r7, #30]
	auto data_as_bytes = gsl::as_bytes(gsl::span<T>(data));
 8008c28:	463a      	mov	r2, r7
 8008c2a:	f107 0310 	add.w	r3, r7, #16
 8008c2e:	4611      	mov	r1, r2
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff ffdc 	bl	8008bee <_ZN3gsl4spanItLj4294967295EEC1ILj4ELi0EEERSt5arrayItXT_EE>
 8008c36:	f107 0008 	add.w	r0, r7, #8
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008c42:	f000 fbe4 	bl	800940e <_ZN3gsl8as_bytesItLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>
	for (uint8_t i = 0; i < data_as_bytes.size() - 2; ++i) {
 8008c46:	2300      	movs	r3, #0
 8008c48:	777b      	strb	r3, [r7, #29]
 8008c4a:	7f7c      	ldrb	r4, [r7, #29]
 8008c4c:	f107 0308 	add.w	r3, r7, #8
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff fe30 	bl	80088b6 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4sizeEv>
 8008c56:	4603      	mov	r3, r0
 8008c58:	3b02      	subs	r3, #2
 8008c5a:	429c      	cmp	r4, r3
 8008c5c:	bf34      	ite	cc
 8008c5e:	2301      	movcc	r3, #1
 8008c60:	2300      	movcs	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01f      	beq.n	8008ca8 <_ZN7LTC68119PEC15CalcItLj4EEET_St5arrayIS1_XT0_EE+0x90>
		addr = (remainder >> 7 ^ (uint8_t)data_as_bytes[i]) & 0xFF;
 8008c68:	8bfb      	ldrh	r3, [r7, #30]
 8008c6a:	11db      	asrs	r3, r3, #7
 8008c6c:	b21c      	sxth	r4, r3
 8008c6e:	7f7a      	ldrb	r2, [r7, #29]
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fa96 	bl	80091a8 <_ZNK3gsl4spanIKNS_4byteELj4294967295EEixEj>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b21b      	sxth	r3, r3
 8008c82:	4063      	eors	r3, r4
 8008c84:	b21b      	sxth	r3, r3
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	837b      	strh	r3, [r7, #26]
		remainder <<= 8 ^ LTC6811::crc15Table[addr];
 8008c8c:	8bfb      	ldrh	r3, [r7, #30]
 8008c8e:	8b7a      	ldrh	r2, [r7, #26]
 8008c90:	4909      	ldr	r1, [pc, #36]	; (8008cb8 <_ZN7LTC68119PEC15CalcItLj4EEET_St5arrayIS1_XT0_EE+0xa0>)
 8008c92:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008c96:	f082 0208 	eor.w	r2, r2, #8
 8008c9a:	b292      	uxth	r2, r2
 8008c9c:	4093      	lsls	r3, r2
 8008c9e:	83fb      	strh	r3, [r7, #30]
	for (uint8_t i = 0; i < data_as_bytes.size() - 2; ++i) {
 8008ca0:	7f7b      	ldrb	r3, [r7, #29]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	777b      	strb	r3, [r7, #29]
 8008ca6:	e7d0      	b.n	8008c4a <_ZN7LTC68119PEC15CalcItLj4EEET_St5arrayIS1_XT0_EE+0x32>
	return remainder * 2;
 8008ca8:	8bfb      	ldrh	r3, [r7, #30]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	b29b      	uxth	r3, r3
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3724      	adds	r7, #36	; 0x24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd90      	pop	{r4, r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000008 	.word	0x20000008

08008cbc <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE5beginEv>:
      begin() noexcept
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fbbc 	bl	8009442 <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE4dataEv>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE3endEv>:
      end() noexcept
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fbb0 	bl	8009442 <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE4dataEv>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	33c0      	adds	r3, #192	; 0xc0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <_ZNSt5arrayIS_IsLj4EELj12EE5beginEv>:
      begin() noexcept
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbb0 	bl	800945c <_ZNSt5arrayIS_IsLj4EELj12EE4dataEv>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <_ZNSt5arrayIS_IsLj4EELj12EE3endEv>:
      end() noexcept
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fba4 	bl	800945c <_ZNSt5arrayIS_IsLj4EELj12EE4dataEv>
 8008d14:	4603      	mov	r3, r0
 8008d16:	3360      	adds	r3, #96	; 0x60
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <_ZNSt5arrayIsLj4EE5beginEv>:
      begin() noexcept
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fba4 	bl	8009476 <_ZNSt5arrayIsLj4EE4dataEv>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <_ZZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EEENKUlRT_E_clIsEEDaS6_>:
			std::for_each(ic.begin(), ic.begin() + kCellsInReg, [&](auto& temperature) {
 8008d38:	b5b0      	push	{r4, r5, r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
				temperature = CalcTemp(temperature);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7ff fd15 	bl	8008780 <_ZN7LTC68118CalcTempEt>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	801a      	strh	r2, [r3, #0]
				if (temperature < status.min_temp)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	f9b3 2000 	ldrsh.w	r2, [r3]
				temperature = CalcTemp(temperature);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
				if (temperature < status.min_temp)
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	da16      	bge.n	8008da0 <_ZZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EEENKUlRT_E_clIsEEDaS6_+0x68>
				temperature = CalcTemp(temperature);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
					status.SetMinTemp(temperature, { ic_index, temp_index });
 8008d76:	685c      	ldr	r4, [r3, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6859      	ldr	r1, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	f107 0308 	add.w	r3, r7, #8
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff fe49 	bl	8008a22 <_ZNSt4pairIhhEC1IRhS2_Lb1EEEOT_OT0_>
 8008d90:	f107 0308 	add.w	r3, r7, #8
 8008d94:	461a      	mov	r2, r3
 8008d96:	4629      	mov	r1, r5
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f7ff f92d 	bl	8007ff8 <_ZN6Status10SetMinTempEsRKSt4pairIhhE>
 8008d9e:	e01f      	b.n	8008de0 <_ZZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EEENKUlRT_E_clIsEEDaS6_+0xa8>
				else if (temperature > status.max_temp)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	f9b3 2000 	ldrsh.w	r2, [r3]
				temperature = CalcTemp(temperature);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
				else if (temperature > status.max_temp)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008db0:	429a      	cmp	r2, r3
 8008db2:	dd15      	ble.n	8008de0 <_ZZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EEENKUlRT_E_clIsEEDaS6_+0xa8>
				temperature = CalcTemp(temperature);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
					status.SetMaxTemp(temperature, { ic_index, temp_index });
 8008db8:	685c      	ldr	r4, [r3, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
					status.SetMinTemp(temperature, { ic_index, temp_index });
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6859      	ldr	r1, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689a      	ldr	r2, [r3, #8]
					status.SetMaxTemp(temperature, { ic_index, temp_index });
 8008dc8:	f107 030c 	add.w	r3, r7, #12
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fe28 	bl	8008a22 <_ZNSt4pairIhhEC1IRhS2_Lb1EEEOT_OT0_>
 8008dd2:	f107 030c 	add.w	r3, r7, #12
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f7ff f930 	bl	8008040 <_ZN6Status10SetMaxTempEsRKSt4pairIhhE>
					status.SetMinTemp(temperature, { ic_index, temp_index });
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
				++temp_index;
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	3201      	adds	r2, #1
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]
			});
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bdb0      	pop	{r4, r5, r7, pc}

08008df4 <_ZSt8for_eachIPsZN7LTC681121ReadTemperatureHelperERSt5arrayIS2_IS2_IsLj4EELj12EELj2EEEUlRT_E_ET0_S7_S7_SA_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8008df4:	b082      	sub	sp, #8
 8008df6:	b590      	push	{r4, r7, lr}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
      for (; __first != __last; ++__first)
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d009      	beq.n	8008e20 <_ZSt8for_eachIPsZN7LTC681121ReadTemperatureHelperERSt5arrayIS2_IS2_IsLj4EELj12EELj2EEEUlRT_E_ET0_S7_S7_SA_+0x2c>
	__f(*__first);
 8008e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff ff90 	bl	8008d38 <_ZZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EEENKUlRT_E_clIsEEDaS6_>
      for (; __first != __last; ++__first)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	e7f1      	b.n	8008e04 <_ZSt8for_eachIPsZN7LTC681121ReadTemperatureHelperERSt5arrayIS2_IS2_IsLj4EELj12EELj2EEEUlRT_E_ET0_S7_S7_SA_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	461c      	mov	r4, r3
 8008e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008e3a:	b002      	add	sp, #8
 8008e3c:	4770      	bx	lr

08008e3e <_Z4spanIsEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>:
auto span(LTC6811Register<T>& data) {
 8008e3e:	b590      	push	{r4, r7, lr}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
	return gsl::span<T>(data.data()->data(), data.data()->data() + kDaisyChainLength * kBytesPerRegister / sizeof(T));
 8008e48:	6838      	ldr	r0, [r7, #0]
 8008e4a:	f000 fb07 	bl	800945c <_ZNSt5arrayIS_IsLj4EELj12EE4dataEv>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fb10 	bl	8009476 <_ZNSt5arrayIsLj4EE4dataEv>
 8008e56:	4604      	mov	r4, r0
 8008e58:	6838      	ldr	r0, [r7, #0]
 8008e5a:	f000 faff 	bl	800945c <_ZNSt5arrayIS_IsLj4EELj12EE4dataEv>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fb08 	bl	8009476 <_ZNSt5arrayIsLj4EE4dataEv>
 8008e66:	4603      	mov	r3, r0
 8008e68:	3360      	adds	r3, #96	; 0x60
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb46 	bl	8009500 <_ZN3gsl4spanIsLj4294967295EEC1EPsS2_>
}
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd90      	pop	{r4, r7, pc}

08008e7c <_ZN7LTC681112ReadRegisterIsEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>:
uint8_t ReadRegister(LTC6811Command const& command, LTC6811Register<T>& reg) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
	return ReadRegister(command, gsl::as_writable_bytes(span(reg)));
 8008e88:	f107 0310 	add.w	r3, r7, #16
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff ffd5 	bl	8008e3e <_Z4spanIsEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 8008e94:	f107 0018 	add.w	r0, r7, #24
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008ea0:	f000 fb86 	bl	80095b0 <_ZN3gsl17as_writable_bytesIsLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>
 8008ea4:	f107 0318 	add.w	r3, r7, #24
 8008ea8:	cb0c      	ldmia	r3, {r2, r3}
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f7ff fa15 	bl	80082dc <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE>
 8008eb2:	4603      	mov	r3, r0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <_ZNSt5arrayIsLj4EE4backEv>:
      back() noexcept
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
      { return _Nm ? *(end() - 1) : *end(); }
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fb8d 	bl	80095e4 <_ZNSt5arrayIsLj4EE3endEv>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	3b02      	subs	r3, #2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <_ZN3gsl4spanIsLj4294967295EEC1ILj4ELi0EEERSt5arrayIsXT_EE>:
    constexpr span(std::array<element_type, N>& arr) noexcept
 8008ed6:	b5b0      	push	{r4, r5, r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
        : storage_(KnownNotNull{arr.data()}, details::extent_type<N>())
 8008ee0:	687c      	ldr	r4, [r7, #4]
 8008ee2:	6838      	ldr	r0, [r7, #0]
 8008ee4:	f000 fac7 	bl	8009476 <_ZNSt5arrayIsLj4EE4dataEv>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	462a      	mov	r2, r5
 8008eec:	4619      	mov	r1, r3
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 fb85 	bl	80095fe <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_>
    {}
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f00 <_ZN7LTC68119PEC15CalcIsLj4EEET_St5arrayIS1_XT0_EE>:
static T PEC15Calc(std::array<T, S> data) {
 8008f00:	b590      	push	{r4, r7, lr}
 8008f02:	b089      	sub	sp, #36	; 0x24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	463b      	mov	r3, r7
 8008f08:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t remainder = 16, addr;
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	83fb      	strh	r3, [r7, #30]
	auto data_as_bytes = gsl::as_bytes(gsl::span<T>(data));
 8008f10:	463a      	mov	r2, r7
 8008f12:	f107 0310 	add.w	r3, r7, #16
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff ffdc 	bl	8008ed6 <_ZN3gsl4spanIsLj4294967295EEC1ILj4ELi0EEERSt5arrayIsXT_EE>
 8008f1e:	f107 0008 	add.w	r0, r7, #8
 8008f22:	f107 0310 	add.w	r3, r7, #16
 8008f26:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008f2a:	f000 fb8a 	bl	8009642 <_ZN3gsl8as_bytesIsLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>
	for (uint8_t i = 0; i < data_as_bytes.size() - 2; ++i) {
 8008f2e:	2300      	movs	r3, #0
 8008f30:	777b      	strb	r3, [r7, #29]
 8008f32:	7f7c      	ldrb	r4, [r7, #29]
 8008f34:	f107 0308 	add.w	r3, r7, #8
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fcbc 	bl	80088b6 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4sizeEv>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	3b02      	subs	r3, #2
 8008f42:	429c      	cmp	r4, r3
 8008f44:	bf34      	ite	cc
 8008f46:	2301      	movcc	r3, #1
 8008f48:	2300      	movcs	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01f      	beq.n	8008f90 <_ZN7LTC68119PEC15CalcIsLj4EEET_St5arrayIS1_XT0_EE+0x90>
		addr = (remainder >> 7 ^ (uint8_t)data_as_bytes[i]) & 0xFF;
 8008f50:	8bfb      	ldrh	r3, [r7, #30]
 8008f52:	11db      	asrs	r3, r3, #7
 8008f54:	b21c      	sxth	r4, r3
 8008f56:	7f7a      	ldrb	r2, [r7, #29]
 8008f58:	f107 0308 	add.w	r3, r7, #8
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 f922 	bl	80091a8 <_ZNK3gsl4spanIKNS_4byteELj4294967295EEixEj>
 8008f64:	4603      	mov	r3, r0
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	b21b      	sxth	r3, r3
 8008f6a:	4063      	eors	r3, r4
 8008f6c:	b21b      	sxth	r3, r3
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	837b      	strh	r3, [r7, #26]
		remainder <<= 8 ^ LTC6811::crc15Table[addr];
 8008f74:	8bfb      	ldrh	r3, [r7, #30]
 8008f76:	8b7a      	ldrh	r2, [r7, #26]
 8008f78:	4909      	ldr	r1, [pc, #36]	; (8008fa0 <_ZN7LTC68119PEC15CalcIsLj4EEET_St5arrayIS1_XT0_EE+0xa0>)
 8008f7a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008f7e:	f082 0208 	eor.w	r2, r2, #8
 8008f82:	b292      	uxth	r2, r2
 8008f84:	4093      	lsls	r3, r2
 8008f86:	83fb      	strh	r3, [r7, #30]
	for (uint8_t i = 0; i < data_as_bytes.size() - 2; ++i) {
 8008f88:	7f7b      	ldrb	r3, [r7, #29]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	777b      	strb	r3, [r7, #29]
 8008f8e:	e7d0      	b.n	8008f32 <_ZN7LTC68119PEC15CalcIsLj4EEET_St5arrayIS1_XT0_EE+0x32>
	return remainder * 2;
 8008f90:	8bfb      	ldrh	r3, [r7, #30]
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	b21b      	sxth	r3, r3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3724      	adds	r7, #36	; 0x24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd90      	pop	{r4, r7, pc}
 8008fa0:	20000008 	.word	0x20000008

08008fa4 <_ZSt6rbeginIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>:
   *          the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
    { return reverse_iterator<_Tp*>(__arr + _Nm); }
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	3340      	adds	r3, #64	; 0x40
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb5e 	bl	8009676 <_ZNSt16reverse_iteratorIPKsEC1ES1_>
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <_ZSt4rendIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>:
   *          the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
    { return reverse_iterator<_Tp*>(__arr); }
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fb51 	bl	8009676 <_ZNSt16reverse_iteratorIPKsEC1ES1_>
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>:

      /**
       *  The copy constructor is normal.
      */
      _GLIBCXX17_CONSTEXPR
      reverse_iterator(const reverse_iterator& __x)
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
      : current(__x.current) { }
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <_ZSt11equal_rangeISt16reverse_iteratorIPKsEtESt4pairIT_S5_ES5_S5_RKT0_>:
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
 8008ffc:	b5b0      	push	{r4, r5, r7, lr}
 8008ffe:	b08a      	sub	sp, #40	; 0x28
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
				__gnu_cxx::__ops::__val_less_iter());
 800900a:	f107 0310 	add.w	r3, r7, #16
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff ffe3 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009016:	f107 0314 	add.w	r3, r7, #20
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff ffdd 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
				__gnu_cxx::__ops::__iter_less_val(),
 8009022:	f7ff f8de 	bl	80081e2 <_ZN9__gnu_cxx5__ops15__iter_less_valEv>
				__gnu_cxx::__ops::__val_less_iter());
 8009026:	f7ff f8e3 	bl	80081f0 <_ZN9__gnu_cxx5__ops15__val_less_iterEv>
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f107 0214 	add.w	r2, r7, #20
 8009030:	f107 0110 	add.w	r1, r7, #16
 8009034:	f88d 5004 	strb.w	r5, [sp, #4]
 8009038:	f88d 4000 	strb.w	r4, [sp]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f000 fb29 	bl	8009694 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_>
    }
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	3720      	adds	r7, #32
 8009046:	46bd      	mov	sp, r7
 8009048:	bdb0      	pop	{r4, r5, r7, pc}

0800904a <_ZNKSt16reverse_iteratorIPKsEdeEv>:
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */
      _GLIBCXX17_CONSTEXPR reference
      operator*() const
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
      {
	_Iterator __tmp = current;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
	return *--__tmp;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3b02      	subs	r3, #2
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
      }
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <_ZStmiIPKsS1_EDTmicldtfp0_4baseEcldtfp_4baseEERKSt16reverse_iteratorIT_ERKS3_IT0_E>:
#else
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // DR 685. reverse_iterator/move_iterator difference has invalid signatures
  template<typename _IteratorL, typename _IteratorR>
    inline _GLIBCXX17_CONSTEXPR auto
    operator-(const reverse_iterator<_IteratorL>& __x,
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	      const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }
 8009076:	6838      	ldr	r0, [r7, #0]
 8009078:	f000 fbbc 	bl	80097f4 <_ZNKSt16reverse_iteratorIPKsE4baseEv>
 800907c:	4603      	mov	r3, r0
 800907e:	461c      	mov	r4, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fbb7 	bl	80097f4 <_ZNKSt16reverse_iteratorIPKsE4baseEv>
 8009086:	4603      	mov	r3, r0
 8009088:	1ae3      	subs	r3, r4, r3
 800908a:	105b      	asrs	r3, r3, #1
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	bd90      	pop	{r4, r7, pc}

08009094 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	4413      	add	r3, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_>:
        constexpr storage_type(KnownNotNull data, OtherExtentType ext)
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	713a      	strb	r2, [r7, #4]
            : ExtentType(ext), data_(data.p)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4621      	mov	r1, r4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fba3 	bl	800980c <_ZN3gsl7details11extent_typeILj4294967295EEC1ILj4EEENS1_IXT_EEE>
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff f8b1 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80090d4:	4603      	mov	r3, r0
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	bf14      	ite	ne
 80090dc:	2301      	movne	r3, #1
 80090de:	2300      	moveq	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_+0x3a>
 80090e6:	f7ff f88a 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd90      	pop	{r4, r7, pc}

080090f4 <_ZNK3gsl4spanIhLj4294967295EE4dataEv>:
    constexpr pointer data() const noexcept { return storage_.data(); }
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f805 	bl	800910e <_ZNK3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>
 8009104:	4603      	mov	r3, r0
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <_ZNK3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>:
        constexpr pointer data() const noexcept { return data_; }
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <_ZNK3gsl4spanIhLj4294967295EE4sizeEv>:
    constexpr size_type size() const noexcept { return storage_.size(); }
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff f880 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009136:	4603      	mov	r3, r0
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <_ZNK3gsl4spanIhLj4294967295EE10size_bytesEv>:
    constexpr size_type size_bytes() const noexcept
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
        Expects(size() < dynamic_extent / sizeof(element_type));
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ffec 	bl	8009126 <_ZNK3gsl4spanIhLj4294967295EE4sizeEv>
 800914e:	4603      	mov	r3, r0
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <_ZNK3gsl4spanIhLj4294967295EE10size_bytesEv+0x24>
 8009160:	f7ff f84d 	bl	80081fe <_ZN3gsl7details9terminateEv>
        return size() * sizeof(element_type);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff ffde 	bl	8009126 <_ZNK3gsl4spanIhLj4294967295EE4sizeEv>
 800916a:	4603      	mov	r3, r0
    }
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <_ZN3gsl8as_bytesIhLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>:
} // namespace details

// [span.objectrep], views of object representation
template <class ElementType, std::size_t Extent>
span<const byte, details::calculate_byte_size<ElementType, Extent>::value>
as_bytes(span<ElementType, Extent> s) noexcept
 8009174:	b590      	push	{r4, r7, lr}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	1d3b      	adds	r3, r7, #4
 800917e:	e883 0006 	stmia.w	r3, {r1, r2}
{
    // clang-format off
    GSL_SUPPRESS(type.1) // NO-FORMAT: attribute
    // clang-format on
    return {reinterpret_cast<const byte*>(s.data()), s.size_bytes()};
 8009182:	1d3b      	adds	r3, r7, #4
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff ffb5 	bl	80090f4 <_ZNK3gsl4spanIhLj4294967295EE4dataEv>
 800918a:	4604      	mov	r4, r0
 800918c:	1d3b      	adds	r3, r7, #4
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff ffd6 	bl	8009140 <_ZNK3gsl4spanIhLj4294967295EE10size_bytesEv>
 8009194:	4603      	mov	r3, r0
 8009196:	461a      	mov	r2, r3
 8009198:	4621      	mov	r1, r4
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fb7f 	bl	800989e <_ZN3gsl4spanIKNS_4byteELj4294967295EEC1EPS2_j>
}
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd90      	pop	{r4, r7, pc}

080091a8 <_ZNK3gsl4spanIKNS_4byteELj4294967295EEixEj>:
    constexpr reference operator[](size_type idx) const noexcept
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
        Expects(idx < size());
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff fb7f 	bl	80088b6 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4sizeEv>
 80091b8:	4602      	mov	r2, r0
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	4293      	cmp	r3, r2
 80091be:	bf34      	ite	cc
 80091c0:	2301      	movcc	r3, #1
 80091c2:	2300      	movcs	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <_ZNK3gsl4spanIKNS_4byteELj4294967295EEixEj+0x26>
 80091ca:	f7ff f818 	bl	80081fe <_ZN3gsl7details9terminateEv>
        return data()[idx];
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff f852 	bl	8008278 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4dataEv>
 80091d4:	4602      	mov	r2, r0
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	4413      	add	r3, r2
    }
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE4dataEv>:
      data() noexcept
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fba5 	bl	8009952 <_ZNSt14__array_traitsISt5arrayIS0_ItLj4EELj12EELj4EE6_S_ptrERA4_KS2_>
 8009208:	4603      	mov	r3, r0
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <_ZNSt5arrayIS_ItLj4EELj12EE4dataEv>:
      data() noexcept
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fba3 	bl	8009968 <_ZNSt14__array_traitsISt5arrayItLj4EELj12EE6_S_ptrERA12_KS1_>
 8009222:	4603      	mov	r3, r0
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <_ZNSt5arrayItLj4EE4dataEv>:
      data() noexcept
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fba1 	bl	800997e <_ZNSt14__array_traitsItLj4EE6_S_ptrERA4_Kt>
 800923c:	4603      	mov	r3, r0
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPtT_>:
        constexpr storage_type(pointer data, OtherExtentType ext) : ExtentType(ext), data_(data)
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe ffca 	bl	8008206 <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe ffdb 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009280:	4603      	mov	r3, r0
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	bf14      	ite	ne
 8009288:	2301      	movne	r3, #1
 800928a:	2300      	moveq	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPtT_+0x3a>
 8009292:	f7fe ffb4 	bl	80081fe <_ZN3gsl7details9terminateEv>
            Expects(data || ExtentType::size() == 0);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf14      	ite	ne
 800929c:	2301      	movne	r3, #1
 800929e:	2300      	moveq	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10d      	bne.n	80092c2 <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPtT_+0x66>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe ffc4 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bf0c      	ite	eq
 80092b4:	2301      	moveq	r3, #1
 80092b6:	2300      	movne	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPtT_+0x66>
 80092be:	f7fe ff9e 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <_ZN3gsl4spanItLj4294967295EEC1EPtS2_>:
    constexpr span(pointer firstElem, pointer lastElem) noexcept
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
        : storage_(firstElem, static_cast<std::size_t>(lastElem - firstElem))
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	105b      	asrs	r3, r3, #1
 80092e2:	461a      	mov	r2, r3
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	f7ff ffb9 	bl	800925c <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPtT_>
    }
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <_ZNK3gsl4spanItLj4294967295EE4dataEv>:
    constexpr pointer data() const noexcept { return storage_.data(); }
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f805 	bl	800930e <_ZNK3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>
 8009304:	4603      	mov	r3, r0
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <_ZNK3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>:
        constexpr pointer data() const noexcept { return data_; }
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <_ZNK3gsl4spanItLj4294967295EE4sizeEv>:
    constexpr size_type size() const noexcept { return storage_.size(); }
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe ff80 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009336:	4603      	mov	r3, r0
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <_ZNK3gsl4spanItLj4294967295EE10size_bytesEv>:
    constexpr size_type size_bytes() const noexcept
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
        Expects(size() < dynamic_extent / sizeof(element_type));
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ffec 	bl	8009326 <_ZNK3gsl4spanItLj4294967295EE4sizeEv>
 800934e:	4602      	mov	r2, r0
 8009350:	4b09      	ldr	r3, [pc, #36]	; (8009378 <_ZNK3gsl4spanItLj4294967295EE10size_bytesEv+0x38>)
 8009352:	429a      	cmp	r2, r3
 8009354:	bf94      	ite	ls
 8009356:	2301      	movls	r3, #1
 8009358:	2300      	movhi	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <_ZNK3gsl4spanItLj4294967295EE10size_bytesEv+0x24>
 8009360:	f7fe ff4d 	bl	80081fe <_ZN3gsl7details9terminateEv>
        return size() * sizeof(element_type);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff ffde 	bl	8009326 <_ZNK3gsl4spanItLj4294967295EE4sizeEv>
 800936a:	4603      	mov	r3, r0
 800936c:	005b      	lsls	r3, r3, #1
    }
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	7ffffffe 	.word	0x7ffffffe

0800937c <_ZN3gsl17as_writable_bytesItLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>:

template <class ElementType, std::size_t Extent,
          std::enable_if_t<!std::is_const<ElementType>::value, int> = 0>
span<byte, details::calculate_byte_size<ElementType, Extent>::value>
as_writable_bytes(span<ElementType, Extent> s) noexcept
 800937c:	b590      	push	{r4, r7, lr}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	e883 0006 	stmia.w	r3, {r1, r2}
{
    // clang-format off
    GSL_SUPPRESS(type.1) // NO-FORMAT: attribute
    // clang-format on
    return {reinterpret_cast<byte*>(s.data()), s.size_bytes()};
 800938a:	1d3b      	adds	r3, r7, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff ffb1 	bl	80092f4 <_ZNK3gsl4spanItLj4294967295EE4dataEv>
 8009392:	4604      	mov	r4, r0
 8009394:	1d3b      	adds	r3, r7, #4
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff ffd2 	bl	8009340 <_ZNK3gsl4spanItLj4294967295EE10size_bytesEv>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	4621      	mov	r1, r4
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 fac4 	bl	8009930 <_ZN3gsl4spanINS_4byteELj4294967295EEC1EPS1_j>
}
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd90      	pop	{r4, r7, pc}

080093b0 <_ZNSt5arrayItLj4EE3endEv>:
      end() noexcept
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ff37 	bl	800922c <_ZNSt5arrayItLj4EE4dataEv>
 80093be:	4603      	mov	r3, r0
 80093c0:	3308      	adds	r3, #8
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_>:
        constexpr storage_type(KnownNotNull data, OtherExtentType ext)
 80093ca:	b590      	push	{r4, r7, lr}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	713a      	strb	r2, [r7, #4]
            : ExtentType(ext), data_(data.p)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4621      	mov	r1, r4
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fa16 	bl	800980c <_ZN3gsl7details11extent_typeILj4294967295EEC1ILj4EEENS1_IXT_EEE>
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe ff24 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	bf14      	ite	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	2300      	moveq	r3, #0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <_ZN3gsl4spanItLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_+0x3a>
 8009400:	f7fe fefd 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	bd90      	pop	{r4, r7, pc}

0800940e <_ZN3gsl8as_bytesItLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>:
as_bytes(span<ElementType, Extent> s) noexcept
 800940e:	b590      	push	{r4, r7, lr}
 8009410:	b085      	sub	sp, #20
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	e883 0006 	stmia.w	r3, {r1, r2}
    return {reinterpret_cast<const byte*>(s.data()), s.size_bytes()};
 800941c:	1d3b      	adds	r3, r7, #4
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff ff68 	bl	80092f4 <_ZNK3gsl4spanItLj4294967295EE4dataEv>
 8009424:	4604      	mov	r4, r0
 8009426:	1d3b      	adds	r3, r7, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff ff89 	bl	8009340 <_ZNK3gsl4spanItLj4294967295EE10size_bytesEv>
 800942e:	4603      	mov	r3, r0
 8009430:	461a      	mov	r2, r3
 8009432:	4621      	mov	r1, r4
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fa32 	bl	800989e <_ZN3gsl4spanIKNS_4byteELj4294967295EEC1EPS2_j>
}
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	bd90      	pop	{r4, r7, pc}

08009442 <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE4dataEv>:
      data() noexcept
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 faa1 	bl	8009994 <_ZNSt14__array_traitsISt5arrayIS0_IsLj4EELj12EELj2EE6_S_ptrERA2_KS2_>
 8009452:	4603      	mov	r3, r0
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZNSt5arrayIS_IsLj4EELj12EE4dataEv>:
      data() noexcept
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fa9f 	bl	80099aa <_ZNSt14__array_traitsISt5arrayIsLj4EELj12EE6_S_ptrERA12_KS1_>
 800946c:	4603      	mov	r3, r0
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <_ZNSt5arrayIsLj4EE4dataEv>:
      data() noexcept
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fa9d 	bl	80099c0 <_ZNSt14__array_traitsIsLj4EE6_S_ptrERA4_Ks>
 8009486:	4603      	mov	r3, r0
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPsT_>:
        constexpr storage_type(pointer data, OtherExtentType ext) : ExtentType(ext), data_(data)
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe feb0 	bl	8008206 <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fec1 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	bf14      	ite	ne
 80094bc:	2301      	movne	r3, #1
 80094be:	2300      	moveq	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPsT_+0x3a>
 80094c6:	f7fe fe9a 	bl	80081fe <_ZN3gsl7details9terminateEv>
            Expects(data || ExtentType::size() == 0);
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bf14      	ite	ne
 80094d0:	2301      	movne	r3, #1
 80094d2:	2300      	moveq	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPsT_+0x66>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fe feaa 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bf0c      	ite	eq
 80094e8:	2301      	moveq	r3, #1
 80094ea:	2300      	movne	r3, #0
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPsT_+0x66>
 80094f2:	f7fe fe84 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <_ZN3gsl4spanIsLj4294967295EEC1EPsS2_>:
    constexpr span(pointer firstElem, pointer lastElem) noexcept
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
        : storage_(firstElem, static_cast<std::size_t>(lastElem - firstElem))
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	105b      	asrs	r3, r3, #1
 8009516:	461a      	mov	r2, r3
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	f7ff ffb9 	bl	8009490 <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPsT_>
    }
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <_ZNK3gsl4spanIsLj4294967295EE4dataEv>:
    constexpr pointer data() const noexcept { return storage_.data(); }
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f805 	bl	8009542 <_ZNK3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>
 8009538:	4603      	mov	r3, r0
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <_ZNK3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEE4dataEv>:
        constexpr pointer data() const noexcept { return data_; }
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <_ZNK3gsl4spanIsLj4294967295EE4sizeEv>:
    constexpr size_type size() const noexcept { return storage_.size(); }
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fe66 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 800956a:	4603      	mov	r3, r0
 800956c:	4618      	mov	r0, r3
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <_ZNK3gsl4spanIsLj4294967295EE10size_bytesEv>:
    constexpr size_type size_bytes() const noexcept
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
        Expects(size() < dynamic_extent / sizeof(element_type));
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff ffec 	bl	800955a <_ZNK3gsl4spanIsLj4294967295EE4sizeEv>
 8009582:	4602      	mov	r2, r0
 8009584:	4b09      	ldr	r3, [pc, #36]	; (80095ac <_ZNK3gsl4spanIsLj4294967295EE10size_bytesEv+0x38>)
 8009586:	429a      	cmp	r2, r3
 8009588:	bf94      	ite	ls
 800958a:	2301      	movls	r3, #1
 800958c:	2300      	movhi	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <_ZNK3gsl4spanIsLj4294967295EE10size_bytesEv+0x24>
 8009594:	f7fe fe33 	bl	80081fe <_ZN3gsl7details9terminateEv>
        return size() * sizeof(element_type);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff ffde 	bl	800955a <_ZNK3gsl4spanIsLj4294967295EE4sizeEv>
 800959e:	4603      	mov	r3, r0
 80095a0:	005b      	lsls	r3, r3, #1
    }
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	7ffffffe 	.word	0x7ffffffe

080095b0 <_ZN3gsl17as_writable_bytesIsLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>:
as_writable_bytes(span<ElementType, Extent> s) noexcept
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	1d3b      	adds	r3, r7, #4
 80095ba:	e883 0006 	stmia.w	r3, {r1, r2}
    return {reinterpret_cast<byte*>(s.data()), s.size_bytes()};
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff ffb1 	bl	8009528 <_ZNK3gsl4spanIsLj4294967295EE4dataEv>
 80095c6:	4604      	mov	r4, r0
 80095c8:	1d3b      	adds	r3, r7, #4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff ffd2 	bl	8009574 <_ZNK3gsl4spanIsLj4294967295EE10size_bytesEv>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461a      	mov	r2, r3
 80095d4:	4621      	mov	r1, r4
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f9aa 	bl	8009930 <_ZN3gsl4spanINS_4byteELj4294967295EEC1EPS1_j>
}
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd90      	pop	{r4, r7, pc}

080095e4 <_ZNSt5arrayIsLj4EE3endEv>:
      end() noexcept
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff42 	bl	8009476 <_ZNSt5arrayIsLj4EE4dataEv>
 80095f2:	4603      	mov	r3, r0
 80095f4:	3308      	adds	r3, #8
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_>:
        constexpr storage_type(KnownNotNull data, OtherExtentType ext)
 80095fe:	b590      	push	{r4, r7, lr}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	713a      	strb	r2, [r7, #4]
            : ExtentType(ext), data_(data.p)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4621      	mov	r1, r4
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f8fc 	bl	800980c <_ZN3gsl7details11extent_typeILj4294967295EEC1ILj4EEENS1_IXT_EEE>
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fe0a 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009622:	4603      	mov	r3, r0
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	bf14      	ite	ne
 800962a:	2301      	movne	r3, #1
 800962c:	2300      	moveq	r3, #0
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <_ZN3gsl4spanIsLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1INS4_ILj4EEEEENS1_12KnownNotNullET_+0x3a>
 8009634:	f7fe fde3 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	bd90      	pop	{r4, r7, pc}

08009642 <_ZN3gsl8as_bytesIsLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>:
as_bytes(span<ElementType, Extent> s) noexcept
 8009642:	b590      	push	{r4, r7, lr}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	1d3b      	adds	r3, r7, #4
 800964c:	e883 0006 	stmia.w	r3, {r1, r2}
    return {reinterpret_cast<const byte*>(s.data()), s.size_bytes()};
 8009650:	1d3b      	adds	r3, r7, #4
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff ff68 	bl	8009528 <_ZNK3gsl4spanIsLj4294967295EE4dataEv>
 8009658:	4604      	mov	r4, r0
 800965a:	1d3b      	adds	r3, r7, #4
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff ff89 	bl	8009574 <_ZNK3gsl4spanIsLj4294967295EE10size_bytesEv>
 8009662:	4603      	mov	r3, r0
 8009664:	461a      	mov	r2, r3
 8009666:	4621      	mov	r1, r4
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f918 	bl	800989e <_ZN3gsl4spanIKNS_4byteELj4294967295EEC1EPS2_j>
}
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	bd90      	pop	{r4, r7, pc}

08009676 <_ZNSt16reverse_iteratorIPKsEC1ES1_>:
      reverse_iterator(iterator_type __x) : current(__x) { }
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_>:
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
 8009694:	b5b0      	push	{r4, r5, r7, lr}
 8009696:	b094      	sub	sp, #80	; 0x50
 8009698:	af02      	add	r7, sp, #8
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
      _DistanceType __len = std::distance(__first, __last);
 80096a2:	f107 0320 	add.w	r3, r7, #32
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fc97 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 80096ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fc91 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 80096ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80096be:	f107 0320 	add.w	r3, r7, #32
 80096c2:	4611      	mov	r1, r2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f990 	bl	80099ea <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 80096ca:	6478      	str	r0, [r7, #68]	; 0x44
      while (__len > 0)
 80096cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f340 8087 	ble.w	80097e2 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x14e>
	  _DistanceType __half = __len >> 1;
 80096d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d6:	105b      	asrs	r3, r3, #1
 80096d8:	643b      	str	r3, [r7, #64]	; 0x40
	  _ForwardIterator __middle = __first;
 80096da:	f107 031c 	add.w	r3, r7, #28
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff fc7b 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
	  std::advance(__middle, __half);
 80096e6:	f107 031c 	add.w	r3, r7, #28
 80096ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f99d 	bl	8009a2c <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
	  if (__comp_it_val(__middle, __val))
 80096f2:	f107 021c 	add.w	r2, r7, #28
 80096f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fc6d 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4619      	mov	r1, r3
 800970a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800970e:	f000 f9a0 	bl	8009a52 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclISt16reverse_iteratorIPKsEKtEEbT_RT0_>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x9c>
	      __first = __middle;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	69fa      	ldr	r2, [r7, #28]
 800971c:	601a      	str	r2, [r3, #0]
	      ++__first;
 800971e:	68b8      	ldr	r0, [r7, #8]
 8009720:	f000 f9af 	bl	8009a82 <_ZNSt16reverse_iteratorIPKsEppEv>
	      __len = __len - __half - 1;
 8009724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	647b      	str	r3, [r7, #68]	; 0x44
 800972e:	e7cd      	b.n	80096cc <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x38>
	  else if (__comp_val_it(__val, __middle))
 8009730:	f107 021c 	add.w	r2, r7, #28
 8009734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009738:	4611      	mov	r1, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fc4e 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009740:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009744:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 f9a9 	bl	8009aa2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKtSt16reverse_iteratorIPKsEEEbRT_T0_>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0xc8>
	    __len = __half;
 8009756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009758:	647b      	str	r3, [r7, #68]	; 0x44
 800975a:	e7b7      	b.n	80096cc <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x38>
	      _ForwardIterator __left
 800975c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009760:	68b9      	ldr	r1, [r7, #8]
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fc3a 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009768:	f107 021c 	add.w	r2, r7, #28
 800976c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fc32 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009778:	f107 0018 	add.w	r0, r7, #24
 800977c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009780:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009784:	f88d 5000 	strb.w	r5, [sp]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f000 f9a2 	bl	8009ad2 <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_>
	      std::advance(__first, __len);
 800978e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009790:	68b8      	ldr	r0, [r7, #8]
 8009792:	f000 f94b 	bl	8009a2c <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
 8009796:	f107 031c 	add.w	r3, r7, #28
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f971 	bl	8009a82 <_ZNSt16reverse_iteratorIPKsEppEv>
 80097a0:	4602      	mov	r2, r0
	      _ForwardIterator __right
 80097a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097a6:	4611      	mov	r1, r2
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff fc17 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 80097ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff fc11 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 80097ba:	f107 0014 	add.w	r0, r7, #20
 80097be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80097c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80097c6:	f88d 4000 	strb.w	r4, [sp]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	f000 f9d9 	bl	8009b82 <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_>
	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
 80097d0:	f107 0214 	add.w	r2, r7, #20
 80097d4:	f107 0318 	add.w	r3, r7, #24
 80097d8:	4619      	mov	r1, r3
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 fa34 	bl	8009c48 <_ZNSt4pairISt16reverse_iteratorIPKsES3_EC1IRS3_S6_Lb1EEEOT_OT0_>
 80097e0:	e004      	b.n	80097ec <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x158>
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fa2e 	bl	8009c48 <_ZNSt4pairISt16reverse_iteratorIPKsES3_EC1IRS3_S6_Lb1EEEOT_OT0_>
    }
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	3748      	adds	r7, #72	; 0x48
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bdb0      	pop	{r4, r5, r7, pc}

080097f4 <_ZNKSt16reverse_iteratorIPKsE4baseEv>:
      base() const
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
      { return current; }
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <_ZN3gsl7details11extent_typeILj4294967295EEC1ILj4EEENS1_IXT_EEE>:
        explicit constexpr extent_type(extent_type<Other> ext) : size_(ext.size())
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	7039      	strb	r1, [r7, #0]
 8009816:	463b      	mov	r3, r7
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fa33 	bl	8009c84 <_ZNK3gsl7details11extent_typeILj4EE4sizeEv>
 800981e:	4602      	mov	r2, r0
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
        {}
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <_ZN3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS2_T_>:
        constexpr storage_type(pointer data, OtherExtentType ext) : ExtentType(ext), data_(data)
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fce1 	bl	8008206 <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fcf2 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009852:	4603      	mov	r3, r0
 8009854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009858:	bf14      	ite	ne
 800985a:	2301      	movne	r3, #1
 800985c:	2300      	moveq	r3, #0
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <_ZN3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS2_T_+0x3a>
 8009864:	f7fe fccb 	bl	80081fe <_ZN3gsl7details9terminateEv>
            Expects(data || ExtentType::size() == 0);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	bf14      	ite	ne
 800986e:	2301      	movne	r3, #1
 8009870:	2300      	moveq	r3, #0
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <_ZN3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS2_T_+0x66>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fcdb 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	bf0c      	ite	eq
 8009886:	2301      	moveq	r3, #1
 8009888:	2300      	movne	r3, #0
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <_ZN3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS2_T_+0x66>
 8009890:	f7fe fcb5 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <_ZN3gsl4spanIKNS_4byteELj4294967295EEC1EPS2_j>:
    constexpr span(pointer ptr, size_type count) noexcept : storage_(ptr, count)
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ffbc 	bl	800982e <_ZN3gsl4spanIKNS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS2_T_>
    }
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <_ZN3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS1_T_>:
        constexpr storage_type(pointer data, OtherExtentType ext) : ExtentType(ext), data_(data)
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fe fc98 	bl	8008206 <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fca9 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <_ZN3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS1_T_+0x3a>
 80098f6:	f7fe fc82 	bl	80081fe <_ZN3gsl7details9terminateEv>
            Expects(data || ExtentType::size() == 0);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bf14      	ite	ne
 8009900:	2301      	movne	r3, #1
 8009902:	2300      	moveq	r3, #0
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <_ZN3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS1_T_+0x66>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fc92 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	bf0c      	ite	eq
 8009918:	2301      	moveq	r3, #1
 800991a:	2300      	movne	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <_ZN3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS1_T_+0x66>
 8009922:	f7fe fc6c 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <_ZN3gsl4spanINS_4byteELj4294967295EEC1EPS1_j>:
    constexpr span(pointer ptr, size_type count) noexcept : storage_(ptr, count)
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff ffbc 	bl	80098c0 <_ZN3gsl4spanINS_4byteELj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPS1_T_>
    }
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <_ZNSt14__array_traitsISt5arrayIS0_ItLj4EELj12EELj4EE6_S_ptrERA4_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <_ZNSt14__array_traitsISt5arrayItLj4EELj12EE6_S_ptrERA12_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <_ZNSt14__array_traitsItLj4EE6_S_ptrERA4_Kt>:
      _S_ptr(const _Type& __t) noexcept
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <_ZNSt14__array_traitsISt5arrayIS0_IsLj4EELj12EELj2EE6_S_ptrERA2_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <_ZNSt14__array_traitsISt5arrayIsLj4EELj12EE6_S_ptrERA12_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <_ZNSt14__array_traitsIsLj4EE6_S_ptrERA4_Ks>:
      _S_ptr(const _Type& __t) noexcept
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <_ZSt19__iterator_categoryISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80099ea:	b590      	push	{r4, r7, lr}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff faee 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009a00:	f107 0310 	add.w	r3, r7, #16
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fae8 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
			     std::__iterator_category(__first));
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff ffe2 	bl	80099d6 <_ZSt19__iterator_categoryISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8009a12:	f107 0110 	add.w	r1, r7, #16
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f93c 	bl	8009c9a <_ZSt10__distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8009a22:	4603      	mov	r3, r0
    }
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd90      	pop	{r4, r7, pc}

08009a2c <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8009a2c:	b590      	push	{r4, r7, lr}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff ffcb 	bl	80099d6 <_ZSt19__iterator_categoryISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8009a40:	4622      	mov	r2, r4
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f937 	bl	8009cb8 <_ZSt9__advanceISt16reverse_iteratorIPKsEiEvRT_T0_St26random_access_iterator_tag>
    }
 8009a4a:	bf00      	nop
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd90      	pop	{r4, r7, pc}

08009a52 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclISt16reverse_iteratorIPKsEKtEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8009a5e:	68b8      	ldr	r0, [r7, #8]
 8009a60:	f7ff faf3 	bl	800904a <_ZNKSt16reverse_iteratorIPKsEdeEv>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	bfb4      	ite	lt
 8009a74:	2301      	movlt	r3, #1
 8009a76:	2300      	movge	r3, #0
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <_ZNSt16reverse_iteratorIPKsEppEv>:
      operator++()
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
	--current;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	1e9a      	subs	r2, r3, #2
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	601a      	str	r2, [r3, #0]
	return *this;
 8009a94:	687b      	ldr	r3, [r7, #4]
      }
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKtSt16reverse_iteratorIPKsEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8009aa2:	b590      	push	{r4, r7, lr}
 8009aa4:	b085      	sub	sp, #20
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	461c      	mov	r4, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff fac8 	bl	800904a <_ZNKSt16reverse_iteratorIPKsEdeEv>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	bfb4      	ite	lt
 8009ac4:	2301      	movlt	r3, #1
 8009ac6:	2300      	movge	r3, #0
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd90      	pop	{r4, r7, pc}

08009ad2 <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_>:
							    __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b08a      	sub	sp, #40	; 0x28
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	603b      	str	r3, [r7, #0]
		  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);
 8009ae0:	f107 0314 	add.w	r3, r7, #20
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fa78 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009aec:	f107 0318 	add.w	r3, r7, #24
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff fa72 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009af8:	f107 0218 	add.w	r2, r7, #24
 8009afc:	f107 0314 	add.w	r3, r7, #20
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff ff71 	bl	80099ea <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8009b08:	6278      	str	r0, [r7, #36]	; 0x24

      while (__len > 0)
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dd30      	ble.n	8009b72 <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0xa0>
	{
	  _DistanceType __half = __len >> 1;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	105b      	asrs	r3, r3, #1
 8009b14:	623b      	str	r3, [r7, #32]
	  _ForwardIterator __middle = __first;
 8009b16:	f107 0310 	add.w	r3, r7, #16
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff fa5d 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
	  std::advance(__middle, __half);
 8009b22:	f107 0310 	add.w	r3, r7, #16
 8009b26:	6a39      	ldr	r1, [r7, #32]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff ff7f 	bl	8009a2c <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
	  if (__comp(__middle, __val))
 8009b2e:	f107 0210 	add.w	r2, r7, #16
 8009b32:	f107 031c 	add.w	r3, r7, #28
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff fa4f 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009b3e:	f107 031c 	add.w	r3, r7, #28
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009b4a:	f7ff ff82 	bl	8009a52 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclISt16reverse_iteratorIPKsEKtEEbT_RT0_>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0x9a>
	    {
	      __first = __middle;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	601a      	str	r2, [r3, #0]
	      ++__first;
 8009b5a:	68b8      	ldr	r0, [r7, #8]
 8009b5c:	f7ff ff91 	bl	8009a82 <_ZNSt16reverse_iteratorIPKsEppEv>
	      __len = __len - __half - 1;
 8009b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6a:	e7ce      	b.n	8009b0a <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0x38>
	    }
	  else
	    __len = __half;
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__len > 0)
 8009b70:	e7cb      	b.n	8009b0a <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0x38>
	}
      return __first;
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff fa31 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
    }
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	3728      	adds	r7, #40	; 0x28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_>:
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b08a      	sub	sp, #40	; 0x28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	603b      	str	r3, [r7, #0]
      _DistanceType __len = std::distance(__first, __last);
 8009b90:	f107 0314 	add.w	r3, r7, #20
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fa20 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009b9c:	f107 0318 	add.w	r3, r7, #24
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff fa1a 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009ba8:	f107 0218 	add.w	r2, r7, #24
 8009bac:	f107 0314 	add.w	r3, r7, #20
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff ff19 	bl	80099ea <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8009bb8:	6278      	str	r0, [r7, #36]	; 0x24
      while (__len > 0)
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dd30      	ble.n	8009c22 <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0xa0>
	  _DistanceType __half = __len >> 1;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	105b      	asrs	r3, r3, #1
 8009bc4:	623b      	str	r3, [r7, #32]
	  _ForwardIterator __middle = __first;
 8009bc6:	f107 0310 	add.w	r3, r7, #16
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fa05 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
	  std::advance(__middle, __half);
 8009bd2:	f107 0310 	add.w	r3, r7, #16
 8009bd6:	6a39      	ldr	r1, [r7, #32]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ff27 	bl	8009a2c <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
	  if (__comp(__val, __middle))
 8009bde:	f107 0210 	add.w	r2, r7, #16
 8009be2:	f107 031c 	add.w	r3, r7, #28
 8009be6:	4611      	mov	r1, r2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff f9f7 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009bee:	f107 031c 	add.w	r3, r7, #28
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009bfa:	f7ff ff52 	bl	8009aa2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKtSt16reverse_iteratorIPKsEEEbRT_T0_>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0x88>
	    __len = __half;
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
 8009c08:	e7d7      	b.n	8009bba <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0x38>
	      __first = __middle;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	601a      	str	r2, [r3, #0]
	      ++__first;
 8009c10:	68b8      	ldr	r0, [r7, #8]
 8009c12:	f7ff ff36 	bl	8009a82 <_ZNSt16reverse_iteratorIPKsEppEv>
	      __len = __len - __half - 1;
 8009c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__len > 0)
 8009c20:	e7cb      	b.n	8009bba <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0x38>
      return __first;
 8009c22:	68b9      	ldr	r1, [r7, #8]
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff f9d9 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
    }
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	3728      	adds	r7, #40	; 0x28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <_ZSt7forwardIRSt16reverse_iteratorIPKsEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <_ZNSt4pairISt16reverse_iteratorIPKsES3_EC1IRS3_S6_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8009c48:	b590      	push	{r4, r7, lr}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8009c54:	68fc      	ldr	r4, [r7, #12]
 8009c56:	68b8      	ldr	r0, [r7, #8]
 8009c58:	f7ff ffeb 	bl	8009c32 <_ZSt7forwardIRSt16reverse_iteratorIPKsEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7ff f9bb 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	1d1c      	adds	r4, r3, #4
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff ffe1 	bl	8009c32 <_ZSt7forwardIRSt16reverse_iteratorIPKsEEOT_RNSt16remove_referenceIS5_E4typeE>
 8009c70:	4603      	mov	r3, r0
 8009c72:	4619      	mov	r1, r3
 8009c74:	4620      	mov	r0, r4
 8009c76:	f7ff f9b1 	bl	8008fdc <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd90      	pop	{r4, r7, pc}

08009c84 <_ZNK3gsl7details11extent_typeILj4EE4sizeEv>:
        constexpr size_type size() const noexcept { return Ext; }
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <_ZSt10__distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8009ca6:	68f9      	ldr	r1, [r7, #12]
 8009ca8:	68b8      	ldr	r0, [r7, #8]
 8009caa:	f7ff f9df 	bl	800906c <_ZStmiIPKsS1_EDTmicldtfp0_4baseEcldtfp_4baseEERKSt16reverse_iteratorIT_ERKS3_IT0_E>
 8009cae:	4603      	mov	r3, r0
    }
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZSt9__advanceISt16reverse_iteratorIPKsEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	713a      	strb	r2, [r7, #4]
      __i += __n;
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 f804 	bl	8009cd4 <_ZNSt16reverse_iteratorIPKsEpLEi>
    }
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZNSt16reverse_iteratorIPKsEpLEi>:
      operator+=(difference_type __n)
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
	current -= __n;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	425b      	negs	r3, r3
 8009ce8:	441a      	add	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
	return *this;
 8009cee:	687b      	ldr	r3, [r7, #4]
      }
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009d06:	f000 f879 	bl	8009dfc <BSP_SD_IsDetected>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d001      	beq.n	8009d14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e012      	b.n	8009d3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009d14:	480b      	ldr	r0, [pc, #44]	; (8009d44 <BSP_SD_Init+0x48>)
 8009d16:	f7f8 fd85 	bl	8002824 <HAL_SD_Init>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d109      	bne.n	8009d38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d28:	4806      	ldr	r0, [pc, #24]	; (8009d44 <BSP_SD_Init+0x48>)
 8009d2a:	f7f9 fb55 	bl	80033d8 <HAL_SD_ConfigWideBusOperation>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009d38:	79fb      	ldrb	r3, [r7, #7]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000318 	.word	0x20000318

08009d48 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	4806      	ldr	r0, [pc, #24]	; (8009d80 <BSP_SD_ReadBlocks+0x38>)
 8009d66:	f7f8 fde5 	bl	8002934 <HAL_SD_ReadBlocks>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000318 	.word	0x20000318

08009d84 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	68f9      	ldr	r1, [r7, #12]
 8009da0:	4806      	ldr	r0, [pc, #24]	; (8009dbc <BSP_SD_WriteBlocks+0x38>)
 8009da2:	f7f8 ff5d 	bl	8002c60 <HAL_SD_WriteBlocks>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20000318 	.word	0x20000318

08009dc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009dc4:	4805      	ldr	r0, [pc, #20]	; (8009ddc <BSP_SD_GetCardState+0x1c>)
 8009dc6:	f7f9 fb83 	bl	80034d0 <HAL_SD_GetCardState>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	bf14      	ite	ne
 8009dd0:	2301      	movne	r3, #1
 8009dd2:	2300      	moveq	r3, #0
 8009dd4:	b2db      	uxtb	r3, r3
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000318 	.word	0x20000318

08009de0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4803      	ldr	r0, [pc, #12]	; (8009df8 <BSP_SD_GetCardInfo+0x18>)
 8009dec:	f7f9 fac8 	bl	8003380 <HAL_SD_GetCardInfo>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20000318 	.word	0x20000318

08009dfc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009e02:	2301      	movs	r3, #1
 8009e04:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009e06:	f000 f825 	bl	8009e54 <BSP_PlatformIsDetected>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009e10:	2300      	movs	r3, #0
 8009e12:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	b2db      	uxtb	r3, r3
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009e24:	4904      	ldr	r1, [pc, #16]	; (8009e38 <MX_FATFS_Init+0x18>)
 8009e26:	4805      	ldr	r0, [pc, #20]	; (8009e3c <MX_FATFS_Init+0x1c>)
 8009e28:	f7fe f82a 	bl	8007e80 <FATFS_LinkDriver>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <MX_FATFS_Init+0x20>)
 8009e32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009e34:	bf00      	nop
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000738 	.word	0x20000738
 8009e3c:	0800cf48 	.word	0x0800cf48
 8009e40:	20000734 	.word	0x20000734

08009e44 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e62:	4806      	ldr	r0, [pc, #24]	; (8009e7c <BSP_PlatformIsDetected+0x28>)
 8009e64:	f7f7 fcda 	bl	800181c <HAL_GPIO_ReadPin>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009e72:	79fb      	ldrb	r3, [r7, #7]
}  
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	40020000 	.word	0x40020000

08009e80 <_ZN4NLG5C1Ettt>:
	uint16_t oc_limit;
	uint16_t ov_limit;
	uint8_t a_buffer[4];
	uint8_t b_buffer[4];

	NLG5(uint16_t mc_limit = 160, uint16_t oc_limit = 60, uint16_t ov_limit = 2990) :
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	817b      	strh	r3, [r7, #10]
 8009e92:	460b      	mov	r3, r1
 8009e94:	813b      	strh	r3, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	80fb      	strh	r3, [r7, #6]
	mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit } {};
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	897a      	ldrh	r2, [r7, #10]
 8009e9e:	805a      	strh	r2, [r3, #2]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	893a      	ldrh	r2, [r7, #8]
 8009ea4:	809a      	strh	r2, [r3, #4]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	88fa      	ldrh	r2, [r7, #6]
 8009eaa:	80da      	strh	r2, [r3, #6]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <_ZN6StatusC1EhR4NLG5>:
	Status(uint8_t op_mode, NLG5& nlg5) : op_mode { op_mode }, nlg5 { nlg5 } { // get rid of logging bool and just use op mode
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b08c      	sub	sp, #48	; 0x30
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	72fb      	strb	r3, [r7, #11]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	7afa      	ldrb	r2, [r7, #11]
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	705a      	strb	r2, [r3, #1]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	709a      	strb	r2, [r3, #2]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	605a      	str	r2, [r3, #4]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	609a      	str	r2, [r3, #8]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	731a      	strb	r2, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	735a      	strb	r2, [r3, #13]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	739a      	strb	r2, [r3, #14]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	73da      	strb	r2, [r3, #15]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3310      	adds	r3, #16
 8009f02:	2224      	movs	r2, #36	; 0x24
 8009f04:	2100      	movs	r1, #0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f002 fea2 	bl	800cc50 <memset>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	869a      	strh	r2, [r3, #52]	; 0x34
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	86da      	strh	r2, [r3, #54]	; 0x36
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009f1e:	2300      	movs	r3, #0
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	2300      	movs	r3, #0
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	f107 0214 	add.w	r2, r7, #20
 8009f2a:	f107 0310 	add.w	r3, r7, #16
 8009f2e:	4619      	mov	r1, r3
 8009f30:	f001 ff34 	bl	800bd9c <_ZNSt4pairIhhEC1IiiLb1EEEOT_OT0_>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61bb      	str	r3, [r7, #24]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	61fb      	str	r3, [r7, #28]
 8009f42:	f107 021c 	add.w	r2, r7, #28
 8009f46:	f107 0318 	add.w	r3, r7, #24
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	f001 ff26 	bl	800bd9c <_ZNSt4pairIhhEC1IiiLb1EEEOT_OT0_>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	879a      	strh	r2, [r3, #60]	; 0x3c
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f103 0042 	add.w	r0, r3, #66	; 0x42
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	623b      	str	r3, [r7, #32]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
 8009f72:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009f76:	f107 0320 	add.w	r3, r7, #32
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f001 ff0e 	bl	800bd9c <_ZNSt4pairIhhEC1IiiLb1EEEOT_OT0_>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009f86:	2300      	movs	r3, #0
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f96:	4619      	mov	r1, r3
 8009f98:	f001 ff00 	bl	800bd9c <_ZNSt4pairIhhEC1IiiLb1EEEOT_OT0_>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	649a      	str	r2, [r3, #72]	; 0x48
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	651a      	str	r2, [r3, #80]	; 0x50
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f04f 0200 	mov.w	r2, #0
 8009fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f04f 0200 	mov.w	r2, #0
 8009fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3360      	adds	r3, #96	; 0x60
 8009fc8:	2230      	movs	r2, #48	; 0x30
 8009fca:	2100      	movs	r1, #0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f002 fe3f 	bl	800cc50 <memset>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		OpenAIR();
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7fd ff53 	bl	8007ea0 <_ZNK6Status7OpenAIREv>
		OpenPRE();
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7fd ff66 	bl	8007ecc <_ZN6Status7OpenPREEv>
		SetFanDutyCycle(kFanLowDutyCycle);
 800a000:	210a      	movs	r1, #10
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 f881 	bl	800a10a <_ZN6Status15SetFanDutyCycleEh>
	};
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4618      	mov	r0, r3
 800a00c:	3730      	adds	r7, #48	; 0x30
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <_ZNK6Status8CloseAIREv>:
	void CloseAIR(void) const {
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
 800a01c:	2201      	movs	r2, #1
 800a01e:	2102      	movs	r1, #2
 800a020:	4805      	ldr	r0, [pc, #20]	; (800a038 <_ZNK6Status8CloseAIREv+0x24>)
 800a022:	f7f7 fc13 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
 800a026:	2201      	movs	r2, #1
 800a028:	2104      	movs	r1, #4
 800a02a:	4804      	ldr	r0, [pc, #16]	; (800a03c <_ZNK6Status8CloseAIREv+0x28>)
 800a02c:	f7f7 fc0e 	bl	800184c <HAL_GPIO_WritePin>
	}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40020400 	.word	0x40020400
 800a03c:	40020800 	.word	0x40020800

0800a040 <_ZN6Status8ClosePREEv>:
	void ClosePRE(void) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // PRECHARGE
 800a048:	2201      	movs	r2, #1
 800a04a:	2101      	movs	r1, #1
 800a04c:	4807      	ldr	r0, [pc, #28]	; (800a06c <_ZN6Status8ClosePREEv+0x2c>)
 800a04e:	f7f7 fbfd 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // LED1
 800a052:	2201      	movs	r2, #1
 800a054:	2102      	movs	r1, #2
 800a056:	4806      	ldr	r0, [pc, #24]	; (800a070 <_ZN6Status8ClosePREEv+0x30>)
 800a058:	f7f7 fbf8 	bl	800184c <HAL_GPIO_WritePin>
		precharge_flag = true;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	731a      	strb	r2, [r3, #12]
	}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40020400 	.word	0x40020400
 800a070:	40020800 	.word	0x40020800

0800a074 <_ZN6Status18IncreasePecCounterEv>:
	void IncreasePecCounter() {
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
		pec_average = static_cast<float>(++pec_counter) / uptime;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	609a      	str	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a09e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
		ErrorCheck(Status::PecError, pec_average > pec_counter); // TODO figure out what this should be
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c2:	bfcc      	ite	gt
 800a0c4:	2301      	movgt	r3, #1
 800a0c6:	2300      	movle	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	2108      	movs	r1, #8
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7fe f818 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
	}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <_ZN6Status12GetPecChangeEv>:
	auto GetPecChange() {
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
		auto pec_change = pec_counter - pec_counter_last;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	60fb      	str	r3, [r7, #12]
		pec_counter_last = pec_counter;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return pec_change;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
	}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <_ZN6Status15SetFanDutyCycleEh>:
	void SetFanDutyCycle(uint8_t duty_cycle = kFanLowDutyCycle) {
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
		if (duty_cycle > kFanDCMax)
 800a116:	78fb      	ldrb	r3, [r7, #3]
 800a118:	2b64      	cmp	r3, #100	; 0x64
 800a11a:	d901      	bls.n	800a120 <_ZN6Status15SetFanDutyCycleEh+0x16>
			duty_cycle = kFanDCMax;
 800a11c:	2364      	movs	r3, #100	; 0x64
 800a11e:	70fb      	strb	r3, [r7, #3]
	}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <_ZN6Status13CalcDutyCycleEv>:
	constexpr uint8_t CalcDutyCycle() { // TODO could be private if the fan stuff was reworked a bit
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
		if (max_temp > kT2DCHighTemp)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a13a:	f241 7270 	movw	r2, #6000	; 0x1770
 800a13e:	4293      	cmp	r3, r2
 800a140:	dd01      	ble.n	800a146 <_ZN6Status13CalcDutyCycleEv+0x1a>
			return kFanDCMax;
 800a142:	2364      	movs	r3, #100	; 0x64
 800a144:	e01c      	b.n	800a180 <_ZN6Status13CalcDutyCycleEv+0x54>
		else if (max_temp < kT2DCLowTemp)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a14c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a150:	da01      	bge.n	800a156 <_ZN6Status13CalcDutyCycleEv+0x2a>
			return kFanLowDutyCycle;
 800a152:	230a      	movs	r3, #10
 800a154:	e014      	b.n	800a180 <_ZN6Status13CalcDutyCycleEv+0x54>
			return (max_temp * kT2DC_M) + (kFanLowDutyCycle - kT2DC_M * kT2DCLowTemp);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a15c:	ee07 3a90 	vmov	s15, r3
 800a160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a18c <_ZN6Status13CalcDutyCycleEv+0x60>
 800a168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a16c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800a190 <_ZN6Status13CalcDutyCycleEv+0x64>
 800a170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a178:	edc7 7a00 	vstr	s15, [r7]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	b2db      	uxtb	r3, r3
	};
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	3cb851ec 	.word	0x3cb851ec
 800a190:	420c0000 	.word	0x420c0000

0800a194 <_ZNK6Status10GetLimpingEv>:
	auto GetLimping() const {
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
		return limp_counter > kLimpCountLimit;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	bf8c      	ite	hi
 800a1a4:	2301      	movhi	r3, #1
 800a1a6:	2300      	movls	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
	}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
	...

0800a1b8 <_ZN6Status10SetCurrentEl>:
	int8_t SetCurrent(int32_t raw_current) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
		current = static_cast<float>(raw_current) / 1000;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1cc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a21c <_ZN6Status10SetCurrentEl+0x64>
 800a1d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1d8:	ee17 2a90 	vmov	r2, s15
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	649a      	str	r2, [r3, #72]	; 0x48
		received_update = true;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		ErrorCheck(Status::Overcurrent, current > kMaxCurrent);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ec:	ee07 3a90 	vmov	s15, r3
 800a1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800a220 <_ZN6Status10SetCurrentEl+0x68>
 800a1f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a200:	bfcc      	ite	gt
 800a202:	2301      	movgt	r3, #1
 800a204:	2300      	movle	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	2105      	movs	r1, #5
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7fd ff79 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
		return 0;
 800a212:	2300      	movs	r3, #0
	}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	447a0000 	.word	0x447a0000
 800a220:	43340000 	.word	0x43340000

0800a224 <_ZN6Status14SetAccuVoltageEl>:
	void SetAccuVoltage(int32_t raw_voltage) {
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
		AccuVoltage = static_cast<float>(raw_voltage) / 1000;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a238:	eddf 6a08 	vldr	s13, [pc, #32]	; 800a25c <_ZN6Status14SetAccuVoltageEl+0x38>
 800a23c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		received_update = true;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	447a0000 	.word	0x447a0000

0800a260 <_ZN6Status15SetAccuVoltage2El>:
	int8_t SetAccuVoltage2(int32_t raw_voltage) {
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
		AccuVoltage2 = static_cast<float>(raw_voltage) / 1000;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	ee07 3a90 	vmov	s15, r3
 800a270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a274:	eddf 6a39 	vldr	s13, [pc, #228]	; 800a35c <_ZN6Status15SetAccuVoltage2El+0xfc>
 800a278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		received_update = true;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		ErrorCheck(Status::AccuUndervoltage, AccuVoltage2 < kAccuMinVoltage);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a290:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a360 <_ZN6Status15SetAccuVoltage2El+0x100>
 800a294:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29c:	bf4c      	ite	mi
 800a29e:	2301      	movmi	r3, #1
 800a2a0:	2300      	movpl	r3, #0
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2109      	movs	r1, #9
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7fd ff2b 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
		float precharge_percentage = AccuVoltage * 100 / AccuVoltage2;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a2b4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a364 <_ZN6Status15SetAccuVoltage2El+0x104>
 800a2b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800a2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c6:	edc7 7a03 	vstr	s15, [r7, #12]
		if (precharge_percentage >= 95 && CheckVoltageMatch() && AccuVoltage > kPrechargeMinStartVoltage && AccuVoltage2 > kPrechargeMinStartVoltage)
 800a2ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2ce:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a368 <_ZN6Status15SetAccuVoltage2El+0x108>
 800a2d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2da:	db1b      	blt.n	800a314 <_ZN6Status15SetAccuVoltage2El+0xb4>
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f85f 	bl	800a3a0 <_ZN6Status17CheckVoltageMatchEv>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d015      	beq.n	800a314 <_ZN6Status15SetAccuVoltage2El+0xb4>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a2ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a36c <_ZN6Status15SetAccuVoltage2El+0x10c>
 800a2f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fa:	dd0b      	ble.n	800a314 <_ZN6Status15SetAccuVoltage2El+0xb4>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a302:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a36c <_ZN6Status15SetAccuVoltage2El+0x10c>
 800a306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30e:	dd01      	ble.n	800a314 <_ZN6Status15SetAccuVoltage2El+0xb4>
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <_ZN6Status15SetAccuVoltage2El+0xb6>
 800a314:	2300      	movs	r3, #0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <_ZN6Status15SetAccuVoltage2El+0xc2>
			ClosePRE();
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff fe90 	bl	800a040 <_ZN6Status8ClosePREEv>
 800a320:	e016      	b.n	800a350 <_ZN6Status15SetAccuVoltage2El+0xf0>
		else if (AccuVoltage < kPrechargeMaxEndVoltage || AccuVoltage2 < kPrechargeMaxEndVoltage) // TODO think there was a bug here in old system
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a328:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a370 <_ZN6Status15SetAccuVoltage2El+0x110>
 800a32c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a334:	d409      	bmi.n	800a34a <_ZN6Status15SetAccuVoltage2El+0xea>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a33c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a370 <_ZN6Status15SetAccuVoltage2El+0x110>
 800a340:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a348:	d502      	bpl.n	800a350 <_ZN6Status15SetAccuVoltage2El+0xf0>
			OpenPRE();
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7fd fdbe 	bl	8007ecc <_ZN6Status7OpenPREEv>
		return 0;
 800a350:	2300      	movs	r3, #0
	}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	447a0000 	.word	0x447a0000
 800a360:	43f50000 	.word	0x43f50000
 800a364:	42c80000 	.word	0x42c80000
 800a368:	42be0000 	.word	0x42be0000
 800a36c:	43eb0000 	.word	0x43eb0000
 800a370:	43e10000 	.word	0x43e10000

0800a374 <_ZN6Status12CheckIVTLostEv>:
	int8_t CheckIVTLost() {
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
		ErrorCheck(Status::IVTLost, received_update);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a382:	461a      	mov	r2, r3
 800a384:	210a      	movs	r1, #10
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7fd febc 	bl	8008104 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
		received_update = false;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		return 0;
 800a394:	2300      	movs	r3, #0
	}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <_ZN6Status17CheckVoltageMatchEv>:
	bool CheckVoltageMatch() {
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
		float percentage = AccuVoltage * 100 / (sum_of_cells / 10000) - 100;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a3ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a414 <_ZN6Status17CheckVoltageMatchEv+0x74>
 800a3b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a3ba:	4a17      	ldr	r2, [pc, #92]	; (800a418 <_ZN6Status17CheckVoltageMatchEv+0x78>)
 800a3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c0:	0b5b      	lsrs	r3, r3, #13
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	ee07 3a90 	vmov	s15, r3
 800a3c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a3cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a414 <_ZN6Status17CheckVoltageMatchEv+0x74>
 800a3d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3d8:	edc7 7a03 	vstr	s15, [r7, #12]
		return percentage < 10 && percentage > -10;
 800a3dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a3e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ec:	d50a      	bpl.n	800a404 <_ZN6Status17CheckVoltageMatchEv+0x64>
 800a3ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3f2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a3f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fe:	dd01      	ble.n	800a404 <_ZN6Status17CheckVoltageMatchEv+0x64>
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <_ZN6Status17CheckVoltageMatchEv+0x66>
 800a404:	2300      	movs	r3, #0
	}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	42c80000 	.word	0x42c80000
 800a418:	d1b71759 	.word	0xd1b71759

0800a41c <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6StatusR19__CAN_HandleTypeDef4Mode3DCP6CellCh5AuxCh5STSCh>:
	LTC6811(SPI_HandleTypeDef& hspi,
 800a41c:	b590      	push	{r4, r7, lr}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
: 	hspi{ hspi }, status{ status }, hcan { hcan } {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	609a      	str	r2, [r3, #8]
	uint8_t md_bits = (static_cast<uint8_t>(mode) & 0x02) >> 1;
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	105b      	asrs	r3, r3, #1
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]
	uint16_t pec{ 0 };
 800a44a:	2300      	movs	r3, #0
 800a44c:	82bb      	strh	r3, [r7, #20]
	ADCV[0]   = md_bits + 0x02;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3324      	adds	r3, #36	; 0x24
 800a452:	2100      	movs	r1, #0
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fa0b 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a45a:	4602      	mov	r2, r0
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	3302      	adds	r3, #2
 800a460:	b2db      	uxtb	r3, r3
 800a462:	7013      	strb	r3, [r2, #0]
	ADAX[0]   = md_bits + 0x04;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3328      	adds	r3, #40	; 0x28
 800a468:	2100      	movs	r1, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fa00 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a470:	4602      	mov	r2, r0
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	3304      	adds	r3, #4
 800a476:	b2db      	uxtb	r3, r3
 800a478:	7013      	strb	r3, [r2, #0]
	ADSTAT[0] = md_bits + 0x04;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	332c      	adds	r3, #44	; 0x2c
 800a47e:	2100      	movs	r1, #0
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe f9f5 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a486:	4602      	mov	r2, r0
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	3304      	adds	r3, #4
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	7013      	strb	r3, [r2, #0]
	md_bits   = (static_cast<uint8_t>(mode) & 0x01) << 7;
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	b2db      	uxtb	r3, r3
 800a494:	01db      	lsls	r3, r3, #7
 800a496:	75fb      	strb	r3, [r7, #23]
	ADCV[1]   =	md_bits	+ 0x60 + (static_cast<uint8_t>(dcp) << 4) + static_cast<uint8_t>(cell);
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	b2dc      	uxtb	r4, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3324      	adds	r3, #36	; 0x24
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe f9db 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800a4c0:	b2d2      	uxtb	r2, r2
 800a4c2:	701a      	strb	r2, [r3, #0]
	ADAX[1]   =	md_bits	+ 0x60 + static_cast<uint8_t>(aux);
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	b2dc      	uxtb	r4, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3328      	adds	r3, #40	; 0x28
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe f9cb 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800a4e0:	b2d2      	uxtb	r2, r2
 800a4e2:	701a      	strb	r2, [r3, #0]
	ADSTAT[1] = md_bits + 0x68 + static_cast<uint8_t>(sts);
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	b2dc      	uxtb	r4, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	332c      	adds	r3, #44	; 0x2c
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe f9bb 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f104 0268 	add.w	r2, r4, #104	; 0x68
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
	pec = PEC15Calc(ADCV);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a508:	f7fe f9e2 	bl	80088d0 <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE>
 800a50c:	4603      	mov	r3, r0
 800a50e:	82bb      	strh	r3, [r7, #20]
	ADCV[2] = static_cast<uint8_t>(pec >> 8);
 800a510:	8abb      	ldrh	r3, [r7, #20]
 800a512:	121c      	asrs	r4, r3, #8
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3324      	adds	r3, #36	; 0x24
 800a518:	2102      	movs	r1, #2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe f9a8 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a520:	4603      	mov	r3, r0
 800a522:	b2e2      	uxtb	r2, r4
 800a524:	701a      	strb	r2, [r3, #0]
	ADCV[3] = static_cast<uint8_t>(pec);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3324      	adds	r3, #36	; 0x24
 800a52a:	2103      	movs	r1, #3
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe f99f 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a532:	4603      	mov	r3, r0
 800a534:	8aba      	ldrh	r2, [r7, #20]
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]
	pec = PEC15Calc(ADAX);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a53e:	f7fe f9c7 	bl	80088d0 <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE>
 800a542:	4603      	mov	r3, r0
 800a544:	82bb      	strh	r3, [r7, #20]
	ADAX[2] = static_cast<uint8_t>(pec >> 8);
 800a546:	8abb      	ldrh	r3, [r7, #20]
 800a548:	121c      	asrs	r4, r3, #8
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3328      	adds	r3, #40	; 0x28
 800a54e:	2102      	movs	r1, #2
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe f98d 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a556:	4603      	mov	r3, r0
 800a558:	b2e2      	uxtb	r2, r4
 800a55a:	701a      	strb	r2, [r3, #0]
	ADAX[3] = static_cast<uint8_t>(pec);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3328      	adds	r3, #40	; 0x28
 800a560:	2103      	movs	r1, #3
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe f984 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a568:	4603      	mov	r3, r0
 800a56a:	8aba      	ldrh	r2, [r7, #20]
 800a56c:	b2d2      	uxtb	r2, r2
 800a56e:	701a      	strb	r2, [r3, #0]
	pec = PEC15Calc(ADAX);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a574:	f7fe f9ac 	bl	80088d0 <_ZN7LTC68119PEC15CalcIhLj4EEET_St5arrayIS1_XT0_EE>
 800a578:	4603      	mov	r3, r0
 800a57a:	82bb      	strh	r3, [r7, #20]
	ADSTAT[2] = static_cast<uint8_t>(pec >> 8);
 800a57c:	8abb      	ldrh	r3, [r7, #20]
 800a57e:	121c      	asrs	r4, r3, #8
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	332c      	adds	r3, #44	; 0x2c
 800a584:	2102      	movs	r1, #2
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe f972 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a58c:	4603      	mov	r3, r0
 800a58e:	b2e2      	uxtb	r2, r4
 800a590:	701a      	strb	r2, [r3, #0]
	ADSTAT[3] = static_cast<uint8_t>(pec);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	332c      	adds	r3, #44	; 0x2c
 800a596:	2103      	movs	r1, #3
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe f969 	bl	8008870 <_ZNSt5arrayIhLj4EEixEj>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	8aba      	ldrh	r2, [r7, #20]
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]
}
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd90      	pop	{r4, r7, pc}

0800a5b0 <_ZN7LTC681113WakeFromSleepEv>:
void WakeFromSleep(void) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0xFF;
 800a5b8:	23ff      	movs	r3, #255	; 0xff
 800a5ba:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi, &data, 1, 10);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	f107 010f 	add.w	r1, r7, #15
 800a5c4:	230a      	movs	r3, #10
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f7f9 fb09 	bl	8003bde <HAL_SPI_Transmit>
	HAL_Delay(kDaisyChainLength * T_WAKE_MAX);
 800a5cc:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800a5d0:	f7f6 f80a 	bl	80005e8 <HAL_Delay>
}
 800a5d4:	bf00      	nop
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <_ZN7LTC681113WriteRegisterERKSt5arrayIhLj4EEN3gsl4spanIKNS4_4byteELj4294967295EEE>:
uint8_t WriteRegister(LTC6811Command const& command, gsl::span<const gsl::byte> data) {
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	e881 000c 	stmia.w	r1, {r2, r3}
	WakeFromIdle();
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f7fd fe2e 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	if (HAL_SPI_Transmit(&hspi, command.data(), kCommandLength, 100) != HAL_ERROR)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681c      	ldr	r4, [r3, #0]
 800a5f6:	68b8      	ldr	r0, [r7, #8]
 800a5f8:	f7fe f9ba 	bl	8008970 <_ZNKSt5arrayIhLj4EE4dataEv>
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	2364      	movs	r3, #100	; 0x64
 800a600:	2204      	movs	r2, #4
 800a602:	4620      	mov	r0, r4
 800a604:	f7f9 faeb 	bl	8003bde <HAL_SPI_Transmit>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	bf14      	ite	ne
 800a60e:	2301      	movne	r3, #1
 800a610:	2300      	moveq	r3, #0
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d015      	beq.n	800a644 <_ZN7LTC681113WriteRegisterERKSt5arrayIhLj4EEN3gsl4spanIKNS4_4byteELj4294967295EEE+0x68>
		if (HAL_SPI_Transmit(&hspi, (uint8_t *) data.data(), kBytesPerRegister * kDaisyChainLength, 100) == HAL_ERROR) //TODO dunno if this data thing will work...
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681c      	ldr	r4, [r3, #0]
 800a61c:	463b      	mov	r3, r7
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd fe2a 	bl	8008278 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4dataEv>
 800a624:	4601      	mov	r1, r0
 800a626:	2364      	movs	r3, #100	; 0x64
 800a628:	2260      	movs	r2, #96	; 0x60
 800a62a:	4620      	mov	r0, r4
 800a62c:	f7f9 fad7 	bl	8003bde <HAL_SPI_Transmit>
 800a630:	4603      	mov	r3, r0
 800a632:	2b01      	cmp	r3, #1
 800a634:	bf0c      	ite	eq
 800a636:	2301      	moveq	r3, #1
 800a638:	2300      	movne	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <_ZN7LTC681113WriteRegisterERKSt5arrayIhLj4EEN3gsl4spanIKNS4_4byteELj4294967295EEE+0x68>
			return 1;
 800a640:	2301      	movs	r3, #1
 800a642:	e000      	b.n	800a646 <_ZN7LTC681113WriteRegisterERKSt5arrayIhLj4EEN3gsl4spanIKNS4_4byteELj4294967295EEE+0x6a>
	return 0;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd90      	pop	{r4, r7, pc}
	...

0800a650 <_ZN7LTC681119WriteConfigRegisterERSt5arrayIS0_IhLj8EELj12EE>:
void WriteConfigRegister(LTC6811Register<uint8_t>& cfg_tx) {
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	LTC6811Command command = { 0x00, 0x01, 0x3D, 0x6E };
 800a65a:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <_ZN7LTC681119WriteConfigRegisterERSt5arrayIS0_IhLj8EELj12EE+0x40>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]
	std::reverse(std::begin(cfg_tx), std::end(cfg_tx));
 800a660:	6838      	ldr	r0, [r7, #0]
 800a662:	f001 fbb6 	bl	800bdd2 <_ZSt5beginISt5arrayIS0_IhLj8EELj12EEEDTcldtfp_5beginEERT_>
 800a666:	4604      	mov	r4, r0
 800a668:	6838      	ldr	r0, [r7, #0]
 800a66a:	f001 fbbe 	bl	800bdea <_ZSt3endISt5arrayIS0_IhLj8EELj12EEEDTcldtfp_3endEERT_>
 800a66e:	4603      	mov	r3, r0
 800a670:	4619      	mov	r1, r3
 800a672:	4620      	mov	r0, r4
 800a674:	f001 fbcf 	bl	800be16 <_ZSt7reverseIPSt5arrayIhLj8EEEvT_S3_>
	WriteRegister(command, cfg_tx);
 800a678:	f107 030c 	add.w	r3, r7, #12
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fbdb 	bl	800be3c <_ZN7LTC681113WriteRegisterIhEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd90      	pop	{r4, r7, pc}
 800a68e:	bf00      	nop
 800a690:	0800ce1c 	.word	0x0800ce1c

0800a694 <_ZN7LTC681118ReadConfigRegisterERSt5arrayIS0_IhLj8EELj12EE>:
void ReadConfigRegister(LTC6811Register<uint8_t>& cfg_rx) {
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
	LTC6811Command command = { 0x00, 0x02, 0x2B, 0x0A };
 800a69e:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <_ZN7LTC681118ReadConfigRegisterERSt5arrayIS0_IhLj8EELj12EE+0x28>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	60fb      	str	r3, [r7, #12]
	ReadRegister(command, cfg_rx);
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 fbe5 	bl	800be7c <_ZN7LTC681112ReadRegisterIhEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800ce20 	.word	0x0800ce20

0800a6c0 <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE>:
uint8_t ReadVoltage(std::array<LTC6811Register<uint16_t>, 4>& cell_data) {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
	WakeFromSleep();
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff ff70 	bl	800a5b0 <_ZN7LTC681113WakeFromSleepEv>
	adcv();
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7fd fe3c 	bl	800834e <_ZN7LTC68114adcvEv>
	HAL_Delay((T_REFUP_MAX + T_CYCLE_FAST_MAX) / 1000); // Was a microsecond delay on old board.
 800a6d6:	2005      	movs	r0, #5
 800a6d8:	f7f5 ff86 	bl	80005e8 <HAL_Delay>
	WakeFromIdle(); // Make sure isoSPI port is active. Probably not necessary?
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7fd fdb6 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	for (uint8_t i = 0; i < 5; ++i)	{
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d817      	bhi.n	800a71c <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x5c>
		if (ReadVoltageHelper(cell_data))
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fd fe5d 	bl	80083ae <_ZN7LTC681117ReadVoltageHelperERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bf14      	ite	ne
 800a6fa:	2301      	movne	r3, #1
 800a6fc:	2300      	moveq	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x50>
			status.IncreasePecCounter();
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff fcb3 	bl	800a074 <_ZN6Status18IncreasePecCounterEv>
 800a70e:	e001      	b.n	800a714 <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x54>
			return 0;
 800a710:	2300      	movs	r3, #0
 800a712:	e004      	b.n	800a71e <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x5e>
	for (uint8_t i = 0; i < 5; ++i)	{
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	3301      	adds	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]
 800a71a:	e7e4      	b.n	800a6e6 <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE+0x26>
	return 1;
 800a71c:	2301      	movs	r3, #1
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE>:
uint8_t ReadTemperature(std::array<LTC6811Register<int16_t>, 2>& temp_data) {
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
	WakeFromSleep();
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff ff3d 	bl	800a5b0 <_ZN7LTC681113WakeFromSleepEv>
	adax();
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7fd fe21 	bl	800837e <_ZN7LTC68114adaxEv>
	HAL_Delay((T_REFUP_MAX + T_CYCLE_FAST_MAX) / 1000);
 800a73c:	2005      	movs	r0, #5
 800a73e:	f7f5 ff53 	bl	80005e8 <HAL_Delay>
	WakeFromIdle();
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7fd fd83 	bl	800824e <_ZN7LTC681112WakeFromIdleEv>
	for (uint8_t i = 0; i < 5; ++i)	{
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d817      	bhi.n	800a782 <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x5c>
		if (ReadTemperatureHelper(temp_data))
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7fd ff22 	bl	800859e <_ZN7LTC681121ReadTemperatureHelperERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bf14      	ite	ne
 800a760:	2301      	movne	r3, #1
 800a762:	2300      	moveq	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x50>
			status.IncreasePecCounter();
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fc80 	bl	800a074 <_ZN6Status18IncreasePecCounterEv>
 800a774:	e001      	b.n	800a77a <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x54>
			return 0;
 800a776:	2300      	movs	r3, #0
 800a778:	e004      	b.n	800a784 <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x5e>
	for (uint8_t i = 0; i < 5; ++i)	{
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	3301      	adds	r3, #1
 800a77e:	73fb      	strb	r3, [r7, #15]
 800a780:	e7e4      	b.n	800a74c <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE+0x26>
	return 1;
 800a782:	2301      	movs	r3, #1
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <_Z4spanIhEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>:
auto span(LTC6811Register<T>& data) {
 800a78c:	b590      	push	{r4, r7, lr}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	return gsl::span<T>(data.data()->data(), data.data()->data() + kDaisyChainLength * kBytesPerRegister / sizeof(T));
 800a796:	6838      	ldr	r0, [r7, #0]
 800a798:	f001 fbb1 	bl	800befe <_ZNSt5arrayIS_IhLj8EELj12EE4dataEv>
 800a79c:	4603      	mov	r3, r0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 fbba 	bl	800bf18 <_ZNSt5arrayIhLj8EE4dataEv>
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	6838      	ldr	r0, [r7, #0]
 800a7a8:	f001 fba9 	bl	800befe <_ZNSt5arrayIS_IhLj8EELj12EE4dataEv>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 fbb2 	bl	800bf18 <_ZNSt5arrayIhLj8EE4dataEv>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	3360      	adds	r3, #96	; 0x60
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f001 fbf0 	bl	800bfa2 <_ZN3gsl4spanIhLj4294967295EEC1EPhS2_>
}
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd90      	pop	{r4, r7, pc}
	...

0800a7cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800a7cc:	b5b0      	push	{r4, r5, r7, lr}
 800a7ce:	b0a6      	sub	sp, #152	; 0x98
 800a7d0:	af06      	add	r7, sp, #24


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a7d2:	f7f5 fe97 	bl	8000504 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800a7d6:	f000 f9db 	bl	800ab90 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800a7da:	f000 fc0b 	bl	800aff4 <_ZL12MX_GPIO_Initv>
	MX_CAN1_Init();
 800a7de:	f000 fa73 	bl	800acc8 <_ZL12MX_CAN1_Initv>
	MX_CAN2_Init();
 800a7e2:	f000 fb71 	bl	800aec8 <_ZL12MX_CAN2_Initv>
	MX_SDIO_SD_Init();
 800a7e6:	f000 fba9 	bl	800af3c <_ZL15MX_SDIO_SD_Initv>
	MX_SPI1_Init();
 800a7ea:	f000 fbc7 	bl	800af7c <_ZL12MX_SPI1_Initv>
	MX_FATFS_Init();
 800a7ee:	f7ff fb17 	bl	8009e20 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	slave_cfg_tx.fill({ 0xFE, 0, 0, 0, 0, 0 });
 800a7f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	605a      	str	r2, [r3, #4]
 800a7fc:	23fe      	movs	r3, #254	; 0xfe
 800a7fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a806:	4619      	mov	r1, r3
 800a808:	48b0      	ldr	r0, [pc, #704]	; (800aacc <main+0x300>)
 800a80a:	f001 fb62 	bl	800bed2 <_ZNSt5arrayIS_IhLj8EELj12EE4fillERKS0_>
	auto test = gsl::as_writable_bytes(span(slave_cfg_tx));
 800a80e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a812:	49ae      	ldr	r1, [pc, #696]	; (800aacc <main+0x300>)
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff ffb9 	bl	800a78c <_Z4spanIhEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 800a81a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a81e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a822:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a826:	f001 fbcf 	bl	800bfc8 <_ZN3gsl17as_writable_bytesIhLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>
	auto test4 = (uint8_t *) test.data();
 800a82a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd fd3b 	bl	80082aa <_ZNK3gsl4spanINS_4byteELj4294967295EE4dataEv>
 800a834:	6778      	str	r0, [r7, #116]	; 0x74
	test4[0] = 0;
 800a836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a838:	2200      	movs	r2, #0
 800a83a:	701a      	strb	r2, [r3, #0]
	test4[1] = 0xFF;
 800a83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a83e:	3301      	adds	r3, #1
 800a840:	22ff      	movs	r2, #255	; 0xff
 800a842:	701a      	strb	r2, [r3, #0]
	nlg5 = new NLG5;
 800a844:	2010      	movs	r0, #16
 800a846:	f002 f9a0 	bl	800cb8a <_Znwj>
 800a84a:	4603      	mov	r3, r0
 800a84c:	461c      	mov	r4, r3
 800a84e:	f640 33ae 	movw	r3, #2990	; 0xbae
 800a852:	223c      	movs	r2, #60	; 0x3c
 800a854:	21a0      	movs	r1, #160	; 0xa0
 800a856:	4620      	mov	r0, r4
 800a858:	f7ff fb12 	bl	8009e80 <_ZN4NLG5C1Ettt>
 800a85c:	4b9c      	ldr	r3, [pc, #624]	; (800aad0 <main+0x304>)
 800a85e:	601c      	str	r4, [r3, #0]
	status = new Status(Status::Core | Status::Logging, *nlg5);
 800a860:	20a0      	movs	r0, #160	; 0xa0
 800a862:	f002 f992 	bl	800cb8a <_Znwj>
 800a866:	4603      	mov	r3, r0
 800a868:	461c      	mov	r4, r3
 800a86a:	4b99      	ldr	r3, [pc, #612]	; (800aad0 <main+0x304>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	2111      	movs	r1, #17
 800a872:	4620      	mov	r0, r4
 800a874:	f7ff fb21 	bl	8009eba <_ZN6StatusC1EhR4NLG5>
 800a878:	4b96      	ldr	r3, [pc, #600]	; (800aad4 <main+0x308>)
 800a87a:	601c      	str	r4, [r3, #0]
	ltc6811 = new LTC6811(hspi1, *status, hcan1); // TODO could be hcan2!
 800a87c:	2030      	movs	r0, #48	; 0x30
 800a87e:	f002 f984 	bl	800cb8a <_Znwj>
 800a882:	4603      	mov	r3, r0
 800a884:	461c      	mov	r4, r3
 800a886:	4b93      	ldr	r3, [pc, #588]	; (800aad4 <main+0x308>)
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	2300      	movs	r3, #0
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	2300      	movs	r3, #0
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	2300      	movs	r3, #0
 800a894:	9302      	str	r3, [sp, #8]
 800a896:	2300      	movs	r3, #0
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	2302      	movs	r3, #2
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	4b8e      	ldr	r3, [pc, #568]	; (800aad8 <main+0x30c>)
 800a8a0:	498e      	ldr	r1, [pc, #568]	; (800aadc <main+0x310>)
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7ff fdba 	bl	800a41c <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6StatusR19__CAN_HandleTypeDef4Mode3DCP6CellCh5AuxCh5STSCh>
 800a8a8:	4b8d      	ldr	r3, [pc, #564]	; (800aae0 <main+0x314>)
 800a8aa:	601c      	str	r4, [r3, #0]
	f_mount(&SDFatFS, "", 0);
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	498d      	ldr	r1, [pc, #564]	; (800aae4 <main+0x318>)
 800a8b0:	488d      	ldr	r0, [pc, #564]	; (800aae8 <main+0x31c>)
 800a8b2:	f7fc f9f5 	bl	8006ca0 <f_mount>
	f_open(&SDFile, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 800a8b6:	2232      	movs	r2, #50	; 0x32
 800a8b8:	498c      	ldr	r1, [pc, #560]	; (800aaec <main+0x320>)
 800a8ba:	488d      	ldr	r0, [pc, #564]	; (800aaf0 <main+0x324>)
 800a8bc:	f7fc fa36 	bl	8006d2c <f_open>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
#if BYPASS_INITIAL_CHECK
	status->CloseAIR();
 800a8c0:	4b84      	ldr	r3, [pc, #528]	; (800aad4 <main+0x308>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff fba5 	bl	800a014 <_ZNK6Status8CloseAIREv>
	HAL_Delay(5000);
 800a8ca:	f241 3088 	movw	r0, #5000	; 0x1388
 800a8ce:	f7f5 fe8b 	bl	80005e8 <HAL_Delay>
	status->ClosePRE();
 800a8d2:	4b80      	ldr	r3, [pc, #512]	; (800aad4 <main+0x308>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7ff fbb2 	bl	800a040 <_ZN6Status8ClosePREEv>
#endif
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800a8dc:	2101      	movs	r1, #1
 800a8de:	4885      	ldr	r0, [pc, #532]	; (800aaf4 <main+0x328>)
 800a8e0:	f7f6 ffcd 	bl	800187e <HAL_GPIO_TogglePin>

		/* Each bit of opmode represents a different mode. */
		if (status->op_mode & Status::Core) {
 800a8e4:	4b7b      	ldr	r3, [pc, #492]	; (800aad4 <main+0x308>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d030      	beq.n	800a954 <main+0x188>
			if (!(status->op_mode & Status::Balance))
 800a8f2:	4b78      	ldr	r3, [pc, #480]	; (800aad4 <main+0x308>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <main+0x13e>
				BuildDischargeConfig(slave_cfg_tx, slave_cfg_rx, cell_data);
 800a900:	4a7d      	ldr	r2, [pc, #500]	; (800aaf8 <main+0x32c>)
 800a902:	497e      	ldr	r1, [pc, #504]	; (800aafc <main+0x330>)
 800a904:	4871      	ldr	r0, [pc, #452]	; (800aacc <main+0x300>)
 800a906:	f000 fd67 	bl	800b3d8 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE>
			ltc6811->ReadVoltage(cell_data);
 800a90a:	4b75      	ldr	r3, [pc, #468]	; (800aae0 <main+0x314>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	497a      	ldr	r1, [pc, #488]	; (800aaf8 <main+0x32c>)
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fed5 	bl	800a6c0 <_ZN7LTC681111ReadVoltageERSt5arrayIS0_IS0_ItLj4EELj12EELj4EE>
			ltc6811->ReadTemperature(temp_data);
 800a916:	4b72      	ldr	r3, [pc, #456]	; (800aae0 <main+0x314>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4979      	ldr	r1, [pc, #484]	; (800ab00 <main+0x334>)
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff ff02 	bl	800a726 <_ZN7LTC681115ReadTemperatureERSt5arrayIS0_IS0_IsLj4EELj12EELj2EE>
			status->SetFanDutyCycle(status->CalcDutyCycle());
 800a922:	4b6c      	ldr	r3, [pc, #432]	; (800aad4 <main+0x308>)
 800a924:	681c      	ldr	r4, [r3, #0]
 800a926:	4b6b      	ldr	r3, [pc, #428]	; (800aad4 <main+0x308>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fbfe 	bl	800a12c <_ZN6Status13CalcDutyCycleEv>
 800a930:	4603      	mov	r3, r0
 800a932:	4619      	mov	r1, r3
 800a934:	4620      	mov	r0, r4
 800a936:	f7ff fbe8 	bl	800a10a <_ZN6Status15SetFanDutyCycleEh>
			CANTxUptime();
 800a93a:	f000 ff9d 	bl	800b878 <CANTxUptime>
			CanTxOpMode();
 800a93e:	f000 fff5 	bl	800b92c <CanTxOpMode>
			CanTxError();
 800a942:	f001 f843 	bl	800b9cc <CanTxError>
			CANTxVoltageLimpTotal();
 800a946:	f000 ff31 	bl	800b7ac <CANTxVoltageLimpTotal>
			status->CheckIVTLost();
 800a94a:	4b62      	ldr	r3, [pc, #392]	; (800aad4 <main+0x308>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fd10 	bl	800a374 <_ZN6Status12CheckIVTLostEv>
		}

		if (status->op_mode & Status::Balance)
 800a954:	4b5f      	ldr	r3, [pc, #380]	; (800aad4 <main+0x308>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <main+0x1a0>
			BuildDischargeConfig(slave_cfg_tx, slave_cfg_rx, cell_data);
 800a962:	4a65      	ldr	r2, [pc, #404]	; (800aaf8 <main+0x32c>)
 800a964:	4965      	ldr	r1, [pc, #404]	; (800aafc <main+0x330>)
 800a966:	4859      	ldr	r0, [pc, #356]	; (800aacc <main+0x300>)
 800a968:	f000 fd36 	bl	800b3d8 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE>

#if CAN_ENABLED
		/* 	Charging routine. CAN buffers for charger messages are checked, and charger command message is sent. */
		if (status->op_mode & Status::Charging)
 800a96c:	4b59      	ldr	r3, [pc, #356]	; (800aad4 <main+0x308>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	f003 0304 	and.w	r3, r3, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <main+0x1b2>
			SetCharger();
 800a97a:	f000 fce7 	bl	800b34c <SetCharger>
#endif
#if CAN_DEBUG
		/*	Functions for debugging and untested code. */
		if (status->op_mode & Status::Debug) {
 800a97e:	4b55      	ldr	r3, [pc, #340]	; (800aad4 <main+0x308>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f003 0308 	and.w	r3, r3, #8
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d009      	beq.n	800a9a0 <main+0x1d4>
			CANTxVoltage();
 800a98c:	f000 fefa 	bl	800b784 <CANTxVoltage>
			CANTxTemperature();
 800a990:	f000 ff5e 	bl	800b850 <CANTxTemperature>
			CANTxDCfg();
 800a994:	f001 f870 	bl	800ba78 <CANTxDCfg>
			CANTxUptime();
 800a998:	f000 ff6e 	bl	800b878 <CANTxUptime>
			CanTxOpMode();
 800a99c:	f000 ffc6 	bl	800b92c <CanTxOpMode>
		}
#endif
		if (status->op_mode & Status::Logging) {
 800a9a0:	4b4c      	ldr	r3, [pc, #304]	; (800aad4 <main+0x308>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	f003 0310 	and.w	r3, r3, #16
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d096      	beq.n	800a8dc <main+0x110>
			FILINFO inf;
			if (BSP_SD_IsDetected()) {
 800a9ae:	f7ff fa25 	bl	8009dfc <BSP_SD_IsDetected>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d08c      	beq.n	800a8dc <main+0x110>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2); // led 2
 800a9c2:	2104      	movs	r1, #4
 800a9c4:	484b      	ldr	r0, [pc, #300]	; (800aaf4 <main+0x328>)
 800a9c6:	f7f6 ff5a 	bl	800187e <HAL_GPIO_TogglePin>
				if (f_stat("/hpf20", &inf) == FR_NO_FILE)
 800a9ca:	f107 0318 	add.w	r3, r7, #24
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	484c      	ldr	r0, [pc, #304]	; (800ab04 <main+0x338>)
 800a9d2:	f7fc fd86 	bl	80074e2 <f_stat>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	bf0c      	ite	eq
 800a9dc:	2301      	moveq	r3, #1
 800a9de:	2300      	movne	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <main+0x220>
					f_mkdir("/hpf20");
 800a9e6:	4847      	ldr	r0, [pc, #284]	; (800ab04 <main+0x338>)
 800a9e8:	f7fc fe5f 	bl	80076aa <f_mkdir>

				// TODO Magic number below that needs fixing
				if (f_size(&SDFile) < 524288000 && f_open(&SDFile, "/hpf20/data.csv", FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 800a9ec:	4b40      	ldr	r3, [pc, #256]	; (800aaf0 <main+0x324>)
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 800a9f4:	d209      	bcs.n	800aa0a <main+0x23e>
 800a9f6:	2232      	movs	r2, #50	; 0x32
 800a9f8:	4943      	ldr	r1, [pc, #268]	; (800ab08 <main+0x33c>)
 800a9fa:	483d      	ldr	r0, [pc, #244]	; (800aaf0 <main+0x324>)
 800a9fc:	f7fc f996 	bl	8006d2c <f_open>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <main+0x23e>
 800aa06:	2301      	movs	r3, #1
 800aa08:	e000      	b.n	800aa0c <main+0x240>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f43f af65 	beq.w	800a8dc <main+0x110>
					f_printf(&SDFile, "%u,", status->uptime);
 800aa12:	4b30      	ldr	r3, [pc, #192]	; (800aad4 <main+0x308>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	493c      	ldr	r1, [pc, #240]	; (800ab0c <main+0x340>)
 800aa1c:	4834      	ldr	r0, [pc, #208]	; (800aaf0 <main+0x324>)
 800aa1e:	f7fc ffc3 	bl	80079a8 <f_printf>
					/* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
					f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800aa22:	4b2c      	ldr	r3, [pc, #176]	; (800aad4 <main+0x308>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aa28:	4b2a      	ldr	r3, [pc, #168]	; (800aad4 <main+0x308>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6a1d      	ldr	r5, [r3, #32]
 800aa2e:	4b29      	ldr	r3, [pc, #164]	; (800aad4 <main+0x308>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	4a27      	ldr	r2, [pc, #156]	; (800aad4 <main+0x308>)
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	6992      	ldr	r2, [r2, #24]
 800aa3a:	4926      	ldr	r1, [pc, #152]	; (800aad4 <main+0x308>)
 800aa3c:	6809      	ldr	r1, [r1, #0]
 800aa3e:	6949      	ldr	r1, [r1, #20]
 800aa40:	4824      	ldr	r0, [pc, #144]	; (800aad4 <main+0x308>)
 800aa42:	6800      	ldr	r0, [r0, #0]
 800aa44:	6900      	ldr	r0, [r0, #16]
 800aa46:	9003      	str	r0, [sp, #12]
 800aa48:	9102      	str	r1, [sp, #8]
 800aa4a:	9201      	str	r2, [sp, #4]
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	462b      	mov	r3, r5
 800aa50:	4622      	mov	r2, r4
 800aa52:	492f      	ldr	r1, [pc, #188]	; (800ab10 <main+0x344>)
 800aa54:	4826      	ldr	r0, [pc, #152]	; (800aaf0 <main+0x324>)
 800aa56:	f7fc ffa7 	bl	80079a8 <f_printf>
							status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);

					UINT number_written = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
					uint8_t write_error{ 0 };
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

					// TODO error handling isn't really done yet
					for (auto& reg : cell_data) {
 800aa64:	4b24      	ldr	r3, [pc, #144]	; (800aaf8 <main+0x32c>)
 800aa66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa6a:	f7fd ff9b 	bl	80089a4 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE5beginEv>
 800aa6e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800aa70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa72:	f7fd ffa3 	bl	80089bc <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE3endEv>
 800aa76:	66b8      	str	r0, [r7, #104]	; 0x68
 800aa78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d049      	beq.n	800ab14 <main+0x348>
 800aa80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa82:	667b      	str	r3, [r7, #100]	; 0x64
						auto serialized_reg = gsl::as_bytes(span(reg));
 800aa84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800aa88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe f863 	bl	8008b56 <_Z4spanItEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 800aa90:	f107 000c 	add.w	r0, r7, #12
 800aa94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800aa98:	e893 0006 	ldmia.w	r3, {r1, r2}
 800aa9c:	f7fe fcb7 	bl	800940e <_ZN3gsl8as_bytesItLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>
						f_write(&SDFile, (uint8_t *) serialized_reg.data(), kBytesPerRegister * kDaisyChainLength, &number_written);
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fd fbe7 	bl	8008278 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4dataEv>
 800aaaa:	4601      	mov	r1, r0
 800aaac:	f107 0314 	add.w	r3, r7, #20
 800aab0:	2260      	movs	r2, #96	; 0x60
 800aab2:	480f      	ldr	r0, [pc, #60]	; (800aaf0 <main+0x324>)
 800aab4:	f7fc faf8 	bl	80070a8 <f_write>
						if (number_written != kBytesPerRegister * kDaisyChainLength)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2b60      	cmp	r3, #96	; 0x60
 800aabc:	d002      	beq.n	800aac4 <main+0x2f8>
							write_error = 1;
 800aabe:	2301      	movs	r3, #1
 800aac0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
					for (auto& reg : cell_data) {
 800aac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aac6:	3360      	adds	r3, #96	; 0x60
 800aac8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaca:	e7d5      	b.n	800aa78 <main+0x2ac>
 800aacc:	2000064c 	.word	0x2000064c
 800aad0:	2000070c 	.word	0x2000070c
 800aad4:	20000710 	.word	0x20000710
 800aad8:	200002c8 	.word	0x200002c8
 800aadc:	2000039c 	.word	0x2000039c
 800aae0:	20000714 	.word	0x20000714
 800aae4:	0800ce24 	.word	0x0800ce24
 800aae8:	2000096c 	.word	0x2000096c
 800aaec:	0800ce28 	.word	0x0800ce28
 800aaf0:	2000073c 	.word	0x2000073c
 800aaf4:	40020800 	.word	0x40020800
 800aaf8:	2000040c 	.word	0x2000040c
 800aafc:	200006ac 	.word	0x200006ac
 800ab00:	2000058c 	.word	0x2000058c
 800ab04:	0800ce34 	.word	0x0800ce34
 800ab08:	0800ce3c 	.word	0x0800ce3c
 800ab0c:	0800ce4c 	.word	0x0800ce4c
 800ab10:	0800ce50 	.word	0x0800ce50
					}

					for (auto& reg : temp_data) {
 800ab14:	4b1c      	ldr	r3, [pc, #112]	; (800ab88 <main+0x3bc>)
 800ab16:	663b      	str	r3, [r7, #96]	; 0x60
 800ab18:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ab1a:	f7fe f8cf 	bl	8008cbc <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE5beginEv>
 800ab1e:	67b8      	str	r0, [r7, #120]	; 0x78
 800ab20:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ab22:	f7fe f8d7 	bl	8008cd4 <_ZNSt5arrayIS_IS_IsLj4EELj12EELj2EE3endEv>
 800ab26:	65f8      	str	r0, [r7, #92]	; 0x5c
 800ab28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d023      	beq.n	800ab78 <main+0x3ac>
 800ab30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab32:	65bb      	str	r3, [r7, #88]	; 0x58
						auto serialized_reg = gsl::as_bytes(span(reg));
 800ab34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ab38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe f97f 	bl	8008e3e <_Z4spanIsEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 800ab40:	1d38      	adds	r0, r7, #4
 800ab42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ab46:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ab4a:	f7fe fd7a 	bl	8009642 <_ZN3gsl8as_bytesIsLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>
						f_write(&SDFile, (uint8_t *) serialized_reg.data(), kBytesPerRegister * kDaisyChainLength, &number_written);
 800ab4e:	1d3b      	adds	r3, r7, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fd fb91 	bl	8008278 <_ZNK3gsl4spanIKNS_4byteELj4294967295EE4dataEv>
 800ab56:	4601      	mov	r1, r0
 800ab58:	f107 0314 	add.w	r3, r7, #20
 800ab5c:	2260      	movs	r2, #96	; 0x60
 800ab5e:	480b      	ldr	r0, [pc, #44]	; (800ab8c <main+0x3c0>)
 800ab60:	f7fc faa2 	bl	80070a8 <f_write>
						if (number_written != kBytesPerRegister * kDaisyChainLength)
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2b60      	cmp	r3, #96	; 0x60
 800ab68:	d002      	beq.n	800ab70 <main+0x3a4>
							write_error = 1;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
					for (auto& reg : temp_data) {
 800ab70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab72:	3360      	adds	r3, #96	; 0x60
 800ab74:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab76:	e7d7      	b.n	800ab28 <main+0x35c>
					}

					f_sync(&SDFile);
 800ab78:	4804      	ldr	r0, [pc, #16]	; (800ab8c <main+0x3c0>)
 800ab7a:	f7fc fc0a 	bl	8007392 <f_sync>
					f_close(&SDFile);
 800ab7e:	4803      	ldr	r0, [pc, #12]	; (800ab8c <main+0x3c0>)
 800ab80:	f7fc fc85 	bl	800748e <f_close>
				}
			}

		}
	}
 800ab84:	e6aa      	b.n	800a8dc <main+0x110>
 800ab86:	bf00      	nop
 800ab88:	2000058c 	.word	0x2000058c
 800ab8c:	2000073c 	.word	0x2000073c

0800ab90 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b0ac      	sub	sp, #176	; 0xb0
 800ab94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ab9a:	2234      	movs	r2, #52	; 0x34
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f002 f856 	bl	800cc50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aba4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	605a      	str	r2, [r3, #4]
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800abb4:	f107 030c 	add.w	r3, r7, #12
 800abb8:	225c      	movs	r2, #92	; 0x5c
 800abba:	2100      	movs	r1, #0
 800abbc:	4618      	mov	r0, r3
 800abbe:	f002 f847 	bl	800cc50 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800abc2:	2300      	movs	r3, #0
 800abc4:	60bb      	str	r3, [r7, #8]
 800abc6:	4b3e      	ldr	r3, [pc, #248]	; (800acc0 <_Z18SystemClock_Configv+0x130>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	4a3d      	ldr	r2, [pc, #244]	; (800acc0 <_Z18SystemClock_Configv+0x130>)
 800abcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abd0:	6413      	str	r3, [r2, #64]	; 0x40
 800abd2:	4b3b      	ldr	r3, [pc, #236]	; (800acc0 <_Z18SystemClock_Configv+0x130>)
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abda:	60bb      	str	r3, [r7, #8]
 800abdc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	4b38      	ldr	r3, [pc, #224]	; (800acc4 <_Z18SystemClock_Configv+0x134>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800abea:	4a36      	ldr	r2, [pc, #216]	; (800acc4 <_Z18SystemClock_Configv+0x134>)
 800abec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	4b34      	ldr	r3, [pc, #208]	; (800acc4 <_Z18SystemClock_Configv+0x134>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800abfa:	607b      	str	r3, [r7, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800abfe:	2302      	movs	r3, #2
 800ac00:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ac02:	2301      	movs	r3, #1
 800ac04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ac08:	2310      	movs	r3, #16
 800ac0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ac0e:	2302      	movs	r3, #2
 800ac10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ac14:	2300      	movs	r3, #0
 800ac16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 8;
 800ac1a:	2308      	movs	r3, #8
 800ac1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 50;
 800ac20:	2332      	movs	r3, #50	; 0x32
 800ac22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ac26:	2302      	movs	r3, #2
 800ac28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = 2;
 800ac32:	2302      	movs	r3, #2
 800ac34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ac38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7f7 fb97 	bl	8002370 <HAL_RCC_OscConfig>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	bf14      	ite	ne
 800ac48:	2301      	movne	r3, #1
 800ac4a:	2300      	moveq	r3, #0
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <_Z18SystemClock_Configv+0xc6>
	{
		Error_Handler();
 800ac52:	f001 f891 	bl	800bd78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ac56:	230f      	movs	r3, #15
 800ac58:	66bb      	str	r3, [r7, #104]	; 0x68
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ac62:	2300      	movs	r3, #0
 800ac64:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ac66:	2300      	movs	r3, #0
 800ac68:	67bb      	str	r3, [r7, #120]	; 0x78

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800ac6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ac6e:	2100      	movs	r1, #0
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f6 fe1f 	bl	80018b4 <HAL_RCC_ClockConfig>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bf14      	ite	ne
 800ac7c:	2301      	movne	r3, #1
 800ac7e:	2300      	moveq	r3, #0
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <_Z18SystemClock_Configv+0xfa>
	{
		Error_Handler();
 800ac86:	f001 f877 	bl	800bd78 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800ac8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac8e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800ac90:	2300      	movs	r3, #0
 800ac92:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800ac94:	2300      	movs	r3, #0
 800ac96:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac98:	f107 030c 	add.w	r3, r7, #12
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7f6 feeb 	bl	8001a78 <HAL_RCCEx_PeriphCLKConfig>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bf14      	ite	ne
 800aca8:	2301      	movne	r3, #1
 800acaa:	2300      	moveq	r3, #0
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <_Z18SystemClock_Configv+0x126>
	{
		Error_Handler();
 800acb2:	f001 f861 	bl	800bd78 <Error_Handler>
	}
}
 800acb6:	bf00      	nop
 800acb8:	37b0      	adds	r7, #176	; 0xb0
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	40023800 	.word	0x40023800
 800acc4:	40007000 	.word	0x40007000

0800acc8 <_ZL12MX_CAN1_Initv>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	; 0x28
 800accc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef  sFilterConfig;

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800acce:	4b7c      	ldr	r3, [pc, #496]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800acd0:	4a7c      	ldr	r2, [pc, #496]	; (800aec4 <_ZL12MX_CAN1_Initv+0x1fc>)
 800acd2:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800acd4:	4b7a      	ldr	r3, [pc, #488]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800acd6:	2210      	movs	r2, #16
 800acd8:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800acda:	4b79      	ldr	r3, [pc, #484]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800acdc:	2200      	movs	r2, #0
 800acde:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800ace0:	4b77      	ldr	r3, [pc, #476]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800ace6:	4b76      	ldr	r3, [pc, #472]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ace8:	2200      	movs	r2, #0
 800acea:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800acec:	4b74      	ldr	r3, [pc, #464]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800acee:	2200      	movs	r2, #0
 800acf0:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800acf2:	4b73      	ldr	r3, [pc, #460]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800acf8:	4b71      	ldr	r3, [pc, #452]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800acfe:	4b70      	ldr	r3, [pc, #448]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800ad04:	4b6e      	ldr	r3, [pc, #440]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800ad0a:	4b6d      	ldr	r3, [pc, #436]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800ad10:	4b6b      	ldr	r3, [pc, #428]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800ad16:	486a      	ldr	r0, [pc, #424]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad18:	f7f5 fc88 	bl	800062c <HAL_CAN_Init>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bf14      	ite	ne
 800ad22:	2301      	movne	r3, #1
 800ad24:	2300      	moveq	r3, #0
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <_ZL12MX_CAN1_Initv+0x68>
	{
		Error_Handler();
 800ad2c:	f001 f824 	bl	800bd78 <Error_Handler>
	/* USER CODE BEGIN CAN1_Init 2 */

	// Need to find what filter INDEX might be.
	/* Copying from ECU code for now. */
	/* BMS filter */
	sFilterConfig.FilterBank = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800ad34:	2301      	movs	r3, #1
 800ad36:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 800ad38:	2301      	movs	r3, #1
 800ad3a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x20 << 5; // first ID
 800ad3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad40:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0; // don't think anything goes here
 800ad42:	2300      	movs	r3, #0
 800ad44:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x21 << 5; //second ID
 800ad46:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800ad4a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800ad54:	2301      	movs	r3, #1
 800ad56:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800ad58:	230e      	movs	r3, #14
 800ad5a:	627b      	str	r3, [r7, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800ad5c:	463b      	mov	r3, r7
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4857      	ldr	r0, [pc, #348]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad62:	f7f5 fd5f 	bl	8000824 <HAL_CAN_ConfigFilter>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	bf14      	ite	ne
 800ad6c:	2301      	movne	r3, #1
 800ad6e:	2300      	moveq	r3, #0
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <_ZL12MX_CAN1_Initv+0xb2>
		Error_Handler();
 800ad76:	f000 ffff 	bl	800bd78 <Error_Handler>

	//sFilterConfig.FilterIdHigh = 0x8 << 5; // first ID
	//sFilterConfig.FilterIdLow = 0x0;

	sFilterConfig.FilterBank++; // ECU CAN 1
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x20 << 5;
 800ad80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad84:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x21;
 800ad86:	2321      	movs	r3, #33	; 0x21
 800ad88:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	484c      	ldr	r0, [pc, #304]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ad90:	f7f5 fd48 	bl	8000824 <HAL_CAN_ConfigFilter>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bf14      	ite	ne
 800ad9a:	2301      	movne	r3, #1
 800ad9c:	2300      	moveq	r3, #0
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <_ZL12MX_CAN1_Initv+0xe0>
		Error_Handler();
 800ada4:	f000 ffe8 	bl	800bd78 <Error_Handler>

	sFilterConfig.FilterBank++; // PDM CAN 1
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3301      	adds	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x520 << 5;
 800adae:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 800adb2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800adb8:	463b      	mov	r3, r7
 800adba:	4619      	mov	r1, r3
 800adbc:	4840      	ldr	r0, [pc, #256]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800adbe:	f7f5 fd31 	bl	8000824 <HAL_CAN_ConfigFilter>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	bf14      	ite	ne
 800adc8:	2301      	movne	r3, #1
 800adca:	2300      	moveq	r3, #0
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <_ZL12MX_CAN1_Initv+0x10e>
		Error_Handler();
 800add2:	f000 ffd1 	bl	800bd78 <Error_Handler>

	sFilterConfig.FilterBank++; // ADC ID Range
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	3301      	adds	r3, #1
 800adda:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x600 << 5;
 800addc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ade0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x605;
 800ade2:	f240 6305 	movw	r3, #1541	; 0x605
 800ade6:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800ade8:	463b      	mov	r3, r7
 800adea:	4619      	mov	r1, r3
 800adec:	4834      	ldr	r0, [pc, #208]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800adee:	f7f5 fd19 	bl	8000824 <HAL_CAN_ConfigFilter>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bf14      	ite	ne
 800adf8:	2301      	movne	r3, #1
 800adfa:	2300      	moveq	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <_ZL12MX_CAN1_Initv+0x13e>
		Error_Handler();
 800ae02:	f000 ffb9 	bl	800bd78 <Error_Handler>

	sFilterConfig.FilterBank++;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x610 << 5;
 800ae0c:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 800ae10:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x614;
 800ae12:	f240 6314 	movw	r3, #1556	; 0x614
 800ae16:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800ae18:	463b      	mov	r3, r7
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4828      	ldr	r0, [pc, #160]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ae1e:	f7f5 fd01 	bl	8000824 <HAL_CAN_ConfigFilter>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	bf14      	ite	ne
 800ae28:	2301      	movne	r3, #1
 800ae2a:	2300      	moveq	r3, #0
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <_ZL12MX_CAN1_Initv+0x16e>
		Error_Handler();
 800ae32:	f000 ffa1 	bl	800bd78 <Error_Handler>

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterBank++; // Front Wheelspeed Filter
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x70;
 800ae40:	2370      	movs	r3, #112	; 0x70
 800ae42:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x7F;
 800ae44:	237f      	movs	r3, #127	; 0x7f
 800ae46:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800ae48:	463b      	mov	r3, r7
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	481c      	ldr	r0, [pc, #112]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ae4e:	f7f5 fce9 	bl	8000824 <HAL_CAN_ConfigFilter>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bf14      	ite	ne
 800ae58:	2301      	movne	r3, #1
 800ae5a:	2300      	moveq	r3, #0
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <_ZL12MX_CAN1_Initv+0x19e>
		Error_Handler();
 800ae62:	f000 ff89 	bl	800bd78 <Error_Handler>

#ifndef ONECAN
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800ae66:	4816      	ldr	r0, [pc, #88]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ae68:	f7f5 fdbc 	bl	80009e4 <HAL_CAN_Start>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bf14      	ite	ne
 800ae72:	2301      	movne	r3, #1
 800ae74:	2300      	moveq	r3, #0
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <_ZL12MX_CAN1_Initv+0x1b8>
		Error_Handler();
 800ae7c:	f000 ff7c 	bl	800bd78 <Error_Handler>

	// Start CANRX interrupt for CAN1
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800ae80:	2102      	movs	r1, #2
 800ae82:	480f      	ldr	r0, [pc, #60]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ae84:	f7f5 ffe0 	bl	8000e48 <HAL_CAN_ActivateNotification>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bf14      	ite	ne
 800ae8e:	2301      	movne	r3, #1
 800ae90:	2300      	moveq	r3, #0
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <_ZL12MX_CAN1_Initv+0x1d4>
		Error_Handler();
 800ae98:	f000 ff6e 	bl	800bd78 <Error_Handler>
#endif

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800ae9c:	4808      	ldr	r0, [pc, #32]	; (800aec0 <_ZL12MX_CAN1_Initv+0x1f8>)
 800ae9e:	f7f5 fda1 	bl	80009e4 <HAL_CAN_Start>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	bf14      	ite	ne
 800aea8:	2301      	movne	r3, #1
 800aeaa:	2300      	moveq	r3, #0
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <_ZL12MX_CAN1_Initv+0x1ee>
		Error_Handler();
 800aeb2:	f000 ff61 	bl	800bd78 <Error_Handler>
	//TxHeader.MessageMarker = 0;


	/* USER CODE END CAN1_Init 2 */

}
 800aeb6:	bf00      	nop
 800aeb8:	3728      	adds	r7, #40	; 0x28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200002c8 	.word	0x200002c8
 800aec4:	40006400 	.word	0x40006400

0800aec8 <_ZL12MX_CAN2_Initv>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800aecc:	4b19      	ldr	r3, [pc, #100]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aece:	4a1a      	ldr	r2, [pc, #104]	; (800af38 <_ZL12MX_CAN2_Initv+0x70>)
 800aed0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 800aed2:	4b18      	ldr	r3, [pc, #96]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aed4:	2210      	movs	r2, #16
 800aed6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800aed8:	4b16      	ldr	r3, [pc, #88]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800aede:	4b15      	ldr	r3, [pc, #84]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800aee4:	4b13      	ldr	r3, [pc, #76]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800aeea:	4b12      	ldr	r3, [pc, #72]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800aef0:	4b10      	ldr	r3, [pc, #64]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800aef6:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800aefc:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800aefe:	2200      	movs	r2, #0
 800af00:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800af02:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800af04:	2200      	movs	r2, #0
 800af06:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800af08:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800af0e:	4b09      	ldr	r3, [pc, #36]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800af10:	2200      	movs	r2, #0
 800af12:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800af14:	4807      	ldr	r0, [pc, #28]	; (800af34 <_ZL12MX_CAN2_Initv+0x6c>)
 800af16:	f7f5 fb89 	bl	800062c <HAL_CAN_Init>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bf14      	ite	ne
 800af20:	2301      	movne	r3, #1
 800af22:	2300      	moveq	r3, #0
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <_ZL12MX_CAN2_Initv+0x66>
	{
		Error_Handler();
 800af2a:	f000 ff25 	bl	800bd78 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 800af2e:	bf00      	nop
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200002f0 	.word	0x200002f0
 800af38:	40006800 	.word	0x40006800

0800af3c <_ZL15MX_SDIO_SD_Initv>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800af40:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af42:	4a0d      	ldr	r2, [pc, #52]	; (800af78 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 800af44:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800af46:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af48:	2200      	movs	r2, #0
 800af4a:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800af4c:	4b09      	ldr	r3, [pc, #36]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af4e:	2200      	movs	r2, #0
 800af50:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800af52:	4b08      	ldr	r3, [pc, #32]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af54:	2200      	movs	r2, #0
 800af56:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800af58:	4b06      	ldr	r3, [pc, #24]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800af5e:	4b05      	ldr	r3, [pc, #20]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af60:	2200      	movs	r2, #0
 800af62:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 800af64:	4b03      	ldr	r3, [pc, #12]	; (800af74 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800af66:	2200      	movs	r2, #0
 800af68:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800af6a:	bf00      	nop
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	20000318 	.word	0x20000318
 800af78:	40012c00 	.word	0x40012c00

0800af7c <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800af80:	4b1a      	ldr	r3, [pc, #104]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800af82:	4a1b      	ldr	r2, [pc, #108]	; (800aff0 <_ZL12MX_SPI1_Initv+0x74>)
 800af84:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800af86:	4b19      	ldr	r3, [pc, #100]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800af88:	f44f 7282 	mov.w	r2, #260	; 0x104
 800af8c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800af8e:	4b17      	ldr	r3, [pc, #92]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800af90:	2200      	movs	r2, #0
 800af92:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // correct
 800af94:	4b15      	ldr	r3, [pc, #84]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800af96:	2200      	movs	r2, #0
 800af98:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // correct
 800af9a:	4b14      	ldr	r3, [pc, #80]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 800afa0:	4b12      	ldr	r3, [pc, #72]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800afa6:	4b11      	ldr	r3, [pc, #68]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afac:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800afba:	4b0c      	ldr	r3, [pc, #48]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afc0:	4b0a      	ldr	r3, [pc, #40]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800afc6:	4b09      	ldr	r3, [pc, #36]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afc8:	220a      	movs	r2, #10
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800afcc:	4807      	ldr	r0, [pc, #28]	; (800afec <_ZL12MX_SPI1_Initv+0x70>)
 800afce:	f7f8 fda2 	bl	8003b16 <HAL_SPI_Init>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bf14      	ite	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	2300      	moveq	r3, #0
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <_ZL12MX_SPI1_Initv+0x6a>
	{
		Error_Handler();
 800afe2:	f000 fec9 	bl	800bd78 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800afe6:	bf00      	nop
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	2000039c 	.word	0x2000039c
 800aff0:	40013000 	.word	0x40013000

0800aff4 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800affa:	f107 0314 	add.w	r3, r7, #20
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	605a      	str	r2, [r3, #4]
 800b004:	609a      	str	r2, [r3, #8]
 800b006:	60da      	str	r2, [r3, #12]
 800b008:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800b00a:	2300      	movs	r3, #0
 800b00c:	613b      	str	r3, [r7, #16]
 800b00e:	4b55      	ldr	r3, [pc, #340]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b012:	4a54      	ldr	r2, [pc, #336]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b014:	f043 0304 	orr.w	r3, r3, #4
 800b018:	6313      	str	r3, [r2, #48]	; 0x30
 800b01a:	4b52      	ldr	r3, [pc, #328]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800b026:	2300      	movs	r3, #0
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	4b4e      	ldr	r3, [pc, #312]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	4a4d      	ldr	r2, [pc, #308]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b034:	6313      	str	r3, [r2, #48]	; 0x30
 800b036:	4b4b      	ldr	r3, [pc, #300]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b042:	2300      	movs	r3, #0
 800b044:	60bb      	str	r3, [r7, #8]
 800b046:	4b47      	ldr	r3, [pc, #284]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04a:	4a46      	ldr	r2, [pc, #280]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b04c:	f043 0301 	orr.w	r3, r3, #1
 800b050:	6313      	str	r3, [r2, #48]	; 0x30
 800b052:	4b44      	ldr	r3, [pc, #272]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	60bb      	str	r3, [r7, #8]
 800b05c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800b05e:	2300      	movs	r3, #0
 800b060:	607b      	str	r3, [r7, #4]
 800b062:	4b40      	ldr	r3, [pc, #256]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b066:	4a3f      	ldr	r2, [pc, #252]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b068:	f043 0302 	orr.w	r3, r3, #2
 800b06c:	6313      	str	r3, [r2, #48]	; 0x30
 800b06e:	4b3d      	ldr	r3, [pc, #244]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	607b      	str	r3, [r7, #4]
 800b078:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800b07a:	2300      	movs	r3, #0
 800b07c:	603b      	str	r3, [r7, #0]
 800b07e:	4b39      	ldr	r3, [pc, #228]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b082:	4a38      	ldr	r2, [pc, #224]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b084:	f043 0308 	orr.w	r3, r3, #8
 800b088:	6313      	str	r3, [r2, #48]	; 0x30
 800b08a:	4b36      	ldr	r3, [pc, #216]	; (800b164 <_ZL12MX_GPIO_Initv+0x170>)
 800b08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08e:	f003 0308 	and.w	r3, r3, #8
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800b096:	2200      	movs	r2, #0
 800b098:	213f      	movs	r1, #63	; 0x3f
 800b09a:	4833      	ldr	r0, [pc, #204]	; (800b168 <_ZL12MX_GPIO_Initv+0x174>)
 800b09c:	f7f6 fbd6 	bl	800184c <HAL_GPIO_WritePin>
			|IO_1_Pin|IO_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2180      	movs	r1, #128	; 0x80
 800b0a4:	4831      	ldr	r0, [pc, #196]	; (800b16c <_ZL12MX_GPIO_Initv+0x178>)
 800b0a6:	f7f6 fbd1 	bl	800184c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2103      	movs	r1, #3
 800b0ae:	4830      	ldr	r0, [pc, #192]	; (800b170 <_ZL12MX_GPIO_Initv+0x17c>)
 800b0b0:	f7f6 fbcc 	bl	800184c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
	GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800b0b4:	233f      	movs	r3, #63	; 0x3f
 800b0b6:	617b      	str	r3, [r7, #20]
			|IO_1_Pin|IO_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0c4:	f107 0314 	add.w	r3, r7, #20
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4827      	ldr	r0, [pc, #156]	; (800b168 <_ZL12MX_GPIO_Initv+0x174>)
 800b0cc:	f7f6 fa14 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : IO_0_Pin */
	GPIO_InitStruct.Pin = IO_0_Pin;
 800b0d0:	2380      	movs	r3, #128	; 0x80
 800b0d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800b0e0:	f107 0314 	add.w	r3, r7, #20
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4821      	ldr	r0, [pc, #132]	; (800b16c <_ZL12MX_GPIO_Initv+0x178>)
 800b0e8:	f7f6 fa06 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin */
	GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	4619      	mov	r1, r3
 800b102:	481b      	ldr	r0, [pc, #108]	; (800b170 <_ZL12MX_GPIO_Initv+0x17c>)
 800b104:	f7f6 f9f8 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : FansPWM_Pin */
	GPIO_InitStruct.Pin = FansPWM_Pin;
 800b108:	2304      	movs	r3, #4
 800b10a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b10c:	2302      	movs	r3, #2
 800b10e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b110:	2300      	movs	r3, #0
 800b112:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b114:	2300      	movs	r3, #0
 800b116:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b118:	2301      	movs	r3, #1
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	4619      	mov	r1, r3
 800b122:	4813      	ldr	r0, [pc, #76]	; (800b170 <_ZL12MX_GPIO_Initv+0x17c>)
 800b124:	f7f6 f9e8 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
	GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 800b128:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b12c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b12e:	2300      	movs	r3, #0
 800b130:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b132:	2300      	movs	r3, #0
 800b134:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b136:	f107 0314 	add.w	r3, r7, #20
 800b13a:	4619      	mov	r1, r3
 800b13c:	480b      	ldr	r0, [pc, #44]	; (800b16c <_ZL12MX_GPIO_Initv+0x178>)
 800b13e:	f7f6 f9db 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SOS_Pin */
	GPIO_InitStruct.Pin = SOS_Pin;
 800b142:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b146:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b148:	2303      	movs	r3, #3
 800b14a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800b150:	f107 0314 	add.w	r3, r7, #20
 800b154:	4619      	mov	r1, r3
 800b156:	4806      	ldr	r0, [pc, #24]	; (800b170 <_ZL12MX_GPIO_Initv+0x17c>)
 800b158:	f7f6 f9ce 	bl	80014f8 <HAL_GPIO_Init>

}
 800b15c:	bf00      	nop
 800b15e:	3728      	adds	r7, #40	; 0x28
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	40023800 	.word	0x40023800
 800b168:	40020800 	.word	0x40020800
 800b16c:	40020000 	.word	0x40020000
 800b170:	40020400 	.word	0x40020400

0800b174 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN1
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef   RxHeader;
	uint8_t data[8] = { 0 };
 800b17c:	f107 030c 	add.w	r3, r7, #12
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	605a      	str	r2, [r3, #4]

	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800b186:	f107 030c 	add.w	r3, r7, #12
 800b18a:	f107 0214 	add.w	r2, r7, #20
 800b18e:	2100      	movs	r1, #0
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7f5 fd46 	bl	8000c22 <HAL_CAN_GetRxMessage>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	bf0c      	ite	eq
 800b19c:	2301      	moveq	r3, #1
 800b19e:	2300      	movne	r3, #0
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		//Placeholder switch statement
		switch(RxHeader.StdId) {
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d000      	beq.n	800b1ae <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		case 1:
			break;
		default:
			break;
 800b1ac:	e000      	b.n	800b1b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
			break;
 800b1ae:	bf00      	nop
		}
	}
}
 800b1b0:	bf00      	nop
 800b1b2:	3730      	adds	r7, #48	; 0x30
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN2
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08c      	sub	sp, #48	; 0x30
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef   RxHeader;
	uint8_t data[8] = { 0 };
 800b1c0:	f107 030c 	add.w	r3, r7, #12
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	605a      	str	r2, [r3, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	f107 0214 	add.w	r2, r7, #20
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7f5 fd24 	bl	8000c22 <HAL_CAN_GetRxMessage>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bf0c      	ite	eq
 800b1e0:	2301      	moveq	r3, #1
 800b1e2:	2300      	movne	r3, #0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 80a7 	beq.w	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
		//Placeholder switch statement
		switch(RxHeader.StdId) {
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800b1f2:	d01c      	beq.n	800b22e <HAL_CAN_RxFifo1MsgPendingCallback+0x76>
 800b1f4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800b1f8:	d80d      	bhi.n	800b216 <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
 800b1fa:	f240 5222 	movw	r2, #1314	; 0x522
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d06b      	beq.n	800b2da <HAL_CAN_RxFifo1MsgPendingCallback+0x122>
 800b202:	f240 5223 	movw	r2, #1315	; 0x523
 800b206:	4293      	cmp	r3, r2
 800b208:	d077      	beq.n	800b2fa <HAL_CAN_RxFifo1MsgPendingCallback+0x142>
 800b20a:	f240 5221 	movw	r2, #1313	; 0x521
 800b20e:	4293      	cmp	r3, r2
 800b210:	f000 8083 	beq.w	800b31a <HAL_CAN_RxFifo1MsgPendingCallback+0x162>
				status->SetCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
				break;
#endif

			default:
				break;
 800b214:	e091      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
		switch(RxHeader.StdId) {
 800b216:	f240 726e 	movw	r2, #1902	; 0x76e
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d040      	beq.n	800b2a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>
 800b21e:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800b222:	4293      	cmp	r3, r2
 800b224:	d025      	beq.n	800b272 <HAL_CAN_RxFifo1MsgPendingCallback+0xba>
 800b226:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800b22a:	d011      	beq.n	800b250 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
				break;
 800b22c:	e085      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
			nlg5->a_buffer[0] = data[0];
 800b22e:	4b45      	ldr	r3, [pc, #276]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	7b3a      	ldrb	r2, [r7, #12]
 800b234:	721a      	strb	r2, [r3, #8]
			nlg5->a_buffer[1] = data[1];
 800b236:	4b43      	ldr	r3, [pc, #268]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	7b7a      	ldrb	r2, [r7, #13]
 800b23c:	725a      	strb	r2, [r3, #9]
			nlg5->a_buffer[2] = data[2];
 800b23e:	4b41      	ldr	r3, [pc, #260]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	7bba      	ldrb	r2, [r7, #14]
 800b244:	729a      	strb	r2, [r3, #10]
			nlg5->a_buffer[3] = data[3];
 800b246:	4b3f      	ldr	r3, [pc, #252]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	7bfa      	ldrb	r2, [r7, #15]
 800b24c:	72da      	strb	r2, [r3, #11]
			break;
 800b24e:	e074      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
			nlg5->b_buffer[0] = data[0];
 800b250:	4b3c      	ldr	r3, [pc, #240]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	7b3a      	ldrb	r2, [r7, #12]
 800b256:	731a      	strb	r2, [r3, #12]
			nlg5->b_buffer[1] = data[1];
 800b258:	4b3a      	ldr	r3, [pc, #232]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	7b7a      	ldrb	r2, [r7, #13]
 800b25e:	735a      	strb	r2, [r3, #13]
			nlg5->b_buffer[2] = data[2];
 800b260:	4b38      	ldr	r3, [pc, #224]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	7bba      	ldrb	r2, [r7, #14]
 800b266:	739a      	strb	r2, [r3, #14]
			nlg5->b_buffer[3] = data[3];
 800b268:	4b36      	ldr	r3, [pc, #216]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	7bfa      	ldrb	r2, [r7, #15]
 800b26e:	73da      	strb	r2, [r3, #15]
			break;
 800b270:	e063      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
			switch (data[3]) {
 800b272:	7bfb      	ldrb	r3, [r7, #15]
 800b274:	2b03      	cmp	r3, #3
 800b276:	d811      	bhi.n	800b29c <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 800b278:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b29d 	.word	0x0800b29d
 800b284:	0800b291 	.word	0x0800b291
 800b288:	0800b297 	.word	0x0800b297
 800b28c:	0800b29d 	.word	0x0800b29d
				canresp_get_volume_size();
 800b290:	f000 fd30 	bl	800bcf4 <canresp_get_volume_size>
				break;
 800b294:	e003      	b.n	800b29e <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
				canresp_delete_logfile();
 800b296:	f000 fd4f 	bl	800bd38 <canresp_delete_logfile>
				break;
 800b29a:	e000      	b.n	800b29e <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
				break;
 800b29c:	bf00      	nop
			break;
 800b29e:	e04c      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				status->discharge_mode = data[0];
 800b2a0:	4b29      	ldr	r3, [pc, #164]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	7b3a      	ldrb	r2, [r7, #12]
 800b2a6:	705a      	strb	r2, [r3, #1]
				status->op_mode = data[1];
 800b2a8:	4b27      	ldr	r3, [pc, #156]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	7b7a      	ldrb	r2, [r7, #13]
 800b2ae:	701a      	strb	r2, [r3, #0]
				status->manual_mode = data[4] & 0x80;
 800b2b0:	7c3b      	ldrb	r3, [r7, #16]
 800b2b2:	b25a      	sxtb	r2, r3
 800b2b4:	4b24      	ldr	r3, [pc, #144]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	b2d2      	uxtb	r2, r2
 800b2ba:	09d2      	lsrs	r2, r2, #7
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	709a      	strb	r2, [r3, #2]
				status->SetFanDutyCycle(data[4]); // TODO set_fan_duty_cycle(data[4], 1);
 800b2c0:	4b21      	ldr	r3, [pc, #132]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	7c3a      	ldrb	r2, [r7, #16]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe ff1e 	bl	800a10a <_ZN6Status15SetFanDutyCycleEh>
				nlg5->oc_limit = data[5];
 800b2ce:	7c7a      	ldrb	r2, [r7, #17]
 800b2d0:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	b292      	uxth	r2, r2
 800b2d6:	809a      	strh	r2, [r3, #4]
				break;
 800b2d8:	e02f      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				status->SetAccuVoltage(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800b2da:	4b1b      	ldr	r3, [pc, #108]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	7bbb      	ldrb	r3, [r7, #14]
 800b2e0:	061a      	lsls	r2, r3, #24
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	041b      	lsls	r3, r3, #16
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	7c3b      	ldrb	r3, [r7, #16]
 800b2ea:	021b      	lsls	r3, r3, #8
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	7c7a      	ldrb	r2, [r7, #17]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f7fe ff96 	bl	800a224 <_ZN6Status14SetAccuVoltageEl>
				break;
 800b2f8:	e01f      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				status->SetAccuVoltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	7bbb      	ldrb	r3, [r7, #14]
 800b300:	061a      	lsls	r2, r3, #24
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	041b      	lsls	r3, r3, #16
 800b306:	431a      	orrs	r2, r3
 800b308:	7c3b      	ldrb	r3, [r7, #16]
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	4313      	orrs	r3, r2
 800b30e:	7c7a      	ldrb	r2, [r7, #17]
 800b310:	4313      	orrs	r3, r2
 800b312:	4619      	mov	r1, r3
 800b314:	f7fe ffa4 	bl	800a260 <_ZN6Status15SetAccuVoltage2El>
				break;
 800b318:	e00f      	b.n	800b33a <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				status->SetCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800b31a:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800b31c:	6818      	ldr	r0, [r3, #0]
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	061a      	lsls	r2, r3, #24
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	041b      	lsls	r3, r3, #16
 800b326:	431a      	orrs	r2, r3
 800b328:	7c3b      	ldrb	r3, [r7, #16]
 800b32a:	021b      	lsls	r3, r3, #8
 800b32c:	4313      	orrs	r3, r2
 800b32e:	7c7a      	ldrb	r2, [r7, #17]
 800b330:	4313      	orrs	r3, r2
 800b332:	4619      	mov	r1, r3
 800b334:	f7fe ff40 	bl	800a1b8 <_ZN6Status10SetCurrentEl>
				break;
 800b338:	bf00      	nop
		}
	}
}
 800b33a:	bf00      	nop
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	2000070c 	.word	0x2000070c
 800b348:	20000710 	.word	0x20000710

0800b34c <SetCharger>:

/* Send charger command message on CAN bus. Every fifth time the charger_event_flag is set a reset command is sent,
 * if charger is in fault state. Otherwise a charge command is sent. */
void SetCharger(void) {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
	uint8_t charger_event_flag = true; // TODO would be set to true every 1s in the old system by a timer
 800b352:	2301      	movs	r3, #1
 800b354:	71fb      	strb	r3, [r7, #7]
	if (charger_event_flag) {
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d035      	beq.n	800b3c8 <SetCharger+0x7c>
		if((nlg5->a_buffer[0] == 136 || nlg5->a_buffer[0] == 152) && (nlg5->b_buffer[0] == 136 || nlg5->b_buffer[0] == 152)) {
 800b35c:	4b1c      	ldr	r3, [pc, #112]	; (800b3d0 <SetCharger+0x84>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	7a1b      	ldrb	r3, [r3, #8]
 800b362:	2b88      	cmp	r3, #136	; 0x88
 800b364:	d004      	beq.n	800b370 <SetCharger+0x24>
 800b366:	4b1a      	ldr	r3, [pc, #104]	; (800b3d0 <SetCharger+0x84>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	7a1b      	ldrb	r3, [r3, #8]
 800b36c:	2b98      	cmp	r3, #152	; 0x98
 800b36e:	d109      	bne.n	800b384 <SetCharger+0x38>
 800b370:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <SetCharger+0x84>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	7b1b      	ldrb	r3, [r3, #12]
 800b376:	2b88      	cmp	r3, #136	; 0x88
 800b378:	d01f      	beq.n	800b3ba <SetCharger+0x6e>
 800b37a:	4b15      	ldr	r3, [pc, #84]	; (800b3d0 <SetCharger+0x84>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	7b1b      	ldrb	r3, [r3, #12]
 800b380:	2b98      	cmp	r3, #152	; 0x98
 800b382:	d01a      	beq.n	800b3ba <SetCharger+0x6e>
			// Empty for now. No need for this check.
		} else if (status->charger_event_counter++ > 4) {
 800b384:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <SetCharger+0x88>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	7bd3      	ldrb	r3, [r2, #15]
 800b38a:	1c59      	adds	r1, r3, #1
 800b38c:	b2c9      	uxtb	r1, r1
 800b38e:	73d1      	strb	r1, [r2, #15]
 800b390:	2b04      	cmp	r3, #4
 800b392:	bf8c      	ite	hi
 800b394:	2301      	movhi	r3, #1
 800b396:	2300      	movls	r3, #0
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d008      	beq.n	800b3b0 <SetCharger+0x64>
			nlg5->ctrl = NLG5::C_C_EL;
 800b39e:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <SetCharger+0x84>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2240      	movs	r2, #64	; 0x40
 800b3a4:	701a      	strb	r2, [r3, #0]
			status->charger_event_counter = 0;
 800b3a6:	4b0b      	ldr	r3, [pc, #44]	; (800b3d4 <SetCharger+0x88>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	73da      	strb	r2, [r3, #15]
 800b3ae:	e005      	b.n	800b3bc <SetCharger+0x70>
		} else
			nlg5->ctrl = NLG5::C_C_EN;
 800b3b0:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <SetCharger+0x84>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2280      	movs	r2, #128	; 0x80
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e000      	b.n	800b3bc <SetCharger+0x70>
		if((nlg5->a_buffer[0] == 136 || nlg5->a_buffer[0] == 152) && (nlg5->b_buffer[0] == 136 || nlg5->b_buffer[0] == 152)) {
 800b3ba:	bf00      	nop

		CANTxNLGAControl();
 800b3bc:	f000 fbc6 	bl	800bb4c <CANTxNLGAControl>
		CANTxNLGBControl();
 800b3c0:	f000 fc12 	bl	800bbe8 <CANTxNLGBControl>
		charger_event_flag = false;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	71fb      	strb	r3, [r7, #7]
	}
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	2000070c 	.word	0x2000070c
 800b3d4:	20000710 	.word	0x20000710

0800b3d8 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE>:

void BuildDischargeConfig(
		LTC6811Register<uint8_t>& cfg_tx,
		LTC6811Register<uint8_t>& cfg_rx,
		std::array<LTC6811Register<uint16_t>, 4>& cell_data) {
 800b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3da:	b0a9      	sub	sp, #164	; 0xa4
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
	uint16_t DCCx = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	837b      	strh	r3, [r7, #26]
	uint8_t ic_index{ 0 }, cell_index{ 0 }, reg_index{ 0 };
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	767b      	strb	r3, [r7, #25]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

	uint16_t avg_cell = status->sum_of_cells / 144;
 800b3f8:	4bbc      	ldr	r3, [pc, #752]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b3fe:	4abc      	ldr	r2, [pc, #752]	; (800b6f0 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x318>)
 800b400:	fba2 2303 	umull	r2, r3, r2, r3
 800b404:	095b      	lsrs	r3, r3, #5
 800b406:	b29b      	uxth	r3, r3
 800b408:	82fb      	strh	r3, [r7, #22]
	if (status->op_mode & Status::Balance) {
 800b40a:	4bb8      	ldr	r3, [pc, #736]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 816d 	beq.w	800b6f4 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x31c>
		switch (status->discharge_mode) {
 800b41a:	4bb4      	ldr	r3, [pc, #720]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	2b01      	cmp	r3, #1
 800b422:	f000 8090 	beq.w	800b546 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x16e>
 800b426:	2b02      	cmp	r3, #2
 800b428:	f000 80cd 	beq.w	800b5c6 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x1ee>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f040 818d 	bne.w	800b74c <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x374>
		case 0: //Discharge all above (min_voltage + delta)
			for (const auto& reg : cell_data) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	65bb      	str	r3, [r7, #88]	; 0x58
 800b436:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b438:	f7fd fab4 	bl	80089a4 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE5beginEv>
 800b43c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800b440:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b442:	f7fd fabb 	bl	80089bc <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE3endEv>
 800b446:	6578      	str	r0, [r7, #84]	; 0x54
 800b448:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b44c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b44e:	429a      	cmp	r2, r3
 800b450:	f000 8177 	beq.w	800b742 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x36a>
 800b454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b458:	653b      	str	r3, [r7, #80]	; 0x50
				ic_index = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

				for (const auto& ic : reg) {
 800b460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b462:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b464:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b466:	f000 fdc9 	bl	800bffc <_ZNKSt5arrayIS_ItLj4EELj12EE5beginEv>
 800b46a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800b46e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b470:	f000 fdd0 	bl	800c014 <_ZNKSt5arrayIS_ItLj4EELj12EE3endEv>
 800b474:	64b8      	str	r0, [r7, #72]	; 0x48
 800b476:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b47a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d057      	beq.n	800b530 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x158>
 800b480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b484:	647b      	str	r3, [r7, #68]	; 0x44
					// Starting index of cells within each LTC6811 register. Will repeat { 0, 1, 2 } on 0th register, { 3, 4, 5 } on 1st, and so on.
					// TODO: Figure out a better algorithm for this, especially for case 1 below.
					cell_index = reg_index * LTC6811::kCellsInReg;
 800b486:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b48a:	461a      	mov	r2, r3
 800b48c:	0052      	lsls	r2, r2, #1
 800b48e:	4413      	add	r3, r2
 800b490:	b2db      	uxtb	r3, r3
 800b492:	767b      	strb	r3, [r7, #25]

					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
						if (voltage > status->min_voltage + LTC6811::kDelta)
							DCCx |= 1 << cell_index;
						++cell_index;
					});
 800b494:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b496:	f000 fdca 	bl	800c02e <_ZNKSt5arrayItLj4EE5beginEv>
 800b49a:	4604      	mov	r4, r0
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
 800b49c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b49e:	f000 fdc6 	bl	800c02e <_ZNKSt5arrayItLj4EE5beginEv>
 800b4a2:	4603      	mov	r3, r0
					});
 800b4a4:	1d9a      	adds	r2, r3, #6
 800b4a6:	f107 031a 	add.w	r3, r7, #26
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ac:	f107 0319 	add.w	r3, r7, #25
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
 800b4b2:	f107 001c 	add.w	r0, r7, #28
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	4621      	mov	r1, r4
 800b4be:	f000 fdf1 	bl	800c0a4 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_SA_SA_SD_>

					cfg_tx[ic_index][4] |= DCCx & 0xFF;
 800b4c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 fe10 	bl	800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2104      	movs	r1, #4
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 fe1a 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	b251      	sxtb	r1, r2
 800b4de:	8b7a      	ldrh	r2, [r7, #26]
 800b4e0:	b252      	sxtb	r2, r2
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	b252      	sxtb	r2, r2
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]
					cfg_tx[ic_index++][5] |= DCCx >> 8 & 0xF;
 800b4ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fdf9 	bl	800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2105      	movs	r1, #5
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fe03 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b506:	4603      	mov	r3, r0
 800b508:	781a      	ldrb	r2, [r3, #0]
 800b50a:	b251      	sxtb	r1, r2
 800b50c:	8b7a      	ldrh	r2, [r7, #26]
 800b50e:	1212      	asrs	r2, r2, #8
 800b510:	b252      	sxtb	r2, r2
 800b512:	f002 020f 	and.w	r2, r2, #15
 800b516:	b252      	sxtb	r2, r2
 800b518:	430a      	orrs	r2, r1
 800b51a:	b252      	sxtb	r2, r2
 800b51c:	b2d2      	uxtb	r2, r2
 800b51e:	701a      	strb	r2, [r3, #0]
					DCCx = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	837b      	strh	r3, [r7, #26]
				for (const auto& ic : reg) {
 800b524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b528:	3308      	adds	r3, #8
 800b52a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b52e:	e7a2      	b.n	800b476 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x9e>
				}
				++reg_index;
 800b530:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b534:	3301      	adds	r3, #1
 800b536:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			for (const auto& reg : cell_data) {
 800b53a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b53e:	3360      	adds	r3, #96	; 0x60
 800b540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b544:	e780      	b.n	800b448 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x70>
			}
			break;

		case 1: //Discharge only the max_voltage cell.
			if (status->max_voltage - status->min_voltage > LTC6811::kDelta) {
 800b546:	4b69      	ldr	r3, [pc, #420]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b54c:	461a      	mov	r2, r3
 800b54e:	4b67      	ldr	r3, [pc, #412]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2b64      	cmp	r3, #100	; 0x64
 800b558:	f340 80f5 	ble.w	800b746 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x36e>
				DCCx |= 1 << status->max_voltage_index.second;
 800b55c:	4b63      	ldr	r3, [pc, #396]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800b564:	461a      	mov	r2, r3
 800b566:	2301      	movs	r3, #1
 800b568:	4093      	lsls	r3, r2
 800b56a:	b21a      	sxth	r2, r3
 800b56c:	8b7b      	ldrh	r3, [r7, #26]
 800b56e:	b21b      	sxth	r3, r3
 800b570:	4313      	orrs	r3, r2
 800b572:	b21b      	sxth	r3, r3
 800b574:	b29b      	uxth	r3, r3
 800b576:	837b      	strh	r3, [r7, #26]
				cfg_tx[status->max_voltage_index.first][4] = DCCx & 0xFF;
 800b578:	8b7c      	ldrh	r4, [r7, #26]
 800b57a:	4b5c      	ldr	r3, [pc, #368]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b582:	4619      	mov	r1, r3
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 fdb2 	bl	800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2104      	movs	r1, #4
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fdbc 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b594:	4603      	mov	r3, r0
 800b596:	b2e2      	uxtb	r2, r4
 800b598:	701a      	strb	r2, [r3, #0]
				cfg_tx[status->max_voltage_index.first][5] = DCCx >> 8 & 0xF;
 800b59a:	8b7b      	ldrh	r3, [r7, #26]
 800b59c:	121b      	asrs	r3, r3, #8
 800b59e:	b2dc      	uxtb	r4, r3
 800b5a0:	4b52      	ldr	r3, [pc, #328]	; (800b6ec <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x314>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 fd9f 	bl	800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2105      	movs	r1, #5
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fda9 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f004 020f 	and.w	r2, r4, #15
 800b5c0:	b2d2      	uxtb	r2, r2
 800b5c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b5c4:	e0bf      	b.n	800b746 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x36e>

		case 2: //Discharge all cells that are above (average cell voltage + delta)
			for (const auto& reg : cell_data) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	673b      	str	r3, [r7, #112]	; 0x70
 800b5ca:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b5cc:	f7fd f9ea 	bl	80089a4 <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE5beginEv>
 800b5d0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 800b5d4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b5d6:	f7fd f9f1 	bl	80089bc <_ZNSt5arrayIS_IS_ItLj4EELj12EELj4EE3endEv>
 800b5da:	66f8      	str	r0, [r7, #108]	; 0x6c
 800b5dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	f000 80b1 	beq.w	800b74a <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x372>
 800b5e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5ec:	66bb      	str	r3, [r7, #104]	; 0x68
				ic_index = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cell_index = reg_index * LTC6811::kCellsInReg;
 800b5f4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	0052      	lsls	r2, r2, #1
 800b5fc:	4413      	add	r3, r2
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	767b      	strb	r3, [r7, #25]
				DCCx = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	837b      	strh	r3, [r7, #26]
				for (const auto& ic : reg) {
 800b606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b608:	667b      	str	r3, [r7, #100]	; 0x64
 800b60a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b60c:	f000 fcf6 	bl	800bffc <_ZNKSt5arrayIS_ItLj4EELj12EE5beginEv>
 800b610:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800b614:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800b616:	f000 fcfd 	bl	800c014 <_ZNKSt5arrayIS_ItLj4EELj12EE3endEv>
 800b61a:	6638      	str	r0, [r7, #96]	; 0x60
 800b61c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b622:	429a      	cmp	r2, r3
 800b624:	d057      	beq.n	800b6d6 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x2fe>
 800b626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b62a:	65fb      	str	r3, [r7, #92]	; 0x5c
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
						if (voltage > avg_cell + LTC6811::kDelta)
							DCCx |= 1 << cell_index;
						++cell_index;
					});
 800b62c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b62e:	f000 fcfe 	bl	800c02e <_ZNKSt5arrayItLj4EE5beginEv>
 800b632:	4606      	mov	r6, r0
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
 800b634:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b636:	f000 fcfa 	bl	800c02e <_ZNKSt5arrayItLj4EE5beginEv>
 800b63a:	4603      	mov	r3, r0
					});
 800b63c:	1d9a      	adds	r2, r3, #6
 800b63e:	f107 0316 	add.w	r3, r7, #22
 800b642:	63bb      	str	r3, [r7, #56]	; 0x38
 800b644:	f107 031a 	add.w	r3, r7, #26
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64a:	f107 0319 	add.w	r3, r7, #25
 800b64e:	643b      	str	r3, [r7, #64]	; 0x40
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
 800b650:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800b654:	466d      	mov	r5, sp
 800b656:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b65a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b65e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	4631      	mov	r1, r6
 800b666:	4620      	mov	r0, r4
 800b668:	f000 fd8a 	bl	800c180 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E0_ET0_SA_SA_SD_>
					cfg_tx[ic_index][4] |= DCCx & 0xFF;
 800b66c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b670:	4619      	mov	r1, r3
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 fd3b 	bl	800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>
 800b678:	4603      	mov	r3, r0
 800b67a:	2104      	movs	r1, #4
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fd45 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b682:	4603      	mov	r3, r0
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	b251      	sxtb	r1, r2
 800b688:	8b7a      	ldrh	r2, [r7, #26]
 800b68a:	b252      	sxtb	r2, r2
 800b68c:	430a      	orrs	r2, r1
 800b68e:	b252      	sxtb	r2, r2
 800b690:	b2d2      	uxtb	r2, r2
 800b692:	701a      	strb	r2, [r3, #0]
					cfg_tx[ic_index++][5] |= DCCx >> 8 & 0xF;
 800b694:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 800b69e:	4619      	mov	r1, r3
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fd24 	bl	800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2105      	movs	r1, #5
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fd2e 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	b251      	sxtb	r1, r2
 800b6b6:	8b7a      	ldrh	r2, [r7, #26]
 800b6b8:	1212      	asrs	r2, r2, #8
 800b6ba:	b252      	sxtb	r2, r2
 800b6bc:	f002 020f 	and.w	r2, r2, #15
 800b6c0:	b252      	sxtb	r2, r2
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	b252      	sxtb	r2, r2
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
				for (const auto& ic : reg) {
 800b6ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6d4:	e7a2      	b.n	800b61c <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x244>
				}
				++reg_index;
 800b6d6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b6da:	3301      	adds	r3, #1
 800b6dc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			for (const auto& reg : cell_data) {
 800b6e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6e4:	3360      	adds	r3, #96	; 0x60
 800b6e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6ea:	e777      	b.n	800b5dc <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x204>
 800b6ec:	20000710 	.word	0x20000710
 800b6f0:	38e38e39 	.word	0x38e38e39
			}
			break;
		}
	} else
		for (auto& ic : cfg_tx)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b6f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b6fa:	f000 fd66 	bl	800c1ca <_ZNSt5arrayIS_IhLj8EELj12EE5beginEv>
 800b6fe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800b702:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b704:	f000 fd6d 	bl	800c1e2 <_ZNSt5arrayIS_IhLj8EELj12EE3endEv>
 800b708:	67b8      	str	r0, [r7, #120]	; 0x78
 800b70a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b70e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b710:	429a      	cmp	r2, r3
 800b712:	d01b      	beq.n	800b74c <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x374>
 800b714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b718:	677b      	str	r3, [r7, #116]	; 0x74
			ic[4] = ic[5] = 0;
 800b71a:	2105      	movs	r1, #5
 800b71c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b71e:	f000 fcf5 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b722:	4604      	mov	r4, r0
 800b724:	2300      	movs	r3, #0
 800b726:	7023      	strb	r3, [r4, #0]
 800b728:	2104      	movs	r1, #4
 800b72a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b72c:	f000 fcee 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800b730:	4603      	mov	r3, r0
 800b732:	7822      	ldrb	r2, [r4, #0]
 800b734:	701a      	strb	r2, [r3, #0]
		for (auto& ic : cfg_tx)
 800b736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b73a:	3308      	adds	r3, #8
 800b73c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b740:	e7e3      	b.n	800b70a <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x332>
			break;
 800b742:	bf00      	nop
 800b744:	e002      	b.n	800b74c <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x374>
			break;
 800b746:	bf00      	nop
 800b748:	e000      	b.n	800b74c <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x374>
			break;
 800b74a:	bf00      	nop

	ltc6811->WakeFromSleep();
 800b74c:	4b0c      	ldr	r3, [pc, #48]	; (800b780 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x3a8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4618      	mov	r0, r3
 800b752:	f7fe ff2d 	bl	800a5b0 <_ZN7LTC681113WakeFromSleepEv>
	ltc6811->WriteConfigRegister(cfg_tx);
 800b756:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x3a8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68f9      	ldr	r1, [r7, #12]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe ff77 	bl	800a650 <_ZN7LTC681119WriteConfigRegisterERSt5arrayIS0_IhLj8EELj12EE>
	HAL_Delay(500);
 800b762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b766:	f7f4 ff3f 	bl	80005e8 <HAL_Delay>
	ltc6811->ReadConfigRegister(cfg_rx);
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <_Z20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EE+0x3a8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe ff8f 	bl	800a694 <_ZN7LTC681118ReadConfigRegisterERSt5arrayIS0_IhLj8EELj12EE>
}
 800b776:	bf00      	nop
 800b778:	379c      	adds	r7, #156	; 0x9c
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000714 	.word	0x20000714

0800b784 <CANTxVoltage>:
		return -1;

	return 0;
}

int8_t CANTxVoltage(void) {
 800b784:	b480      	push	{r7}
 800b786:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_VOLT;
 800b788:	4b07      	ldr	r3, [pc, #28]	; (800b7a8 <CANTxVoltage+0x24>)
 800b78a:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800b78e:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800b790:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <CANTxVoltage+0x24>)
 800b792:	2200      	movs	r2, #0
 800b794:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800b796:	4b04      	ldr	r3, [pc, #16]	; (800b7a8 <CANTxVoltage+0x24>)
 800b798:	2208      	movs	r2, #8
 800b79a:	611a      	str	r2, [r3, #16]

			++TxHeader.StdId;
		}
	}
#endif
	return 0;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	200003f4 	.word	0x200003f4

0800b7ac <CANTxVoltageLimpTotal>:

int8_t CANTxVoltageLimpTotal(void) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_VOLT_TOTAL;
 800b7b2:	4b23      	ldr	r3, [pc, #140]	; (800b840 <CANTxVoltageLimpTotal+0x94>)
 800b7b4:	220b      	movs	r2, #11
 800b7b6:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800b7b8:	4b21      	ldr	r3, [pc, #132]	; (800b840 <CANTxVoltageLimpTotal+0x94>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800b7be:	4b20      	ldr	r3, [pc, #128]	; (800b840 <CANTxVoltageLimpTotal+0x94>)
 800b7c0:	2208      	movs	r2, #8
 800b7c2:	611a      	str	r2, [r3, #16]

	auto sum_of_cells = status->sum_of_cells / 10000; // TODO was being divided by 10000 on old system, I believe
 800b7c4:	4b1f      	ldr	r3, [pc, #124]	; (800b844 <CANTxVoltageLimpTotal+0x98>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b7ca:	4a1f      	ldr	r2, [pc, #124]	; (800b848 <CANTxVoltageLimpTotal+0x9c>)
 800b7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d0:	0b5b      	lsrs	r3, r3, #13
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	60fb      	str	r3, [r7, #12]

	uint8_t data[] = {
 800b7d6:	1d3b      	adds	r3, r7, #4
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]
 800b7dc:	605a      	str	r2, [r3, #4]
 800b7de:	23cd      	movs	r3, #205	; 0xcd
 800b7e0:	723b      	strb	r3, [r7, #8]
 800b7e2:	23ab      	movs	r3, #171	; 0xab
 800b7e4:	727b      	strb	r3, [r7, #9]
			static_cast<uint8_t>(sum_of_cells >> 24),
			0xCD,
			0xAB,
			0,
			status->GetLimping()
	};
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(sum_of_cells >> 8),
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	121b      	asrs	r3, r3, #8
	};
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(sum_of_cells >> 16),
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	141b      	asrs	r3, r3, #16
	};
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	71bb      	strb	r3, [r7, #6]
			static_cast<uint8_t>(sum_of_cells >> 24),
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	161b      	asrs	r3, r3, #24
	};
 800b800:	b2db      	uxtb	r3, r3
 800b802:	71fb      	strb	r3, [r7, #7]
			status->GetLimping()
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <CANTxVoltageLimpTotal+0x98>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe fcc3 	bl	800a194 <_ZNK6Status10GetLimpingEv>
 800b80e:	4603      	mov	r3, r0
	};
 800b810:	72fb      	strb	r3, [r7, #11]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800b812:	1d3a      	adds	r2, r7, #4
 800b814:	2301      	movs	r3, #1
 800b816:	490a      	ldr	r1, [pc, #40]	; (800b840 <CANTxVoltageLimpTotal+0x94>)
 800b818:	480c      	ldr	r0, [pc, #48]	; (800b84c <CANTxVoltageLimpTotal+0xa0>)
 800b81a:	f7f5 f927 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	bf14      	ite	ne
 800b824:	2301      	movne	r3, #1
 800b826:	2300      	moveq	r3, #0
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <CANTxVoltageLimpTotal+0x88>
		return -1;
 800b82e:	f04f 33ff 	mov.w	r3, #4294967295
 800b832:	e000      	b.n	800b836 <CANTxVoltageLimpTotal+0x8a>

	return 0;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200003f4 	.word	0x200003f4
 800b844:	20000710 	.word	0x20000710
 800b848:	d1b71759 	.word	0xd1b71759
 800b84c:	200002c8 	.word	0x200002c8

0800b850 <CANTxTemperature>:

int8_t CANTxTemperature(void) {
 800b850:	b480      	push	{r7}
 800b852:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_TEMP;
 800b854:	4b07      	ldr	r3, [pc, #28]	; (800b874 <CANTxTemperature+0x24>)
 800b856:	f240 729c 	movw	r2, #1948	; 0x79c
 800b85a:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <CANTxTemperature+0x24>)
 800b85e:	2200      	movs	r2, #0
 800b860:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800b862:	4b04      	ldr	r3, [pc, #16]	; (800b874 <CANTxTemperature+0x24>)
 800b864:	2208      	movs	r2, #8
 800b866:	611a      	str	r2, [r3, #16]
		TxHeader.DLC = byte_position; // I think this is unnecessary, but it was in the old code...

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
		return -1;
#endif
	return 0;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	200003f4 	.word	0x200003f4

0800b878 <CANTxUptime>:

int32_t CANTxUptime(void) {
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
	static uint32_t upCounter;
	upCounter++; // nicer way of saving the value between function calls
 800b87e:	4b27      	ldr	r3, [pc, #156]	; (800b91c <CANTxUptime+0xa4>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	4a25      	ldr	r2, [pc, #148]	; (800b91c <CANTxUptime+0xa4>)
 800b886:	6013      	str	r3, [r2, #0]

	TxHeader.StdId = CAN_ID_UPTIME;
 800b888:	4b25      	ldr	r3, [pc, #148]	; (800b920 <CANTxUptime+0xa8>)
 800b88a:	2208      	movs	r2, #8
 800b88c:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800b88e:	4b24      	ldr	r3, [pc, #144]	; (800b920 <CANTxUptime+0xa8>)
 800b890:	2200      	movs	r2, #0
 800b892:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800b894:	4b22      	ldr	r3, [pc, #136]	; (800b920 <CANTxUptime+0xa8>)
 800b896:	2208      	movs	r2, #8
 800b898:	611a      	str	r2, [r3, #16]

			static_cast<uint8_t>(status->uptime),
			static_cast<uint8_t>(status->uptime >> 8),
			static_cast<uint8_t>(status->uptime >> 16),
			static_cast<uint8_t>(status->uptime >> 24)
	};
 800b89a:	4b20      	ldr	r3, [pc, #128]	; (800b91c <CANTxUptime+0xa4>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(upCounter >> 8),
 800b8a2:	4b1e      	ldr	r3, [pc, #120]	; (800b91c <CANTxUptime+0xa4>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	0a1b      	lsrs	r3, r3, #8
	};
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	707b      	strb	r3, [r7, #1]
			static_cast<uint8_t>(upCounter >> 16),
 800b8ac:	4b1b      	ldr	r3, [pc, #108]	; (800b91c <CANTxUptime+0xa4>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	0c1b      	lsrs	r3, r3, #16
	};
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	70bb      	strb	r3, [r7, #2]
			static_cast<uint8_t>(upCounter >> 24),
 800b8b6:	4b19      	ldr	r3, [pc, #100]	; (800b91c <CANTxUptime+0xa4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	0e1b      	lsrs	r3, r3, #24
	};
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(status->uptime),
 800b8c0:	4b18      	ldr	r3, [pc, #96]	; (800b924 <CANTxUptime+0xac>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
	};
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(status->uptime >> 8),
 800b8ca:	4b16      	ldr	r3, [pc, #88]	; (800b924 <CANTxUptime+0xac>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	0a1b      	lsrs	r3, r3, #8
	};
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(status->uptime >> 16),
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <CANTxUptime+0xac>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	0c1b      	lsrs	r3, r3, #16
	};
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	71bb      	strb	r3, [r7, #6]
			static_cast<uint8_t>(status->uptime >> 24)
 800b8e2:	4b10      	ldr	r3, [pc, #64]	; (800b924 <CANTxUptime+0xac>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	0e1b      	lsrs	r3, r3, #24
	};
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	71fb      	strb	r3, [r7, #7]


	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800b8ee:	463a      	mov	r2, r7
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	490b      	ldr	r1, [pc, #44]	; (800b920 <CANTxUptime+0xa8>)
 800b8f4:	480c      	ldr	r0, [pc, #48]	; (800b928 <CANTxUptime+0xb0>)
 800b8f6:	f7f5 f8b9 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bf14      	ite	ne
 800b900:	2301      	movne	r3, #1
 800b902:	2300      	moveq	r3, #0
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <CANTxUptime+0x98>
		return -1;
 800b90a:	f04f 33ff 	mov.w	r3, #4294967295
 800b90e:	e000      	b.n	800b912 <CANTxUptime+0x9a>

	return 0;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000718 	.word	0x20000718
 800b920:	200003f4 	.word	0x200003f4
 800b924:	20000710 	.word	0x20000710
 800b928:	200002c8 	.word	0x200002c8

0800b92c <CanTxOpMode>:

int32_t CanTxOpMode(void) {
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_OPMODE;
 800b932:	4b23      	ldr	r3, [pc, #140]	; (800b9c0 <CanTxOpMode+0x94>)
 800b934:	2209      	movs	r2, #9
 800b936:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800b938:	4b21      	ldr	r3, [pc, #132]	; (800b9c0 <CanTxOpMode+0x94>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800b93e:	4b20      	ldr	r3, [pc, #128]	; (800b9c0 <CanTxOpMode+0x94>)
 800b940:	2208      	movs	r2, #8
 800b942:	611a      	str	r2, [r3, #16]

	// I believe the order of these data arrays is wrong
	uint8_t data[8] = {
			status->precharge_flag,
 800b944:	4b1f      	ldr	r3, [pc, #124]	; (800b9c4 <CanTxOpMode+0x98>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	7b1b      	ldrb	r3, [r3, #12]
			status->safe_state_executed,
			static_cast<uint8_t>(status->min_voltage & 0xFF), // This one too
			static_cast<uint8_t>(status->min_voltage >> 8),
			status->min_voltage_index.first, // TODO this is messed up for now
			status->op_mode
	};
 800b94a:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(status->max_temp >> 8), // Why are we ruining a 16 bit int like this?
 800b94c:	4b1d      	ldr	r3, [pc, #116]	; (800b9c4 <CanTxOpMode+0x98>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b954:	121b      	asrs	r3, r3, #8
	};
 800b956:	b2db      	uxtb	r3, r3
 800b958:	707b      	strb	r3, [r7, #1]
			status->last_error,
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <CanTxOpMode+0x98>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	7b9b      	ldrb	r3, [r3, #14]
	};
 800b960:	70bb      	strb	r3, [r7, #2]
			status->safe_state_executed,
 800b962:	4b18      	ldr	r3, [pc, #96]	; (800b9c4 <CanTxOpMode+0x98>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	7b5b      	ldrb	r3, [r3, #13]
	};
 800b968:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(status->min_voltage & 0xFF), // This one too
 800b96a:	4b16      	ldr	r3, [pc, #88]	; (800b9c4 <CanTxOpMode+0x98>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
	};
 800b970:	b2db      	uxtb	r3, r3
 800b972:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(status->min_voltage >> 8),
 800b974:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <CanTxOpMode+0x98>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b97a:	121b      	asrs	r3, r3, #8
	};
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	717b      	strb	r3, [r7, #5]
			status->min_voltage_index.first, // TODO this is messed up for now
 800b980:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <CanTxOpMode+0x98>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	};
 800b988:	71bb      	strb	r3, [r7, #6]
			status->op_mode
 800b98a:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <CanTxOpMode+0x98>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
	};
 800b990:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800b992:	463a      	mov	r2, r7
 800b994:	2301      	movs	r3, #1
 800b996:	490a      	ldr	r1, [pc, #40]	; (800b9c0 <CanTxOpMode+0x94>)
 800b998:	480b      	ldr	r0, [pc, #44]	; (800b9c8 <CanTxOpMode+0x9c>)
 800b99a:	f7f5 f867 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bf14      	ite	ne
 800b9a4:	2301      	movne	r3, #1
 800b9a6:	2300      	moveq	r3, #0
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <CanTxOpMode+0x88>
		return -1;
 800b9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b2:	e000      	b.n	800b9b6 <CanTxOpMode+0x8a>

	return 0;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	200003f4 	.word	0x200003f4
 800b9c4:	20000710 	.word	0x20000710
 800b9c8:	200002c8 	.word	0x200002c8

0800b9cc <CanTxError>:

int32_t CanTxError(void) {
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
	auto pec_change = status->GetPecChange();
 800b9d2:	4b26      	ldr	r3, [pc, #152]	; (800ba6c <CanTxError+0xa0>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fb80 	bl	800a0dc <_ZN6Status12GetPecChangeEv>
 800b9dc:	60f8      	str	r0, [r7, #12]

	TxHeader.StdId = 0xBEEF;
 800b9de:	4b24      	ldr	r3, [pc, #144]	; (800ba70 <CanTxError+0xa4>)
 800b9e0:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 800b9e4:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800b9e6:	4b22      	ldr	r3, [pc, #136]	; (800ba70 <CanTxError+0xa4>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800b9ec:	4b20      	ldr	r3, [pc, #128]	; (800ba70 <CanTxError+0xa4>)
 800b9ee:	2208      	movs	r2, #8
 800b9f0:	611a      	str	r2, [r3, #16]

	uint8_t data[] = {
			static_cast<uint8_t>(status->pec_counter >> 24),
 800b9f2:	4b1e      	ldr	r3, [pc, #120]	; (800ba6c <CanTxError+0xa0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	0e1b      	lsrs	r3, r3, #24

			static_cast<uint8_t>(pec_change >> 24),
			static_cast<uint8_t>(pec_change >> 16),
			static_cast<uint8_t>(pec_change >> 8),
			static_cast<uint8_t>(pec_change)
	};
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(status->pec_counter >> 16),
 800b9fe:	4b1b      	ldr	r3, [pc, #108]	; (800ba6c <CanTxError+0xa0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	0c1b      	lsrs	r3, r3, #16
	};
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(status->pec_counter >> 8),
 800ba0a:	4b18      	ldr	r3, [pc, #96]	; (800ba6c <CanTxError+0xa0>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	0a1b      	lsrs	r3, r3, #8
	};
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	71bb      	strb	r3, [r7, #6]
			static_cast<uint8_t>(status->pec_counter),
 800ba16:	4b15      	ldr	r3, [pc, #84]	; (800ba6c <CanTxError+0xa0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
	};
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	71fb      	strb	r3, [r7, #7]
			static_cast<uint8_t>(pec_change >> 24),
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	0e1b      	lsrs	r3, r3, #24
	};
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	723b      	strb	r3, [r7, #8]
			static_cast<uint8_t>(pec_change >> 16),
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	0c1b      	lsrs	r3, r3, #16
	};
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	727b      	strb	r3, [r7, #9]
			static_cast<uint8_t>(pec_change >> 8),
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	0a1b      	lsrs	r3, r3, #8
	};
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	72bb      	strb	r3, [r7, #10]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	72fb      	strb	r3, [r7, #11]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800ba3e:	1d3a      	adds	r2, r7, #4
 800ba40:	2301      	movs	r3, #1
 800ba42:	490b      	ldr	r1, [pc, #44]	; (800ba70 <CanTxError+0xa4>)
 800ba44:	480b      	ldr	r0, [pc, #44]	; (800ba74 <CanTxError+0xa8>)
 800ba46:	f7f5 f811 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bf14      	ite	ne
 800ba50:	2301      	movne	r3, #1
 800ba52:	2300      	moveq	r3, #0
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d002      	beq.n	800ba60 <CanTxError+0x94>
		return -1;
 800ba5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5e:	e000      	b.n	800ba62 <CanTxError+0x96>

	return 0;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000710 	.word	0x20000710
 800ba70:	200003f4 	.word	0x200003f4
 800ba74:	200002c8 	.word	0x200002c8

0800ba78 <CANTxDCfg>:

/*!
	\brief Puts discharge flag data on CAN bus.
 */
int32_t CANTxDCfg(void) {
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_DISHB;
 800ba7e:	4b30      	ldr	r3, [pc, #192]	; (800bb40 <CANTxDCfg+0xc8>)
 800ba80:	f240 7275 	movw	r2, #1909	; 0x775
 800ba84:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800ba86:	4b2e      	ldr	r3, [pc, #184]	; (800bb40 <CANTxDCfg+0xc8>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800ba8c:	4b2c      	ldr	r3, [pc, #176]	; (800bb40 <CANTxDCfg+0xc8>)
 800ba8e:	2208      	movs	r2, #8
 800ba90:	611a      	str	r2, [r3, #16]

	uint8_t data[8] = { 0 };
 800ba92:	1d3b      	adds	r3, r7, #4
 800ba94:	2200      	movs	r2, #0
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	605a      	str	r2, [r3, #4]
	uint8_t byte_position = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	77fb      	strb	r3, [r7, #31]

	for (auto& ic : slave_cfg_rx) {
 800ba9e:	4b29      	ldr	r3, [pc, #164]	; (800bb44 <CANTxDCfg+0xcc>)
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	6978      	ldr	r0, [r7, #20]
 800baa4:	f000 fb91 	bl	800c1ca <_ZNSt5arrayIS_IhLj8EELj12EE5beginEv>
 800baa8:	61b8      	str	r0, [r7, #24]
 800baaa:	6978      	ldr	r0, [r7, #20]
 800baac:	f000 fb99 	bl	800c1e2 <_ZNSt5arrayIS_IhLj8EELj12EE3endEv>
 800bab0:	6138      	str	r0, [r7, #16]
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d03c      	beq.n	800bb34 <CANTxDCfg+0xbc>
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	60fb      	str	r3, [r7, #12]
		data[byte_position++] = ic[5];
 800babe:	2105      	movs	r1, #5
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 fb23 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800bac6:	4602      	mov	r2, r0
 800bac8:	7ffb      	ldrb	r3, [r7, #31]
 800baca:	1c59      	adds	r1, r3, #1
 800bacc:	77f9      	strb	r1, [r7, #31]
 800bace:	7812      	ldrb	r2, [r2, #0]
 800bad0:	f107 0120 	add.w	r1, r7, #32
 800bad4:	440b      	add	r3, r1
 800bad6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		data[byte_position++] = ic[4];
 800bada:	2104      	movs	r1, #4
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 fb15 	bl	800c10c <_ZNSt5arrayIhLj8EEixEj>
 800bae2:	4602      	mov	r2, r0
 800bae4:	7ffb      	ldrb	r3, [r7, #31]
 800bae6:	1c59      	adds	r1, r3, #1
 800bae8:	77f9      	strb	r1, [r7, #31]
 800baea:	7812      	ldrb	r2, [r2, #0]
 800baec:	f107 0120 	add.w	r1, r7, #32
 800baf0:	440b      	add	r3, r1
 800baf2:	f803 2c1c 	strb.w	r2, [r3, #-28]

		if (byte_position == 8) {
 800baf6:	7ffb      	ldrb	r3, [r7, #31]
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d117      	bne.n	800bb2c <CANTxDCfg+0xb4>
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800bafc:	1d3a      	adds	r2, r7, #4
 800bafe:	2301      	movs	r3, #1
 800bb00:	490f      	ldr	r1, [pc, #60]	; (800bb40 <CANTxDCfg+0xc8>)
 800bb02:	4811      	ldr	r0, [pc, #68]	; (800bb48 <CANTxDCfg+0xd0>)
 800bb04:	f7f4 ffb2 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bf14      	ite	ne
 800bb0e:	2301      	movne	r3, #1
 800bb10:	2300      	moveq	r3, #0
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <CANTxDCfg+0xa6>
				return -1;
 800bb18:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1c:	e00b      	b.n	800bb36 <CANTxDCfg+0xbe>

			byte_position = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	77fb      	strb	r3, [r7, #31]
			++TxHeader.StdId;
 800bb22:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <CANTxDCfg+0xc8>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3301      	adds	r3, #1
 800bb28:	4a05      	ldr	r2, [pc, #20]	; (800bb40 <CANTxDCfg+0xc8>)
 800bb2a:	6013      	str	r3, [r2, #0]
	for (auto& ic : slave_cfg_rx) {
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	3308      	adds	r3, #8
 800bb30:	61bb      	str	r3, [r7, #24]
 800bb32:	e7be      	b.n	800bab2 <CANTxDCfg+0x3a>
		}
	}

	return 0;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3720      	adds	r7, #32
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200003f4 	.word	0x200003f4
 800bb44:	200006ac 	.word	0x200006ac
 800bb48:	200002c8 	.word	0x200002c8

0800bb4c <CANTxNLGAControl>:

/* Checks specified chargers MOB status */
int32_t CANTxNLGAControl(void) {
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_NLGA_CTRL;
 800bb52:	4b22      	ldr	r3, [pc, #136]	; (800bbdc <CANTxNLGAControl+0x90>)
 800bb54:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800bb58:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800bb5a:	4b20      	ldr	r3, [pc, #128]	; (800bbdc <CANTxNLGAControl+0x90>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 7;
 800bb60:	4b1e      	ldr	r3, [pc, #120]	; (800bbdc <CANTxNLGAControl+0x90>)
 800bb62:	2207      	movs	r2, #7
 800bb64:	611a      	str	r2, [r3, #16]

	uint8_t data[7] = {
			nlg5->ctrl,
 800bb66:	4b1e      	ldr	r3, [pc, #120]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
			static_cast<uint8_t>(nlg5->mc_limit),
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
			static_cast<uint8_t>(nlg5->ov_limit),
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
			static_cast<uint8_t>(nlg5->oc_limit)
	};
 800bb6c:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800bb6e:	4b1c      	ldr	r3, [pc, #112]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	885b      	ldrh	r3, [r3, #2]
 800bb74:	121b      	asrs	r3, r3, #8
	};
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	707b      	strb	r3, [r7, #1]
			static_cast<uint8_t>(nlg5->mc_limit),
 800bb7a:	4b19      	ldr	r3, [pc, #100]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	885b      	ldrh	r3, [r3, #2]
	};
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	70bb      	strb	r3, [r7, #2]
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800bb84:	4b16      	ldr	r3, [pc, #88]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	88db      	ldrh	r3, [r3, #6]
 800bb8a:	121b      	asrs	r3, r3, #8
	};
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(nlg5->ov_limit),
 800bb90:	4b13      	ldr	r3, [pc, #76]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	88db      	ldrh	r3, [r3, #6]
	};
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800bb9a:	4b11      	ldr	r3, [pc, #68]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	889b      	ldrh	r3, [r3, #4]
 800bba0:	121b      	asrs	r3, r3, #8
	};
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(nlg5->oc_limit)
 800bba6:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <CANTxNLGAControl+0x94>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	889b      	ldrh	r3, [r3, #4]
	};
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	71bb      	strb	r3, [r7, #6]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800bbb0:	463a      	mov	r2, r7
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	4909      	ldr	r1, [pc, #36]	; (800bbdc <CANTxNLGAControl+0x90>)
 800bbb6:	480b      	ldr	r0, [pc, #44]	; (800bbe4 <CANTxNLGAControl+0x98>)
 800bbb8:	f7f4 ff58 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	bf14      	ite	ne
 800bbc2:	2301      	movne	r3, #1
 800bbc4:	2300      	moveq	r3, #0
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <CANTxNLGAControl+0x86>
		return -1;
 800bbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd0:	e000      	b.n	800bbd4 <CANTxNLGAControl+0x88>

	return 0;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	200003f4 	.word	0x200003f4
 800bbe0:	2000070c 	.word	0x2000070c
 800bbe4:	200002c8 	.word	0x200002c8

0800bbe8 <CANTxNLGBControl>:

// TODO This is exactly the same as the function above?
int32_t CANTxNLGBControl(void) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_NLGB_CTRL;
 800bbee:	4b22      	ldr	r3, [pc, #136]	; (800bc78 <CANTxNLGBControl+0x90>)
 800bbf0:	f44f 62c5 	mov.w	r2, #1576	; 0x628
 800bbf4:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800bbf6:	4b20      	ldr	r3, [pc, #128]	; (800bc78 <CANTxNLGBControl+0x90>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 7;
 800bbfc:	4b1e      	ldr	r3, [pc, #120]	; (800bc78 <CANTxNLGBControl+0x90>)
 800bbfe:	2207      	movs	r2, #7
 800bc00:	611a      	str	r2, [r3, #16]

	uint8_t data[7] = {
			nlg5->ctrl,
 800bc02:	4b1e      	ldr	r3, [pc, #120]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
			static_cast<uint8_t>(nlg5->mc_limit),
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
			static_cast<uint8_t>(nlg5->ov_limit),
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
			static_cast<uint8_t>(nlg5->oc_limit)
	};
 800bc08:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800bc0a:	4b1c      	ldr	r3, [pc, #112]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	885b      	ldrh	r3, [r3, #2]
 800bc10:	121b      	asrs	r3, r3, #8
	};
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	707b      	strb	r3, [r7, #1]
			static_cast<uint8_t>(nlg5->mc_limit),
 800bc16:	4b19      	ldr	r3, [pc, #100]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	885b      	ldrh	r3, [r3, #2]
	};
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	70bb      	strb	r3, [r7, #2]
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800bc20:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	88db      	ldrh	r3, [r3, #6]
 800bc26:	121b      	asrs	r3, r3, #8
	};
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(nlg5->ov_limit),
 800bc2c:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	88db      	ldrh	r3, [r3, #6]
	};
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800bc36:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	889b      	ldrh	r3, [r3, #4]
 800bc3c:	121b      	asrs	r3, r3, #8
	};
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(nlg5->oc_limit)
 800bc42:	4b0e      	ldr	r3, [pc, #56]	; (800bc7c <CANTxNLGBControl+0x94>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	889b      	ldrh	r3, [r3, #4]
	};
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	71bb      	strb	r3, [r7, #6]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800bc4c:	463a      	mov	r2, r7
 800bc4e:	2301      	movs	r3, #1
 800bc50:	4909      	ldr	r1, [pc, #36]	; (800bc78 <CANTxNLGBControl+0x90>)
 800bc52:	480b      	ldr	r0, [pc, #44]	; (800bc80 <CANTxNLGBControl+0x98>)
 800bc54:	f7f4 ff0a 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bf14      	ite	ne
 800bc5e:	2301      	movne	r3, #1
 800bc60:	2300      	moveq	r3, #0
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <CANTxNLGBControl+0x86>
		return -1;
 800bc68:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6c:	e000      	b.n	800bc70 <CANTxNLGBControl+0x88>

	return 0;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	200003f4 	.word	0x200003f4
 800bc7c:	2000070c 	.word	0x2000070c
 800bc80:	200002c8 	.word	0x200002c8

0800bc84 <CANTxVolumeSize>:

int32_t CANTxVolumeSize(uint32_t size_of_log) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	TxHeader.StdId = CAN_ID_LOGGER_RESP;
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <CANTxVolumeSize+0x68>)
 800bc8e:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800bc92:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800bc94:	4b15      	ldr	r3, [pc, #84]	; (800bcec <CANTxVolumeSize+0x68>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 4;
 800bc9a:	4b14      	ldr	r3, [pc, #80]	; (800bcec <CANTxVolumeSize+0x68>)
 800bc9c:	2204      	movs	r2, #4
 800bc9e:	611a      	str	r2, [r3, #16]

	uint8_t data[] = {
			static_cast<uint8_t>(size_of_log >> 24),
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	0e1b      	lsrs	r3, r3, #24
			static_cast<uint8_t>(size_of_log >> 16),
			static_cast<uint8_t>(size_of_log >> 8),
			static_cast<uint8_t>(size_of_log)
	};
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	733b      	strb	r3, [r7, #12]
			static_cast<uint8_t>(size_of_log >> 16),
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	0c1b      	lsrs	r3, r3, #16
	};
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	737b      	strb	r3, [r7, #13]
			static_cast<uint8_t>(size_of_log >> 8),
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	0a1b      	lsrs	r3, r3, #8
	};
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	73bb      	strb	r3, [r7, #14]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	73fb      	strb	r3, [r7, #15]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800bcbe:	f107 020c 	add.w	r2, r7, #12
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4909      	ldr	r1, [pc, #36]	; (800bcec <CANTxVolumeSize+0x68>)
 800bcc6:	480a      	ldr	r0, [pc, #40]	; (800bcf0 <CANTxVolumeSize+0x6c>)
 800bcc8:	f7f4 fed0 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bf14      	ite	ne
 800bcd2:	2301      	movne	r3, #1
 800bcd4:	2300      	moveq	r3, #0
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <CANTxVolumeSize+0x5e>
		return -1;
 800bcdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bce0:	e000      	b.n	800bce4 <CANTxVolumeSize+0x60>

	return 0;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200003f4 	.word	0x200003f4
 800bcf0:	200002c8 	.word	0x200002c8

0800bcf4 <canresp_get_volume_size>:

void canresp_get_volume_size(void) {
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	490c      	ldr	r1, [pc, #48]	; (800bd2c <canresp_get_volume_size+0x38>)
 800bcfc:	480c      	ldr	r0, [pc, #48]	; (800bd30 <canresp_get_volume_size+0x3c>)
 800bcfe:	f7fa ffcf 	bl	8006ca0 <f_mount>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bf0c      	ite	eq
 800bd08:	2301      	moveq	r3, #1
 800bd0a:	2300      	movne	r3, #0
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <canresp_get_volume_size+0x32>
		CANTxVolumeSize(f_size(&SDFile));
 800bd12:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <canresp_get_volume_size+0x40>)
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff ffb4 	bl	800bc84 <CANTxVolumeSize>
		f_mount(NULL, "", 0); /* Unmount */
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4903      	ldr	r1, [pc, #12]	; (800bd2c <canresp_get_volume_size+0x38>)
 800bd20:	2000      	movs	r0, #0
 800bd22:	f7fa ffbd 	bl	8006ca0 <f_mount>
	}
}
 800bd26:	bf00      	nop
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0800ce24 	.word	0x0800ce24
 800bd30:	2000096c 	.word	0x2000096c
 800bd34:	2000073c 	.word	0x2000073c

0800bd38 <canresp_delete_logfile>:

void canresp_delete_logfile(void) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	490b      	ldr	r1, [pc, #44]	; (800bd6c <canresp_delete_logfile+0x34>)
 800bd40:	480b      	ldr	r0, [pc, #44]	; (800bd70 <canresp_delete_logfile+0x38>)
 800bd42:	f7fa ffad 	bl	8006ca0 <f_mount>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	bf0c      	ite	eq
 800bd4c:	2301      	moveq	r3, #1
 800bd4e:	2300      	movne	r3, #0
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d007      	beq.n	800bd66 <canresp_delete_logfile+0x2e>
		f_unlink("/hpf17/data.txt");
 800bd56:	4807      	ldr	r0, [pc, #28]	; (800bd74 <canresp_delete_logfile+0x3c>)
 800bd58:	f7fb fbfc 	bl	8007554 <f_unlink>
		f_mount(NULL, "", 0); /* Unmount */
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4903      	ldr	r1, [pc, #12]	; (800bd6c <canresp_delete_logfile+0x34>)
 800bd60:	2000      	movs	r0, #0
 800bd62:	f7fa ff9d 	bl	8006ca0 <f_mount>
	}
}
 800bd66:	bf00      	nop
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	0800ce24 	.word	0x0800ce24
 800bd70:	2000096c 	.word	0x2000096c
 800bd74:	0800ce78 	.word	0x0800ce78

0800bd78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800bd78:	b480      	push	{r7}
 800bd7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800bd7c:	bf00      	nop
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <_ZNSt4pairIhhEC1IiiLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bda8:	68b8      	ldr	r0, [r7, #8]
 800bdaa:	f7ff ffec 	bl	800bd86 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	701a      	strb	r2, [r3, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff ffe4 	bl	800bd86 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	705a      	strb	r2, [r3, #1]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <_ZSt5beginISt5arrayIS0_IhLj8EELj12EEEDTcldtfp_5beginEERT_>:
    begin(_Container& __cont) -> decltype(__cont.begin())
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
    { return __cont.begin(); }
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f9f5 	bl	800c1ca <_ZNSt5arrayIS_IhLj8EELj12EE5beginEv>
 800bde0:	4603      	mov	r3, r0
 800bde2:	4618      	mov	r0, r3
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <_ZSt3endISt5arrayIS0_IhLj8EELj12EEEDTcldtfp_3endEERT_>:
    end(_Container& __cont) -> decltype(__cont.end())
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b082      	sub	sp, #8
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
    { return __cont.end(); }
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f9f5 	bl	800c1e2 <_ZNSt5arrayIS_IhLj8EELj12EE3endEv>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <_ZSt19__iterator_categoryIPSt5arrayIhLj8EEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 800be02:	b480      	push	{r7}
 800be04:	b083      	sub	sp, #12
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <_ZSt7reverseIPSt5arrayIhLj8EEEvT_S3_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 800be16:	b5b0      	push	{r4, r5, r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 800be20:	687c      	ldr	r4, [r7, #4]
 800be22:	1d3b      	adds	r3, r7, #4
 800be24:	4618      	mov	r0, r3
 800be26:	f7ff ffec 	bl	800be02 <_ZSt19__iterator_categoryIPSt5arrayIhLj8EEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 800be2a:	462a      	mov	r2, r5
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f9e4 	bl	800c1fc <_ZSt9__reverseIPSt5arrayIhLj8EEEvT_S3_St26random_access_iterator_tag>
    }
 800be34:	bf00      	nop
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bdb0      	pop	{r4, r5, r7, pc}

0800be3c <_ZN7LTC681113WriteRegisterIhEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>:
uint8_t WriteRegister(LTC6811Command const& command, LTC6811Register<T>& reg) {
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
	return WriteRegister(command, gsl::as_bytes(span(reg)));
 800be48:	f107 0310 	add.w	r3, r7, #16
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe fc9c 	bl	800a78c <_Z4spanIhEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 800be54:	f107 0018 	add.w	r0, r7, #24
 800be58:	f107 0310 	add.w	r3, r7, #16
 800be5c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800be60:	f7fd f988 	bl	8009174 <_ZN3gsl8as_bytesIhLj4294967295EEENS_4spanIKNS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS6_XT0_EEE>
 800be64:	f107 0318 	add.w	r3, r7, #24
 800be68:	cb0c      	ldmia	r3, {r2, r3}
 800be6a:	68b9      	ldr	r1, [r7, #8]
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f7fe fbb5 	bl	800a5dc <_ZN7LTC681113WriteRegisterERKSt5arrayIhLj4EEN3gsl4spanIKNS4_4byteELj4294967295EEE>
 800be72:	4603      	mov	r3, r0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3720      	adds	r7, #32
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <_ZN7LTC681112ReadRegisterIhEEhRKSt5arrayIhLj4EERS1_IS1_IT_XdvL_ZL17kBytesPerRegisterEstS5_EELj12EE>:
uint8_t ReadRegister(LTC6811Command const& command, LTC6811Register<T>& reg) {
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
	return ReadRegister(command, gsl::as_writable_bytes(span(reg)));
 800be88:	f107 0310 	add.w	r3, r7, #16
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fc7c 	bl	800a78c <_Z4spanIhEDaRSt5arrayIS0_IT_XdvL_ZL17kBytesPerRegisterEstS1_EELj12EE>
 800be94:	f107 0018 	add.w	r0, r7, #24
 800be98:	f107 0310 	add.w	r3, r7, #16
 800be9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bea0:	f000 f892 	bl	800bfc8 <_ZN3gsl17as_writable_bytesIhLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>
 800bea4:	f107 0318 	add.w	r3, r7, #24
 800bea8:	cb0c      	ldmia	r3, {r2, r3}
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7fc fa15 	bl	80082dc <_ZN7LTC681112ReadRegisterERKSt5arrayIhLj4EEN3gsl4spanINS4_4byteELj4294967295EEE>
 800beb2:	4603      	mov	r3, r0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <_ZNKSt5arrayIS_IhLj8EELj12EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	230c      	movs	r3, #12
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <_ZNSt5arrayIS_IhLj8EELj12EE4fillERKS0_>:
      fill(const value_type& __u)
 800bed2:	b590      	push	{r4, r7, lr}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f974 	bl	800c1ca <_ZNSt5arrayIS_IhLj8EELj12EE5beginEv>
 800bee2:	4604      	mov	r4, r0
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff ffe9 	bl	800bebc <_ZNKSt5arrayIS_IhLj8EELj12EE4sizeEv>
 800beea:	4603      	mov	r3, r0
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	4619      	mov	r1, r3
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 f9a3 	bl	800c23c <_ZSt6fill_nIPSt5arrayIhLj8EEjS1_ET_S3_T0_RKT1_>
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	bd90      	pop	{r4, r7, pc}

0800befe <_ZNSt5arrayIS_IhLj8EELj12EE4dataEv>:
      data() noexcept
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 f9ab 	bl	800c264 <_ZNSt14__array_traitsISt5arrayIhLj8EELj12EE6_S_ptrERA12_KS1_>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	4618      	mov	r0, r3
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <_ZNSt5arrayIhLj8EE4dataEv>:
      data() noexcept
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 f9a9 	bl	800c27a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPhT_>:
        constexpr storage_type(pointer data, OtherExtentType ext) : ExtentType(ext), data_(data)
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fc f95f 	bl	8008206 <_ZN3gsl7details11extent_typeILj4294967295EEC1Ej>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	605a      	str	r2, [r3, #4]
            Expects(ExtentType::size() != dynamic_extent);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fc f970 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5c:	bf14      	ite	ne
 800bf5e:	2301      	movne	r3, #1
 800bf60:	2300      	moveq	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPhT_+0x3a>
 800bf68:	f7fc f949 	bl	80081fe <_ZN3gsl7details9terminateEv>
            Expects(data || ExtentType::size() == 0);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bf14      	ite	ne
 800bf72:	2301      	movne	r3, #1
 800bf74:	2300      	moveq	r3, #0
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10d      	bne.n	800bf98 <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPhT_+0x66>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fc f959 	bl	8008236 <_ZNK3gsl7details11extent_typeILj4294967295EE4sizeEv>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bf0c      	ite	eq
 800bf8a:	2301      	moveq	r3, #1
 800bf8c:	2300      	movne	r3, #0
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPhT_+0x66>
 800bf94:	f7fc f933 	bl	80081fe <_ZN3gsl7details9terminateEv>
        }
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <_ZN3gsl4spanIhLj4294967295EEC1EPhS2_>:
    constexpr span(pointer firstElem, pointer lastElem) noexcept
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	60f8      	str	r0, [r7, #12]
 800bfaa:	60b9      	str	r1, [r7, #8]
 800bfac:	607a      	str	r2, [r7, #4]
        : storage_(firstElem, static_cast<std::size_t>(lastElem - firstElem))
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	68b9      	ldr	r1, [r7, #8]
 800bfba:	f7ff ffba 	bl	800bf32 <_ZN3gsl4spanIhLj4294967295EE12storage_typeINS_7details11extent_typeILj4294967295EEEEC1IjEEPhT_>
    }
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_ZN3gsl17as_writable_bytesIhLj4294967295ELi0EEENS_4spanINS_4byteEXsrNS_7details19calculate_byte_sizeIT_XT0_EEE5valueEEENS1_IS5_XT0_EEE>:
as_writable_bytes(span<ElementType, Extent> s) noexcept
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	1d3b      	adds	r3, r7, #4
 800bfd2:	e883 0006 	stmia.w	r3, {r1, r2}
    return {reinterpret_cast<byte*>(s.data()), s.size_bytes()};
 800bfd6:	1d3b      	adds	r3, r7, #4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fd f88b 	bl	80090f4 <_ZNK3gsl4spanIhLj4294967295EE4dataEv>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	1d3b      	adds	r3, r7, #4
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd f8ac 	bl	8009140 <_ZNK3gsl4spanIhLj4294967295EE10size_bytesEv>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	4621      	mov	r1, r4
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f7fd fc9e 	bl	8009930 <_ZN3gsl4spanINS_4byteELj4294967295EEC1EPS1_j>
}
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd90      	pop	{r4, r7, pc}

0800bffc <_ZNKSt5arrayIS_ItLj4EELj12EE5beginEv>:
      begin() const noexcept
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f943 	bl	800c290 <_ZNKSt5arrayIS_ItLj4EELj12EE4dataEv>
 800c00a:	4603      	mov	r3, r0
 800c00c:	4618      	mov	r0, r3
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <_ZNKSt5arrayIS_ItLj4EELj12EE3endEv>:
      end() const noexcept
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f937 	bl	800c290 <_ZNKSt5arrayIS_ItLj4EELj12EE4dataEv>
 800c022:	4603      	mov	r3, r0
 800c024:	3360      	adds	r3, #96	; 0x60
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <_ZNKSt5arrayItLj4EE5beginEv>:
      begin() const noexcept
 800c02e:	b580      	push	{r7, lr}
 800c030:	b082      	sub	sp, #8
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f937 	bl	800c2aa <_ZNKSt5arrayItLj4EE4dataEv>
 800c03c:	4603      	mov	r3, r0
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E_clIKtEEDaS8_>:
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
						if (voltage > status->min_voltage + LTC6811::kDelta)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E_clIKtEEDaS8_+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c05e:	3364      	adds	r3, #100	; 0x64
 800c060:	429a      	cmp	r2, r3
 800c062:	dd10      	ble.n	800c086 <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E_clIKtEEDaS8_+0x3e>
							DCCx |= 1 << cell_index;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	b21a      	sxth	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	4619      	mov	r1, r3
 800c074:	2301      	movs	r3, #1
 800c076:	408b      	lsls	r3, r1
 800c078:	b21b      	sxth	r3, r3
 800c07a:	4313      	orrs	r3, r2
 800c07c:	b21a      	sxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	b292      	uxth	r2, r2
 800c084:	801a      	strh	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
						++cell_index;
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	3201      	adds	r2, #1
 800c08e:	b2d2      	uxtb	r2, r2
 800c090:	701a      	strb	r2, [r3, #0]
					});
 800c092:	bf00      	nop
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20000710 	.word	0x20000710

0800c0a4 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_SA_SA_SD_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
 800c0b2:	61fb      	str	r3, [r7, #28]
      for (; __first != __last; ++__first)
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d009      	beq.n	800c0d0 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_SA_SA_SD_+0x2c>
	__f(*__first);
 800c0bc:	f107 031c 	add.w	r3, r7, #28
 800c0c0:	68b9      	ldr	r1, [r7, #8]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff ffc0 	bl	800c048 <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E_clIKtEEDaS8_>
      for (; __first != __last; ++__first)
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	3302      	adds	r3, #2
 800c0cc:	60bb      	str	r3, [r7, #8]
 800c0ce:	e7f1      	b.n	800c0b4 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E_ET0_SA_SA_SD_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f107 031c 	add.w	r3, r7, #28
 800c0d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0dc:	e882 0003 	stmia.w	r2, {r0, r1}
    }
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0ea:	b002      	add	sp, #8
 800c0ec:	4770      	bx	lr

0800c0ee <_ZNSt5arrayIS_IhLj8EELj12EEixEj>:
      operator[](size_type __n) noexcept
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f8e1 	bl	800c2c4 <_ZNSt14__array_traitsISt5arrayIhLj8EELj12EE6_S_refERA12_KS1_j>
 800c102:	4603      	mov	r3, r0
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <_ZNSt5arrayIhLj8EEixEj>:
      operator[](size_type __n) noexcept
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f8e1 	bl	800c2e2 <_ZNSt14__array_traitsIhLj8EE6_S_refERA8_Khj>
 800c120:	4603      	mov	r3, r0
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E0_clIKtEEDaS8_>:
					std::for_each(ic.begin(), ic.begin() + LTC6811::kCellsInReg, [&](auto& voltage) {
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	6039      	str	r1, [r7, #0]
						if (voltage > avg_cell + LTC6811::kDelta)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	461a      	mov	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	3364      	adds	r3, #100	; 0x64
 800c142:	429a      	cmp	r2, r3
 800c144:	dd10      	ble.n	800c168 <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E0_clIKtEEDaS8_+0x3e>
							DCCx |= 1 << cell_index;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	b21a      	sxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	4619      	mov	r1, r3
 800c156:	2301      	movs	r3, #1
 800c158:	408b      	lsls	r3, r1
 800c15a:	b21b      	sxth	r3, r3
 800c15c:	4313      	orrs	r3, r2
 800c15e:	b21a      	sxth	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	b292      	uxth	r2, r2
 800c166:	801a      	strh	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689b      	ldr	r3, [r3, #8]
						++cell_index;
 800c16c:	781a      	ldrb	r2, [r3, #0]
 800c16e:	3201      	adds	r2, #1
 800c170:	b2d2      	uxtb	r2, r2
 800c172:	701a      	strb	r2, [r3, #0]
					});
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E0_ET0_SA_SA_SD_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800c180:	b082      	sub	sp, #8
 800c182:	b590      	push	{r4, r7, lr}
 800c184:	b085      	sub	sp, #20
 800c186:	af00      	add	r7, sp, #0
 800c188:	60f8      	str	r0, [r7, #12]
 800c18a:	60b9      	str	r1, [r7, #8]
 800c18c:	607a      	str	r2, [r7, #4]
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
      for (; __first != __last; ++__first)
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	429a      	cmp	r2, r3
 800c196:	d009      	beq.n	800c1ac <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E0_ET0_SA_SA_SD_+0x2c>
	__f(*__first);
 800c198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c19c:	68b9      	ldr	r1, [r7, #8]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff ffc3 	bl	800c12a <_ZZ20BuildDischargeConfigRSt5arrayIS_IhLj8EELj12EES2_RS_IS_IS_ItLj4EELj12EELj4EEENKUlRT_E0_clIKtEEDaS8_>
      for (; __first != __last; ++__first)
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	3302      	adds	r3, #2
 800c1a8:	60bb      	str	r3, [r7, #8]
 800c1aa:	e7f1      	b.n	800c190 <_ZSt8for_eachIPKtZ20BuildDischargeConfigRSt5arrayIS2_IhLj8EELj12EES5_RS2_IS2_IS2_ItLj4EELj12EELj4EEEUlRT_E0_ET0_SA_SA_SD_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	461c      	mov	r4, r3
 800c1b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	3714      	adds	r7, #20
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800c1c6:	b002      	add	sp, #8
 800c1c8:	4770      	bx	lr

0800c1ca <_ZNSt5arrayIS_IhLj8EELj12EE5beginEv>:
      begin() noexcept
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff fe93 	bl	800befe <_ZNSt5arrayIS_IhLj8EELj12EE4dataEv>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <_ZNSt5arrayIS_IhLj8EELj12EE3endEv>:
      end() noexcept
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff fe87 	bl	800befe <_ZNSt5arrayIS_IhLj8EELj12EE4dataEv>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	3360      	adds	r3, #96	; 0x60
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_ZSt9__reverseIPSt5arrayIhLj8EEEvT_S3_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d011      	beq.n	800c234 <_ZSt9__reverseIPSt5arrayIhLj8EEEvT_S3_St26random_access_iterator_tag+0x38>
      --__last;
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	3b08      	subs	r3, #8
 800c214:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d20b      	bcs.n	800c236 <_ZSt9__reverseIPSt5arrayIhLj8EEEvT_S3_St26random_access_iterator_tag+0x3a>
	  std::iter_swap(__first, __last);
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 f86c 	bl	800c2fe <_ZSt9iter_swapIPSt5arrayIhLj8EES2_EvT_T0_>
	  ++__first;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3308      	adds	r3, #8
 800c22a:	60fb      	str	r3, [r7, #12]
	  --__last;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	3b08      	subs	r3, #8
 800c230:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800c232:	e7f0      	b.n	800c216 <_ZSt9__reverseIPSt5arrayIhLj8EEEvT_S3_St26random_access_iterator_tag+0x1a>
	return;
 800c234:	bf00      	nop
    }
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZSt6fill_nIPSt5arrayIhLj8EEjS1_ET_S3_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f865 	bl	800c318 <_ZSt12__niter_baseIPSt5arrayIhLj8EEET_S3_>
 800c24e:	4603      	mov	r3, r0
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	4618      	mov	r0, r3
 800c256:	f000 f86a 	bl	800c32e <_ZSt10__fill_n_aIPSt5arrayIhLj8EEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_>
 800c25a:	4603      	mov	r3, r0
    }
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <_ZNSt14__array_traitsISt5arrayIhLj8EELj12EE6_S_ptrERA12_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <_ZNKSt5arrayIS_ItLj4EELj12EE4dataEv>:
      data() const noexcept
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fd fb64 	bl	8009968 <_ZNSt14__array_traitsISt5arrayItLj4EELj12EE6_S_ptrERA12_KS1_>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZNKSt5arrayItLj4EE4dataEv>:
      data() const noexcept
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7fd fb62 	bl	800997e <_ZNSt14__array_traitsItLj4EE6_S_ptrERA4_Kt>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <_ZNSt14__array_traitsISt5arrayIhLj8EELj12EE6_S_refERA12_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <_ZNSt14__array_traitsIhLj8EE6_S_refERA8_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800c2e2:	b480      	push	{r7}
 800c2e4:	b083      	sub	sp, #12
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <_ZSt9iter_swapIPSt5arrayIhLj8EES2_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f82e 	bl	800c36c <_ZSt4swapIhLj8EENSt9enable_ifIXsrNSt14__array_traitsIT_XT0_EE13_Is_swappableE5valueEvE4typeERSt5arrayIS2_XT0_EES9_>
    }
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <_ZSt12__niter_baseIPSt5arrayIhLj8EEET_S3_>:
    __niter_base(_Iterator __it)
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <_ZSt10__fill_n_aIPSt5arrayIhLj8EEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 800c32e:	b480      	push	{r7}
 800c330:	b087      	sub	sp, #28
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
      for (__decltype(__n + 0) __niter = __n;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00c      	beq.n	800c35e <_ZSt10__fill_n_aIPSt5arrayIhLj8EEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_+0x30>
	*__first = __value;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	6811      	ldr	r1, [r2, #0]
 800c34a:	6852      	ldr	r2, [r2, #4]
 800c34c:	6019      	str	r1, [r3, #0]
 800c34e:	605a      	str	r2, [r3, #4]
      for (__decltype(__n + 0) __niter = __n;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	3b01      	subs	r3, #1
 800c354:	617b      	str	r3, [r7, #20]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	3308      	adds	r3, #8
 800c35a:	60fb      	str	r3, [r7, #12]
 800c35c:	e7ef      	b.n	800c33e <_ZSt10__fill_n_aIPSt5arrayIhLj8EEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_+0x10>
      return __first;
 800c35e:	68fb      	ldr	r3, [r7, #12]
    }
 800c360:	4618      	mov	r0, r3
 800c362:	371c      	adds	r7, #28
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <_ZSt4swapIhLj8EENSt9enable_ifIXsrNSt14__array_traitsIT_XT0_EE13_Is_swappableE5valueEvE4typeERSt5arrayIS2_XT0_EES9_>:
      _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type
#else
    void
#endif
    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f804 	bl	800c386 <_ZNSt5arrayIhLj8EE4swapERS0_>
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <_ZNSt5arrayIhLj8EE4swapERS0_>:
      swap(array& __other)
 800c386:	b5b0      	push	{r4, r5, r7, lr}
 800c388:	b082      	sub	sp, #8
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
      { std::swap_ranges(begin(), end(), __other.begin()); }
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f812 	bl	800c3ba <_ZNSt5arrayIhLj8EE5beginEv>
 800c396:	4604      	mov	r4, r0
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f81a 	bl	800c3d2 <_ZNSt5arrayIhLj8EE3endEv>
 800c39e:	4605      	mov	r5, r0
 800c3a0:	6838      	ldr	r0, [r7, #0]
 800c3a2:	f000 f80a 	bl	800c3ba <_ZNSt5arrayIhLj8EE5beginEv>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 f81d 	bl	800c3ec <_ZSt11swap_rangesIPhS0_ET0_T_S2_S1_>
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bdb0      	pop	{r4, r5, r7, pc}

0800c3ba <_ZNSt5arrayIhLj8EE5beginEv>:
      begin() noexcept
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff fda8 	bl	800bf18 <_ZNSt5arrayIhLj8EE4dataEv>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <_ZNSt5arrayIhLj8EE3endEv>:
      end() noexcept
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7ff fd9c 	bl	800bf18 <_ZNSt5arrayIhLj8EE4dataEv>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <_ZSt11swap_rangesIPhS0_ET0_T_S2_S1_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d00a      	beq.n	800c416 <_ZSt11swap_rangesIPhS0_ET0_T_S2_S1_+0x2a>
	std::iter_swap(__first1, __first2);
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 f80c 	bl	800c420 <_ZSt9iter_swapIPhS0_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3301      	adds	r3, #1
 800c40c:	60fb      	str	r3, [r7, #12]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3301      	adds	r3, #1
 800c412:	607b      	str	r3, [r7, #4]
 800c414:	e7f0      	b.n	800c3f8 <_ZSt11swap_rangesIPhS0_ET0_T_S2_S1_+0xc>
      return __first2;
 800c416:	687b      	ldr	r3, [r7, #4]
    }
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZSt9iter_swapIPhS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f80f 	bl	800c450 <_ZSt4swapIhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <_ZSt4swapIhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ffed 	bl	800c43a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800c460:	4603      	mov	r3, r0
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800c466:	6838      	ldr	r0, [r7, #0]
 800c468:	f7ff ffe7 	bl	800c43a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800c46c:	4603      	mov	r3, r0
 800c46e:	781a      	ldrb	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c474:	f107 030f 	add.w	r3, r7, #15
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff ffde 	bl	800c43a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800c47e:	4603      	mov	r3, r0
 800c480:	781a      	ldrb	r2, [r3, #0]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	701a      	strb	r2, [r3, #0]
    }
 800c486:	bf00      	nop
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c49a:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <SD_CheckStatus+0x38>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c4a0:	f7fd fc8e 	bl	8009dc0 <BSP_SD_GetCardState>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d107      	bne.n	800c4ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c4aa:	4b07      	ldr	r3, [pc, #28]	; (800c4c8 <SD_CheckStatus+0x38>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	f023 0301 	bic.w	r3, r3, #1
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <SD_CheckStatus+0x38>)
 800c4b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c4ba:	4b03      	ldr	r3, [pc, #12]	; (800c4c8 <SD_CheckStatus+0x38>)
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	b2db      	uxtb	r3, r3
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20000208 	.word	0x20000208

0800c4cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800c4d6:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <SD_initialize+0x38>)
 800c4d8:	2201      	movs	r2, #1
 800c4da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c4dc:	f7fd fc0e 	bl	8009cfc <BSP_SD_Init>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d107      	bne.n	800c4f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7ff ffd1 	bl	800c490 <SD_CheckStatus>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4b04      	ldr	r3, [pc, #16]	; (800c504 <SD_initialize+0x38>)
 800c4f4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800c4f6:	4b03      	ldr	r3, [pc, #12]	; (800c504 <SD_initialize+0x38>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b2db      	uxtb	r3, r3
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	20000208 	.word	0x20000208

0800c508 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff ffbb 	bl	800c490 <SD_CheckStatus>
 800c51a:	4603      	mov	r3, r0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	607a      	str	r2, [r7, #4]
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c538:	f04f 33ff 	mov.w	r3, #4294967295
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	68b8      	ldr	r0, [r7, #8]
 800c542:	f7fd fc01 	bl	8009d48 <BSP_SD_ReadBlocks>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d107      	bne.n	800c55c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c54c:	bf00      	nop
 800c54e:	f7fd fc37 	bl	8009dc0 <BSP_SD_GetCardState>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1fa      	bne.n	800c54e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b086      	sub	sp, #24
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c57a:	f04f 33ff 	mov.w	r3, #4294967295
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	6879      	ldr	r1, [r7, #4]
 800c582:	68b8      	ldr	r0, [r7, #8]
 800c584:	f7fd fbfe 	bl	8009d84 <BSP_SD_WriteBlocks>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d107      	bne.n	800c59e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c58e:	bf00      	nop
 800c590:	f7fd fc16 	bl	8009dc0 <BSP_SD_GetCardState>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1fa      	bne.n	800c590 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08c      	sub	sp, #48	; 0x30
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	603a      	str	r2, [r7, #0]
 800c5b2:	71fb      	strb	r3, [r7, #7]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c5be:	4b25      	ldr	r3, [pc, #148]	; (800c654 <SD_ioctl+0xac>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <SD_ioctl+0x28>
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e03c      	b.n	800c64a <SD_ioctl+0xa2>

  switch (cmd)
 800c5d0:	79bb      	ldrb	r3, [r7, #6]
 800c5d2:	2b03      	cmp	r3, #3
 800c5d4:	d834      	bhi.n	800c640 <SD_ioctl+0x98>
 800c5d6:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <SD_ioctl+0x34>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c5ed 	.word	0x0800c5ed
 800c5e0:	0800c5f5 	.word	0x0800c5f5
 800c5e4:	0800c60d 	.word	0x0800c60d
 800c5e8:	0800c627 	.word	0x0800c627
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c5f2:	e028      	b.n	800c646 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c5f4:	f107 030c 	add.w	r3, r7, #12
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fd fbf1 	bl	8009de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c60a:	e01c      	b.n	800c646 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c60c:	f107 030c 	add.w	r3, r7, #12
 800c610:	4618      	mov	r0, r3
 800c612:	f7fd fbe5 	bl	8009de0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	b29a      	uxth	r2, r3
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c624:	e00f      	b.n	800c646 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c626:	f107 030c 	add.w	r3, r7, #12
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fd fbd8 	bl	8009de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	0a5a      	lsrs	r2, r3, #9
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c63e:	e002      	b.n	800c646 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c640:	2304      	movs	r3, #4
 800c642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3730      	adds	r7, #48	; 0x30
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20000208 	.word	0x20000208

0800c658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c65e:	2300      	movs	r3, #0
 800c660:	607b      	str	r3, [r7, #4]
 800c662:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c666:	4a0f      	ldr	r2, [pc, #60]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c66c:	6453      	str	r3, [r2, #68]	; 0x44
 800c66e:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c676:	607b      	str	r3, [r7, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c67a:	2300      	movs	r3, #0
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c682:	4a08      	ldr	r2, [pc, #32]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c688:	6413      	str	r3, [r2, #64]	; 0x40
 800c68a:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <HAL_MspInit+0x4c>)
 800c68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	40023800 	.word	0x40023800

0800c6a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6b0:	f107 031c 	add.w	r3, r7, #28
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	605a      	str	r2, [r3, #4]
 800c6ba:	609a      	str	r2, [r3, #8]
 800c6bc:	60da      	str	r2, [r3, #12]
 800c6be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a4b      	ldr	r2, [pc, #300]	; (800c7f4 <HAL_CAN_MspInit+0x14c>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d13e      	bne.n	800c748 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800c6ca:	4b4b      	ldr	r3, [pc, #300]	; (800c7f8 <HAL_CAN_MspInit+0x150>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	4a49      	ldr	r2, [pc, #292]	; (800c7f8 <HAL_CAN_MspInit+0x150>)
 800c6d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800c6d4:	4b48      	ldr	r3, [pc, #288]	; (800c7f8 <HAL_CAN_MspInit+0x150>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d10d      	bne.n	800c6f8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800c6dc:	2300      	movs	r3, #0
 800c6de:	61bb      	str	r3, [r7, #24]
 800c6e0:	4b46      	ldr	r3, [pc, #280]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e4:	4a45      	ldr	r2, [pc, #276]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c6e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c6ea:	6413      	str	r3, [r2, #64]	; 0x40
 800c6ec:	4b43      	ldr	r3, [pc, #268]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f4:	61bb      	str	r3, [r7, #24]
 800c6f6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	4b3f      	ldr	r3, [pc, #252]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c700:	4a3e      	ldr	r2, [pc, #248]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c702:	f043 0301 	orr.w	r3, r3, #1
 800c706:	6313      	str	r3, [r2, #48]	; 0x30
 800c708:	4b3c      	ldr	r3, [pc, #240]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	617b      	str	r3, [r7, #20]
 800c712:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c714:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c71a:	2302      	movs	r3, #2
 800c71c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c71e:	2300      	movs	r3, #0
 800c720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c722:	2303      	movs	r3, #3
 800c724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800c726:	2309      	movs	r3, #9
 800c728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c72a:	f107 031c 	add.w	r3, r7, #28
 800c72e:	4619      	mov	r1, r3
 800c730:	4833      	ldr	r0, [pc, #204]	; (800c800 <HAL_CAN_MspInit+0x158>)
 800c732:	f7f4 fee1 	bl	80014f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800c736:	2200      	movs	r2, #0
 800c738:	2100      	movs	r1, #0
 800c73a:	2014      	movs	r0, #20
 800c73c:	f7f4 fea5 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800c740:	2014      	movs	r0, #20
 800c742:	f7f4 febe 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800c746:	e050      	b.n	800c7ea <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a2d      	ldr	r2, [pc, #180]	; (800c804 <HAL_CAN_MspInit+0x15c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d14b      	bne.n	800c7ea <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800c752:	2300      	movs	r3, #0
 800c754:	613b      	str	r3, [r7, #16]
 800c756:	4b29      	ldr	r3, [pc, #164]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	4a28      	ldr	r2, [pc, #160]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c75c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c760:	6413      	str	r3, [r2, #64]	; 0x40
 800c762:	4b26      	ldr	r3, [pc, #152]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c76a:	613b      	str	r3, [r7, #16]
 800c76c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800c76e:	4b22      	ldr	r3, [pc, #136]	; (800c7f8 <HAL_CAN_MspInit+0x150>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	4a20      	ldr	r2, [pc, #128]	; (800c7f8 <HAL_CAN_MspInit+0x150>)
 800c776:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800c778:	4b1f      	ldr	r3, [pc, #124]	; (800c7f8 <HAL_CAN_MspInit+0x150>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d10d      	bne.n	800c79c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800c780:	2300      	movs	r3, #0
 800c782:	60fb      	str	r3, [r7, #12]
 800c784:	4b1d      	ldr	r3, [pc, #116]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c788:	4a1c      	ldr	r2, [pc, #112]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c78a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c78e:	6413      	str	r3, [r2, #64]	; 0x40
 800c790:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c798:	60fb      	str	r3, [r7, #12]
 800c79a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c79c:	2300      	movs	r3, #0
 800c79e:	60bb      	str	r3, [r7, #8]
 800c7a0:	4b16      	ldr	r3, [pc, #88]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a4:	4a15      	ldr	r2, [pc, #84]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c7a6:	f043 0302 	orr.w	r3, r3, #2
 800c7aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c7ac:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <HAL_CAN_MspInit+0x154>)
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	60bb      	str	r3, [r7, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800c7b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c7bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7be:	2302      	movs	r3, #2
 800c7c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800c7ca:	2309      	movs	r3, #9
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7ce:	f107 031c 	add.w	r3, r7, #28
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	480c      	ldr	r0, [pc, #48]	; (800c808 <HAL_CAN_MspInit+0x160>)
 800c7d6:	f7f4 fe8f 	bl	80014f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2100      	movs	r1, #0
 800c7de:	2041      	movs	r0, #65	; 0x41
 800c7e0:	f7f4 fe53 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800c7e4:	2041      	movs	r0, #65	; 0x41
 800c7e6:	f7f4 fe6c 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 800c7ea:	bf00      	nop
 800c7ec:	3730      	adds	r7, #48	; 0x30
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	40006400 	.word	0x40006400
 800c7f8:	2000071c 	.word	0x2000071c
 800c7fc:	40023800 	.word	0x40023800
 800c800:	40020000 	.word	0x40020000
 800c804:	40006800 	.word	0x40006800
 800c808:	40020400 	.word	0x40020400

0800c80c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08a      	sub	sp, #40	; 0x28
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c814:	f107 0314 	add.w	r3, r7, #20
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	605a      	str	r2, [r3, #4]
 800c81e:	609a      	str	r2, [r3, #8]
 800c820:	60da      	str	r2, [r3, #12]
 800c822:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a28      	ldr	r2, [pc, #160]	; (800c8cc <HAL_SD_MspInit+0xc0>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d14a      	bne.n	800c8c4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800c82e:	2300      	movs	r3, #0
 800c830:	613b      	str	r3, [r7, #16]
 800c832:	4b27      	ldr	r3, [pc, #156]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c836:	4a26      	ldr	r2, [pc, #152]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c83c:	6453      	str	r3, [r2, #68]	; 0x44
 800c83e:	4b24      	ldr	r3, [pc, #144]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c846:	613b      	str	r3, [r7, #16]
 800c848:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c84a:	2300      	movs	r3, #0
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	4b20      	ldr	r3, [pc, #128]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c852:	4a1f      	ldr	r2, [pc, #124]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c854:	f043 0304 	orr.w	r3, r3, #4
 800c858:	6313      	str	r3, [r2, #48]	; 0x30
 800c85a:	4b1d      	ldr	r3, [pc, #116]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c866:	2300      	movs	r3, #0
 800c868:	60bb      	str	r3, [r7, #8]
 800c86a:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86e:	4a18      	ldr	r2, [pc, #96]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c870:	f043 0308 	orr.w	r3, r3, #8
 800c874:	6313      	str	r3, [r2, #48]	; 0x30
 800c876:	4b16      	ldr	r3, [pc, #88]	; (800c8d0 <HAL_SD_MspInit+0xc4>)
 800c878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87a:	f003 0308 	and.w	r3, r3, #8
 800c87e:	60bb      	str	r3, [r7, #8]
 800c880:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800c882:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800c886:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c888:	2302      	movs	r3, #2
 800c88a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c88c:	2300      	movs	r3, #0
 800c88e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c890:	2303      	movs	r3, #3
 800c892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c894:	230c      	movs	r3, #12
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c898:	f107 0314 	add.w	r3, r7, #20
 800c89c:	4619      	mov	r1, r3
 800c89e:	480d      	ldr	r0, [pc, #52]	; (800c8d4 <HAL_SD_MspInit+0xc8>)
 800c8a0:	f7f4 fe2a 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c8a4:	2304      	movs	r3, #4
 800c8a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c8b4:	230c      	movs	r3, #12
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c8b8:	f107 0314 	add.w	r3, r7, #20
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4806      	ldr	r0, [pc, #24]	; (800c8d8 <HAL_SD_MspInit+0xcc>)
 800c8c0:	f7f4 fe1a 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800c8c4:	bf00      	nop
 800c8c6:	3728      	adds	r7, #40	; 0x28
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	40012c00 	.word	0x40012c00
 800c8d0:	40023800 	.word	0x40023800
 800c8d4:	40020800 	.word	0x40020800
 800c8d8:	40020c00 	.word	0x40020c00

0800c8dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8e4:	f107 0314 	add.w	r3, r7, #20
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	605a      	str	r2, [r3, #4]
 800c8ee:	609a      	str	r2, [r3, #8]
 800c8f0:	60da      	str	r2, [r3, #12]
 800c8f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a28      	ldr	r2, [pc, #160]	; (800c99c <HAL_SPI_MspInit+0xc0>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d149      	bne.n	800c992 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c8fe:	2300      	movs	r3, #0
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	4b27      	ldr	r3, [pc, #156]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c906:	4a26      	ldr	r2, [pc, #152]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c90c:	6453      	str	r3, [r2, #68]	; 0x44
 800c90e:	4b24      	ldr	r3, [pc, #144]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c916:	613b      	str	r3, [r7, #16]
 800c918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
 800c91e:	4b20      	ldr	r3, [pc, #128]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c922:	4a1f      	ldr	r2, [pc, #124]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c924:	f043 0301 	orr.w	r3, r3, #1
 800c928:	6313      	str	r3, [r2, #48]	; 0x30
 800c92a:	4b1d      	ldr	r3, [pc, #116]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
 800c93a:	4b19      	ldr	r3, [pc, #100]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93e:	4a18      	ldr	r2, [pc, #96]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c940:	f043 0302 	orr.w	r3, r3, #2
 800c944:	6313      	str	r3, [r2, #48]	; 0x30
 800c946:	4b16      	ldr	r3, [pc, #88]	; (800c9a0 <HAL_SPI_MspInit+0xc4>)
 800c948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	60bb      	str	r3, [r7, #8]
 800c950:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c952:	2310      	movs	r3, #16
 800c954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c956:	2302      	movs	r3, #2
 800c958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c95e:	2303      	movs	r3, #3
 800c960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c962:	2305      	movs	r3, #5
 800c964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c966:	f107 0314 	add.w	r3, r7, #20
 800c96a:	4619      	mov	r1, r3
 800c96c:	480d      	ldr	r0, [pc, #52]	; (800c9a4 <HAL_SPI_MspInit+0xc8>)
 800c96e:	f7f4 fdc3 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800c972:	2338      	movs	r3, #56	; 0x38
 800c974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c976:	2302      	movs	r3, #2
 800c978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c97e:	2303      	movs	r3, #3
 800c980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c982:	2305      	movs	r3, #5
 800c984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c986:	f107 0314 	add.w	r3, r7, #20
 800c98a:	4619      	mov	r1, r3
 800c98c:	4806      	ldr	r0, [pc, #24]	; (800c9a8 <HAL_SPI_MspInit+0xcc>)
 800c98e:	f7f4 fdb3 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800c992:	bf00      	nop
 800c994:	3728      	adds	r7, #40	; 0x28
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	40013000 	.word	0x40013000
 800c9a0:	40023800 	.word	0x40023800
 800c9a4:	40020000 	.word	0x40020000
 800c9a8:	40020400 	.word	0x40020400

0800c9ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c9b0:	bf00      	nop
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c9be:	e7fe      	b.n	800c9be <HardFault_Handler+0x4>

0800c9c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c9c4:	e7fe      	b.n	800c9c4 <MemManage_Handler+0x4>

0800c9c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c9ca:	e7fe      	b.n	800c9ca <BusFault_Handler+0x4>

0800c9cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c9d0:	e7fe      	b.n	800c9d0 <UsageFault_Handler+0x4>

0800c9d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c9d6:	bf00      	nop
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c9e4:	bf00      	nop
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c9f2:	bf00      	nop
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ca00:	f7f3 fdd2 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ca04:	bf00      	nop
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ca0c:	4802      	ldr	r0, [pc, #8]	; (800ca18 <CAN1_RX0_IRQHandler+0x10>)
 800ca0e:	f7f4 fa41 	bl	8000e94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800ca12:	bf00      	nop
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	200002c8 	.word	0x200002c8

0800ca1c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800ca20:	4802      	ldr	r0, [pc, #8]	; (800ca2c <CAN2_RX1_IRQHandler+0x10>)
 800ca22:	f7f4 fa37 	bl	8000e94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800ca26:	bf00      	nop
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200002f0 	.word	0x200002f0

0800ca30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0
	return 1;
 800ca34:	2301      	movs	r3, #1
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <_kill>:

int _kill(int pid, int sig)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ca4a:	f000 f8cf 	bl	800cbec <__errno>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	2316      	movs	r3, #22
 800ca52:	6013      	str	r3, [r2, #0]
	return -1;
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <_exit>:

void _exit (int status)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ca68:	f04f 31ff 	mov.w	r1, #4294967295
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7ff ffe7 	bl	800ca40 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ca72:	e7fe      	b.n	800ca72 <_exit+0x12>

0800ca74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ca7c:	4b11      	ldr	r3, [pc, #68]	; (800cac4 <_sbrk+0x50>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <_sbrk+0x16>
		heap_end = &end;
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <_sbrk+0x50>)
 800ca86:	4a10      	ldr	r2, [pc, #64]	; (800cac8 <_sbrk+0x54>)
 800ca88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ca8a:	4b0e      	ldr	r3, [pc, #56]	; (800cac4 <_sbrk+0x50>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <_sbrk+0x50>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4413      	add	r3, r2
 800ca98:	466a      	mov	r2, sp
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d907      	bls.n	800caae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ca9e:	f000 f8a5 	bl	800cbec <__errno>
 800caa2:	4602      	mov	r2, r0
 800caa4:	230c      	movs	r3, #12
 800caa6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800caa8:	f04f 33ff 	mov.w	r3, #4294967295
 800caac:	e006      	b.n	800cabc <_sbrk+0x48>
	}

	heap_end += incr;
 800caae:	4b05      	ldr	r3, [pc, #20]	; (800cac4 <_sbrk+0x50>)
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4413      	add	r3, r2
 800cab6:	4a03      	ldr	r2, [pc, #12]	; (800cac4 <_sbrk+0x50>)
 800cab8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800caba:	68fb      	ldr	r3, [r7, #12]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20000720 	.word	0x20000720
 800cac8:	20000ba0 	.word	0x20000ba0

0800cacc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cad0:	4b16      	ldr	r3, [pc, #88]	; (800cb2c <SystemInit+0x60>)
 800cad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad6:	4a15      	ldr	r2, [pc, #84]	; (800cb2c <SystemInit+0x60>)
 800cad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cadc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cae0:	4b13      	ldr	r3, [pc, #76]	; (800cb30 <SystemInit+0x64>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a12      	ldr	r2, [pc, #72]	; (800cb30 <SystemInit+0x64>)
 800cae6:	f043 0301 	orr.w	r3, r3, #1
 800caea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800caec:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <SystemInit+0x64>)
 800caee:	2200      	movs	r2, #0
 800caf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800caf2:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <SystemInit+0x64>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a0e      	ldr	r2, [pc, #56]	; (800cb30 <SystemInit+0x64>)
 800caf8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800cafc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cb02:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <SystemInit+0x64>)
 800cb04:	4a0b      	ldr	r2, [pc, #44]	; (800cb34 <SystemInit+0x68>)
 800cb06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cb08:	4b09      	ldr	r3, [pc, #36]	; (800cb30 <SystemInit+0x64>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a08      	ldr	r2, [pc, #32]	; (800cb30 <SystemInit+0x64>)
 800cb0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cb14:	4b06      	ldr	r3, [pc, #24]	; (800cb30 <SystemInit+0x64>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cb1a:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <SystemInit+0x60>)
 800cb1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cb20:	609a      	str	r2, [r3, #8]
#endif
}
 800cb22:	bf00      	nop
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	e000ed00 	.word	0xe000ed00
 800cb30:	40023800 	.word	0x40023800
 800cb34:	24003010 	.word	0x24003010

0800cb38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cb38:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cb70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cb3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cb3e:	e003      	b.n	800cb48 <LoopCopyDataInit>

0800cb40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cb40:	4b0c      	ldr	r3, [pc, #48]	; (800cb74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cb42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cb44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cb46:	3104      	adds	r1, #4

0800cb48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cb48:	480b      	ldr	r0, [pc, #44]	; (800cb78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cb4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cb4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cb50:	d3f6      	bcc.n	800cb40 <CopyDataInit>
  ldr  r2, =_sbss
 800cb52:	4a0b      	ldr	r2, [pc, #44]	; (800cb80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cb54:	e002      	b.n	800cb5c <LoopFillZerobss>

0800cb56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cb56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cb58:	f842 3b04 	str.w	r3, [r2], #4

0800cb5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cb5c:	4b09      	ldr	r3, [pc, #36]	; (800cb84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cb5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cb60:	d3f9      	bcc.n	800cb56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cb62:	f7ff ffb3 	bl	800cacc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cb66:	f000 f847 	bl	800cbf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cb6a:	f7fd fe2f 	bl	800a7cc <main>
  bx  lr    
 800cb6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cb70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800cb74:	0800cf7c 	.word	0x0800cf7c
  ldr  r0, =_sdata
 800cb78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cb7c:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 800cb80:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 800cb84:	20000ba0 	.word	0x20000ba0

0800cb88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cb88:	e7fe      	b.n	800cb88 <ADC_IRQHandler>

0800cb8a <_Znwj>:
 800cb8a:	b510      	push	{r4, lr}
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	bf14      	ite	ne
 800cb90:	4604      	movne	r4, r0
 800cb92:	2401      	moveq	r4, #1
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 f853 	bl	800cc40 <malloc>
 800cb9a:	b930      	cbnz	r0, 800cbaa <_Znwj+0x20>
 800cb9c:	f000 f806 	bl	800cbac <_ZSt15get_new_handlerv>
 800cba0:	b908      	cbnz	r0, 800cba6 <_Znwj+0x1c>
 800cba2:	f000 f81c 	bl	800cbde <abort>
 800cba6:	4780      	blx	r0
 800cba8:	e7f4      	b.n	800cb94 <_Znwj+0xa>
 800cbaa:	bd10      	pop	{r4, pc}

0800cbac <_ZSt15get_new_handlerv>:
 800cbac:	4b02      	ldr	r3, [pc, #8]	; (800cbb8 <_ZSt15get_new_handlerv+0xc>)
 800cbae:	6818      	ldr	r0, [r3, #0]
 800cbb0:	f3bf 8f5b 	dmb	ish
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	20000724 	.word	0x20000724

0800cbbc <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cbbc:	b508      	push	{r3, lr}
 800cbbe:	4780      	blx	r0
 800cbc0:	f000 f80d 	bl	800cbde <abort>

0800cbc4 <_ZSt13get_terminatev>:
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <_ZSt13get_terminatev+0xc>)
 800cbc6:	6818      	ldr	r0, [r3, #0]
 800cbc8:	f3bf 8f5b 	dmb	ish
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	20000210 	.word	0x20000210

0800cbd4 <_ZSt9terminatev>:
 800cbd4:	b508      	push	{r3, lr}
 800cbd6:	f7ff fff5 	bl	800cbc4 <_ZSt13get_terminatev>
 800cbda:	f7ff ffef 	bl	800cbbc <_ZN10__cxxabiv111__terminateEPFvvE>

0800cbde <abort>:
 800cbde:	b508      	push	{r3, lr}
 800cbe0:	2006      	movs	r0, #6
 800cbe2:	f000 f8cf 	bl	800cd84 <raise>
 800cbe6:	2001      	movs	r0, #1
 800cbe8:	f7ff ff3a 	bl	800ca60 <_exit>

0800cbec <__errno>:
 800cbec:	4b01      	ldr	r3, [pc, #4]	; (800cbf4 <__errno+0x8>)
 800cbee:	6818      	ldr	r0, [r3, #0]
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	20000214 	.word	0x20000214

0800cbf8 <__libc_init_array>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	4e0d      	ldr	r6, [pc, #52]	; (800cc30 <__libc_init_array+0x38>)
 800cbfc:	4c0d      	ldr	r4, [pc, #52]	; (800cc34 <__libc_init_array+0x3c>)
 800cbfe:	1ba4      	subs	r4, r4, r6
 800cc00:	10a4      	asrs	r4, r4, #2
 800cc02:	2500      	movs	r5, #0
 800cc04:	42a5      	cmp	r5, r4
 800cc06:	d109      	bne.n	800cc1c <__libc_init_array+0x24>
 800cc08:	4e0b      	ldr	r6, [pc, #44]	; (800cc38 <__libc_init_array+0x40>)
 800cc0a:	4c0c      	ldr	r4, [pc, #48]	; (800cc3c <__libc_init_array+0x44>)
 800cc0c:	f000 f8d8 	bl	800cdc0 <_init>
 800cc10:	1ba4      	subs	r4, r4, r6
 800cc12:	10a4      	asrs	r4, r4, #2
 800cc14:	2500      	movs	r5, #0
 800cc16:	42a5      	cmp	r5, r4
 800cc18:	d105      	bne.n	800cc26 <__libc_init_array+0x2e>
 800cc1a:	bd70      	pop	{r4, r5, r6, pc}
 800cc1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc20:	4798      	blx	r3
 800cc22:	3501      	adds	r5, #1
 800cc24:	e7ee      	b.n	800cc04 <__libc_init_array+0xc>
 800cc26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc2a:	4798      	blx	r3
 800cc2c:	3501      	adds	r5, #1
 800cc2e:	e7f2      	b.n	800cc16 <__libc_init_array+0x1e>
 800cc30:	0800cf74 	.word	0x0800cf74
 800cc34:	0800cf74 	.word	0x0800cf74
 800cc38:	0800cf74 	.word	0x0800cf74
 800cc3c:	0800cf78 	.word	0x0800cf78

0800cc40 <malloc>:
 800cc40:	4b02      	ldr	r3, [pc, #8]	; (800cc4c <malloc+0xc>)
 800cc42:	4601      	mov	r1, r0
 800cc44:	6818      	ldr	r0, [r3, #0]
 800cc46:	f000 b80b 	b.w	800cc60 <_malloc_r>
 800cc4a:	bf00      	nop
 800cc4c:	20000214 	.word	0x20000214

0800cc50 <memset>:
 800cc50:	4402      	add	r2, r0
 800cc52:	4603      	mov	r3, r0
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d100      	bne.n	800cc5a <memset+0xa>
 800cc58:	4770      	bx	lr
 800cc5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5e:	e7f9      	b.n	800cc54 <memset+0x4>

0800cc60 <_malloc_r>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	1ccd      	adds	r5, r1, #3
 800cc64:	f025 0503 	bic.w	r5, r5, #3
 800cc68:	3508      	adds	r5, #8
 800cc6a:	2d0c      	cmp	r5, #12
 800cc6c:	bf38      	it	cc
 800cc6e:	250c      	movcc	r5, #12
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	4606      	mov	r6, r0
 800cc74:	db01      	blt.n	800cc7a <_malloc_r+0x1a>
 800cc76:	42a9      	cmp	r1, r5
 800cc78:	d903      	bls.n	800cc82 <_malloc_r+0x22>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	6033      	str	r3, [r6, #0]
 800cc7e:	2000      	movs	r0, #0
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
 800cc82:	f000 f89b 	bl	800cdbc <__malloc_lock>
 800cc86:	4a21      	ldr	r2, [pc, #132]	; (800cd0c <_malloc_r+0xac>)
 800cc88:	6814      	ldr	r4, [r2, #0]
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	b991      	cbnz	r1, 800ccb4 <_malloc_r+0x54>
 800cc8e:	4c20      	ldr	r4, [pc, #128]	; (800cd10 <_malloc_r+0xb0>)
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	b91b      	cbnz	r3, 800cc9c <_malloc_r+0x3c>
 800cc94:	4630      	mov	r0, r6
 800cc96:	f000 f83d 	bl	800cd14 <_sbrk_r>
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f000 f838 	bl	800cd14 <_sbrk_r>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d124      	bne.n	800ccf2 <_malloc_r+0x92>
 800cca8:	230c      	movs	r3, #12
 800ccaa:	6033      	str	r3, [r6, #0]
 800ccac:	4630      	mov	r0, r6
 800ccae:	f000 f886 	bl	800cdbe <__malloc_unlock>
 800ccb2:	e7e4      	b.n	800cc7e <_malloc_r+0x1e>
 800ccb4:	680b      	ldr	r3, [r1, #0]
 800ccb6:	1b5b      	subs	r3, r3, r5
 800ccb8:	d418      	bmi.n	800ccec <_malloc_r+0x8c>
 800ccba:	2b0b      	cmp	r3, #11
 800ccbc:	d90f      	bls.n	800ccde <_malloc_r+0x7e>
 800ccbe:	600b      	str	r3, [r1, #0]
 800ccc0:	50cd      	str	r5, [r1, r3]
 800ccc2:	18cc      	adds	r4, r1, r3
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f000 f87a 	bl	800cdbe <__malloc_unlock>
 800ccca:	f104 000b 	add.w	r0, r4, #11
 800ccce:	1d23      	adds	r3, r4, #4
 800ccd0:	f020 0007 	bic.w	r0, r0, #7
 800ccd4:	1ac3      	subs	r3, r0, r3
 800ccd6:	d0d3      	beq.n	800cc80 <_malloc_r+0x20>
 800ccd8:	425a      	negs	r2, r3
 800ccda:	50e2      	str	r2, [r4, r3]
 800ccdc:	e7d0      	b.n	800cc80 <_malloc_r+0x20>
 800ccde:	428c      	cmp	r4, r1
 800cce0:	684b      	ldr	r3, [r1, #4]
 800cce2:	bf16      	itet	ne
 800cce4:	6063      	strne	r3, [r4, #4]
 800cce6:	6013      	streq	r3, [r2, #0]
 800cce8:	460c      	movne	r4, r1
 800ccea:	e7eb      	b.n	800ccc4 <_malloc_r+0x64>
 800ccec:	460c      	mov	r4, r1
 800ccee:	6849      	ldr	r1, [r1, #4]
 800ccf0:	e7cc      	b.n	800cc8c <_malloc_r+0x2c>
 800ccf2:	1cc4      	adds	r4, r0, #3
 800ccf4:	f024 0403 	bic.w	r4, r4, #3
 800ccf8:	42a0      	cmp	r0, r4
 800ccfa:	d005      	beq.n	800cd08 <_malloc_r+0xa8>
 800ccfc:	1a21      	subs	r1, r4, r0
 800ccfe:	4630      	mov	r0, r6
 800cd00:	f000 f808 	bl	800cd14 <_sbrk_r>
 800cd04:	3001      	adds	r0, #1
 800cd06:	d0cf      	beq.n	800cca8 <_malloc_r+0x48>
 800cd08:	6025      	str	r5, [r4, #0]
 800cd0a:	e7db      	b.n	800ccc4 <_malloc_r+0x64>
 800cd0c:	20000728 	.word	0x20000728
 800cd10:	2000072c 	.word	0x2000072c

0800cd14 <_sbrk_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4c06      	ldr	r4, [pc, #24]	; (800cd30 <_sbrk_r+0x1c>)
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	4608      	mov	r0, r1
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	f7ff fea8 	bl	800ca74 <_sbrk>
 800cd24:	1c43      	adds	r3, r0, #1
 800cd26:	d102      	bne.n	800cd2e <_sbrk_r+0x1a>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	b103      	cbz	r3, 800cd2e <_sbrk_r+0x1a>
 800cd2c:	602b      	str	r3, [r5, #0]
 800cd2e:	bd38      	pop	{r3, r4, r5, pc}
 800cd30:	20000b9c 	.word	0x20000b9c

0800cd34 <_raise_r>:
 800cd34:	291f      	cmp	r1, #31
 800cd36:	b538      	push	{r3, r4, r5, lr}
 800cd38:	4604      	mov	r4, r0
 800cd3a:	460d      	mov	r5, r1
 800cd3c:	d904      	bls.n	800cd48 <_raise_r+0x14>
 800cd3e:	2316      	movs	r3, #22
 800cd40:	6003      	str	r3, [r0, #0]
 800cd42:	f04f 30ff 	mov.w	r0, #4294967295
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd4a:	b112      	cbz	r2, 800cd52 <_raise_r+0x1e>
 800cd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd50:	b94b      	cbnz	r3, 800cd66 <_raise_r+0x32>
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 f830 	bl	800cdb8 <_getpid_r>
 800cd58:	462a      	mov	r2, r5
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd62:	f000 b817 	b.w	800cd94 <_kill_r>
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d00a      	beq.n	800cd80 <_raise_r+0x4c>
 800cd6a:	1c59      	adds	r1, r3, #1
 800cd6c:	d103      	bne.n	800cd76 <_raise_r+0x42>
 800cd6e:	2316      	movs	r3, #22
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	2001      	movs	r0, #1
 800cd74:	e7e7      	b.n	800cd46 <_raise_r+0x12>
 800cd76:	2400      	movs	r4, #0
 800cd78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	4798      	blx	r3
 800cd80:	2000      	movs	r0, #0
 800cd82:	e7e0      	b.n	800cd46 <_raise_r+0x12>

0800cd84 <raise>:
 800cd84:	4b02      	ldr	r3, [pc, #8]	; (800cd90 <raise+0xc>)
 800cd86:	4601      	mov	r1, r0
 800cd88:	6818      	ldr	r0, [r3, #0]
 800cd8a:	f7ff bfd3 	b.w	800cd34 <_raise_r>
 800cd8e:	bf00      	nop
 800cd90:	20000214 	.word	0x20000214

0800cd94 <_kill_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4c07      	ldr	r4, [pc, #28]	; (800cdb4 <_kill_r+0x20>)
 800cd98:	2300      	movs	r3, #0
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	4608      	mov	r0, r1
 800cd9e:	4611      	mov	r1, r2
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	f7ff fe4d 	bl	800ca40 <_kill>
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	d102      	bne.n	800cdb0 <_kill_r+0x1c>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	b103      	cbz	r3, 800cdb0 <_kill_r+0x1c>
 800cdae:	602b      	str	r3, [r5, #0]
 800cdb0:	bd38      	pop	{r3, r4, r5, pc}
 800cdb2:	bf00      	nop
 800cdb4:	20000b9c 	.word	0x20000b9c

0800cdb8 <_getpid_r>:
 800cdb8:	f7ff be3a 	b.w	800ca30 <_getpid>

0800cdbc <__malloc_lock>:
 800cdbc:	4770      	bx	lr

0800cdbe <__malloc_unlock>:
 800cdbe:	4770      	bx	lr

0800cdc0 <_init>:
 800cdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc2:	bf00      	nop
 800cdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc6:	bc08      	pop	{r3}
 800cdc8:	469e      	mov	lr, r3
 800cdca:	4770      	bx	lr

0800cdcc <_fini>:
 800cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdce:	bf00      	nop
 800cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd2:	bc08      	pop	{r3}
 800cdd4:	469e      	mov	lr, r3
 800cdd6:	4770      	bx	lr

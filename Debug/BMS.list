
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc4c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800be14  0800be14  0001be14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a0  0800c1a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1a0  0800c1a0  0001c1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a8  0800c1a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a8  0800c1a8  0001c1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000074  0800c224  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800c224  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031aaf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f06  00000000  00000000  00051b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  00055a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  00056da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000293e2  00000000  00000000  00057f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116ca  00000000  00000000  0008134a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9acc  00000000  00000000  00092a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017c4e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  0017c55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800bdfc 	.word	0x0800bdfc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	0800bdfc 	.word	0x0800bdfc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b972 	b.w	800091c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9e08      	ldr	r6, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	4688      	mov	r8, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d14b      	bne.n	80006f6 <__udivmoddi4+0xa6>
 800065e:	428a      	cmp	r2, r1
 8000660:	4615      	mov	r5, r2
 8000662:	d967      	bls.n	8000734 <__udivmoddi4+0xe4>
 8000664:	fab2 f282 	clz	r2, r2
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0720 	rsb	r7, r2, #32
 800066e:	fa01 f302 	lsl.w	r3, r1, r2
 8000672:	fa20 f707 	lsr.w	r7, r0, r7
 8000676:	4095      	lsls	r5, r2
 8000678:	ea47 0803 	orr.w	r8, r7, r3
 800067c:	4094      	lsls	r4, r2
 800067e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000682:	0c23      	lsrs	r3, r4, #16
 8000684:	fbb8 f7fe 	udiv	r7, r8, lr
 8000688:	fa1f fc85 	uxth.w	ip, r5
 800068c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000690:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000694:	fb07 f10c 	mul.w	r1, r7, ip
 8000698:	4299      	cmp	r1, r3
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x60>
 800069c:	18eb      	adds	r3, r5, r3
 800069e:	f107 30ff 	add.w	r0, r7, #4294967295
 80006a2:	f080 811b 	bcs.w	80008dc <__udivmoddi4+0x28c>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 8118 	bls.w	80008dc <__udivmoddi4+0x28c>
 80006ac:	3f02      	subs	r7, #2
 80006ae:	442b      	add	r3, r5
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80006c4:	45a4      	cmp	ip, r4
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x8c>
 80006c8:	192c      	adds	r4, r5, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ce:	f080 8107 	bcs.w	80008e0 <__udivmoddi4+0x290>
 80006d2:	45a4      	cmp	ip, r4
 80006d4:	f240 8104 	bls.w	80008e0 <__udivmoddi4+0x290>
 80006d8:	3802      	subs	r0, #2
 80006da:	442c      	add	r4, r5
 80006dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e0:	eba4 040c 	sub.w	r4, r4, ip
 80006e4:	2700      	movs	r7, #0
 80006e6:	b11e      	cbz	r6, 80006f0 <__udivmoddi4+0xa0>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c6 4300 	strd	r4, r3, [r6]
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0xbe>
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	f000 80eb 	beq.w	80008d6 <__udivmoddi4+0x286>
 8000700:	2700      	movs	r7, #0
 8000702:	e9c6 0100 	strd	r0, r1, [r6]
 8000706:	4638      	mov	r0, r7
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	fab3 f783 	clz	r7, r3
 8000712:	2f00      	cmp	r7, #0
 8000714:	d147      	bne.n	80007a6 <__udivmoddi4+0x156>
 8000716:	428b      	cmp	r3, r1
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xd0>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 80fa 	bhi.w	8000914 <__udivmoddi4+0x2c4>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb61 0303 	sbc.w	r3, r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	4698      	mov	r8, r3
 800072a:	2e00      	cmp	r6, #0
 800072c:	d0e0      	beq.n	80006f0 <__udivmoddi4+0xa0>
 800072e:	e9c6 4800 	strd	r4, r8, [r6]
 8000732:	e7dd      	b.n	80006f0 <__udivmoddi4+0xa0>
 8000734:	b902      	cbnz	r2, 8000738 <__udivmoddi4+0xe8>
 8000736:	deff      	udf	#255	; 0xff
 8000738:	fab2 f282 	clz	r2, r2
 800073c:	2a00      	cmp	r2, #0
 800073e:	f040 808f 	bne.w	8000860 <__udivmoddi4+0x210>
 8000742:	1b49      	subs	r1, r1, r5
 8000744:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000748:	fa1f f885 	uxth.w	r8, r5
 800074c:	2701      	movs	r7, #1
 800074e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000752:	0c23      	lsrs	r3, r4, #16
 8000754:	fb0e 111c 	mls	r1, lr, ip, r1
 8000758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075c:	fb08 f10c 	mul.w	r1, r8, ip
 8000760:	4299      	cmp	r1, r3
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x124>
 8000764:	18eb      	adds	r3, r5, r3
 8000766:	f10c 30ff 	add.w	r0, ip, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x122>
 800076c:	4299      	cmp	r1, r3
 800076e:	f200 80cd 	bhi.w	800090c <__udivmoddi4+0x2bc>
 8000772:	4684      	mov	ip, r0
 8000774:	1a59      	subs	r1, r3, r1
 8000776:	b2a3      	uxth	r3, r4
 8000778:	fbb1 f0fe 	udiv	r0, r1, lr
 800077c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000780:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000784:	fb08 f800 	mul.w	r8, r8, r0
 8000788:	45a0      	cmp	r8, r4
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x14c>
 800078c:	192c      	adds	r4, r5, r4
 800078e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x14a>
 8000794:	45a0      	cmp	r8, r4
 8000796:	f200 80b6 	bhi.w	8000906 <__udivmoddi4+0x2b6>
 800079a:	4618      	mov	r0, r3
 800079c:	eba4 0408 	sub.w	r4, r4, r8
 80007a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007a4:	e79f      	b.n	80006e6 <__udivmoddi4+0x96>
 80007a6:	f1c7 0c20 	rsb	ip, r7, #32
 80007aa:	40bb      	lsls	r3, r7
 80007ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007b4:	fa01 f407 	lsl.w	r4, r1, r7
 80007b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80007c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007c4:	4325      	orrs	r5, r4
 80007c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80007ca:	0c2c      	lsrs	r4, r5, #16
 80007cc:	fb08 3319 	mls	r3, r8, r9, r3
 80007d0:	fa1f fa8e 	uxth.w	sl, lr
 80007d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007d8:	fb09 f40a 	mul.w	r4, r9, sl
 80007dc:	429c      	cmp	r4, r3
 80007de:	fa02 f207 	lsl.w	r2, r2, r7
 80007e2:	fa00 f107 	lsl.w	r1, r0, r7
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b0>
 80007e8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80007f0:	f080 8087 	bcs.w	8000902 <__udivmoddi4+0x2b2>
 80007f4:	429c      	cmp	r4, r3
 80007f6:	f240 8084 	bls.w	8000902 <__udivmoddi4+0x2b2>
 80007fa:	f1a9 0902 	sub.w	r9, r9, #2
 80007fe:	4473      	add	r3, lr
 8000800:	1b1b      	subs	r3, r3, r4
 8000802:	b2ad      	uxth	r5, r5
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3310 	mls	r3, r8, r0, r3
 800080c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000810:	fb00 fa0a 	mul.w	sl, r0, sl
 8000814:	45a2      	cmp	sl, r4
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1da>
 8000818:	eb1e 0404 	adds.w	r4, lr, r4
 800081c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000820:	d26b      	bcs.n	80008fa <__udivmoddi4+0x2aa>
 8000822:	45a2      	cmp	sl, r4
 8000824:	d969      	bls.n	80008fa <__udivmoddi4+0x2aa>
 8000826:	3802      	subs	r0, #2
 8000828:	4474      	add	r4, lr
 800082a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800082e:	fba0 8902 	umull	r8, r9, r0, r2
 8000832:	eba4 040a 	sub.w	r4, r4, sl
 8000836:	454c      	cmp	r4, r9
 8000838:	46c2      	mov	sl, r8
 800083a:	464b      	mov	r3, r9
 800083c:	d354      	bcc.n	80008e8 <__udivmoddi4+0x298>
 800083e:	d051      	beq.n	80008e4 <__udivmoddi4+0x294>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d069      	beq.n	8000918 <__udivmoddi4+0x2c8>
 8000844:	ebb1 050a 	subs.w	r5, r1, sl
 8000848:	eb64 0403 	sbc.w	r4, r4, r3
 800084c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000850:	40fd      	lsrs	r5, r7
 8000852:	40fc      	lsrs	r4, r7
 8000854:	ea4c 0505 	orr.w	r5, ip, r5
 8000858:	e9c6 5400 	strd	r5, r4, [r6]
 800085c:	2700      	movs	r7, #0
 800085e:	e747      	b.n	80006f0 <__udivmoddi4+0xa0>
 8000860:	f1c2 0320 	rsb	r3, r2, #32
 8000864:	fa20 f703 	lsr.w	r7, r0, r3
 8000868:	4095      	lsls	r5, r2
 800086a:	fa01 f002 	lsl.w	r0, r1, r2
 800086e:	fa21 f303 	lsr.w	r3, r1, r3
 8000872:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000876:	4338      	orrs	r0, r7
 8000878:	0c01      	lsrs	r1, r0, #16
 800087a:	fbb3 f7fe 	udiv	r7, r3, lr
 800087e:	fa1f f885 	uxth.w	r8, r5
 8000882:	fb0e 3317 	mls	r3, lr, r7, r3
 8000886:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088a:	fb07 f308 	mul.w	r3, r7, r8
 800088e:	428b      	cmp	r3, r1
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x256>
 8000896:	1869      	adds	r1, r5, r1
 8000898:	f107 3cff 	add.w	ip, r7, #4294967295
 800089c:	d22f      	bcs.n	80008fe <__udivmoddi4+0x2ae>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d92d      	bls.n	80008fe <__udivmoddi4+0x2ae>
 80008a2:	3f02      	subs	r7, #2
 80008a4:	4429      	add	r1, r5
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	b281      	uxth	r1, r0
 80008aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b6:	fb00 f308 	mul.w	r3, r0, r8
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x27e>
 80008be:	1869      	adds	r1, r5, r1
 80008c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c4:	d217      	bcs.n	80008f6 <__udivmoddi4+0x2a6>
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d915      	bls.n	80008f6 <__udivmoddi4+0x2a6>
 80008ca:	3802      	subs	r0, #2
 80008cc:	4429      	add	r1, r5
 80008ce:	1ac9      	subs	r1, r1, r3
 80008d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008d4:	e73b      	b.n	800074e <__udivmoddi4+0xfe>
 80008d6:	4637      	mov	r7, r6
 80008d8:	4630      	mov	r0, r6
 80008da:	e709      	b.n	80006f0 <__udivmoddi4+0xa0>
 80008dc:	4607      	mov	r7, r0
 80008de:	e6e7      	b.n	80006b0 <__udivmoddi4+0x60>
 80008e0:	4618      	mov	r0, r3
 80008e2:	e6fb      	b.n	80006dc <__udivmoddi4+0x8c>
 80008e4:	4541      	cmp	r1, r8
 80008e6:	d2ab      	bcs.n	8000840 <__udivmoddi4+0x1f0>
 80008e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ec:	eb69 020e 	sbc.w	r2, r9, lr
 80008f0:	3801      	subs	r0, #1
 80008f2:	4613      	mov	r3, r2
 80008f4:	e7a4      	b.n	8000840 <__udivmoddi4+0x1f0>
 80008f6:	4660      	mov	r0, ip
 80008f8:	e7e9      	b.n	80008ce <__udivmoddi4+0x27e>
 80008fa:	4618      	mov	r0, r3
 80008fc:	e795      	b.n	800082a <__udivmoddi4+0x1da>
 80008fe:	4667      	mov	r7, ip
 8000900:	e7d1      	b.n	80008a6 <__udivmoddi4+0x256>
 8000902:	4681      	mov	r9, r0
 8000904:	e77c      	b.n	8000800 <__udivmoddi4+0x1b0>
 8000906:	3802      	subs	r0, #2
 8000908:	442c      	add	r4, r5
 800090a:	e747      	b.n	800079c <__udivmoddi4+0x14c>
 800090c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000910:	442b      	add	r3, r5
 8000912:	e72f      	b.n	8000774 <__udivmoddi4+0x124>
 8000914:	4638      	mov	r0, r7
 8000916:	e708      	b.n	800072a <__udivmoddi4+0xda>
 8000918:	4637      	mov	r7, r6
 800091a:	e6e9      	b.n	80006f0 <__udivmoddi4+0xa0>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_Init+0x40>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x40>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x40>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 ff9f 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f00a fd40 	bl	800b3d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 ffb7 	bl	80018f6 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 ff7f 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004
 80009c0:	20000000 	.word	0x20000000

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000004 	.word	0x20000004
 80009e8:	2000022c 	.word	0x2000022c

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000022c 	.word	0x2000022c

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff ffee 	bl	80009ec <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_Delay+0x40>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffde 	bl	80009ec <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e0ed      	b.n	8000c36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f00a fcde 	bl	800b428 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0202 	bic.w	r2, r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a7c:	f7ff ffb6 	bl	80009ec <HAL_GetTick>
 8000a80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a82:	e012      	b.n	8000aaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a84:	f7ff ffb2 	bl	80009ec <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b0a      	cmp	r3, #10
 8000a90:	d90b      	bls.n	8000aaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e0c5      	b.n	8000c36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e5      	bne.n	8000a84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0201 	orr.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac8:	f7ff ff90 	bl	80009ec <HAL_GetTick>
 8000acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ace:	e012      	b.n	8000af6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad0:	f7ff ff8c 	bl	80009ec <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b0a      	cmp	r3, #10
 8000adc:	d90b      	bls.n	8000af6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2205      	movs	r2, #5
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e09f      	b.n	8000c36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0e5      	beq.n	8000ad0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7e1b      	ldrb	r3, [r3, #24]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d108      	bne.n	8000b1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e007      	b.n	8000b2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7e5b      	ldrb	r3, [r3, #25]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d108      	bne.n	8000b48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e007      	b.n	8000b58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7e9b      	ldrb	r3, [r3, #26]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d108      	bne.n	8000b72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f042 0220 	orr.w	r2, r2, #32
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e007      	b.n	8000b82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0220 	bic.w	r2, r2, #32
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7edb      	ldrb	r3, [r3, #27]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d108      	bne.n	8000b9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 0210 	bic.w	r2, r2, #16
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0210 	orr.w	r2, r2, #16
 8000baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7f1b      	ldrb	r3, [r3, #28]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d108      	bne.n	8000bc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f042 0208 	orr.w	r2, r2, #8
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	e007      	b.n	8000bd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7f5b      	ldrb	r3, [r3, #29]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d108      	bne.n	8000bf0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 0204 	orr.w	r2, r2, #4
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0204 	bic.w	r2, r2, #4
 8000bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	ea42 0103 	orr.w	r1, r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c58:	7cfb      	ldrb	r3, [r7, #19]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d003      	beq.n	8000c66 <HAL_CAN_ConfigFilter+0x26>
 8000c5e:	7cfb      	ldrb	r3, [r7, #19]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	f040 80be 	bne.w	8000de2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000c66:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <HAL_CAN_ConfigFilter+0x1bc>)
 8000c68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c70:	f043 0201 	orr.w	r2, r3, #1
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	431a      	orrs	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d123      	bne.n	8000d10 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3248      	adds	r2, #72	; 0x48
 8000cf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d06:	6979      	ldr	r1, [r7, #20]
 8000d08:	3348      	adds	r3, #72	; 0x48
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d122      	bne.n	8000d5e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3248      	adds	r2, #72	; 0x48
 8000d3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d54:	6979      	ldr	r1, [r7, #20]
 8000d56:	3348      	adds	r3, #72	; 0x48
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
 8000d5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d109      	bne.n	8000d7a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	401a      	ands	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d78:	e007      	b.n	8000d8a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000da4:	e007      	b.n	8000db6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	431a      	orrs	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d107      	bne.n	8000dce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dd4:	f023 0201 	bic.w	r2, r3, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e006      	b.n	8000df0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
  }
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40006400 	.word	0x40006400

08000e00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d12e      	bne.n	8000e72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2202      	movs	r2, #2
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e2c:	f7ff fdde 	bl	80009ec <HAL_GetTick>
 8000e30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e32:	e012      	b.n	8000e5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e34:	f7ff fdda 	bl	80009ec <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b0a      	cmp	r3, #10
 8000e40:	d90b      	bls.n	8000e5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2205      	movs	r2, #5
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e012      	b.n	8000e80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e5      	bne.n	8000e34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e006      	b.n	8000e80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
  }
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d003      	beq.n	8000eb4 <HAL_CAN_AddTxMessage+0x2c>
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	f040 80b8 	bne.w	8001024 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10a      	bne.n	8000ed4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 80a0 	beq.w	8001014 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	0e1b      	lsrs	r3, r3, #24
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d907      	bls.n	8000ef4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e09e      	b.n	8001032 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10d      	bne.n	8000f22 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	6809      	ldr	r1, [r1, #0]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	440b      	add	r3, r1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	e00f      	b.n	8000f42 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f36:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	440b      	add	r3, r1
 8000f40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	3304      	adds	r3, #4
 8000f54:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	7d1b      	ldrb	r3, [r3, #20]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d111      	bne.n	8000f82 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3318      	adds	r3, #24
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	6811      	ldr	r1, [r2, #0]
 8000f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3318      	adds	r3, #24
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3304      	adds	r3, #4
 8000f80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3307      	adds	r3, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	061a      	lsls	r2, r3, #24
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3305      	adds	r3, #5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	3204      	adds	r2, #4
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	6811      	ldr	r1, [r2, #0]
 8000faa:	ea43 0200 	orr.w	r2, r3, r0
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fb8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	061a      	lsls	r2, r3, #24
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	4610      	mov	r0, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	ea43 0200 	orr.w	r2, r3, r0
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000fee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	f043 0201 	orr.w	r2, r3, #1
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3318      	adds	r3, #24
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	440b      	add	r3, r1
 800100e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	e00e      	b.n	8001032 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e006      	b.n	8001032 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
  }
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800103e:	b480      	push	{r7}
 8001040:	b087      	sub	sp, #28
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001052:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d003      	beq.n	8001062 <HAL_CAN_GetRxMessage+0x24>
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b02      	cmp	r3, #2
 800105e:	f040 80f3 	bne.w	8001248 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10e      	bne.n	8001086 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0e7      	b.n	8001256 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d107      	bne.n	80010a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0d8      	b.n	8001256 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	331b      	adds	r3, #27
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0204 	and.w	r2, r3, #4
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	331b      	adds	r3, #27
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0d5b      	lsrs	r3, r3, #21
 80010d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	331b      	adds	r3, #27
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	331b      	adds	r3, #27
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0202 	and.w	r2, r3, #2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	331b      	adds	r3, #27
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	3304      	adds	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 020f 	and.w	r2, r3, #15
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	331b      	adds	r3, #27
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	3304      	adds	r3, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b2da      	uxtb	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	331b      	adds	r3, #27
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	0c1b      	lsrs	r3, r3, #16
 800114c:	b29a      	uxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0a1a      	lsrs	r2, r3, #8
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	0c1a      	lsrs	r2, r3, #16
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3302      	adds	r3, #2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0e1a      	lsrs	r2, r3, #24
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3303      	adds	r3, #3
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3304      	adds	r3, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	0a1a      	lsrs	r2, r3, #8
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	3305      	adds	r3, #5
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0c1a      	lsrs	r2, r3, #16
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3306      	adds	r3, #6
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0e1a      	lsrs	r2, r3, #24
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3307      	adds	r3, #7
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d108      	bne.n	8001234 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	e007      	b.n	8001244 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	e006      	b.n	8001256 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d002      	beq.n	8001280 <HAL_CAN_ActivateNotification+0x1e>
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d109      	bne.n	8001294 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6959      	ldr	r1, [r3, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	e006      	b.n	80012a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b08a      	sub	sp, #40	; 0x28
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d07c      	beq.n	80013ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d023      	beq.n	8001346 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2201      	movs	r2, #1
 8001304:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f97d 	bl	8001610 <HAL_CAN_TxMailbox0CompleteCallback>
 8001316:	e016      	b.n	8001346 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	e00c      	b.n	8001346 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	e002      	b.n	8001346 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f983 	bl	800164c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d024      	beq.n	800139a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001358:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f95d 	bl	8001624 <HAL_CAN_TxMailbox1CompleteCallback>
 800136a:	e016      	b.n	800139a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	e00c      	b.n	800139a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	e002      	b.n	800139a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f963 	bl	8001660 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d024      	beq.n	80013ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f93d 	bl	8001638 <HAL_CAN_TxMailbox2CompleteCallback>
 80013be:	e016      	b.n	80013ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e00c      	b.n	80013ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
 80013e6:	e002      	b.n	80013ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f943 	bl	8001674 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00c      	beq.n	8001412 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001408:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2210      	movs	r2, #16
 8001410:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2208      	movs	r2, #8
 800142c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f92a 	bl	8001688 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f009 fac9 	bl	800a9e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2210      	movs	r2, #16
 8001474:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2208      	movs	r2, #8
 8001490:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f902 	bl	800169c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f009 fab9 	bl	800aa28 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2210      	movs	r2, #16
 80014d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f8ec 	bl	80016b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2208      	movs	r2, #8
 80014f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f8e5 	bl	80016c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d075      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d06c      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03d      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d038      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800157c:	2b30      	cmp	r3, #48	; 0x30
 800157e:	d017      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x302>
 8001580:	2b30      	cmp	r3, #48	; 0x30
 8001582:	d804      	bhi.n	800158e <HAL_CAN_IRQHandler+0x2e0>
 8001584:	2b10      	cmp	r3, #16
 8001586:	d009      	beq.n	800159c <HAL_CAN_IRQHandler+0x2ee>
 8001588:	2b20      	cmp	r3, #32
 800158a:	d00c      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800158c:	e024      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800158e:	2b50      	cmp	r3, #80	; 0x50
 8001590:	d018      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x316>
 8001592:	2b60      	cmp	r3, #96	; 0x60
 8001594:	d01b      	beq.n	80015ce <HAL_CAN_IRQHandler+0x320>
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d00f      	beq.n	80015ba <HAL_CAN_IRQHandler+0x30c>
            break;
 800159a:	e01d      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015a4:	e018      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ae:	e013      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	f043 0320 	orr.w	r3, r3, #32
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b8:	e00e      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c2:	e009      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015cc:	e004      	b.n	80015d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2204      	movs	r2, #4
 80015ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f868 	bl	80016d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e165      	b.n	8001bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8154 	bne.w	8001bf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d00b      	beq.n	800196a <HAL_GPIO_Init+0x5a>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195e:	2b11      	cmp	r3, #17
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0xfc>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80ae 	beq.w	8001bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a5b      	ldr	r2, [pc, #364]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a57      	ldr	r2, [pc, #348]	; (8001c10 <HAL_GPIO_Init+0x300>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <HAL_GPIO_Init+0x308>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x216>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x30c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x212>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_GPIO_Init+0x310>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x20e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x314>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x20a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x318>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x206>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_GPIO_Init+0x31c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x202>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x21c>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b3c:	4934      	ldr	r1, [pc, #208]	; (8001c10 <HAL_GPIO_Init+0x300>)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6e:	4a30      	ldr	r2, [pc, #192]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b98:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f ae96 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	3724      	adds	r7, #36	; 0x24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40021400 	.word	0x40021400
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	619a      	str	r2, [r3, #24]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	401a      	ands	r2, r3
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d104      	bne.n	8001cba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	041a      	lsls	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	619a      	str	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0cc      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d90c      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d044      	beq.n	8001dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e067      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4934      	ldr	r1, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7fe fe16 	bl	80009ec <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7fe fe12 	bl	80009ec <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e04f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d20c      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 fb4b 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8001e56:	4601      	mov	r1, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	fa21 f303 	lsr.w	r3, r1, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fd76 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	0800c188 	.word	0x0800c188
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000000 	.word	0x20000000

08001e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	496c      	ldr	r1, [pc, #432]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d010      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001efe:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	4960      	ldr	r1, [pc, #384]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2c:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4955      	ldr	r1, [pc, #340]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	4946      	ldr	r1, [pc, #280]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f86:	d101      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001f94:	2301      	movs	r3, #1
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 808a 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a38      	ldr	r2, [pc, #224]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a33      	ldr	r2, [pc, #204]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fce:	f7fe fd0d 	bl	80009ec <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe fd09 	bl	80009ec <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e278      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d02f      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	429a      	cmp	r2, r3
 8002010:	d028      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d114      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800203a:	f7fe fcd7 	bl	80009ec <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fcd3 	bl	80009ec <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e240      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002070:	d114      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002086:	4902      	ldr	r1, [pc, #8]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
 800208c:	e00c      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40007000 	.word	0x40007000
 8002098:	42470e40 	.word	0x42470e40
 800209c:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a49      	ldr	r2, [pc, #292]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	4944      	ldr	r1, [pc, #272]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80020cc:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80020ce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	4937      	ldr	r1, [pc, #220]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020fe:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	492e      	ldr	r1, [pc, #184]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d011      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002126:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	4926      	ldr	r1, [pc, #152]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213e:	d101      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002140:	2301      	movs	r3, #1
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002156:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	491a      	ldr	r1, [pc, #104]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d011      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002178:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002180:	4911      	ldr	r1, [pc, #68]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002190:	d101      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002192:	2301      	movs	r3, #1
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d005      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a4:	f040 80ff 	bne.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021ae:	f7fe fc1d 	bl	80009ec <HAL_GetTick>
 80021b2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021b4:	e00e      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021b6:	f7fe fc19 	bl	80009ec <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d907      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e188      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	424711e0 	.word	0x424711e0
 80021d0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d4:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ea      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d028      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d124      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002208:	4b71      	ldr	r3, [pc, #452]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800220a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	3301      	adds	r3, #1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800221c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002220:	0e1b      	lsrs	r3, r3, #24
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	431a      	orrs	r2, r3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	3b01      	subs	r3, #1
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	431a      	orrs	r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	071b      	lsls	r3, r3, #28
 800224a:	4961      	ldr	r1, [pc, #388]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002270:	2b00      	cmp	r3, #0
 8002272:	d035      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227c:	d130      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800227e:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002290:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002296:	0f1b      	lsrs	r3, r3, #28
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	019b      	lsls	r3, r3, #6
 80022a8:	431a      	orrs	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	431a      	orrs	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	071b      	lsls	r3, r3, #28
 80022c0:	4943      	ldr	r1, [pc, #268]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022c8:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ce:	f023 021f 	bic.w	r2, r3, #31
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	493d      	ldr	r1, [pc, #244]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d029      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f4:	d124      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	0f1b      	lsrs	r3, r3, #28
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	019b      	lsls	r3, r3, #6
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	431a      	orrs	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	071b      	lsls	r3, r3, #28
 8002338:	4925      	ldr	r1, [pc, #148]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	3b01      	subs	r3, #1
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	071b      	lsls	r3, r3, #28
 8002372:	4917      	ldr	r1, [pc, #92]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002380:	f7fe fb34 	bl	80009ec <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002388:	f7fe fb30 	bl	80009ec <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e09f      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f040 8095 	bne.w	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fb1a 	bl	80009ec <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023ba:	e00f      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80023bc:	f7fe fb16 	bl	80009ec <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d908      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e085      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x642>
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	42470068 	.word	0x42470068
 80023d8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e8:	d0e8      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x566>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02b      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	2b00      	cmp	r3, #0
 8002410:	d127      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	019b      	lsls	r3, r3, #6
 800242e:	431a      	orrs	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	4928      	ldr	r1, [pc, #160]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800244a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	3b01      	subs	r3, #1
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01d      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x612>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002476:	d118      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	0e1b      	lsrs	r3, r3, #24
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	019b      	lsls	r3, r3, #6
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	4910      	ldr	r1, [pc, #64]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fa9c 	bl	80009ec <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024b8:	f7fe fa98 	bl	80009ec <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e007      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d6:	d1ef      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3730      	adds	r7, #48	; 0x30
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	42470070 	.word	0x42470070

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002506:	4b9f      	ldr	r3, [pc, #636]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b0c      	cmp	r3, #12
 8002510:	f200 8130 	bhi.w	8002774 <HAL_RCC_GetSysClockFreq+0x288>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <HAL_RCC_GetSysClockFreq+0x30>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002551 	.word	0x08002551
 8002520:	08002775 	.word	0x08002775
 8002524:	08002775 	.word	0x08002775
 8002528:	08002775 	.word	0x08002775
 800252c:	08002557 	.word	0x08002557
 8002530:	08002775 	.word	0x08002775
 8002534:	08002775 	.word	0x08002775
 8002538:	08002775 	.word	0x08002775
 800253c:	0800255d 	.word	0x0800255d
 8002540:	08002775 	.word	0x08002775
 8002544:	08002775 	.word	0x08002775
 8002548:	08002775 	.word	0x08002775
 800254c:	0800266b 	.word	0x0800266b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002552:	613b      	str	r3, [r7, #16]
       break;
 8002554:	e111      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002556:	4b8d      	ldr	r3, [pc, #564]	; (800278c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002558:	613b      	str	r3, [r7, #16]
      break;
 800255a:	e10e      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255c:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002564:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002566:	4b87      	ldr	r3, [pc, #540]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d023      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002572:	4b84      	ldr	r3, [pc, #528]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	f04f 0400 	mov.w	r4, #0
 800257c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	ea03 0501 	and.w	r5, r3, r1
 8002588:	ea04 0602 	and.w	r6, r4, r2
 800258c:	4a7f      	ldr	r2, [pc, #508]	; (800278c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800258e:	fb02 f106 	mul.w	r1, r2, r6
 8002592:	2200      	movs	r2, #0
 8002594:	fb02 f205 	mul.w	r2, r2, r5
 8002598:	440a      	add	r2, r1
 800259a:	497c      	ldr	r1, [pc, #496]	; (800278c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800259c:	fba5 0101 	umull	r0, r1, r5, r1
 80025a0:	1853      	adds	r3, r2, r1
 80025a2:	4619      	mov	r1, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f04f 0400 	mov.w	r4, #0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4623      	mov	r3, r4
 80025ae:	f7fe f837 	bl	8000620 <__aeabi_uldivmod>
 80025b2:	4603      	mov	r3, r0
 80025b4:	460c      	mov	r4, r1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e049      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	f04f 0400 	mov.w	r4, #0
 80025c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	ea03 0501 	and.w	r5, r3, r1
 80025d0:	ea04 0602 	and.w	r6, r4, r2
 80025d4:	4629      	mov	r1, r5
 80025d6:	4632      	mov	r2, r6
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f04f 0400 	mov.w	r4, #0
 80025e0:	0154      	lsls	r4, r2, #5
 80025e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e6:	014b      	lsls	r3, r1, #5
 80025e8:	4619      	mov	r1, r3
 80025ea:	4622      	mov	r2, r4
 80025ec:	1b49      	subs	r1, r1, r5
 80025ee:	eb62 0206 	sbc.w	r2, r2, r6
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f04f 0400 	mov.w	r4, #0
 80025fa:	0194      	lsls	r4, r2, #6
 80025fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002600:	018b      	lsls	r3, r1, #6
 8002602:	1a5b      	subs	r3, r3, r1
 8002604:	eb64 0402 	sbc.w	r4, r4, r2
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	00e2      	lsls	r2, r4, #3
 8002612:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002616:	00d9      	lsls	r1, r3, #3
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	195b      	adds	r3, r3, r5
 800261e:	eb44 0406 	adc.w	r4, r4, r6
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	02a2      	lsls	r2, r4, #10
 800262c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002630:	0299      	lsls	r1, r3, #10
 8002632:	460b      	mov	r3, r1
 8002634:	4614      	mov	r4, r2
 8002636:	4618      	mov	r0, r3
 8002638:	4621      	mov	r1, r4
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f04f 0400 	mov.w	r4, #0
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	f7fd ffec 	bl	8000620 <__aeabi_uldivmod>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800264e:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	613b      	str	r3, [r7, #16]
      break;
 8002668:	e087      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002672:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002680:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	ea03 0501 	and.w	r5, r3, r1
 8002696:	ea04 0602 	and.w	r6, r4, r2
 800269a:	4a3c      	ldr	r2, [pc, #240]	; (800278c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800269c:	fb02 f106 	mul.w	r1, r2, r6
 80026a0:	2200      	movs	r2, #0
 80026a2:	fb02 f205 	mul.w	r2, r2, r5
 80026a6:	440a      	add	r2, r1
 80026a8:	4938      	ldr	r1, [pc, #224]	; (800278c <HAL_RCC_GetSysClockFreq+0x2a0>)
 80026aa:	fba5 0101 	umull	r0, r1, r5, r1
 80026ae:	1853      	adds	r3, r2, r1
 80026b0:	4619      	mov	r1, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f04f 0400 	mov.w	r4, #0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4623      	mov	r3, r4
 80026bc:	f7fd ffb0 	bl	8000620 <__aeabi_uldivmod>
 80026c0:	4603      	mov	r3, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e049      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	f04f 0400 	mov.w	r4, #0
 80026d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	ea03 0501 	and.w	r5, r3, r1
 80026de:	ea04 0602 	and.w	r6, r4, r2
 80026e2:	4629      	mov	r1, r5
 80026e4:	4632      	mov	r2, r6
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f04f 0400 	mov.w	r4, #0
 80026ee:	0154      	lsls	r4, r2, #5
 80026f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026f4:	014b      	lsls	r3, r1, #5
 80026f6:	4619      	mov	r1, r3
 80026f8:	4622      	mov	r2, r4
 80026fa:	1b49      	subs	r1, r1, r5
 80026fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f04f 0400 	mov.w	r4, #0
 8002708:	0194      	lsls	r4, r2, #6
 800270a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800270e:	018b      	lsls	r3, r1, #6
 8002710:	1a5b      	subs	r3, r3, r1
 8002712:	eb64 0402 	sbc.w	r4, r4, r2
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	00e2      	lsls	r2, r4, #3
 8002720:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002724:	00d9      	lsls	r1, r3, #3
 8002726:	460b      	mov	r3, r1
 8002728:	4614      	mov	r4, r2
 800272a:	195b      	adds	r3, r3, r5
 800272c:	eb44 0406 	adc.w	r4, r4, r6
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	02a2      	lsls	r2, r4, #10
 800273a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800273e:	0299      	lsls	r1, r3, #10
 8002740:	460b      	mov	r3, r1
 8002742:	4614      	mov	r4, r2
 8002744:	4618      	mov	r0, r3
 8002746:	4621      	mov	r1, r4
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f04f 0400 	mov.w	r4, #0
 800274e:	461a      	mov	r2, r3
 8002750:	4623      	mov	r3, r4
 8002752:	f7fd ff65 	bl	8000620 <__aeabi_uldivmod>
 8002756:	4603      	mov	r3, r0
 8002758:	460c      	mov	r4, r1
 800275a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_GetSysClockFreq+0x298>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0f1b      	lsrs	r3, r3, #28
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	613b      	str	r3, [r7, #16]
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002776:	613b      	str	r3, [r7, #16]
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	693b      	ldr	r3, [r7, #16]
}
 800277c:	4618      	mov	r0, r3
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	00f42400 	.word	0x00f42400
 800278c:	017d7840 	.word	0x017d7840

08002790 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8083 	beq.w	80028b0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027aa:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d019      	beq.n	80027ea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027b6:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027c2:	4b8f      	ldr	r3, [pc, #572]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d00c      	beq.n	80027ea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d0:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d112      	bne.n	8002802 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e8:	d10b      	bne.n	8002802 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d05b      	beq.n	80028ae <HAL_RCC_OscConfig+0x11e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d157      	bne.n	80028ae <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e216      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x8a>
 800280c:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a7b      	ldr	r2, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	e01d      	b.n	8002856 <HAL_RCC_OscConfig+0xc6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0xae>
 8002824:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 800282a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a72      	ldr	r2, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	e00b      	b.n	8002856 <HAL_RCC_OscConfig+0xc6>
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6c      	ldr	r2, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d013      	beq.n	8002886 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe f8c5 	bl	80009ec <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002866:	f7fe f8c1 	bl	80009ec <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	; 0x64
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1db      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0xd6>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe f8b1 	bl	80009ec <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288e:	f7fe f8ad 	bl	80009ec <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1c7      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a0:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0xfe>
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d06f      	beq.n	800299c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d11c      	bne.n	8002926 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ec:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d116      	bne.n	8002926 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x180>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e18f      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4938      	ldr	r1, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002924:	e03a      	b.n	800299c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d020      	beq.n	8002970 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_RCC_OscConfig+0x274>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe f85a 	bl	80009ec <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe f856 	bl	80009ec <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e170      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
 800296e:	e015      	b.n	800299c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x274>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe f839 	bl	80009ec <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe f835 	bl	80009ec <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e14f      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d037      	beq.n	8002a18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d016      	beq.n	80029de <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x278>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe f819 	bl	80009ec <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe f815 	bl	80009ec <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e12f      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x22e>
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_RCC_OscConfig+0x278>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe f802 	bl	80009ec <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fd fffe 	bl	80009ec <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d908      	bls.n	8002a0c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e118      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b8a      	ldr	r3, [pc, #552]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e9      	bne.n	80029ec <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8097 	beq.w	8002b54 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b83      	ldr	r3, [pc, #524]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b7f      	ldr	r3, [pc, #508]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a7e      	ldr	r2, [pc, #504]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b7c      	ldr	r3, [pc, #496]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b76      	ldr	r3, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a75      	ldr	r2, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x4ac>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fd ffbd 	bl	80009ec <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fd ffb9 	bl	80009ec <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0d3      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x31a>
 8002a9c:	4b66      	ldr	r3, [pc, #408]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a65      	ldr	r2, [pc, #404]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x354>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x33c>
 8002ab2:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a60      	ldr	r2, [pc, #384]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a5d      	ldr	r2, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x354>
 8002acc:	4b5a      	ldr	r3, [pc, #360]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a59      	ldr	r2, [pc, #356]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a56      	ldr	r2, [pc, #344]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fd ff7e 	bl	80009ec <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fd ff7a 	bl	80009ec <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e092      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x364>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fd ff68 	bl	80009ec <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fd ff64 	bl	80009ec <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e07c      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a3a      	ldr	r2, [pc, #232]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d068      	beq.n	8002c2e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d060      	beq.n	8002c2a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d145      	bne.n	8002bfc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x4b0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fd ff39 	bl	80009ec <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fd ff35 	bl	80009ec <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e04f      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	019b      	lsls	r3, r3, #6
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	071b      	lsls	r3, r3, #28
 8002bc8:	491b      	ldr	r1, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <HAL_RCC_OscConfig+0x4b0>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fd ff0a 	bl	80009ec <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fd ff06 	bl	80009ec <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e020      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x44c>
 8002bfa:	e018      	b.n	8002c2e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCC_OscConfig+0x4b0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fd fef3 	bl	80009ec <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fd feef 	bl	80009ec <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e009      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_OscConfig+0x4a8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x47a>
 8002c28:	e001      	b.n	8002c2e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	42470060 	.word	0x42470060

08002c44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e022      	b.n	8002c9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f008 fc8f 	bl	800b58c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f814 	bl	8002ca4 <HAL_SD_InitCard>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00a      	b.n	8002c9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af04      	add	r7, sp, #16
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002cc0:	2376      	movs	r3, #118	; 0x76
 8002cc2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681d      	ldr	r5, [r3, #0]
 8002cc8:	466c      	mov	r4, sp
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f001 fe7d 	bl	80049dc <SDIO_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e031      	b.n	8002d58 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_SD_InitCard+0xbc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 feb5 	bl	8004a6e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_SD_InitCard+0xbc>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fefc 	bl	8003b08 <SD_PowerON>
 8002d10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e013      	b.n	8002d58 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fe1b 	bl	800396c <SD_InitCard>
 8002d36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d60:	422580a0 	.word	0x422580a0

08002d64 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b092      	sub	sp, #72	; 0x48
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d72:	f7fd fe3b 	bl	80009ec <HAL_GetTick>
 8002d76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d107      	bne.n	8002d96 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1d7      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	f040 81ca 	bne.w	8003138 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	441a      	add	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d907      	bls.n	8002dc8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e1be      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d002      	beq.n	8002de6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fed0 	bl	8004b94 <SDMMC_CmdBlockLength>
 8002df4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00f      	beq.n	8002e1c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a9a      	ldr	r2, [pc, #616]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e194      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	025b      	lsls	r3, r3, #9
 8002e26:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002e28:	2390      	movs	r3, #144	; 0x90
 8002e2a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f107 0214 	add.w	r2, r7, #20
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fe7a 	bl	8004b3c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d90a      	bls.n	8002e64 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2202      	movs	r2, #2
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fede 	bl	8004c1c <SDMMC_CmdReadMultiBlock>
 8002e60:	6478      	str	r0, [r7, #68]	; 0x44
 8002e62:	e009      	b.n	8002e78 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 feb1 	bl	8004bd8 <SDMMC_CmdReadSingleBlock>
 8002e76:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e150      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002ea8:	e061      	b.n	8002f6e <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03c      	beq.n	8002f32 <HAL_SD_ReadBlocks+0x1ce>
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d039      	beq.n	8002f32 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec2:	e033      	b.n	8002f2c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fdb2 	bl	8004a32 <SDIO_ReadFIFO>
 8002ece:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	3301      	adds	r3, #1
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f06:	3301      	adds	r3, #1
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	0e1b      	lsrs	r3, r3, #24
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f22:	3b01      	subs	r3, #1
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f28:	3301      	adds	r3, #1
 8002f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2e:	2b07      	cmp	r3, #7
 8002f30:	d9c8      	bls.n	8002ec4 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002f32:	f7fd fd5b 	bl	80009ec <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d902      	bls.n	8002f48 <HAL_SD_ReadBlocks+0x1e4>
 8002f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d112      	bne.n	8002f6e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a47      	ldr	r2, [pc, #284]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0eb      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d096      	beq.n	8002eaa <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d022      	beq.n	8002fd0 <HAL_SD_ReadBlocks+0x26c>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d91f      	bls.n	8002fd0 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d01b      	beq.n	8002fd0 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fea3 	bl	8004ce8 <SDMMC_CmdStopTransfer>
 8002fa2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2f      	ldr	r2, [pc, #188]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0ba      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	f043 0208 	orr.w	r2, r3, #8
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0a0      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d012      	beq.n	8003038 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e086      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d063      	beq.n	800310e <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_SD_ReadBlocks+0x308>)
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e06c      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
 800306c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f001 fcdc 	bl	8004a32 <SDIO_ReadFIFO>
 800307a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	b2da      	uxtb	r2, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	3301      	adds	r3, #1
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800308a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308c:	3b01      	subs	r3, #1
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b2da      	uxtb	r2, r3
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	3301      	adds	r3, #1
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	3b01      	subs	r3, #1
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	3301      	adds	r3, #1
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	3b01      	subs	r3, #1
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	0e1b      	lsrs	r3, r3, #24
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	3301      	adds	r3, #1
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	3b01      	subs	r3, #1
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80030d2:	f7fd fc8b 	bl	80009ec <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030de:	429a      	cmp	r2, r3
 80030e0:	d902      	bls.n	80030e8 <HAL_SD_ReadBlocks+0x384>
 80030e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d112      	bne.n	800310e <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_SD_ReadBlocks+0x3ec>)
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01b      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_SD_ReadBlocks+0x3be>
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1a6      	bne.n	8003070 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f240 523a 	movw	r2, #1338	; 0x53a
 800312a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e006      	b.n	8003146 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3748      	adds	r7, #72	; 0x48
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	004005ff 	.word	0x004005ff

08003154 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b092      	sub	sp, #72	; 0x48
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003162:	f7fd fc43 	bl	80009ec <HAL_GetTick>
 8003166:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e182      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	f040 8175 	bne.w	800347e <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800319a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d907      	bls.n	80031b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e169      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2203      	movs	r2, #3
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d002      	beq.n	80031d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	025b      	lsls	r3, r3, #9
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fcd8 	bl	8004b94 <SDMMC_CmdBlockLength>
 80031e4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80031e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00f      	beq.n	800320c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a9c      	ldr	r2, [pc, #624]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e13f      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003218:	2390      	movs	r3, #144	; 0x90
 800321a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f107 0218 	add.w	r2, r7, #24
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fc82 	bl	8004b3c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d90a      	bls.n	8003254 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800324a:	4618      	mov	r0, r3
 800324c:	f001 fd2a 	bl	8004ca4 <SDMMC_CmdWriteMultiBlock>
 8003250:	6478      	str	r0, [r7, #68]	; 0x44
 8003252:	e009      	b.n	8003268 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2210      	movs	r2, #16
 8003258:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fcfd 	bl	8004c60 <SDMMC_CmdWriteSingleBlock>
 8003266:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7c      	ldr	r2, [pc, #496]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0fb      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003298:	e065      	b.n	8003366 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d040      	beq.n	800332a <HAL_SD_WriteBlocks+0x1d6>
 80032a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03d      	beq.n	800332a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	643b      	str	r3, [r7, #64]	; 0x40
 80032b2:	e037      	b.n	8003324 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	3301      	adds	r3, #1
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c2:	3b01      	subs	r3, #1
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	3301      	adds	r3, #1
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	3b01      	subs	r3, #1
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80032de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	041a      	lsls	r2, r3, #16
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	3301      	adds	r3, #1
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f2:	3b01      	subs	r3, #1
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	061a      	lsls	r2, r3, #24
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	3301      	adds	r3, #1
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	3b01      	subs	r3, #1
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f107 0214 	add.w	r2, r7, #20
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f001 fb97 	bl	8004a4c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800331e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003320:	3301      	adds	r3, #1
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	2b07      	cmp	r3, #7
 8003328:	d9c4      	bls.n	80032b4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800332a:	f7fd fb5f 	bl	80009ec <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <HAL_SD_WriteBlocks+0x1ec>
 800333a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333c:	2b00      	cmp	r3, #0
 800333e:	d112      	bne.n	8003366 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a47      	ldr	r2, [pc, #284]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	431a      	orrs	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e092      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003370:	2b00      	cmp	r3, #0
 8003372:	d092      	beq.n	800329a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <HAL_SD_WriteBlocks+0x274>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d91f      	bls.n	80033c8 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	2b03      	cmp	r3, #3
 800338e:	d01b      	beq.n	80033c8 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fca7 	bl	8004ce8 <SDMMC_CmdStopTransfer>
 800339a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e061      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d012      	beq.n	80033fc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f043 0208 	orr.w	r2, r3, #8
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e047      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a15      	ldr	r2, [pc, #84]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	f043 0202 	orr.w	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e02d      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d014      	beq.n	8003468 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <HAL_SD_WriteBlocks+0x310>)
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f043 0210 	orr.w	r2, r3, #16
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e013      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
 8003464:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003470:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e006      	b.n	800348c <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3748      	adds	r7, #72	; 0x48
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	0f9b      	lsrs	r3, r3, #30
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c0:	0e1b      	lsrs	r3, r3, #24
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f4:	0d1b      	lsrs	r3, r3, #20
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003512:	0bdb      	lsrs	r3, r3, #15
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	b2da      	uxtb	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003524:	0b9b      	lsrs	r3, r3, #14
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	b2da      	uxtb	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003536:	0b5b      	lsrs	r3, r3, #13
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003548:	0b1b      	lsrs	r3, r3, #12
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b2da      	uxtb	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2200      	movs	r2, #0
 800355a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	2b00      	cmp	r3, #0
 8003562:	d163      	bne.n	800362c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003568:	009a      	lsls	r2, r3, #2
 800356a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003574:	0f92      	lsrs	r2, r2, #30
 8003576:	431a      	orrs	r2, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003580:	0edb      	lsrs	r3, r3, #27
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	b2da      	uxtb	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	0e1b      	lsrs	r3, r3, #24
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	b2da      	uxtb	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	0d5b      	lsrs	r3, r3, #21
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c8:	0bdb      	lsrs	r3, r3, #15
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	7e1b      	ldrb	r3, [r3, #24]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	3302      	adds	r3, #2
 80035ec:	2201      	movs	r2, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035f6:	fb02 f203 	mul.w	r2, r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	7a1b      	ldrb	r3, [r3, #8]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	2201      	movs	r2, #1
 800360a:	409a      	lsls	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003618:	0a52      	lsrs	r2, r2, #9
 800361a:	fb02 f203 	mul.w	r2, r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003628:	661a      	str	r2, [r3, #96]	; 0x60
 800362a:	e031      	b.n	8003690 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	2b01      	cmp	r3, #1
 8003632:	d11d      	bne.n	8003670 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	431a      	orrs	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	3301      	adds	r3, #1
 8003650:	029a      	lsls	r2, r3, #10
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003664:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	661a      	str	r2, [r3, #96]	; 0x60
 800366e:	e00f      	b.n	8003690 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_SD_GetCardCSD+0x344>)
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e09d      	b.n	80037cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003694:	0b9b      	lsrs	r3, r3, #14
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	b2da      	uxtb	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a6:	09db      	lsrs	r3, r3, #7
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	0fdb      	lsrs	r3, r3, #31
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	0f5b      	lsrs	r3, r3, #29
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	0d9b      	lsrs	r3, r3, #22
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	0d5b      	lsrs	r3, r3, #21
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	0bdb      	lsrs	r3, r3, #15
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	0b9b      	lsrs	r3, r3, #14
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	b2da      	uxtb	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	0b5b      	lsrs	r3, r3, #13
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	0b1b      	lsrs	r3, r3, #12
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	b2da      	uxtb	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	004005ff 	.word	0x004005ff

080037dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003834:	b5b0      	push	{r4, r5, r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af04      	add	r7, sp, #16
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2203      	movs	r2, #3
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	2b03      	cmp	r3, #3
 800384c:	d02e      	beq.n	80038ac <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003854:	d106      	bne.n	8003864 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
 8003862:	e029      	b.n	80038b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d10a      	bne.n	8003882 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa01 	bl	8003c74 <SD_WideBus_Enable>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
 8003880:	e01a      	b.n	80038b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fa3e 	bl	8003d0a <SD_WideBus_Disable>
 800388e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
 800389c:	e00c      	b.n	80038b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
 80038aa:	e005      	b.n	80038b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e024      	b.n	800391e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681d      	ldr	r5, [r3, #0]
 80038fa:	466c      	mov	r4, sp
 80038fc:	f107 0318 	add.w	r3, r7, #24
 8003900:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800390e:	4628      	mov	r0, r5
 8003910:	f001 f864 	bl	80049dc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3728      	adds	r7, #40	; 0x28
 8003922:	46bd      	mov	sp, r7
 8003924:	bdb0      	pop	{r4, r5, r7, pc}
 8003926:	bf00      	nop
 8003928:	004005ff 	.word	0x004005ff

0800392c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f970 	bl	8003c24 <SD_SendStatus>
 8003944:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	0a5b      	lsrs	r3, r3, #9
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003962:	693b      	ldr	r3, [r7, #16]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b094      	sub	sp, #80	; 0x50
 8003970:	af04      	add	r7, sp, #16
 8003972:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003974:	2301      	movs	r3, #1
 8003976:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f885 	bl	8004a8c <SDIO_GetPowerState>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003988:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800398c:	e0b7      	b.n	8003afe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	2b03      	cmp	r3, #3
 8003994:	d02f      	beq.n	80039f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f001 faae 	bl	8004efc <SDMMC_CmdSendCID>
 80039a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <SD_InitCard+0x40>
    {
      return errorstate;
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	e0a8      	b.n	8003afe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f8af 	bl	8004b16 <SDIO_GetResponse>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2104      	movs	r1, #4
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f8a6 	bl	8004b16 <SDIO_GetResponse>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2108      	movs	r1, #8
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f89d 	bl	8004b16 <SDIO_GetResponse>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	210c      	movs	r1, #12
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 f894 	bl	8004b16 <SDIO_GetResponse>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d00d      	beq.n	8003a1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f107 020e 	add.w	r2, r7, #14
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fab4 	bl	8004f76 <SDMMC_CmdSetRelAdd>
 8003a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <SD_InitCard+0xae>
    {
      return errorstate;
 8003a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a18:	e071      	b.n	8003afe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d036      	beq.n	8003a90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003a22:	89fb      	ldrh	r3, [r7, #14]
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f001 fa7e 	bl	8004f38 <SDMMC_CmdSendCSD>
 8003a3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a46:	e05a      	b.n	8003afe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f861 	bl	8004b16 <SDIO_GetResponse>
 8003a54:	4602      	mov	r2, r0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 f858 	bl	8004b16 <SDIO_GetResponse>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2108      	movs	r1, #8
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f84f 	bl	8004b16 <SDIO_GetResponse>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	210c      	movs	r1, #12
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f846 	bl	8004b16 <SDIO_GetResponse>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2104      	movs	r1, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f83d 	bl	8004b16 <SDIO_GetResponse>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	0d1a      	lsrs	r2, r3, #20
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fcf2 	bl	8003494 <HAL_SD_GetCardCSD>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003aba:	e020      	b.n	8003afe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4623      	mov	r3, r4
 8003ace:	4608      	mov	r0, r1
 8003ad0:	f001 f92c 	bl	8004d2c <SDMMC_CmdSelDesel>
 8003ad4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <SD_InitCard+0x174>
  {
    return errorstate;
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	e00e      	b.n	8003afe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681d      	ldr	r5, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	466c      	mov	r4, sp
 8003ae8:	f103 0210 	add.w	r2, r3, #16
 8003aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003af2:	3304      	adds	r3, #4
 8003af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af6:	4628      	mov	r0, r5
 8003af8:	f000 ff70 	bl	80049dc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3740      	adds	r7, #64	; 0x40
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003b08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f926 	bl	8004d72 <SDMMC_CmdGoIdleState>
 8003b26:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	e072      	b.n	8003c18 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 f939 	bl	8004dae <SDMMC_CmdOperCond>
 8003b3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 f90f 	bl	8004d72 <SDMMC_CmdGoIdleState>
 8003b54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	e05b      	b.n	8003c18 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d137      	bne.n	8003bde <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 f939 	bl	8004dec <SDMMC_CmdAppCommand>
 8003b7a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02d      	beq.n	8003bde <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b86:	e047      	b.n	8003c18 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f92c 	bl	8004dec <SDMMC_CmdAppCommand>
 8003b94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	e03b      	b.n	8003c18 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	491e      	ldr	r1, [pc, #120]	; (8003c20 <SD_PowerON+0x118>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 f942 	bl	8004e30 <SDMMC_CmdAppOperCommand>
 8003bac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bb8:	e02e      	b.n	8003c18 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 ffa8 	bl	8004b16 <SDIO_GetResponse>
 8003bc6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0fdb      	lsrs	r3, r3, #31
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <SD_PowerON+0xcc>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <SD_PowerON+0xce>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]

    count++;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d802      	bhi.n	8003bee <SD_PowerON+0xe6>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0cc      	beq.n	8003b88 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d902      	bls.n	8003bfe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bfc:	e00c      	b.n	8003c18 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0e:	e002      	b.n	8003c16 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	c1100000 	.word	0xc1100000

08003c24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c38:	e018      	b.n	8003c6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f001 f9b6 	bl	8004fb8 <SDMMC_CmdSendStatus>
 8003c4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	e009      	b.n	8003c6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff59 	bl	8004b16 <SDIO_GetResponse>
 8003c64:	4602      	mov	r2, r0
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 ff43 	bl	8004b16 <SDIO_GetResponse>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c9a:	d102      	bne.n	8003ca2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ca0:	e02f      	b.n	8003d02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f879 	bl	8003da0 <SD_FindSCR>
 8003cae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	e023      	b.n	8003d02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01c      	beq.n	8003cfe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f001 f88b 	bl	8004dec <SDMMC_CmdAppCommand>
 8003cd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	e00f      	b.n	8003d02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f8c4 	bl	8004e76 <SDMMC_CmdBusWidth>
 8003cee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	e003      	b.n	8003d02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e001      	b.n	8003d02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fef8 	bl	8004b16 <SDIO_GetResponse>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d30:	d102      	bne.n	8003d38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d36:	e02f      	b.n	8003d98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f82e 	bl	8003da0 <SD_FindSCR>
 8003d44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	e023      	b.n	8003d98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01c      	beq.n	8003d94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f001 f840 	bl	8004dec <SDMMC_CmdAppCommand>
 8003d6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	e00f      	b.n	8003d98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 f879 	bl	8004e76 <SDMMC_CmdBusWidth>
 8003d84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	e003      	b.n	8003d98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e001      	b.n	8003d98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b08f      	sub	sp, #60	; 0x3c
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003daa:	f7fc fe1f 	bl	80009ec <HAL_GetTick>
 8003dae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2108      	movs	r1, #8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fee4 	bl	8004b94 <SDMMC_CmdBlockLength>
 8003dcc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	e0a9      	b.n	8003f2c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f001 f801 	bl	8004dec <SDMMC_CmdAppCommand>
 8003dea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	e09a      	b.n	8003f2c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003e00:	2330      	movs	r3, #48	; 0x30
 8003e02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003e04:	2302      	movs	r3, #2
 8003e06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f107 0210 	add.w	r2, r7, #16
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fe8e 	bl	8004b3c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f848 	bl	8004eba <SDMMC_CmdSendSCR>
 8003e2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d022      	beq.n	8003e78 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	e07a      	b.n	8003f2c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6819      	ldr	r1, [r3, #0]
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	f107 0208 	add.w	r2, r7, #8
 8003e50:	18d4      	adds	r4, r2, r3
 8003e52:	4608      	mov	r0, r1
 8003e54:	f000 fded 	bl	8004a32 <SDIO_ReadFIFO>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	6023      	str	r3, [r4, #0]
      index++;
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	3301      	adds	r3, #1
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e62:	f7fc fdc3 	bl	80009ec <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d102      	bne.n	8003e78 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e76:	e059      	b.n	8003f2c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7e:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0d6      	beq.n	8003e36 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	e044      	b.n	8003f2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e037      	b.n	8003f2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	e02a      	b.n	8003f2c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	061a      	lsls	r2, r3, #24
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ef6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	0e1b      	lsrs	r3, r3, #24
 8003efc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	601a      	str	r2, [r3, #0]
    scr++;
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	3304      	adds	r3, #4
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	061a      	lsls	r2, r3, #24
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	0e1b      	lsrs	r3, r3, #24
 8003f24:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	373c      	adds	r7, #60	; 0x3c
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd90      	pop	{r4, r7, pc}

08003f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e056      	b.n	8003ff4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f007 fb7b 	bl	800b65c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	ea42 0103 	orr.w	r1, r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	f003 0104 	and.w	r1, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * const pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_SPI_Transmit+0x22>
 800401a:	2302      	movs	r3, #2
 800401c:	e11e      	b.n	800425c <HAL_SPI_Transmit+0x260>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004026:	f7fc fce1 	bl	80009ec <HAL_GetTick>
 800402a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d002      	beq.n	8004042 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800403c:	2302      	movs	r3, #2
 800403e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004040:	e103      	b.n	800424a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_Transmit+0x52>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004052:	e0fa      	b.n	800424a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2203      	movs	r2, #3
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409a:	d107      	bne.n	80040ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d007      	beq.n	80040ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d14b      	bne.n	800416c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_SPI_Transmit+0xe6>
 80040dc:	8afb      	ldrh	r3, [r7, #22]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d13e      	bne.n	8004160 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	1c9a      	adds	r2, r3, #2
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004106:	e02b      	b.n	8004160 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d112      	bne.n	800413c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	881a      	ldrh	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	1c9a      	adds	r2, r3, #2
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	86da      	strh	r2, [r3, #54]	; 0x36
 800413a:	e011      	b.n	8004160 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413c:	f7fc fc56 	bl	80009ec <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d803      	bhi.n	8004154 <HAL_SPI_Transmit+0x158>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d102      	bne.n	800415a <HAL_SPI_Transmit+0x15e>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800415e:	e074      	b.n	800424a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ce      	bne.n	8004108 <HAL_SPI_Transmit+0x10c>
 800416a:	e04c      	b.n	8004206 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_Transmit+0x17e>
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d140      	bne.n	80041fc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041a0:	e02c      	b.n	80041fc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d113      	bne.n	80041d8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80041d6:	e011      	b.n	80041fc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d8:	f7fc fc08 	bl	80009ec <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d803      	bhi.n	80041f0 <HAL_SPI_Transmit+0x1f4>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d102      	bne.n	80041f6 <HAL_SPI_Transmit+0x1fa>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041fa:	e026      	b.n	800424a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1cd      	bne.n	80041a2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fba4 	bl	8004958 <SPI_EndRxTxTransaction>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e000      	b.n	800424a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004248:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800425a:	7ffb      	ldrb	r3, [r7, #31]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004280:	d112      	bne.n	80042a8 <HAL_SPI_Receive+0x44>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10e      	bne.n	80042a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2204      	movs	r2, #4
 800428e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f8e9 	bl	8004476 <HAL_SPI_TransmitReceive>
 80042a4:	4603      	mov	r3, r0
 80042a6:	e0e2      	b.n	800446e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_SPI_Receive+0x52>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0db      	b.n	800446e <HAL_SPI_Receive+0x20a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042be:	f7fc fb95 	bl	80009ec <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
 80042d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042d4:	e0c2      	b.n	800445c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SPI_Receive+0x7e>
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042e6:	e0b9      	b.n	800445c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432e:	d107      	bne.n	8004340 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d007      	beq.n	800435e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d162      	bne.n	800442c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004366:	e02e      	b.n	80043c6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d115      	bne.n	80043a2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f103 020c 	add.w	r2, r3, #12
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043a0:	e011      	b.n	80043c6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a2:	f7fc fb23 	bl	80009ec <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d803      	bhi.n	80043ba <HAL_SPI_Receive+0x156>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d102      	bne.n	80043c0 <HAL_SPI_Receive+0x15c>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043c4:	e04a      	b.n	800445c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1cb      	bne.n	8004368 <HAL_SPI_Receive+0x104>
 80043d0:	e031      	b.n	8004436 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d113      	bne.n	8004408 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	b292      	uxth	r2, r2
 80043ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	1c9a      	adds	r2, r3, #2
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004406:	e011      	b.n	800442c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004408:	f7fc faf0 	bl	80009ec <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d803      	bhi.n	8004420 <HAL_SPI_Receive+0x1bc>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Receive+0x1c2>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	75fb      	strb	r3, [r7, #23]
          goto error;
 800442a:	e017      	b.n	800445c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1cd      	bne.n	80043d2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa27 	bl	800488e <SPI_EndRxTransaction>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	75fb      	strb	r3, [r7, #23]
 8004458:	e000      	b.n	800445c <HAL_SPI_Receive+0x1f8>
  }

error :
 800445a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800446c:	7dfb      	ldrb	r3, [r7, #23]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b08c      	sub	sp, #48	; 0x30
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004484:	2301      	movs	r3, #1
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_SPI_TransmitReceive+0x26>
 8004498:	2302      	movs	r3, #2
 800449a:	e18a      	b.n	80047b2 <HAL_SPI_TransmitReceive+0x33c>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a4:	f7fc faa2 	bl	80009ec <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044ba:	887b      	ldrh	r3, [r7, #2]
 80044bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d00f      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x70>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044cc:	d107      	bne.n	80044de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <HAL_SPI_TransmitReceive+0x68>
 80044d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d003      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044e4:	e15b      	b.n	800479e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x82>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x82>
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044fe:	e14e      	b.n	800479e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b04      	cmp	r3, #4
 800450a:	d003      	beq.n	8004514 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2205      	movs	r2, #5
 8004510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	887a      	ldrh	r2, [r7, #2]
 800452a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	887a      	ldrh	r2, [r7, #2]
 8004536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d007      	beq.n	8004568 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d178      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x10a>
 800457a:	8b7b      	ldrh	r3, [r7, #26]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d166      	bne.n	800464e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	881a      	ldrh	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	1c9a      	adds	r2, r3, #2
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a4:	e053      	b.n	800464e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d11b      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x176>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x176>
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d113      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d119      	bne.n	800462e <HAL_SPI_TransmitReceive+0x1b8>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d014      	beq.n	800462e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	b292      	uxth	r2, r2
 8004610:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800462a:	2301      	movs	r3, #1
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800462e:	f7fc f9dd 	bl	80009ec <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800463a:	429a      	cmp	r2, r3
 800463c:	d807      	bhi.n	800464e <HAL_SPI_TransmitReceive+0x1d8>
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d003      	beq.n	800464e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800464c:	e0a7      	b.n	800479e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1a6      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x130>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1a1      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x130>
 8004662:	e07c      	b.n	800475e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x1fc>
 800466c:	8b7b      	ldrh	r3, [r7, #26]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d16b      	bne.n	800474a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004698:	e057      	b.n	800474a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d11c      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x26c>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x26c>
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d114      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	7812      	ldrb	r2, [r2, #0]
 80046c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d119      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x2ae>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d014      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004720:	2301      	movs	r3, #1
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004724:	f7fc f962 	bl	80009ec <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004730:	429a      	cmp	r2, r3
 8004732:	d803      	bhi.n	800473c <HAL_SPI_TransmitReceive+0x2c6>
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d102      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x2cc>
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004748:	e029      	b.n	800479e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1a2      	bne.n	800469a <HAL_SPI_TransmitReceive+0x224>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d19d      	bne.n	800469a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f8f8 	bl	8004958 <SPI_EndRxTxTransaction>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800477a:	e010      	b.n	800479e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	e000      	b.n	800479e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800479c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3730      	adds	r7, #48	; 0x30
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ca:	e04c      	b.n	8004866 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d048      	beq.n	8004866 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047d4:	f7fc f90a 	bl	80009ec <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d902      	bls.n	80047ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d13d      	bne.n	8004866 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004802:	d111      	bne.n	8004828 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	d004      	beq.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004816:	d107      	bne.n	8004828 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004826:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004830:	d10f      	bne.n	8004852 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00f      	b.n	8004886 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	429a      	cmp	r2, r3
 8004882:	d1a3      	bne.n	80047cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af02      	add	r7, sp, #8
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a2:	d111      	bne.n	80048c8 <SPI_EndRxTransaction+0x3a>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ac:	d004      	beq.n	80048b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	d107      	bne.n	80048c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d0:	d12a      	bne.n	8004928 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048da:	d012      	beq.n	8004902 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff ff67 	bl	80047ba <SPI_WaitFlagStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02d      	beq.n	800494e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e026      	b.n	8004950 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2200      	movs	r2, #0
 800490a:	2101      	movs	r1, #1
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff ff54 	bl	80047ba <SPI_WaitFlagStateUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e013      	b.n	8004950 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	2101      	movs	r1, #1
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff ff41 	bl	80047ba <SPI_WaitFlagStateUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e000      	b.n	8004950 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <SPI_EndRxTxTransaction+0x7c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <SPI_EndRxTxTransaction+0x80>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	0d5b      	lsrs	r3, r3, #21
 8004970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004982:	d112      	bne.n	80049aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff ff13 	bl	80047ba <SPI_WaitFlagStateUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e00f      	b.n	80049ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b80      	cmp	r3, #128	; 0x80
 80049c2:	d0f2      	beq.n	80049aa <SPI_EndRxTxTransaction+0x52>
 80049c4:	e000      	b.n	80049c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80049c6:	bf00      	nop
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000008 	.word	0x20000008
 80049d8:	165e9f81 	.word	0x165e9f81

080049dc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80049dc:	b084      	sub	sp, #16
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	f107 001c 	add.w	r0, r7, #28
 80049ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80049f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80049f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80049f6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80049fa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80049fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004a02:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004a06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	b004      	add	sp, #16
 8004a30:	4770      	bx	lr

08004a32 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f7fb ffc1 	bl	8000a04 <HAL_Delay>
  
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0303 	and.w	r3, r3, #3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ac6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004acc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ad2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ae2:	f023 030f 	bic.w	r3, r3, #15
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	b2db      	uxtb	r3, r3
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3314      	adds	r3, #20
 8004b24:	461a      	mov	r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
}  
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b62:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004b68:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004b6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0

}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ba6:	2340      	movs	r3, #64	; 0x40
 8004ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bb4:	f107 0308 	add.w	r3, r7, #8
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ff74 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	2110      	movs	r1, #16
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa40 	bl	800504c <SDMMC_GetCmdResp1>
 8004bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bce:	69fb      	ldr	r3, [r7, #28]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004be6:	2311      	movs	r3, #17
 8004be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bea:	2340      	movs	r3, #64	; 0x40
 8004bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bf8:	f107 0308 	add.w	r3, r7, #8
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff ff52 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	2111      	movs	r1, #17
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa1e 	bl	800504c <SDMMC_GetCmdResp1>
 8004c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c12:	69fb      	ldr	r3, [r7, #28]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c2a:	2312      	movs	r3, #18
 8004c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c2e:	2340      	movs	r3, #64	; 0x40
 8004c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c3c:	f107 0308 	add.w	r3, r7, #8
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ff30 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	2112      	movs	r1, #18
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9fc 	bl	800504c <SDMMC_GetCmdResp1>
 8004c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c56:	69fb      	ldr	r3, [r7, #28]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c6e:	2318      	movs	r3, #24
 8004c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c80:	f107 0308 	add.w	r3, r7, #8
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff ff0e 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	2118      	movs	r1, #24
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f9da 	bl	800504c <SDMMC_GetCmdResp1>
 8004c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cb6:	2340      	movs	r3, #64	; 0x40
 8004cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cc4:	f107 0308 	add.w	r3, r7, #8
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff feec 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd4:	2119      	movs	r1, #25
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9b8 	bl	800504c <SDMMC_GetCmdResp1>
 8004cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cde:	69fb      	ldr	r3, [r7, #28]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fecb 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d12:	4a05      	ldr	r2, [pc, #20]	; (8004d28 <SDMMC_CmdStopTransfer+0x40>)
 8004d14:	210c      	movs	r1, #12
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f998 	bl	800504c <SDMMC_GetCmdResp1>
 8004d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	05f5e100 	.word	0x05f5e100

08004d2c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d3c:	2307      	movs	r3, #7
 8004d3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d40:	2340      	movs	r3, #64	; 0x40
 8004d42:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	4619      	mov	r1, r3
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fea7 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	2107      	movs	r1, #7
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f973 	bl	800504c <SDMMC_GetCmdResp1>
 8004d66:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3728      	adds	r7, #40	; 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b088      	sub	sp, #32
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fe86 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f92d 	bl	8004ffc <SDMMC_GetCmdError>
 8004da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004da4:	69fb      	ldr	r3, [r7, #28]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b088      	sub	sp, #32
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004db6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fe67 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fb16 	bl	800540c <SDMMC_GetCmdResp7>
 8004de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004de2:	69fb      	ldr	r3, [r7, #28]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004dfa:	2337      	movs	r3, #55	; 0x37
 8004dfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dfe:	2340      	movs	r3, #64	; 0x40
 8004e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fe48 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	2137      	movs	r1, #55	; 0x37
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f914 	bl	800504c <SDMMC_GetCmdResp1>
 8004e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e46:	2329      	movs	r3, #41	; 0x29
 8004e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e58:	f107 0308 	add.w	r3, r7, #8
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fe22 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fa23 	bl	80052b0 <SDMMC_GetCmdResp3>
 8004e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b088      	sub	sp, #32
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004e84:	2306      	movs	r3, #6
 8004e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e88:	2340      	movs	r3, #64	; 0x40
 8004e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fe03 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	2106      	movs	r1, #6
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f8cf 	bl	800504c <SDMMC_GetCmdResp1>
 8004eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004ec6:	2333      	movs	r3, #51	; 0x33
 8004ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eca:	2340      	movs	r3, #64	; 0x40
 8004ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fde2 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	2133      	movs	r1, #51	; 0x33
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8ae 	bl	800504c <SDMMC_GetCmdResp1>
 8004ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f0c:	23c0      	movs	r3, #192	; 0xc0
 8004f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fdc1 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f97c 	bl	8005224 <SDMMC_GetCmdResp2>
 8004f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f46:	2309      	movs	r3, #9
 8004f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f4a:	23c0      	movs	r3, #192	; 0xc0
 8004f4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f58:	f107 0308 	add.w	r3, r7, #8
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fda2 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f95d 	bl	8005224 <SDMMC_GetCmdResp2>
 8004f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b088      	sub	sp, #32
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f84:	2303      	movs	r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f96:	f107 0308 	add.w	r3, r7, #8
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fd83 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	2103      	movs	r1, #3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f9bc 	bl	8005324 <SDMMC_GetCmdResp6>
 8004fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fae:	69fb      	ldr	r3, [r7, #28]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004fc6:	230d      	movs	r3, #13
 8004fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fca:	2340      	movs	r3, #64	; 0x40
 8004fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fd62 	bl	8004aa8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	210d      	movs	r1, #13
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f82e 	bl	800504c <SDMMC_GetCmdResp1>
 8004ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ffc:	b490      	push	{r4, r7}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <SDMMC_GetCmdError+0x48>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0f      	ldr	r2, [pc, #60]	; (8005048 <SDMMC_GetCmdError+0x4c>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0a5b      	lsrs	r3, r3, #9
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005018:	4623      	mov	r3, r4
 800501a:	1e5c      	subs	r4, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005020:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005024:	e009      	b.n	800503a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f2      	beq.n	8005018 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	22c5      	movs	r2, #197	; 0xc5
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bc90      	pop	{r4, r7}
 8005042:	4770      	bx	lr
 8005044:	20000008 	.word	0x20000008
 8005048:	10624dd3 	.word	0x10624dd3

0800504c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	460b      	mov	r3, r1
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800505a:	4b6f      	ldr	r3, [pc, #444]	; (8005218 <SDMMC_GetCmdResp1+0x1cc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6f      	ldr	r2, [pc, #444]	; (800521c <SDMMC_GetCmdResp1+0x1d0>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0a5b      	lsrs	r3, r3, #9
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800506c:	4623      	mov	r3, r4
 800506e:	1e5c      	subs	r4, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005078:	e0c9      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <SDMMC_GetCmdResp1+0x20>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1eb      	bne.n	800506c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2204      	movs	r2, #4
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050a6:	2304      	movs	r3, #4
 80050a8:	e0b1      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0a6      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	22c5      	movs	r2, #197	; 0xc5
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fd18 	bl	8004afc <SDIO_GetCommandResponse>
 80050cc:	4603      	mov	r3, r0
 80050ce:	461a      	mov	r2, r3
 80050d0:	7afb      	ldrb	r3, [r7, #11]
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d001      	beq.n	80050da <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e099      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050da:	2100      	movs	r1, #0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff fd1a 	bl	8004b16 <SDIO_GetResponse>
 80050e2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4b4e      	ldr	r3, [pc, #312]	; (8005220 <SDMMC_GetCmdResp1+0x1d4>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e08d      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da02      	bge.n	80050fe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fc:	e087      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005108:	2340      	movs	r3, #64	; 0x40
 800510a:	e080      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005116:	2380      	movs	r3, #128	; 0x80
 8005118:	e079      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005128:	e071      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005138:	e069      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005148:	e061      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005158:	e059      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005168:	e051      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005178:	e049      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005188:	e041      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005198:	e039      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80051a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a8:	e031      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80051b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051b8:	e029      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80051c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051c8:	e021      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80051d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051d8:	e019      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80051e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051e8:	e011      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80051f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051f8:	e009      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005204:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005208:	e001      	b.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800520a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	bd90      	pop	{r4, r7, pc}
 8005216:	bf00      	nop
 8005218:	20000008 	.word	0x20000008
 800521c:	10624dd3 	.word	0x10624dd3
 8005220:	fdffe008 	.word	0xfdffe008

08005224 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005224:	b490      	push	{r4, r7}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <SDMMC_GetCmdResp2+0x84>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <SDMMC_GetCmdResp2+0x88>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0a5b      	lsrs	r3, r3, #9
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005240:	4623      	mov	r3, r4
 8005242:	1e5c      	subs	r4, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800524c:	e026      	b.n	800529c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005252:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <SDMMC_GetCmdResp2+0x1c>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1eb      	bne.n	8005240 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2204      	movs	r2, #4
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800527a:	2304      	movs	r3, #4
 800527c:	e00e      	b.n	800529c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005290:	2301      	movs	r3, #1
 8005292:	e003      	b.n	800529c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	22c5      	movs	r2, #197	; 0xc5
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc90      	pop	{r4, r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20000008 	.word	0x20000008
 80052ac:	10624dd3 	.word	0x10624dd3

080052b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80052b0:	b490      	push	{r4, r7}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052b8:	4b18      	ldr	r3, [pc, #96]	; (800531c <SDMMC_GetCmdResp3+0x6c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <SDMMC_GetCmdResp3+0x70>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0a5b      	lsrs	r3, r3, #9
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80052cc:	4623      	mov	r3, r4
 80052ce:	1e5c      	subs	r4, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052d8:	e01b      	b.n	8005312 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <SDMMC_GetCmdResp3+0x1c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1eb      	bne.n	80052cc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2204      	movs	r2, #4
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005306:	2304      	movs	r3, #4
 8005308:	e003      	b.n	8005312 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	22c5      	movs	r2, #197	; 0xc5
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bc90      	pop	{r4, r7}
 800531a:	4770      	bx	lr
 800531c:	20000008 	.word	0x20000008
 8005320:	10624dd3 	.word	0x10624dd3

08005324 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	460b      	mov	r3, r1
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005332:	4b34      	ldr	r3, [pc, #208]	; (8005404 <SDMMC_GetCmdResp6+0xe0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a34      	ldr	r2, [pc, #208]	; (8005408 <SDMMC_GetCmdResp6+0xe4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	0a5b      	lsrs	r3, r3, #9
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005346:	4623      	mov	r3, r4
 8005348:	1e5c      	subs	r4, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800534e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005352:	e052      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005358:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <SDMMC_GetCmdResp6+0x22>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1eb      	bne.n	8005346 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2204      	movs	r2, #4
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005380:	2304      	movs	r3, #4
 8005382:	e03a      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005396:	2301      	movs	r3, #1
 8005398:	e02f      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff fbae 	bl	8004afc <SDIO_GetCommandResponse>
 80053a0:	4603      	mov	r3, r0
 80053a2:	461a      	mov	r2, r3
 80053a4:	7afb      	ldrb	r3, [r7, #11]
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d001      	beq.n	80053ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e025      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22c5      	movs	r2, #197	; 0xc5
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053b4:	2100      	movs	r1, #0
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fbad 	bl	8004b16 <SDIO_GetResponse>
 80053bc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e011      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053e4:	e009      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f4:	e001      	b.n	80053fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	bf00      	nop
 8005404:	20000008 	.word	0x20000008
 8005408:	10624dd3 	.word	0x10624dd3

0800540c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800540c:	b490      	push	{r4, r7}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005414:	4b21      	ldr	r3, [pc, #132]	; (800549c <SDMMC_GetCmdResp7+0x90>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <SDMMC_GetCmdResp7+0x94>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	0a5b      	lsrs	r3, r3, #9
 8005420:	f241 3288 	movw	r2, #5000	; 0x1388
 8005424:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005428:	4623      	mov	r3, r4
 800542a:	1e5c      	subs	r4, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005434:	e02c      	b.n	8005490 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <SDMMC_GetCmdResp7+0x1c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1eb      	bne.n	8005428 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005462:	2304      	movs	r3, #4
 8005464:	e014      	b.n	8005490 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005478:	2301      	movs	r3, #1
 800547a:	e009      	b.n	8005490 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2240      	movs	r2, #64	; 0x40
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800548e:	2300      	movs	r3, #0
  
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bc90      	pop	{r4, r7}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000008 	.word	0x20000008
 80054a0:	10624dd3 	.word	0x10624dd3

080054a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <disk_status+0x30>)
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	79fa      	ldrb	r2, [r7, #7]
 80054bc:	4905      	ldr	r1, [pc, #20]	; (80054d4 <disk_status+0x30>)
 80054be:	440a      	add	r2, r1
 80054c0:	7a12      	ldrb	r2, [r2, #8]
 80054c2:	4610      	mov	r0, r2
 80054c4:	4798      	blx	r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200000b8 	.word	0x200000b8

080054d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <disk_initialize+0x48>)
 80054ea:	5cd3      	ldrb	r3, [r2, r3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	4a0b      	ldr	r2, [pc, #44]	; (8005520 <disk_initialize+0x48>)
 80054f4:	2101      	movs	r1, #1
 80054f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <disk_initialize+0x48>)
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	79fa      	ldrb	r2, [r7, #7]
 8005506:	4906      	ldr	r1, [pc, #24]	; (8005520 <disk_initialize+0x48>)
 8005508:	440a      	add	r2, r1
 800550a:	7a12      	ldrb	r2, [r2, #8]
 800550c:	4610      	mov	r0, r2
 800550e:	4798      	blx	r3
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200000b8 	.word	0x200000b8

08005524 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <disk_read+0x3c>)
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	689c      	ldr	r4, [r3, #8]
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	4a07      	ldr	r2, [pc, #28]	; (8005560 <disk_read+0x3c>)
 8005544:	4413      	add	r3, r2
 8005546:	7a18      	ldrb	r0, [r3, #8]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	47a0      	blx	r4
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
  return res;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd90      	pop	{r4, r7, pc}
 800555e:	bf00      	nop
 8005560:	200000b8 	.word	0x200000b8

08005564 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <disk_write+0x3c>)
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68dc      	ldr	r4, [r3, #12]
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <disk_write+0x3c>)
 8005584:	4413      	add	r3, r2
 8005586:	7a18      	ldrb	r0, [r3, #8]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	47a0      	blx	r4
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
  return res;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd90      	pop	{r4, r7, pc}
 800559e:	bf00      	nop
 80055a0:	200000b8 	.word	0x200000b8

080055a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	603a      	str	r2, [r7, #0]
 80055ae:	71fb      	strb	r3, [r7, #7]
 80055b0:	460b      	mov	r3, r1
 80055b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <disk_ioctl+0x38>)
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	79fa      	ldrb	r2, [r7, #7]
 80055c2:	4906      	ldr	r1, [pc, #24]	; (80055dc <disk_ioctl+0x38>)
 80055c4:	440a      	add	r2, r1
 80055c6:	7a10      	ldrb	r0, [r2, #8]
 80055c8:	79b9      	ldrb	r1, [r7, #6]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	4798      	blx	r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200000b8 	.word	0x200000b8

080055e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3301      	adds	r3, #1
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	b21a      	sxth	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b21b      	sxth	r3, r3
 8005600:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005602:	89fb      	ldrh	r3, [r7, #14]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3303      	adds	r3, #3
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	3202      	adds	r2, #2
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	3201      	adds	r2, #1
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
	return rv;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	887a      	ldrh	r2, [r7, #2]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	887a      	ldrh	r2, [r7, #2]
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	1c53      	adds	r3, r2, #1
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	6179      	str	r1, [r7, #20]
 800570a:	7812      	ldrb	r2, [r2, #0]
 800570c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3b01      	subs	r3, #1
 8005712:	607b      	str	r3, [r7, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f1      	bne.n	80056fe <mem_cpy+0x1a>
	}
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005726:	b480      	push	{r7}
 8005728:	b087      	sub	sp, #28
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	617a      	str	r2, [r7, #20]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3b01      	subs	r3, #1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f3      	bne.n	8005736 <mem_set+0x10>
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800575a:	b480      	push	{r7}
 800575c:	b089      	sub	sp, #36	; 0x24
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	61fa      	str	r2, [r7, #28]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	4619      	mov	r1, r3
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	61ba      	str	r2, [r7, #24]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	1acb      	subs	r3, r1, r3
 8005786:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <mem_cmp+0x40>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0eb      	beq.n	8005772 <mem_cmp+0x18>

	return r;
 800579a:	697b      	ldr	r3, [r7, #20]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3724      	adds	r7, #36	; 0x24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057b2:	e002      	b.n	80057ba <chk_chr+0x12>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3301      	adds	r3, #1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <chk_chr+0x26>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d1f2      	bne.n	80057b4 <chk_chr+0xc>
	return *str;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	781b      	ldrb	r3, [r3, #0]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e029      	b.n	8005848 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <chk_lock+0xb4>)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4413      	add	r3, r2
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01d      	beq.n	800583e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005802:	4a24      	ldr	r2, [pc, #144]	; (8005894 <chk_lock+0xb4>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4413      	add	r3, r2
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d116      	bne.n	8005842 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <chk_lock+0xb4>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	4413      	add	r3, r2
 800581c:	3304      	adds	r3, #4
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005824:	429a      	cmp	r2, r3
 8005826:	d10c      	bne.n	8005842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005828:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <chk_lock+0xb4>)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	4413      	add	r3, r2
 8005830:	3308      	adds	r3, #8
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005838:	429a      	cmp	r2, r3
 800583a:	d102      	bne.n	8005842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800583c:	e007      	b.n	800584e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800583e:	2301      	movs	r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3301      	adds	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d9d2      	bls.n	80057f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d109      	bne.n	8005868 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d102      	bne.n	8005860 <chk_lock+0x80>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d101      	bne.n	8005864 <chk_lock+0x84>
 8005860:	2300      	movs	r3, #0
 8005862:	e010      	b.n	8005886 <chk_lock+0xa6>
 8005864:	2312      	movs	r3, #18
 8005866:	e00e      	b.n	8005886 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <chk_lock+0xa0>
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <chk_lock+0xb4>)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	4413      	add	r3, r2
 8005876:	330c      	adds	r3, #12
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587e:	d101      	bne.n	8005884 <chk_lock+0xa4>
 8005880:	2310      	movs	r3, #16
 8005882:	e000      	b.n	8005886 <chk_lock+0xa6>
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000098 	.word	0x20000098

08005898 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800589e:	2300      	movs	r3, #0
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	e002      	b.n	80058aa <enq_lock+0x12>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3301      	adds	r3, #1
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d806      	bhi.n	80058be <enq_lock+0x26>
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <enq_lock+0x40>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	4413      	add	r3, r2
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f2      	bne.n	80058a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000098 	.word	0x20000098

080058dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e01f      	b.n	800592c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80058ec:	4a41      	ldr	r2, [pc, #260]	; (80059f4 <inc_lock+0x118>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	4413      	add	r3, r2
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d113      	bne.n	8005926 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80058fe:	4a3d      	ldr	r2, [pc, #244]	; (80059f4 <inc_lock+0x118>)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	4413      	add	r3, r2
 8005906:	3304      	adds	r3, #4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800590e:	429a      	cmp	r2, r3
 8005910:	d109      	bne.n	8005926 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005912:	4a38      	ldr	r2, [pc, #224]	; (80059f4 <inc_lock+0x118>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	4413      	add	r3, r2
 800591a:	3308      	adds	r3, #8
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005922:	429a      	cmp	r2, r3
 8005924:	d006      	beq.n	8005934 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d9dc      	bls.n	80058ec <inc_lock+0x10>
 8005932:	e000      	b.n	8005936 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005934:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d132      	bne.n	80059a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e002      	b.n	8005948 <inc_lock+0x6c>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d806      	bhi.n	800595c <inc_lock+0x80>
 800594e:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <inc_lock+0x118>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	4413      	add	r3, r2
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f2      	bne.n	8005942 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d101      	bne.n	8005966 <inc_lock+0x8a>
 8005962:	2300      	movs	r3, #0
 8005964:	e040      	b.n	80059e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4922      	ldr	r1, [pc, #136]	; (80059f4 <inc_lock+0x118>)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	440b      	add	r3, r1
 8005972:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	491e      	ldr	r1, [pc, #120]	; (80059f4 <inc_lock+0x118>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	440b      	add	r3, r1
 8005980:	3304      	adds	r3, #4
 8005982:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	491a      	ldr	r1, [pc, #104]	; (80059f4 <inc_lock+0x118>)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	440b      	add	r3, r1
 8005990:	3308      	adds	r3, #8
 8005992:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005994:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <inc_lock+0x118>)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	4413      	add	r3, r2
 800599c:	330c      	adds	r3, #12
 800599e:	2200      	movs	r2, #0
 80059a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d009      	beq.n	80059bc <inc_lock+0xe0>
 80059a8:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <inc_lock+0x118>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4413      	add	r3, r2
 80059b0:	330c      	adds	r3, #12
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <inc_lock+0xe0>
 80059b8:	2300      	movs	r3, #0
 80059ba:	e015      	b.n	80059e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <inc_lock+0xf8>
 80059c2:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <inc_lock+0x118>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	4413      	add	r3, r2
 80059ca:	330c      	adds	r3, #12
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	e001      	b.n	80059d8 <inc_lock+0xfc>
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	4906      	ldr	r1, [pc, #24]	; (80059f4 <inc_lock+0x118>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	440b      	add	r3, r1
 80059e0:	330c      	adds	r3, #12
 80059e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	20000098 	.word	0x20000098

080059f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d825      	bhi.n	8005a58 <dec_lock+0x60>
		n = Files[i].ctr;
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <dec_lock+0x74>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	4413      	add	r3, r2
 8005a14:	330c      	adds	r3, #12
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a1a:	89fb      	ldrh	r3, [r7, #14]
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a20:	d101      	bne.n	8005a26 <dec_lock+0x2e>
 8005a22:	2300      	movs	r3, #0
 8005a24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a26:	89fb      	ldrh	r3, [r7, #14]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <dec_lock+0x3a>
 8005a2c:	89fb      	ldrh	r3, [r7, #14]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a32:	4a0e      	ldr	r2, [pc, #56]	; (8005a6c <dec_lock+0x74>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	4413      	add	r3, r2
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	89fa      	ldrh	r2, [r7, #14]
 8005a3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a40:	89fb      	ldrh	r3, [r7, #14]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <dec_lock+0x5a>
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <dec_lock+0x74>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4413      	add	r3, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	737b      	strb	r3, [r7, #13]
 8005a56:	e001      	b.n	8005a5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a58:	2302      	movs	r3, #2
 8005a5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000098 	.word	0x20000098

08005a70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e010      	b.n	8005aa0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a7e:	4a0d      	ldr	r2, [pc, #52]	; (8005ab4 <clear_lock+0x44>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	4413      	add	r3, r2
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d105      	bne.n	8005a9a <clear_lock+0x2a>
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <clear_lock+0x44>)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	4413      	add	r3, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d9eb      	bls.n	8005a7e <clear_lock+0xe>
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000098 	.word	0x20000098

08005ab8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	78db      	ldrb	r3, [r3, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d034      	beq.n	8005b36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	7858      	ldrb	r0, [r3, #1]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005adc:	2301      	movs	r3, #1
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	f7ff fd40 	bl	8005564 <disk_write>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	e022      	b.n	8005b36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	1ad2      	subs	r2, r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d217      	bcs.n	8005b36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	789b      	ldrb	r3, [r3, #2]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	e010      	b.n	8005b30 <sync_window+0x78>
					wsect += fs->fsize;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7858      	ldrb	r0, [r3, #1]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b22:	2301      	movs	r3, #1
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	f7ff fd1d 	bl	8005564 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d8eb      	bhi.n	8005b0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d01b      	beq.n	8005b90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ffad 	bl	8005ab8 <sync_window>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d113      	bne.n	8005b90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	7858      	ldrb	r0, [r3, #1]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b72:	2301      	movs	r3, #1
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	f7ff fcd5 	bl	8005524 <disk_read>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff87 	bl	8005ab8 <sync_window>
 8005baa:	4603      	mov	r3, r0
 8005bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d158      	bne.n	8005c66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d148      	bne.n	8005c4e <sync_fs+0xb2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	791b      	ldrb	r3, [r3, #4]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d144      	bne.n	8005c4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3330      	adds	r3, #48	; 0x30
 8005bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fda9 	bl	8005726 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3330      	adds	r3, #48	; 0x30
 8005bd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bdc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fd38 	bl	8005656 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3330      	adds	r3, #48	; 0x30
 8005bea:	4921      	ldr	r1, [pc, #132]	; (8005c70 <sync_fs+0xd4>)
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fd4d 	bl	800568c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3330      	adds	r3, #48	; 0x30
 8005bf6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005bfa:	491e      	ldr	r1, [pc, #120]	; (8005c74 <sync_fs+0xd8>)
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fd45 	bl	800568c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3330      	adds	r3, #48	; 0x30
 8005c06:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7ff fd3b 	bl	800568c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3330      	adds	r3, #48	; 0x30
 8005c1a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7ff fd31 	bl	800568c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	7858      	ldrb	r0, [r3, #1]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	2301      	movs	r3, #1
 8005c44:	f7ff fc8e 	bl	8005564 <disk_write>
			fs->fsi_flag = 0;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fca4 	bl	80055a4 <disk_ioctl>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <sync_fs+0xca>
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	41615252 	.word	0x41615252
 8005c74:	61417272 	.word	0x61417272

08005c78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	3b02      	subs	r3, #2
 8005c86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	3b02      	subs	r3, #2
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d301      	bcc.n	8005c98 <clust2sect+0x20>
 8005c94:	2300      	movs	r3, #0
 8005c96:	e008      	b.n	8005caa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	895b      	ldrh	r3, [r3, #10]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	fb03 f202 	mul.w	r2, r3, r2
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	4413      	add	r3, r2
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d904      	bls.n	8005cd6 <get_fat+0x20>
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <get_fat+0x26>
		val = 1;	/* Internal error */
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e08c      	b.n	8005df6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d045      	beq.n	8005d76 <get_fat+0xc0>
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d05d      	beq.n	8005daa <get_fat+0xf4>
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d177      	bne.n	8005de2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0a5b      	lsrs	r3, r3, #9
 8005d08:	4413      	add	r3, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6938      	ldr	r0, [r7, #16]
 8005d0e:	f7ff ff17 	bl	8005b40 <move_window>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d167      	bne.n	8005de8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	60fa      	str	r2, [r7, #12]
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4413      	add	r3, r2
 8005d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d2a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	0a5b      	lsrs	r3, r3, #9
 8005d34:	4413      	add	r3, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	6938      	ldr	r0, [r7, #16]
 8005d3a:	f7ff ff01 	bl	8005b40 <move_window>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d153      	bne.n	8005dec <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	461a      	mov	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <get_fat+0xb6>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	091b      	lsrs	r3, r3, #4
 8005d6a:	e002      	b.n	8005d72 <get_fat+0xbc>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d72:	617b      	str	r3, [r7, #20]
			break;
 8005d74:	e03f      	b.n	8005df6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	4413      	add	r3, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	6938      	ldr	r0, [r7, #16]
 8005d84:	f7ff fedc 	bl	8005b40 <move_window>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d130      	bne.n	8005df0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fc1e 	bl	80055e0 <ld_word>
 8005da4:	4603      	mov	r3, r0
 8005da6:	617b      	str	r3, [r7, #20]
			break;
 8005da8:	e025      	b.n	8005df6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6a1a      	ldr	r2, [r3, #32]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	09db      	lsrs	r3, r3, #7
 8005db2:	4413      	add	r3, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	6938      	ldr	r0, [r7, #16]
 8005db8:	f7ff fec2 	bl	8005b40 <move_window>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d118      	bne.n	8005df4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005dd0:	4413      	add	r3, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fc1c 	bl	8005610 <ld_dword>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dde:	617b      	str	r3, [r7, #20]
			break;
 8005de0:	e009      	b.n	8005df6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005de2:	2301      	movs	r3, #1
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e006      	b.n	8005df6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005de8:	bf00      	nop
 8005dea:	e004      	b.n	8005df6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dec:	bf00      	nop
 8005dee:	e002      	b.n	8005df6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005df0:	bf00      	nop
 8005df2:	e000      	b.n	8005df6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005df4:	bf00      	nop
		}
	}

	return val;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	f240 80d6 	bls.w	8005fc4 <put_fat+0x1c4>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	f080 80d0 	bcs.w	8005fc4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d073      	beq.n	8005f14 <put_fat+0x114>
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	f000 8091 	beq.w	8005f54 <put_fat+0x154>
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 80c6 	bne.w	8005fc4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4413      	add	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1a      	ldr	r2, [r3, #32]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	0a5b      	lsrs	r3, r3, #9
 8005e4e:	4413      	add	r3, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fe74 	bl	8005b40 <move_window>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 80a9 	bne.w	8005fb6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	61b9      	str	r1, [r7, #24]
 8005e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e74:	4413      	add	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <put_fat+0x9e>
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	b25a      	sxtb	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e001      	b.n	8005ea2 <put_fat+0xa2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	0a5b      	lsrs	r3, r3, #9
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fe41 	bl	8005b40 <move_window>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d178      	bne.n	8005fba <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed4:	4413      	add	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <put_fat+0xea>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e00e      	b.n	8005f08 <put_fat+0x108>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	f023 030f 	bic.w	r3, r3, #15
 8005ef4:	b25a      	sxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	70da      	strb	r2, [r3, #3]
			break;
 8005f12:	e057      	b.n	8005fc4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1a      	ldr	r2, [r3, #32]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	4413      	add	r3, r2
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff fe0d 	bl	8005b40 <move_window>
 8005f26:	4603      	mov	r3, r0
 8005f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f2a:	7ffb      	ldrb	r3, [r7, #31]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d146      	bne.n	8005fbe <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f3e:	4413      	add	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	b292      	uxth	r2, r2
 8005f44:	4611      	mov	r1, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fb85 	bl	8005656 <st_word>
			fs->wflag = 1;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	70da      	strb	r2, [r3, #3]
			break;
 8005f52:	e037      	b.n	8005fc4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	4413      	add	r3, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff fded 	bl	8005b40 <move_window>
 8005f66:	4603      	mov	r3, r0
 8005f68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f6a:	7ffb      	ldrb	r3, [r7, #31]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d128      	bne.n	8005fc2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f84:	4413      	add	r3, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fb42 	bl	8005610 <ld_dword>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f92:	4323      	orrs	r3, r4
 8005f94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005fa4:	4413      	add	r3, r2
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fb6f 	bl	800568c <st_dword>
			fs->wflag = 1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	70da      	strb	r2, [r3, #3]
			break;
 8005fb4:	e006      	b.n	8005fc4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fb6:	bf00      	nop
 8005fb8:	e004      	b.n	8005fc4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005fc2:	bf00      	nop
		}
	}
	return res;
 8005fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3724      	adds	r7, #36	; 0x24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}

08005fce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b088      	sub	sp, #32
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d904      	bls.n	8005ff4 <remove_chain+0x26>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d301      	bcc.n	8005ff8 <remove_chain+0x2a>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e04b      	b.n	8006090 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	69b8      	ldr	r0, [r7, #24]
 8006006:	f7ff fefb 	bl	8005e00 <put_fat>
 800600a:	4603      	mov	r3, r0
 800600c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800600e:	7ffb      	ldrb	r3, [r7, #31]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <remove_chain+0x4a>
 8006014:	7ffb      	ldrb	r3, [r7, #31]
 8006016:	e03b      	b.n	8006090 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fe4b 	bl	8005cb6 <get_fat>
 8006020:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d031      	beq.n	800608c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <remove_chain+0x64>
 800602e:	2302      	movs	r3, #2
 8006030:	e02e      	b.n	8006090 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d101      	bne.n	800603e <remove_chain+0x70>
 800603a:	2301      	movs	r3, #1
 800603c:	e028      	b.n	8006090 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800603e:	2200      	movs	r2, #0
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	69b8      	ldr	r0, [r7, #24]
 8006044:	f7ff fedc 	bl	8005e00 <put_fat>
 8006048:	4603      	mov	r3, r0
 800604a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <remove_chain+0x88>
 8006052:	7ffb      	ldrb	r3, [r7, #31]
 8006054:	e01c      	b.n	8006090 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	3b02      	subs	r3, #2
 8006060:	429a      	cmp	r2, r3
 8006062:	d20b      	bcs.n	800607c <remove_chain+0xae>
			fs->free_clst++;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	791b      	ldrb	r3, [r3, #4]
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3c6      	bcc.n	8006018 <remove_chain+0x4a>
 800608a:	e000      	b.n	800608e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800608c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10d      	bne.n	80060ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <create_chain+0x2c>
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d31b      	bcc.n	80060fc <create_chain+0x64>
 80060c4:	2301      	movs	r3, #1
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	e018      	b.n	80060fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fdf2 	bl	8005cb6 <get_fat>
 80060d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d801      	bhi.n	80060de <create_chain+0x46>
 80060da:	2301      	movs	r3, #1
 80060dc:	e070      	b.n	80061c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d101      	bne.n	80060ea <create_chain+0x52>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	e06a      	b.n	80061c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d201      	bcs.n	80060f8 <create_chain+0x60>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	e063      	b.n	80061c0 <create_chain+0x128>
		scl = clst;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	429a      	cmp	r2, r3
 800610e:	d307      	bcc.n	8006120 <create_chain+0x88>
				ncl = 2;
 8006110:	2302      	movs	r3, #2
 8006112:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	429a      	cmp	r2, r3
 800611a:	d901      	bls.n	8006120 <create_chain+0x88>
 800611c:	2300      	movs	r3, #0
 800611e:	e04f      	b.n	80061c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fdc7 	bl	8005cb6 <get_fat>
 8006128:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00e      	beq.n	800614e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d003      	beq.n	800613e <create_chain+0xa6>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d101      	bne.n	8006142 <create_chain+0xaa>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	e03e      	b.n	80061c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	429a      	cmp	r2, r3
 8006148:	d1da      	bne.n	8006100 <create_chain+0x68>
 800614a:	2300      	movs	r3, #0
 800614c:	e038      	b.n	80061c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800614e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006150:	f04f 32ff 	mov.w	r2, #4294967295
 8006154:	69f9      	ldr	r1, [r7, #28]
 8006156:	6938      	ldr	r0, [r7, #16]
 8006158:	f7ff fe52 	bl	8005e00 <put_fat>
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <create_chain+0xe2>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6938      	ldr	r0, [r7, #16]
 8006172:	f7ff fe45 	bl	8005e00 <put_fat>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d116      	bne.n	80061ae <create_chain+0x116>
		fs->last_clst = ncl;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	3b02      	subs	r3, #2
 8006190:	429a      	cmp	r2, r3
 8006192:	d804      	bhi.n	800619e <create_chain+0x106>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	1e5a      	subs	r2, r3, #1
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	791b      	ldrb	r3, [r3, #4]
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	711a      	strb	r2, [r3, #4]
 80061ac:	e007      	b.n	80061be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d102      	bne.n	80061ba <create_chain+0x122>
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	e000      	b.n	80061bc <create_chain+0x124>
 80061ba:	2301      	movs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80061be:	69fb      	ldr	r3, [r7, #28]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	3304      	adds	r3, #4
 80061de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	0a5b      	lsrs	r3, r3, #9
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	8952      	ldrh	r2, [r2, #10]
 80061e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1d1a      	adds	r2, r3, #4
 80061f2:	613a      	str	r2, [r7, #16]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <clmt_clust+0x3a>
 80061fe:	2300      	movs	r3, #0
 8006200:	e010      	b.n	8006224 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	d307      	bcc.n	800621a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3304      	adds	r3, #4
 8006216:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006218:	e7e9      	b.n	80061ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800621a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
}
 8006224:	4618      	mov	r0, r3
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006246:	d204      	bcs.n	8006252 <dir_sdi+0x22>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006252:	2302      	movs	r3, #2
 8006254:	e063      	b.n	800631e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <dir_sdi+0x46>
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d902      	bls.n	8006276 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10c      	bne.n	8006296 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	8912      	ldrh	r2, [r2, #8]
 8006284:	4293      	cmp	r3, r2
 8006286:	d301      	bcc.n	800628c <dir_sdi+0x5c>
 8006288:	2302      	movs	r3, #2
 800628a:	e048      	b.n	800631e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	61da      	str	r2, [r3, #28]
 8006294:	e029      	b.n	80062ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	895b      	ldrh	r3, [r3, #10]
 800629a:	025b      	lsls	r3, r3, #9
 800629c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800629e:	e019      	b.n	80062d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6979      	ldr	r1, [r7, #20]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fd06 	bl	8005cb6 <get_fat>
 80062aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d101      	bne.n	80062b8 <dir_sdi+0x88>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e032      	b.n	800631e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d904      	bls.n	80062c8 <dir_sdi+0x98>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d301      	bcc.n	80062cc <dir_sdi+0x9c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e028      	b.n	800631e <dir_sdi+0xee>
			ofs -= csz;
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d2e1      	bcs.n	80062a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80062dc:	6979      	ldr	r1, [r7, #20]
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f7ff fcca 	bl	8005c78 <clust2sect>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <dir_sdi+0xcc>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e010      	b.n	800631e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	0a5b      	lsrs	r3, r3, #9
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	441a      	add	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	3320      	adds	r3, #32
 800633c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <dir_next+0x28>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800634c:	d301      	bcc.n	8006352 <dir_next+0x2c>
 800634e:	2304      	movs	r3, #4
 8006350:	e0aa      	b.n	80064a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 8098 	bne.w	800648e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	8912      	ldrh	r2, [r2, #8]
 8006378:	4293      	cmp	r3, r2
 800637a:	f0c0 8088 	bcc.w	800648e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	61da      	str	r2, [r3, #28]
 8006384:	2304      	movs	r3, #4
 8006386:	e08f      	b.n	80064a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	0a5b      	lsrs	r3, r3, #9
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	8952      	ldrh	r2, [r2, #10]
 8006390:	3a01      	subs	r2, #1
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d17a      	bne.n	800648e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7ff fc88 	bl	8005cb6 <get_fat>
 80063a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d801      	bhi.n	80063b2 <dir_next+0x8c>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e07a      	b.n	80064a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d101      	bne.n	80063be <dir_next+0x98>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e074      	b.n	80064a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d358      	bcc.n	800647a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	61da      	str	r2, [r3, #28]
 80063d4:	2304      	movs	r3, #4
 80063d6:	e067      	b.n	80064a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7ff fe59 	bl	8006098 <create_chain>
 80063e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <dir_next+0xcc>
 80063ee:	2307      	movs	r3, #7
 80063f0:	e05a      	b.n	80064a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <dir_next+0xd6>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e055      	b.n	80064a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d101      	bne.n	8006408 <dir_next+0xe2>
 8006404:	2301      	movs	r3, #1
 8006406:	e04f      	b.n	80064a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fb55 	bl	8005ab8 <sync_window>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <dir_next+0xf2>
 8006414:	2301      	movs	r3, #1
 8006416:	e047      	b.n	80064a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3330      	adds	r3, #48	; 0x30
 800641c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff f97f 	bl	8005726 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	6979      	ldr	r1, [r7, #20]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff fc22 	bl	8005c78 <clust2sect>
 8006434:	4602      	mov	r2, r0
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c
 800643a:	e012      	b.n	8006462 <dir_next+0x13c>
						fs->wflag = 1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fb38 	bl	8005ab8 <sync_window>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <dir_next+0x12c>
 800644e:	2301      	movs	r3, #1
 8006450:	e02a      	b.n	80064a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	895b      	ldrh	r3, [r3, #10]
 8006466:	461a      	mov	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4293      	cmp	r3, r2
 800646c:	d3e6      	bcc.n	800643c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad2      	subs	r2, r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fbf8 	bl	8005c78 <clust2sect>
 8006488:	4602      	mov	r2, r0
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a0:	441a      	add	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff feb4 	bl	8006230 <dir_sdi>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d12b      	bne.n	800652a <dir_alloc+0x7a>
		n = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	4619      	mov	r1, r3
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fb2f 	bl	8005b40 <move_window>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11d      	bne.n	8006528 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2be5      	cmp	r3, #229	; 0xe5
 80064f4:	d004      	beq.n	8006500 <dir_alloc+0x50>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3301      	adds	r3, #1
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d102      	bne.n	8006514 <dir_alloc+0x64>
 800650e:	e00c      	b.n	800652a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006514:	2101      	movs	r1, #1
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff ff05 	bl	8006326 <dir_next>
 800651c:	4603      	mov	r3, r0
 800651e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0d7      	beq.n	80064d6 <dir_alloc+0x26>
 8006526:	e000      	b.n	800652a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006528:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	2b04      	cmp	r3, #4
 800652e:	d101      	bne.n	8006534 <dir_alloc+0x84>
 8006530:	2307      	movs	r3, #7
 8006532:	75fb      	strb	r3, [r7, #23]
	return res;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	331a      	adds	r3, #26
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff f847 	bl	80055e0 <ld_word>
 8006552:	4603      	mov	r3, r0
 8006554:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d109      	bne.n	8006572 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	3314      	adds	r3, #20
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f83c 	bl	80055e0 <ld_word>
 8006568:	4603      	mov	r3, r0
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	331a      	adds	r3, #26
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	b292      	uxth	r2, r2
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff f85f 	bl	8005656 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d109      	bne.n	80065b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f103 0214 	add.w	r2, r3, #20
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7ff f851 	bl	8005656 <st_word>
	}
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80065c6:	2304      	movs	r3, #4
 80065c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80065d0:	e03c      	b.n	800664c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f7ff fab1 	bl	8005b40 <move_window>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d136      	bne.n	8006656 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80065f6:	2304      	movs	r3, #4
 80065f8:	75fb      	strb	r3, [r7, #23]
 80065fa:	e031      	b.n	8006660 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	330b      	adds	r3, #11
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006608:	73bb      	strb	r3, [r7, #14]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7bba      	ldrb	r2, [r7, #14]
 800660e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	2be5      	cmp	r3, #229	; 0xe5
 8006614:	d011      	beq.n	800663a <dir_read+0x7e>
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b2e      	cmp	r3, #46	; 0x2e
 800661a:	d00e      	beq.n	800663a <dir_read+0x7e>
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2b0f      	cmp	r3, #15
 8006620:	d00b      	beq.n	800663a <dir_read+0x7e>
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	f023 0320 	bic.w	r3, r3, #32
 8006628:	2b08      	cmp	r3, #8
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	4293      	cmp	r3, r2
 8006638:	d00f      	beq.n	800665a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800663a:	2100      	movs	r1, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fe72 	bl	8006326 <dir_next>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <dir_read+0xa2>
	while (dp->sect) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1be      	bne.n	80065d2 <dir_read+0x16>
 8006654:	e004      	b.n	8006660 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <dir_read+0xa4>
				break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <dir_read+0xa4>
		if (res != FR_OK) break;
 800665e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <dir_read+0xb0>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	61da      	str	r2, [r3, #28]
	return res;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff fdd2 	bl	8006230 <dir_sdi>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <dir_find+0x24>
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	e03e      	b.n	8006718 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	4619      	mov	r1, r3
 80066a0:	6938      	ldr	r0, [r7, #16]
 80066a2:	f7ff fa4d 	bl	8005b40 <move_window>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d12f      	bne.n	8006710 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <dir_find+0x4e>
 80066be:	2304      	movs	r3, #4
 80066c0:	75fb      	strb	r3, [r7, #23]
 80066c2:	e028      	b.n	8006716 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	330b      	adds	r3, #11
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	330b      	adds	r3, #11
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <dir_find+0x86>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a18      	ldr	r0, [r3, #32]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3324      	adds	r3, #36	; 0x24
 80066ee:	220b      	movs	r2, #11
 80066f0:	4619      	mov	r1, r3
 80066f2:	f7ff f832 	bl	800575a <mem_cmp>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80066fc:	2100      	movs	r1, #0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fe11 	bl	8006326 <dir_next>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0c5      	beq.n	800669a <dir_find+0x24>
 800670e:	e002      	b.n	8006716 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006714:	bf00      	nop

	return res;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800672e:	2101      	movs	r1, #1
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff febd 	bl	80064b0 <dir_alloc>
 8006736:	4603      	mov	r3, r0
 8006738:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d11c      	bne.n	800677a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	4619      	mov	r1, r3
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	f7ff f9fa 	bl	8005b40 <move_window>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d111      	bne.n	800677a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	2220      	movs	r2, #32
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe ffe1 	bl	8005726 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a18      	ldr	r0, [r3, #32]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3324      	adds	r3, #36	; 0x24
 800676c:	220b      	movs	r2, #11
 800676e:	4619      	mov	r1, r3
 8006770:	f7fe ffb8 	bl	80056e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2201      	movs	r2, #1
 8006778:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff f9d1 	bl	8005b40 <move_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80067a2:	7afb      	ldrb	r3, [r7, #11]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	22e5      	movs	r2, #229	; 0xe5
 80067ae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80067b6:	7afb      	ldrb	r3, [r7, #11]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2200      	movs	r2, #0
 80067ce:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d04e      	beq.n	8006876 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80067e0:	e021      	b.n	8006826 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	6179      	str	r1, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d100      	bne.n	80067fa <get_fileinfo+0x3a>
 80067f8:	e015      	b.n	8006826 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d101      	bne.n	8006804 <get_fileinfo+0x44>
 8006800:	23e5      	movs	r3, #229	; 0xe5
 8006802:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b09      	cmp	r3, #9
 8006808:	d106      	bne.n	8006818 <get_fileinfo+0x58>
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	613a      	str	r2, [r7, #16]
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	4413      	add	r3, r2
 8006814:	222e      	movs	r2, #46	; 0x2e
 8006816:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	613a      	str	r2, [r7, #16]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	4413      	add	r3, r2
 8006822:	7bfa      	ldrb	r2, [r7, #15]
 8006824:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b0a      	cmp	r3, #10
 800682a:	d9da      	bls.n	80067e2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	3309      	adds	r3, #9
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	7ada      	ldrb	r2, [r3, #11]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	331c      	adds	r3, #28
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fee1 	bl	8005610 <ld_dword>
 800684e:	4602      	mov	r2, r0
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	3316      	adds	r3, #22
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fed8 	bl	8005610 <ld_dword>
 8006860:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	b29a      	uxth	r2, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	80da      	strh	r2, [r3, #6]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	b29a      	uxth	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	809a      	strh	r2, [r3, #4]
 8006874:	e000      	b.n	8006878 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006876:	bf00      	nop
}
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006896:	220b      	movs	r2, #11
 8006898:	2120      	movs	r1, #32
 800689a:	68b8      	ldr	r0, [r7, #8]
 800689c:	f7fe ff43 	bl	8005726 <mem_set>
	si = i = 0; ni = 8;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	2308      	movs	r3, #8
 80068aa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	617a      	str	r2, [r7, #20]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d94e      	bls.n	800695e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80068c0:	7ffb      	ldrb	r3, [r7, #31]
 80068c2:	2b2f      	cmp	r3, #47	; 0x2f
 80068c4:	d006      	beq.n	80068d4 <create_name+0x54>
 80068c6:	7ffb      	ldrb	r3, [r7, #31]
 80068c8:	2b5c      	cmp	r3, #92	; 0x5c
 80068ca:	d110      	bne.n	80068ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80068cc:	e002      	b.n	80068d4 <create_name+0x54>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	3301      	adds	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b2f      	cmp	r3, #47	; 0x2f
 80068de:	d0f6      	beq.n	80068ce <create_name+0x4e>
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4413      	add	r3, r2
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b5c      	cmp	r3, #92	; 0x5c
 80068ea:	d0f0      	beq.n	80068ce <create_name+0x4e>
			break;
 80068ec:	e038      	b.n	8006960 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b2e      	cmp	r3, #46	; 0x2e
 80068f2:	d003      	beq.n	80068fc <create_name+0x7c>
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d30c      	bcc.n	8006916 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b0b      	cmp	r3, #11
 8006900:	d002      	beq.n	8006908 <create_name+0x88>
 8006902:	7ffb      	ldrb	r3, [r7, #31]
 8006904:	2b2e      	cmp	r3, #46	; 0x2e
 8006906:	d001      	beq.n	800690c <create_name+0x8c>
 8006908:	2306      	movs	r3, #6
 800690a:	e044      	b.n	8006996 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800690c:	2308      	movs	r3, #8
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	230b      	movs	r3, #11
 8006912:	61bb      	str	r3, [r7, #24]
			continue;
 8006914:	e022      	b.n	800695c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da04      	bge.n	8006928 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	3b80      	subs	r3, #128	; 0x80
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <create_name+0x120>)
 8006924:	5cd3      	ldrb	r3, [r2, r3]
 8006926:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006928:	7ffb      	ldrb	r3, [r7, #31]
 800692a:	4619      	mov	r1, r3
 800692c:	481d      	ldr	r0, [pc, #116]	; (80069a4 <create_name+0x124>)
 800692e:	f7fe ff3b 	bl	80057a8 <chk_chr>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <create_name+0xbc>
 8006938:	2306      	movs	r3, #6
 800693a:	e02c      	b.n	8006996 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800693c:	7ffb      	ldrb	r3, [r7, #31]
 800693e:	2b60      	cmp	r3, #96	; 0x60
 8006940:	d905      	bls.n	800694e <create_name+0xce>
 8006942:	7ffb      	ldrb	r3, [r7, #31]
 8006944:	2b7a      	cmp	r3, #122	; 0x7a
 8006946:	d802      	bhi.n	800694e <create_name+0xce>
 8006948:	7ffb      	ldrb	r3, [r7, #31]
 800694a:	3b20      	subs	r3, #32
 800694c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	613a      	str	r2, [r7, #16]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4413      	add	r3, r2
 8006958:	7ffa      	ldrb	r2, [r7, #31]
 800695a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800695c:	e7a6      	b.n	80068ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800695e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	441a      	add	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <create_name+0xf4>
 8006970:	2306      	movs	r3, #6
 8006972:	e010      	b.n	8006996 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2be5      	cmp	r3, #229	; 0xe5
 800697a:	d102      	bne.n	8006982 <create_name+0x102>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2205      	movs	r2, #5
 8006980:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006982:	7ffb      	ldrb	r3, [r7, #31]
 8006984:	2b20      	cmp	r3, #32
 8006986:	d801      	bhi.n	800698c <create_name+0x10c>
 8006988:	2204      	movs	r2, #4
 800698a:	e000      	b.n	800698e <create_name+0x10e>
 800698c:	2200      	movs	r2, #0
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	330b      	adds	r3, #11
 8006992:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006994:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	0800bef4 	.word	0x0800bef4
 80069a4:	0800be14 	.word	0x0800be14

080069a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80069bc:	e002      	b.n	80069c4 <follow_path+0x1c>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b2f      	cmp	r3, #47	; 0x2f
 80069ca:	d0f8      	beq.n	80069be <follow_path+0x16>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b5c      	cmp	r3, #92	; 0x5c
 80069d2:	d0f4      	beq.n	80069be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2200      	movs	r2, #0
 80069d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b1f      	cmp	r3, #31
 80069e0:	d80a      	bhi.n	80069f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2280      	movs	r2, #128	; 0x80
 80069e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80069ea:	2100      	movs	r1, #0
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff fc1f 	bl	8006230 <dir_sdi>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
 80069f6:	e043      	b.n	8006a80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069f8:	463b      	mov	r3, r7
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff3f 	bl	8006880 <create_name>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d134      	bne.n	8006a76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fe32 	bl	8006676 <dir_find>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d127      	bne.n	8006a7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d122      	bne.n	8006a7a <follow_path+0xd2>
 8006a34:	2305      	movs	r3, #5
 8006a36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006a38:	e01f      	b.n	8006a7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11c      	bne.n	8006a7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	799b      	ldrb	r3, [r3, #6]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006a50:	2305      	movs	r3, #5
 8006a52:	75fb      	strb	r3, [r7, #23]
 8006a54:	e014      	b.n	8006a80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a64:	4413      	add	r3, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff fd68 	bl	800653e <ld_clust>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a74:	e7c0      	b.n	80069f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <follow_path+0xd8>
				break;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a7e:	bf00      	nop
			}
		}
	}

	return res;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295
 8006a96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d031      	beq.n	8006b04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e002      	b.n	8006aae <get_ldnumber+0x24>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d903      	bls.n	8006abe <get_ldnumber+0x34>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b3a      	cmp	r3, #58	; 0x3a
 8006abc:	d1f4      	bne.n	8006aa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b3a      	cmp	r3, #58	; 0x3a
 8006ac4:	d11c      	bne.n	8006b00 <get_ldnumber+0x76>
			tp = *path;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	60fa      	str	r2, [r7, #12]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	3b30      	subs	r3, #48	; 0x30
 8006ad6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d80e      	bhi.n	8006afc <get_ldnumber+0x72>
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d10a      	bne.n	8006afc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <get_ldnumber+0x72>
					vol = (int)i;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	3301      	adds	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	e002      	b.n	8006b06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b00:	2300      	movs	r3, #0
 8006b02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b04:	693b      	ldr	r3, [r7, #16]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	70da      	strb	r2, [r3, #3]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff f806 	bl	8005b40 <move_window>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <check_fs+0x2a>
 8006b3a:	2304      	movs	r3, #4
 8006b3c:	e038      	b.n	8006bb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3330      	adds	r3, #48	; 0x30
 8006b42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fd4a 	bl	80055e0 <ld_word>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d001      	beq.n	8006b5c <check_fs+0x48>
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e029      	b.n	8006bb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b62:	2be9      	cmp	r3, #233	; 0xe9
 8006b64:	d009      	beq.n	8006b7a <check_fs+0x66>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b6c:	2beb      	cmp	r3, #235	; 0xeb
 8006b6e:	d11e      	bne.n	8006bae <check_fs+0x9a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b76:	2b90      	cmp	r3, #144	; 0x90
 8006b78:	d119      	bne.n	8006bae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3330      	adds	r3, #48	; 0x30
 8006b7e:	3336      	adds	r3, #54	; 0x36
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fd45 	bl	8005610 <ld_dword>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b8c:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <check_fs+0xa4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d101      	bne.n	8006b96 <check_fs+0x82>
 8006b92:	2300      	movs	r3, #0
 8006b94:	e00c      	b.n	8006bb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3330      	adds	r3, #48	; 0x30
 8006b9a:	3352      	adds	r3, #82	; 0x52
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fd37 	bl	8005610 <ld_dword>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <check_fs+0xa8>)
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d101      	bne.n	8006bae <check_fs+0x9a>
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006bae:	2302      	movs	r3, #2
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	00544146 	.word	0x00544146
 8006bbc:	33544146 	.word	0x33544146

08006bc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b096      	sub	sp, #88	; 0x58
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff ff58 	bl	8006a8a <get_ldnumber>
 8006bda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da01      	bge.n	8006be6 <find_volume+0x26>
 8006be2:	230b      	movs	r3, #11
 8006be4:	e22e      	b.n	8007044 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006be6:	4aa8      	ldr	r2, [pc, #672]	; (8006e88 <find_volume+0x2c8>)
 8006be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <find_volume+0x3a>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	e224      	b.n	8007044 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01a      	beq.n	8006c46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe fc45 	bl	80054a4 <disk_status>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10c      	bne.n	8006c46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <find_volume+0x82>
 8006c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006c3e:	230a      	movs	r3, #10
 8006c40:	e200      	b.n	8007044 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006c42:	2300      	movs	r3, #0
 8006c44:	e1fe      	b.n	8007044 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fc3d 	bl	80054d8 <disk_initialize>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006c70:	2303      	movs	r3, #3
 8006c72:	e1e7      	b.n	8007044 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <find_volume+0xca>
 8006c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006c86:	230a      	movs	r3, #10
 8006c88:	e1dc      	b.n	8007044 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006c8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c92:	f7ff ff3f 	bl	8006b14 <check_fs>
 8006c96:	4603      	mov	r3, r0
 8006c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d14b      	bne.n	8006d3c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca8:	e01f      	b.n	8006cea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006cb8:	4413      	add	r3, r2
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <find_volume+0x114>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	3308      	adds	r3, #8
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fca0 	bl	8005610 <ld_dword>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	e000      	b.n	8006cd6 <find_volume+0x116>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006cde:	440b      	add	r3, r1
 8006ce0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d9dc      	bls.n	8006caa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <find_volume+0x140>
 8006cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d08:	4413      	add	r3, r2
 8006d0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <find_volume+0x162>
 8006d16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d1a:	f7ff fefb 	bl	8006b14 <check_fs>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	e000      	b.n	8006d24 <find_volume+0x164>
 8006d22:	2303      	movs	r3, #3
 8006d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d905      	bls.n	8006d3c <find_volume+0x17c>
 8006d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d32:	3301      	adds	r3, #1
 8006d34:	643b      	str	r3, [r7, #64]	; 0x40
 8006d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d9e1      	bls.n	8006d00 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d101      	bne.n	8006d48 <find_volume+0x188>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e17d      	b.n	8007044 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d901      	bls.n	8006d54 <find_volume+0x194>
 8006d50:	230d      	movs	r3, #13
 8006d52:	e177      	b.n	8007044 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	3330      	adds	r3, #48	; 0x30
 8006d58:	330b      	adds	r3, #11
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fc40 	bl	80055e0 <ld_word>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d66:	d001      	beq.n	8006d6c <find_volume+0x1ac>
 8006d68:	230d      	movs	r3, #13
 8006d6a:	e16b      	b.n	8007044 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	3330      	adds	r3, #48	; 0x30
 8006d70:	3316      	adds	r3, #22
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fc34 	bl	80055e0 <ld_word>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <find_volume+0x1d0>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	3330      	adds	r3, #48	; 0x30
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fc41 	bl	8005610 <ld_dword>
 8006d8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d94:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	789b      	ldrb	r3, [r3, #2]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d005      	beq.n	8006db4 <find_volume+0x1f4>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	789b      	ldrb	r3, [r3, #2]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d001      	beq.n	8006db4 <find_volume+0x1f4>
 8006db0:	230d      	movs	r3, #13
 8006db2:	e147      	b.n	8007044 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	789b      	ldrb	r3, [r3, #2]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dbc:	fb02 f303 	mul.w	r3, r2, r3
 8006dc0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	895b      	ldrh	r3, [r3, #10]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d008      	beq.n	8006de8 <find_volume+0x228>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	895b      	ldrh	r3, [r3, #10]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	895b      	ldrh	r3, [r3, #10]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <find_volume+0x22c>
 8006de8:	230d      	movs	r3, #13
 8006dea:	e12b      	b.n	8007044 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	3330      	adds	r3, #48	; 0x30
 8006df0:	3311      	adds	r3, #17
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fbf4 	bl	80055e0 <ld_word>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	891b      	ldrh	r3, [r3, #8]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <find_volume+0x252>
 8006e0e:	230d      	movs	r3, #13
 8006e10:	e118      	b.n	8007044 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	3330      	adds	r3, #48	; 0x30
 8006e16:	3313      	adds	r3, #19
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fbe1 	bl	80055e0 <ld_word>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <find_volume+0x276>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	3330      	adds	r3, #48	; 0x30
 8006e2c:	3320      	adds	r3, #32
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fbee 	bl	8005610 <ld_dword>
 8006e34:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	3330      	adds	r3, #48	; 0x30
 8006e3a:	330e      	adds	r3, #14
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fbcf 	bl	80055e0 <ld_word>
 8006e42:	4603      	mov	r3, r0
 8006e44:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006e46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <find_volume+0x290>
 8006e4c:	230d      	movs	r3, #13
 8006e4e:	e0f9      	b.n	8007044 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006e50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e54:	4413      	add	r3, r2
 8006e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e58:	8912      	ldrh	r2, [r2, #8]
 8006e5a:	0912      	lsrs	r2, r2, #4
 8006e5c:	b292      	uxth	r2, r2
 8006e5e:	4413      	add	r3, r2
 8006e60:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d201      	bcs.n	8006e6e <find_volume+0x2ae>
 8006e6a:	230d      	movs	r3, #13
 8006e6c:	e0ea      	b.n	8007044 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e76:	8952      	ldrh	r2, [r2, #10]
 8006e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <find_volume+0x2cc>
 8006e84:	230d      	movs	r3, #13
 8006e86:	e0dd      	b.n	8007044 <find_volume+0x484>
 8006e88:	20000090 	.word	0x20000090
		fmt = FS_FAT32;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d802      	bhi.n	8006ea2 <find_volume+0x2e2>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d802      	bhi.n	8006eb2 <find_volume+0x2f2>
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	1c9a      	adds	r2, r3, #2
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ebe:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ec0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec4:	441a      	add	r2, r3
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006eca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	441a      	add	r2, r3
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d11e      	bne.n	8006f1a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	3330      	adds	r3, #48	; 0x30
 8006ee0:	332a      	adds	r3, #42	; 0x2a
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe fb7c 	bl	80055e0 <ld_word>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <find_volume+0x332>
 8006eee:	230d      	movs	r3, #13
 8006ef0:	e0a8      	b.n	8007044 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	891b      	ldrh	r3, [r3, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <find_volume+0x33e>
 8006efa:	230d      	movs	r3, #13
 8006efc:	e0a2      	b.n	8007044 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	3330      	adds	r3, #48	; 0x30
 8006f02:	332c      	adds	r3, #44	; 0x2c
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fb83 	bl	8005610 <ld_dword>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
 8006f18:	e01f      	b.n	8006f5a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	891b      	ldrh	r3, [r3, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <find_volume+0x366>
 8006f22:	230d      	movs	r3, #13
 8006f24:	e08e      	b.n	8007044 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2c:	441a      	add	r2, r3
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d103      	bne.n	8006f42 <find_volume+0x382>
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	e00a      	b.n	8006f58 <find_volume+0x398>
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	695a      	ldr	r2, [r3, #20]
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	085a      	lsrs	r2, r3, #1
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006f58:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006f64:	0a5b      	lsrs	r3, r3, #9
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d201      	bcs.n	8006f6e <find_volume+0x3ae>
 8006f6a:	230d      	movs	r3, #13
 8006f6c:	e06a      	b.n	8007044 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	611a      	str	r2, [r3, #16]
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	2280      	movs	r2, #128	; 0x80
 8006f82:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d149      	bne.n	8007020 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	3330      	adds	r3, #48	; 0x30
 8006f90:	3330      	adds	r3, #48	; 0x30
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fb24 	bl	80055e0 <ld_word>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d140      	bne.n	8007020 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fa6:	f7fe fdcb 	bl	8005b40 <move_window>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d137      	bne.n	8007020 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	3330      	adds	r3, #48	; 0x30
 8006fba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fb0e 	bl	80055e0 <ld_word>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d127      	bne.n	8007020 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	3330      	adds	r3, #48	; 0x30
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fb1b 	bl	8005610 <ld_dword>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <find_volume+0x48c>)
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d11e      	bne.n	8007020 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	3330      	adds	r3, #48	; 0x30
 8006fe6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fb10 	bl	8005610 <ld_dword>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <find_volume+0x490>)
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d113      	bne.n	8007020 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	3330      	adds	r3, #48	; 0x30
 8006ffc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fb05 	bl	8005610 <ld_dword>
 8007006:	4602      	mov	r2, r0
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	3330      	adds	r3, #48	; 0x30
 8007010:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fafb 	bl	8005610 <ld_dword>
 800701a:	4602      	mov	r2, r0
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007026:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007028:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <find_volume+0x494>)
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	3301      	adds	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	4b08      	ldr	r3, [pc, #32]	; (8007054 <find_volume+0x494>)
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	4b07      	ldr	r3, [pc, #28]	; (8007054 <find_volume+0x494>)
 8007036:	881a      	ldrh	r2, [r3, #0]
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800703c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800703e:	f7fe fd17 	bl	8005a70 <clear_lock>
#endif
	return FR_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3758      	adds	r7, #88	; 0x58
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	41615252 	.word	0x41615252
 8007050:	61417272 	.word	0x61417272
 8007054:	20000094 	.word	0x20000094

08007058 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007062:	2309      	movs	r3, #9
 8007064:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01c      	beq.n	80070a6 <validate+0x4e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d018      	beq.n	80070a6 <validate+0x4e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d013      	beq.n	80070a6 <validate+0x4e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	889a      	ldrh	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	88db      	ldrh	r3, [r3, #6]
 8007088:	429a      	cmp	r2, r3
 800708a:	d10c      	bne.n	80070a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fa06 	bl	80054a4 <disk_status>
 8007098:	4603      	mov	r3, r0
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <validate+0x4e>
			res = FR_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <validate+0x5a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	e000      	b.n	80070b4 <validate+0x5c>
 80070b2:	2300      	movs	r3, #0
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	6013      	str	r3, [r2, #0]
	return res;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80070d6:	f107 0310 	add.w	r3, r7, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fcd5 	bl	8006a8a <get_ldnumber>
 80070e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da01      	bge.n	80070ec <f_mount+0x28>
 80070e8:	230b      	movs	r3, #11
 80070ea:	e02b      	b.n	8007144 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <f_mount+0x88>)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80070fc:	69b8      	ldr	r0, [r7, #24]
 80070fe:	f7fe fcb7 	bl	8005a70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	490d      	ldr	r1, [pc, #52]	; (800714c <f_mount+0x88>)
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <f_mount+0x66>
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d001      	beq.n	800712e <f_mount+0x6a>
 800712a:	2300      	movs	r3, #0
 800712c:	e00a      	b.n	8007144 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800712e:	f107 010c 	add.w	r1, r7, #12
 8007132:	f107 0308 	add.w	r3, r7, #8
 8007136:	2200      	movs	r2, #0
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fd41 	bl	8006bc0 <find_volume>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007142:	7dfb      	ldrb	r3, [r7, #23]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000090 	.word	0x20000090

08007150 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b098      	sub	sp, #96	; 0x60
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <f_open+0x18>
 8007164:	2309      	movs	r3, #9
 8007166:	e1ad      	b.n	80074c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800716e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007170:	79fa      	ldrb	r2, [r7, #7]
 8007172:	f107 0110 	add.w	r1, r7, #16
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fd20 	bl	8006bc0 <find_volume>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800718a:	2b00      	cmp	r3, #0
 800718c:	f040 8191 	bne.w	80074b2 <f_open+0x362>
		dj.obj.fs = fs;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	f107 0314 	add.w	r3, r7, #20
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fc03 	bl	80069a8 <follow_path>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80071a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11a      	bne.n	80071e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80071b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80071b4:	b25b      	sxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	da03      	bge.n	80071c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80071ba:	2306      	movs	r3, #6
 80071bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80071c0:	e011      	b.n	80071e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bf14      	ite	ne
 80071cc:	2301      	movne	r3, #1
 80071ce:	2300      	moveq	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	f107 0314 	add.w	r3, r7, #20
 80071d8:	4611      	mov	r1, r2
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fb00 	bl	80057e0 <chk_lock>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	f003 031c 	and.w	r3, r3, #28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d07f      	beq.n	80072f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80071f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d017      	beq.n	8007228 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80071f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d10e      	bne.n	800721e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007200:	f7fe fb4a 	bl	8005898 <enq_lock>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d006      	beq.n	8007218 <f_open+0xc8>
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff fa86 	bl	8006720 <dir_register>
 8007214:	4603      	mov	r3, r0
 8007216:	e000      	b.n	800721a <f_open+0xca>
 8007218:	2312      	movs	r3, #18
 800721a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	f043 0308 	orr.w	r3, r3, #8
 8007224:	71fb      	strb	r3, [r7, #7]
 8007226:	e010      	b.n	800724a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007228:	7ebb      	ldrb	r3, [r7, #26]
 800722a:	f003 0311 	and.w	r3, r3, #17
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <f_open+0xea>
					res = FR_DENIED;
 8007232:	2307      	movs	r3, #7
 8007234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007238:	e007      	b.n	800724a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <f_open+0xfa>
 8007244:	2308      	movs	r3, #8
 8007246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800724a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800724e:	2b00      	cmp	r3, #0
 8007250:	d168      	bne.n	8007324 <f_open+0x1d4>
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d063      	beq.n	8007324 <f_open+0x1d4>
				dw = GET_FATTIME();
 800725c:	f002 fbdc 	bl	8009a18 <get_fattime>
 8007260:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007264:	330e      	adds	r3, #14
 8007266:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fa0f 	bl	800568c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007270:	3316      	adds	r3, #22
 8007272:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe fa09 	bl	800568c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800727a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727c:	330b      	adds	r3, #11
 800727e:	2220      	movs	r2, #32
 8007280:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff f958 	bl	800653e <ld_clust>
 800728e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007294:	2200      	movs	r2, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff f970 	bl	800657c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800729c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729e:	331c      	adds	r3, #28
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe f9f2 	bl	800568c <st_dword>
					fs->wflag = 1;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2201      	movs	r2, #1
 80072ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80072ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d037      	beq.n	8007324 <f_open+0x1d4>
						dw = fs->winsect;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80072ba:	f107 0314 	add.w	r3, r7, #20
 80072be:	2200      	movs	r2, #0
 80072c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fe83 	bl	8005fce <remove_chain>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80072ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d126      	bne.n	8007324 <f_open+0x1d4>
							res = move_window(fs, dw);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fc30 	bl	8005b40 <move_window>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ea:	3a01      	subs	r2, #1
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	e019      	b.n	8007324 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80072f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d115      	bne.n	8007324 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80072f8:	7ebb      	ldrb	r3, [r7, #26]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007302:	2304      	movs	r3, #4
 8007304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007308:	e00c      	b.n	8007324 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <f_open+0x1d4>
 8007314:	7ebb      	ldrb	r3, [r7, #26]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <f_open+0x1d4>
						res = FR_DENIED;
 800731e:	2307      	movs	r3, #7
 8007320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007328:	2b00      	cmp	r3, #0
 800732a:	d128      	bne.n	800737e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	f023 0301 	bic.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf14      	ite	ne
 8007356:	2301      	movne	r3, #1
 8007358:	2300      	moveq	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	f107 0314 	add.w	r3, r7, #20
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fab9 	bl	80058dc <inc_lock>
 800736a:	4602      	mov	r2, r0
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <f_open+0x22e>
 8007378:	2302      	movs	r3, #2
 800737a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800737e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8095 	bne.w	80074b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff f8d5 	bl	800653e <ld_clust>
 8007394:	4602      	mov	r2, r0
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	331c      	adds	r3, #28
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe f936 	bl	8005610 <ld_dword>
 80073a4:	4602      	mov	r2, r0
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	88da      	ldrh	r2, [r3, #6]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	79fa      	ldrb	r2, [r7, #7]
 80073c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3330      	adds	r3, #48	; 0x30
 80073da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe f9a0 	bl	8005726 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d060      	beq.n	80074b2 <f_open+0x362>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d05c      	beq.n	80074b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	895b      	ldrh	r3, [r3, #10]
 8007404:	025b      	lsls	r3, r3, #9
 8007406:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	657b      	str	r3, [r7, #84]	; 0x54
 8007414:	e016      	b.n	8007444 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fc4b 	bl	8005cb6 <get_fat>
 8007420:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007424:	2b01      	cmp	r3, #1
 8007426:	d802      	bhi.n	800742e <f_open+0x2de>
 8007428:	2302      	movs	r3, #2
 800742a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800742e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d102      	bne.n	800743c <f_open+0x2ec>
 8007436:	2301      	movs	r3, #1
 8007438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800743c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800743e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	657b      	str	r3, [r7, #84]	; 0x54
 8007444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <f_open+0x304>
 800744c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800744e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007450:	429a      	cmp	r2, r3
 8007452:	d8e0      	bhi.n	8007416 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007458:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800745a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d127      	bne.n	80074b2 <f_open+0x362>
 8007462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	2b00      	cmp	r3, #0
 800746a:	d022      	beq.n	80074b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe fc01 	bl	8005c78 <clust2sect>
 8007476:	6478      	str	r0, [r7, #68]	; 0x44
 8007478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <f_open+0x336>
						res = FR_INT_ERR;
 800747e:	2302      	movs	r3, #2
 8007480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007484:	e015      	b.n	80074b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007488:	0a5a      	lsrs	r2, r3, #9
 800748a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748c:	441a      	add	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	7858      	ldrb	r0, [r3, #1]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	2301      	movs	r3, #1
 80074a2:	f7fe f83f 	bl	8005524 <disk_read>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <f_open+0x362>
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80074b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <f_open+0x370>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80074c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3760      	adds	r7, #96	; 0x60
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08c      	sub	sp, #48	; 0x30
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f107 0210 	add.w	r2, r7, #16
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fdb3 	bl	8007058 <validate>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80074f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <f_write+0x44>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	7d5b      	ldrb	r3, [r3, #21]
 8007504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007508:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <f_write+0x4a>
 8007510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007514:	e14b      	b.n	80077ae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	7d1b      	ldrb	r3, [r3, #20]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <f_write+0x5a>
 8007522:	2307      	movs	r3, #7
 8007524:	e143      	b.n	80077ae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	441a      	add	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	429a      	cmp	r2, r3
 8007534:	f080 812d 	bcs.w	8007792 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	43db      	mvns	r3, r3
 800753e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007540:	e127      	b.n	8007792 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 80e3 	bne.w	8007716 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	0a5b      	lsrs	r3, r3, #9
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	8952      	ldrh	r2, [r2, #10]
 800755a:	3a01      	subs	r2, #1
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d143      	bne.n	80075ee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10c      	bne.n	8007588 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d11a      	bne.n	80075b0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fd8a 	bl	8006098 <create_chain>
 8007584:	62b8      	str	r0, [r7, #40]	; 0x28
 8007586:	e013      	b.n	80075b0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	4619      	mov	r1, r3
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7fe fe16 	bl	80061c8 <clmt_clust>
 800759c:	62b8      	str	r0, [r7, #40]	; 0x28
 800759e:	e007      	b.n	80075b0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f7fe fd75 	bl	8006098 <create_chain>
 80075ae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80f2 	beq.w	800779c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d104      	bne.n	80075c8 <f_write+0xfc>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2202      	movs	r2, #2
 80075c2:	755a      	strb	r2, [r3, #21]
 80075c4:	2302      	movs	r3, #2
 80075c6:	e0f2      	b.n	80077ae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d104      	bne.n	80075da <f_write+0x10e>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	755a      	strb	r2, [r3, #21]
 80075d6:	2301      	movs	r3, #1
 80075d8:	e0e9      	b.n	80077ae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <f_write+0x122>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	7d1b      	ldrb	r3, [r3, #20]
 80075f2:	b25b      	sxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	da18      	bge.n	800762a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	7858      	ldrb	r0, [r3, #1]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	2301      	movs	r3, #1
 8007608:	f7fd ffac 	bl	8005564 <disk_write>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <f_write+0x150>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	755a      	strb	r2, [r3, #21]
 8007618:	2301      	movs	r3, #1
 800761a:	e0c8      	b.n	80077ae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	7d1b      	ldrb	r3, [r3, #20]
 8007620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007624:	b2da      	uxtb	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fe fb20 	bl	8005c78 <clust2sect>
 8007638:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <f_write+0x17e>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2202      	movs	r2, #2
 8007644:	755a      	strb	r2, [r3, #21]
 8007646:	2302      	movs	r3, #2
 8007648:	e0b1      	b.n	80077ae <f_write+0x2e2>
			sect += csect;
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	4413      	add	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	0a5b      	lsrs	r3, r3, #9
 8007656:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d03c      	beq.n	80076d8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	4413      	add	r3, r2
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	8952      	ldrh	r2, [r2, #10]
 8007668:	4293      	cmp	r3, r2
 800766a:	d905      	bls.n	8007678 <f_write+0x1ac>
					cc = fs->csize - csect;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	895b      	ldrh	r3, [r3, #10]
 8007670:	461a      	mov	r2, r3
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	7858      	ldrb	r0, [r3, #1]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	69f9      	ldr	r1, [r7, #28]
 8007682:	f7fd ff6f 	bl	8005564 <disk_write>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <f_write+0x1ca>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	755a      	strb	r2, [r3, #21]
 8007692:	2301      	movs	r3, #1
 8007694:	e08b      	b.n	80077ae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	6a3a      	ldr	r2, [r7, #32]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d915      	bls.n	80076d0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1a      	ldr	r2, [r3, #32]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	025b      	lsls	r3, r3, #9
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076bc:	4619      	mov	r1, r3
 80076be:	f7fe f811 	bl	80056e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7d1b      	ldrb	r3, [r3, #20]
 80076c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	025b      	lsls	r3, r3, #9
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80076d6:	e03f      	b.n	8007758 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d016      	beq.n	8007710 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d210      	bcs.n	8007710 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	7858      	ldrb	r0, [r3, #1]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076f8:	2301      	movs	r3, #1
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	f7fd ff12 	bl	8005524 <disk_read>
 8007700:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	755a      	strb	r2, [r3, #21]
 800770c:	2301      	movs	r3, #1
 800770e:	e04e      	b.n	80077ae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d901      	bls.n	8007730 <f_write+0x264>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	4413      	add	r3, r2
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	69f9      	ldr	r1, [r7, #28]
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd ffcd 	bl	80056e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	7d1b      	ldrb	r3, [r3, #20]
 800774e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007752:	b2da      	uxtb	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007758:	69fa      	ldr	r2, [r7, #28]
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	4413      	add	r3, r2
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	441a      	add	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	619a      	str	r2, [r3, #24]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	429a      	cmp	r2, r3
 8007776:	bf38      	it	cc
 8007778:	461a      	movcc	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	60da      	str	r2, [r3, #12]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	441a      	add	r2, r3
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f aed4 	bne.w	8007542 <f_write+0x76>
 800779a:	e000      	b.n	800779e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800779c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	7d1b      	ldrb	r3, [r3, #20]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3730      	adds	r7, #48	; 0x30
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f107 0208 	add.w	r2, r7, #8
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fc46 	bl	8007058 <validate>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d168      	bne.n	80078a8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7d1b      	ldrb	r3, [r3, #20]
 80077da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d062      	beq.n	80078a8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	7d1b      	ldrb	r3, [r3, #20]
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da15      	bge.n	8007818 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	7858      	ldrb	r0, [r3, #1]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	2301      	movs	r3, #1
 80077fc:	f7fd feb2 	bl	8005564 <disk_write>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <f_sync+0x54>
 8007806:	2301      	movs	r3, #1
 8007808:	e04f      	b.n	80078aa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7d1b      	ldrb	r3, [r3, #20]
 800780e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007812:	b2da      	uxtb	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007818:	f002 f8fe 	bl	8009a18 <get_fattime>
 800781c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f7fe f98a 	bl	8005b40 <move_window>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d138      	bne.n	80078a8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	330b      	adds	r3, #11
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	330b      	adds	r3, #11
 8007846:	f042 0220 	orr.w	r2, r2, #32
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	461a      	mov	r2, r3
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	f7fe fe8f 	bl	800657c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f103 021c 	add.w	r2, r3, #28
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f7fd ff0e 	bl	800568c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3316      	adds	r3, #22
 8007874:	6939      	ldr	r1, [r7, #16]
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd ff08 	bl	800568c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3312      	adds	r3, #18
 8007880:	2100      	movs	r1, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f7fd fee7 	bl	8005656 <st_word>
					fs->wflag = 1;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2201      	movs	r2, #1
 800788c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe f983 	bl	8005b9c <sync_fs>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7d1b      	ldrb	r3, [r3, #20]
 800789e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff ff7b 	bl	80077b6 <f_sync>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d118      	bne.n	80078fc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f107 0208 	add.w	r2, r7, #8
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff fbc0 	bl	8007058 <validate>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10c      	bne.n	80078fc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe f886 	bl	80059f8 <dec_lock>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b090      	sub	sp, #64	; 0x40
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007910:	f107 010c 	add.w	r1, r7, #12
 8007914:	1d3b      	adds	r3, r7, #4
 8007916:	2200      	movs	r2, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff f951 	bl	8006bc0 <find_volume>
 800791e:	4603      	mov	r3, r0
 8007920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007924:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007928:	2b00      	cmp	r3, #0
 800792a:	d11f      	bne.n	800796c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	f107 030c 	add.w	r3, r7, #12
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff f837 	bl	80069a8 <follow_path>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007944:	2b00      	cmp	r3, #0
 8007946:	d111      	bne.n	800796c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007948:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800794c:	b25b      	sxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	da03      	bge.n	800795a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007952:	2306      	movs	r3, #6
 8007954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007958:	e008      	b.n	800796c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <f_stat+0x66>
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe ff2a 	bl	80067c0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800796c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007970:	4618      	mov	r0, r3
 8007972:	3740      	adds	r7, #64	; 0x40
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b09e      	sub	sp, #120	; 0x78
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007984:	f107 010c 	add.w	r1, r7, #12
 8007988:	1d3b      	adds	r3, r7, #4
 800798a:	2202      	movs	r2, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff f917 	bl	8006bc0 <find_volume>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800799c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 808e 	bne.w	8007ac2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079ac:	4611      	mov	r1, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fffa 	bl	80069a8 <follow_path>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80079ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d108      	bne.n	80079d4 <f_unlink+0x5c>
 80079c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079c6:	2102      	movs	r1, #2
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fd ff09 	bl	80057e0 <chk_lock>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80079d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d172      	bne.n	8007ac2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80079dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079e0:	b25b      	sxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da03      	bge.n	80079ee <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80079e6:	2306      	movs	r3, #6
 80079e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80079ec:	e008      	b.n	8007a00 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80079ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80079fa:	2307      	movs	r3, #7
 80079fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8007a00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d134      	bne.n	8007a72 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fd95 	bl	800653e <ld_clust>
 8007a14:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007a16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d027      	beq.n	8007a72 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a28:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fbfd 	bl	8006230 <dir_sdi>
 8007a36:	4603      	mov	r3, r0
 8007a38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8007a3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d116      	bne.n	8007a72 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007a44:	f107 0310 	add.w	r3, r7, #16
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fdb6 	bl	80065bc <dir_read>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007a56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <f_unlink+0xec>
 8007a5e:	2307      	movs	r3, #7
 8007a60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007a64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d102      	bne.n	8007a72 <f_unlink+0xfa>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8007a72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d123      	bne.n	8007ac2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fe80 	bl	8006784 <dir_remove>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007a8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10c      	bne.n	8007aac <f_unlink+0x134>
 8007a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d009      	beq.n	8007aac <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007a98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fa94 	bl	8005fce <remove_chain>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007aac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <f_unlink+0x14a>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe f870 	bl	8005b9c <sync_fs>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007ac2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3778      	adds	r7, #120	; 0x78
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b096      	sub	sp, #88	; 0x58
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007ad6:	f107 0108 	add.w	r1, r7, #8
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	2202      	movs	r2, #2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff f86e 	bl	8006bc0 <find_volume>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8007aee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 80ec 	bne.w	8007cd0 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	f107 030c 	add.w	r3, r7, #12
 8007afe:	4611      	mov	r1, r2
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe ff51 	bl	80069a8 <follow_path>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8007b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <f_mkdir+0x4c>
 8007b14:	2308      	movs	r3, #8
 8007b16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8007b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	f040 80d6 	bne.w	8007cd0 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fab4 	bl	8006098 <create_chain>
 8007b30:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	895b      	ldrh	r3, [r3, #10]
 8007b36:	025b      	lsls	r3, r3, #9
 8007b38:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8007b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <f_mkdir+0x7e>
 8007b46:	2307      	movs	r3, #7
 8007b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d102      	bne.n	8007b58 <f_mkdir+0x8a>
 8007b52:	2302      	movs	r3, #2
 8007b54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5e:	d102      	bne.n	8007b66 <f_mkdir+0x98>
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8007b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <f_mkdir+0xae>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fd ffa1 	bl	8005ab8 <sync_window>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8007b7c:	f001 ff4c 	bl	8009a18 <get_fattime>
 8007b80:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8007b82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d16a      	bne.n	8007c60 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe f872 	bl	8005c78 <clust2sect>
 8007b94:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	3330      	adds	r3, #48	; 0x30
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8007b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ba4:	f7fd fdbf 	bl	8005726 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8007ba8:	220b      	movs	r2, #11
 8007baa:	2120      	movs	r1, #32
 8007bac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bae:	f7fd fdba 	bl	8005726 <mem_set>
					dir[DIR_Name] = '.';
 8007bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb4:	222e      	movs	r2, #46	; 0x2e
 8007bb6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8007bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bba:	330b      	adds	r3, #11
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8007bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc2:	3316      	adds	r3, #22
 8007bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fd60 	bl	800568c <st_dword>
					st_clust(fs, dir, dcl);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fcd2 	bl	800657c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bda:	3320      	adds	r3, #32
 8007bdc:	2220      	movs	r2, #32
 8007bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fd fd7f 	bl	80056e4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8007be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be8:	3321      	adds	r3, #33	; 0x21
 8007bea:	222e      	movs	r2, #46	; 0x2e
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d106      	bne.n	8007c08 <f_mkdir+0x13a>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d101      	bne.n	8007c08 <f_mkdir+0x13a>
 8007c04:	2300      	movs	r3, #0
 8007c06:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8007c08:	68b8      	ldr	r0, [r7, #8]
 8007c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0c:	3320      	adds	r3, #32
 8007c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c10:	4619      	mov	r1, r3
 8007c12:	f7fe fcb3 	bl	800657c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	895b      	ldrh	r3, [r3, #10]
 8007c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1c:	e01b      	b.n	8007c56 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8007c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fd ff41 	bl	8005ab8 <sync_window>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8007c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10c      	bne.n	8007c5e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8007c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c4c:	f7fd fd6b 	bl	8005726 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c52:	3b01      	subs	r3, #1
 8007c54:	653b      	str	r3, [r7, #80]	; 0x50
 8007c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e0      	bne.n	8007c1e <f_mkdir+0x150>
 8007c5c:	e000      	b.n	8007c60 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8007c5e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8007c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d107      	bne.n	8007c78 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8007c68:	f107 030c 	add.w	r3, r7, #12
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fd57 	bl	8006720 <dir_register>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8007c78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d120      	bne.n	8007cc2 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	3316      	adds	r3, #22
 8007c88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd fcfe 	bl	800568c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fc70 	bl	800657c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8007c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9e:	330b      	adds	r3, #11
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8007caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10e      	bne.n	8007cd0 <f_mkdir+0x202>
					res = sync_fs(fs);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fd ff71 	bl	8005b9c <sync_fs>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007cc0:	e006      	b.n	8007cd0 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8007cc2:	f107 030c 	add.w	r3, r7, #12
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe f97f 	bl	8005fce <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3758      	adds	r7, #88	; 0x58
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	2b0a      	cmp	r3, #10
 8007cec:	d103      	bne.n	8007cf6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007cee:	210d      	movs	r1, #13
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fff3 	bl	8007cdc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	db25      	blt.n	8007d4e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	60fa      	str	r2, [r7, #12]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b3c      	cmp	r3, #60	; 0x3c
 8007d14:	dd12      	ble.n	8007d3c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f103 010c 	add.w	r1, r3, #12
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	f107 0308 	add.w	r3, r7, #8
 8007d26:	f7ff fbd1 	bl	80074cc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d101      	bne.n	8007d36 <putc_bfd+0x5a>
 8007d32:	2300      	movs	r3, #0
 8007d34:	e001      	b.n	8007d3a <putc_bfd+0x5e>
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
 8007d4c:	e000      	b.n	8007d50 <putc_bfd+0x74>
	if (i < 0) return;
 8007d4e:	bf00      	nop
}
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	db17      	blt.n	8007d96 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f103 010c 	add.w	r1, r3, #12
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f107 030c 	add.w	r3, r7, #12
 8007d7a:	f7ff fba7 	bl	80074cc <f_write>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d102      	bne.n	8007d96 <putc_flush+0x40>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	e001      	b.n	8007d9a <putc_flush+0x44>
	return EOF;
 8007d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	609a      	str	r2, [r3, #8]
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007dcc:	b40e      	push	{r1, r2, r3}
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b0a7      	sub	sp, #156	; 0x9c
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8007dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff ffe0 	bl	8007da2 <putc_init>

	va_start(arp, fmt);
 8007de2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007de6:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8007de8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8007df8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 81f4 	beq.w	80081ea <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8007e02:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007e06:	2b25      	cmp	r3, #37	; 0x25
 8007e08:	d008      	beq.n	8007e1c <f_printf+0x50>
			putc_bfd(&pb, c);
 8007e0a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8007e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff ff61 	bl	8007cdc <putc_bfd>
			continue;
 8007e1a:	e1e5      	b.n	80081e8 <f_printf+0x41c>
		}
		w = f = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8007e28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8007e38:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007e3c:	2b30      	cmp	r3, #48	; 0x30
 8007e3e:	d10b      	bne.n	8007e58 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007e56:	e024      	b.n	8007ea2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8007e58:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007e5c:	2b2d      	cmp	r3, #45	; 0x2d
 8007e5e:	d120      	bne.n	8007ea2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8007e60:	2302      	movs	r3, #2
 8007e62:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007e76:	e014      	b.n	8007ea2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8007e78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	461a      	mov	r2, r3
 8007e86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3b30      	subs	r3, #48	; 0x30
 8007e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8007e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8007ea2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ea6:	2b2f      	cmp	r3, #47	; 0x2f
 8007ea8:	d903      	bls.n	8007eb2 <f_printf+0xe6>
 8007eaa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007eae:	2b39      	cmp	r3, #57	; 0x39
 8007eb0:	d9e2      	bls.n	8007e78 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8007eb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007eb6:	2b6c      	cmp	r3, #108	; 0x6c
 8007eb8:	d003      	beq.n	8007ec2 <f_printf+0xf6>
 8007eba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ebe:	2b4c      	cmp	r3, #76	; 0x4c
 8007ec0:	d10d      	bne.n	8007ede <f_printf+0x112>
			f |= 4; c = *fmt++;
 8007ec2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007ec6:	f043 0304 	orr.w	r3, r3, #4
 8007eca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8007ede:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 8183 	beq.w	80081ee <f_printf+0x422>
		d = c;
 8007ee8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007eec:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8007ef0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007ef4:	2b60      	cmp	r3, #96	; 0x60
 8007ef6:	d908      	bls.n	8007f0a <f_printf+0x13e>
 8007ef8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007efc:	2b7a      	cmp	r3, #122	; 0x7a
 8007efe:	d804      	bhi.n	8007f0a <f_printf+0x13e>
 8007f00:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007f04:	3b20      	subs	r3, #32
 8007f06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8007f0a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007f0e:	3b42      	subs	r3, #66	; 0x42
 8007f10:	2b16      	cmp	r3, #22
 8007f12:	f200 8098 	bhi.w	8008046 <f_printf+0x27a>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <f_printf+0x150>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08008027 	.word	0x08008027
 8007f20:	0800800f 	.word	0x0800800f
 8007f24:	08008037 	.word	0x08008037
 8007f28:	08008047 	.word	0x08008047
 8007f2c:	08008047 	.word	0x08008047
 8007f30:	08008047 	.word	0x08008047
 8007f34:	08008047 	.word	0x08008047
 8007f38:	08008047 	.word	0x08008047
 8007f3c:	08008047 	.word	0x08008047
 8007f40:	08008047 	.word	0x08008047
 8007f44:	08008047 	.word	0x08008047
 8007f48:	08008047 	.word	0x08008047
 8007f4c:	08008047 	.word	0x08008047
 8007f50:	0800802f 	.word	0x0800802f
 8007f54:	08008047 	.word	0x08008047
 8007f58:	08008047 	.word	0x08008047
 8007f5c:	08008047 	.word	0x08008047
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08008047 	.word	0x08008047
 8007f68:	08008037 	.word	0x08008037
 8007f6c:	08008047 	.word	0x08008047
 8007f70:	08008047 	.word	0x08008047
 8007f74:	0800803f 	.word	0x0800803f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8007f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	67ba      	str	r2, [r7, #120]	; 0x78
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f88:	e004      	b.n	8007f94 <f_printf+0x1c8>
 8007f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f9a:	4413      	add	r3, r2
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f3      	bne.n	8007f8a <f_printf+0x1be>
			if (!(f & 2)) {
 8007fa2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d11a      	bne.n	8007fe4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8007fae:	e005      	b.n	8007fbc <f_printf+0x1f0>
 8007fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fb4:	2120      	movs	r1, #32
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff fe90 	bl	8007cdc <putc_bfd>
 8007fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d8f0      	bhi.n	8007fb0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8007fce:	e009      	b.n	8007fe4 <f_printf+0x218>
 8007fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fd6:	781a      	ldrb	r2, [r3, #0]
 8007fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fe7c 	bl	8007cdc <putc_bfd>
 8007fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f1      	bne.n	8007fd0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8007fec:	e005      	b.n	8007ffa <f_printf+0x22e>
 8007fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ff2:	2120      	movs	r1, #32
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff fe71 	bl	8007cdc <putc_bfd>
 8007ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008004:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008008:	429a      	cmp	r2, r3
 800800a:	d8f0      	bhi.n	8007fee <f_printf+0x222>
			continue;
 800800c:	e0ec      	b.n	80081e8 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800800e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008010:	1d1a      	adds	r2, r3, #4
 8008012:	67ba      	str	r2, [r7, #120]	; 0x78
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fe5c 	bl	8007cdc <putc_bfd>
 8008024:	e0e0      	b.n	80081e8 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8008026:	2302      	movs	r3, #2
 8008028:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800802c:	e014      	b.n	8008058 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800802e:	2308      	movs	r3, #8
 8008030:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008034:	e010      	b.n	8008058 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008036:	230a      	movs	r3, #10
 8008038:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800803c:	e00c      	b.n	8008058 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800803e:	2310      	movs	r3, #16
 8008040:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008044:	e008      	b.n	8008058 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008046:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800804a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fe43 	bl	8007cdc <putc_bfd>
 8008056:	e0c7      	b.n	80081e8 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008058:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <f_printf+0x2a2>
 8008064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008066:	1d1a      	adds	r2, r3, #4
 8008068:	67ba      	str	r2, [r7, #120]	; 0x78
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	e00c      	b.n	8008088 <f_printf+0x2bc>
 800806e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008072:	2b44      	cmp	r3, #68	; 0x44
 8008074:	d104      	bne.n	8008080 <f_printf+0x2b4>
 8008076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	67ba      	str	r2, [r7, #120]	; 0x78
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	e003      	b.n	8008088 <f_printf+0x2bc>
 8008080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008082:	1d1a      	adds	r2, r3, #4
 8008084:	67ba      	str	r2, [r7, #120]	; 0x78
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800808c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008090:	2b44      	cmp	r3, #68	; 0x44
 8008092:	d10e      	bne.n	80080b2 <f_printf+0x2e6>
 8008094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008098:	2b00      	cmp	r3, #0
 800809a:	da0a      	bge.n	80080b2 <f_printf+0x2e6>
			v = 0 - v;
 800809c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a0:	425b      	negs	r3, r3
 80080a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80080a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80080aa:	f043 0308 	orr.w	r3, r3, #8
 80080ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80080b8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80080bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80080c4:	fb02 f201 	mul.w	r2, r2, r1
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80080ce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80080d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80080de:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80080e2:	2b09      	cmp	r3, #9
 80080e4:	d90b      	bls.n	80080fe <f_printf+0x332>
 80080e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80080ea:	2b78      	cmp	r3, #120	; 0x78
 80080ec:	d101      	bne.n	80080f2 <f_printf+0x326>
 80080ee:	2227      	movs	r2, #39	; 0x27
 80080f0:	e000      	b.n	80080f4 <f_printf+0x328>
 80080f2:	2207      	movs	r2, #7
 80080f4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80080f8:	4413      	add	r3, r2
 80080fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80080fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008108:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800810c:	3230      	adds	r2, #48	; 0x30
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008114:	440b      	add	r3, r1
 8008116:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800811a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <f_printf+0x35e>
 8008122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008126:	2b1f      	cmp	r3, #31
 8008128:	d9c6      	bls.n	80080b8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800812a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <f_printf+0x380>
 8008136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008140:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008144:	4413      	add	r3, r2
 8008146:	222d      	movs	r2, #45	; 0x2d
 8008148:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800814c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008154:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <f_printf+0x398>
 8008160:	2330      	movs	r3, #48	; 0x30
 8008162:	e000      	b.n	8008166 <f_printf+0x39a>
 8008164:	2320      	movs	r3, #32
 8008166:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800816a:	e007      	b.n	800817c <f_printf+0x3b0>
 800816c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fdb0 	bl	8007cdc <putc_bfd>
 800817c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d108      	bne.n	800819a <f_printf+0x3ce>
 8008188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008192:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008196:	429a      	cmp	r2, r3
 8008198:	d8e8      	bhi.n	800816c <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800819a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800819e:	3b01      	subs	r3, #1
 80081a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081a4:	f107 020c 	add.w	r2, r7, #12
 80081a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081ac:	4413      	add	r3, r2
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fd90 	bl	8007cdc <putc_bfd>
		} while (i);
 80081bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1ea      	bne.n	800819a <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80081c4:	e007      	b.n	80081d6 <f_printf+0x40a>
 80081c6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80081ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff fd83 	bl	8007cdc <putc_bfd>
 80081d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d8ee      	bhi.n	80081c6 <f_printf+0x3fa>
		c = *fmt++;
 80081e8:	e5fe      	b.n	8007de8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <f_printf+0x424>
		if (!c) break;
 80081ee:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80081f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fdae 	bl	8007d56 <putc_flush>
 80081fa:	4603      	mov	r3, r0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	379c      	adds	r7, #156	; 0x9c
 8008200:	46bd      	mov	sp, r7
 8008202:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008206:	b003      	add	sp, #12
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop

0800820c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800821a:	2301      	movs	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008222:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 8008224:	7a5b      	ldrb	r3, [r3, #9]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d131      	bne.n	8008290 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800822c:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 800822e:	7a5b      	ldrb	r3, [r3, #9]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 8008236:	2100      	movs	r1, #0
 8008238:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 800823c:	7a5b      	ldrb	r3, [r3, #9]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800824a:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 800824c:	7a5b      	ldrb	r3, [r3, #9]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 8008254:	4413      	add	r3, r2
 8008256:	79fa      	ldrb	r2, [r7, #7]
 8008258:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 800825c:	7a5b      	ldrb	r3, [r3, #9]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	b2d1      	uxtb	r1, r2
 8008264:	4a0e      	ldr	r2, [pc, #56]	; (80082a0 <FATFS_LinkDriverEx+0x94>)
 8008266:	7251      	strb	r1, [r2, #9]
 8008268:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800826a:	7dbb      	ldrb	r3, [r7, #22]
 800826c:	3330      	adds	r3, #48	; 0x30
 800826e:	b2da      	uxtb	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	3301      	adds	r3, #1
 8008278:	223a      	movs	r2, #58	; 0x3a
 800827a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	3302      	adds	r3, #2
 8008280:	222f      	movs	r2, #47	; 0x2f
 8008282:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	3303      	adds	r3, #3
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	200000b8 	.word	0x200000b8

080082a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80082ae:	2200      	movs	r2, #0
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff ffaa 	bl	800820c <FATFS_LinkDriverEx>
 80082b8:	4603      	mov	r3, r0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <_Z8DWT_Initv>:
#include "stm32f4xx_hal.h"

#ifndef INC_DWT_DELAY_H_
#define INC_DWT_DELAY_H_

void DWT_Init(void) {
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <_Z8DWT_Initv+0x44>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bf0c      	ite	eq
 80082d4:	2301      	moveq	r3, #1
 80082d6:	2300      	movne	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <_Z8DWT_Initv+0x38>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80082de:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <_Z8DWT_Initv+0x44>)
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	4a09      	ldr	r2, [pc, #36]	; (8008308 <_Z8DWT_Initv+0x44>)
 80082e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e8:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80082ea:	4b08      	ldr	r3, [pc, #32]	; (800830c <_Z8DWT_Initv+0x48>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80082f0:	4b06      	ldr	r3, [pc, #24]	; (800830c <_Z8DWT_Initv+0x48>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a05      	ldr	r2, [pc, #20]	; (800830c <_Z8DWT_Initv+0x48>)
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	6013      	str	r3, [r2, #0]
    }
}
 80082fc:	bf00      	nop
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	e000edf0 	.word	0xe000edf0
 800830c:	e0001000 	.word	0xe0001000

08008310 <_Z9DWT_Delaym>:

void DWT_Delay(uint32_t us) {
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <_Z9DWT_Delaym+0x48>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <_Z9DWT_Delaym+0x4c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a0f      	ldr	r2, [pc, #60]	; (8008360 <_Z9DWT_Delaym+0x50>)
 8008324:	fba2 2303 	umull	r2, r3, r2, r3
 8008328:	0c9a      	lsrs	r2, r3, #18
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	fb02 f303 	mul.w	r3, r2, r3
 8008330:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <_Z9DWT_Delaym+0x48>)
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	bf8c      	ite	hi
 8008340:	2301      	movhi	r3, #1
 8008342:	2300      	movls	r3, #0
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d000      	beq.n	800834c <_Z9DWT_Delaym+0x3c>
 800834a:	e7f2      	b.n	8008332 <_Z9DWT_Delaym+0x22>
}
 800834c:	bf00      	nop
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	e0001000 	.word	0xe0001000
 800835c:	20000008 	.word	0x20000008
 8008360:	431bde83 	.word	0x431bde83

08008364 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh>:
 */

#include "LTC6811.h"
#include "dwt_delay.h"

LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Status& status, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts)
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b093      	sub	sp, #76	; 0x4c
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
: hspi{ hspi }, status{ status } {
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	721a      	strb	r2, [r3, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f103 020a 	add.w	r2, r3, #10
 800838a:	4bba      	ldr	r3, [pc, #744]	; (8008674 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x310>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f000 fde1 	bl	8008f5e <_ZN20LTC6811RegisterGroupIhEC1EOSt5arrayIhLj4EE>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80083a2:	4bb5      	ldr	r3, [pc, #724]	; (8008678 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x314>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	f107 0318 	add.w	r3, r7, #24
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f000 fdd5 	bl	8008f5e <_ZN20LTC6811RegisterGroupIhEC1EOSt5arrayIhLj4EE>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 80083ba:	4bb0      	ldr	r3, [pc, #704]	; (800867c <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x318>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	61fb      	str	r3, [r7, #28]
 80083c0:	f107 031c 	add.w	r3, r7, #28
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f000 fddc 	bl	8008f84 <_ZN20LTC6811RegisterGroupItEC1EOSt5arrayIhLj4EE>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 729b 	add.w	r2, r3, #310	; 0x136
 80083d2:	4bab      	ldr	r3, [pc, #684]	; (8008680 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x31c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	623b      	str	r3, [r7, #32]
 80083d8:	f107 0320 	add.w	r3, r7, #32
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f000 fdd0 	bl	8008f84 <_ZN20LTC6811RegisterGroupItEC1EOSt5arrayIhLj4EE>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 72cd 	add.w	r2, r3, #410	; 0x19a
 80083ea:	4ba6      	ldr	r3, [pc, #664]	; (8008684 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x320>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
 80083f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f000 fdc4 	bl	8008f84 <_ZN20LTC6811RegisterGroupItEC1EOSt5arrayIhLj4EE>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 72ff 	add.w	r2, r3, #510	; 0x1fe
 8008402:	4ba1      	ldr	r3, [pc, #644]	; (8008688 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x324>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
 8008408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f000 fdb8 	bl	8008f84 <_ZN20LTC6811RegisterGroupItEC1EOSt5arrayIhLj4EE>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f203 2262 	addw	r2, r3, #610	; 0x262
 800841a:	4b9c      	ldr	r3, [pc, #624]	; (800868c <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x328>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f000 fdbf 	bl	8008faa <_ZN20LTC6811RegisterGroupIsEC1EOSt5arrayIhLj4EE>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f203 22c6 	addw	r2, r3, #710	; 0x2c6
 8008432:	4b97      	ldr	r3, [pc, #604]	; (8008690 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x32c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	633b      	str	r3, [r7, #48]	; 0x30
 8008438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f000 fdb3 	bl	8008faa <_ZN20LTC6811RegisterGroupIsEC1EOSt5arrayIhLj4EE>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f203 322a 	addw	r2, r3, #810	; 0x32a
 800844a:	4b92      	ldr	r3, [pc, #584]	; (8008694 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x330>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
 8008450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f000 fd81 	bl	8008f5e <_ZN20LTC6811RegisterGroupIhEC1EOSt5arrayIhLj4EE>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f203 328e 	addw	r2, r3, #910	; 0x38e
 8008462:	4b8d      	ldr	r3, [pc, #564]	; (8008698 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh+0x334>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38
 8008468:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f000 fd75 	bl	8008f5e <_ZN20LTC6811RegisterGroupIhEC1EOSt5arrayIhLj4EE>
    uint8_t md_bits = (static_cast<uint8_t>(mode) & 0x02) >> 1;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	b2db      	uxtb	r3, r3
 8008478:	105b      	asrs	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint16_t PEC{ 0 };
 8008484:	2300      	movs	r3, #0
 8008486:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

    ADCV[0]   = md_bits + 0x02;
 800848a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800848e:	3302      	adds	r3, #2
 8008490:	b2dc      	uxtb	r4, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8008498:	2100      	movs	r1, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fd98 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 80084a0:	4603      	mov	r3, r0
 80084a2:	4622      	mov	r2, r4
 80084a4:	701a      	strb	r2, [r3, #0]
    ADAX[0]   = md_bits + 0x04;
 80084a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084aa:	3304      	adds	r3, #4
 80084ac:	b2dc      	uxtb	r4, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fd8a 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 80084bc:	4603      	mov	r3, r0
 80084be:	4622      	mov	r2, r4
 80084c0:	701a      	strb	r2, [r3, #0]
    ADSTAT[0] = md_bits + 0x04;
 80084c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084c6:	3304      	adds	r3, #4
 80084c8:	b2dc      	uxtb	r4, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 80084d0:	2100      	movs	r1, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fd7c 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 80084d8:	4603      	mov	r3, r0
 80084da:	4622      	mov	r2, r4
 80084dc:	701a      	strb	r2, [r3, #0]

    md_bits   = (static_cast<uint8_t>(mode) & 0x01) << 7;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	01db      	lsls	r3, r3, #7
 80084e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ADCV[1]   = md_bits + 0x60 + (static_cast<uint8_t>(dcp) << 4) + static_cast<uint8_t>(cell);
 80084e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084f4:	4413      	add	r3, r2
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4413      	add	r3, r2
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	3360      	adds	r3, #96	; 0x60
 8008502:	b2dc      	uxtb	r4, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fd5f 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 8008512:	4603      	mov	r3, r0
 8008514:	4622      	mov	r2, r4
 8008516:	701a      	strb	r2, [r3, #0]
    ADAX[1]   = md_bits + 0x60 + static_cast<uint8_t>(aux);
 8008518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800851a:	b2da      	uxtb	r2, r3
 800851c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008520:	4413      	add	r3, r2
 8008522:	b2db      	uxtb	r3, r3
 8008524:	3360      	adds	r3, #96	; 0x60
 8008526:	b2dc      	uxtb	r4, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 800852e:	2101      	movs	r1, #1
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fd4d 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 8008536:	4603      	mov	r3, r0
 8008538:	4622      	mov	r2, r4
 800853a:	701a      	strb	r2, [r3, #0]
    ADSTAT[1] = md_bits + 0x68 + static_cast<uint8_t>(sts);
 800853c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853e:	b2da      	uxtb	r2, r3
 8008540:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008544:	4413      	add	r3, r2
 8008546:	b2db      	uxtb	r3, r3
 8008548:	3368      	adds	r3, #104	; 0x68
 800854a:	b2dc      	uxtb	r4, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 8008552:	2101      	movs	r1, #1
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fd3b 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 800855a:	4603      	mov	r3, r0
 800855c:	4622      	mov	r2, r4
 800855e:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADCV, 2);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fd41 	bl	8008ff0 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 800856e:	4603      	mov	r3, r0
 8008570:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ADCV[2] = static_cast<uint8_t>(PEC >> 8);
 8008574:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008578:	121b      	asrs	r3, r3, #8
 800857a:	b2dc      	uxtb	r4, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8008582:	2102      	movs	r1, #2
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fd23 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 800858a:	4603      	mov	r3, r0
 800858c:	4622      	mov	r2, r4
 800858e:	701a      	strb	r2, [r3, #0]
    ADCV[3] = static_cast<uint8_t>(PEC);
 8008590:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008594:	b2dc      	uxtb	r4, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 800859c:	2103      	movs	r1, #3
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fd16 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 80085a4:	4603      	mov	r3, r0
 80085a6:	4622      	mov	r2, r4
 80085a8:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADAX, 2);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 80085b0:	2102      	movs	r1, #2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fd1c 	bl	8008ff0 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
 80085be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80085c2:	121b      	asrs	r3, r3, #8
 80085c4:	b2dc      	uxtb	r4, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 80085cc:	2102      	movs	r1, #2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fcfe 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 80085d4:	4603      	mov	r3, r0
 80085d6:	4622      	mov	r2, r4
 80085d8:	701a      	strb	r2, [r3, #0]
    ADAX[3] = static_cast<uint8_t>(PEC);
 80085da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80085de:	b2dc      	uxtb	r4, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 80085e6:	2103      	movs	r1, #3
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fcf1 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 80085ee:	4603      	mov	r3, r0
 80085f0:	4622      	mov	r2, r4
 80085f2:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADSTAT, 2);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 80085fa:	2102      	movs	r1, #2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fcf7 	bl	8008ff0 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 8008602:	4603      	mov	r3, r0
 8008604:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    ADSTAT[2] = static_cast<uint8_t>(PEC >> 8);
 8008608:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800860c:	121b      	asrs	r3, r3, #8
 800860e:	b2dc      	uxtb	r4, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 8008616:	2102      	movs	r1, #2
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fcd9 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 800861e:	4603      	mov	r3, r0
 8008620:	4622      	mov	r2, r4
 8008622:	701a      	strb	r2, [r3, #0]
    ADSTAT[3] = static_cast<uint8_t>(PEC);
 8008624:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008628:	b2dc      	uxtb	r4, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f203 33fa 	addw	r3, r3, #1018	; 0x3fa
 8008630:	2103      	movs	r1, #3
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fccc 	bl	8008fd0 <_ZNSt5arrayIhLj4EEixEj>
 8008638:	4603      	mov	r3, r0
 800863a:	4622      	mov	r2, r4
 800863c:	701a      	strb	r2, [r3, #0]

    slave_cfg_tx.register_group.fill({ 0xFE, 0, 0, 0, 0, 0 });
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f103 000e 	add.w	r0, r3, #14
 8008644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	23fe      	movs	r3, #254	; 0xfe
 8008650:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8008654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008658:	4619      	mov	r1, r3
 800865a:	f000 fd16 	bl	800908a <_ZNSt5arrayI15LTC6811RegisterIhELj12EE4fillERKS1_>

    DWT_Init();
 800865e:	f7ff fe31 	bl	80082c4 <_Z8DWT_Initv>
    WakeFromSleep(); // TODO Takes 2.2s to fall asleep so if this has to be called ever again, we have bigger problems
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f81a 	bl	800869c <_ZN7LTC681113WakeFromSleepEv>
}
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4618      	mov	r0, r3
 800866c:	374c      	adds	r7, #76	; 0x4c
 800866e:	46bd      	mov	sp, r7
 8008670:	bd90      	pop	{r4, r7, pc}
 8008672:	bf00      	nop
 8008674:	0800be58 	.word	0x0800be58
 8008678:	0800be5c 	.word	0x0800be5c
 800867c:	0800be60 	.word	0x0800be60
 8008680:	0800be64 	.word	0x0800be64
 8008684:	0800be68 	.word	0x0800be68
 8008688:	0800be6c 	.word	0x0800be6c
 800868c:	0800be70 	.word	0x0800be70
 8008690:	0800be74 	.word	0x0800be74
 8008694:	0800be78 	.word	0x0800be78
 8008698:	0800be7c 	.word	0x0800be7c

0800869c <_ZN7LTC681113WakeFromSleepEv>:

void LTC6811::WakeFromSleep(void) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < kDaisyChainLength; ++i) {
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	2b0b      	cmp	r3, #11
 80086ac:	d814      	bhi.n	80086d8 <_ZN7LTC681113WakeFromSleepEv+0x3c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2120      	movs	r1, #32
 80086b2:	480b      	ldr	r0, [pc, #44]	; (80086e0 <_ZN7LTC681113WakeFromSleepEv+0x44>)
 80086b4:	f7f9 fad6 	bl	8001c64 <HAL_GPIO_WritePin>
        DWT_Delay(T_WAKE_MAX); // Guarantees the LTC6811 will be in standby
 80086b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80086bc:	f7ff fe28 	bl	8008310 <_Z9DWT_Delaym>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80086c0:	2201      	movs	r2, #1
 80086c2:	2120      	movs	r1, #32
 80086c4:	4806      	ldr	r0, [pc, #24]	; (80086e0 <_ZN7LTC681113WakeFromSleepEv+0x44>)
 80086c6:	f7f9 facd 	bl	8001c64 <HAL_GPIO_WritePin>
        DWT_Delay(10);
 80086ca:	200a      	movs	r0, #10
 80086cc:	f7ff fe20 	bl	8008310 <_Z9DWT_Delaym>
    for (uint8_t i = 0; i < kDaisyChainLength; ++i) {
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	3301      	adds	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e7e7      	b.n	80086a8 <_ZN7LTC681113WakeFromSleepEv+0xc>
    }
}
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	40020000 	.word	0x40020000

080086e4 <_ZN7LTC681112WakeFromIdleEv>:

void LTC6811::WakeFromIdle(void) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
    uint8_t data = 0xFF;
 80086ec:	23ff      	movs	r3, #255	; 0xff
 80086ee:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < kDaisyChainLength; ++i) {
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	2b0b      	cmp	r3, #11
 80086f8:	d815      	bhi.n	8008726 <_ZN7LTC681112WakeFromIdleEv+0x42>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2120      	movs	r1, #32
 80086fe:	480c      	ldr	r0, [pc, #48]	; (8008730 <_ZN7LTC681112WakeFromIdleEv+0x4c>)
 8008700:	f7f9 fab0 	bl	8001c64 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &data, 1, 10); //Guarantees the isoSPI will be in ready mode
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	f107 010e 	add.w	r1, r7, #14
 800870c:	230a      	movs	r3, #10
 800870e:	2201      	movs	r2, #1
 8008710:	f7fb fc74 	bl	8003ffc <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008714:	2201      	movs	r2, #1
 8008716:	2120      	movs	r1, #32
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <_ZN7LTC681112WakeFromIdleEv+0x4c>)
 800871a:	f7f9 faa3 	bl	8001c64 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < kDaisyChainLength; ++i) {
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	3301      	adds	r3, #1
 8008722:	73fb      	strb	r3, [r7, #15]
 8008724:	e7e6      	b.n	80086f4 <_ZN7LTC681112WakeFromIdleEv+0x10>
    }

}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40020000 	.word	0x40020000

08008734 <_ZN7LTC681124ReadVoltageRegisterGroupE5Group>:

/* Read the raw data from the LTC6811 cell voltage register and verifies that the data was received correctly.
 * Returns 0 on success, 1 if either PEC or SPI error. */
uint8_t LTC6811::ReadVoltageRegisterGroup(Group const group) {
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
    return ReadRegisterGroup(cell_data[group]);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	33d2      	adds	r3, #210	; 0xd2
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fcb4 	bl	80090b6 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EEixEj>
 800874e:	4603      	mov	r3, r0
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fce2 	bl	800911c <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E>
 8008758:	4603      	mov	r3, r0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZN7LTC681120ReadAuxRegisterGroupE5Group>:

/* Reads the raw data from the LTC6811 auxiliary register and verifies that the data was received correctly.
 * Returns 0 on success, 1 if either PEC or SPI error. */
uint8_t LTC6811::ReadAuxRegisterGroup(Group const group) {
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
    return ReadRegisterGroup(cell_data[group]);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	33d2      	adds	r3, #210	; 0xd2
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fc9d 	bl	80090b6 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EEixEj>
 800877c:	4603      	mov	r3, r0
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fccb 	bl	800911c <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E>
 8008786:	4603      	mov	r3, r0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <_ZN7LTC681123ReadConfigRegisterGroupEv>:
uint8_t LTC6811::ReadStatusRegisterGroup(Group const group) {
    return ReadRegisterGroup(status_registers[group]);
}

/* Read configuration registers of a LTC6811 daisy chain */
uint8_t LTC6811::ReadConfigRegisterGroup(void) {
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
    return ReadRegisterGroup(slave_cfg_rx);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	336e      	adds	r3, #110	; 0x6e
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fd3c 	bl	800921c <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E>
 80087a4:	4603      	mov	r3, r0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <_ZN7LTC681124WriteConfigRegisterGroupEv>:

/* Write to the configuration registers of the LTC6811s in the daisy chain. */
uint8_t LTC6811::WriteConfigRegisterGroup(void) {
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
    return WriteRegister(slave_cfg_tx);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	330a      	adds	r3, #10
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fd95 	bl	80092ec <_ZN7LTC681113WriteRegisterIhEEhR20LTC6811RegisterGroupIT_E>
 80087c2:	4603      	mov	r3, r0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_ZNKSt5arrayIhLj4EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff ffed 	bl	80087cc <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 80087f2:	4603      	mov	r3, r0
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <_ZN7LTC681116GetVoltageStatusEv>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
    HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), 10);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

std::optional<LTC6811VoltageStatus> LTC6811::GetVoltageStatus(void) {
 80087fc:	b590      	push	{r4, r7, lr}
 80087fe:	b097      	sub	sp, #92	; 0x5c
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
    StartConversion(ADCV);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 800880c:	4619      	mov	r1, r3
 800880e:	6838      	ldr	r0, [r7, #0]
 8008810:	f000 fb72 	bl	8008ef8 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE>

    for (size_t group = A; group < D; ++group)
 8008814:	2300      	movs	r3, #0
 8008816:	657b      	str	r3, [r7, #84]	; 0x54
 8008818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881a:	2b02      	cmp	r3, #2
 800881c:	d816      	bhi.n	800884c <_ZN7LTC681116GetVoltageStatusEv+0x50>
        if (!ReadVoltageRegisterGroup(static_cast<Group>(group)))
 800881e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4619      	mov	r1, r3
 8008824:	6838      	ldr	r0, [r7, #0]
 8008826:	f7ff ff85 	bl	8008734 <_ZN7LTC681124ReadVoltageRegisterGroupE5Group>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf0c      	ite	eq
 8008830:	2301      	moveq	r3, #1
 8008832:	2300      	movne	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <_ZN7LTC681116GetVoltageStatusEv+0x48>
            return std::nullopt;
 800883a:	4621      	mov	r1, r4
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fd79 	bl	8009334 <_ZNSt8optionalI20LTC6811VoltageStatusEC1ESt9nullopt_t>
 8008842:	e06d      	b.n	8008920 <_ZN7LTC681116GetVoltageStatusEv+0x124>
    for (size_t group = A; group < D; ++group)
 8008844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008846:	3301      	adds	r3, #1
 8008848:	657b      	str	r3, [r7, #84]	; 0x54
 800884a:	e7e5      	b.n	8008818 <_ZN7LTC681116GetVoltageStatusEv+0x1c>

    LTC6811VoltageStatus status;
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008854:	823b      	strh	r3, [r7, #16]
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	2300      	movs	r3, #0
 800885c:	833b      	strh	r3, [r7, #24]
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
    size_t count{ 0 };
 8008862:	2300      	movs	r3, #0
 8008864:	653b      	str	r3, [r7, #80]	; 0x50

    for (const auto& register_group : cell_data) {
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	33d2      	adds	r3, #210	; 0xd2
 800886a:	643b      	str	r3, [r7, #64]	; 0x40
 800886c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800886e:	f000 fd70 	bl	8009352 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE5beginEv>
 8008872:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008874:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008876:	f000 fd78 	bl	800936a <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE3endEv>
 800887a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800887c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	429a      	cmp	r2, r3
 8008882:	d047      	beq.n	8008914 <_ZN7LTC681116GetVoltageStatusEv+0x118>
 8008884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008886:	63bb      	str	r3, [r7, #56]	; 0x38
        for (const auto& Register : register_group.register_group) {
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	3304      	adds	r3, #4
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
 800888e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008890:	f000 fd79 	bl	8009386 <_ZNKSt5arrayI15LTC6811RegisterItELj12EE5beginEv>
 8008894:	64b8      	str	r0, [r7, #72]	; 0x48
 8008896:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008898:	f000 fd81 	bl	800939e <_ZNKSt5arrayI15LTC6811RegisterItELj12EE3endEv>
 800889c:	6338      	str	r0, [r7, #48]	; 0x30
 800889e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d032      	beq.n	800890c <_ZN7LTC681116GetVoltageStatusEv+0x110>
 80088a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (const auto voltage : Register.data) {
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b0:	f000 fd82 	bl	80093b8 <_ZNKSt5arrayItLj3EE5beginEv>
 80088b4:	6478      	str	r0, [r7, #68]	; 0x44
 80088b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b8:	f000 fd8a 	bl	80093d0 <_ZNKSt5arrayItLj3EE3endEv>
 80088bc:	6278      	str	r0, [r7, #36]	; 0x24
 80088be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d01e      	beq.n	8008904 <_ZN7LTC681116GetVoltageStatusEv+0x108>
 80088c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	847b      	strh	r3, [r7, #34]	; 0x22
                status.sum += voltage;
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088d0:	4413      	add	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]

                if (voltage < status.min) {
 80088d4:	8a3b      	ldrh	r3, [r7, #16]
 80088d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80088d8:	429a      	cmp	r2, r3
 80088da:	d204      	bcs.n	80088e6 <_ZN7LTC681116GetVoltageStatusEv+0xea>
                    status.min = voltage;
 80088dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088de:	823b      	strh	r3, [r7, #16]
                    status.min_id = count;
 80088e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e007      	b.n	80088f6 <_ZN7LTC681116GetVoltageStatusEv+0xfa>
                } else if (voltage > status.max) {
 80088e6:	8b3b      	ldrh	r3, [r7, #24]
 80088e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d903      	bls.n	80088f6 <_ZN7LTC681116GetVoltageStatusEv+0xfa>
                    status.max = voltage;
 80088ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088f0:	833b      	strh	r3, [r7, #24]
                    status.max_id = count;
 80088f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f4:	61fb      	str	r3, [r7, #28]
                }
                ++count;
 80088f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f8:	3301      	adds	r3, #1
 80088fa:	653b      	str	r3, [r7, #80]	; 0x50
            for (const auto voltage : Register.data) {
 80088fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fe:	3302      	adds	r3, #2
 8008900:	647b      	str	r3, [r7, #68]	; 0x44
 8008902:	e7dc      	b.n	80088be <_ZN7LTC681116GetVoltageStatusEv+0xc2>
        for (const auto& Register : register_group.register_group) {
 8008904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008906:	3308      	adds	r3, #8
 8008908:	64bb      	str	r3, [r7, #72]	; 0x48
 800890a:	e7c8      	b.n	800889e <_ZN7LTC681116GetVoltageStatusEv+0xa2>
    for (const auto& register_group : cell_data) {
 800890c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890e:	3364      	adds	r3, #100	; 0x64
 8008910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008912:	e7b3      	b.n	800887c <_ZN7LTC681116GetVoltageStatusEv+0x80>
            }
        }
    }
    return status;
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fd70 	bl	8009400 <_ZNSt8optionalI20LTC6811VoltageStatusEC1IRS0_Lb1EEEOT_>
}
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	375c      	adds	r7, #92	; 0x5c
 8008924:	46bd      	mov	sp, r7
 8008926:	bd90      	pop	{r4, r7, pc}

08008928 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs>:

    for (size_t group = A; group < D; ++group)
        if (!ReadAuxRegisterGroup(static_cast<Group>(group)))
            return std::nullopt;

    auto steinharthart = [](int16_t const NTC_voltage) noexcept {
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	; 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	807b      	strh	r3, [r7, #2]
        constexpr auto Vin = 30000.0f; // 3[V], or 30000[V * 10-5]
 8008934:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xac>)
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
        constexpr auto KtoC = 27315; // centiKelvin to centiDegCelsius
 8008938:	f646 23b3 	movw	r3, #27315	; 0x6ab3
 800893c:	623b      	str	r3, [r7, #32]
        constexpr auto A = 0.003354016f;
 800893e:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xb0>)
 8008940:	61fb      	str	r3, [r7, #28]
        constexpr auto B = 0.000256524f;
 8008942:	4b26      	ldr	r3, [pc, #152]	; (80089dc <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xb4>)
 8008944:	61bb      	str	r3, [r7, #24]
        constexpr auto C = 0.00000260597f;
 8008946:	4b26      	ldr	r3, [pc, #152]	; (80089e0 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xb8>)
 8008948:	617b      	str	r3, [r7, #20]
        constexpr auto D = 0.0000000632926f;
 800894a:	4b26      	ldr	r3, [pc, #152]	; (80089e4 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xbc>)
 800894c:	613b      	str	r3, [r7, #16]
        auto log = -logf(Vin / NTC_voltage - 1);
 800894e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800895a:	eddf 6a23 	vldr	s13, [pc, #140]	; 80089e8 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xc0>
 800895e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800896a:	eeb0 0a67 	vmov.f32	s0, s15
 800896e:	f002 ffe5 	bl	800b93c <logf>
 8008972:	eef0 7a40 	vmov.f32	s15, s0
 8008976:	eef1 7a67 	vneg.f32	s15, s15
 800897a:	edc7 7a03 	vstr	s15, [r7, #12]

        return static_cast<int16_t>(100.0f / (A + log * ( B + log * (C + D * log))) - KtoC);
 800897e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008982:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80089ec <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xc4>
 8008986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800898a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80089f0 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xc8>
 800898e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008992:	edd7 7a03 	vldr	s15, [r7, #12]
 8008996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80089f4 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xcc>
 800899e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80089f8 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xd0>
 80089ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089b2:	eddf 6a12 	vldr	s13, [pc, #72]	; 80089fc <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xd4>
 80089b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008a00 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs+0xd8>
 80089be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089c6:	ee17 3a90 	vmov	r3, s15
 80089ca:	b21b      	sxth	r3, r3
    };
 80089cc:	4618      	mov	r0, r3
 80089ce:	3728      	adds	r7, #40	; 0x28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	46ea6000 	.word	0x46ea6000
 80089d8:	3b5bcf0d 	.word	0x3b5bcf0d
 80089dc:	39867e12 	.word	0x39867e12
 80089e0:	362ee239 	.word	0x362ee239
 80089e4:	3387eb7a 	.word	0x3387eb7a
 80089e8:	46ea6000 	.word	0x46ea6000
 80089ec:	3387eb7a 	.word	0x3387eb7a
 80089f0:	362ee239 	.word	0x362ee239
 80089f4:	39867e12 	.word	0x39867e12
 80089f8:	3b5bcf0d 	.word	0x3b5bcf0d
 80089fc:	42c80000 	.word	0x42c80000
 8008a00:	46d56600 	.word	0x46d56600

08008a04 <_ZN7LTC681120GetTemperatureStatusEv>:
std::optional<LTC6811TempStatus> LTC6811::GetTemperatureStatus() {
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b095      	sub	sp, #84	; 0x54
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
    StartConversion(ADAX);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f203 33f6 	addw	r3, r3, #1014	; 0x3f6
 8008a14:	4619      	mov	r1, r3
 8008a16:	6838      	ldr	r0, [r7, #0]
 8008a18:	f000 fa6e 	bl	8008ef8 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE>
    for (size_t group = A; group < D; ++group)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d816      	bhi.n	8008a54 <_ZN7LTC681120GetTemperatureStatusEv+0x50>
        if (!ReadAuxRegisterGroup(static_cast<Group>(group)))
 8008a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6838      	ldr	r0, [r7, #0]
 8008a2e:	f7ff fe98 	bl	8008762 <_ZN7LTC681120ReadAuxRegisterGroupE5Group>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bf0c      	ite	eq
 8008a38:	2301      	moveq	r3, #1
 8008a3a:	2300      	movne	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <_ZN7LTC681120GetTemperatureStatusEv+0x48>
            return std::nullopt;
 8008a42:	4621      	mov	r1, r4
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fcef 	bl	8009428 <_ZNSt8optionalI17LTC6811TempStatusEC1ESt9nullopt_t>
 8008a4a:	e072      	b.n	8008b32 <_ZN7LTC681120GetTemperatureStatusEv+0x12e>
    for (size_t group = A; group < D; ++group)
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	3301      	adds	r3, #1
 8008a50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a52:	e7e5      	b.n	8008a20 <_ZN7LTC681120GetTemperatureStatusEv+0x1c>

    LTC6811TempStatus status;
 8008a54:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <_ZN7LTC681120GetTemperatureStatusEv+0x138>)
 8008a56:	f107 0408 	add.w	r4, r7, #8
 8008a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t count{ 0 };
 8008a60:	2300      	movs	r3, #0
 8008a62:	64bb      	str	r3, [r7, #72]	; 0x48

    for (const auto& register_group : cell_data) {
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	33d2      	adds	r3, #210	; 0xd2
 8008a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a6c:	f000 fc71 	bl	8009352 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE5beginEv>
 8008a70:	6478      	str	r0, [r7, #68]	; 0x44
 8008a72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a74:	f000 fc79 	bl	800936a <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE3endEv>
 8008a78:	6378      	str	r0, [r7, #52]	; 0x34
 8008a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d051      	beq.n	8008b26 <_ZN7LTC681120GetTemperatureStatusEv+0x122>
 8008a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a84:	633b      	str	r3, [r7, #48]	; 0x30
        for (const auto& Register : register_group.register_group) {
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	3304      	adds	r3, #4
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a8e:	f000 fc7a 	bl	8009386 <_ZNKSt5arrayI15LTC6811RegisterItELj12EE5beginEv>
 8008a92:	6438      	str	r0, [r7, #64]	; 0x40
 8008a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a96:	f000 fc82 	bl	800939e <_ZNKSt5arrayI15LTC6811RegisterItELj12EE3endEv>
 8008a9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d03c      	beq.n	8008b1e <_ZN7LTC681120GetTemperatureStatusEv+0x11a>
 8008aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
            for (auto temperature : Register.data) {
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	623b      	str	r3, [r7, #32]
 8008aac:	6a38      	ldr	r0, [r7, #32]
 8008aae:	f000 fc83 	bl	80093b8 <_ZNKSt5arrayItLj3EE5beginEv>
 8008ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008ab4:	6a38      	ldr	r0, [r7, #32]
 8008ab6:	f000 fc8b 	bl	80093d0 <_ZNKSt5arrayItLj3EE3endEv>
 8008aba:	61f8      	str	r0, [r7, #28]
 8008abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d028      	beq.n	8008b16 <_ZN7LTC681120GetTemperatureStatusEv+0x112>
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	837b      	strh	r3, [r7, #26]
                temperature = steinharthart(temperature);
 8008aca:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8008ace:	f107 0318 	add.w	r3, r7, #24
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ff27 	bl	8008928 <_ZZN7LTC681120GetTemperatureStatusEvENKUlsE_clEs>
 8008ada:	4603      	mov	r3, r0
 8008adc:	837b      	strh	r3, [r7, #26]

                if (temperature < status.min) {
 8008ade:	8b7b      	ldrh	r3, [r7, #26]
 8008ae0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	da05      	bge.n	8008af4 <_ZN7LTC681120GetTemperatureStatusEv+0xf0>
                    status.min = temperature;
 8008ae8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008aec:	813b      	strh	r3, [r7, #8]
                    status.min_id = count;
 8008aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	e009      	b.n	8008b08 <_ZN7LTC681120GetTemperatureStatusEv+0x104>
                } else if (temperature > status.max) {
 8008af4:	8b7b      	ldrh	r3, [r7, #26]
 8008af6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008afa:	4293      	cmp	r3, r2
 8008afc:	dd04      	ble.n	8008b08 <_ZN7LTC681120GetTemperatureStatusEv+0x104>
                    status.max = temperature;
 8008afe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008b02:	823b      	strh	r3, [r7, #16]
                    status.max_id = count;
 8008b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b06:	617b      	str	r3, [r7, #20]
                }
                ++count;
 8008b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	64bb      	str	r3, [r7, #72]	; 0x48
            for (auto temperature : Register.data) {
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	3302      	adds	r3, #2
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b14:	e7d2      	b.n	8008abc <_ZN7LTC681120GetTemperatureStatusEv+0xb8>
        for (const auto& Register : register_group.register_group) {
 8008b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b18:	3308      	adds	r3, #8
 8008b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b1c:	e7be      	b.n	8008a9c <_ZN7LTC681120GetTemperatureStatusEv+0x98>
    for (const auto& register_group : cell_data) {
 8008b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b20:	3364      	adds	r3, #100	; 0x64
 8008b22:	647b      	str	r3, [r7, #68]	; 0x44
 8008b24:	e7a9      	b.n	8008a7a <_ZN7LTC681120GetTemperatureStatusEv+0x76>
            }
        }
    }
    return status;
 8008b26:	f107 0308 	add.w	r3, r7, #8
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fc95 	bl	800945c <_ZNSt8optionalI17LTC6811TempStatusEC1IRS0_Lb1EEEOT_>
}
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	3754      	adds	r7, #84	; 0x54
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd90      	pop	{r4, r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	0800be80 	.word	0x0800be80

08008b40 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus>:

void LTC6811::BuildDischargeConfig(const LTC6811VoltageStatus& voltage_status) {
 8008b40:	b590      	push	{r4, r7, lr}
 8008b42:	b09f      	sub	sp, #124	; 0x7c
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
    constexpr uint8_t kDelta = 100;
 8008b4a:	2364      	movs	r3, #100	; 0x64
 8008b4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    uint16_t DCCx{ 0 };
 8008b50:	2300      	movs	r3, #0
 8008b52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 8008b56:	2300      	movs	r3, #0
 8008b58:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8008b5c:	230b      	movs	r3, #11
 8008b5e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    auto average_voltage{ voltage_status.sum / (12 * kDaisyChainLength) };
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4abb      	ldr	r2, [pc, #748]	; (8008e54 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x314>)
 8008b68:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6c:	095b      	lsrs	r3, r3, #5
 8008b6e:	657b      	str	r3, [r7, #84]	; 0x54

    switch (discharge_mode) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7a1b      	ldrb	r3, [r3, #8]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	f000 809b 	beq.w	8008cb0 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x170>
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	f000 810d 	beq.w	8008d9a <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x25a>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 81aa 	bne.w	8008eda <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x39a>
    case 0: // Discharge all above (min_voltage + delta)
        for (auto& cfg_register : slave_cfg_tx.register_group) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	330e      	adds	r3, #14
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b8e:	f000 fa65 	bl	800905c <_ZNSt5arrayI15LTC6811RegisterIhELj12EE5beginEv>
 8008b92:	6738      	str	r0, [r7, #112]	; 0x70
 8008b94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b96:	f000 fc75 	bl	8009484 <_ZNSt5arrayI15LTC6811RegisterIhELj12EE3endEv>
 8008b9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	f000 8195 	beq.w	8008ed0 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x390>
 8008ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
            DCCx = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            current_cell = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

            for (const auto& register_group : cell_data) { // 4 voltage register groups
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	33d2      	adds	r3, #210	; 0xd2
 8008bba:	623b      	str	r3, [r7, #32]
 8008bbc:	6a38      	ldr	r0, [r7, #32]
 8008bbe:	f000 fbc8 	bl	8009352 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE5beginEv>
 8008bc2:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008bc4:	6a38      	ldr	r0, [r7, #32]
 8008bc6:	f000 fbd0 	bl	800936a <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE3endEv>
 8008bca:	61f8      	str	r0, [r7, #28]
 8008bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d039      	beq.n	8008c48 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x108>
 8008bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd6:	61bb      	str	r3, [r7, #24]
                for (const auto voltage : register_group.register_group[current_ic].data) { // 3 voltages per IC
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fc5b 	bl	800949e <_ZNKSt5arrayI15LTC6811RegisterItELj12EEixEj>
 8008be8:	4603      	mov	r3, r0
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	6978      	ldr	r0, [r7, #20]
 8008bee:	f000 fbe3 	bl	80093b8 <_ZNKSt5arrayItLj3EE5beginEv>
 8008bf2:	66b8      	str	r0, [r7, #104]	; 0x68
 8008bf4:	6978      	ldr	r0, [r7, #20]
 8008bf6:	f000 fbeb 	bl	80093d0 <_ZNKSt5arrayItLj3EE3endEv>
 8008bfa:	6138      	str	r0, [r7, #16]
 8008bfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d01d      	beq.n	8008c40 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x100>
 8008c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	81fb      	strh	r3, [r7, #14]
                    if (voltage > voltage_status.min + kDelta)
 8008c0a:	89fa      	ldrh	r2, [r7, #14]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	889b      	ldrh	r3, [r3, #4]
 8008c10:	3364      	adds	r3, #100	; 0x64
 8008c12:	429a      	cmp	r2, r3
 8008c14:	dd0b      	ble.n	8008c2e <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0xee>
                        DCCx |= 1 << current_cell;
 8008c16:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c20:	b21a      	sxth	r2, r3
 8008c22:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8008c26:	4313      	orrs	r3, r2
 8008c28:	b21b      	sxth	r3, r3
 8008c2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                    ++current_cell;
 8008c2e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8008c32:	3301      	adds	r3, #1
 8008c34:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                for (const auto voltage : register_group.register_group[current_ic].data) { // 3 voltages per IC
 8008c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c3a:	3302      	adds	r3, #2
 8008c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c3e:	e7dd      	b.n	8008bfc <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0xbc>
            for (const auto& register_group : cell_data) { // 4 voltage register groups
 8008c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c42:	3364      	adds	r3, #100	; 0x64
 8008c44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c46:	e7c1      	b.n	8008bcc <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x8c>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            cfg_register.data[4] |= DCCx & 0xFF;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fc35 	bl	80094bc <_ZNSt5arrayIhLj6EEixEj>
 8008c52:	4603      	mov	r3, r0
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	b251      	sxtb	r1, r2
 8008c58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c5c:	b252      	sxtb	r2, r2
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	b252      	sxtb	r2, r2
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	701a      	strb	r2, [r3, #0]
            cfg_register.data[5] |= DCCx >> 8 & 0xF;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	2105      	movs	r1, #5
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fc26 	bl	80094bc <_ZNSt5arrayIhLj6EEixEj>
 8008c70:	4603      	mov	r3, r0
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	b251      	sxtb	r1, r2
 8008c76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c7a:	1212      	asrs	r2, r2, #8
 8008c7c:	b252      	sxtb	r2, r2
 8008c7e:	f002 020f 	and.w	r2, r2, #15
 8008c82:	b252      	sxtb	r2, r2
 8008c84:	430a      	orrs	r2, r1
 8008c86:	b252      	sxtb	r2, r2
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	701a      	strb	r2, [r3, #0]
            cfg_register.PEC = PEC15Calc(cfg_register.data);
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	2106      	movs	r1, #6
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc3b 	bl	800950c <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	80da      	strh	r2, [r3, #6]
            --current_ic;
 8008c9e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        for (auto& cfg_register : slave_cfg_tx.register_group) {
 8008ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008caa:	3308      	adds	r3, #8
 8008cac:	673b      	str	r3, [r7, #112]	; 0x70
 8008cae:	e775      	b.n	8008b9c <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x5c>
        }
        break;

    case 1: // Discharge only the max_voltage cell.
        if (voltage_status.max - voltage_status.min > kDelta) {
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	899b      	ldrh	r3, [r3, #12]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	889b      	ldrh	r3, [r3, #4]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b64      	cmp	r3, #100	; 0x64
 8008cbe:	f340 8109 	ble.w	8008ed4 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x394>
            current_ic = voltage_status.max_id / 3 % 12;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	4a64      	ldr	r2, [pc, #400]	; (8008e58 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x318>)
 8008cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ccc:	0859      	lsrs	r1, r3, #1
 8008cce:	4b62      	ldr	r3, [pc, #392]	; (8008e58 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x318>)
 8008cd0:	fba3 2301 	umull	r2, r3, r3, r1
 8008cd4:	08da      	lsrs	r2, r3, #3
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	1aca      	subs	r2, r1, r3
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            DCCx |= 1 << voltage_status.max_id % 11;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6919      	ldr	r1, [r3, #16]
 8008cea:	4b5c      	ldr	r3, [pc, #368]	; (8008e5c <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x31c>)
 8008cec:	fba3 2301 	umull	r2, r3, r3, r1
 8008cf0:	08da      	lsrs	r2, r3, #3
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	4413      	add	r3, r2
 8008cfc:	1aca      	subs	r2, r1, r3
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4093      	lsls	r3, r2
 8008d02:	b21a      	sxth	r2, r3
 8008d04:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	b21b      	sxth	r3, r3
 8008d0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            slave_cfg_tx.register_group[current_ic].data[4] = DCCx & 0xFF;
 8008d10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008d14:	b2dc      	uxtb	r4, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	330e      	adds	r3, #14
 8008d1a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fc29 	bl	8009578 <_ZNSt5arrayI15LTC6811RegisterIhELj12EEixEj>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2104      	movs	r1, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fbc6 	bl	80094bc <_ZNSt5arrayIhLj6EEixEj>
 8008d30:	4603      	mov	r3, r0
 8008d32:	4622      	mov	r2, r4
 8008d34:	701a      	strb	r2, [r3, #0]
            slave_cfg_tx.register_group[current_ic].data[5] = DCCx >> 8 & 0xF;
 8008d36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008d3a:	121b      	asrs	r3, r3, #8
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	b2dc      	uxtb	r4, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	330e      	adds	r3, #14
 8008d48:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fc12 	bl	8009578 <_ZNSt5arrayI15LTC6811RegisterIhELj12EEixEj>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2105      	movs	r1, #5
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fbaf 	bl	80094bc <_ZNSt5arrayIhLj6EEixEj>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4622      	mov	r2, r4
 8008d62:	701a      	strb	r2, [r3, #0]
            slave_cfg_tx.register_group[current_ic].PEC = PEC15Calc(slave_cfg_tx.register_group[current_ic].data);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	330e      	adds	r3, #14
 8008d68:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fc02 	bl	8009578 <_ZNSt5arrayI15LTC6811RegisterIhELj12EEixEj>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2106      	movs	r1, #6
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fbc7 	bl	800950c <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	461c      	mov	r4, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	330e      	adds	r3, #14
 8008d86:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fbf3 	bl	8009578 <_ZNSt5arrayI15LTC6811RegisterIhELj12EEixEj>
 8008d92:	4603      	mov	r3, r0
 8008d94:	4622      	mov	r2, r4
 8008d96:	80da      	strh	r2, [r3, #6]
        }
        break;
 8008d98:	e09c      	b.n	8008ed4 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x394>

    case 2: // Discharge all cells that are above average cell voltage + delta
        for (auto& cfg_register : slave_cfg_tx.register_group) {
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	330e      	adds	r3, #14
 8008d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008da0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008da2:	f000 f95b 	bl	800905c <_ZNSt5arrayI15LTC6811RegisterIhELj12EE5beginEv>
 8008da6:	6678      	str	r0, [r7, #100]	; 0x64
 8008da8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008daa:	f000 fb6b 	bl	8009484 <_ZNSt5arrayI15LTC6811RegisterIhELj12EE3endEv>
 8008dae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db4:	429a      	cmp	r2, r3
 8008db6:	f000 808f 	beq.w	8008ed8 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x398>
 8008dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dbc:	64bb      	str	r3, [r7, #72]	; 0x48
            DCCx = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            current_cell = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

            for (const auto& register_group : cell_data) { // 4 voltage register groups
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	33d2      	adds	r3, #210	; 0xd2
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008dd2:	f000 fabe 	bl	8009352 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE5beginEv>
 8008dd6:	6638      	str	r0, [r7, #96]	; 0x60
 8008dd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008dda:	f000 fac6 	bl	800936a <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE3endEv>
 8008dde:	6438      	str	r0, [r7, #64]	; 0x40
 8008de0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d03f      	beq.n	8008e68 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x328>
 8008de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
                for (const auto voltage : register_group.register_group[current_ic].data) { // 3 voltages per IC
 8008dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dee:	3304      	adds	r3, #4
 8008df0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fb51 	bl	800949e <_ZNKSt5arrayI15LTC6811RegisterItELj12EEixEj>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e02:	f000 fad9 	bl	80093b8 <_ZNKSt5arrayItLj3EE5beginEv>
 8008e06:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008e08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e0a:	f000 fae1 	bl	80093d0 <_ZNKSt5arrayItLj3EE3endEv>
 8008e0e:	6378      	str	r0, [r7, #52]	; 0x34
 8008e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d023      	beq.n	8008e60 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x320>
 8008e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	867b      	strh	r3, [r7, #50]	; 0x32
                    if (voltage > average_voltage + kDelta)
 8008e1e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e22:	3364      	adds	r3, #100	; 0x64
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d90b      	bls.n	8008e40 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x300>
                        DCCx |= 1 << current_cell;
 8008e28:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	b21a      	sxth	r2, r3
 8008e34:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b21b      	sxth	r3, r3
 8008e3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                    ++current_cell;
 8008e40:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8008e44:	3301      	adds	r3, #1
 8008e46:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                for (const auto voltage : register_group.register_group[current_ic].data) { // 3 voltages per IC
 8008e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e50:	e7de      	b.n	8008e10 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x2d0>
 8008e52:	bf00      	nop
 8008e54:	38e38e39 	.word	0x38e38e39
 8008e58:	aaaaaaab 	.word	0xaaaaaaab
 8008e5c:	ba2e8ba3 	.word	0xba2e8ba3
            for (const auto& register_group : cell_data) { // 4 voltage register groups
 8008e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e62:	3364      	adds	r3, #100	; 0x64
 8008e64:	663b      	str	r3, [r7, #96]	; 0x60
 8008e66:	e7bb      	b.n	8008de0 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x2a0>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            cfg_register.data[4] |= DCCx & 0xFF;
 8008e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e6a:	2104      	movs	r1, #4
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fb25 	bl	80094bc <_ZNSt5arrayIhLj6EEixEj>
 8008e72:	4603      	mov	r3, r0
 8008e74:	781a      	ldrb	r2, [r3, #0]
 8008e76:	b251      	sxtb	r1, r2
 8008e78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e7c:	b252      	sxtb	r2, r2
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	b252      	sxtb	r2, r2
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
            cfg_register.data[5] |= DCCx >> 8 & 0xF;
 8008e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e88:	2105      	movs	r1, #5
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fb16 	bl	80094bc <_ZNSt5arrayIhLj6EEixEj>
 8008e90:	4603      	mov	r3, r0
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	b251      	sxtb	r1, r2
 8008e96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e9a:	1212      	asrs	r2, r2, #8
 8008e9c:	b252      	sxtb	r2, r2
 8008e9e:	f002 020f 	and.w	r2, r2, #15
 8008ea2:	b252      	sxtb	r2, r2
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	b252      	sxtb	r2, r2
 8008ea8:	b2d2      	uxtb	r2, r2
 8008eaa:	701a      	strb	r2, [r3, #0]
            cfg_register.PEC = PEC15Calc(cfg_register.data);
 8008eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eae:	2106      	movs	r1, #6
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fb2b 	bl	800950c <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ebc:	80da      	strh	r2, [r3, #6]
            --current_ic;
 8008ebe:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        for (auto& cfg_register : slave_cfg_tx.register_group) {
 8008ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eca:	3308      	adds	r3, #8
 8008ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ece:	e76f      	b.n	8008db0 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x270>
        break;
 8008ed0:	bf00      	nop
 8008ed2:	e002      	b.n	8008eda <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x39a>
        break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus+0x39a>
        }
        break;
 8008ed8:	bf00      	nop
    }

    WriteConfigRegisterGroup();
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff fc67 	bl	80087ae <_ZN7LTC681124WriteConfigRegisterGroupEv>
    DWT_Delay(500);
 8008ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ee4:	f7ff fa14 	bl	8008310 <_Z9DWT_Delaym>
    ReadConfigRegisterGroup();
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fc51 	bl	8008790 <_ZN7LTC681123ReadConfigRegisterGroupEv>
}
 8008eee:	bf00      	nop
 8008ef0:	377c      	adds	r7, #124	; 0x7c
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd90      	pop	{r4, r7, pc}
 8008ef6:	bf00      	nop

08008ef8 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE>:


/* Start a conversion */
void LTC6811::StartConversion(const LTC6811Command& command) {
 8008ef8:	b590      	push	{r4, r7, lr}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
    WakeFromIdle(); // It's possible all of these can be removed
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fbee 	bl	80086e4 <_ZN7LTC681112WakeFromIdleEv>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2120      	movs	r1, #32
 8008f0c:	480d      	ldr	r0, [pc, #52]	; (8008f44 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE+0x4c>)
 8008f0e:	f7f8 fea9 	bl	8001c64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY);        // Start cell voltage conversion.
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681c      	ldr	r4, [r3, #0]
 8008f16:	6838      	ldr	r0, [r7, #0]
 8008f18:	f7ff fc63 	bl	80087e2 <_ZNKSt5arrayIhLj4EE4dataEv>
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f22:	2204      	movs	r2, #4
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7fb f869 	bl	8003ffc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	2120      	movs	r1, #32
 8008f2e:	4805      	ldr	r0, [pc, #20]	; (8008f44 <_ZN7LTC681115StartConversionERKSt5arrayIhLj4EE+0x4c>)
 8008f30:	f7f8 fe98 	bl	8001c64 <HAL_GPIO_WritePin>

    DWT_Delay(T_REFUP_MAX + T_CYCLE_FAST_MAX); // TODO we aren't in fast conversion mode??? Also these delays aren't in the Linduino library
 8008f34:	f241 50d1 	movw	r0, #5585	; 0x15d1
 8008f38:	f7ff f9ea 	bl	8008310 <_Z9DWT_Delaym>
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}
 8008f44:	40020000 	.word	0x40020000

08008f48 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <_ZN20LTC6811RegisterGroupIhEC1EOSt5arrayIhLj4EE>:
template<typename T>
struct LTC6811RegisterGroup {
    /* This class bundles together the command to access some register group and data sent/received after that command */
    LTC6811Command const command;
    std::array<LTC6811Register<T>, kDaisyChainLength> register_group;
    LTC6811RegisterGroup(LTC6811Command&& command) : command{ std::move(command) } {};
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
 8008f68:	6838      	ldr	r0, [r7, #0]
 8008f6a:	f7ff ffed 	bl	8008f48 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>
 8008f6e:	4601      	mov	r1, r0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	461a      	mov	r2, r3
 8008f74:	460b      	mov	r3, r1
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <_ZN20LTC6811RegisterGroupItEC1EOSt5arrayIhLj4EE>:
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
 8008f8e:	6838      	ldr	r0, [r7, #0]
 8008f90:	f7ff ffda 	bl	8008f48 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>
 8008f94:	4601      	mov	r1, r0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <_ZN20LTC6811RegisterGroupIsEC1EOSt5arrayIhLj4EE>:
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
 8008fb4:	6838      	ldr	r0, [r7, #0]
 8008fb6:	f7ff ffc7 	bl	8008f48 <_ZSt4moveIRSt5arrayIhLj4EEEONSt16remove_referenceIT_E4typeEOS4_>
 8008fba:	4601      	mov	r1, r0
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fad9 	bl	8009596 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>:
        0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
    };

    /* This has been tested against the original code and is working properly */
    template <typename T, size_t S>
    constexpr static uint16_t PEC15Calc(const std::array<T, S>& data, size_t size = S * sizeof(T)) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
        uint16_t PEC = 16, addr;
 8008ffa:	2310      	movs	r3, #16
 8008ffc:	82fb      	strh	r3, [r7, #22]
        auto serialized_data = reinterpret_cast<uint8_t const *>(data.data());
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fbef 	bl	80087e2 <_ZNKSt5arrayIhLj4EE4dataEv>
 8009004:	6138      	str	r0, [r7, #16]

        for (uint8_t i = 0; i < size; ++i) {
 8009006:	2300      	movs	r3, #0
 8009008:	757b      	strb	r3, [r7, #21]
 800900a:	7d7b      	ldrb	r3, [r7, #21]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d91b      	bls.n	800904a <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x5a>
            addr = (PEC >> 7 ^ serialized_data[i]) & 0xFF;
 8009012:	8afb      	ldrh	r3, [r7, #22]
 8009014:	11db      	asrs	r3, r3, #7
 8009016:	b21a      	sxth	r2, r3
 8009018:	7d7b      	ldrb	r3, [r7, #21]
 800901a:	6939      	ldr	r1, [r7, #16]
 800901c:	440b      	add	r3, r1
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	b21b      	sxth	r3, r3
 8009022:	4053      	eors	r3, r2
 8009024:	b21b      	sxth	r3, r3
 8009026:	b29b      	uxth	r3, r3
 8009028:	b2db      	uxtb	r3, r3
 800902a:	81fb      	strh	r3, [r7, #14]
            PEC = PEC << 8 ^ crc15Table[addr];
 800902c:	8afb      	ldrh	r3, [r7, #22]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	b21a      	sxth	r2, r3
 8009032:	89fb      	ldrh	r3, [r7, #14]
 8009034:	4908      	ldr	r1, [pc, #32]	; (8009058 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x68>)
 8009036:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800903a:	b21b      	sxth	r3, r3
 800903c:	4053      	eors	r3, r2
 800903e:	b21b      	sxth	r3, r3
 8009040:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 8009042:	7d7b      	ldrb	r3, [r7, #21]
 8009044:	3301      	adds	r3, #1
 8009046:	757b      	strb	r3, [r7, #21]
 8009048:	e7df      	b.n	800900a <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x1a>
        }

        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800904a:	8afb      	ldrh	r3, [r7, #22]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	b29b      	uxth	r3, r3
    }
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	0800bf74 	.word	0x0800bf74

0800905c <_ZNSt5arrayI15LTC6811RegisterIhELj12EE5beginEv>:
      begin() noexcept
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8c1 	bl	80091ec <_ZNSt5arrayI15LTC6811RegisterIhELj12EE4dataEv>
 800906a:	4603      	mov	r3, r0
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <_ZNKSt5arrayI15LTC6811RegisterIhELj12EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	230c      	movs	r3, #12
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <_ZNSt5arrayI15LTC6811RegisterIhELj12EE4fillERKS1_>:
      fill(const value_type& __u)
 800908a:	b590      	push	{r4, r7, lr}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ffe1 	bl	800905c <_ZNSt5arrayI15LTC6811RegisterIhELj12EE5beginEv>
 800909a:	4604      	mov	r4, r0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ffe9 	bl	8009074 <_ZNKSt5arrayI15LTC6811RegisterIhELj12EE4sizeEv>
 80090a2:	4603      	mov	r3, r0
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	4619      	mov	r1, r3
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fa82 	bl	80095b2 <_ZSt6fill_nIP15LTC6811RegisterIhEjS1_ET_S3_T0_RKT1_>
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd90      	pop	{r4, r7, pc}

080090b6 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EEixEj>:
      operator[](size_type __n) noexcept
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fa88 	bl	80095da <_ZNSt14__array_traitsI20LTC6811RegisterGroupItELj4EE6_S_refERA4_KS1_j>
 80090ca:	4603      	mov	r3, r0
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <_ZNSt5arrayI15LTC6811RegisterItELj12EE5beginEv>:
      begin() noexcept
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f805 	bl	80090ec <_ZNSt5arrayI15LTC6811RegisterItELj12EE4dataEv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <_ZNSt5arrayI15LTC6811RegisterItELj12EE4dataEv>:
      data() noexcept
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f805 	bl	8009106 <_ZNSt14__array_traitsI15LTC6811RegisterItELj12EE6_S_ptrERA12_KS1_>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <_ZNSt14__array_traitsI15LTC6811RegisterItELj12EE6_S_ptrERA12_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E>:
    uint8_t ReadRegisterGroup(LTC6811RegisterGroup<T>& register_group) {
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b089      	sub	sp, #36	; 0x24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
        WakeFromIdle();
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff fadc 	bl	80086e4 <_ZN7LTC681112WakeFromIdleEv>
        auto serialized_data = reinterpret_cast<uint8_t*>(register_group.register_group.begin());
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	3304      	adds	r3, #4
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ffcf 	bl	80090d4 <_ZNSt5arrayI15LTC6811RegisterItELj12EE5beginEv>
 8009136:	61b8      	str	r0, [r7, #24]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009138:	2200      	movs	r2, #0
 800913a:	2120      	movs	r1, #32
 800913c:	482a      	ldr	r0, [pc, #168]	; (80091e8 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0xcc>)
 800913e:	f7f8 fd91 	bl	8001c64 <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, register_group.command.data(), kCommandLength, 100);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681c      	ldr	r4, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff fb4a 	bl	80087e2 <_ZNKSt5arrayIhLj4EE4dataEv>
 800914e:	4601      	mov	r1, r0
 8009150:	2364      	movs	r3, #100	; 0x64
 8009152:	2204      	movs	r2, #4
 8009154:	4620      	mov	r0, r4
 8009156:	f7fa ff51 	bl	8003ffc <HAL_SPI_Transmit>
 800915a:	4603      	mov	r3, r0
 800915c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800915e:	2200      	movs	r2, #0
 8009160:	2120      	movs	r1, #32
 8009162:	4821      	ldr	r0, [pc, #132]	; (80091e8 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0xcc>)
 8009164:	f7f8 fd7e 	bl	8001c64 <HAL_GPIO_WritePin>
        if (result == HAL_ERROR || HAL_SPI_Receive(&hspi, serialized_data, kBytesPerRegister * kDaisyChainLength, 100) == HAL_ERROR)
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d009      	beq.n	8009182 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0x66>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	2364      	movs	r3, #100	; 0x64
 8009174:	2260      	movs	r2, #96	; 0x60
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	f7fb f874 	bl	8004264 <HAL_SPI_Receive>
 800917c:	4603      	mov	r3, r0
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0x6a>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0x6c>
 8009186:	2300      	movs	r3, #0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0x74>
            return 1; // SPI error
 800918c:	2301      	movs	r3, #1
 800918e:	e026      	b.n	80091de <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0xc2>
            for (auto& Register : register_group.register_group)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	3304      	adds	r3, #4
 8009194:	613b      	str	r3, [r7, #16]
 8009196:	6938      	ldr	r0, [r7, #16]
 8009198:	f7ff ff9c 	bl	80090d4 <_ZNSt5arrayI15LTC6811RegisterItELj12EE5beginEv>
 800919c:	61f8      	str	r0, [r7, #28]
 800919e:	6938      	ldr	r0, [r7, #16]
 80091a0:	f000 fa2c 	bl	80095fc <_ZNSt5arrayI15LTC6811RegisterItELj12EE3endEv>
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d016      	beq.n	80091dc <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0xc0>
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	60bb      	str	r3, [r7, #8]
                if (Register.PEC != PEC15Calc(Register.data))
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	88dc      	ldrh	r4, [r3, #6]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2106      	movs	r1, #6
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fa44 	bl	8009648 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>
 80091c0:	4603      	mov	r3, r0
 80091c2:	429c      	cmp	r4, r3
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0xb8>
                    return 1; // PEC error
 80091d0:	2301      	movs	r3, #1
 80091d2:	e004      	b.n	80091de <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0xc2>
            for (auto& Register : register_group.register_group)
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	3308      	adds	r3, #8
 80091d8:	61fb      	str	r3, [r7, #28]
 80091da:	e7e4      	b.n	80091a6 <_ZN7LTC681117ReadRegisterGroupItEEhR20LTC6811RegisterGroupIT_E+0x8a>
            return 0; // Success
 80091dc:	2300      	movs	r3, #0
    }
 80091de:	4618      	mov	r0, r3
 80091e0:	3724      	adds	r7, #36	; 0x24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd90      	pop	{r4, r7, pc}
 80091e6:	bf00      	nop
 80091e8:	40020000 	.word	0x40020000

080091ec <_ZNSt5arrayI15LTC6811RegisterIhELj12EE4dataEv>:
      data() noexcept
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f805 	bl	8009206 <_ZNSt14__array_traitsI15LTC6811RegisterIhELj12EE6_S_ptrERA12_KS1_>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <_ZNSt14__array_traitsI15LTC6811RegisterIhELj12EE6_S_ptrERA12_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E>:
    uint8_t ReadRegisterGroup(LTC6811RegisterGroup<T>& register_group) {
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b089      	sub	sp, #36	; 0x24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
        WakeFromIdle();
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff fa5c 	bl	80086e4 <_ZN7LTC681112WakeFromIdleEv>
        auto serialized_data = reinterpret_cast<uint8_t*>(register_group.register_group.begin());
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	3304      	adds	r3, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff ff13 	bl	800905c <_ZNSt5arrayI15LTC6811RegisterIhELj12EE5beginEv>
 8009236:	61b8      	str	r0, [r7, #24]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009238:	2200      	movs	r2, #0
 800923a:	2120      	movs	r1, #32
 800923c:	482a      	ldr	r0, [pc, #168]	; (80092e8 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0xcc>)
 800923e:	f7f8 fd11 	bl	8001c64 <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, register_group.command.data(), kCommandLength, 100);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681c      	ldr	r4, [r3, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff faca 	bl	80087e2 <_ZNKSt5arrayIhLj4EE4dataEv>
 800924e:	4601      	mov	r1, r0
 8009250:	2364      	movs	r3, #100	; 0x64
 8009252:	2204      	movs	r2, #4
 8009254:	4620      	mov	r0, r4
 8009256:	f7fa fed1 	bl	8003ffc <HAL_SPI_Transmit>
 800925a:	4603      	mov	r3, r0
 800925c:	75fb      	strb	r3, [r7, #23]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800925e:	2200      	movs	r2, #0
 8009260:	2120      	movs	r1, #32
 8009262:	4821      	ldr	r0, [pc, #132]	; (80092e8 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0xcc>)
 8009264:	f7f8 fcfe 	bl	8001c64 <HAL_GPIO_WritePin>
        if (result == HAL_ERROR || HAL_SPI_Receive(&hspi, serialized_data, kBytesPerRegister * kDaisyChainLength, 100) == HAL_ERROR)
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d009      	beq.n	8009282 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0x66>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	2364      	movs	r3, #100	; 0x64
 8009274:	2260      	movs	r2, #96	; 0x60
 8009276:	69b9      	ldr	r1, [r7, #24]
 8009278:	f7fa fff4 	bl	8004264 <HAL_SPI_Receive>
 800927c:	4603      	mov	r3, r0
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0x6a>
 8009282:	2301      	movs	r3, #1
 8009284:	e000      	b.n	8009288 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0x6c>
 8009286:	2300      	movs	r3, #0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0x74>
            return 1; // SPI error
 800928c:	2301      	movs	r3, #1
 800928e:	e026      	b.n	80092de <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0xc2>
            for (auto& Register : register_group.register_group)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	3304      	adds	r3, #4
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	6938      	ldr	r0, [r7, #16]
 8009298:	f7ff fee0 	bl	800905c <_ZNSt5arrayI15LTC6811RegisterIhELj12EE5beginEv>
 800929c:	61f8      	str	r0, [r7, #28]
 800929e:	6938      	ldr	r0, [r7, #16]
 80092a0:	f000 f8f0 	bl	8009484 <_ZNSt5arrayI15LTC6811RegisterIhELj12EE3endEv>
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d016      	beq.n	80092dc <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0xc0>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	60bb      	str	r3, [r7, #8]
                if (Register.PEC != PEC15Calc(Register.data))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	88dc      	ldrh	r4, [r3, #6]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2106      	movs	r1, #6
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 f926 	bl	800950c <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80092c0:	4603      	mov	r3, r0
 80092c2:	429c      	cmp	r4, r3
 80092c4:	bf14      	ite	ne
 80092c6:	2301      	movne	r3, #1
 80092c8:	2300      	moveq	r3, #0
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0xb8>
                    return 1; // PEC error
 80092d0:	2301      	movs	r3, #1
 80092d2:	e004      	b.n	80092de <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0xc2>
            for (auto& Register : register_group.register_group)
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3308      	adds	r3, #8
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	e7e4      	b.n	80092a6 <_ZN7LTC681117ReadRegisterGroupIhEEhR20LTC6811RegisterGroupIT_E+0x8a>
            return 0; // Success
 80092dc:	2300      	movs	r3, #0
    }
 80092de:	4618      	mov	r0, r3
 80092e0:	3724      	adds	r7, #36	; 0x24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}
 80092e6:	bf00      	nop
 80092e8:	40020000 	.word	0x40020000

080092ec <_ZN7LTC681113WriteRegisterIhEEhR20LTC6811RegisterGroupIT_E>:
    uint8_t WriteRegister(LTC6811RegisterGroup<T>& register_group) {
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
        WakeFromIdle();
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff f9f4 	bl	80086e4 <_ZN7LTC681112WakeFromIdleEv>
        auto serialized_data = reinterpret_cast<uint8_t*>(&register_group);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009300:	2200      	movs	r2, #0
 8009302:	2120      	movs	r1, #32
 8009304:	480a      	ldr	r0, [pc, #40]	; (8009330 <_ZN7LTC681113WriteRegisterIhEEhR20LTC6811RegisterGroupIT_E+0x44>)
 8009306:	f7f8 fcad 	bl	8001c64 <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, serialized_data, sizeof(register_group), 100);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	2364      	movs	r3, #100	; 0x64
 8009310:	2264      	movs	r2, #100	; 0x64
 8009312:	68f9      	ldr	r1, [r7, #12]
 8009314:	f7fa fe72 	bl	8003ffc <HAL_SPI_Transmit>
 8009318:	4603      	mov	r3, r0
 800931a:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800931c:	2201      	movs	r2, #1
 800931e:	2120      	movs	r1, #32
 8009320:	4803      	ldr	r0, [pc, #12]	; (8009330 <_ZN7LTC681113WriteRegisterIhEEhR20LTC6811RegisterGroupIT_E+0x44>)
 8009322:	f7f8 fc9f 	bl	8001c64 <HAL_GPIO_WritePin>
        return result;
 8009326:	7afb      	ldrb	r3, [r7, #11]
    }
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40020000 	.word	0x40020000

08009334 <_ZNSt8optionalI20LTC6811VoltageStatusEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() = default;

      constexpr optional(nullopt_t) noexcept
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	7039      	strb	r1, [r7, #0]
	: _Base(nullopt) { }
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f9c4 	bl	80096d0 <_ZNSt14_Optional_baseI20LTC6811VoltageStatusEC1ESt9nullopt_t>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE5beginEv>:
      begin() noexcept
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9c6 	bl	80096ec <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE4dataEv>
 8009360:	4603      	mov	r3, r0
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE3endEv>:
      end() noexcept
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9ba 	bl	80096ec <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE4dataEv>
 8009378:	4603      	mov	r3, r0
 800937a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <_ZNKSt5arrayI15LTC6811RegisterItELj12EE5beginEv>:
      begin() const noexcept
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f9b9 	bl	8009706 <_ZNKSt5arrayI15LTC6811RegisterItELj12EE4dataEv>
 8009394:	4603      	mov	r3, r0
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <_ZNKSt5arrayI15LTC6811RegisterItELj12EE3endEv>:
      end() const noexcept
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9ad 	bl	8009706 <_ZNKSt5arrayI15LTC6811RegisterItELj12EE4dataEv>
 80093ac:	4603      	mov	r3, r0
 80093ae:	3360      	adds	r3, #96	; 0x60
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <_ZNKSt5arrayItLj3EE5beginEv>:
      begin() const noexcept
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f933 	bl	800962c <_ZNKSt5arrayItLj3EE4dataEv>
 80093c6:	4603      	mov	r3, r0
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <_ZNKSt5arrayItLj3EE3endEv>:
      end() const noexcept
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f927 	bl	800962c <_ZNKSt5arrayItLj3EE4dataEv>
 80093de:	4603      	mov	r3, r0
 80093e0:	3306      	adds	r3, #6
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <_ZSt7forwardIR20LTC6811VoltageStatusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <_ZNSt8optionalI20LTC6811VoltageStatusEC1IRS0_Lb1EEEOT_>:
			      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,
			      __not_<is_same<in_place_t, decay_t<_Up>>>,
			      is_constructible<_Tp, _Up&&>,
			      is_convertible<_Up&&, _Tp>
			      >::value, bool> = true>
      constexpr optional(_Up&& __t)
 8009400:	b5b0      	push	{r4, r5, r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 800940a:	687c      	ldr	r4, [r7, #4]
 800940c:	6838      	ldr	r0, [r7, #0]
 800940e:	f7ff ffec 	bl	80093ea <_ZSt7forwardIR20LTC6811VoltageStatusEOT_RNSt16remove_referenceIS2_E4typeE>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	4629      	mov	r1, r5
 8009418:	4620      	mov	r0, r4
 800941a:	f000 f99a 	bl	8009752 <_ZNSt14_Optional_baseI20LTC6811VoltageStatusEC1IJRS0_ELb0EEESt10in_place_tDpOT_>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bdb0      	pop	{r4, r5, r7, pc}

08009428 <_ZNSt8optionalI17LTC6811TempStatusEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	7039      	strb	r1, [r7, #0]
	: _Base(nullopt) { }
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f9ae 	bl	8009798 <_ZNSt14_Optional_baseI17LTC6811TempStatusEC1ESt9nullopt_t>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <_ZSt7forwardIR17LTC6811TempStatusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <_ZNSt8optionalI17LTC6811TempStatusEC1IRS0_Lb1EEEOT_>:
      constexpr optional(_Up&& __t)
 800945c:	b5b0      	push	{r4, r5, r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 8009466:	687c      	ldr	r4, [r7, #4]
 8009468:	6838      	ldr	r0, [r7, #0]
 800946a:	f7ff ffec 	bl	8009446 <_ZSt7forwardIR17LTC6811TempStatusEOT_RNSt16remove_referenceIS2_E4typeE>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	4629      	mov	r1, r5
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f9b5 	bl	80097e4 <_ZNSt14_Optional_baseI17LTC6811TempStatusEC1IJRS0_ELb0EEESt10in_place_tDpOT_>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bdb0      	pop	{r4, r5, r7, pc}

08009484 <_ZNSt5arrayI15LTC6811RegisterIhELj12EE3endEv>:
      end() noexcept
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff fead 	bl	80091ec <_ZNSt5arrayI15LTC6811RegisterIhELj12EE4dataEv>
 8009492:	4603      	mov	r3, r0
 8009494:	3360      	adds	r3, #96	; 0x60
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <_ZNKSt5arrayI15LTC6811RegisterItELj12EEixEj>:
      operator[](size_type __n) const noexcept
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 f9ae 	bl	800980e <_ZNSt14__array_traitsI15LTC6811RegisterItELj12EE6_S_refERA12_KS1_j>
 80094b2:	4603      	mov	r3, r0
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <_ZNSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) noexcept
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f9ae 	bl	800982c <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <_ZNSt14__array_traitsIhLj6EE6_S_ptrERA6_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <_ZNKSt5arrayIhLj6EE4dataEv>:
      data() const noexcept
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff ffed 	bl	80094da <_ZNSt14__array_traitsIhLj6EE6_S_ptrERA6_Kh>
 8009500:	4603      	mov	r3, r0
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>:
    constexpr static uint16_t PEC15Calc(const std::array<T, S>& data, size_t size = S * sizeof(T)) {
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
        uint16_t PEC = 16, addr;
 8009516:	2310      	movs	r3, #16
 8009518:	82fb      	strh	r3, [r7, #22]
        auto serialized_data = reinterpret_cast<uint8_t const *>(data.data());
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff ffe8 	bl	80094f0 <_ZNKSt5arrayIhLj6EE4dataEv>
 8009520:	6138      	str	r0, [r7, #16]
        for (uint8_t i = 0; i < size; ++i) {
 8009522:	2300      	movs	r3, #0
 8009524:	757b      	strb	r3, [r7, #21]
 8009526:	7d7b      	ldrb	r3, [r7, #21]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d91b      	bls.n	8009566 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x5a>
            addr = (PEC >> 7 ^ serialized_data[i]) & 0xFF;
 800952e:	8afb      	ldrh	r3, [r7, #22]
 8009530:	11db      	asrs	r3, r3, #7
 8009532:	b21a      	sxth	r2, r3
 8009534:	7d7b      	ldrb	r3, [r7, #21]
 8009536:	6939      	ldr	r1, [r7, #16]
 8009538:	440b      	add	r3, r1
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b21b      	sxth	r3, r3
 800953e:	4053      	eors	r3, r2
 8009540:	b21b      	sxth	r3, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	b2db      	uxtb	r3, r3
 8009546:	81fb      	strh	r3, [r7, #14]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009548:	8afb      	ldrh	r3, [r7, #22]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	b21a      	sxth	r2, r3
 800954e:	89fb      	ldrh	r3, [r7, #14]
 8009550:	4908      	ldr	r1, [pc, #32]	; (8009574 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x68>)
 8009552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009556:	b21b      	sxth	r3, r3
 8009558:	4053      	eors	r3, r2
 800955a:	b21b      	sxth	r3, r3
 800955c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 800955e:	7d7b      	ldrb	r3, [r7, #21]
 8009560:	3301      	adds	r3, #1
 8009562:	757b      	strb	r3, [r7, #21]
 8009564:	e7df      	b.n	8009526 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x1a>
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8009566:	8afb      	ldrh	r3, [r7, #22]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	b29b      	uxth	r3, r3
    }
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	0800bf74 	.word	0x0800bf74

08009578 <_ZNSt5arrayI15LTC6811RegisterIhELj12EEixEj>:
      operator[](size_type __n) noexcept
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f95e 	bl	8009848 <_ZNSt14__array_traitsI15LTC6811RegisterIhELj12EE6_S_refERA12_KS1_j>
 800958c:	4603      	mov	r3, r0
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	4413      	add	r3, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <_ZSt6fill_nIP15LTC6811RegisterIhEjS1_ET_S3_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 f951 	bl	8009866 <_ZSt12__niter_baseIP15LTC6811RegisterIhEET_S3_>
 80095c4:	4603      	mov	r3, r0
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f956 	bl	800987c <_ZSt10__fill_n_aIP15LTC6811RegisterIhEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_>
 80095d0:	4603      	mov	r3, r0
    }
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <_ZNSt14__array_traitsI20LTC6811RegisterGroupItELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2264      	movs	r2, #100	; 0x64
 80095e8:	fb02 f303 	mul.w	r3, r2, r3
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	4413      	add	r3, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <_ZNSt5arrayI15LTC6811RegisterItELj12EE3endEv>:
      end() noexcept
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff fd71 	bl	80090ec <_ZNSt5arrayI15LTC6811RegisterItELj12EE4dataEv>
 800960a:	4603      	mov	r3, r0
 800960c:	3360      	adds	r3, #96	; 0x60
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>:
      _S_ptr(const _Type& __t) noexcept
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <_ZNKSt5arrayItLj3EE4dataEv>:
      data() const noexcept
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff ffed 	bl	8009616 <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>
 800963c:	4603      	mov	r3, r0
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>:
    constexpr static uint16_t PEC15Calc(const std::array<T, S>& data, size_t size = S * sizeof(T)) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
        uint16_t PEC = 16, addr;
 8009652:	2310      	movs	r3, #16
 8009654:	82fb      	strh	r3, [r7, #22]
        auto serialized_data = reinterpret_cast<uint8_t const *>(data.data());
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ffe8 	bl	800962c <_ZNKSt5arrayItLj3EE4dataEv>
 800965c:	6138      	str	r0, [r7, #16]
        for (uint8_t i = 0; i < size; ++i) {
 800965e:	2300      	movs	r3, #0
 8009660:	757b      	strb	r3, [r7, #21]
 8009662:	7d7b      	ldrb	r3, [r7, #21]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d91b      	bls.n	80096a2 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x5a>
            addr = (PEC >> 7 ^ serialized_data[i]) & 0xFF;
 800966a:	8afb      	ldrh	r3, [r7, #22]
 800966c:	11db      	asrs	r3, r3, #7
 800966e:	b21a      	sxth	r2, r3
 8009670:	7d7b      	ldrb	r3, [r7, #21]
 8009672:	6939      	ldr	r1, [r7, #16]
 8009674:	440b      	add	r3, r1
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	b21b      	sxth	r3, r3
 800967a:	4053      	eors	r3, r2
 800967c:	b21b      	sxth	r3, r3
 800967e:	b29b      	uxth	r3, r3
 8009680:	b2db      	uxtb	r3, r3
 8009682:	81fb      	strh	r3, [r7, #14]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009684:	8afb      	ldrh	r3, [r7, #22]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	b21a      	sxth	r2, r3
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	4908      	ldr	r1, [pc, #32]	; (80096b0 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x68>)
 800968e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009692:	b21b      	sxth	r3, r3
 8009694:	4053      	eors	r3, r2
 8009696:	b21b      	sxth	r3, r3
 8009698:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 800969a:	7d7b      	ldrb	r3, [r7, #21]
 800969c:	3301      	adds	r3, #1
 800969e:	757b      	strb	r3, [r7, #21]
 80096a0:	e7df      	b.n	8009662 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x1a>
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 80096a2:	8afb      	ldrh	r3, [r7, #22]
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	b29b      	uxth	r3, r3
    }
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	0800bf74 	.word	0x0800bf74

080096b4 <_ZNSt17_Optional_payloadI20LTC6811VoltageStatusLb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	751a      	strb	r2, [r3, #20]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <_ZNSt14_Optional_baseI20LTC6811VoltageStatusEC1ESt9nullopt_t>:
      constexpr _Optional_base(nullopt_t) noexcept
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	7039      	strb	r1, [r7, #0]
      { }
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff ffe9 	bl	80096b4 <_ZNSt17_Optional_payloadI20LTC6811VoltageStatusLb1ELb1EEC1Ev>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <_ZNSt5arrayI20LTC6811RegisterGroupItELj4EE4dataEv>:
      data() noexcept
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f8df 	bl	80098ba <_ZNSt14__array_traitsI20LTC6811RegisterGroupItELj4EE6_S_ptrERA4_KS1_>
 80096fc:	4603      	mov	r3, r0
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <_ZNKSt5arrayI15LTC6811RegisterItELj12EE4dataEv>:
      data() const noexcept
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fcf8 	bl	8009106 <_ZNSt14__array_traitsI15LTC6811RegisterItELj12EE6_S_ptrERA12_KS1_>
 8009716:	4603      	mov	r3, r0
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <_ZNSt17_Optional_payloadI20LTC6811VoltageStatusLb1ELb1EEC1IJRS0_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 8009720:	b5b0      	push	{r4, r5, r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	7239      	strb	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fe5c 	bl	80093ea <_ZSt7forwardIR20LTC6811VoltageStatusEOT_RNSt16remove_referenceIS2_E4typeE>
 8009732:	4602      	mov	r2, r0
	  _M_engaged(true)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	461c      	mov	r4, r3
 8009738:	4615      	mov	r5, r2
 800973a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800973c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	751a      	strb	r2, [r3, #20]
      {}
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bdb0      	pop	{r4, r5, r7, pc}

08009752 <_ZNSt14_Optional_baseI20LTC6811VoltageStatusEC1IJRS0_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8009752:	b5b0      	push	{r4, r5, r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	7239      	strb	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800975e:	68fc      	ldr	r4, [r7, #12]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fe42 	bl	80093ea <_ZSt7forwardIR20LTC6811VoltageStatusEOT_RNSt16remove_referenceIS2_E4typeE>
 8009766:	4603      	mov	r3, r0
 8009768:	461a      	mov	r2, r3
 800976a:	4629      	mov	r1, r5
 800976c:	4620      	mov	r0, r4
 800976e:	f7ff ffd7 	bl	8009720 <_ZNSt17_Optional_payloadI20LTC6811VoltageStatusLb1ELb1EEC1IJRS0_EEESt10in_place_tDpOT_>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bdb0      	pop	{r4, r5, r7, pc}

0800977c <_ZNSt17_Optional_payloadI17LTC6811TempStatusLb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	741a      	strb	r2, [r3, #16]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <_ZNSt14_Optional_baseI17LTC6811TempStatusEC1ESt9nullopt_t>:
      constexpr _Optional_base(nullopt_t) noexcept
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	7039      	strb	r1, [r7, #0]
      { }
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff ffe9 	bl	800977c <_ZNSt17_Optional_payloadI17LTC6811TempStatusLb1ELb1EEC1Ev>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZNSt17_Optional_payloadI17LTC6811TempStatusLb1ELb1EEC1IJRS0_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 80097b4:	b590      	push	{r4, r7, lr}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	7239      	strb	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff fe40 	bl	8009446 <_ZSt7forwardIR17LTC6811TempStatusEOT_RNSt16remove_referenceIS2_E4typeE>
 80097c6:	4602      	mov	r2, r0
	  _M_engaged(true)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	461c      	mov	r4, r3
 80097cc:	4613      	mov	r3, r2
 80097ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2201      	movs	r2, #1
 80097d8:	741a      	strb	r2, [r3, #16]
      {}
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd90      	pop	{r4, r7, pc}

080097e4 <_ZNSt14_Optional_baseI17LTC6811TempStatusEC1IJRS0_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 80097e4:	b5b0      	push	{r4, r5, r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	7239      	strb	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 80097f0:	68fc      	ldr	r4, [r7, #12]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff fe27 	bl	8009446 <_ZSt7forwardIR17LTC6811TempStatusEOT_RNSt16remove_referenceIS2_E4typeE>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	4629      	mov	r1, r5
 80097fe:	4620      	mov	r0, r4
 8009800:	f7ff ffd8 	bl	80097b4 <_ZNSt17_Optional_payloadI17LTC6811TempStatusLb1ELb1EEC1IJRS0_EEESt10in_place_tDpOT_>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bdb0      	pop	{r4, r5, r7, pc}

0800980e <_ZNSt14__array_traitsI15LTC6811RegisterItELj12EE6_S_refERA12_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	4413      	add	r3, r2
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <_ZNSt14__array_traitsI15LTC6811RegisterIhELj12EE6_S_refERA12_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	4413      	add	r3, r2
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <_ZSt12__niter_baseIP15LTC6811RegisterIhEET_S3_>:
    __niter_base(_Iterator __it)
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <_ZSt10__fill_n_aIP15LTC6811RegisterIhEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
      for (__decltype(__n + 0) __niter = __n;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00c      	beq.n	80098ac <_ZSt10__fill_n_aIP15LTC6811RegisterIhEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_+0x30>
	*__first = __value;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6811      	ldr	r1, [r2, #0]
 8009898:	6852      	ldr	r2, [r2, #4]
 800989a:	6019      	str	r1, [r3, #0]
 800989c:	605a      	str	r2, [r3, #4]
      for (__decltype(__n + 0) __niter = __n;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3308      	adds	r3, #8
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	e7ef      	b.n	800988c <_ZSt10__fill_n_aIP15LTC6811RegisterIhEjS1_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES8_T0_RKS6_+0x10>
      return __first;
 80098ac:	68fb      	ldr	r3, [r7, #12]
    }
 80098ae:	4618      	mov	r0, r3
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <_ZNSt14__array_traitsI20LTC6811RegisterGroupItELj4EE6_S_ptrERA4_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80098da:	f000 f879 	bl	80099d0 <BSP_SD_IsDetected>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d001      	beq.n	80098e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e012      	b.n	800990e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80098e8:	480b      	ldr	r0, [pc, #44]	; (8009918 <BSP_SD_Init+0x48>)
 80098ea:	f7f9 f9ab 	bl	8002c44 <HAL_SD_Init>
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80098f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80098fc:	4806      	ldr	r0, [pc, #24]	; (8009918 <BSP_SD_Init+0x48>)
 80098fe:	f7f9 ff99 	bl	8003834 <HAL_SD_ConfigWideBusOperation>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800990c:	79fb      	ldrb	r3, [r7, #7]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20000114 	.word	0x20000114

0800991c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	4806      	ldr	r0, [pc, #24]	; (8009954 <BSP_SD_ReadBlocks+0x38>)
 800993a:	f7f9 fa13 	bl	8002d64 <HAL_SD_ReadBlocks>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009948:	7dfb      	ldrb	r3, [r7, #23]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000114 	.word	0x20000114

08009958 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af02      	add	r7, sp, #8
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	68f9      	ldr	r1, [r7, #12]
 8009974:	4806      	ldr	r0, [pc, #24]	; (8009990 <BSP_SD_WriteBlocks+0x38>)
 8009976:	f7f9 fbed 	bl	8003154 <HAL_SD_WriteBlocks>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009984:	7dfb      	ldrb	r3, [r7, #23]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20000114 	.word	0x20000114

08009994 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009998:	4805      	ldr	r0, [pc, #20]	; (80099b0 <BSP_SD_GetCardState+0x1c>)
 800999a:	f7f9 ffc7 	bl	800392c <HAL_SD_GetCardState>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	bf14      	ite	ne
 80099a4:	2301      	movne	r3, #1
 80099a6:	2300      	moveq	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000114 	.word	0x20000114

080099b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	4803      	ldr	r0, [pc, #12]	; (80099cc <BSP_SD_GetCardInfo+0x18>)
 80099c0:	f7f9 ff0c 	bl	80037dc <HAL_SD_GetCardInfo>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20000114 	.word	0x20000114

080099d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80099d6:	2301      	movs	r3, #1
 80099d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80099da:	f000 f825 	bl	8009a28 <BSP_PlatformIsDetected>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80099e4:	2300      	movs	r3, #0
 80099e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	b2db      	uxtb	r3, r3
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80099f8:	4904      	ldr	r1, [pc, #16]	; (8009a0c <MX_FATFS_Init+0x18>)
 80099fa:	4805      	ldr	r0, [pc, #20]	; (8009a10 <MX_FATFS_Init+0x1c>)
 80099fc:	f7fe fc52 	bl	80082a4 <FATFS_LinkDriver>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	4b03      	ldr	r3, [pc, #12]	; (8009a14 <MX_FATFS_Init+0x20>)
 8009a06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009a08:	bf00      	nop
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000234 	.word	0x20000234
 8009a10:	0800c174 	.word	0x0800c174
 8009a14:	20000230 	.word	0x20000230

08009a18 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009a1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a36:	4806      	ldr	r0, [pc, #24]	; (8009a50 <BSP_PlatformIsDetected+0x28>)
 8009a38:	f7f8 f8fc 	bl	8001c34 <HAL_GPIO_ReadPin>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009a42:	2300      	movs	r3, #0
 8009a44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009a46:	79fb      	ldrb	r3, [r7, #7]
}  
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	40020000 	.word	0x40020000

08009a54 <_ZN4NLG5C1Ettt>:
    uint16_t oc_limit;
    uint16_t ov_limit;
    uint8_t a_buffer[4];
    uint8_t b_buffer[4];

    NLG5(uint16_t mc_limit = 160, uint16_t oc_limit = 60, uint16_t ov_limit = 2990) :
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	817b      	strh	r3, [r7, #10]
 8009a66:	460b      	mov	r3, r1
 8009a68:	813b      	strh	r3, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	80fb      	strh	r3, [r7, #6]
        mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit } {};
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	897a      	ldrh	r2, [r7, #10]
 8009a72:	805a      	strh	r2, [r3, #2]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	893a      	ldrh	r2, [r7, #8]
 8009a78:	809a      	strh	r2, [r3, #4]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	88fa      	ldrh	r2, [r7, #6]
 8009a7e:	80da      	strh	r2, [r3, #6]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <_ZN6StatusC1EhR4NLG5>:
        NumberOfErrors
    };

    enum OpMode { Core = 1 << 0, Balance = 1 << 1, Charging = 1 << 2, Debug = 1 << 3, Logging = 1 << 4 };

    Status(uint8_t op_mode, NLG5& nlg5) : op_mode { op_mode }, nlg5 { nlg5 } { // get rid of logging bool and just use op mode
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	460b      	mov	r3, r1
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	72fb      	strb	r3, [r7, #11]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	7afa      	ldrb	r2, [r7, #11]
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	705a      	strb	r2, [r3, #1]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	609a      	str	r2, [r3, #8]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	731a      	strb	r2, [r3, #12]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	735a      	strb	r2, [r3, #13]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	739a      	strb	r2, [r3, #14]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	73da      	strb	r2, [r3, #15]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3310      	adds	r3, #16
 8009ad0:	2224      	movs	r2, #36	; 0x24
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 f8d9 	bl	800bc8c <memset>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	869a      	strh	r2, [r3, #52]	; 0x34
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	879a      	strh	r2, [r3, #60]	; 0x3c
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	649a      	str	r2, [r3, #72]	; 0x48
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	64da      	str	r2, [r3, #76]	; 0x4c
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f04f 0200 	mov.w	r2, #0
 8009b30:	651a      	str	r2, [r3, #80]	; 0x50
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f04f 0200 	mov.w	r2, #0
 8009b38:	655a      	str	r2, [r3, #84]	; 0x54
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	335c      	adds	r3, #92	; 0x5c
 8009b44:	2230      	movs	r2, #48	; 0x30
 8009b46:	2100      	movs	r1, #0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f002 f89f 	bl	800bc8c <memset>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        OpenAIR();
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f80d 	bl	8009b90 <_ZNK6Status7OpenAIREv>
        OpenPRE();
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 f83a 	bl	8009bf0 <_ZN6Status7OpenPREEv>
        SetFanDutyCycle(kFanLowDutyCycle);
 8009b7c:	210a      	movs	r1, #10
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 f876 	bl	8009c70 <_ZN6Status15SetFanDutyCycleEh>
    };
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <_ZNK6Status7OpenAIREv>:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
    }

    /* De-energize AIR (Accumulator Indicator Relay). */
    void OpenAIR(void) const {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
 8009b98:	2201      	movs	r2, #1
 8009b9a:	2102      	movs	r1, #2
 8009b9c:	4805      	ldr	r0, [pc, #20]	; (8009bb4 <_ZNK6Status7OpenAIREv+0x24>)
 8009b9e:	f7f8 f861 	bl	8001c64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	4804      	ldr	r0, [pc, #16]	; (8009bb8 <_ZNK6Status7OpenAIREv+0x28>)
 8009ba8:	f7f8 f85c 	bl	8001c64 <HAL_GPIO_WritePin>
    }
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40020400 	.word	0x40020400
 8009bb8:	40020800 	.word	0x40020800

08009bbc <_ZN6Status8ClosePREEv>:

    /* Energize PRE (Pre-charge Relay). */
    void ClosePRE(void) {
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // PRECHARGE
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	4807      	ldr	r0, [pc, #28]	; (8009be8 <_ZN6Status8ClosePREEv+0x2c>)
 8009bca:	f7f8 f84b 	bl	8001c64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // LED1
 8009bce:	2201      	movs	r2, #1
 8009bd0:	2102      	movs	r1, #2
 8009bd2:	4806      	ldr	r0, [pc, #24]	; (8009bec <_ZN6Status8ClosePREEv+0x30>)
 8009bd4:	f7f8 f846 	bl	8001c64 <HAL_GPIO_WritePin>
        precharge_flag = true;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	731a      	strb	r2, [r3, #12]
    }
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	40020400 	.word	0x40020400
 8009bec:	40020800 	.word	0x40020800

08009bf0 <_ZN6Status7OpenPREEv>:

    /* De-energize PRE (Pre-charge Relay). */
    void OpenPRE(void) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PRECHARGE
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	4807      	ldr	r0, [pc, #28]	; (8009c1c <_ZN6Status7OpenPREEv+0x2c>)
 8009bfe:	f7f8 f831 	bl	8001c64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // LED1
 8009c02:	2200      	movs	r2, #0
 8009c04:	2102      	movs	r1, #2
 8009c06:	4806      	ldr	r0, [pc, #24]	; (8009c20 <_ZN6Status7OpenPREEv+0x30>)
 8009c08:	f7f8 f82c 	bl	8001c64 <HAL_GPIO_WritePin>
        precharge_flag = false;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	731a      	strb	r2, [r3, #12]
    }
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	40020400 	.word	0x40020400
 8009c20:	40020800 	.word	0x40020800

08009c24 <_ZN6Status18IncreasePecCounterEv>:

    void IncreasePecCounter() {
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
        ++pec_counter;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	609a      	str	r2, [r3, #8]

        //ErrorCheck(Status::PecError, pec_counter > ???); // TODO figure out what this should be
    }
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <_ZN6Status12GetPecChangeEv>:

    auto GetPecChange() {
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
        auto pec_change = pec_counter - pec_counter_last;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	60fb      	str	r3, [r7, #12]
        pec_counter_last = pec_counter;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return pec_change;
 8009c62:	68fb      	ldr	r3, [r7, #12]
    }
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <_ZN6Status15SetFanDutyCycleEh>:

    void SetFanDutyCycle(uint8_t duty_cycle = kFanLowDutyCycle) {
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
        if (duty_cycle > kFanDCMax)
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	2b64      	cmp	r3, #100	; 0x64
 8009c80:	d901      	bls.n	8009c86 <_ZN6Status15SetFanDutyCycleEh+0x16>
            duty_cycle = kFanDCMax;
 8009c82:	2364      	movs	r3, #100	; 0x64
 8009c84:	70fb      	strb	r3, [r7, #3]
        else if (duty_cycle < kFanDCMin)
            duty_cycle = kFanDCMin;

        if (!manual_mode);
        // TODO pwm_channel_update_duty(PWM, &g_pwm_channel_fan, dc);
    }
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <_ZN6Status13CalcDutyCycleEv>:

    constexpr uint8_t CalcDutyCycle() { // TODO could be private if the fan stuff was reworked a bit
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
        if (max_temp > kT2DCHighTemp)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ca2:	f241 7270 	movw	r2, #6000	; 0x1770
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	dd01      	ble.n	8009cae <_ZN6Status13CalcDutyCycleEv+0x1a>
            return kFanDCMax;
 8009caa:	2364      	movs	r3, #100	; 0x64
 8009cac:	e01c      	b.n	8009ce8 <_ZN6Status13CalcDutyCycleEv+0x54>
        else if (max_temp < kT2DCLowTemp)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cb4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009cb8:	da01      	bge.n	8009cbe <_ZN6Status13CalcDutyCycleEv+0x2a>
            return kFanLowDutyCycle;
 8009cba:	230a      	movs	r3, #10
 8009cbc:	e014      	b.n	8009ce8 <_ZN6Status13CalcDutyCycleEv+0x54>
        else
            return (max_temp * kT2DC_M) + (kFanLowDutyCycle - kT2DC_M * kT2DCLowTemp);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cc4:	ee07 3a90 	vmov	s15, r3
 8009cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ccc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009cf4 <_ZN6Status13CalcDutyCycleEv+0x60>
 8009cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009cf8 <_ZN6Status13CalcDutyCycleEv+0x64>
 8009cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce0:	edc7 7a00 	vstr	s15, [r7]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	b2db      	uxtb	r3, r3
    };
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	3cb851ec 	.word	0x3cb851ec
 8009cf8:	420c0000 	.word	0x420c0000

08009cfc <_ZNK6Status10GetLimpingEv>:
        if (op_mode & Charging)
            ErrorCheck(Status::OvertempCharging, this->max_temp > kMaxChargeTemp);
#endif
    }

    auto GetLimping() const {
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
        return limp_counter > kLimpCountLimit;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	bf8c      	ite	hi
 8009d0c:	2301      	movhi	r3, #1
 8009d0e:	2300      	movls	r3, #0
 8009d10:	b2db      	uxtb	r3, r3
    }
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
	...

08009d20 <_ZN6Status10SetCurrentEl>:

    int8_t SetCurrent(int32_t raw_current) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
        current = static_cast<float>(raw_current) / 1000;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d34:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009d84 <_ZN6Status10SetCurrentEl+0x64>
 8009d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d40:	ee17 2a90 	vmov	r2, s15
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	645a      	str	r2, [r3, #68]	; 0x44
        received_update = true;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if TEST_OVERCURRENT
        ErrorCheck(Status::Overcurrent, current > kMaxCurrent);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d5c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009d88 <_ZN6Status10SetCurrentEl+0x68>
 8009d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d68:	bfcc      	ite	gt
 8009d6a:	2301      	movgt	r3, #1
 8009d6c:	2300      	movle	r3, #0
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	2105      	movs	r1, #5
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f905 	bl	8009f84 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif

        return 0;
 8009d7a:	2300      	movs	r3, #0
    }
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	447a0000 	.word	0x447a0000
 8009d88:	43340000 	.word	0x43340000

08009d8c <_ZN6Status14SetAccuVoltageEl>:

    void SetAccuVoltage(int32_t raw_voltage) {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
        AccuVoltage = static_cast<float>(raw_voltage) / 1000;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	ee07 3a90 	vmov	s15, r3
 8009d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009da0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8009dc4 <_ZN6Status14SetAccuVoltageEl+0x38>
 8009da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
        received_update = true;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	447a0000 	.word	0x447a0000

08009dc8 <_ZN6Status15SetAccuVoltage2El>:

    // TODO This used to be precharge compare, kinda
    int8_t SetAccuVoltage2(int32_t raw_voltage) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
        AccuVoltage2 = static_cast<float>(raw_voltage) / 1000;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ddc:	eddf 6a39 	vldr	s13, [pc, #228]	; 8009ec4 <_ZN6Status15SetAccuVoltage2El+0xfc>
 8009de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
        received_update = true;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if TEST_ACCU_UNDERVOLTAGE
        ErrorCheck(Status::AccuUndervoltage, AccuVoltage2 < kAccuMinVoltage);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009df8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8009ec8 <_ZN6Status15SetAccuVoltage2El+0x100>
 8009dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e04:	bf4c      	ite	mi
 8009e06:	2301      	movmi	r3, #1
 8009e08:	2300      	movpl	r3, #0
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	2109      	movs	r1, #9
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f8b7 	bl	8009f84 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif

        float precharge_percentage = AccuVoltage * 100 / AccuVoltage2;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009e1c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009ecc <_ZN6Status15SetAccuVoltage2El+0x104>
 8009e20:	ee67 6a87 	vmul.f32	s13, s15, s14
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8009e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (precharge_percentage >= 95 && CheckVoltageMatch() && AccuVoltage > kPrechargeMinStartVoltage && AccuVoltage2 > kPrechargeMinStartVoltage)
 8009e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e36:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009ed0 <_ZN6Status15SetAccuVoltage2El+0x108>
 8009e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e42:	db1b      	blt.n	8009e7c <_ZN6Status15SetAccuVoltage2El+0xb4>
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f85f 	bl	8009f08 <_ZN6Status17CheckVoltageMatchEv>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d015      	beq.n	8009e7c <_ZN6Status15SetAccuVoltage2El+0xb4>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009e56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009ed4 <_ZN6Status15SetAccuVoltage2El+0x10c>
 8009e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	dd0b      	ble.n	8009e7c <_ZN6Status15SetAccuVoltage2El+0xb4>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009e6a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009ed4 <_ZN6Status15SetAccuVoltage2El+0x10c>
 8009e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e76:	dd01      	ble.n	8009e7c <_ZN6Status15SetAccuVoltage2El+0xb4>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <_ZN6Status15SetAccuVoltage2El+0xb6>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <_ZN6Status15SetAccuVoltage2El+0xc2>
            ClosePRE();
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fe9a 	bl	8009bbc <_ZN6Status8ClosePREEv>
 8009e88:	e016      	b.n	8009eb8 <_ZN6Status15SetAccuVoltage2El+0xf0>
        else if (AccuVoltage < kPrechargeMaxEndVoltage || AccuVoltage2 < kPrechargeMaxEndVoltage) // TODO think there was a bug here in old system
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009e90:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009ed8 <_ZN6Status15SetAccuVoltage2El+0x110>
 8009e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9c:	d409      	bmi.n	8009eb2 <_ZN6Status15SetAccuVoltage2El+0xea>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009ea4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009ed8 <_ZN6Status15SetAccuVoltage2El+0x110>
 8009ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb0:	d502      	bpl.n	8009eb8 <_ZN6Status15SetAccuVoltage2El+0xf0>
            OpenPRE();
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff fe9c 	bl	8009bf0 <_ZN6Status7OpenPREEv>

        return 0;
 8009eb8:	2300      	movs	r3, #0
    }
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	447a0000 	.word	0x447a0000
 8009ec8:	43f50000 	.word	0x43f50000
 8009ecc:	42c80000 	.word	0x42c80000
 8009ed0:	42be0000 	.word	0x42be0000
 8009ed4:	43eb0000 	.word	0x43eb0000
 8009ed8:	43e10000 	.word	0x43e10000

08009edc <_ZN6Status12CheckIVTLostEv>:
#endif
    }

    /* Test accumulator data against limit values. (0: OK, -1 FAIL) */
    /* MAYBE WE DON'T WANT 50% ERRORS TO BE ALLOWED */
    int8_t CheckIVTLost() {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
#if IVT_TIMEOUT
        ErrorCheck(Status::IVTLost, received_update);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009eea:	461a      	mov	r2, r3
 8009eec:	210a      	movs	r1, #10
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f848 	bl	8009f84 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>
#endif
        received_update = false;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        return 0;
 8009efc:	2300      	movs	r3, #0
    }
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <_ZN6Status17CheckVoltageMatchEv>:
    uint32_t pec_counter_last { 0 };
    bool received_update = false;
    float pec_average { 0 };
    bool tested { false };

    bool CheckVoltageMatch() {
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
        float percentage = AccuVoltage * 100 / (sum_of_cells / 10000) - 100;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009f16:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009f7c <_ZN6Status17CheckVoltageMatchEv+0x74>
 8009f1a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009f22:	4a17      	ldr	r2, [pc, #92]	; (8009f80 <_ZN6Status17CheckVoltageMatchEv+0x78>)
 8009f24:	fba2 2303 	umull	r2, r3, r2, r3
 8009f28:	0b5b      	lsrs	r3, r3, #13
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f38:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009f7c <_ZN6Status17CheckVoltageMatchEv+0x74>
 8009f3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f40:	edc7 7a03 	vstr	s15, [r7, #12]
        return percentage < 10 && percentage > -10;
 8009f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f54:	d50a      	bpl.n	8009f6c <_ZN6Status17CheckVoltageMatchEv+0x64>
 8009f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f5a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8009f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f66:	dd01      	ble.n	8009f6c <_ZN6Status17CheckVoltageMatchEv+0x64>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e000      	b.n	8009f6e <_ZN6Status17CheckVoltageMatchEv+0x66>
 8009f6c:	2300      	movs	r3, #0
    }
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	42c80000 	.word	0x42c80000
 8009f80:	d1b71759 	.word	0xd1b71759

08009f84 <_ZN6Status10ErrorCheckENS_10ErrorEventEb>:

    uint8_t ErrorCheck(ErrorEvent e, bool error) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
 8009f90:	4613      	mov	r3, r2
 8009f92:	70bb      	strb	r3, [r7, #2]
        if (error) {
 8009f94:	78bb      	ldrb	r3, [r7, #2]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d028      	beq.n	8009fec <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x68>
            if (++error_counters[e] > kErrorLimit || !tested) {
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	f103 0216 	add.w	r2, r3, #22
 8009fa2:	0092      	lsls	r2, r2, #2
 8009fa4:	440a      	add	r2, r1
 8009fa6:	6852      	ldr	r2, [r2, #4]
 8009fa8:	1c51      	adds	r1, r2, #1
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f103 0216 	add.w	r2, r3, #22
 8009fb0:	0092      	lsls	r2, r2, #2
 8009fb2:	4402      	add	r2, r0
 8009fb4:	6051      	str	r1, [r2, #4]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	3316      	adds	r3, #22
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d807      	bhi.n	8009fd4 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x50>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009fca:	f083 0301 	eor.w	r3, r3, #1
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x54>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e000      	b.n	8009fda <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x56>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d01c      	beq.n	800a018 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x94>
                GoToSafeState(e);
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f81d 	bl	800a022 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>
                return 1;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e016      	b.n	800a01a <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x96>
            }
        } else if (error_counters[e] > 0)
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	3316      	adds	r3, #22
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00d      	beq.n	800a018 <_ZN6Status10ErrorCheckENS_10ErrorEventEb+0x94>
            --error_counters[e];
 8009ffc:	78fa      	ldrb	r2, [r7, #3]
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	f102 0316 	add.w	r3, r2, #22
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	1e59      	subs	r1, r3, #1
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f102 0316 	add.w	r3, r2, #22
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4403      	add	r3, r0
 800a016:	6059      	str	r1, [r3, #4]

        return 0;
 800a018:	2300      	movs	r3, #0
    }
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>:

    /* Sets BMS into safe state. */
    void GoToSafeState(ErrorEvent e) {
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	70fb      	strb	r3, [r7, #3]
#if BMS_RELAY_CTRL_BYPASS
        // Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
        if (e != PecError) {
 800a02e:	78fb      	ldrb	r3, [r7, #3]
 800a030:	2b08      	cmp	r3, #8
 800a032:	d005      	beq.n	800a040 <_ZN6Status13GoToSafeStateENS_10ErrorEventE+0x1e>
            OpenAIR();
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff fdab 	bl	8009b90 <_ZNK6Status7OpenAIREv>
            OpenPRE();
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fdd8 	bl	8009bf0 <_ZN6Status7OpenPREEv>
        OpenAIR();
        OpenPRE();
#endif

#if STOP_CORE_ON_SAFE_STATE
        op_mode &= ~Core;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	f023 0301 	bic.w	r3, r3, #1
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	701a      	strb	r2, [r3, #0]
#endif

#if START_DEBUG_ON_SAFE_STATE
        op_mode |= Debug;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	f043 0308 	orr.w	r3, r3, #8
 800a056:	b2da      	uxtb	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	701a      	strb	r2, [r3, #0]
#endif
        safe_state_executed = true;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	735a      	strb	r2, [r3, #13]
        last_error = e;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	78fa      	ldrb	r2, [r7, #3]
 800a066:	739a      	strb	r2, [r3, #14]
    }
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
 800a074:	f001 fdd0 	bl	800bc18 <abort>

0800a078 <_ZN7LTC681116SetDischargeModeEh>:
    void SetDischargeMode(uint8_t const discharge_mode) noexcept {
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
        this->discharge_mode = discharge_mode;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	78fa      	ldrb	r2, [r7, #3]
 800a088:	721a      	strb	r2, [r3, #8]
    };
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <_ZNKSt8optionalI20LTC6811VoltageStatusE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 f805 	bl	800a0b0 <_ZNKSt14_Optional_baseI20LTC6811VoltageStatusE13_M_is_engagedEv>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <_ZNKSt14_Optional_baseI20LTC6811VoltageStatusE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	7d1b      	ldrb	r3, [r3, #20]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <_ZNKSt8optionalI17LTC6811TempStatusE9has_valueEv>:
      constexpr bool has_value() const noexcept
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f805 	bl	800a0e2 <_ZNKSt14_Optional_baseI17LTC6811TempStatusE13_M_is_engagedEv>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <_ZNKSt14_Optional_baseI17LTC6811TempStatusE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	7c1b      	ldrb	r3, [r3, #16]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <_ZNKRSt8optionalI20LTC6811VoltageStatusE5valueEv>:

      constexpr const _Tp&
      value() const&
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
	  ?  this->_M_get()
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff ffd3 	bl	800a0b0 <_ZNKSt14_Optional_baseI20LTC6811VoltageStatusE13_M_is_engagedEv>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <_ZNKRSt8optionalI20LTC6811VoltageStatusE5valueEv+0x22>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4618      	mov	r0, r3
 800a114:	f001 f866 	bl	800b1e4 <_ZNKSt14_Optional_baseI20LTC6811VoltageStatusE6_M_getEv>
 800a118:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(),
	     this->_M_get());
 800a11a:	e001      	b.n	800a120 <_ZNKRSt8optionalI20LTC6811VoltageStatusE5valueEv+0x26>
	  : (__throw_bad_optional_access(),
 800a11c:	f7ff ffa8 	bl	800a070 <_ZSt27__throw_bad_optional_accessv>
      }
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800a128:	b5b0      	push	{r4, r5, r7, lr}
 800a12a:	b098      	sub	sp, #96	; 0x60
 800a12c:	af04      	add	r7, sp, #16


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800a12e:	f7f6 fbf7 	bl	8000920 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800a132:	f000 f965 	bl	800a400 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800a136:	f000 fb95 	bl	800a864 <_ZL12MX_GPIO_Initv>
    MX_CAN1_Init();
 800a13a:	f000 f9fd 	bl	800a538 <_ZL12MX_CAN1_Initv>
    MX_CAN2_Init();
 800a13e:	f000 fafb 	bl	800a738 <_ZL12MX_CAN2_Initv>
    MX_SDIO_SD_Init();
 800a142:	f000 fb33 	bl	800a7ac <_ZL15MX_SDIO_SD_Initv>
    MX_SPI1_Init();
 800a146:	f000 fb51 	bl	800a7ec <_ZL12MX_SPI1_Initv>
    MX_FATFS_Init();
 800a14a:	f7ff fc53 	bl	80099f4 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    nlg5 = new NLG5;
 800a14e:	2010      	movs	r0, #16
 800a150:	f001 fbdb 	bl	800b90a <_Znwj>
 800a154:	4603      	mov	r3, r0
 800a156:	461c      	mov	r4, r3
 800a158:	f640 33ae 	movw	r3, #2990	; 0xbae
 800a15c:	223c      	movs	r2, #60	; 0x3c
 800a15e:	21a0      	movs	r1, #160	; 0xa0
 800a160:	4620      	mov	r0, r4
 800a162:	f7ff fc77 	bl	8009a54 <_ZN4NLG5C1Ettt>
 800a166:	4b99      	ldr	r3, [pc, #612]	; (800a3cc <main+0x2a4>)
 800a168:	601c      	str	r4, [r3, #0]
    status = new Status(Status::Core | Status::Logging, *nlg5);
 800a16a:	209c      	movs	r0, #156	; 0x9c
 800a16c:	f001 fbcd 	bl	800b90a <_Znwj>
 800a170:	4603      	mov	r3, r0
 800a172:	461c      	mov	r4, r3
 800a174:	4b95      	ldr	r3, [pc, #596]	; (800a3cc <main+0x2a4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	2111      	movs	r1, #17
 800a17c:	4620      	mov	r0, r4
 800a17e:	f7ff fc86 	bl	8009a8e <_ZN6StatusC1EhR4NLG5>
 800a182:	4b93      	ldr	r3, [pc, #588]	; (800a3d0 <main+0x2a8>)
 800a184:	601c      	str	r4, [r3, #0]
    ltc6811 = new LTC6811(hspi1, *status); // TODO could be hcan2!
 800a186:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a18a:	f001 fbbe 	bl	800b90a <_Znwj>
 800a18e:	4603      	mov	r3, r0
 800a190:	461c      	mov	r4, r3
 800a192:	4b8f      	ldr	r3, [pc, #572]	; (800a3d0 <main+0x2a8>)
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	2300      	movs	r3, #0
 800a198:	9303      	str	r3, [sp, #12]
 800a19a:	2300      	movs	r3, #0
 800a19c:	9302      	str	r3, [sp, #8]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	498a      	ldr	r1, [pc, #552]	; (800a3d4 <main+0x2ac>)
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7fe f8da 	bl	8008364 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefR6Status4Mode3DCP6CellCh5AuxCh5STSCh>
 800a1b0:	4b89      	ldr	r3, [pc, #548]	; (800a3d8 <main+0x2b0>)
 800a1b2:	601c      	str	r4, [r3, #0]
    f_mount(&SDFatFS, "", 0);
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4989      	ldr	r1, [pc, #548]	; (800a3dc <main+0x2b4>)
 800a1b8:	4889      	ldr	r0, [pc, #548]	; (800a3e0 <main+0x2b8>)
 800a1ba:	f7fc ff83 	bl	80070c4 <f_mount>
    f_open(&SDFile, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 800a1be:	2232      	movs	r2, #50	; 0x32
 800a1c0:	4988      	ldr	r1, [pc, #544]	; (800a3e4 <main+0x2bc>)
 800a1c2:	4889      	ldr	r0, [pc, #548]	; (800a3e8 <main+0x2c0>)
 800a1c4:	f7fc ffc4 	bl	8007150 <f_open>
#endif
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	4888      	ldr	r0, [pc, #544]	; (800a3ec <main+0x2c4>)
 800a1cc:	f7f7 fd63 	bl	8001c96 <HAL_GPIO_TogglePin>

        /* Each bit of opmode represents a different mode. */
        if (status->op_mode & Status::Core) {
 800a1d0:	4b7f      	ldr	r3, [pc, #508]	; (800a3d0 <main+0x2a8>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d071      	beq.n	800a2c2 <main+0x19a>
            auto const voltage_status = ltc6811->GetVoltageStatus();
 800a1de:	4b7e      	ldr	r3, [pc, #504]	; (800a3d8 <main+0x2b0>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fb07 	bl	80087fc <_ZN7LTC681116GetVoltageStatusEv>
            if (!voltage_status.has_value()) {
 800a1ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff ff4f 	bl	800a096 <_ZNKSt8optionalI20LTC6811VoltageStatusE9has_valueEv>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f083 0301 	eor.w	r3, r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <main+0xe8>
                status->IncreasePecCounter();
 800a204:	4b72      	ldr	r3, [pc, #456]	; (800a3d0 <main+0x2a8>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fd0b 	bl	8009c24 <_ZN6Status18IncreasePecCounterEv>
 800a20e:	e009      	b.n	800a224 <main+0xfc>
            } else {
                // Test limits
                voltage_status.value().max;
 800a210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff ff70 	bl	800a0fa <_ZNKRSt8optionalI20LTC6811VoltageStatusE5valueEv>
                voltage_status.value().min;
 800a21a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff ff6b 	bl	800a0fa <_ZNKRSt8optionalI20LTC6811VoltageStatusE5valueEv>
            }

            auto const temp_status = ltc6811->GetTemperatureStatus();
 800a224:	4b6c      	ldr	r3, [pc, #432]	; (800a3d8 <main+0x2b0>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	f107 031c 	add.w	r3, r7, #28
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fbe8 	bl	8008a04 <_ZN7LTC681120GetTemperatureStatusEv>
            if (!temp_status.has_value())
 800a234:	f107 031c 	add.w	r3, r7, #28
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff ff45 	bl	800a0c8 <_ZNKSt8optionalI17LTC6811TempStatusE9has_valueEv>
 800a23e:	4603      	mov	r3, r0
 800a240:	f083 0301 	eor.w	r3, r3, #1
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <main+0x12e>
                status->IncreasePecCounter();
 800a24a:	4b61      	ldr	r3, [pc, #388]	; (800a3d0 <main+0x2a8>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fce8 	bl	8009c24 <_ZN6Status18IncreasePecCounterEv>
 800a254:	e009      	b.n	800a26a <main+0x142>
            else {
                // Test limits
                temp_status.value().max;
 800a256:	f107 031c 	add.w	r3, r7, #28
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 ffab 	bl	800b1b6 <_ZNKRSt8optionalI17LTC6811TempStatusE5valueEv>
                temp_status.value().min;
 800a260:	f107 031c 	add.w	r3, r7, #28
 800a264:	4618      	mov	r0, r3
 800a266:	f000 ffa6 	bl	800b1b6 <_ZNKRSt8optionalI17LTC6811TempStatusE5valueEv>
            }

            status->SetFanDutyCycle(status->CalcDutyCycle());
 800a26a:	4b59      	ldr	r3, [pc, #356]	; (800a3d0 <main+0x2a8>)
 800a26c:	681c      	ldr	r4, [r3, #0]
 800a26e:	4b58      	ldr	r3, [pc, #352]	; (800a3d0 <main+0x2a8>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fd0e 	bl	8009c94 <_ZN6Status13CalcDutyCycleEv>
 800a278:	4603      	mov	r3, r0
 800a27a:	4619      	mov	r1, r3
 800a27c:	4620      	mov	r0, r4
 800a27e:	f7ff fcf7 	bl	8009c70 <_ZN6Status15SetFanDutyCycleEh>
            CANTxUptime();
 800a282:	f000 fd5f 	bl	800ad44 <CANTxUptime>
            CanTxOpMode();
 800a286:	f000 fdb7 	bl	800adf8 <CanTxOpMode>
            CanTxError();
 800a28a:	f000 fe05 	bl	800ae98 <CanTxError>
            CANTxVoltageLimpTotal();
 800a28e:	f000 fcf3 	bl	800ac78 <CANTxVoltageLimpTotal>
            status->CheckIVTLost();
 800a292:	4b4f      	ldr	r3, [pc, #316]	; (800a3d0 <main+0x2a8>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff fe20 	bl	8009edc <_ZN6Status12CheckIVTLostEv>

            if (status->op_mode & Status::Balance)
 800a29c:	4b4c      	ldr	r3, [pc, #304]	; (800a3d0 <main+0x2a8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00b      	beq.n	800a2c2 <main+0x19a>
                ltc6811->BuildDischargeConfig(voltage_status.value());
 800a2aa:	4b4b      	ldr	r3, [pc, #300]	; (800a3d8 <main+0x2b0>)
 800a2ac:	681c      	ldr	r4, [r3, #0]
 800a2ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ff21 	bl	800a0fa <_ZNKRSt8optionalI20LTC6811VoltageStatusE5valueEv>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7fe fc3f 	bl	8008b40 <_ZN7LTC681120BuildDischargeConfigERK20LTC6811VoltageStatus>



#if CAN_ENABLED
        /*  Charging routine. CAN buffers for charger messages are checked, and charger command message is sent. */
        if (status->op_mode & Status::Charging)
 800a2c2:	4b43      	ldr	r3, [pc, #268]	; (800a3d0 <main+0x2a8>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <main+0x1ac>
            SetCharger();
 800a2d0:	f000 fc78 	bl	800abc4 <SetCharger>
#endif
#if CAN_DEBUG
        /*  Functions for debugging and untested code. */
        if (status->op_mode & Status::Debug) {
 800a2d4:	4b3e      	ldr	r3, [pc, #248]	; (800a3d0 <main+0x2a8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <main+0x1ce>
            CANTxVoltage();
 800a2e2:	f000 fcb5 	bl	800ac50 <CANTxVoltage>
            CANTxTemperature();
 800a2e6:	f000 fd19 	bl	800ad1c <CANTxTemperature>
            CANTxDCfg();
 800a2ea:	f000 fe2b 	bl	800af44 <CANTxDCfg>
            CANTxUptime();
 800a2ee:	f000 fd29 	bl	800ad44 <CANTxUptime>
            CanTxOpMode();
 800a2f2:	f000 fd81 	bl	800adf8 <CanTxOpMode>
        }
#endif
        if (status->op_mode & Status::Logging) {
 800a2f6:	4b36      	ldr	r3, [pc, #216]	; (800a3d0 <main+0x2a8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	f003 0310 	and.w	r3, r3, #16
 800a300:	2b00      	cmp	r3, #0
 800a302:	f43f af61 	beq.w	800a1c8 <main+0xa0>
            FILINFO inf;
            if (BSP_SD_IsDetected()) {
 800a306:	f7ff fb63 	bl	80099d0 <BSP_SD_IsDetected>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	f43f af56 	beq.w	800a1c8 <main+0xa0>
                HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2); // led 2
 800a31c:	2104      	movs	r1, #4
 800a31e:	4833      	ldr	r0, [pc, #204]	; (800a3ec <main+0x2c4>)
 800a320:	f7f7 fcb9 	bl	8001c96 <HAL_GPIO_TogglePin>
                if (f_stat("/hpf20", &inf) == FR_NO_FILE)
 800a324:	1d3b      	adds	r3, r7, #4
 800a326:	4619      	mov	r1, r3
 800a328:	4831      	ldr	r0, [pc, #196]	; (800a3f0 <main+0x2c8>)
 800a32a:	f7fd faec 	bl	8007906 <f_stat>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b04      	cmp	r3, #4
 800a332:	bf0c      	ite	eq
 800a334:	2301      	moveq	r3, #1
 800a336:	2300      	movne	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <main+0x21c>
                    f_mkdir("/hpf20");
 800a33e:	482c      	ldr	r0, [pc, #176]	; (800a3f0 <main+0x2c8>)
 800a340:	f7fd fbc5 	bl	8007ace <f_mkdir>

                // TODO Magic number below that needs fixing
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, "/hpf20/data.csv", FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 800a344:	4b28      	ldr	r3, [pc, #160]	; (800a3e8 <main+0x2c0>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 800a34c:	d209      	bcs.n	800a362 <main+0x23a>
 800a34e:	2232      	movs	r2, #50	; 0x32
 800a350:	4928      	ldr	r1, [pc, #160]	; (800a3f4 <main+0x2cc>)
 800a352:	4825      	ldr	r0, [pc, #148]	; (800a3e8 <main+0x2c0>)
 800a354:	f7fc fefc 	bl	8007150 <f_open>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <main+0x23a>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <main+0x23c>
 800a362:	2300      	movs	r3, #0
 800a364:	2b00      	cmp	r3, #0
 800a366:	f43f af2f 	beq.w	800a1c8 <main+0xa0>
                    f_printf(&SDFile, "%u,", status->uptime);
 800a36a:	4b19      	ldr	r3, [pc, #100]	; (800a3d0 <main+0x2a8>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	461a      	mov	r2, r3
 800a372:	4921      	ldr	r1, [pc, #132]	; (800a3f8 <main+0x2d0>)
 800a374:	481c      	ldr	r0, [pc, #112]	; (800a3e8 <main+0x2c0>)
 800a376:	f7fd fd29 	bl	8007dcc <f_printf>
                    /* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800a37a:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <main+0x2a8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a380:	4b13      	ldr	r3, [pc, #76]	; (800a3d0 <main+0x2a8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6a1d      	ldr	r5, [r3, #32]
 800a386:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <main+0x2a8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	4a10      	ldr	r2, [pc, #64]	; (800a3d0 <main+0x2a8>)
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	6992      	ldr	r2, [r2, #24]
 800a392:	490f      	ldr	r1, [pc, #60]	; (800a3d0 <main+0x2a8>)
 800a394:	6809      	ldr	r1, [r1, #0]
 800a396:	6949      	ldr	r1, [r1, #20]
 800a398:	480d      	ldr	r0, [pc, #52]	; (800a3d0 <main+0x2a8>)
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	6900      	ldr	r0, [r0, #16]
 800a39e:	9003      	str	r0, [sp, #12]
 800a3a0:	9102      	str	r1, [sp, #8]
 800a3a2:	9201      	str	r2, [sp, #4]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	4914      	ldr	r1, [pc, #80]	; (800a3fc <main+0x2d4>)
 800a3ac:	480e      	ldr	r0, [pc, #56]	; (800a3e8 <main+0x2c0>)
 800a3ae:	f7fd fd0d 	bl	8007dcc <f_printf>
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);

                    UINT number_written = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    uint8_t write_error{ 0 };
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

                        if (number_written != kBytesPerRegister * kDaisyChainLength)
                            write_error = 1;
                    }
#endif
                    f_sync(&SDFile);
 800a3bc:	480a      	ldr	r0, [pc, #40]	; (800a3e8 <main+0x2c0>)
 800a3be:	f7fd f9fa 	bl	80077b6 <f_sync>
                    f_close(&SDFile);
 800a3c2:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <main+0x2c0>)
 800a3c4:	f7fd fa75 	bl	80078b2 <f_close>
                }
            }

        }
    }
 800a3c8:	e6fe      	b.n	800a1c8 <main+0xa0>
 800a3ca:	bf00      	nop
 800a3cc:	20000208 	.word	0x20000208
 800a3d0:	2000020c 	.word	0x2000020c
 800a3d4:	20000198 	.word	0x20000198
 800a3d8:	20000210 	.word	0x20000210
 800a3dc:	0800be90 	.word	0x0800be90
 800a3e0:	20000468 	.word	0x20000468
 800a3e4:	0800be94 	.word	0x0800be94
 800a3e8:	20000238 	.word	0x20000238
 800a3ec:	40020800 	.word	0x40020800
 800a3f0:	0800bea0 	.word	0x0800bea0
 800a3f4:	0800bea8 	.word	0x0800bea8
 800a3f8:	0800beb8 	.word	0x0800beb8
 800a3fc:	0800bebc 	.word	0x0800bebc

0800a400 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b0ac      	sub	sp, #176	; 0xb0
 800a404:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a406:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a40a:	2234      	movs	r2, #52	; 0x34
 800a40c:	2100      	movs	r1, #0
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fc3c 	bl	800bc8c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a414:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	605a      	str	r2, [r3, #4]
 800a41e:	609a      	str	r2, [r3, #8]
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	225c      	movs	r2, #92	; 0x5c
 800a42a:	2100      	movs	r1, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f001 fc2d 	bl	800bc8c <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800a432:	2300      	movs	r3, #0
 800a434:	60bb      	str	r3, [r7, #8]
 800a436:	4b3e      	ldr	r3, [pc, #248]	; (800a530 <_Z18SystemClock_Configv+0x130>)
 800a438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43a:	4a3d      	ldr	r2, [pc, #244]	; (800a530 <_Z18SystemClock_Configv+0x130>)
 800a43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a440:	6413      	str	r3, [r2, #64]	; 0x40
 800a442:	4b3b      	ldr	r3, [pc, #236]	; (800a530 <_Z18SystemClock_Configv+0x130>)
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44a:	60bb      	str	r3, [r7, #8]
 800a44c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a44e:	2300      	movs	r3, #0
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	4b38      	ldr	r3, [pc, #224]	; (800a534 <_Z18SystemClock_Configv+0x134>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a45a:	4a36      	ldr	r2, [pc, #216]	; (800a534 <_Z18SystemClock_Configv+0x134>)
 800a45c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	4b34      	ldr	r3, [pc, #208]	; (800a534 <_Z18SystemClock_Configv+0x134>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a46e:	2302      	movs	r3, #2
 800a470:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a472:	2301      	movs	r3, #1
 800a474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a478:	2310      	movs	r3, #16
 800a47a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a47e:	2302      	movs	r3, #2
 800a480:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a484:	2300      	movs	r3, #0
 800a486:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 8;
 800a48a:	2308      	movs	r3, #8
 800a48c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 50;
 800a490:	2332      	movs	r3, #50	; 0x32
 800a492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a496:	2302      	movs	r3, #2
 800a498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800a49c:	2303      	movs	r3, #3
 800a49e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = 2;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a4a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7f8 f96f 	bl	8002790 <HAL_RCC_OscConfig>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bf14      	ite	ne
 800a4b8:	2301      	movne	r3, #1
 800a4ba:	2300      	moveq	r3, #0
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <_Z18SystemClock_Configv+0xc6>
    {
        Error_Handler();
 800a4c2:	f000 fe71 	bl	800b1a8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a4c6:	230f      	movs	r3, #15
 800a4c8:	66bb      	str	r3, [r7, #104]	; 0x68
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	67bb      	str	r3, [r7, #120]	; 0x78

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a4da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f7 fbf3 	bl	8001ccc <HAL_RCC_ClockConfig>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bf14      	ite	ne
 800a4ec:	2301      	movne	r3, #1
 800a4ee:	2300      	moveq	r3, #0
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <_Z18SystemClock_Configv+0xfa>
    {
        Error_Handler();
 800a4f6:	f000 fe57 	bl	800b1a8 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800a4fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a500:	2300      	movs	r3, #0
 800a502:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800a504:	2300      	movs	r3, #0
 800a506:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f7 fcc3 	bl	8001e98 <HAL_RCCEx_PeriphCLKConfig>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	bf14      	ite	ne
 800a518:	2301      	movne	r3, #1
 800a51a:	2300      	moveq	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <_Z18SystemClock_Configv+0x126>
    {
        Error_Handler();
 800a522:	f000 fe41 	bl	800b1a8 <Error_Handler>
    }
}
 800a526:	bf00      	nop
 800a528:	37b0      	adds	r7, #176	; 0xb0
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40023800 	.word	0x40023800
 800a534:	40007000 	.word	0x40007000

0800a538 <_ZL12MX_CAN1_Initv>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	; 0x28
 800a53c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN CAN1_Init 1 */
    CAN_FilterTypeDef  sFilterConfig;

    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 800a53e:	4b7c      	ldr	r3, [pc, #496]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a540:	4a7c      	ldr	r2, [pc, #496]	; (800a734 <_ZL12MX_CAN1_Initv+0x1fc>)
 800a542:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 16;
 800a544:	4b7a      	ldr	r3, [pc, #488]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a546:	2210      	movs	r2, #16
 800a548:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a54a:	4b79      	ldr	r3, [pc, #484]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a550:	4b77      	ldr	r3, [pc, #476]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a552:	2200      	movs	r2, #0
 800a554:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800a556:	4b76      	ldr	r3, [pc, #472]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a558:	2200      	movs	r2, #0
 800a55a:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800a55c:	4b74      	ldr	r3, [pc, #464]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a55e:	2200      	movs	r2, #0
 800a560:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 800a562:	4b73      	ldr	r3, [pc, #460]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a564:	2200      	movs	r2, #0
 800a566:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 800a568:	4b71      	ldr	r3, [pc, #452]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 800a56e:	4b70      	ldr	r3, [pc, #448]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a570:	2200      	movs	r2, #0
 800a572:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 800a574:	4b6e      	ldr	r3, [pc, #440]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a576:	2200      	movs	r2, #0
 800a578:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a57a:	4b6d      	ldr	r3, [pc, #436]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 800a580:	4b6b      	ldr	r3, [pc, #428]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a582:	2200      	movs	r2, #0
 800a584:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a586:	486a      	ldr	r0, [pc, #424]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a588:	f7f6 fa5e 	bl	8000a48 <HAL_CAN_Init>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <_ZL12MX_CAN1_Initv+0x68>
    {
        Error_Handler();
 800a59c:	f000 fe04 	bl	800b1a8 <Error_Handler>
    /* USER CODE BEGIN CAN1_Init 2 */

    // Need to find what filter INDEX might be.
    /* Copying from ECU code for now. */
    /* BMS filter */
    sFilterConfig.FilterBank = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x20 << 5; // first ID
 800a5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0; // don't think anything goes here
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x21 << 5; //second ID
 800a5b6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800a5ba:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 800a5c8:	230e      	movs	r3, #14
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800a5cc:	463b      	mov	r3, r7
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4857      	ldr	r0, [pc, #348]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a5d2:	f7f6 fb35 	bl	8000c40 <HAL_CAN_ConfigFilter>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bf14      	ite	ne
 800a5dc:	2301      	movne	r3, #1
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <_ZL12MX_CAN1_Initv+0xb2>
        Error_Handler();
 800a5e6:	f000 fddf 	bl	800b1a8 <Error_Handler>

    //sFilterConfig.FilterIdHigh = 0x8 << 5; // first ID
    //sFilterConfig.FilterIdLow = 0x0;

    sFilterConfig.FilterBank++; // ECU CAN 1
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = 0x20 << 5;
 800a5f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f4:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x21;
 800a5f6:	2321      	movs	r3, #33	; 0x21
 800a5f8:	607b      	str	r3, [r7, #4]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	484c      	ldr	r0, [pc, #304]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a600:	f7f6 fb1e 	bl	8000c40 <HAL_CAN_ConfigFilter>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	bf14      	ite	ne
 800a60a:	2301      	movne	r3, #1
 800a60c:	2300      	moveq	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <_ZL12MX_CAN1_Initv+0xe0>
        Error_Handler();
 800a614:	f000 fdc8 	bl	800b1a8 <Error_Handler>

    sFilterConfig.FilterBank++; // PDM CAN 1
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	3301      	adds	r3, #1
 800a61c:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = 0x520 << 5;
 800a61e:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 800a622:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0;
 800a624:	2300      	movs	r3, #0
 800a626:	607b      	str	r3, [r7, #4]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800a628:	463b      	mov	r3, r7
 800a62a:	4619      	mov	r1, r3
 800a62c:	4840      	ldr	r0, [pc, #256]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a62e:	f7f6 fb07 	bl	8000c40 <HAL_CAN_ConfigFilter>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	bf14      	ite	ne
 800a638:	2301      	movne	r3, #1
 800a63a:	2300      	moveq	r3, #0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <_ZL12MX_CAN1_Initv+0x10e>
        Error_Handler();
 800a642:	f000 fdb1 	bl	800b1a8 <Error_Handler>

    sFilterConfig.FilterBank++; // ADC ID Range
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	3301      	adds	r3, #1
 800a64a:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = 0x600 << 5;
 800a64c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a650:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x605;
 800a652:	f240 6305 	movw	r3, #1541	; 0x605
 800a656:	607b      	str	r3, [r7, #4]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800a658:	463b      	mov	r3, r7
 800a65a:	4619      	mov	r1, r3
 800a65c:	4834      	ldr	r0, [pc, #208]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a65e:	f7f6 faef 	bl	8000c40 <HAL_CAN_ConfigFilter>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	bf14      	ite	ne
 800a668:	2301      	movne	r3, #1
 800a66a:	2300      	moveq	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <_ZL12MX_CAN1_Initv+0x13e>
        Error_Handler();
 800a672:	f000 fd99 	bl	800b1a8 <Error_Handler>

    sFilterConfig.FilterBank++;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	3301      	adds	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = 0x610 << 5;
 800a67c:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 800a680:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x614;
 800a682:	f240 6314 	movw	r3, #1556	; 0x614
 800a686:	607b      	str	r3, [r7, #4]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800a688:	463b      	mov	r3, r7
 800a68a:	4619      	mov	r1, r3
 800a68c:	4828      	ldr	r0, [pc, #160]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a68e:	f7f6 fad7 	bl	8000c40 <HAL_CAN_ConfigFilter>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	bf14      	ite	ne
 800a698:	2301      	movne	r3, #1
 800a69a:	2300      	moveq	r3, #0
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <_ZL12MX_CAN1_Initv+0x16e>
        Error_Handler();
 800a6a2:	f000 fd81 	bl	800b1a8 <Error_Handler>

    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterBank++; // Front Wheelspeed Filter
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = 0x70;
 800a6b0:	2370      	movs	r3, #112	; 0x70
 800a6b2:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x7F;
 800a6b4:	237f      	movs	r3, #127	; 0x7f
 800a6b6:	607b      	str	r3, [r7, #4]

    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800a6b8:	463b      	mov	r3, r7
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	481c      	ldr	r0, [pc, #112]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a6be:	f7f6 fabf 	bl	8000c40 <HAL_CAN_ConfigFilter>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bf14      	ite	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	2300      	moveq	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <_ZL12MX_CAN1_Initv+0x19e>
        Error_Handler();
 800a6d2:	f000 fd69 	bl	800b1a8 <Error_Handler>

#ifndef ONECAN
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800a6d6:	4816      	ldr	r0, [pc, #88]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a6d8:	f7f6 fb92 	bl	8000e00 <HAL_CAN_Start>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bf14      	ite	ne
 800a6e2:	2301      	movne	r3, #1
 800a6e4:	2300      	moveq	r3, #0
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <_ZL12MX_CAN1_Initv+0x1b8>
        Error_Handler();
 800a6ec:	f000 fd5c 	bl	800b1a8 <Error_Handler>

    // Start CANRX interrupt for CAN1
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800a6f0:	2102      	movs	r1, #2
 800a6f2:	480f      	ldr	r0, [pc, #60]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a6f4:	f7f6 fdb5 	bl	8001262 <HAL_CAN_ActivateNotification>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	bf14      	ite	ne
 800a6fe:	2301      	movne	r3, #1
 800a700:	2300      	moveq	r3, #0
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <_ZL12MX_CAN1_Initv+0x1d4>
        Error_Handler();
 800a708:	f000 fd4e 	bl	800b1a8 <Error_Handler>
#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800a70c:	4808      	ldr	r0, [pc, #32]	; (800a730 <_ZL12MX_CAN1_Initv+0x1f8>)
 800a70e:	f7f6 fb77 	bl	8000e00 <HAL_CAN_Start>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	bf14      	ite	ne
 800a718:	2301      	movne	r3, #1
 800a71a:	2300      	moveq	r3, #0
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <_ZL12MX_CAN1_Initv+0x1ee>
        Error_Handler();
 800a722:	f000 fd41 	bl	800b1a8 <Error_Handler>
    //TxHeader.MessageMarker = 0;


    /* USER CODE END CAN1_Init 2 */

}
 800a726:	bf00      	nop
 800a728:	3728      	adds	r7, #40	; 0x28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	200000c4 	.word	0x200000c4
 800a734:	40006400 	.word	0x40006400

0800a738 <_ZL12MX_CAN2_Initv>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
    /* USER CODE END CAN2_Init 0 */

    /* USER CODE BEGIN CAN2_Init 1 */

    /* USER CODE END CAN2_Init 1 */
    hcan2.Instance = CAN2;
 800a73c:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a73e:	4a1a      	ldr	r2, [pc, #104]	; (800a7a8 <_ZL12MX_CAN2_Initv+0x70>)
 800a740:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 16;
 800a742:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a744:	2210      	movs	r2, #16
 800a746:	605a      	str	r2, [r3, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;
 800a748:	4b16      	ldr	r3, [pc, #88]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	609a      	str	r2, [r3, #8]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a74e:	4b15      	ldr	r3, [pc, #84]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a750:	2200      	movs	r2, #0
 800a752:	60da      	str	r2, [r3, #12]
    hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800a754:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a756:	2200      	movs	r2, #0
 800a758:	611a      	str	r2, [r3, #16]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800a75a:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	615a      	str	r2, [r3, #20]
    hcan2.Init.TimeTriggeredMode = DISABLE;
 800a760:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a762:	2200      	movs	r2, #0
 800a764:	761a      	strb	r2, [r3, #24]
    hcan2.Init.AutoBusOff = DISABLE;
 800a766:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a768:	2200      	movs	r2, #0
 800a76a:	765a      	strb	r2, [r3, #25]
    hcan2.Init.AutoWakeUp = DISABLE;
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a76e:	2200      	movs	r2, #0
 800a770:	769a      	strb	r2, [r3, #26]
    hcan2.Init.AutoRetransmission = DISABLE;
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a774:	2200      	movs	r2, #0
 800a776:	76da      	strb	r2, [r3, #27]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	771a      	strb	r2, [r3, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a780:	2200      	movs	r2, #0
 800a782:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800a784:	4807      	ldr	r0, [pc, #28]	; (800a7a4 <_ZL12MX_CAN2_Initv+0x6c>)
 800a786:	f7f6 f95f 	bl	8000a48 <HAL_CAN_Init>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bf14      	ite	ne
 800a790:	2301      	movne	r3, #1
 800a792:	2300      	moveq	r3, #0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <_ZL12MX_CAN2_Initv+0x66>
    {
        Error_Handler();
 800a79a:	f000 fd05 	bl	800b1a8 <Error_Handler>
    }
    /* USER CODE BEGIN CAN2_Init 2 */

    /* USER CODE END CAN2_Init 2 */

}
 800a79e:	bf00      	nop
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200000ec 	.word	0x200000ec
 800a7a8:	40006800 	.word	0x40006800

0800a7ac <_ZL15MX_SDIO_SD_Initv>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7b2:	4a0d      	ldr	r2, [pc, #52]	; (800a7e8 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 800a7b4:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a7bc:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a7c2:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a7c8:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7ce:	4b05      	ldr	r3, [pc, #20]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 800a7d4:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 800a7da:	bf00      	nop
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20000114 	.word	0x20000114
 800a7e8:	40012c00 	.word	0x40012c00

0800a7ec <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 800a7f0:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a7f2:	4a1b      	ldr	r2, [pc, #108]	; (800a860 <_ZL12MX_SPI1_Initv+0x74>)
 800a7f4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800a7f6:	4b19      	ldr	r3, [pc, #100]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a7f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a7fc:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a800:	2200      	movs	r2, #0
 800a802:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // correct
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a806:	2200      	movs	r2, #0
 800a808:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // correct
 800a80a:	4b14      	ldr	r3, [pc, #80]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 800a810:	4b12      	ldr	r3, [pc, #72]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a812:	2201      	movs	r2, #1
 800a814:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a81c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a820:	2200      	movs	r2, #0
 800a822:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a824:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a826:	2200      	movs	r2, #0
 800a828:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a82a:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a832:	2200      	movs	r2, #0
 800a834:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a838:	220a      	movs	r2, #10
 800a83a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a83c:	4807      	ldr	r0, [pc, #28]	; (800a85c <_ZL12MX_SPI1_Initv+0x70>)
 800a83e:	f7f9 fb79 	bl	8003f34 <HAL_SPI_Init>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	bf14      	ite	ne
 800a848:	2301      	movne	r3, #1
 800a84a:	2300      	moveq	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <_ZL12MX_SPI1_Initv+0x6a>
    {
        Error_Handler();
 800a852:	f000 fca9 	bl	800b1a8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000198 	.word	0x20000198
 800a860:	40013000 	.word	0x40013000

0800a864 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	; 0x28
 800a868:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a86a:	f107 0314 	add.w	r3, r7, #20
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	605a      	str	r2, [r3, #4]
 800a874:	609a      	str	r2, [r3, #8]
 800a876:	60da      	str	r2, [r3, #12]
 800a878:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a87a:	2300      	movs	r3, #0
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	4b55      	ldr	r3, [pc, #340]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a882:	4a54      	ldr	r2, [pc, #336]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a884:	f043 0304 	orr.w	r3, r3, #4
 800a888:	6313      	str	r3, [r2, #48]	; 0x30
 800a88a:	4b52      	ldr	r3, [pc, #328]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	613b      	str	r3, [r7, #16]
 800a894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	4b4e      	ldr	r3, [pc, #312]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89e:	4a4d      	ldr	r2, [pc, #308]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a8a6:	4b4b      	ldr	r3, [pc, #300]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60bb      	str	r3, [r7, #8]
 800a8b6:	4b47      	ldr	r3, [pc, #284]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ba:	4a46      	ldr	r2, [pc, #280]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8bc:	f043 0301 	orr.w	r3, r3, #1
 800a8c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8c2:	4b44      	ldr	r3, [pc, #272]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	60bb      	str	r3, [r7, #8]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	607b      	str	r3, [r7, #4]
 800a8d2:	4b40      	ldr	r3, [pc, #256]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d6:	4a3f      	ldr	r2, [pc, #252]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8d8:	f043 0302 	orr.w	r3, r3, #2
 800a8dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a8de:	4b3d      	ldr	r3, [pc, #244]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e2:	f003 0302 	and.w	r3, r3, #2
 800a8e6:	607b      	str	r3, [r7, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4b39      	ldr	r3, [pc, #228]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	4a38      	ldr	r2, [pc, #224]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8f4:	f043 0308 	orr.w	r3, r3, #8
 800a8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fa:	4b36      	ldr	r3, [pc, #216]	; (800a9d4 <_ZL12MX_GPIO_Initv+0x170>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800a906:	2200      	movs	r2, #0
 800a908:	213f      	movs	r1, #63	; 0x3f
 800a90a:	4833      	ldr	r0, [pc, #204]	; (800a9d8 <_ZL12MX_GPIO_Initv+0x174>)
 800a90c:	f7f7 f9aa 	bl	8001c64 <HAL_GPIO_WritePin>
            |IO_1_Pin|IO_2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 800a910:	2200      	movs	r2, #0
 800a912:	2180      	movs	r1, #128	; 0x80
 800a914:	4831      	ldr	r0, [pc, #196]	; (800a9dc <_ZL12MX_GPIO_Initv+0x178>)
 800a916:	f7f7 f9a5 	bl	8001c64 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 800a91a:	2200      	movs	r2, #0
 800a91c:	2103      	movs	r1, #3
 800a91e:	4830      	ldr	r0, [pc, #192]	; (800a9e0 <_ZL12MX_GPIO_Initv+0x17c>)
 800a920:	f7f7 f9a0 	bl	8001c64 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800a924:	233f      	movs	r3, #63	; 0x3f
 800a926:	617b      	str	r3, [r7, #20]
            |IO_1_Pin|IO_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a928:	2301      	movs	r3, #1
 800a92a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a92c:	2300      	movs	r3, #0
 800a92e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a930:	2300      	movs	r3, #0
 800a932:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a934:	f107 0314 	add.w	r3, r7, #20
 800a938:	4619      	mov	r1, r3
 800a93a:	4827      	ldr	r0, [pc, #156]	; (800a9d8 <_ZL12MX_GPIO_Initv+0x174>)
 800a93c:	f7f6 ffe8 	bl	8001910 <HAL_GPIO_Init>

    /*Configure GPIO pin : IO_0_Pin */
    GPIO_InitStruct.Pin = IO_0_Pin;
 800a940:	2380      	movs	r3, #128	; 0x80
 800a942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a944:	2301      	movs	r3, #1
 800a946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a94c:	2300      	movs	r3, #0
 800a94e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	4619      	mov	r1, r3
 800a956:	4821      	ldr	r0, [pc, #132]	; (800a9dc <_ZL12MX_GPIO_Initv+0x178>)
 800a958:	f7f6 ffda 	bl	8001910 <HAL_GPIO_Init>

    /*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin */
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 800a95c:	2303      	movs	r3, #3
 800a95e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a960:	2301      	movs	r3, #1
 800a962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a968:	2300      	movs	r3, #0
 800a96a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a96c:	f107 0314 	add.w	r3, r7, #20
 800a970:	4619      	mov	r1, r3
 800a972:	481b      	ldr	r0, [pc, #108]	; (800a9e0 <_ZL12MX_GPIO_Initv+0x17c>)
 800a974:	f7f6 ffcc 	bl	8001910 <HAL_GPIO_Init>

    /*Configure GPIO pin : FansPWM_Pin */
    GPIO_InitStruct.Pin = FansPWM_Pin;
 800a978:	2304      	movs	r3, #4
 800a97a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97c:	2302      	movs	r3, #2
 800a97e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a980:	2300      	movs	r3, #0
 800a982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a984:	2300      	movs	r3, #0
 800a986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a988:	2301      	movs	r3, #1
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	4619      	mov	r1, r3
 800a992:	4813      	ldr	r0, [pc, #76]	; (800a9e0 <_ZL12MX_GPIO_Initv+0x17c>)
 800a994:	f7f6 ffbc 	bl	8001910 <HAL_GPIO_Init>

    /*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 800a998:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a99c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9a6:	f107 0314 	add.w	r3, r7, #20
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	480b      	ldr	r0, [pc, #44]	; (800a9dc <_ZL12MX_GPIO_Initv+0x178>)
 800a9ae:	f7f6 ffaf 	bl	8001910 <HAL_GPIO_Init>

    /*Configure GPIO pin : SOS_Pin */
    GPIO_InitStruct.Pin = SOS_Pin;
 800a9b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800a9c0:	f107 0314 	add.w	r3, r7, #20
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4806      	ldr	r0, [pc, #24]	; (800a9e0 <_ZL12MX_GPIO_Initv+0x17c>)
 800a9c8:	f7f6 ffa2 	bl	8001910 <HAL_GPIO_Init>

}
 800a9cc:	bf00      	nop
 800a9ce:	3728      	adds	r7, #40	; 0x28
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	40023800 	.word	0x40023800
 800a9d8:	40020800 	.word	0x40020800
 800a9dc:	40020000 	.word	0x40020000
 800a9e0:	40020400 	.word	0x40020400

0800a9e4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN1
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08c      	sub	sp, #48	; 0x30
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t data[8] = { 0 };
 800a9ec:	f107 030c 	add.w	r3, r7, #12
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	605a      	str	r2, [r3, #4]

    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a9f6:	f107 030c 	add.w	r3, r7, #12
 800a9fa:	f107 0214 	add.w	r2, r7, #20
 800a9fe:	2100      	movs	r1, #0
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7f6 fb1c 	bl	800103e <HAL_CAN_GetRxMessage>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2301      	moveq	r3, #1
 800aa0e:	2300      	movne	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
        //Placeholder switch statement
        switch(RxHeader.StdId) {
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d000      	beq.n	800aa1e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
        case 1:
            break;
        default:
            break;
 800aa1c:	e000      	b.n	800aa20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
            break;
 800aa1e:	bf00      	nop
        }
    }
}
 800aa20:	bf00      	nop
 800aa22:	3730      	adds	r7, #48	; 0x30
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN2
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08c      	sub	sp, #48	; 0x30
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t data[8] = { 0 };
 800aa30:	f107 030c 	add.w	r3, r7, #12
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	605a      	str	r2, [r3, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800aa3a:	f107 030c 	add.w	r3, r7, #12
 800aa3e:	f107 0214 	add.w	r2, r7, #20
 800aa42:	2100      	movs	r1, #0
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7f6 fafa 	bl	800103e <HAL_CAN_GetRxMessage>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 80aa 	beq.w	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
        //Placeholder switch statement
        switch(RxHeader.StdId) {
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800aa62:	d01c      	beq.n	800aa9e <HAL_CAN_RxFifo1MsgPendingCallback+0x76>
 800aa64:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800aa68:	d80d      	bhi.n	800aa86 <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
 800aa6a:	f240 5222 	movw	r2, #1314	; 0x522
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d06e      	beq.n	800ab50 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800aa72:	f240 5223 	movw	r2, #1315	; 0x523
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d07a      	beq.n	800ab70 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>
 800aa7a:	f240 5221 	movw	r2, #1313	; 0x521
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	f000 8086 	beq.w	800ab90 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>
                status->SetCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
                break;
#endif

            default:
                break;
 800aa84:	e094      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
        switch(RxHeader.StdId) {
 800aa86:	f240 726e 	movw	r2, #1902	; 0x76e
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d040      	beq.n	800ab10 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>
 800aa8e:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d025      	beq.n	800aae2 <HAL_CAN_RxFifo1MsgPendingCallback+0xba>
 800aa96:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800aa9a:	d011      	beq.n	800aac0 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
                break;
 800aa9c:	e088      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
            nlg5->a_buffer[0] = data[0];
 800aa9e:	4b46      	ldr	r3, [pc, #280]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	7b3a      	ldrb	r2, [r7, #12]
 800aaa4:	721a      	strb	r2, [r3, #8]
            nlg5->a_buffer[1] = data[1];
 800aaa6:	4b44      	ldr	r3, [pc, #272]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	7b7a      	ldrb	r2, [r7, #13]
 800aaac:	725a      	strb	r2, [r3, #9]
            nlg5->a_buffer[2] = data[2];
 800aaae:	4b42      	ldr	r3, [pc, #264]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	7bba      	ldrb	r2, [r7, #14]
 800aab4:	729a      	strb	r2, [r3, #10]
            nlg5->a_buffer[3] = data[3];
 800aab6:	4b40      	ldr	r3, [pc, #256]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	7bfa      	ldrb	r2, [r7, #15]
 800aabc:	72da      	strb	r2, [r3, #11]
            break;
 800aabe:	e077      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
            nlg5->b_buffer[0] = data[0];
 800aac0:	4b3d      	ldr	r3, [pc, #244]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	7b3a      	ldrb	r2, [r7, #12]
 800aac6:	731a      	strb	r2, [r3, #12]
            nlg5->b_buffer[1] = data[1];
 800aac8:	4b3b      	ldr	r3, [pc, #236]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	7b7a      	ldrb	r2, [r7, #13]
 800aace:	735a      	strb	r2, [r3, #13]
            nlg5->b_buffer[2] = data[2];
 800aad0:	4b39      	ldr	r3, [pc, #228]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	7bba      	ldrb	r2, [r7, #14]
 800aad6:	739a      	strb	r2, [r3, #14]
            nlg5->b_buffer[3] = data[3];
 800aad8:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	7bfa      	ldrb	r2, [r7, #15]
 800aade:	73da      	strb	r2, [r3, #15]
            break;
 800aae0:	e066      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
            switch (data[3]) {
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d811      	bhi.n	800ab0c <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab0d 	.word	0x0800ab0d
 800aaf4:	0800ab01 	.word	0x0800ab01
 800aaf8:	0800ab07 	.word	0x0800ab07
 800aafc:	0800ab0d 	.word	0x0800ab0d
                canresp_get_volume_size();
 800ab00:	f000 fb10 	bl	800b124 <canresp_get_volume_size>
                break;
 800ab04:	e003      	b.n	800ab0e <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
                canresp_delete_logfile();
 800ab06:	f000 fb2f 	bl	800b168 <canresp_delete_logfile>
                break;
 800ab0a:	e000      	b.n	800ab0e <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
                break;
 800ab0c:	bf00      	nop
            break;
 800ab0e:	e04f      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
                ltc6811->SetDischargeMode(data[0]);
 800ab10:	4b2a      	ldr	r3, [pc, #168]	; (800abbc <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	7b3a      	ldrb	r2, [r7, #12]
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff faad 	bl	800a078 <_ZN7LTC681116SetDischargeModeEh>
                status->op_mode = data[1];
 800ab1e:	4b28      	ldr	r3, [pc, #160]	; (800abc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	7b7a      	ldrb	r2, [r7, #13]
 800ab24:	701a      	strb	r2, [r3, #0]
                status->manual_mode = data[4] & 0x80;
 800ab26:	7c3b      	ldrb	r3, [r7, #16]
 800ab28:	b25a      	sxtb	r2, r3
 800ab2a:	4b25      	ldr	r3, [pc, #148]	; (800abc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	b2d2      	uxtb	r2, r2
 800ab30:	09d2      	lsrs	r2, r2, #7
 800ab32:	b2d2      	uxtb	r2, r2
 800ab34:	705a      	strb	r2, [r3, #1]
                status->SetFanDutyCycle(data[4]); // TODO set_fan_duty_cycle(data[4], 1);
 800ab36:	4b22      	ldr	r3, [pc, #136]	; (800abc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	7c3a      	ldrb	r2, [r7, #16]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff f896 	bl	8009c70 <_ZN6Status15SetFanDutyCycleEh>
                nlg5->oc_limit = data[5];
 800ab44:	7c7a      	ldrb	r2, [r7, #17]
 800ab46:	4b1c      	ldr	r3, [pc, #112]	; (800abb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	b292      	uxth	r2, r2
 800ab4c:	809a      	strh	r2, [r3, #4]
                break;
 800ab4e:	e02f      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
                status->SetAccuVoltage(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800ab50:	4b1b      	ldr	r3, [pc, #108]	; (800abc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	061a      	lsls	r2, r3, #24
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	041b      	lsls	r3, r3, #16
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	7c3b      	ldrb	r3, [r7, #16]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	4313      	orrs	r3, r2
 800ab64:	7c7a      	ldrb	r2, [r7, #17]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f7ff f90f 	bl	8009d8c <_ZN6Status14SetAccuVoltageEl>
                break;
 800ab6e:	e01f      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
                status->SetAccuVoltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800ab70:	4b13      	ldr	r3, [pc, #76]	; (800abc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	061a      	lsls	r2, r3, #24
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	041b      	lsls	r3, r3, #16
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	7c3b      	ldrb	r3, [r7, #16]
 800ab80:	021b      	lsls	r3, r3, #8
 800ab82:	4313      	orrs	r3, r2
 800ab84:	7c7a      	ldrb	r2, [r7, #17]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f7ff f91d 	bl	8009dc8 <_ZN6Status15SetAccuVoltage2El>
                break;
 800ab8e:	e00f      	b.n	800abb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>
                status->SetCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800ab92:	6818      	ldr	r0, [r3, #0]
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	061a      	lsls	r2, r3, #24
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	041b      	lsls	r3, r3, #16
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	7c3b      	ldrb	r3, [r7, #16]
 800aba0:	021b      	lsls	r3, r3, #8
 800aba2:	4313      	orrs	r3, r2
 800aba4:	7c7a      	ldrb	r2, [r7, #17]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	4619      	mov	r1, r3
 800abaa:	f7ff f8b9 	bl	8009d20 <_ZN6Status10SetCurrentEl>
                break;
 800abae:	bf00      	nop
        }
    }
}
 800abb0:	bf00      	nop
 800abb2:	3730      	adds	r7, #48	; 0x30
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20000208 	.word	0x20000208
 800abbc:	20000210 	.word	0x20000210
 800abc0:	2000020c 	.word	0x2000020c

0800abc4 <SetCharger>:

/* Send charger command message on CAN bus. Every fifth time the charger_event_flag is set a reset command is sent,
 * if charger is in fault state. Otherwise a charge command is sent. */
void SetCharger(void) {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
    uint8_t charger_event_flag = true; // TODO would be set to true every 1s in the old system by a timer
 800abca:	2301      	movs	r3, #1
 800abcc:	71fb      	strb	r3, [r7, #7]
    if (charger_event_flag) {
 800abce:	79fb      	ldrb	r3, [r7, #7]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d035      	beq.n	800ac40 <SetCharger+0x7c>
        if((nlg5->a_buffer[0] == 136 || nlg5->a_buffer[0] == 152) && (nlg5->b_buffer[0] == 136 || nlg5->b_buffer[0] == 152)) {
 800abd4:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <SetCharger+0x84>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	7a1b      	ldrb	r3, [r3, #8]
 800abda:	2b88      	cmp	r3, #136	; 0x88
 800abdc:	d004      	beq.n	800abe8 <SetCharger+0x24>
 800abde:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <SetCharger+0x84>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	7a1b      	ldrb	r3, [r3, #8]
 800abe4:	2b98      	cmp	r3, #152	; 0x98
 800abe6:	d109      	bne.n	800abfc <SetCharger+0x38>
 800abe8:	4b17      	ldr	r3, [pc, #92]	; (800ac48 <SetCharger+0x84>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	7b1b      	ldrb	r3, [r3, #12]
 800abee:	2b88      	cmp	r3, #136	; 0x88
 800abf0:	d01f      	beq.n	800ac32 <SetCharger+0x6e>
 800abf2:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <SetCharger+0x84>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	7b1b      	ldrb	r3, [r3, #12]
 800abf8:	2b98      	cmp	r3, #152	; 0x98
 800abfa:	d01a      	beq.n	800ac32 <SetCharger+0x6e>
            // Empty for now. No need for this check.
        } else if (status->charger_event_counter++ > 4) {
 800abfc:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <SetCharger+0x88>)
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	7bd3      	ldrb	r3, [r2, #15]
 800ac02:	1c59      	adds	r1, r3, #1
 800ac04:	b2c9      	uxtb	r1, r1
 800ac06:	73d1      	strb	r1, [r2, #15]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	bf8c      	ite	hi
 800ac0c:	2301      	movhi	r3, #1
 800ac0e:	2300      	movls	r3, #0
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d008      	beq.n	800ac28 <SetCharger+0x64>
            nlg5->ctrl = NLG5::C_C_EL;
 800ac16:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <SetCharger+0x84>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2240      	movs	r2, #64	; 0x40
 800ac1c:	701a      	strb	r2, [r3, #0]
            status->charger_event_counter = 0;
 800ac1e:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <SetCharger+0x88>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2200      	movs	r2, #0
 800ac24:	73da      	strb	r2, [r3, #15]
 800ac26:	e005      	b.n	800ac34 <SetCharger+0x70>
        } else
            nlg5->ctrl = NLG5::C_C_EN;
 800ac28:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <SetCharger+0x84>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2280      	movs	r2, #128	; 0x80
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	e000      	b.n	800ac34 <SetCharger+0x70>
        if((nlg5->a_buffer[0] == 136 || nlg5->a_buffer[0] == 152) && (nlg5->b_buffer[0] == 136 || nlg5->b_buffer[0] == 152)) {
 800ac32:	bf00      	nop

        CANTxNLGAControl();
 800ac34:	f000 f9a2 	bl	800af7c <CANTxNLGAControl>
        CANTxNLGBControl();
 800ac38:	f000 f9ee 	bl	800b018 <CANTxNLGBControl>
        charger_event_flag = false;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	71fb      	strb	r3, [r7, #7]
    }
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20000208 	.word	0x20000208
 800ac4c:	2000020c 	.word	0x2000020c

0800ac50 <CANTxVoltage>:
        return -1;

    return 0;
}

int8_t CANTxVoltage(void) {
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_VOLT;
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <CANTxVoltage+0x24>)
 800ac56:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800ac5a:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800ac5c:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <CANTxVoltage+0x24>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800ac62:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <CANTxVoltage+0x24>)
 800ac64:	2208      	movs	r2, #8
 800ac66:	611a      	str	r2, [r3, #16]

            ++TxHeader.StdId;
        }
    }
#endif
    return 0;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	200001f0 	.word	0x200001f0

0800ac78 <CANTxVoltageLimpTotal>:

int8_t CANTxVoltageLimpTotal(void) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_VOLT_TOTAL;
 800ac7e:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <CANTxVoltageLimpTotal+0x94>)
 800ac80:	220b      	movs	r2, #11
 800ac82:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800ac84:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <CANTxVoltageLimpTotal+0x94>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800ac8a:	4b20      	ldr	r3, [pc, #128]	; (800ad0c <CANTxVoltageLimpTotal+0x94>)
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	611a      	str	r2, [r3, #16]

    auto sum_of_cells = status->sum_of_cells / 10000; // TODO was being divided by 10000 on old system, I believe
 800ac90:	4b1f      	ldr	r3, [pc, #124]	; (800ad10 <CANTxVoltageLimpTotal+0x98>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ac96:	4a1f      	ldr	r2, [pc, #124]	; (800ad14 <CANTxVoltageLimpTotal+0x9c>)
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	0b5b      	lsrs	r3, r3, #13
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	60fb      	str	r3, [r7, #12]

    uint8_t data[] = {
 800aca2:	1d3b      	adds	r3, r7, #4
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	605a      	str	r2, [r3, #4]
 800acaa:	23cd      	movs	r3, #205	; 0xcd
 800acac:	723b      	strb	r3, [r7, #8]
 800acae:	23ab      	movs	r3, #171	; 0xab
 800acb0:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(sum_of_cells >> 24),
            0xCD,
            0xAB,
            0,
            status->GetLimping()
    };
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(sum_of_cells >> 8),
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	121b      	asrs	r3, r3, #8
    };
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(sum_of_cells >> 16),
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	141b      	asrs	r3, r3, #16
    };
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	71bb      	strb	r3, [r7, #6]
            static_cast<uint8_t>(sum_of_cells >> 24),
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	161b      	asrs	r3, r3, #24
    };
 800accc:	b2db      	uxtb	r3, r3
 800acce:	71fb      	strb	r3, [r7, #7]
            status->GetLimping()
 800acd0:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <CANTxVoltageLimpTotal+0x98>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff f811 	bl	8009cfc <_ZNK6Status10GetLimpingEv>
 800acda:	4603      	mov	r3, r0
    };
 800acdc:	72fb      	strb	r3, [r7, #11]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800acde:	1d3a      	adds	r2, r7, #4
 800ace0:	2301      	movs	r3, #1
 800ace2:	490a      	ldr	r1, [pc, #40]	; (800ad0c <CANTxVoltageLimpTotal+0x94>)
 800ace4:	480c      	ldr	r0, [pc, #48]	; (800ad18 <CANTxVoltageLimpTotal+0xa0>)
 800ace6:	f7f6 f8cf 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	bf14      	ite	ne
 800acf0:	2301      	movne	r3, #1
 800acf2:	2300      	moveq	r3, #0
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <CANTxVoltageLimpTotal+0x88>
        return -1;
 800acfa:	f04f 33ff 	mov.w	r3, #4294967295
 800acfe:	e000      	b.n	800ad02 <CANTxVoltageLimpTotal+0x8a>

    return 0;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200001f0 	.word	0x200001f0
 800ad10:	2000020c 	.word	0x2000020c
 800ad14:	d1b71759 	.word	0xd1b71759
 800ad18:	200000c4 	.word	0x200000c4

0800ad1c <CANTxTemperature>:

int8_t CANTxTemperature(void) {
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_TEMP;
 800ad20:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <CANTxTemperature+0x24>)
 800ad22:	f240 729c 	movw	r2, #1948	; 0x79c
 800ad26:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800ad28:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <CANTxTemperature+0x24>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <CANTxTemperature+0x24>)
 800ad30:	2208      	movs	r2, #8
 800ad32:	611a      	str	r2, [r3, #16]
        TxHeader.DLC = byte_position; // I think this is unnecessary, but it was in the old code...

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
        return -1;
#endif
    return 0;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	200001f0 	.word	0x200001f0

0800ad44 <CANTxUptime>:

int32_t CANTxUptime(void) {
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
    static uint32_t upCounter;
    upCounter++; // nicer way of saving the value between function calls
 800ad4a:	4b27      	ldr	r3, [pc, #156]	; (800ade8 <CANTxUptime+0xa4>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	4a25      	ldr	r2, [pc, #148]	; (800ade8 <CANTxUptime+0xa4>)
 800ad52:	6013      	str	r3, [r2, #0]

    TxHeader.StdId = CAN_ID_UPTIME;
 800ad54:	4b25      	ldr	r3, [pc, #148]	; (800adec <CANTxUptime+0xa8>)
 800ad56:	2208      	movs	r2, #8
 800ad58:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800ad5a:	4b24      	ldr	r3, [pc, #144]	; (800adec <CANTxUptime+0xa8>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800ad60:	4b22      	ldr	r3, [pc, #136]	; (800adec <CANTxUptime+0xa8>)
 800ad62:	2208      	movs	r2, #8
 800ad64:	611a      	str	r2, [r3, #16]

            static_cast<uint8_t>(status->uptime),
            static_cast<uint8_t>(status->uptime >> 8),
            static_cast<uint8_t>(status->uptime >> 16),
            static_cast<uint8_t>(status->uptime >> 24)
    };
 800ad66:	4b20      	ldr	r3, [pc, #128]	; (800ade8 <CANTxUptime+0xa4>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(upCounter >> 8),
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	; (800ade8 <CANTxUptime+0xa4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	0a1b      	lsrs	r3, r3, #8
    };
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(upCounter >> 16),
 800ad78:	4b1b      	ldr	r3, [pc, #108]	; (800ade8 <CANTxUptime+0xa4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	0c1b      	lsrs	r3, r3, #16
    };
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	70bb      	strb	r3, [r7, #2]
            static_cast<uint8_t>(upCounter >> 24),
 800ad82:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <CANTxUptime+0xa4>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	0e1b      	lsrs	r3, r3, #24
    };
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(status->uptime),
 800ad8c:	4b18      	ldr	r3, [pc, #96]	; (800adf0 <CANTxUptime+0xac>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
    };
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(status->uptime >> 8),
 800ad96:	4b16      	ldr	r3, [pc, #88]	; (800adf0 <CANTxUptime+0xac>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	0a1b      	lsrs	r3, r3, #8
    };
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(status->uptime >> 16),
 800ada2:	4b13      	ldr	r3, [pc, #76]	; (800adf0 <CANTxUptime+0xac>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	0c1b      	lsrs	r3, r3, #16
    };
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	71bb      	strb	r3, [r7, #6]
            static_cast<uint8_t>(status->uptime >> 24)
 800adae:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <CANTxUptime+0xac>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	0e1b      	lsrs	r3, r3, #24
    };
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	71fb      	strb	r3, [r7, #7]


    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800adba:	463a      	mov	r2, r7
 800adbc:	2301      	movs	r3, #1
 800adbe:	490b      	ldr	r1, [pc, #44]	; (800adec <CANTxUptime+0xa8>)
 800adc0:	480c      	ldr	r0, [pc, #48]	; (800adf4 <CANTxUptime+0xb0>)
 800adc2:	f7f6 f861 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bf14      	ite	ne
 800adcc:	2301      	movne	r3, #1
 800adce:	2300      	moveq	r3, #0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <CANTxUptime+0x98>
        return -1;
 800add6:	f04f 33ff 	mov.w	r3, #4294967295
 800adda:	e000      	b.n	800adde <CANTxUptime+0x9a>

    return 0;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20000214 	.word	0x20000214
 800adec:	200001f0 	.word	0x200001f0
 800adf0:	2000020c 	.word	0x2000020c
 800adf4:	200000c4 	.word	0x200000c4

0800adf8 <CanTxOpMode>:

int32_t CanTxOpMode(void) {
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_OPMODE;
 800adfe:	4b23      	ldr	r3, [pc, #140]	; (800ae8c <CanTxOpMode+0x94>)
 800ae00:	2209      	movs	r2, #9
 800ae02:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800ae04:	4b21      	ldr	r3, [pc, #132]	; (800ae8c <CanTxOpMode+0x94>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800ae0a:	4b20      	ldr	r3, [pc, #128]	; (800ae8c <CanTxOpMode+0x94>)
 800ae0c:	2208      	movs	r2, #8
 800ae0e:	611a      	str	r2, [r3, #16]

    // I believe the order of these data arrays is wrong
    uint8_t data[8] = {
            status->precharge_flag,
 800ae10:	4b1f      	ldr	r3, [pc, #124]	; (800ae90 <CanTxOpMode+0x98>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	7b1b      	ldrb	r3, [r3, #12]
            status->safe_state_executed,
            static_cast<uint8_t>(status->min_voltage & 0xFF), // This one too
            static_cast<uint8_t>(status->min_voltage >> 8),
            status->min_voltage_index, // TODO this is messed up for now
            status->op_mode
    };
 800ae16:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(status->max_temp >> 8), // Why are we ruining a 16 bit int like this?
 800ae18:	4b1d      	ldr	r3, [pc, #116]	; (800ae90 <CanTxOpMode+0x98>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae20:	121b      	asrs	r3, r3, #8
    };
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	707b      	strb	r3, [r7, #1]
            status->last_error,
 800ae26:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <CanTxOpMode+0x98>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	7b9b      	ldrb	r3, [r3, #14]
    };
 800ae2c:	70bb      	strb	r3, [r7, #2]
            status->safe_state_executed,
 800ae2e:	4b18      	ldr	r3, [pc, #96]	; (800ae90 <CanTxOpMode+0x98>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	7b5b      	ldrb	r3, [r3, #13]
    };
 800ae34:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(status->min_voltage & 0xFF), // This one too
 800ae36:	4b16      	ldr	r3, [pc, #88]	; (800ae90 <CanTxOpMode+0x98>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    };
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(status->min_voltage >> 8),
 800ae40:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <CanTxOpMode+0x98>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800ae46:	121b      	asrs	r3, r3, #8
    };
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	717b      	strb	r3, [r7, #5]
            status->min_voltage_index, // TODO this is messed up for now
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <CanTxOpMode+0x98>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    };
 800ae54:	71bb      	strb	r3, [r7, #6]
            status->op_mode
 800ae56:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <CanTxOpMode+0x98>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
    };
 800ae5c:	71fb      	strb	r3, [r7, #7]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800ae5e:	463a      	mov	r2, r7
 800ae60:	2301      	movs	r3, #1
 800ae62:	490a      	ldr	r1, [pc, #40]	; (800ae8c <CanTxOpMode+0x94>)
 800ae64:	480b      	ldr	r0, [pc, #44]	; (800ae94 <CanTxOpMode+0x9c>)
 800ae66:	f7f6 f80f 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	bf14      	ite	ne
 800ae70:	2301      	movne	r3, #1
 800ae72:	2300      	moveq	r3, #0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <CanTxOpMode+0x88>
        return -1;
 800ae7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7e:	e000      	b.n	800ae82 <CanTxOpMode+0x8a>

    return 0;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	200001f0 	.word	0x200001f0
 800ae90:	2000020c 	.word	0x2000020c
 800ae94:	200000c4 	.word	0x200000c4

0800ae98 <CanTxError>:

int32_t CanTxError(void) {
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
    auto pec_change = status->GetPecChange();
 800ae9e:	4b26      	ldr	r3, [pc, #152]	; (800af38 <CanTxError+0xa0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe fecd 	bl	8009c42 <_ZN6Status12GetPecChangeEv>
 800aea8:	60f8      	str	r0, [r7, #12]

    TxHeader.StdId = 0xBEEF;
 800aeaa:	4b24      	ldr	r3, [pc, #144]	; (800af3c <CanTxError+0xa4>)
 800aeac:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 800aeb0:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800aeb2:	4b22      	ldr	r3, [pc, #136]	; (800af3c <CanTxError+0xa4>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800aeb8:	4b20      	ldr	r3, [pc, #128]	; (800af3c <CanTxError+0xa4>)
 800aeba:	2208      	movs	r2, #8
 800aebc:	611a      	str	r2, [r3, #16]

    uint8_t data[] = {
            static_cast<uint8_t>(status->pec_counter >> 24),
 800aebe:	4b1e      	ldr	r3, [pc, #120]	; (800af38 <CanTxError+0xa0>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	0e1b      	lsrs	r3, r3, #24

            static_cast<uint8_t>(pec_change >> 24),
            static_cast<uint8_t>(pec_change >> 16),
            static_cast<uint8_t>(pec_change >> 8),
            static_cast<uint8_t>(pec_change)
    };
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(status->pec_counter >> 16),
 800aeca:	4b1b      	ldr	r3, [pc, #108]	; (800af38 <CanTxError+0xa0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	0c1b      	lsrs	r3, r3, #16
    };
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(status->pec_counter >> 8),
 800aed6:	4b18      	ldr	r3, [pc, #96]	; (800af38 <CanTxError+0xa0>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	0a1b      	lsrs	r3, r3, #8
    };
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	71bb      	strb	r3, [r7, #6]
            static_cast<uint8_t>(status->pec_counter),
 800aee2:	4b15      	ldr	r3, [pc, #84]	; (800af38 <CanTxError+0xa0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
    };
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	71fb      	strb	r3, [r7, #7]
            static_cast<uint8_t>(pec_change >> 24),
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	0e1b      	lsrs	r3, r3, #24
    };
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(pec_change >> 16),
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	0c1b      	lsrs	r3, r3, #16
    };
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(pec_change >> 8),
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	0a1b      	lsrs	r3, r3, #8
    };
 800af00:	b2db      	uxtb	r3, r3
 800af02:	72bb      	strb	r3, [r7, #10]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	b2db      	uxtb	r3, r3
 800af08:	72fb      	strb	r3, [r7, #11]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800af0a:	1d3a      	adds	r2, r7, #4
 800af0c:	2301      	movs	r3, #1
 800af0e:	490b      	ldr	r1, [pc, #44]	; (800af3c <CanTxError+0xa4>)
 800af10:	480b      	ldr	r0, [pc, #44]	; (800af40 <CanTxError+0xa8>)
 800af12:	f7f5 ffb9 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bf14      	ite	ne
 800af1c:	2301      	movne	r3, #1
 800af1e:	2300      	moveq	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <CanTxError+0x94>
        return -1;
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	e000      	b.n	800af2e <CanTxError+0x96>

    return 0;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	2000020c 	.word	0x2000020c
 800af3c:	200001f0 	.word	0x200001f0
 800af40:	200000c4 	.word	0x200000c4

0800af44 <CANTxDCfg>:

/*!
    \brief Puts discharge flag data on CAN bus.
 */
int32_t CANTxDCfg(void) {
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_DISHB;
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <CANTxDCfg+0x34>)
 800af4c:	f240 7275 	movw	r2, #1909	; 0x775
 800af50:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800af52:	4b09      	ldr	r3, [pc, #36]	; (800af78 <CANTxDCfg+0x34>)
 800af54:	2200      	movs	r2, #0
 800af56:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800af58:	4b07      	ldr	r3, [pc, #28]	; (800af78 <CANTxDCfg+0x34>)
 800af5a:	2208      	movs	r2, #8
 800af5c:	611a      	str	r2, [r3, #16]

    uint8_t data[8] = { 0 };
 800af5e:	1d3b      	adds	r3, r7, #4
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	605a      	str	r2, [r3, #4]
    uint8_t byte_position = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	73fb      	strb	r3, [r7, #15]
            byte_position = 0;
            ++TxHeader.StdId;
        }
    }*/

    return 0;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	200001f0 	.word	0x200001f0

0800af7c <CANTxNLGAControl>:

/* Checks specified chargers MOB status */
int32_t CANTxNLGAControl(void) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_NLGA_CTRL;
 800af82:	4b22      	ldr	r3, [pc, #136]	; (800b00c <CANTxNLGAControl+0x90>)
 800af84:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800af88:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800af8a:	4b20      	ldr	r3, [pc, #128]	; (800b00c <CANTxNLGAControl+0x90>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 7;
 800af90:	4b1e      	ldr	r3, [pc, #120]	; (800b00c <CANTxNLGAControl+0x90>)
 800af92:	2207      	movs	r2, #7
 800af94:	611a      	str	r2, [r3, #16]

    uint8_t data[7] = {
            nlg5->ctrl,
 800af96:	4b1e      	ldr	r3, [pc, #120]	; (800b010 <CANTxNLGAControl+0x94>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
            static_cast<uint8_t>(nlg5->mc_limit),
            static_cast<uint8_t>(nlg5->ov_limit >> 8),
            static_cast<uint8_t>(nlg5->ov_limit),
            static_cast<uint8_t>(nlg5->oc_limit >> 8),
            static_cast<uint8_t>(nlg5->oc_limit)
    };
 800af9c:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800af9e:	4b1c      	ldr	r3, [pc, #112]	; (800b010 <CANTxNLGAControl+0x94>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	885b      	ldrh	r3, [r3, #2]
 800afa4:	121b      	asrs	r3, r3, #8
    };
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(nlg5->mc_limit),
 800afaa:	4b19      	ldr	r3, [pc, #100]	; (800b010 <CANTxNLGAControl+0x94>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	885b      	ldrh	r3, [r3, #2]
    };
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	70bb      	strb	r3, [r7, #2]
            static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800afb4:	4b16      	ldr	r3, [pc, #88]	; (800b010 <CANTxNLGAControl+0x94>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	88db      	ldrh	r3, [r3, #6]
 800afba:	121b      	asrs	r3, r3, #8
    };
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(nlg5->ov_limit),
 800afc0:	4b13      	ldr	r3, [pc, #76]	; (800b010 <CANTxNLGAControl+0x94>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	88db      	ldrh	r3, [r3, #6]
    };
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800afca:	4b11      	ldr	r3, [pc, #68]	; (800b010 <CANTxNLGAControl+0x94>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	889b      	ldrh	r3, [r3, #4]
 800afd0:	121b      	asrs	r3, r3, #8
    };
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(nlg5->oc_limit)
 800afd6:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <CANTxNLGAControl+0x94>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	889b      	ldrh	r3, [r3, #4]
    };
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	71bb      	strb	r3, [r7, #6]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800afe0:	463a      	mov	r2, r7
 800afe2:	2301      	movs	r3, #1
 800afe4:	4909      	ldr	r1, [pc, #36]	; (800b00c <CANTxNLGAControl+0x90>)
 800afe6:	480b      	ldr	r0, [pc, #44]	; (800b014 <CANTxNLGAControl+0x98>)
 800afe8:	f7f5 ff4e 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2301      	movne	r3, #1
 800aff4:	2300      	moveq	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <CANTxNLGAControl+0x86>
        return -1;
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
 800b000:	e000      	b.n	800b004 <CANTxNLGAControl+0x88>

    return 0;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200001f0 	.word	0x200001f0
 800b010:	20000208 	.word	0x20000208
 800b014:	200000c4 	.word	0x200000c4

0800b018 <CANTxNLGBControl>:

// TODO This is exactly the same as the function above?
int32_t CANTxNLGBControl(void) {
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
    TxHeader.StdId = CAN_ID_NLGB_CTRL;
 800b01e:	4b22      	ldr	r3, [pc, #136]	; (800b0a8 <CANTxNLGBControl+0x90>)
 800b020:	f44f 62c5 	mov.w	r2, #1576	; 0x628
 800b024:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800b026:	4b20      	ldr	r3, [pc, #128]	; (800b0a8 <CANTxNLGBControl+0x90>)
 800b028:	2200      	movs	r2, #0
 800b02a:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 7;
 800b02c:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <CANTxNLGBControl+0x90>)
 800b02e:	2207      	movs	r2, #7
 800b030:	611a      	str	r2, [r3, #16]

    uint8_t data[7] = {
            nlg5->ctrl,
 800b032:	4b1e      	ldr	r3, [pc, #120]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
            static_cast<uint8_t>(nlg5->mc_limit),
            static_cast<uint8_t>(nlg5->ov_limit >> 8),
            static_cast<uint8_t>(nlg5->ov_limit),
            static_cast<uint8_t>(nlg5->oc_limit >> 8),
            static_cast<uint8_t>(nlg5->oc_limit)
    };
 800b038:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800b03a:	4b1c      	ldr	r3, [pc, #112]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	885b      	ldrh	r3, [r3, #2]
 800b040:	121b      	asrs	r3, r3, #8
    };
 800b042:	b2db      	uxtb	r3, r3
 800b044:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(nlg5->mc_limit),
 800b046:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	885b      	ldrh	r3, [r3, #2]
    };
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	70bb      	strb	r3, [r7, #2]
            static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800b050:	4b16      	ldr	r3, [pc, #88]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	88db      	ldrh	r3, [r3, #6]
 800b056:	121b      	asrs	r3, r3, #8
    };
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(nlg5->ov_limit),
 800b05c:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	88db      	ldrh	r3, [r3, #6]
    };
 800b062:	b2db      	uxtb	r3, r3
 800b064:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800b066:	4b11      	ldr	r3, [pc, #68]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	889b      	ldrh	r3, [r3, #4]
 800b06c:	121b      	asrs	r3, r3, #8
    };
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(nlg5->oc_limit)
 800b072:	4b0e      	ldr	r3, [pc, #56]	; (800b0ac <CANTxNLGBControl+0x94>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	889b      	ldrh	r3, [r3, #4]
    };
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	71bb      	strb	r3, [r7, #6]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800b07c:	463a      	mov	r2, r7
 800b07e:	2301      	movs	r3, #1
 800b080:	4909      	ldr	r1, [pc, #36]	; (800b0a8 <CANTxNLGBControl+0x90>)
 800b082:	480b      	ldr	r0, [pc, #44]	; (800b0b0 <CANTxNLGBControl+0x98>)
 800b084:	f7f5 ff00 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bf14      	ite	ne
 800b08e:	2301      	movne	r3, #1
 800b090:	2300      	moveq	r3, #0
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <CANTxNLGBControl+0x86>
        return -1;
 800b098:	f04f 33ff 	mov.w	r3, #4294967295
 800b09c:	e000      	b.n	800b0a0 <CANTxNLGBControl+0x88>

    return 0;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200001f0 	.word	0x200001f0
 800b0ac:	20000208 	.word	0x20000208
 800b0b0:	200000c4 	.word	0x200000c4

0800b0b4 <CANTxVolumeSize>:

int32_t CANTxVolumeSize(uint32_t size_of_log) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = CAN_ID_LOGGER_RESP;
 800b0bc:	4b17      	ldr	r3, [pc, #92]	; (800b11c <CANTxVolumeSize+0x68>)
 800b0be:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800b0c2:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <CANTxVolumeSize+0x68>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 4;
 800b0ca:	4b14      	ldr	r3, [pc, #80]	; (800b11c <CANTxVolumeSize+0x68>)
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	611a      	str	r2, [r3, #16]

    uint8_t data[] = {
            static_cast<uint8_t>(size_of_log >> 24),
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >> 8),
            static_cast<uint8_t>(size_of_log)
    };
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(size_of_log >> 16),
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	0c1b      	lsrs	r3, r3, #16
    };
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(size_of_log >> 8),
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	0a1b      	lsrs	r3, r3, #8
    };
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	73bb      	strb	r3, [r7, #14]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800b0ee:	f107 020c 	add.w	r2, r7, #12
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4909      	ldr	r1, [pc, #36]	; (800b11c <CANTxVolumeSize+0x68>)
 800b0f6:	480a      	ldr	r0, [pc, #40]	; (800b120 <CANTxVolumeSize+0x6c>)
 800b0f8:	f7f5 fec6 	bl	8000e88 <HAL_CAN_AddTxMessage>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bf14      	ite	ne
 800b102:	2301      	movne	r3, #1
 800b104:	2300      	moveq	r3, #0
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <CANTxVolumeSize+0x5e>
        return -1;
 800b10c:	f04f 33ff 	mov.w	r3, #4294967295
 800b110:	e000      	b.n	800b114 <CANTxVolumeSize+0x60>

    return 0;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	200001f0 	.word	0x200001f0
 800b120:	200000c4 	.word	0x200000c4

0800b124 <canresp_get_volume_size>:

void canresp_get_volume_size(void) {
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
    if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800b128:	2200      	movs	r2, #0
 800b12a:	490c      	ldr	r1, [pc, #48]	; (800b15c <canresp_get_volume_size+0x38>)
 800b12c:	480c      	ldr	r0, [pc, #48]	; (800b160 <canresp_get_volume_size+0x3c>)
 800b12e:	f7fb ffc9 	bl	80070c4 <f_mount>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	bf0c      	ite	eq
 800b138:	2301      	moveq	r3, #1
 800b13a:	2300      	movne	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <canresp_get_volume_size+0x32>
        CANTxVolumeSize(f_size(&SDFile));
 800b142:	4b08      	ldr	r3, [pc, #32]	; (800b164 <canresp_get_volume_size+0x40>)
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff ffb4 	bl	800b0b4 <CANTxVolumeSize>
        f_mount(NULL, "", 0); /* Unmount */
 800b14c:	2200      	movs	r2, #0
 800b14e:	4903      	ldr	r1, [pc, #12]	; (800b15c <canresp_get_volume_size+0x38>)
 800b150:	2000      	movs	r0, #0
 800b152:	f7fb ffb7 	bl	80070c4 <f_mount>
    }
}
 800b156:	bf00      	nop
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	0800be90 	.word	0x0800be90
 800b160:	20000468 	.word	0x20000468
 800b164:	20000238 	.word	0x20000238

0800b168 <canresp_delete_logfile>:

void canresp_delete_logfile(void) {
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
    if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800b16c:	2200      	movs	r2, #0
 800b16e:	490b      	ldr	r1, [pc, #44]	; (800b19c <canresp_delete_logfile+0x34>)
 800b170:	480b      	ldr	r0, [pc, #44]	; (800b1a0 <canresp_delete_logfile+0x38>)
 800b172:	f7fb ffa7 	bl	80070c4 <f_mount>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bf0c      	ite	eq
 800b17c:	2301      	moveq	r3, #1
 800b17e:	2300      	movne	r3, #0
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <canresp_delete_logfile+0x2e>
        f_unlink("/hpf17/data.txt");
 800b186:	4807      	ldr	r0, [pc, #28]	; (800b1a4 <canresp_delete_logfile+0x3c>)
 800b188:	f7fc fbf6 	bl	8007978 <f_unlink>
        f_mount(NULL, "", 0); /* Unmount */
 800b18c:	2200      	movs	r2, #0
 800b18e:	4903      	ldr	r1, [pc, #12]	; (800b19c <canresp_delete_logfile+0x34>)
 800b190:	2000      	movs	r0, #0
 800b192:	f7fb ff97 	bl	80070c4 <f_mount>
    }
}
 800b196:	bf00      	nop
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	0800be90 	.word	0x0800be90
 800b1a0:	20000468 	.word	0x20000468
 800b1a4:	0800bee4 	.word	0x0800bee4

0800b1a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800b1a8:	b480      	push	{r7}
 800b1aa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800b1ac:	bf00      	nop
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <_ZNKRSt8optionalI17LTC6811TempStatusE5valueEv>:
      value() const&
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
	  ?  this->_M_get()
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe ff8e 	bl	800a0e2 <_ZNKSt14_Optional_baseI17LTC6811TempStatusE13_M_is_engagedEv>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <_ZNKRSt8optionalI17LTC6811TempStatusE5valueEv+0x22>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f813 	bl	800b1fa <_ZNKSt14_Optional_baseI17LTC6811TempStatusE6_M_getEv>
 800b1d4:	4603      	mov	r3, r0
	     this->_M_get());
 800b1d6:	e001      	b.n	800b1dc <_ZNKRSt8optionalI17LTC6811TempStatusE5valueEv+0x26>
	  : (__throw_bad_optional_access(),
 800b1d8:	f7fe ff4a 	bl	800a070 <_ZSt27__throw_bad_optional_accessv>
      }
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <_ZNKSt14_Optional_baseI20LTC6811VoltageStatusE6_M_getEv>:
      _M_get() const noexcept
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <_ZNKSt14_Optional_baseI17LTC6811TempStatusE6_M_getEv>:
      _M_get() const noexcept
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4618      	mov	r0, r3
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b21a:	4b0b      	ldr	r3, [pc, #44]	; (800b248 <SD_CheckStatus+0x38>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b220:	f7fe fbb8 	bl	8009994 <BSP_SD_GetCardState>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d107      	bne.n	800b23a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b22a:	4b07      	ldr	r3, [pc, #28]	; (800b248 <SD_CheckStatus+0x38>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	f023 0301 	bic.w	r3, r3, #1
 800b234:	b2da      	uxtb	r2, r3
 800b236:	4b04      	ldr	r3, [pc, #16]	; (800b248 <SD_CheckStatus+0x38>)
 800b238:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b23a:	4b03      	ldr	r3, [pc, #12]	; (800b248 <SD_CheckStatus+0x38>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b2db      	uxtb	r3, r3
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20000005 	.word	0x20000005

0800b24c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <SD_initialize+0x38>)
 800b258:	2201      	movs	r2, #1
 800b25a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b25c:	f7fe fb38 	bl	80098d0 <BSP_SD_Init>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d107      	bne.n	800b276 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff ffd1 	bl	800b210 <SD_CheckStatus>
 800b26e:	4603      	mov	r3, r0
 800b270:	461a      	mov	r2, r3
 800b272:	4b04      	ldr	r3, [pc, #16]	; (800b284 <SD_initialize+0x38>)
 800b274:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b276:	4b03      	ldr	r3, [pc, #12]	; (800b284 <SD_initialize+0x38>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	b2db      	uxtb	r3, r3
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20000005 	.word	0x20000005

0800b288 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4603      	mov	r3, r0
 800b290:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff ffbb 	bl	800b210 <SD_CheckStatus>
 800b29a:	4603      	mov	r3, r0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	607a      	str	r2, [r7, #4]
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f7fe fb2b 	bl	800991c <BSP_SD_ReadBlocks>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d107      	bne.n	800b2dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b2cc:	bf00      	nop
 800b2ce:	f7fe fb61 	bl	8009994 <BSP_SD_GetCardState>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1fa      	bne.n	800b2ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b086      	sub	sp, #24
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	68b8      	ldr	r0, [r7, #8]
 800b304:	f7fe fb28 	bl	8009958 <BSP_SD_WriteBlocks>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d107      	bne.n	800b31e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b30e:	bf00      	nop
 800b310:	f7fe fb40 	bl	8009994 <BSP_SD_GetCardState>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1fa      	bne.n	800b310 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08c      	sub	sp, #48	; 0x30
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	603a      	str	r2, [r7, #0]
 800b332:	71fb      	strb	r3, [r7, #7]
 800b334:	460b      	mov	r3, r1
 800b336:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b33e:	4b25      	ldr	r3, [pc, #148]	; (800b3d4 <SD_ioctl+0xac>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <SD_ioctl+0x28>
 800b34c:	2303      	movs	r3, #3
 800b34e:	e03c      	b.n	800b3ca <SD_ioctl+0xa2>

  switch (cmd)
 800b350:	79bb      	ldrb	r3, [r7, #6]
 800b352:	2b03      	cmp	r3, #3
 800b354:	d834      	bhi.n	800b3c0 <SD_ioctl+0x98>
 800b356:	a201      	add	r2, pc, #4	; (adr r2, 800b35c <SD_ioctl+0x34>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b36d 	.word	0x0800b36d
 800b360:	0800b375 	.word	0x0800b375
 800b364:	0800b38d 	.word	0x0800b38d
 800b368:	0800b3a7 	.word	0x0800b3a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b372:	e028      	b.n	800b3c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fe fb1b 	bl	80099b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b38a:	e01c      	b.n	800b3c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe fb0f 	bl	80099b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	b29a      	uxth	r2, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b3a4:	e00f      	b.n	800b3c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b3a6:	f107 030c 	add.w	r3, r7, #12
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe fb02 	bl	80099b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	0a5a      	lsrs	r2, r3, #9
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b3be:	e002      	b.n	800b3c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b3c0:	2304      	movs	r3, #4
 800b3c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3730      	adds	r7, #48	; 0x30
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000005 	.word	0x20000005

0800b3d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b3de:	2300      	movs	r3, #0
 800b3e0:	607b      	str	r3, [r7, #4]
 800b3e2:	4b10      	ldr	r3, [pc, #64]	; (800b424 <HAL_MspInit+0x4c>)
 800b3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e6:	4a0f      	ldr	r2, [pc, #60]	; (800b424 <HAL_MspInit+0x4c>)
 800b3e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3ec:	6453      	str	r3, [r2, #68]	; 0x44
 800b3ee:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <HAL_MspInit+0x4c>)
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	603b      	str	r3, [r7, #0]
 800b3fe:	4b09      	ldr	r3, [pc, #36]	; (800b424 <HAL_MspInit+0x4c>)
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	4a08      	ldr	r2, [pc, #32]	; (800b424 <HAL_MspInit+0x4c>)
 800b404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b408:	6413      	str	r3, [r2, #64]	; 0x40
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <HAL_MspInit+0x4c>)
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b416:	bf00      	nop
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	40023800 	.word	0x40023800

0800b428 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08c      	sub	sp, #48	; 0x30
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b430:	f107 031c 	add.w	r3, r7, #28
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	605a      	str	r2, [r3, #4]
 800b43a:	609a      	str	r2, [r3, #8]
 800b43c:	60da      	str	r2, [r3, #12]
 800b43e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a4b      	ldr	r2, [pc, #300]	; (800b574 <HAL_CAN_MspInit+0x14c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d13e      	bne.n	800b4c8 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800b44a:	4b4b      	ldr	r3, [pc, #300]	; (800b578 <HAL_CAN_MspInit+0x150>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	4a49      	ldr	r2, [pc, #292]	; (800b578 <HAL_CAN_MspInit+0x150>)
 800b452:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800b454:	4b48      	ldr	r3, [pc, #288]	; (800b578 <HAL_CAN_MspInit+0x150>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d10d      	bne.n	800b478 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800b45c:	2300      	movs	r3, #0
 800b45e:	61bb      	str	r3, [r7, #24]
 800b460:	4b46      	ldr	r3, [pc, #280]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b464:	4a45      	ldr	r2, [pc, #276]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b46a:	6413      	str	r3, [r2, #64]	; 0x40
 800b46c:	4b43      	ldr	r3, [pc, #268]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b478:	2300      	movs	r3, #0
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	4b3f      	ldr	r3, [pc, #252]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b480:	4a3e      	ldr	r2, [pc, #248]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b482:	f043 0301 	orr.w	r3, r3, #1
 800b486:	6313      	str	r3, [r2, #48]	; 0x30
 800b488:	4b3c      	ldr	r3, [pc, #240]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b494:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b49a:	2302      	movs	r3, #2
 800b49c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800b4a6:	2309      	movs	r3, #9
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4aa:	f107 031c 	add.w	r3, r7, #28
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4833      	ldr	r0, [pc, #204]	; (800b580 <HAL_CAN_MspInit+0x158>)
 800b4b2:	f7f6 fa2d 	bl	8001910 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	2014      	movs	r0, #20
 800b4bc:	f7f6 f9f1 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800b4c0:	2014      	movs	r0, #20
 800b4c2:	f7f6 fa0a 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800b4c6:	e050      	b.n	800b56a <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a2d      	ldr	r2, [pc, #180]	; (800b584 <HAL_CAN_MspInit+0x15c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d14b      	bne.n	800b56a <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	613b      	str	r3, [r7, #16]
 800b4d6:	4b29      	ldr	r3, [pc, #164]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4da:	4a28      	ldr	r2, [pc, #160]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b4dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b4e2:	4b26      	ldr	r3, [pc, #152]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800b4ee:	4b22      	ldr	r3, [pc, #136]	; (800b578 <HAL_CAN_MspInit+0x150>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	4a20      	ldr	r2, [pc, #128]	; (800b578 <HAL_CAN_MspInit+0x150>)
 800b4f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800b4f8:	4b1f      	ldr	r3, [pc, #124]	; (800b578 <HAL_CAN_MspInit+0x150>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d10d      	bne.n	800b51c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800b500:	2300      	movs	r3, #0
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	4b1d      	ldr	r3, [pc, #116]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b508:	4a1c      	ldr	r2, [pc, #112]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b50a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b50e:	6413      	str	r3, [r2, #64]	; 0x40
 800b510:	4b1a      	ldr	r3, [pc, #104]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b51c:	2300      	movs	r3, #0
 800b51e:	60bb      	str	r3, [r7, #8]
 800b520:	4b16      	ldr	r3, [pc, #88]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b524:	4a15      	ldr	r2, [pc, #84]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b526:	f043 0302 	orr.w	r3, r3, #2
 800b52a:	6313      	str	r3, [r2, #48]	; 0x30
 800b52c:	4b13      	ldr	r3, [pc, #76]	; (800b57c <HAL_CAN_MspInit+0x154>)
 800b52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	60bb      	str	r3, [r7, #8]
 800b536:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800b538:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b53c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b53e:	2302      	movs	r3, #2
 800b540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b542:	2300      	movs	r3, #0
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b546:	2303      	movs	r3, #3
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800b54a:	2309      	movs	r3, #9
 800b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b54e:	f107 031c 	add.w	r3, r7, #28
 800b552:	4619      	mov	r1, r3
 800b554:	480c      	ldr	r0, [pc, #48]	; (800b588 <HAL_CAN_MspInit+0x160>)
 800b556:	f7f6 f9db 	bl	8001910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800b55a:	2200      	movs	r2, #0
 800b55c:	2100      	movs	r1, #0
 800b55e:	2041      	movs	r0, #65	; 0x41
 800b560:	f7f6 f99f 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800b564:	2041      	movs	r0, #65	; 0x41
 800b566:	f7f6 f9b8 	bl	80018da <HAL_NVIC_EnableIRQ>
}
 800b56a:	bf00      	nop
 800b56c:	3730      	adds	r7, #48	; 0x30
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	40006400 	.word	0x40006400
 800b578:	20000218 	.word	0x20000218
 800b57c:	40023800 	.word	0x40023800
 800b580:	40020000 	.word	0x40020000
 800b584:	40006800 	.word	0x40006800
 800b588:	40020400 	.word	0x40020400

0800b58c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08a      	sub	sp, #40	; 0x28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b594:	f107 0314 	add.w	r3, r7, #20
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	605a      	str	r2, [r3, #4]
 800b59e:	609a      	str	r2, [r3, #8]
 800b5a0:	60da      	str	r2, [r3, #12]
 800b5a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a28      	ldr	r2, [pc, #160]	; (800b64c <HAL_SD_MspInit+0xc0>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d14a      	bne.n	800b644 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	613b      	str	r3, [r7, #16]
 800b5b2:	4b27      	ldr	r3, [pc, #156]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b6:	4a26      	ldr	r2, [pc, #152]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b5bc:	6453      	str	r3, [r2, #68]	; 0x44
 800b5be:	4b24      	ldr	r3, [pc, #144]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5c6:	613b      	str	r3, [r7, #16]
 800b5c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	4b20      	ldr	r3, [pc, #128]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5d4:	f043 0304 	orr.w	r3, r3, #4
 800b5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5da:	4b1d      	ldr	r3, [pc, #116]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	f003 0304 	and.w	r3, r3, #4
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60bb      	str	r3, [r7, #8]
 800b5ea:	4b19      	ldr	r3, [pc, #100]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	4a18      	ldr	r2, [pc, #96]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5f0:	f043 0308 	orr.w	r3, r3, #8
 800b5f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5f6:	4b16      	ldr	r3, [pc, #88]	; (800b650 <HAL_SD_MspInit+0xc4>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	60bb      	str	r3, [r7, #8]
 800b600:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b602:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800b606:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b608:	2302      	movs	r3, #2
 800b60a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b60c:	2300      	movs	r3, #0
 800b60e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b610:	2303      	movs	r3, #3
 800b612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b614:	230c      	movs	r3, #12
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b618:	f107 0314 	add.w	r3, r7, #20
 800b61c:	4619      	mov	r1, r3
 800b61e:	480d      	ldr	r0, [pc, #52]	; (800b654 <HAL_SD_MspInit+0xc8>)
 800b620:	f7f6 f976 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b624:	2304      	movs	r3, #4
 800b626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b628:	2302      	movs	r3, #2
 800b62a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b62c:	2300      	movs	r3, #0
 800b62e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b630:	2303      	movs	r3, #3
 800b632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b634:	230c      	movs	r3, #12
 800b636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	4619      	mov	r1, r3
 800b63e:	4806      	ldr	r0, [pc, #24]	; (800b658 <HAL_SD_MspInit+0xcc>)
 800b640:	f7f6 f966 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b644:	bf00      	nop
 800b646:	3728      	adds	r7, #40	; 0x28
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	40012c00 	.word	0x40012c00
 800b650:	40023800 	.word	0x40023800
 800b654:	40020800 	.word	0x40020800
 800b658:	40020c00 	.word	0x40020c00

0800b65c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b664:	f107 0314 	add.w	r3, r7, #20
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	609a      	str	r2, [r3, #8]
 800b670:	60da      	str	r2, [r3, #12]
 800b672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a28      	ldr	r2, [pc, #160]	; (800b71c <HAL_SPI_MspInit+0xc0>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d149      	bne.n	800b712 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b67e:	2300      	movs	r3, #0
 800b680:	613b      	str	r3, [r7, #16]
 800b682:	4b27      	ldr	r3, [pc, #156]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b686:	4a26      	ldr	r2, [pc, #152]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b68c:	6453      	str	r3, [r2, #68]	; 0x44
 800b68e:	4b24      	ldr	r3, [pc, #144]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b69a:	2300      	movs	r3, #0
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	4b20      	ldr	r3, [pc, #128]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	4a1f      	ldr	r2, [pc, #124]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b6a4:	f043 0301 	orr.w	r3, r3, #1
 800b6a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6aa:	4b1d      	ldr	r3, [pc, #116]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60bb      	str	r3, [r7, #8]
 800b6ba:	4b19      	ldr	r3, [pc, #100]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6be:	4a18      	ldr	r2, [pc, #96]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b6c0:	f043 0302 	orr.w	r3, r3, #2
 800b6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b6c6:	4b16      	ldr	r3, [pc, #88]	; (800b720 <HAL_SPI_MspInit+0xc4>)
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	f003 0302 	and.w	r3, r3, #2
 800b6ce:	60bb      	str	r3, [r7, #8]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b6d2:	2310      	movs	r3, #16
 800b6d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b6e2:	2305      	movs	r3, #5
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e6:	f107 0314 	add.w	r3, r7, #20
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	480d      	ldr	r0, [pc, #52]	; (800b724 <HAL_SPI_MspInit+0xc8>)
 800b6ee:	f7f6 f90f 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800b6f2:	2338      	movs	r3, #56	; 0x38
 800b6f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6fe:	2303      	movs	r3, #3
 800b700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b702:	2305      	movs	r3, #5
 800b704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b706:	f107 0314 	add.w	r3, r7, #20
 800b70a:	4619      	mov	r1, r3
 800b70c:	4806      	ldr	r0, [pc, #24]	; (800b728 <HAL_SPI_MspInit+0xcc>)
 800b70e:	f7f6 f8ff 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b712:	bf00      	nop
 800b714:	3728      	adds	r7, #40	; 0x28
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	40013000 	.word	0x40013000
 800b720:	40023800 	.word	0x40023800
 800b724:	40020000 	.word	0x40020000
 800b728:	40020400 	.word	0x40020400

0800b72c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b730:	bf00      	nop
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b73a:	b480      	push	{r7}
 800b73c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b73e:	e7fe      	b.n	800b73e <HardFault_Handler+0x4>

0800b740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b744:	e7fe      	b.n	800b744 <MemManage_Handler+0x4>

0800b746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b746:	b480      	push	{r7}
 800b748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b74a:	e7fe      	b.n	800b74a <BusFault_Handler+0x4>

0800b74c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b750:	e7fe      	b.n	800b750 <UsageFault_Handler+0x4>

0800b752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b752:	b480      	push	{r7}
 800b754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b756:	bf00      	nop
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b764:	bf00      	nop
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b76e:	b480      	push	{r7}
 800b770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b772:	bf00      	nop
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b780:	f7f5 f920 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b784:	bf00      	nop
 800b786:	bd80      	pop	{r7, pc}

0800b788 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800b78c:	4802      	ldr	r0, [pc, #8]	; (800b798 <CAN1_RX0_IRQHandler+0x10>)
 800b78e:	f7f5 fd8e 	bl	80012ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800b792:	bf00      	nop
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200000c4 	.word	0x200000c4

0800b79c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800b7a0:	4802      	ldr	r0, [pc, #8]	; (800b7ac <CAN2_RX1_IRQHandler+0x10>)
 800b7a2:	f7f5 fd84 	bl	80012ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800b7a6:	bf00      	nop
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200000ec 	.word	0x200000ec

0800b7b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
	return 1;
 800b7b4:	2301      	movs	r3, #1
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <_kill>:

int _kill(int pid, int sig)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b7ca:	f000 fa2d 	bl	800bc28 <__errno>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	2316      	movs	r3, #22
 800b7d2:	6013      	str	r3, [r2, #0]
	return -1;
 800b7d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <_exit>:

void _exit (int status)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ffe7 	bl	800b7c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b7f2:	e7fe      	b.n	800b7f2 <_exit+0x12>

0800b7f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b7fc:	4b11      	ldr	r3, [pc, #68]	; (800b844 <_sbrk+0x50>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <_sbrk+0x16>
		heap_end = &end;
 800b804:	4b0f      	ldr	r3, [pc, #60]	; (800b844 <_sbrk+0x50>)
 800b806:	4a10      	ldr	r2, [pc, #64]	; (800b848 <_sbrk+0x54>)
 800b808:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b80a:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <_sbrk+0x50>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b810:	4b0c      	ldr	r3, [pc, #48]	; (800b844 <_sbrk+0x50>)
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4413      	add	r3, r2
 800b818:	466a      	mov	r2, sp
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d907      	bls.n	800b82e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b81e:	f000 fa03 	bl	800bc28 <__errno>
 800b822:	4602      	mov	r2, r0
 800b824:	230c      	movs	r3, #12
 800b826:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b828:	f04f 33ff 	mov.w	r3, #4294967295
 800b82c:	e006      	b.n	800b83c <_sbrk+0x48>
	}

	heap_end += incr;
 800b82e:	4b05      	ldr	r3, [pc, #20]	; (800b844 <_sbrk+0x50>)
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4413      	add	r3, r2
 800b836:	4a03      	ldr	r2, [pc, #12]	; (800b844 <_sbrk+0x50>)
 800b838:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b83a:	68fb      	ldr	r3, [r7, #12]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	2000021c 	.word	0x2000021c
 800b848:	200006a0 	.word	0x200006a0

0800b84c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b850:	4b16      	ldr	r3, [pc, #88]	; (800b8ac <SystemInit+0x60>)
 800b852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b856:	4a15      	ldr	r2, [pc, #84]	; (800b8ac <SystemInit+0x60>)
 800b858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b85c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b860:	4b13      	ldr	r3, [pc, #76]	; (800b8b0 <SystemInit+0x64>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a12      	ldr	r2, [pc, #72]	; (800b8b0 <SystemInit+0x64>)
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b86c:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <SystemInit+0x64>)
 800b86e:	2200      	movs	r2, #0
 800b870:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b872:	4b0f      	ldr	r3, [pc, #60]	; (800b8b0 <SystemInit+0x64>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a0e      	ldr	r2, [pc, #56]	; (800b8b0 <SystemInit+0x64>)
 800b878:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b87c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b880:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b882:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <SystemInit+0x64>)
 800b884:	4a0b      	ldr	r2, [pc, #44]	; (800b8b4 <SystemInit+0x68>)
 800b886:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b888:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <SystemInit+0x64>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a08      	ldr	r2, [pc, #32]	; (800b8b0 <SystemInit+0x64>)
 800b88e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b892:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <SystemInit+0x64>)
 800b896:	2200      	movs	r2, #0
 800b898:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <SystemInit+0x60>)
 800b89c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b8a0:	609a      	str	r2, [r3, #8]
#endif
}
 800b8a2:	bf00      	nop
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	e000ed00 	.word	0xe000ed00
 800b8b0:	40023800 	.word	0x40023800
 800b8b4:	24003010 	.word	0x24003010

0800b8b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b8b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b8f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b8bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b8be:	e003      	b.n	800b8c8 <LoopCopyDataInit>

0800b8c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b8c0:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b8c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b8c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b8c6:	3104      	adds	r1, #4

0800b8c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b8c8:	480b      	ldr	r0, [pc, #44]	; (800b8f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b8cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b8ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b8d0:	d3f6      	bcc.n	800b8c0 <CopyDataInit>
  ldr  r2, =_sbss
 800b8d2:	4a0b      	ldr	r2, [pc, #44]	; (800b900 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b8d4:	e002      	b.n	800b8dc <LoopFillZerobss>

0800b8d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b8d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b8d8:	f842 3b04 	str.w	r3, [r2], #4

0800b8dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b8de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b8e0:	d3f9      	bcc.n	800b8d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b8e2:	f7ff ffb3 	bl	800b84c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b8e6:	f000 f9a5 	bl	800bc34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b8ea:	f7fe fc1d 	bl	800a128 <main>
  bx  lr    
 800b8ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b8f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b8f4:	0800c1b0 	.word	0x0800c1b0
  ldr  r0, =_sdata
 800b8f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b8fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800b900:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800b904:	2000069c 	.word	0x2000069c

0800b908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b908:	e7fe      	b.n	800b908 <ADC_IRQHandler>

0800b90a <_Znwj>:
 800b90a:	b510      	push	{r4, lr}
 800b90c:	2800      	cmp	r0, #0
 800b90e:	bf14      	ite	ne
 800b910:	4604      	movne	r4, r0
 800b912:	2401      	moveq	r4, #1
 800b914:	4620      	mov	r0, r4
 800b916:	f000 f9b1 	bl	800bc7c <malloc>
 800b91a:	b930      	cbnz	r0, 800b92a <_Znwj+0x20>
 800b91c:	f000 f806 	bl	800b92c <_ZSt15get_new_handlerv>
 800b920:	b908      	cbnz	r0, 800b926 <_Znwj+0x1c>
 800b922:	f000 f979 	bl	800bc18 <abort>
 800b926:	4780      	blx	r0
 800b928:	e7f4      	b.n	800b914 <_Znwj+0xa>
 800b92a:	bd10      	pop	{r4, pc}

0800b92c <_ZSt15get_new_handlerv>:
 800b92c:	4b02      	ldr	r3, [pc, #8]	; (800b938 <_ZSt15get_new_handlerv+0xc>)
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	f3bf 8f5b 	dmb	ish
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20000220 	.word	0x20000220

0800b93c <logf>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	ed2d 8b02 	vpush	{d8}
 800b942:	b08a      	sub	sp, #40	; 0x28
 800b944:	eeb0 8a40 	vmov.f32	s16, s0
 800b948:	f000 f86e 	bl	800ba28 <__ieee754_logf>
 800b94c:	4b31      	ldr	r3, [pc, #196]	; (800ba14 <logf+0xd8>)
 800b94e:	f993 4000 	ldrsb.w	r4, [r3]
 800b952:	1c63      	adds	r3, r4, #1
 800b954:	d059      	beq.n	800ba0a <logf+0xce>
 800b956:	eeb4 8a48 	vcmp.f32	s16, s16
 800b95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b95e:	d654      	bvs.n	800ba0a <logf+0xce>
 800b960:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b968:	dc4f      	bgt.n	800ba0a <logf+0xce>
 800b96a:	4b2b      	ldr	r3, [pc, #172]	; (800ba18 <logf+0xdc>)
 800b96c:	9301      	str	r3, [sp, #4]
 800b96e:	ee18 0a10 	vmov	r0, s16
 800b972:	2300      	movs	r3, #0
 800b974:	9308      	str	r3, [sp, #32]
 800b976:	f7f4 fdab 	bl	80004d0 <__aeabi_f2d>
 800b97a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b97e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b982:	b994      	cbnz	r4, 800b9aa <logf+0x6e>
 800b984:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <logf+0xe0>)
 800b986:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b98a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b992:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b996:	d025      	beq.n	800b9e4 <logf+0xa8>
 800b998:	2301      	movs	r3, #1
 800b99a:	2c02      	cmp	r4, #2
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	d116      	bne.n	800b9ce <logf+0x92>
 800b9a0:	f000 f942 	bl	800bc28 <__errno>
 800b9a4:	2321      	movs	r3, #33	; 0x21
 800b9a6:	6003      	str	r3, [r0, #0]
 800b9a8:	e016      	b.n	800b9d8 <logf+0x9c>
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <logf+0xe4>)
 800b9ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9ba:	d1ed      	bne.n	800b998 <logf+0x5c>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	429c      	cmp	r4, r3
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	d111      	bne.n	800b9e8 <logf+0xac>
 800b9c4:	f000 f930 	bl	800bc28 <__errno>
 800b9c8:	2322      	movs	r3, #34	; 0x22
 800b9ca:	6003      	str	r3, [r0, #0]
 800b9cc:	e011      	b.n	800b9f2 <logf+0xb6>
 800b9ce:	4668      	mov	r0, sp
 800b9d0:	f000 f918 	bl	800bc04 <matherr>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d0e3      	beq.n	800b9a0 <logf+0x64>
 800b9d8:	4812      	ldr	r0, [pc, #72]	; (800ba24 <logf+0xe8>)
 800b9da:	f000 f915 	bl	800bc08 <nan>
 800b9de:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b9e2:	e006      	b.n	800b9f2 <logf+0xb6>
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	4668      	mov	r0, sp
 800b9ea:	f000 f90b 	bl	800bc04 <matherr>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d0e8      	beq.n	800b9c4 <logf+0x88>
 800b9f2:	9b08      	ldr	r3, [sp, #32]
 800b9f4:	b11b      	cbz	r3, 800b9fe <logf+0xc2>
 800b9f6:	f000 f917 	bl	800bc28 <__errno>
 800b9fa:	9b08      	ldr	r3, [sp, #32]
 800b9fc:	6003      	str	r3, [r0, #0]
 800b9fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba02:	f7f4 fdbd 	bl	8000580 <__aeabi_d2f>
 800ba06:	ee00 0a10 	vmov	s0, r0
 800ba0a:	b00a      	add	sp, #40	; 0x28
 800ba0c:	ecbd 8b02 	vpop	{d8}
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	bf00      	nop
 800ba14:	2000000c 	.word	0x2000000c
 800ba18:	0800c198 	.word	0x0800c198
 800ba1c:	c7efffff 	.word	0xc7efffff
 800ba20:	fff00000 	.word	0xfff00000
 800ba24:	0800c19c 	.word	0x0800c19c

0800ba28 <__ieee754_logf>:
 800ba28:	ee10 3a10 	vmov	r3, s0
 800ba2c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ba30:	d106      	bne.n	800ba40 <__ieee754_logf+0x18>
 800ba32:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800bbc8 <__ieee754_logf+0x1a0>
 800ba36:	eddf 7a65 	vldr	s15, [pc, #404]	; 800bbcc <__ieee754_logf+0x1a4>
 800ba3a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ba3e:	4770      	bx	lr
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	da02      	bge.n	800ba4a <__ieee754_logf+0x22>
 800ba44:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ba48:	e7f5      	b.n	800ba36 <__ieee754_logf+0xe>
 800ba4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ba4e:	db02      	blt.n	800ba56 <__ieee754_logf+0x2e>
 800ba50:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba54:	4770      	bx	lr
 800ba56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba5a:	bfbf      	itttt	lt
 800ba5c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800bbd0 <__ieee754_logf+0x1a8>
 800ba60:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ba64:	f06f 0118 	mvnlt.w	r1, #24
 800ba68:	ee17 3a90 	vmovlt	r3, s15
 800ba6c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800ba70:	bfa8      	it	ge
 800ba72:	2100      	movge	r1, #0
 800ba74:	3a7f      	subs	r2, #127	; 0x7f
 800ba76:	440a      	add	r2, r1
 800ba78:	4956      	ldr	r1, [pc, #344]	; (800bbd4 <__ieee754_logf+0x1ac>)
 800ba7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ba7e:	4419      	add	r1, r3
 800ba80:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800ba84:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800ba88:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800ba8c:	4319      	orrs	r1, r3
 800ba8e:	ee07 1a90 	vmov	s15, r1
 800ba92:	f103 010f 	add.w	r1, r3, #15
 800ba96:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800ba9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba9e:	290f      	cmp	r1, #15
 800baa0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800baa4:	dc31      	bgt.n	800bb0a <__ieee754_logf+0xe2>
 800baa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800baaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baae:	d10f      	bne.n	800bad0 <__ieee754_logf+0xa8>
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	f000 8085 	beq.w	800bbc0 <__ieee754_logf+0x198>
 800bab6:	ee07 2a90 	vmov	s15, r2
 800baba:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800bbd8 <__ieee754_logf+0x1b0>
 800babe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800bbdc <__ieee754_logf+0x1b4>
 800bac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bac6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800baca:	eea7 0a87 	vfma.f32	s0, s15, s14
 800bace:	4770      	bx	lr
 800bad0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bbe0 <__ieee754_logf+0x1b8>
 800bad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bad8:	eea0 7a67 	vfms.f32	s14, s0, s15
 800badc:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae4:	b912      	cbnz	r2, 800baec <__ieee754_logf+0xc4>
 800bae6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800baea:	4770      	bx	lr
 800baec:	ee07 2a90 	vmov	s15, r2
 800baf0:	eddf 6a39 	vldr	s13, [pc, #228]	; 800bbd8 <__ieee754_logf+0x1b0>
 800baf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baf8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bafc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bb00:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bbdc <__ieee754_logf+0x1b4>
 800bb04:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800bb08:	4770      	bx	lr
 800bb0a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800bb0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bb12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbe4 <__ieee754_logf+0x1bc>
 800bb16:	eddf 4a34 	vldr	s9, [pc, #208]	; 800bbe8 <__ieee754_logf+0x1c0>
 800bb1a:	4934      	ldr	r1, [pc, #208]	; (800bbec <__ieee754_logf+0x1c4>)
 800bb1c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800bb20:	4419      	add	r1, r3
 800bb22:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800bb26:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bb2a:	430b      	orrs	r3, r1
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	ee07 2a90 	vmov	s15, r2
 800bb32:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bb36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bb3a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800bb3e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800bbf0 <__ieee754_logf+0x1c8>
 800bb42:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bb46:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800bbf4 <__ieee754_logf+0x1cc>
 800bb4a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bb4e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800bbf8 <__ieee754_logf+0x1d0>
 800bb52:	eee7 7a24 	vfma.f32	s15, s14, s9
 800bb56:	eddf 4a29 	vldr	s9, [pc, #164]	; 800bbfc <__ieee754_logf+0x1d4>
 800bb5a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800bb5e:	eddf 7a28 	vldr	s15, [pc, #160]	; 800bc00 <__ieee754_logf+0x1d8>
 800bb62:	eee4 7a87 	vfma.f32	s15, s9, s14
 800bb66:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bb6a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800bb6e:	dd1c      	ble.n	800bbaa <__ieee754_logf+0x182>
 800bb70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bb74:	ee20 7a07 	vmul.f32	s14, s0, s14
 800bb78:	ee27 7a00 	vmul.f32	s14, s14, s0
 800bb7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb80:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb84:	b922      	cbnz	r2, 800bb90 <__ieee754_logf+0x168>
 800bb86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb8e:	4770      	bx	lr
 800bb90:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800bbd8 <__ieee754_logf+0x1b0>
 800bb94:	eee6 7a86 	vfma.f32	s15, s13, s12
 800bb98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bba0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800bbdc <__ieee754_logf+0x1b4>
 800bba4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800bba8:	4770      	bx	lr
 800bbaa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bbae:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	d0e9      	beq.n	800bb8a <__ieee754_logf+0x162>
 800bbb6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800bbd8 <__ieee754_logf+0x1b0>
 800bbba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bbbe:	e7ed      	b.n	800bb9c <__ieee754_logf+0x174>
 800bbc0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800bbcc <__ieee754_logf+0x1a4>
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	cc000000 	.word	0xcc000000
 800bbcc:	00000000 	.word	0x00000000
 800bbd0:	4c000000 	.word	0x4c000000
 800bbd4:	004afb20 	.word	0x004afb20
 800bbd8:	3717f7d1 	.word	0x3717f7d1
 800bbdc:	3f317180 	.word	0x3f317180
 800bbe0:	3eaaaaab 	.word	0x3eaaaaab
 800bbe4:	3e1cd04f 	.word	0x3e1cd04f
 800bbe8:	3e178897 	.word	0x3e178897
 800bbec:	ffcf5c30 	.word	0xffcf5c30
 800bbf0:	3e638e29 	.word	0x3e638e29
 800bbf4:	3ecccccd 	.word	0x3ecccccd
 800bbf8:	3e3a3325 	.word	0x3e3a3325
 800bbfc:	3e924925 	.word	0x3e924925
 800bc00:	3f2aaaab 	.word	0x3f2aaaab

0800bc04 <matherr>:
 800bc04:	2000      	movs	r0, #0
 800bc06:	4770      	bx	lr

0800bc08 <nan>:
 800bc08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc10 <nan+0x8>
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	00000000 	.word	0x00000000
 800bc14:	7ff80000 	.word	0x7ff80000

0800bc18 <abort>:
 800bc18:	b508      	push	{r3, lr}
 800bc1a:	2006      	movs	r0, #6
 800bc1c:	f000 f8d0 	bl	800bdc0 <raise>
 800bc20:	2001      	movs	r0, #1
 800bc22:	f7ff fddd 	bl	800b7e0 <_exit>
	...

0800bc28 <__errno>:
 800bc28:	4b01      	ldr	r3, [pc, #4]	; (800bc30 <__errno+0x8>)
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20000010 	.word	0x20000010

0800bc34 <__libc_init_array>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	4e0d      	ldr	r6, [pc, #52]	; (800bc6c <__libc_init_array+0x38>)
 800bc38:	4c0d      	ldr	r4, [pc, #52]	; (800bc70 <__libc_init_array+0x3c>)
 800bc3a:	1ba4      	subs	r4, r4, r6
 800bc3c:	10a4      	asrs	r4, r4, #2
 800bc3e:	2500      	movs	r5, #0
 800bc40:	42a5      	cmp	r5, r4
 800bc42:	d109      	bne.n	800bc58 <__libc_init_array+0x24>
 800bc44:	4e0b      	ldr	r6, [pc, #44]	; (800bc74 <__libc_init_array+0x40>)
 800bc46:	4c0c      	ldr	r4, [pc, #48]	; (800bc78 <__libc_init_array+0x44>)
 800bc48:	f000 f8d8 	bl	800bdfc <_init>
 800bc4c:	1ba4      	subs	r4, r4, r6
 800bc4e:	10a4      	asrs	r4, r4, #2
 800bc50:	2500      	movs	r5, #0
 800bc52:	42a5      	cmp	r5, r4
 800bc54:	d105      	bne.n	800bc62 <__libc_init_array+0x2e>
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
 800bc58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc5c:	4798      	blx	r3
 800bc5e:	3501      	adds	r5, #1
 800bc60:	e7ee      	b.n	800bc40 <__libc_init_array+0xc>
 800bc62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc66:	4798      	blx	r3
 800bc68:	3501      	adds	r5, #1
 800bc6a:	e7f2      	b.n	800bc52 <__libc_init_array+0x1e>
 800bc6c:	0800c1a8 	.word	0x0800c1a8
 800bc70:	0800c1a8 	.word	0x0800c1a8
 800bc74:	0800c1a8 	.word	0x0800c1a8
 800bc78:	0800c1ac 	.word	0x0800c1ac

0800bc7c <malloc>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <malloc+0xc>)
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	f000 b80b 	b.w	800bc9c <_malloc_r>
 800bc86:	bf00      	nop
 800bc88:	20000010 	.word	0x20000010

0800bc8c <memset>:
 800bc8c:	4402      	add	r2, r0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d100      	bne.n	800bc96 <memset+0xa>
 800bc94:	4770      	bx	lr
 800bc96:	f803 1b01 	strb.w	r1, [r3], #1
 800bc9a:	e7f9      	b.n	800bc90 <memset+0x4>

0800bc9c <_malloc_r>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	1ccd      	adds	r5, r1, #3
 800bca0:	f025 0503 	bic.w	r5, r5, #3
 800bca4:	3508      	adds	r5, #8
 800bca6:	2d0c      	cmp	r5, #12
 800bca8:	bf38      	it	cc
 800bcaa:	250c      	movcc	r5, #12
 800bcac:	2d00      	cmp	r5, #0
 800bcae:	4606      	mov	r6, r0
 800bcb0:	db01      	blt.n	800bcb6 <_malloc_r+0x1a>
 800bcb2:	42a9      	cmp	r1, r5
 800bcb4:	d903      	bls.n	800bcbe <_malloc_r+0x22>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	6033      	str	r3, [r6, #0]
 800bcba:	2000      	movs	r0, #0
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	f000 f89b 	bl	800bdf8 <__malloc_lock>
 800bcc2:	4a21      	ldr	r2, [pc, #132]	; (800bd48 <_malloc_r+0xac>)
 800bcc4:	6814      	ldr	r4, [r2, #0]
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	b991      	cbnz	r1, 800bcf0 <_malloc_r+0x54>
 800bcca:	4c20      	ldr	r4, [pc, #128]	; (800bd4c <_malloc_r+0xb0>)
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	b91b      	cbnz	r3, 800bcd8 <_malloc_r+0x3c>
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 f83d 	bl	800bd50 <_sbrk_r>
 800bcd6:	6020      	str	r0, [r4, #0]
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 f838 	bl	800bd50 <_sbrk_r>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d124      	bne.n	800bd2e <_malloc_r+0x92>
 800bce4:	230c      	movs	r3, #12
 800bce6:	6033      	str	r3, [r6, #0]
 800bce8:	4630      	mov	r0, r6
 800bcea:	f000 f886 	bl	800bdfa <__malloc_unlock>
 800bcee:	e7e4      	b.n	800bcba <_malloc_r+0x1e>
 800bcf0:	680b      	ldr	r3, [r1, #0]
 800bcf2:	1b5b      	subs	r3, r3, r5
 800bcf4:	d418      	bmi.n	800bd28 <_malloc_r+0x8c>
 800bcf6:	2b0b      	cmp	r3, #11
 800bcf8:	d90f      	bls.n	800bd1a <_malloc_r+0x7e>
 800bcfa:	600b      	str	r3, [r1, #0]
 800bcfc:	50cd      	str	r5, [r1, r3]
 800bcfe:	18cc      	adds	r4, r1, r3
 800bd00:	4630      	mov	r0, r6
 800bd02:	f000 f87a 	bl	800bdfa <__malloc_unlock>
 800bd06:	f104 000b 	add.w	r0, r4, #11
 800bd0a:	1d23      	adds	r3, r4, #4
 800bd0c:	f020 0007 	bic.w	r0, r0, #7
 800bd10:	1ac3      	subs	r3, r0, r3
 800bd12:	d0d3      	beq.n	800bcbc <_malloc_r+0x20>
 800bd14:	425a      	negs	r2, r3
 800bd16:	50e2      	str	r2, [r4, r3]
 800bd18:	e7d0      	b.n	800bcbc <_malloc_r+0x20>
 800bd1a:	428c      	cmp	r4, r1
 800bd1c:	684b      	ldr	r3, [r1, #4]
 800bd1e:	bf16      	itet	ne
 800bd20:	6063      	strne	r3, [r4, #4]
 800bd22:	6013      	streq	r3, [r2, #0]
 800bd24:	460c      	movne	r4, r1
 800bd26:	e7eb      	b.n	800bd00 <_malloc_r+0x64>
 800bd28:	460c      	mov	r4, r1
 800bd2a:	6849      	ldr	r1, [r1, #4]
 800bd2c:	e7cc      	b.n	800bcc8 <_malloc_r+0x2c>
 800bd2e:	1cc4      	adds	r4, r0, #3
 800bd30:	f024 0403 	bic.w	r4, r4, #3
 800bd34:	42a0      	cmp	r0, r4
 800bd36:	d005      	beq.n	800bd44 <_malloc_r+0xa8>
 800bd38:	1a21      	subs	r1, r4, r0
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f808 	bl	800bd50 <_sbrk_r>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d0cf      	beq.n	800bce4 <_malloc_r+0x48>
 800bd44:	6025      	str	r5, [r4, #0]
 800bd46:	e7db      	b.n	800bd00 <_malloc_r+0x64>
 800bd48:	20000224 	.word	0x20000224
 800bd4c:	20000228 	.word	0x20000228

0800bd50 <_sbrk_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4c06      	ldr	r4, [pc, #24]	; (800bd6c <_sbrk_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4605      	mov	r5, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	f7ff fd4a 	bl	800b7f4 <_sbrk>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_sbrk_r+0x1a>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_sbrk_r+0x1a>
 800bd68:	602b      	str	r3, [r5, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20000698 	.word	0x20000698

0800bd70 <_raise_r>:
 800bd70:	291f      	cmp	r1, #31
 800bd72:	b538      	push	{r3, r4, r5, lr}
 800bd74:	4604      	mov	r4, r0
 800bd76:	460d      	mov	r5, r1
 800bd78:	d904      	bls.n	800bd84 <_raise_r+0x14>
 800bd7a:	2316      	movs	r3, #22
 800bd7c:	6003      	str	r3, [r0, #0]
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	bd38      	pop	{r3, r4, r5, pc}
 800bd84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd86:	b112      	cbz	r2, 800bd8e <_raise_r+0x1e>
 800bd88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd8c:	b94b      	cbnz	r3, 800bda2 <_raise_r+0x32>
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 f830 	bl	800bdf4 <_getpid_r>
 800bd94:	462a      	mov	r2, r5
 800bd96:	4601      	mov	r1, r0
 800bd98:	4620      	mov	r0, r4
 800bd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd9e:	f000 b817 	b.w	800bdd0 <_kill_r>
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d00a      	beq.n	800bdbc <_raise_r+0x4c>
 800bda6:	1c59      	adds	r1, r3, #1
 800bda8:	d103      	bne.n	800bdb2 <_raise_r+0x42>
 800bdaa:	2316      	movs	r3, #22
 800bdac:	6003      	str	r3, [r0, #0]
 800bdae:	2001      	movs	r0, #1
 800bdb0:	e7e7      	b.n	800bd82 <_raise_r+0x12>
 800bdb2:	2400      	movs	r4, #0
 800bdb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdb8:	4628      	mov	r0, r5
 800bdba:	4798      	blx	r3
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	e7e0      	b.n	800bd82 <_raise_r+0x12>

0800bdc0 <raise>:
 800bdc0:	4b02      	ldr	r3, [pc, #8]	; (800bdcc <raise+0xc>)
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	f7ff bfd3 	b.w	800bd70 <_raise_r>
 800bdca:	bf00      	nop
 800bdcc:	20000010 	.word	0x20000010

0800bdd0 <_kill_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4c07      	ldr	r4, [pc, #28]	; (800bdf0 <_kill_r+0x20>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	4611      	mov	r1, r2
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	f7ff fcef 	bl	800b7c0 <_kill>
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	d102      	bne.n	800bdec <_kill_r+0x1c>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	b103      	cbz	r3, 800bdec <_kill_r+0x1c>
 800bdea:	602b      	str	r3, [r5, #0]
 800bdec:	bd38      	pop	{r3, r4, r5, pc}
 800bdee:	bf00      	nop
 800bdf0:	20000698 	.word	0x20000698

0800bdf4 <_getpid_r>:
 800bdf4:	f7ff bcdc 	b.w	800b7b0 <_getpid>

0800bdf8 <__malloc_lock>:
 800bdf8:	4770      	bx	lr

0800bdfa <__malloc_unlock>:
 800bdfa:	4770      	bx	lr

0800bdfc <_init>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	bf00      	nop
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr

0800be08 <_fini>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr


BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a694  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac18  0800ac18  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac18  0800ac18  0001ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac20  0800ac20  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ac20  0800ac20  0001ac20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac28  0800ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800ac2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  2000008c  0800acb8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800acb8  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046b9e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495e  00000000  00000000  00066c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0006b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  0006cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a064  00000000  00000000  0006e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e1f  00000000  00000000  0009822c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6a6  00000000  00000000  000b104b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ae6f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  001ae744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a840 	.word	0x0800a840

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	0800a840 	.word	0x0800a840

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <HAL_Init+0x40>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <HAL_Init+0x40>)
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x40>)
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 ff2b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f009 fcca 	bl	8009ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ff43 	bl	80013ea <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 ff0b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000020 	.word	0x20000020
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000228 	.word	0x20000228

080005b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e0ed      	b.n	80007a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f009 fc9e 	bl	8009f18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f022 0202 	bic.w	r2, r2, #2
 80005ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005ec:	f7ff ffd8 	bl	80005a0 <HAL_GetTick>
 80005f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005f2:	e012      	b.n	800061a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80005f4:	f7ff ffd4 	bl	80005a0 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d90b      	bls.n	800061a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2205      	movs	r2, #5
 8000612:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e0c5      	b.n	80007a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f003 0302 	and.w	r3, r3, #2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e5      	bne.n	80005f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f042 0201 	orr.w	r2, r2, #1
 8000636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000638:	f7ff ffb2 	bl	80005a0 <HAL_GetTick>
 800063c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800063e:	e012      	b.n	8000666 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000640:	f7ff ffae 	bl	80005a0 <HAL_GetTick>
 8000644:	4602      	mov	r2, r0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d90b      	bls.n	8000666 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2205      	movs	r2, #5
 800065e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e09f      	b.n	80007a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0e5      	beq.n	8000640 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7e1b      	ldrb	r3, [r3, #24]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d108      	bne.n	800068e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e007      	b.n	800069e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800069c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7e5b      	ldrb	r3, [r3, #25]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d108      	bne.n	80006b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e007      	b.n	80006c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7e9b      	ldrb	r3, [r3, #26]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d108      	bne.n	80006e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f042 0220 	orr.w	r2, r2, #32
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e007      	b.n	80006f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f022 0220 	bic.w	r2, r2, #32
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7edb      	ldrb	r3, [r3, #27]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d108      	bne.n	800070c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 0210 	bic.w	r2, r2, #16
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e007      	b.n	800071c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f042 0210 	orr.w	r2, r2, #16
 800071a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7f1b      	ldrb	r3, [r3, #28]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d108      	bne.n	8000736 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f042 0208 	orr.w	r2, r2, #8
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e007      	b.n	8000746 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0208 	bic.w	r2, r2, #8
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7f5b      	ldrb	r3, [r3, #29]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d108      	bne.n	8000760 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f042 0204 	orr.w	r2, r2, #4
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e007      	b.n	8000770 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0204 	bic.w	r2, r2, #4
 800076e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	431a      	orrs	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	ea42 0103 	orr.w	r1, r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	430a      	orrs	r2, r1
 8000794:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80007c8:	7cfb      	ldrb	r3, [r7, #19]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d003      	beq.n	80007d6 <HAL_CAN_ConfigFilter+0x26>
 80007ce:	7cfb      	ldrb	r3, [r7, #19]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	f040 80be 	bne.w	8000952 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80007d6:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_CAN_ConfigFilter+0x1bc>)
 80007d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007e0:	f043 0201 	orr.w	r2, r3, #1
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	431a      	orrs	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	2201      	movs	r2, #1
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	43db      	mvns	r3, r3
 8000828:	401a      	ands	r2, r3
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d123      	bne.n	8000880 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	43db      	mvns	r3, r3
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800085a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	3248      	adds	r2, #72	; 0x48
 8000860:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000874:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000876:	6979      	ldr	r1, [r7, #20]
 8000878:	3348      	adds	r3, #72	; 0x48
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d122      	bne.n	80008ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	431a      	orrs	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3248      	adds	r2, #72	; 0x48
 80008ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008c4:	6979      	ldr	r1, [r7, #20]
 80008c6:	3348      	adds	r3, #72	; 0x48
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d109      	bne.n	80008ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	43db      	mvns	r3, r3
 80008e0:	401a      	ands	r2, r3
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80008e8:	e007      	b.n	80008fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	431a      	orrs	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d109      	bne.n	8000916 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	43db      	mvns	r3, r3
 800090c:	401a      	ands	r2, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000914:	e007      	b.n	8000926 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	431a      	orrs	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d107      	bne.n	800093e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	431a      	orrs	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000944:	f023 0201 	bic.w	r2, r3, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e006      	b.n	8000960 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000956:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
  }
}
 8000960:	4618      	mov	r0, r3
 8000962:	371c      	adds	r7, #28
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40006400 	.word	0x40006400

08000970 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000984:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800098e:	7ffb      	ldrb	r3, [r7, #31]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d003      	beq.n	800099c <HAL_CAN_AddTxMessage+0x2c>
 8000994:	7ffb      	ldrb	r3, [r7, #31]
 8000996:	2b02      	cmp	r3, #2
 8000998:	f040 80b8 	bne.w	8000b0c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10a      	bne.n	80009bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 80a0 	beq.w	8000afc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	0e1b      	lsrs	r3, r3, #24
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d907      	bls.n	80009dc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e09e      	b.n	8000b1a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80009dc:	2201      	movs	r2, #1
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	409a      	lsls	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10d      	bne.n	8000a0a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009f8:	68f9      	ldr	r1, [r7, #12]
 80009fa:	6809      	ldr	r1, [r1, #0]
 80009fc:	431a      	orrs	r2, r3
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3318      	adds	r3, #24
 8000a02:	011b      	lsls	r3, r3, #4
 8000a04:	440b      	add	r3, r1
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	e00f      	b.n	8000a2a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a1a:	68f9      	ldr	r1, [r7, #12]
 8000a1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3318      	adds	r3, #24
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	440b      	add	r3, r1
 8000a28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3318      	adds	r3, #24
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	440b      	add	r3, r1
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	7d1b      	ldrb	r3, [r3, #20]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d111      	bne.n	8000a6a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3318      	adds	r3, #24
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	4413      	add	r3, r2
 8000a52:	3304      	adds	r3, #4
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	6811      	ldr	r1, [r2, #0]
 8000a5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3318      	adds	r3, #24
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	440b      	add	r3, r1
 8000a66:	3304      	adds	r3, #4
 8000a68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3307      	adds	r3, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	061a      	lsls	r2, r3, #24
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3306      	adds	r3, #6
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3305      	adds	r3, #5
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	4313      	orrs	r3, r2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	3204      	adds	r2, #4
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	6811      	ldr	r1, [r2, #0]
 8000a92:	ea43 0200 	orr.w	r2, r3, r0
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000aa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3303      	adds	r3, #3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	061a      	lsls	r2, r3, #24
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3302      	adds	r3, #2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	4313      	orrs	r3, r2
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	6811      	ldr	r1, [r2, #0]
 8000ac8:	ea43 0200 	orr.w	r2, r3, r0
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	440b      	add	r3, r1
 8000ad2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ad6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3318      	adds	r3, #24
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	4413      	add	r3, r2
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	6811      	ldr	r1, [r2, #0]
 8000aea:	f043 0201 	orr.w	r2, r3, #1
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3318      	adds	r3, #24
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	440b      	add	r3, r1
 8000af6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	e00e      	b.n	8000b1a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e006      	b.n	8000b1a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
  }
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b26:	b480      	push	{r7}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d003      	beq.n	8000b4a <HAL_CAN_GetRxMessage+0x24>
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	f040 80f3 	bne.w	8000d30 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10e      	bne.n	8000b6e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d116      	bne.n	8000b8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e0e7      	b.n	8000d3e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d107      	bne.n	8000b8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e0d8      	b.n	8000d3e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	331b      	adds	r3, #27
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	4413      	add	r3, r2
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0204 	and.w	r2, r3, #4
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	331b      	adds	r3, #27
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	0d5b      	lsrs	r3, r3, #21
 8000bba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e00b      	b.n	8000bdc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	331b      	adds	r3, #27
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4413      	add	r3, r2
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	331b      	adds	r3, #27
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0202 	and.w	r2, r3, #2
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	331b      	adds	r3, #27
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 020f 	and.w	r2, r3, #15
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	331b      	adds	r3, #27
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4413      	add	r3, r2
 8000c16:	3304      	adds	r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	331b      	adds	r3, #27
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	4413      	add	r3, r2
 8000c2e:	3304      	adds	r3, #4
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	4413      	add	r3, r2
 8000c44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	4413      	add	r3, r2
 8000c5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0a1a      	lsrs	r2, r3, #8
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	4413      	add	r3, r2
 8000c74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	0c1a      	lsrs	r2, r3, #16
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	3302      	adds	r3, #2
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	0e1a      	lsrs	r2, r3, #24
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3303      	adds	r3, #3
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	0a1a      	lsrs	r2, r3, #8
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3305      	adds	r3, #5
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0c1a      	lsrs	r2, r3, #16
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	0e1a      	lsrs	r2, r3, #24
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	3307      	adds	r3, #7
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d108      	bne.n	8000d1c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f042 0220 	orr.w	r2, r2, #32
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	e007      	b.n	8000d2c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	691a      	ldr	r2, [r3, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0220 	orr.w	r2, r2, #32
 8000d2a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e006      	b.n	8000d3e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
  }
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d002      	beq.n	8000d68 <HAL_CAN_ActivateNotification+0x1e>
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d109      	bne.n	8000d7c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6959      	ldr	r1, [r3, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e006      	b.n	8000d8a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
  }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b08a      	sub	sp, #40	; 0x28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d07c      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d023      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2201      	movs	r2, #1
 8000dec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f983 	bl	8001104 <HAL_CAN_TxMailbox0CompleteCallback>
 8000dfe:	e016      	b.n	8000e2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d004      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	e00c      	b.n	8000e2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
 8000e26:	e002      	b.n	8000e2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f989 	bl	8001140 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d024      	beq.n	8000e82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f963 	bl	8001118 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e52:	e016      	b.n	8000e82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
 8000e66:	e00c      	b.n	8000e82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	e002      	b.n	8000e82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f969 	bl	8001154 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d024      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f943 	bl	800112c <HAL_CAN_TxMailbox2CompleteCallback>
 8000ea6:	e016      	b.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eba:	e00c      	b.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d004      	beq.n	8000ed0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e002      	b.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f949 	bl	8001168 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00c      	beq.n	8000efa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00b      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2208      	movs	r2, #8
 8000f14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f930 	bl	800117c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f007 ff6d 	bl	8008e14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00c      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2208      	movs	r2, #8
 8000f78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f908 	bl	8001190 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f007 ffb7 	bl	8008f0c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8f2 	bl	80011a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2208      	movs	r2, #8
 8000fda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f8eb 	bl	80011b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d07b      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d072      	beq.n	80010dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001050:	2b00      	cmp	r3, #0
 8001052:	d043      	beq.n	80010dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d03e      	beq.n	80010dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001064:	2b60      	cmp	r3, #96	; 0x60
 8001066:	d02b      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
 8001068:	2b60      	cmp	r3, #96	; 0x60
 800106a:	d82e      	bhi.n	80010ca <HAL_CAN_IRQHandler+0x334>
 800106c:	2b50      	cmp	r3, #80	; 0x50
 800106e:	d022      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x320>
 8001070:	2b50      	cmp	r3, #80	; 0x50
 8001072:	d82a      	bhi.n	80010ca <HAL_CAN_IRQHandler+0x334>
 8001074:	2b40      	cmp	r3, #64	; 0x40
 8001076:	d019      	beq.n	80010ac <HAL_CAN_IRQHandler+0x316>
 8001078:	2b40      	cmp	r3, #64	; 0x40
 800107a:	d826      	bhi.n	80010ca <HAL_CAN_IRQHandler+0x334>
 800107c:	2b30      	cmp	r3, #48	; 0x30
 800107e:	d010      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x30c>
 8001080:	2b30      	cmp	r3, #48	; 0x30
 8001082:	d822      	bhi.n	80010ca <HAL_CAN_IRQHandler+0x334>
 8001084:	2b10      	cmp	r3, #16
 8001086:	d002      	beq.n	800108e <HAL_CAN_IRQHandler+0x2f8>
 8001088:	2b20      	cmp	r3, #32
 800108a:	d005      	beq.n	8001098 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800108c:	e01d      	b.n	80010ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001096:	e019      	b.n	80010cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010a0:	e014      	b.n	80010cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	f043 0320 	orr.w	r3, r3, #32
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010aa:	e00f      	b.n	80010cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010b4:	e00a      	b.n	80010cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010be:	e005      	b.n	80010cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010c8:	e000      	b.n	80010cc <HAL_CAN_IRQHandler+0x336>
            break;
 80010ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	699a      	ldr	r2, [r3, #24]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2204      	movs	r2, #4
 80010e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f868 	bl	80011cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e165      	b.n	80016ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8154 	bne.w	80016e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d00b      	beq.n	800145e <HAL_GPIO_Init+0x5a>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001452:	2b11      	cmp	r3, #17
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b12      	cmp	r3, #18
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0xfc>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b12      	cmp	r3, #18
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80ae 	beq.w	80016e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_GPIO_Init+0x300>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_GPIO_Init+0x304>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_GPIO_Init+0x308>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_GPIO_Init+0x30c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_GPIO_Init+0x310>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_GPIO_Init+0x314>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_GPIO_Init+0x318>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x20a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <HAL_GPIO_Init+0x31c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x206>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x320>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x202>
 8001602:	2306      	movs	r3, #6
 8001604:	e00c      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001606:	2307      	movs	r3, #7
 8001608:	e00a      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160a:	2305      	movs	r3, #5
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_GPIO_Init+0x304>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_GPIO_Init+0x324>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168c:	4a26      	ldr	r2, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x324>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f ae96 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40021400 	.word	0x40021400
 8001724:	40021800 	.word	0x40021800
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e001      	b.n	800174e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	401a      	ands	r2, r3
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d104      	bne.n	80017b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0cc      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d90c      	bls.n	8001800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b8      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d020      	beq.n	800184e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	494d      	ldr	r1, [pc, #308]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d044      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d119      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d003      	beq.n	8001882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187e:	2b03      	cmp	r3, #3
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e067      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4934      	ldr	r1, [pc, #208]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b4:	f7fe fe74 	bl	80005a0 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7fe fe70 	bl	80005a0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e04f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e032      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4916      	ldr	r1, [pc, #88]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194a:	f000 fb4b 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 800194e:	4602      	mov	r2, r0
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	5ccb      	ldrb	r3, [r1, r3]
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1c8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fde8 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00
 8001980:	40023800 	.word	0x40023800
 8001984:	0800ac04 	.word	0x0800ac04
 8001988:	20000020 	.word	0x20000020
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019c8:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d6:	496c      	ldr	r1, [pc, #432]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019e6:	2301      	movs	r3, #1
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	4960      	ldr	r1, [pc, #384]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d017      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a24:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4955      	ldr	r1, [pc, #340]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a42:	d101      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a44:	2301      	movs	r3, #1
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	4946      	ldr	r1, [pc, #280]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 808a 	beq.w	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a33      	ldr	r2, [pc, #204]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ac6:	f7fe fd6b 	bl	80005a0 <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7fe fd67 	bl	80005a0 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e278      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02f      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d028      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b12:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d114      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fd35 	bl	80005a0 <HAL_GetTick>
 8001b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7fe fd31 	bl	80005a0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e240      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b68:	d114      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b7e:	4902      	ldr	r1, [pc, #8]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
 8001b84:	e00c      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42470e40 	.word	0x42470e40
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a49      	ldr	r2, [pc, #292]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b9e:	6093      	str	r3, [r2, #8]
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	4944      	ldr	r1, [pc, #272]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bc6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	4937      	ldr	r1, [pc, #220]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bf6:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	492e      	ldr	r1, [pc, #184]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d011      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	4926      	ldr	r1, [pc, #152]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c36:	d101      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d011      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c78:	4911      	ldr	r1, [pc, #68]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c88:	d101      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9c:	f040 80ff 	bne.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ca6:	f7fe fc7b 	bl	80005a0 <HAL_GetTick>
 8001caa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cac:	e00e      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cae:	f7fe fc77 	bl	80005a0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d907      	bls.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e188      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	424711e0 	.word	0x424711e0
 8001cc8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ea      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d028      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d124      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d18:	0e1b      	lsrs	r3, r3, #24
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	3b01      	subs	r3, #1
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	071b      	lsls	r3, r3, #28
 8001d42:	4961      	ldr	r1, [pc, #388]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5e:	d00a      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d035      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d74:	d130      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d88:	4b4f      	ldr	r3, [pc, #316]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d8e:	0f1b      	lsrs	r3, r3, #28
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	431a      	orrs	r2, r3
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	071b      	lsls	r3, r3, #28
 8001db8:	4943      	ldr	r1, [pc, #268]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc6:	f023 021f 	bic.w	r2, r3, #31
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	493d      	ldr	r1, [pc, #244]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d029      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dec:	d124      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e00:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e06:	0f1b      	lsrs	r3, r3, #28
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	019b      	lsls	r3, r3, #6
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	071b      	lsls	r3, r3, #28
 8001e30:	4925      	ldr	r1, [pc, #148]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d016      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	019b      	lsls	r3, r3, #6
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	3b01      	subs	r3, #1
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	071b      	lsls	r3, r3, #28
 8001e6a:	4917      	ldr	r1, [pc, #92]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fb92 	bl	80005a0 <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e80:	f7fe fb8e 	bl	80005a0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e09f      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	f040 8095 	bne.w	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eac:	f7fe fb78 	bl	80005a0 <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001eb4:	f7fe fb74 	bl	80005a0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d908      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e085      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	42470068 	.word	0x42470068
 8001ed0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ed4:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee0:	d0e8      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02b      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d127      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699a      	ldr	r2, [r3, #24]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	431a      	orrs	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	061b      	lsls	r3, r3, #24
 8001f38:	4928      	ldr	r1, [pc, #160]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f40:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	4922      	ldr	r1, [pc, #136]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01d      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f6e:	d118      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	0e1b      	lsrs	r3, r3, #24
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	3b01      	subs	r3, #1
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fafa 	bl	80005a0 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fb0:	f7fe faf6 	bl	80005a0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e007      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fce:	d1ef      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3730      	adds	r7, #48	; 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470070 	.word	0x42470070

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe8:	b087      	sub	sp, #28
 8001fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fec:	2600      	movs	r6, #0
 8001fee:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001ff8:	2600      	movs	r6, #0
 8001ffa:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ffc:	2600      	movs	r6, #0
 8001ffe:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002000:	4ea3      	ldr	r6, [pc, #652]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002002:	68b6      	ldr	r6, [r6, #8]
 8002004:	f006 060c 	and.w	r6, r6, #12
 8002008:	2e0c      	cmp	r6, #12
 800200a:	f200 8137 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x298>
 800200e:	f20f 0c08 	addw	ip, pc, #8
 8002012:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002016:	bf00      	nop
 8002018:	0800204d 	.word	0x0800204d
 800201c:	0800227d 	.word	0x0800227d
 8002020:	0800227d 	.word	0x0800227d
 8002024:	0800227d 	.word	0x0800227d
 8002028:	08002053 	.word	0x08002053
 800202c:	0800227d 	.word	0x0800227d
 8002030:	0800227d 	.word	0x0800227d
 8002034:	0800227d 	.word	0x0800227d
 8002038:	08002059 	.word	0x08002059
 800203c:	0800227d 	.word	0x0800227d
 8002040:	0800227d 	.word	0x0800227d
 8002044:	0800227d 	.word	0x0800227d
 8002048:	0800216f 	.word	0x0800216f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b91      	ldr	r3, [pc, #580]	; (8002294 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800204e:	613b      	str	r3, [r7, #16]
       break;
 8002050:	e117      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002052:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002054:	613b      	str	r3, [r7, #16]
      break;
 8002056:	e114      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002060:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	461a      	mov	r2, r3
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800207e:	f04f 0500 	mov.w	r5, #0
 8002082:	ea02 0004 	and.w	r0, r2, r4
 8002086:	ea03 0105 	and.w	r1, r3, r5
 800208a:	4b83      	ldr	r3, [pc, #524]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800208c:	fb03 f201 	mul.w	r2, r3, r1
 8002090:	2300      	movs	r3, #0
 8002092:	fb03 f300 	mul.w	r3, r3, r0
 8002096:	4413      	add	r3, r2
 8002098:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800209a:	fba0 0102 	umull	r0, r1, r0, r2
 800209e:	440b      	add	r3, r1
 80020a0:	4619      	mov	r1, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f7fe f8ab 	bl	8000204 <__aeabi_uldivmod>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4613      	mov	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e04c      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	461a      	mov	r2, r3
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	ea02 0800 	and.w	r8, r2, r0
 80020d0:	ea03 0901 	and.w	r9, r3, r1
 80020d4:	4640      	mov	r0, r8
 80020d6:	4649      	mov	r1, r9
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	014b      	lsls	r3, r1, #5
 80020e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020e6:	0142      	lsls	r2, r0, #5
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	ebb0 0008 	subs.w	r0, r0, r8
 80020f0:	eb61 0109 	sbc.w	r1, r1, r9
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	018b      	lsls	r3, r1, #6
 80020fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002102:	0182      	lsls	r2, r0, #6
 8002104:	1a12      	subs	r2, r2, r0
 8002106:	eb63 0301 	sbc.w	r3, r3, r1
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	00d9      	lsls	r1, r3, #3
 8002114:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002118:	00d0      	lsls	r0, r2, #3
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	eb12 0208 	adds.w	r2, r2, r8
 8002122:	eb43 0309 	adc.w	r3, r3, r9
 8002126:	f04f 0000 	mov.w	r0, #0
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	0299      	lsls	r1, r3, #10
 8002130:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002134:	0290      	lsls	r0, r2, #10
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	461a      	mov	r2, r3
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	f7fe f85d 	bl	8000204 <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4613      	mov	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	3301      	adds	r3, #1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	613b      	str	r3, [r7, #16]
      break;
 800216c:	e089      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800216e:	4948      	ldr	r1, [pc, #288]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002170:	6849      	ldr	r1, [r1, #4]
 8002172:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002176:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002178:	4945      	ldr	r1, [pc, #276]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800217a:	6849      	ldr	r1, [r1, #4]
 800217c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002180:	2900      	cmp	r1, #0
 8002182:	d024      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002184:	4942      	ldr	r1, [pc, #264]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002186:	6849      	ldr	r1, [r1, #4]
 8002188:	0989      	lsrs	r1, r1, #6
 800218a:	4608      	mov	r0, r1
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002194:	f04f 0500 	mov.w	r5, #0
 8002198:	ea00 0204 	and.w	r2, r0, r4
 800219c:	ea01 0305 	and.w	r3, r1, r5
 80021a0:	493d      	ldr	r1, [pc, #244]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021a2:	fb01 f003 	mul.w	r0, r1, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	fb01 f102 	mul.w	r1, r1, r2
 80021ac:	1844      	adds	r4, r0, r1
 80021ae:	493a      	ldr	r1, [pc, #232]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021b0:	fba2 0101 	umull	r0, r1, r2, r1
 80021b4:	1863      	adds	r3, r4, r1
 80021b6:	4619      	mov	r1, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	f7fe f820 	bl	8000204 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e04a      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	461a      	mov	r2, r3
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	ea02 0400 	and.w	r4, r2, r0
 80021e6:	ea03 0501 	and.w	r5, r3, r1
 80021ea:	4620      	mov	r0, r4
 80021ec:	4629      	mov	r1, r5
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	014b      	lsls	r3, r1, #5
 80021f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021fc:	0142      	lsls	r2, r0, #5
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	1b00      	subs	r0, r0, r4
 8002204:	eb61 0105 	sbc.w	r1, r1, r5
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	018b      	lsls	r3, r1, #6
 8002212:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002216:	0182      	lsls	r2, r0, #6
 8002218:	1a12      	subs	r2, r2, r0
 800221a:	eb63 0301 	sbc.w	r3, r3, r1
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	00d9      	lsls	r1, r3, #3
 8002228:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800222c:	00d0      	lsls	r0, r2, #3
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	1912      	adds	r2, r2, r4
 8002234:	eb45 0303 	adc.w	r3, r5, r3
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	0299      	lsls	r1, r3, #10
 8002242:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002246:	0290      	lsls	r0, r2, #10
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	f7fd ffd4 	bl	8000204 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4613      	mov	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0f1b      	lsrs	r3, r3, #28
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	613b      	str	r3, [r7, #16]
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800227e:	613b      	str	r3, [r7, #16]
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	693b      	ldr	r3, [r7, #16]
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	017d7840 	.word	0x017d7840

0800229c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8083 	beq.w	80023bc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b6:	4b95      	ldr	r3, [pc, #596]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c2:	4b92      	ldr	r3, [pc, #584]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ce:	4b8f      	ldr	r3, [pc, #572]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022da:	d00c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022dc:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d112      	bne.n	800230e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e8:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f4:	d10b      	bne.n	800230e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	4b85      	ldr	r3, [pc, #532]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d05b      	beq.n	80023ba <HAL_RCC_OscConfig+0x11e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d157      	bne.n	80023ba <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e216      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x8a>
 8002318:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7b      	ldr	r2, [pc, #492]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e01d      	b.n	8002362 <HAL_RCC_OscConfig+0xc6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232e:	d10c      	bne.n	800234a <HAL_RCC_OscConfig+0xae>
 8002330:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a75      	ldr	r2, [pc, #468]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a72      	ldr	r2, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e00b      	b.n	8002362 <HAL_RCC_OscConfig+0xc6>
 800234a:	4b70      	ldr	r3, [pc, #448]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6f      	ldr	r2, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6c      	ldr	r2, [pc, #432]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800235c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d013      	beq.n	8002392 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe f919 	bl	80005a0 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002372:	f7fe f915 	bl	80005a0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1db      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0xd6>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe f905 	bl	80005a0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239a:	f7fe f901 	bl	80005a0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1c7      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ac:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0xfe>
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d06f      	beq.n	80024a8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d017      	beq.n	8002404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d4:	4b4d      	ldr	r3, [pc, #308]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023e0:	4b4a      	ldr	r3, [pc, #296]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ec:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d11c      	bne.n	8002432 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f8:	4b44      	ldr	r3, [pc, #272]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d116      	bne.n	8002432 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002404:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_OscConfig+0x180>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e18f      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4938      	ldr	r1, [pc, #224]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002430:	e03a      	b.n	80024a8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <HAL_RCC_OscConfig+0x274>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe f8ae 	bl	80005a0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe f8aa 	bl	80005a0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e170      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4925      	ldr	r1, [pc, #148]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
 800247a:	e015      	b.n	80024a8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x274>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe f88d 	bl	80005a0 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe f889 	bl	80005a0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e14f      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d037      	beq.n	8002524 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d016      	beq.n	80024ea <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe f86d 	bl	80005a0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe f869 	bl	80005a0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e12f      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x270>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x22e>
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe f856 	bl	80005a0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f6:	e00f      	b.n	8002518 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f8:	f7fe f852 	bl	80005a0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d908      	bls.n	8002518 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e118      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	42470000 	.word	0x42470000
 8002514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e9      	bne.n	80024f8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8097 	beq.w	8002660 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b83      	ldr	r3, [pc, #524]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a7e      	ldr	r2, [pc, #504]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b7c      	ldr	r3, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b79      	ldr	r3, [pc, #484]	; (8002748 <HAL_RCC_OscConfig+0x4ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe f811 	bl	80005a0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe f80d 	bl	80005a0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0d3      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x31a>
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e01c      	b.n	80025f0 <HAL_RCC_OscConfig+0x354>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x33c>
 80025be:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0x354>
 80025d8:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a59      	ldr	r2, [pc, #356]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4b57      	ldr	r3, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a56      	ldr	r2, [pc, #344]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fd ffd2 	bl	80005a0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fd ffce 	bl	80005a0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e092      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ee      	beq.n	8002600 <HAL_RCC_OscConfig+0x364>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fd ffbc 	bl	80005a0 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fd ffb8 	bl	80005a0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e07c      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	4b40      	ldr	r3, [pc, #256]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ee      	bne.n	800262c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a3a      	ldr	r2, [pc, #232]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d068      	beq.n	800273a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d060      	beq.n	8002736 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d145      	bne.n	8002708 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x4b0>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fd ff8d 	bl	80005a0 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7fd ff89 	bl	80005a0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e04f      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	019b      	lsls	r3, r3, #6
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	061b      	lsls	r3, r3, #24
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	071b      	lsls	r3, r3, #28
 80026d4:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <HAL_RCC_OscConfig+0x4b0>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fd ff5e 	bl	80005a0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fd ff5a 	bl	80005a0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e020      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x44c>
 8002706:	e018      	b.n	800273a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x4b0>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fd ff47 	bl	80005a0 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7fd ff43 	bl	80005a0 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e009      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x4a8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x47a>
 8002734:	e001      	b.n	800273a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060

08002750 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    /* Check the SPI handle allocation */
    if (hspi == NULL) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_SPI_Init+0x12>
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e056      	b.n	8002810 <HAL_SPI_Init+0xc0>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
        assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    }
#else
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

    if (hspi->State == HAL_SPI_STATE_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_SPI_Init+0x32>
    {
        /* Allocate lock resource and initialize it */
        hspi->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        hspi->MspInitCallback(hspi);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_SPI_MspInit(hspi);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f007 fc7d 	bl	800a07c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }

    hspi->State = HAL_SPI_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Disable the selected SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002798:	601a      	str	r2, [r3, #0]

    /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
    /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
    WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
            hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
            hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

    /* Configure : NSS management, TI Mode */
    WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	f003 0104 	and.w	r1, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
    }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
    /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
    CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
    hspi->State     = HAL_SPI_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_SPI_Transmit>:
 * @param  pData pointer to data buffer
 * @param  Size amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * pData, uint16_t Size, uint32_t Timeout) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	80fb      	strh	r3, [r7, #6]
    uint32_t tickstart;
    HAL_StatusTypeDef errorcode = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	77fb      	strb	r3, [r7, #31]

    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_SPI_Transmit+0x22>
 8002836:	2302      	movs	r3, #2
 8002838:	e11e      	b.n	8002a78 <HAL_SPI_Transmit+0x260>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002842:	f7fd fead 	bl	80005a0 <HAL_GetTick>
 8002846:	61b8      	str	r0, [r7, #24]
    initial_TxXferCount = Size;
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	82fb      	strh	r3, [r7, #22]

    if (hspi->State != HAL_SPI_STATE_READY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d002      	beq.n	800285e <HAL_SPI_Transmit+0x46>
    {
        errorcode = HAL_BUSY;
 8002858:	2302      	movs	r3, #2
 800285a:	77fb      	strb	r3, [r7, #31]
        goto error;
 800285c:	e103      	b.n	8002a66 <HAL_SPI_Transmit+0x24e>
    }

    if ((pData == NULL) || (Size == 0U))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_Transmit+0x52>
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <HAL_SPI_Transmit+0x58>
    {
        errorcode = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	77fb      	strb	r3, [r7, #31]
        goto error;
 800286e:	e0fa      	b.n	8002a66 <HAL_SPI_Transmit+0x24e>
    }

    /* Set the transaction information */
    hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2203      	movs	r2, #3
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    hspi->pTxBuffPtr  = (uint8_t *)pData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	86da      	strh	r2, [r3, #54]	; 0x36

    /*Init field not used in handle to zero */
    hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR       = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxISR       = NULL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Configure communication direction : 1Line */
    if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b6:	d107      	bne.n	80028c8 <HAL_SPI_Transmit+0xb0>
    {
        SPI_1LINE_TX(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	601a      	str	r2, [r3, #0]
        SPI_RESET_CRC(hspi);
    }
#endif /* USE_SPI_CRC */

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d007      	beq.n	80028e6 <HAL_SPI_Transmit+0xce>
    {
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	601a      	str	r2, [r3, #0]
    }

    /* Transmit data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ee:	d14b      	bne.n	8002988 <HAL_SPI_Transmit+0x170>
    {
        if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_SPI_Transmit+0xe6>
 80028f8:	8afb      	ldrh	r3, [r7, #22]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d13e      	bne.n	800297c <HAL_SPI_Transmit+0x164>
        {
            hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	881a      	ldrh	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
            hspi->pTxBuffPtr += sizeof(uint16_t);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	1c9a      	adds	r2, r3, #2
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
            hspi->TxXferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Transmit data in 16 Bit mode */
        while (hspi->TxXferCount > 0U)
 8002922:	e02b      	b.n	800297c <HAL_SPI_Transmit+0x164>
        {
            /* Wait until TXE flag is set to send data */
            if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d112      	bne.n	8002958 <HAL_SPI_Transmit+0x140>
            {
                hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60da      	str	r2, [r3, #12]
                hspi->pTxBuffPtr += sizeof(uint16_t);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
                hspi->TxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	86da      	strh	r2, [r3, #54]	; 0x36
 8002956:	e011      	b.n	800297c <HAL_SPI_Transmit+0x164>
            }
            else
            {
                /* Timeout management */
                if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002958:	f7fd fe22 	bl	80005a0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d803      	bhi.n	8002970 <HAL_SPI_Transmit+0x158>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d102      	bne.n	8002976 <HAL_SPI_Transmit+0x15e>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <HAL_SPI_Transmit+0x164>
                {
                    errorcode = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	77fb      	strb	r3, [r7, #31]
                    goto error;
 800297a:	e074      	b.n	8002a66 <HAL_SPI_Transmit+0x24e>
        while (hspi->TxXferCount > 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ce      	bne.n	8002924 <HAL_SPI_Transmit+0x10c>
 8002986:	e04c      	b.n	8002a22 <HAL_SPI_Transmit+0x20a>
        }
    }
    /* Transmit data in 8 Bit mode */
    else
    {
        if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_SPI_Transmit+0x17e>
 8002990:	8afb      	ldrh	r3, [r7, #22]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d140      	bne.n	8002a18 <HAL_SPI_Transmit+0x200>
        {
            *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	701a      	strb	r2, [r3, #0]
            hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
            hspi->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        while (hspi->TxXferCount > 0U)
 80029bc:	e02c      	b.n	8002a18 <HAL_SPI_Transmit+0x200>
        {
            /* Wait until TXE flag is set to send data */
            if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d113      	bne.n	80029f4 <HAL_SPI_Transmit+0x1dc>
            {
                *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
                hspi->pTxBuffPtr += sizeof(uint8_t);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
                hspi->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f2:	e011      	b.n	8002a18 <HAL_SPI_Transmit+0x200>
            }
            else
            {
                /* Timeout management */
                if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f4:	f7fd fdd4 	bl	80005a0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d803      	bhi.n	8002a0c <HAL_SPI_Transmit+0x1f4>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d102      	bne.n	8002a12 <HAL_SPI_Transmit+0x1fa>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_SPI_Transmit+0x200>
                {
                    errorcode = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	77fb      	strb	r3, [r7, #31]
                    goto error;
 8002a16:	e026      	b.n	8002a66 <HAL_SPI_Transmit+0x24e>
        while (hspi->TxXferCount > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1cd      	bne.n	80029be <HAL_SPI_Transmit+0x1a6>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fba2 	bl	8003170 <SPI_EndRxTxTransaction>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0x220>
    {
        hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_SPI_Transmit+0x23e>
    {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0x24c>
    {
        errorcode = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	e000      	b.n	8002a66 <HAL_SPI_Transmit+0x24e>
    }

    error:
 8002a64:	bf00      	nop
    hspi->State = HAL_SPI_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return errorcode;
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_SPI_Receive>:
 * @param  Size amount of data to be received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80fb      	strh	r3, [r7, #6]
    uint32_t tickstart;
    HAL_StatusTypeDef errorcode = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]

    if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9c:	d112      	bne.n	8002ac4 <HAL_SPI_Receive+0x44>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_SPI_Receive+0x44>
    {
        hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
        return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f8e9 	bl	8002c92 <HAL_SPI_TransmitReceive>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	e0e2      	b.n	8002c8a <HAL_SPI_Receive+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Receive+0x52>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0db      	b.n	8002c8a <HAL_SPI_Receive+0x20a>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ada:	f7fd fd61 	bl	80005a0 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

    if (hspi->State != HAL_SPI_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Receive+0x72>
    {
        errorcode = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	75fb      	strb	r3, [r7, #23]
        goto error;
 8002af0:	e0c2      	b.n	8002c78 <HAL_SPI_Receive+0x1f8>
    }

    if ((pData == NULL) || (Size == 0U))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Receive+0x7e>
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_SPI_Receive+0x84>
    {
        errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
        goto error;
 8002b02:	e0b9      	b.n	8002c78 <HAL_SPI_Receive+0x1f8>
    }

    /* Set the transaction information */
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
    hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->RxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	87da      	strh	r2, [r3, #62]	; 0x3e

    /*Init field not used in handle to zero */
    hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferSize  = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	869a      	strh	r2, [r3, #52]	; 0x34
    hspi->TxXferCount = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxISR       = NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR       = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
        hspi->RxXferCount--;
    }
#endif /* USE_SPI_CRC */

    /* Configure communication direction: 1Line */
    if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4a:	d107      	bne.n	8002b5c <HAL_SPI_Receive+0xdc>
    {
        SPI_1LINE_RX(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d007      	beq.n	8002b7a <HAL_SPI_Receive+0xfa>
    {
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b78:	601a      	str	r2, [r3, #0]
    }

    /* Receive data in 8 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d162      	bne.n	8002c48 <HAL_SPI_Receive+0x1c8>
    {
        /* Transfer loop */
        while (hspi->RxXferCount > 0U)
 8002b82:	e02e      	b.n	8002be2 <HAL_SPI_Receive+0x162>
        {
            /* Check the RXNE flag */
            if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d115      	bne.n	8002bbe <HAL_SPI_Receive+0x13e>
            {
                /* read the received data */
                (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f103 020c 	add.w	r2, r3, #12
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]
                hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
                hspi->RxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bbc:	e011      	b.n	8002be2 <HAL_SPI_Receive+0x162>
            }
            else
            {
                /* Timeout management */
                if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bbe:	f7fd fcef 	bl	80005a0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d803      	bhi.n	8002bd6 <HAL_SPI_Receive+0x156>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d102      	bne.n	8002bdc <HAL_SPI_Receive+0x15c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <HAL_SPI_Receive+0x162>
                {
                    errorcode = HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	75fb      	strb	r3, [r7, #23]
                    goto error;
 8002be0:	e04a      	b.n	8002c78 <HAL_SPI_Receive+0x1f8>
        while (hspi->RxXferCount > 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1cb      	bne.n	8002b84 <HAL_SPI_Receive+0x104>
 8002bec:	e031      	b.n	8002c52 <HAL_SPI_Receive+0x1d2>
    {
        /* Transfer loop */
        while (hspi->RxXferCount > 0U)
        {
            /* Check the RXNE flag */
            if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d113      	bne.n	8002c24 <HAL_SPI_Receive+0x1a4>
            {
                *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	b292      	uxth	r2, r2
 8002c08:	801a      	strh	r2, [r3, #0]
                hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	1c9a      	adds	r2, r3, #2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
                hspi->RxXferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c22:	e011      	b.n	8002c48 <HAL_SPI_Receive+0x1c8>
            }
            else
            {
                /* Timeout management */
                if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c24:	f7fd fcbc 	bl	80005a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d803      	bhi.n	8002c3c <HAL_SPI_Receive+0x1bc>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d102      	bne.n	8002c42 <HAL_SPI_Receive+0x1c2>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_SPI_Receive+0x1c8>
                {
                    errorcode = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	75fb      	strb	r3, [r7, #23]
                    goto error;
 8002c46:	e017      	b.n	8002c78 <HAL_SPI_Receive+0x1f8>
        while (hspi->RxXferCount > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1cd      	bne.n	8002bee <HAL_SPI_Receive+0x16e>
        READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa24 	bl	80030a4 <SPI_EndRxTransaction>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Receive+0x1e8>
    {
        hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Receive+0x1f6>
    {
        errorcode = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
 8002c74:	e000      	b.n	8002c78 <HAL_SPI_Receive+0x1f8>
    }

    error :
 8002c76:	bf00      	nop
    hspi->State = HAL_SPI_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    __HAL_UNLOCK(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return errorcode;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SPI_TransmitReceive>:
 * @param  pRxData pointer to reception data buffer
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef* hspi, uint8_t const* pTxData, uint8_t* pRxData, uint16_t Size, uint32_t Timeout) {
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b08a      	sub	sp, #40	; 0x28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount = Size;
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	843b      	strh	r3, [r7, #32]
  uint32_t             tmp_mode = hspi->Init.Mode;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	61fb      	str	r3, [r7, #28]
  HAL_SPI_StateTypeDef tmp_state = hspi->State;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb0:	76fb      	strb	r3, [r7, #27]

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_SPI_TransmitReceive+0x38>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e17e      	b.n	8002fc8 <HAL_SPI_TransmitReceive+0x336>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  uint32_t             tickstart = HAL_GetTick();
 8002cd2:	f7fd fc65 	bl	80005a0 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]


  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cd8:	7efb      	ldrb	r3, [r7, #27]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d00e      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0x6a>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce4:	d106      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x62>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x62>
 8002cee:	7efb      	ldrb	r3, [r7, #27]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d003      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0x6a>
    errorcode = HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cfa:	e15b      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x322>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x7c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x7c>
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_SPI_TransmitReceive+0x84>
    errorcode = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d14:	e14e      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x98>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2205      	movs	r2, #5
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	887a      	ldrh	r2, [r7, #2]
 8002d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	887a      	ldrh	r2, [r7, #2]
 8002d52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d007      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d86:	d178      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x1e8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_SPI_TransmitReceive+0x104>
 8002d90:	8c3b      	ldrh	r3, [r7, #32]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d166      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x1d2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	1c9a      	adds	r2, r3, #2
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dba:	e053      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x1d2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d11b      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x170>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x170>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d113      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	881a      	ldrh	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	1c9a      	adds	r2, r3, #2
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d119      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x1b2>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	b292      	uxth	r2, r2
 8002e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e44:	f7fd fbac 	bl	80005a0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d807      	bhi.n	8002e64 <HAL_SPI_TransmitReceive+0x1d2>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d003      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x1d2>
      {
        errorcode = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e62:	e0a7      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1a6      	bne.n	8002dbc <HAL_SPI_TransmitReceive+0x12a>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1a1      	bne.n	8002dbc <HAL_SPI_TransmitReceive+0x12a>
 8002e78:	e07c      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x2e2>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x1f6>
 8002e82:	8c3b      	ldrh	r3, [r7, #32]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d16b      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x2ce>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eae:	e057      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x2ce>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d11c      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x266>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d017      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x266>
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d114      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x266>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d119      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0x2a8>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d014      	beq.n	8002f3a <HAL_SPI_TransmitReceive+0x2a8>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f36:	2301      	movs	r3, #1
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f3a:	f7fd fb31 	bl	80005a0 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d803      	bhi.n	8002f52 <HAL_SPI_TransmitReceive+0x2c0>
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d102      	bne.n	8002f58 <HAL_SPI_TransmitReceive+0x2c6>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d103      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x2ce>
      {
        errorcode = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f5e:	e029      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1a2      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x21e>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d19d      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x21e>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8f9 	bl	8003170 <SPI_EndRxTxTransaction>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x300>
  {
    errorcode = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f90:	e010      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x320>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	e000      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x322>
  }

error :
 8002fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <SPI_WaitFlagStateUntilTimeout>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
        uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	71fb      	strb	r3, [r7, #7]
    while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fe0:	e04c      	b.n	800307c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
        if (Timeout != HAL_MAX_DELAY)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d048      	beq.n	800307c <SPI_WaitFlagStateUntilTimeout+0xac>
        {
            if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fea:	f7fd fad9 	bl	80005a0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d902      	bls.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d13d      	bne.n	800307c <SPI_WaitFlagStateUntilTimeout+0xac>
                /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

                /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
                __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800300e:	605a      	str	r2, [r3, #4]

                if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003018:	d111      	bne.n	800303e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003022:	d004      	beq.n	800302e <SPI_WaitFlagStateUntilTimeout+0x5e>
                        || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d107      	bne.n	800303e <SPI_WaitFlagStateUntilTimeout+0x6e>
                {
                    /* Disable SPI peripheral */
                    __HAL_SPI_DISABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303c:	601a      	str	r2, [r3, #0]
                }

                /* Reset CRC Calculation */
                if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003046:	d10f      	bne.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x98>
                {
                    SPI_RESET_CRC(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003066:	601a      	str	r2, [r3, #0]
                }

                hspi->State = HAL_SPI_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

                /* Process Unlocked */
                __HAL_UNLOCK(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

                return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e00f      	b.n	800309c <SPI_WaitFlagStateUntilTimeout+0xcc>
    while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	429a      	cmp	r2, r3
 8003098:	d1a3      	bne.n	8002fe2 <SPI_WaitFlagStateUntilTimeout+0x12>
            }
        }
    }

    return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <SPI_EndRxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
    if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b8:	d111      	bne.n	80030de <SPI_EndRxTransaction+0x3a>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c2:	d004      	beq.n	80030ce <SPI_EndRxTransaction+0x2a>
            || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d107      	bne.n	80030de <SPI_EndRxTransaction+0x3a>
    {
        /* Disable SPI peripheral */
        __HAL_SPI_DISABLE(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030dc:	601a      	str	r2, [r3, #0]
    }

    /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e6:	d12a      	bne.n	800313e <SPI_EndRxTransaction+0x9a>
    {
        if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f0:	d012      	beq.n	8003118 <SPI_EndRxTransaction+0x74>
        {
            /* Control the BSY flag */
            if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ff67 	bl	8002fd0 <SPI_WaitFlagStateUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d02d      	beq.n	8003164 <SPI_EndRxTransaction+0xc0>
            {
                SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
                return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e026      	b.n	8003166 <SPI_EndRxTransaction+0xc2>
            }
        }
        else
        {
            /* Wait the RXNE reset */
            if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	2101      	movs	r1, #1
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff54 	bl	8002fd0 <SPI_WaitFlagStateUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01a      	beq.n	8003164 <SPI_EndRxTransaction+0xc0>
            {
                SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
                return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e013      	b.n	8003166 <SPI_EndRxTransaction+0xc2>
        }
    }
    else
    {
        /* Wait the RXNE reset */
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	2101      	movs	r1, #1
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff ff41 	bl	8002fd0 <SPI_WaitFlagStateUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <SPI_EndRxTransaction+0xc0>
        {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e000      	b.n	8003166 <SPI_EndRxTransaction+0xc2>
        }
    }
    return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <SPI_EndRxTxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <SPI_EndRxTxTransaction+0x7c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <SPI_EndRxTxTransaction+0x80>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0d5b      	lsrs	r3, r3, #21
 8003188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800318c:	fb02 f303 	mul.w	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]
    /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319a:	d112      	bne.n	80031c2 <SPI_EndRxTxTransaction+0x52>
    {
        /* Control the BSY flag */
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff ff12 	bl	8002fd0 <SPI_WaitFlagStateUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <SPI_EndRxTxTransaction+0x70>
        {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <SPI_EndRxTxTransaction+0x72>
         * User have to calculate the timeout value to fit with the time of 1 byte transfer.
         * This time is directly link with the SPI clock from Master device.
         */
        do
        {
            if (count == 0U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <SPI_EndRxTxTransaction+0x6e>
            {
                break;
            }
            count--;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
        } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d0f2      	beq.n	80031c2 <SPI_EndRxTxTransaction+0x52>
 80031dc:	e000      	b.n	80031e0 <SPI_EndRxTxTransaction+0x70>
                break;
 80031de:	bf00      	nop
    }

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000020 	.word	0x20000020
 80031f0:	165e9f81 	.word	0x165e9f81

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e01d      	b.n	8003242 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f006 ff76 	bl	800a10c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fa06 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e01d      	b.n	8003298 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f815 	bl	80032a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f000 f9db 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fca6 	bl	8003c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a15      	ldr	r2, [pc, #84]	; (8003328 <HAL_TIM_PWM_Start+0x74>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIM_PWM_Start+0x2c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_TIM_PWM_Start+0x78>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x30>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_TIM_PWM_Start+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b06      	cmp	r3, #6
 800330a:	d007      	beq.n	800331c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40010000 	.word	0x40010000
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003346:	2302      	movs	r3, #2
 8003348:	e0b4      	b.n	80034b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	f200 809f 	bhi.w	80034a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	0800339d 	.word	0x0800339d
 800336c:	080034a1 	.word	0x080034a1
 8003370:	080034a1 	.word	0x080034a1
 8003374:	080034a1 	.word	0x080034a1
 8003378:	080033dd 	.word	0x080033dd
 800337c:	080034a1 	.word	0x080034a1
 8003380:	080034a1 	.word	0x080034a1
 8003384:	080034a1 	.word	0x080034a1
 8003388:	0800341f 	.word	0x0800341f
 800338c:	080034a1 	.word	0x080034a1
 8003390:	080034a1 	.word	0x080034a1
 8003394:	080034a1 	.word	0x080034a1
 8003398:	0800345f 	.word	0x0800345f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f9ee 	bl	8003784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0208 	orr.w	r2, r2, #8
 80033b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6999      	ldr	r1, [r3, #24]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	619a      	str	r2, [r3, #24]
      break;
 80033da:	e062      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fa3e 	bl	8003864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6999      	ldr	r1, [r3, #24]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	021a      	lsls	r2, r3, #8
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	619a      	str	r2, [r3, #24]
      break;
 800341c:	e041      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fa93 	bl	8003950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0208 	orr.w	r2, r2, #8
 8003438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0204 	bic.w	r2, r2, #4
 8003448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69d9      	ldr	r1, [r3, #28]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	61da      	str	r2, [r3, #28]
      break;
 800345c:	e021      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fae7 	bl	8003a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69d9      	ldr	r1, [r3, #28]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	021a      	lsls	r2, r3, #8
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	61da      	str	r2, [r3, #28]
      break;
 800349e:	e000      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80034a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_TIM_ConfigClockSource+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e0b3      	b.n	800363c <HAL_TIM_ConfigClockSource+0x180>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350c:	d03e      	beq.n	800358c <HAL_TIM_ConfigClockSource+0xd0>
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003512:	f200 8087 	bhi.w	8003624 <HAL_TIM_ConfigClockSource+0x168>
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351a:	f000 8085 	beq.w	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	d87f      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 8003524:	2b70      	cmp	r3, #112	; 0x70
 8003526:	d01a      	beq.n	800355e <HAL_TIM_ConfigClockSource+0xa2>
 8003528:	2b70      	cmp	r3, #112	; 0x70
 800352a:	d87b      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 800352c:	2b60      	cmp	r3, #96	; 0x60
 800352e:	d050      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x116>
 8003530:	2b60      	cmp	r3, #96	; 0x60
 8003532:	d877      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 8003534:	2b50      	cmp	r3, #80	; 0x50
 8003536:	d03c      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0xf6>
 8003538:	2b50      	cmp	r3, #80	; 0x50
 800353a:	d873      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d058      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x136>
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d86f      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 8003544:	2b30      	cmp	r3, #48	; 0x30
 8003546:	d064      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x156>
 8003548:	2b30      	cmp	r3, #48	; 0x30
 800354a:	d86b      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d060      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x156>
 8003550:	2b20      	cmp	r3, #32
 8003552:	d867      	bhi.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d05c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x156>
 8003558:	2b10      	cmp	r3, #16
 800355a:	d05a      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800355c:	e062      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f000 fb33 	bl	8003bd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003580:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	609a      	str	r2, [r3, #8]
      break;
 800358a:	e04e      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f000 fb1c 	bl	8003bd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ae:	609a      	str	r2, [r3, #8]
      break;
 80035b0:	e03b      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 fa90 	bl	8003ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2150      	movs	r1, #80	; 0x50
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fae9 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 80035d0:	e02b      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 faaf 	bl	8003b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2160      	movs	r1, #96	; 0x60
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fad9 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 80035f0:	e01b      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	461a      	mov	r2, r3
 8003600:	f000 fa70 	bl	8003ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2140      	movs	r1, #64	; 0x40
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fac9 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 8003610:	e00b      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f000 fac0 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 8003622:	e002      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003624:	bf00      	nop
 8003626:	e000      	b.n	800362a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003628:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a40      	ldr	r2, [pc, #256]	; (8003758 <TIM_Base_SetConfig+0x114>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d00f      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3d      	ldr	r2, [pc, #244]	; (800375c <TIM_Base_SetConfig+0x118>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <TIM_Base_SetConfig+0x11c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <TIM_Base_SetConfig+0x120>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3a      	ldr	r2, [pc, #232]	; (8003768 <TIM_Base_SetConfig+0x124>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <TIM_Base_SetConfig+0x114>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d02b      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d027      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2c      	ldr	r2, [pc, #176]	; (800375c <TIM_Base_SetConfig+0x118>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d023      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <TIM_Base_SetConfig+0x11c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01f      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <TIM_Base_SetConfig+0x120>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01b      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a29      	ldr	r2, [pc, #164]	; (8003768 <TIM_Base_SetConfig+0x124>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d017      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a28      	ldr	r2, [pc, #160]	; (800376c <TIM_Base_SetConfig+0x128>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <TIM_Base_SetConfig+0x12c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <TIM_Base_SetConfig+0x130>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <TIM_Base_SetConfig+0x134>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <TIM_Base_SetConfig+0x138>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a23      	ldr	r2, [pc, #140]	; (8003780 <TIM_Base_SetConfig+0x13c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <TIM_Base_SetConfig+0x114>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0xf8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <TIM_Base_SetConfig+0x124>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	615a      	str	r2, [r3, #20]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40010400 	.word	0x40010400
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800
 8003778:	40001800 	.word	0x40001800
 800377c:	40001c00 	.word	0x40001c00
 8003780:	40002000 	.word	0x40002000

08003784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0201 	bic.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a20      	ldr	r2, [pc, #128]	; (800385c <TIM_OC1_SetConfig+0xd8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC1_SetConfig+0x64>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <TIM_OC1_SetConfig+0xdc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10c      	bne.n	8003802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0308 	bic.w	r3, r3, #8
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <TIM_OC1_SetConfig+0xd8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_OC1_SetConfig+0x8e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <TIM_OC1_SetConfig+0xdc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40010000 	.word	0x40010000
 8003860:	40010400 	.word	0x40010400

08003864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0210 	bic.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0320 	bic.w	r3, r3, #32
 80038ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a22      	ldr	r2, [pc, #136]	; (8003948 <TIM_OC2_SetConfig+0xe4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_OC2_SetConfig+0x68>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <TIM_OC2_SetConfig+0xe8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10d      	bne.n	80038e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <TIM_OC2_SetConfig+0xe4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_OC2_SetConfig+0x94>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <TIM_OC2_SetConfig+0xe8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d113      	bne.n	8003920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40010400 	.word	0x40010400

08003950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <TIM_OC3_SetConfig+0xe0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_OC3_SetConfig+0x66>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <TIM_OC3_SetConfig+0xe4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10d      	bne.n	80039d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <TIM_OC3_SetConfig+0xe0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_OC3_SetConfig+0x92>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <TIM_OC3_SetConfig+0xe4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d113      	bne.n	8003a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40010400 	.word	0x40010400

08003a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	031b      	lsls	r3, r3, #12
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <TIM_OC4_SetConfig+0xa4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_OC4_SetConfig+0x68>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <TIM_OC4_SetConfig+0xa8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40010400 	.word	0x40010400

08003ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 030a 	bic.w	r3, r3, #10
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0210 	bic.w	r2, r3, #16
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	031b      	lsls	r3, r3, #12
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f043 0307 	orr.w	r3, r3, #7
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	021a      	lsls	r2, r3, #8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	609a      	str	r2, [r3, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e05a      	b.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a21      	ldr	r2, [pc, #132]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d01d      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10c      	bne.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40001800 	.word	0x40001800

08003d5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <disk_status+0x30>)
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	79fa      	ldrb	r2, [r7, #7]
 8003d74:	4905      	ldr	r1, [pc, #20]	; (8003d8c <disk_status+0x30>)
 8003d76:	440a      	add	r2, r1
 8003d78:	7a12      	ldrb	r2, [r2, #8]
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4798      	blx	r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200000d0 	.word	0x200000d0

08003d90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <disk_initialize+0x48>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <disk_initialize+0x48>)
 8003dac:	2101      	movs	r1, #1
 8003dae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <disk_initialize+0x48>)
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	79fa      	ldrb	r2, [r7, #7]
 8003dbe:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <disk_initialize+0x48>)
 8003dc0:	440a      	add	r2, r1
 8003dc2:	7a12      	ldrb	r2, [r2, #8]
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200000d0 	.word	0x200000d0

08003ddc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4603      	mov	r3, r0
 8003dea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <disk_read+0x3c>)
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	689c      	ldr	r4, [r3, #8]
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <disk_read+0x3c>)
 8003dfc:	4413      	add	r3, r2
 8003dfe:	7a18      	ldrb	r0, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	47a0      	blx	r4
 8003e08:	4603      	mov	r3, r0
 8003e0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd90      	pop	{r4, r7, pc}
 8003e16:	bf00      	nop
 8003e18:	200000d0 	.word	0x200000d0

08003e1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <disk_write+0x3c>)
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	68dc      	ldr	r4, [r3, #12]
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <disk_write+0x3c>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	7a18      	ldrb	r0, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	47a0      	blx	r4
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd90      	pop	{r4, r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200000d0 	.word	0x200000d0

08003e5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	603a      	str	r2, [r7, #0]
 8003e66:	71fb      	strb	r3, [r7, #7]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <disk_ioctl+0x38>)
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	79fa      	ldrb	r2, [r7, #7]
 8003e7a:	4906      	ldr	r1, [pc, #24]	; (8003e94 <disk_ioctl+0x38>)
 8003e7c:	440a      	add	r2, r1
 8003e7e:	7a10      	ldrb	r0, [r2, #8]
 8003e80:	79b9      	ldrb	r1, [r7, #6]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	4798      	blx	r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	73fb      	strb	r3, [r7, #15]
  return res;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200000d0 	.word	0x200000d0

08003e98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003ea8:	89fb      	ldrh	r3, [r7, #14]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	b21a      	sxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003eba:	89fb      	ldrh	r3, [r7, #14]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3303      	adds	r3, #3
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	3202      	adds	r2, #2
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	3201      	adds	r2, #1
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
	return rv;
 8003f00:	68fb      	ldr	r3, [r7, #12]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	1c53      	adds	r3, r2, #1
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	6179      	str	r1, [r7, #20]
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f1      	bne.n	8003fb6 <mem_cpy+0x1a>
	}
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	617a      	str	r2, [r7, #20]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f3      	bne.n	8003fee <mem_set+0x10>
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	61fa      	str	r2, [r7, #28]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	61ba      	str	r2, [r7, #24]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	1acb      	subs	r3, r1, r3
 8004040:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3b01      	subs	r3, #1
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <mem_cmp+0x40>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0eb      	beq.n	800402c <mem_cmp+0x18>

	return r;
 8004054:	697b      	ldr	r3, [r7, #20]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800406c:	e002      	b.n	8004074 <chk_chr+0x12>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3301      	adds	r3, #1
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <chk_chr+0x26>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	4293      	cmp	r3, r2
 8004086:	d1f2      	bne.n	800406e <chk_chr+0xc>
	return *str;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	781b      	ldrb	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e029      	b.n	8004100 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <chk_lock+0xb4>)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4413      	add	r3, r2
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01d      	beq.n	80040f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80040ba:	4a24      	ldr	r2, [pc, #144]	; (800414c <chk_lock+0xb4>)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4413      	add	r3, r2
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d116      	bne.n	80040fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <chk_lock+0xb4>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80040dc:	429a      	cmp	r2, r3
 80040de:	d10c      	bne.n	80040fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <chk_lock+0xb4>)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	4413      	add	r3, r2
 80040e8:	3308      	adds	r3, #8
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d102      	bne.n	80040fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80040f4:	e007      	b.n	8004106 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3301      	adds	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d9d2      	bls.n	80040ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d109      	bne.n	8004120 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <chk_lock+0x80>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d101      	bne.n	800411c <chk_lock+0x84>
 8004118:	2300      	movs	r3, #0
 800411a:	e010      	b.n	800413e <chk_lock+0xa6>
 800411c:	2312      	movs	r3, #18
 800411e:	e00e      	b.n	800413e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <chk_lock+0xa0>
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <chk_lock+0xb4>)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4413      	add	r3, r2
 800412e:	330c      	adds	r3, #12
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d101      	bne.n	800413c <chk_lock+0xa4>
 8004138:	2310      	movs	r3, #16
 800413a:	e000      	b.n	800413e <chk_lock+0xa6>
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	200000b0 	.word	0x200000b0

08004150 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	e002      	b.n	8004162 <enq_lock+0x12>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3301      	adds	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d806      	bhi.n	8004176 <enq_lock+0x26>
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <enq_lock+0x40>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4413      	add	r3, r2
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f2      	bne.n	800415c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b02      	cmp	r3, #2
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	200000b0 	.word	0x200000b0

08004194 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e01f      	b.n	80041e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80041a4:	4a41      	ldr	r2, [pc, #260]	; (80042ac <inc_lock+0x118>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4413      	add	r3, r2
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d113      	bne.n	80041de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <inc_lock+0x118>)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d109      	bne.n	80041de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80041ca:	4a38      	ldr	r2, [pc, #224]	; (80042ac <inc_lock+0x118>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4413      	add	r3, r2
 80041d2:	3308      	adds	r3, #8
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80041da:	429a      	cmp	r2, r3
 80041dc:	d006      	beq.n	80041ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3301      	adds	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d9dc      	bls.n	80041a4 <inc_lock+0x10>
 80041ea:	e000      	b.n	80041ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80041ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d132      	bne.n	800425a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e002      	b.n	8004200 <inc_lock+0x6c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d806      	bhi.n	8004214 <inc_lock+0x80>
 8004206:	4a29      	ldr	r2, [pc, #164]	; (80042ac <inc_lock+0x118>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4413      	add	r3, r2
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f2      	bne.n	80041fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d101      	bne.n	800421e <inc_lock+0x8a>
 800421a:	2300      	movs	r3, #0
 800421c:	e040      	b.n	80042a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4922      	ldr	r1, [pc, #136]	; (80042ac <inc_lock+0x118>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	440b      	add	r3, r1
 800422a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	491e      	ldr	r1, [pc, #120]	; (80042ac <inc_lock+0x118>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	440b      	add	r3, r1
 8004238:	3304      	adds	r3, #4
 800423a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	491a      	ldr	r1, [pc, #104]	; (80042ac <inc_lock+0x118>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	440b      	add	r3, r1
 8004248:	3308      	adds	r3, #8
 800424a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800424c:	4a17      	ldr	r2, [pc, #92]	; (80042ac <inc_lock+0x118>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	330c      	adds	r3, #12
 8004256:	2200      	movs	r2, #0
 8004258:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <inc_lock+0xe0>
 8004260:	4a12      	ldr	r2, [pc, #72]	; (80042ac <inc_lock+0x118>)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	330c      	adds	r3, #12
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <inc_lock+0xe0>
 8004270:	2300      	movs	r3, #0
 8004272:	e015      	b.n	80042a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <inc_lock+0xf8>
 800427a:	4a0c      	ldr	r2, [pc, #48]	; (80042ac <inc_lock+0x118>)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	4413      	add	r3, r2
 8004282:	330c      	adds	r3, #12
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	e001      	b.n	8004290 <inc_lock+0xfc>
 800428c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004290:	4906      	ldr	r1, [pc, #24]	; (80042ac <inc_lock+0x118>)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	440b      	add	r3, r1
 8004298:	330c      	adds	r3, #12
 800429a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	200000b0 	.word	0x200000b0

080042b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d825      	bhi.n	8004310 <dec_lock+0x60>
		n = Files[i].ctr;
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <dec_lock+0x74>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	330c      	adds	r3, #12
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80042d2:	89fb      	ldrh	r3, [r7, #14]
 80042d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d8:	d101      	bne.n	80042de <dec_lock+0x2e>
 80042da:	2300      	movs	r3, #0
 80042dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <dec_lock+0x3a>
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <dec_lock+0x74>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	330c      	adds	r3, #12
 80042f4:	89fa      	ldrh	r2, [r7, #14]
 80042f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80042f8:	89fb      	ldrh	r3, [r7, #14]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <dec_lock+0x5a>
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <dec_lock+0x74>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	4413      	add	r3, r2
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	737b      	strb	r3, [r7, #13]
 800430e:	e001      	b.n	8004314 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004310:	2302      	movs	r3, #2
 8004312:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004314:	7b7b      	ldrb	r3, [r7, #13]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	200000b0 	.word	0x200000b0

08004328 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e010      	b.n	8004358 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004336:	4a0d      	ldr	r2, [pc, #52]	; (800436c <clear_lock+0x44>)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4413      	add	r3, r2
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d105      	bne.n	8004352 <clear_lock+0x2a>
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <clear_lock+0x44>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4413      	add	r3, r2
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d9eb      	bls.n	8004336 <clear_lock+0xe>
	}
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	200000b0 	.word	0x200000b0

08004370 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	78db      	ldrb	r3, [r3, #3]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d034      	beq.n	80043ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7858      	ldrb	r0, [r3, #1]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004394:	2301      	movs	r3, #1
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	f7ff fd40 	bl	8003e1c <disk_write>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
 80043a6:	e022      	b.n	80043ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	1ad2      	subs	r2, r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d217      	bcs.n	80043ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	789b      	ldrb	r3, [r3, #2]
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e010      	b.n	80043e8 <sync_window+0x78>
					wsect += fs->fsize;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4413      	add	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7858      	ldrb	r0, [r3, #1]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043da:	2301      	movs	r3, #1
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	f7ff fd1d 	bl	8003e1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d8eb      	bhi.n	80043c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d01b      	beq.n	8004448 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ffad 	bl	8004370 <sync_window>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d113      	bne.n	8004448 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7858      	ldrb	r0, [r3, #1]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800442a:	2301      	movs	r3, #1
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	f7ff fcd5 	bl	8003ddc <disk_read>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff87 	bl	8004370 <sync_window>
 8004462:	4603      	mov	r3, r0
 8004464:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d158      	bne.n	800451e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d148      	bne.n	8004506 <sync_fs+0xb2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	791b      	ldrb	r3, [r3, #4]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d144      	bne.n	8004506 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3330      	adds	r3, #48	; 0x30
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fda9 	bl	8003fde <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3330      	adds	r3, #48	; 0x30
 8004490:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004494:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fd38 	bl	8003f0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3330      	adds	r3, #48	; 0x30
 80044a2:	4921      	ldr	r1, [pc, #132]	; (8004528 <sync_fs+0xd4>)
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fd4d 	bl	8003f44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3330      	adds	r3, #48	; 0x30
 80044ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80044b2:	491e      	ldr	r1, [pc, #120]	; (800452c <sync_fs+0xd8>)
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fd45 	bl	8003f44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3330      	adds	r3, #48	; 0x30
 80044be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7ff fd3b 	bl	8003f44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3330      	adds	r3, #48	; 0x30
 80044d2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7ff fd31 	bl	8003f44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7858      	ldrb	r0, [r3, #1]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	2301      	movs	r3, #1
 80044fc:	f7ff fc8e 	bl	8003e1c <disk_write>
			fs->fsi_flag = 0;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fca4 	bl	8003e5c <disk_ioctl>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <sync_fs+0xca>
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	41615252 	.word	0x41615252
 800452c:	61417272 	.word	0x61417272

08004530 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	3b02      	subs	r3, #2
 800453e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	3b02      	subs	r3, #2
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d301      	bcc.n	8004550 <clust2sect+0x20>
 800454c:	2300      	movs	r3, #0
 800454e:	e008      	b.n	8004562 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	895b      	ldrh	r3, [r3, #10]
 8004554:	461a      	mov	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	fb03 f202 	mul.w	r2, r3, r2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	4413      	add	r3, r2
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d904      	bls.n	800458e <get_fat+0x20>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <get_fat+0x26>
		val = 1;	/* Internal error */
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e08f      	b.n	80046b4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d062      	beq.n	8004668 <get_fat+0xfa>
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	dc7c      	bgt.n	80046a0 <get_fat+0x132>
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d002      	beq.n	80045b0 <get_fat+0x42>
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d042      	beq.n	8004634 <get_fat+0xc6>
 80045ae:	e077      	b.n	80046a0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	0a5b      	lsrs	r3, r3, #9
 80045c6:	4413      	add	r3, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	6938      	ldr	r0, [r7, #16]
 80045cc:	f7ff ff14 	bl	80043f8 <move_window>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d167      	bne.n	80046a6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4413      	add	r3, r2
 80045e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0a5b      	lsrs	r3, r3, #9
 80045f2:	4413      	add	r3, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	6938      	ldr	r0, [r7, #16]
 80045f8:	f7ff fefe 	bl	80043f8 <move_window>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d153      	bne.n	80046aa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
 8004618:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <get_fat+0xbc>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	e002      	b.n	8004630 <get_fat+0xc2>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	617b      	str	r3, [r7, #20]
			break;
 8004632:	e03f      	b.n	80046b4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	4413      	add	r3, r2
 800463e:	4619      	mov	r1, r3
 8004640:	6938      	ldr	r0, [r7, #16]
 8004642:	f7ff fed9 	bl	80043f8 <move_window>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d130      	bne.n	80046ae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800465a:	4413      	add	r3, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fc1b 	bl	8003e98 <ld_word>
 8004662:	4603      	mov	r3, r0
 8004664:	617b      	str	r3, [r7, #20]
			break;
 8004666:	e025      	b.n	80046b4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	09db      	lsrs	r3, r3, #7
 8004670:	4413      	add	r3, r2
 8004672:	4619      	mov	r1, r3
 8004674:	6938      	ldr	r0, [r7, #16]
 8004676:	f7ff febf 	bl	80043f8 <move_window>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d118      	bne.n	80046b2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800468e:	4413      	add	r3, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fc19 	bl	8003ec8 <ld_dword>
 8004696:	4603      	mov	r3, r0
 8004698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800469c:	617b      	str	r3, [r7, #20]
			break;
 800469e:	e009      	b.n	80046b4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e006      	b.n	80046b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046a6:	bf00      	nop
 80046a8:	e004      	b.n	80046b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80046b2:	bf00      	nop
		}
	}

	return val;
 80046b4:	697b      	ldr	r3, [r7, #20]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80046be:	b590      	push	{r4, r7, lr}
 80046c0:	b089      	sub	sp, #36	; 0x24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80046ca:	2302      	movs	r3, #2
 80046cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	f240 80d2 	bls.w	800487a <put_fat+0x1bc>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	f080 80cc 	bcs.w	800487a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	f000 8096 	beq.w	8004818 <put_fat+0x15a>
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	f300 80cd 	bgt.w	800488c <put_fat+0x1ce>
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d002      	beq.n	80046fc <put_fat+0x3e>
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d06e      	beq.n	80047d8 <put_fat+0x11a>
 80046fa:	e0c7      	b.n	800488c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4413      	add	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1a      	ldr	r2, [r3, #32]
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	4413      	add	r3, r2
 8004714:	4619      	mov	r1, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fe6e 	bl	80043f8 <move_window>
 800471c:	4603      	mov	r3, r0
 800471e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004720:	7ffb      	ldrb	r3, [r7, #31]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 80ab 	bne.w	800487e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	61b9      	str	r1, [r7, #24]
 8004734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <put_fat+0xa4>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b25b      	sxtb	r3, r3
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	b25a      	sxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	b25b      	sxtb	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b25b      	sxtb	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e001      	b.n	8004766 <put_fat+0xa8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	0a5b      	lsrs	r3, r3, #9
 8004778:	4413      	add	r3, r2
 800477a:	4619      	mov	r1, r3
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fe3b 	bl	80043f8 <move_window>
 8004782:	4603      	mov	r3, r0
 8004784:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004786:	7ffb      	ldrb	r3, [r7, #31]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d17a      	bne.n	8004882 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004798:	4413      	add	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <put_fat+0xf0>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e00e      	b.n	80047cc <put_fat+0x10e>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b25b      	sxtb	r3, r3
 80047b4:	f023 030f 	bic.w	r3, r3, #15
 80047b8:	b25a      	sxtb	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	b25b      	sxtb	r3, r3
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	70da      	strb	r2, [r3, #3]
			break;
 80047d6:	e059      	b.n	800488c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	4413      	add	r3, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fe07 	bl	80043f8 <move_window>
 80047ea:	4603      	mov	r3, r0
 80047ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d148      	bne.n	8004886 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004802:	4413      	add	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	b292      	uxth	r2, r2
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fb7f 	bl	8003f0e <st_word>
			fs->wflag = 1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	70da      	strb	r2, [r3, #3]
			break;
 8004816:	e039      	b.n	800488c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	09db      	lsrs	r3, r3, #7
 8004820:	4413      	add	r3, r2
 8004822:	4619      	mov	r1, r3
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff fde7 	bl	80043f8 <move_window>
 800482a:	4603      	mov	r3, r0
 800482c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d12a      	bne.n	800488a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004848:	4413      	add	r3, r2
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fb3c 	bl	8003ec8 <ld_dword>
 8004850:	4603      	mov	r3, r0
 8004852:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004856:	4323      	orrs	r3, r4
 8004858:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004868:	4413      	add	r3, r2
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fb69 	bl	8003f44 <st_dword>
			fs->wflag = 1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	70da      	strb	r2, [r3, #3]
			break;
 8004878:	e008      	b.n	800488c <put_fat+0x1ce>
		}
	}
 800487a:	bf00      	nop
 800487c:	e006      	b.n	800488c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800487e:	bf00      	nop
 8004880:	e004      	b.n	800488c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800488a:	bf00      	nop
	return res;
 800488c:	7ffb      	ldrb	r3, [r7, #31]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3724      	adds	r7, #36	; 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd90      	pop	{r4, r7, pc}

08004896 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d904      	bls.n	80048bc <remove_chain+0x26>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d301      	bcc.n	80048c0 <remove_chain+0x2a>
 80048bc:	2302      	movs	r3, #2
 80048be:	e04b      	b.n	8004958 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	69b8      	ldr	r0, [r7, #24]
 80048ce:	f7ff fef6 	bl	80046be <put_fat>
 80048d2:	4603      	mov	r3, r0
 80048d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80048d6:	7ffb      	ldrb	r3, [r7, #31]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <remove_chain+0x4a>
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	e03b      	b.n	8004958 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff fe43 	bl	800456e <get_fat>
 80048e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d031      	beq.n	8004954 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <remove_chain+0x64>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e02e      	b.n	8004958 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d101      	bne.n	8004906 <remove_chain+0x70>
 8004902:	2301      	movs	r3, #1
 8004904:	e028      	b.n	8004958 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004906:	2200      	movs	r2, #0
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	69b8      	ldr	r0, [r7, #24]
 800490c:	f7ff fed7 	bl	80046be <put_fat>
 8004910:	4603      	mov	r3, r0
 8004912:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004914:	7ffb      	ldrb	r3, [r7, #31]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <remove_chain+0x88>
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	e01c      	b.n	8004958 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	3b02      	subs	r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d20b      	bcs.n	8004944 <remove_chain+0xae>
			fs->free_clst++;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d3c6      	bcc.n	80048e0 <remove_chain+0x4a>
 8004952:	e000      	b.n	8004956 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004954:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <create_chain+0x2c>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	429a      	cmp	r2, r3
 800498a:	d31b      	bcc.n	80049c4 <create_chain+0x64>
 800498c:	2301      	movs	r3, #1
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e018      	b.n	80049c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fdea 	bl	800456e <get_fat>
 800499a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d801      	bhi.n	80049a6 <create_chain+0x46>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e070      	b.n	8004a88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d101      	bne.n	80049b2 <create_chain+0x52>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	e06a      	b.n	8004a88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d201      	bcs.n	80049c0 <create_chain+0x60>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	e063      	b.n	8004a88 <create_chain+0x128>
		scl = clst;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d307      	bcc.n	80049e8 <create_chain+0x88>
				ncl = 2;
 80049d8:	2302      	movs	r3, #2
 80049da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d901      	bls.n	80049e8 <create_chain+0x88>
 80049e4:	2300      	movs	r3, #0
 80049e6:	e04f      	b.n	8004a88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80049e8:	69f9      	ldr	r1, [r7, #28]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fdbf 	bl	800456e <get_fat>
 80049f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00e      	beq.n	8004a16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d003      	beq.n	8004a06 <create_chain+0xa6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d101      	bne.n	8004a0a <create_chain+0xaa>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	e03e      	b.n	8004a88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d1da      	bne.n	80049c8 <create_chain+0x68>
 8004a12:	2300      	movs	r3, #0
 8004a14:	e038      	b.n	8004a88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004a16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	69f9      	ldr	r1, [r7, #28]
 8004a1e:	6938      	ldr	r0, [r7, #16]
 8004a20:	f7ff fe4d 	bl	80046be <put_fat>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <create_chain+0xe2>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d006      	beq.n	8004a42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	6938      	ldr	r0, [r7, #16]
 8004a3a:	f7ff fe40 	bl	80046be <put_fat>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d116      	bne.n	8004a76 <create_chain+0x116>
		fs->last_clst = ncl;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	3b02      	subs	r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d804      	bhi.n	8004a66 <create_chain+0x106>
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	1e5a      	subs	r2, r3, #1
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	791b      	ldrb	r3, [r3, #4]
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	711a      	strb	r2, [r3, #4]
 8004a74:	e007      	b.n	8004a86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <create_chain+0x122>
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	e000      	b.n	8004a84 <create_chain+0x124>
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004a86:	69fb      	ldr	r3, [r7, #28]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	0a5b      	lsrs	r3, r3, #9
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	8952      	ldrh	r2, [r2, #10]
 8004ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	613a      	str	r2, [r7, #16]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <clmt_clust+0x3a>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e010      	b.n	8004aec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d307      	bcc.n	8004ae2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3304      	adds	r3, #4
 8004ade:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ae0:	e7e9      	b.n	8004ab6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004ae2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4413      	add	r3, r2
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b0e:	d204      	bcs.n	8004b1a <dir_sdi+0x22>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <dir_sdi+0x26>
		return FR_INT_ERR;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e063      	b.n	8004be6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <dir_sdi+0x46>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d902      	bls.n	8004b3e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10c      	bne.n	8004b5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	8912      	ldrh	r2, [r2, #8]
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d301      	bcc.n	8004b54 <dir_sdi+0x5c>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e048      	b.n	8004be6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	61da      	str	r2, [r3, #28]
 8004b5c:	e029      	b.n	8004bb2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	895b      	ldrh	r3, [r3, #10]
 8004b62:	025b      	lsls	r3, r3, #9
 8004b64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004b66:	e019      	b.n	8004b9c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6979      	ldr	r1, [r7, #20]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fcfe 	bl	800456e <get_fat>
 8004b72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d101      	bne.n	8004b80 <dir_sdi+0x88>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e032      	b.n	8004be6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d904      	bls.n	8004b90 <dir_sdi+0x98>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d301      	bcc.n	8004b94 <dir_sdi+0x9c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e028      	b.n	8004be6 <dir_sdi+0xee>
			ofs -= csz;
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d2e1      	bcs.n	8004b68 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	6938      	ldr	r0, [r7, #16]
 8004ba8:	f7ff fcc2 	bl	8004530 <clust2sect>
 8004bac:	4602      	mov	r2, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <dir_sdi+0xcc>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e010      	b.n	8004be6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	0a5b      	lsrs	r3, r3, #9
 8004bcc:	441a      	add	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	441a      	add	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	3320      	adds	r3, #32
 8004c04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <dir_next+0x28>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c14:	d301      	bcc.n	8004c1a <dir_next+0x2c>
 8004c16:	2304      	movs	r3, #4
 8004c18:	e0aa      	b.n	8004d70 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 8098 	bne.w	8004d56 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	8912      	ldrh	r2, [r2, #8]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	f0c0 8088 	bcc.w	8004d56 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	61da      	str	r2, [r3, #28]
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	e08f      	b.n	8004d70 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	0a5b      	lsrs	r3, r3, #9
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	8952      	ldrh	r2, [r2, #10]
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d17a      	bne.n	8004d56 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7ff fc80 	bl	800456e <get_fat>
 8004c6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d801      	bhi.n	8004c7a <dir_next+0x8c>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e07a      	b.n	8004d70 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d101      	bne.n	8004c86 <dir_next+0x98>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e074      	b.n	8004d70 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d358      	bcc.n	8004d42 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	61da      	str	r2, [r3, #28]
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e067      	b.n	8004d70 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff fe59 	bl	8004960 <create_chain>
 8004cae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <dir_next+0xcc>
 8004cb6:	2307      	movs	r3, #7
 8004cb8:	e05a      	b.n	8004d70 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <dir_next+0xd6>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e055      	b.n	8004d70 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d101      	bne.n	8004cd0 <dir_next+0xe2>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e04f      	b.n	8004d70 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fb4d 	bl	8004370 <sync_window>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <dir_next+0xf2>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e047      	b.n	8004d70 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3330      	adds	r3, #48	; 0x30
 8004ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f977 	bl	8003fde <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fc1a 	bl	8004530 <clust2sect>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d02:	e012      	b.n	8004d2a <dir_next+0x13c>
						fs->wflag = 1;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fb30 	bl	8004370 <sync_window>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <dir_next+0x12c>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e02a      	b.n	8004d70 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	895b      	ldrh	r3, [r3, #10]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d3e6      	bcc.n	8004d04 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad2      	subs	r2, r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fbf0 	bl	8004530 <clust2sect>
 8004d50:	4602      	mov	r2, r0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	441a      	add	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004d88:	2100      	movs	r1, #0
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff feb4 	bl	8004af8 <dir_sdi>
 8004d90:	4603      	mov	r3, r0
 8004d92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d12b      	bne.n	8004df2 <dir_alloc+0x7a>
		n = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4619      	mov	r1, r3
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fb27 	bl	80043f8 <move_window>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11d      	bne.n	8004df0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2be5      	cmp	r3, #229	; 0xe5
 8004dbc:	d004      	beq.n	8004dc8 <dir_alloc+0x50>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d102      	bne.n	8004ddc <dir_alloc+0x64>
 8004dd6:	e00c      	b.n	8004df2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ff05 	bl	8004bee <dir_next>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0d7      	beq.n	8004d9e <dir_alloc+0x26>
 8004dee:	e000      	b.n	8004df2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004df0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d101      	bne.n	8004dfc <dir_alloc+0x84>
 8004df8:	2307      	movs	r3, #7
 8004dfa:	75fb      	strb	r3, [r7, #23]
	return res;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	331a      	adds	r3, #26
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff f83f 	bl	8003e98 <ld_word>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d109      	bne.n	8004e3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff f834 	bl	8003e98 <ld_word>
 8004e30:	4603      	mov	r3, r0
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	331a      	adds	r3, #26
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	b292      	uxth	r2, r2
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f857 	bl	8003f0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d109      	bne.n	8004e7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f103 0214 	add.w	r2, r3, #20
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7ff f849 	bl	8003f0e <st_word>
	}
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8004e8e:	2304      	movs	r3, #4
 8004e90:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8004e98:	e03c      	b.n	8004f14 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6938      	ldr	r0, [r7, #16]
 8004ea2:	f7ff faa9 	bl	80043f8 <move_window>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d136      	bne.n	8004f1e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	75fb      	strb	r3, [r7, #23]
 8004ec2:	e031      	b.n	8004f28 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	330b      	adds	r3, #11
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed0:	73bb      	strb	r3, [r7, #14]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7bba      	ldrb	r2, [r7, #14]
 8004ed6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2be5      	cmp	r3, #229	; 0xe5
 8004edc:	d011      	beq.n	8004f02 <dir_read+0x7e>
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ee2:	d00e      	beq.n	8004f02 <dir_read+0x7e>
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d00b      	beq.n	8004f02 <dir_read+0x7e>
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	f023 0320 	bic.w	r3, r3, #32
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8004f02:	2100      	movs	r1, #0
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fe72 	bl	8004bee <dir_next>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d108      	bne.n	8004f26 <dir_read+0xa2>
	while (dp->sect) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1be      	bne.n	8004e9a <dir_read+0x16>
 8004f1c:	e004      	b.n	8004f28 <dir_read+0xa4>
		if (res != FR_OK) break;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <dir_read+0xa4>
				break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <dir_read+0xa4>
		if (res != FR_OK) break;
 8004f26:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <dir_read+0xb0>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	61da      	str	r2, [r3, #28]
	return res;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fdd2 	bl	8004af8 <dir_sdi>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <dir_find+0x24>
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	e03e      	b.n	8004fe0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	4619      	mov	r1, r3
 8004f68:	6938      	ldr	r0, [r7, #16]
 8004f6a:	f7ff fa45 	bl	80043f8 <move_window>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d12f      	bne.n	8004fd8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <dir_find+0x4e>
 8004f86:	2304      	movs	r3, #4
 8004f88:	75fb      	strb	r3, [r7, #23]
 8004f8a:	e028      	b.n	8004fde <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	330b      	adds	r3, #11
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	330b      	adds	r3, #11
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <dir_find+0x86>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a18      	ldr	r0, [r3, #32]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3324      	adds	r3, #36	; 0x24
 8004fb6:	220b      	movs	r2, #11
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f7ff f82b 	bl	8004014 <mem_cmp>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe11 	bl	8004bee <dir_next>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0c5      	beq.n	8004f62 <dir_find+0x24>
 8004fd6:	e002      	b.n	8004fde <dir_find+0xa0>
		if (res != FR_OK) break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004fdc:	bf00      	nop

	return res;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff febd 	bl	8004d78 <dir_alloc>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11c      	bne.n	8005042 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	4619      	mov	r1, r3
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f7ff f9f2 	bl	80043f8 <move_window>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d111      	bne.n	8005042 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	2220      	movs	r2, #32
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe ffd9 	bl	8003fde <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a18      	ldr	r0, [r3, #32]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3324      	adds	r3, #36	; 0x24
 8005034:	220b      	movs	r2, #11
 8005036:	4619      	mov	r1, r3
 8005038:	f7fe ffb0 	bl	8003f9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2201      	movs	r2, #1
 8005040:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff f9c9 	bl	80043f8 <move_window>
 8005066:	4603      	mov	r3, r0
 8005068:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	22e5      	movs	r2, #229	; 0xe5
 8005076:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800507e:	7afb      	ldrb	r3, [r7, #11]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3324      	adds	r3, #36	; 0x24
 800509c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800509e:	220b      	movs	r2, #11
 80050a0:	2120      	movs	r1, #32
 80050a2:	68b8      	ldr	r0, [r7, #8]
 80050a4:	f7fe ff9b 	bl	8003fde <mem_set>
	si = i = 0; ni = 8;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	2308      	movs	r3, #8
 80050b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	61fa      	str	r2, [r7, #28]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d94e      	bls.n	8005166 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80050c8:	7efb      	ldrb	r3, [r7, #27]
 80050ca:	2b2f      	cmp	r3, #47	; 0x2f
 80050cc:	d006      	beq.n	80050dc <create_name+0x54>
 80050ce:	7efb      	ldrb	r3, [r7, #27]
 80050d0:	2b5c      	cmp	r3, #92	; 0x5c
 80050d2:	d110      	bne.n	80050f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80050d4:	e002      	b.n	80050dc <create_name+0x54>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b2f      	cmp	r3, #47	; 0x2f
 80050e6:	d0f6      	beq.n	80050d6 <create_name+0x4e>
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b5c      	cmp	r3, #92	; 0x5c
 80050f2:	d0f0      	beq.n	80050d6 <create_name+0x4e>
			break;
 80050f4:	e038      	b.n	8005168 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80050f6:	7efb      	ldrb	r3, [r7, #27]
 80050f8:	2b2e      	cmp	r3, #46	; 0x2e
 80050fa:	d003      	beq.n	8005104 <create_name+0x7c>
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	d30c      	bcc.n	800511e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b0b      	cmp	r3, #11
 8005108:	d002      	beq.n	8005110 <create_name+0x88>
 800510a:	7efb      	ldrb	r3, [r7, #27]
 800510c:	2b2e      	cmp	r3, #46	; 0x2e
 800510e:	d001      	beq.n	8005114 <create_name+0x8c>
 8005110:	2306      	movs	r3, #6
 8005112:	e044      	b.n	800519e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005114:	2308      	movs	r3, #8
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	230b      	movs	r3, #11
 800511a:	617b      	str	r3, [r7, #20]
			continue;
 800511c:	e022      	b.n	8005164 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800511e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005122:	2b00      	cmp	r3, #0
 8005124:	da04      	bge.n	8005130 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005126:	7efb      	ldrb	r3, [r7, #27]
 8005128:	3b80      	subs	r3, #128	; 0x80
 800512a:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <create_name+0x120>)
 800512c:	5cd3      	ldrb	r3, [r2, r3]
 800512e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005130:	7efb      	ldrb	r3, [r7, #27]
 8005132:	4619      	mov	r1, r3
 8005134:	481d      	ldr	r0, [pc, #116]	; (80051ac <create_name+0x124>)
 8005136:	f7fe ff94 	bl	8004062 <chk_chr>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <create_name+0xbc>
 8005140:	2306      	movs	r3, #6
 8005142:	e02c      	b.n	800519e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005144:	7efb      	ldrb	r3, [r7, #27]
 8005146:	2b60      	cmp	r3, #96	; 0x60
 8005148:	d905      	bls.n	8005156 <create_name+0xce>
 800514a:	7efb      	ldrb	r3, [r7, #27]
 800514c:	2b7a      	cmp	r3, #122	; 0x7a
 800514e:	d802      	bhi.n	8005156 <create_name+0xce>
 8005150:	7efb      	ldrb	r3, [r7, #27]
 8005152:	3b20      	subs	r3, #32
 8005154:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	613a      	str	r2, [r7, #16]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4413      	add	r3, r2
 8005160:	7efa      	ldrb	r2, [r7, #27]
 8005162:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005164:	e7a6      	b.n	80050b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005166:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	441a      	add	r2, r3
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <create_name+0xf4>
 8005178:	2306      	movs	r3, #6
 800517a:	e010      	b.n	800519e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2be5      	cmp	r3, #229	; 0xe5
 8005182:	d102      	bne.n	800518a <create_name+0x102>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2205      	movs	r2, #5
 8005188:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800518a:	7efb      	ldrb	r3, [r7, #27]
 800518c:	2b20      	cmp	r3, #32
 800518e:	d801      	bhi.n	8005194 <create_name+0x10c>
 8005190:	2204      	movs	r2, #4
 8005192:	e000      	b.n	8005196 <create_name+0x10e>
 8005194:	2200      	movs	r2, #0
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	330b      	adds	r3, #11
 800519a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800519c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	0800a930 	.word	0x0800a930
 80051ac:	0800a858 	.word	0x0800a858

080051b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80051c4:	e002      	b.n	80051cc <follow_path+0x1c>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b2f      	cmp	r3, #47	; 0x2f
 80051d2:	d0f8      	beq.n	80051c6 <follow_path+0x16>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b5c      	cmp	r3, #92	; 0x5c
 80051da:	d0f4      	beq.n	80051c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b1f      	cmp	r3, #31
 80051e8:	d80a      	bhi.n	8005200 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80051f2:	2100      	movs	r1, #0
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fc7f 	bl	8004af8 <dir_sdi>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
 80051fe:	e043      	b.n	8005288 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005200:	463b      	mov	r3, r7
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ff3f 	bl	8005088 <create_name>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d134      	bne.n	800527e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fe92 	bl	8004f3e <dir_find>
 800521a:	4603      	mov	r3, r0
 800521c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005224:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d127      	bne.n	8005282 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005232:	7afb      	ldrb	r3, [r7, #11]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d122      	bne.n	8005282 <follow_path+0xd2>
 800523c:	2305      	movs	r3, #5
 800523e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005240:	e01f      	b.n	8005282 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d11c      	bne.n	8005286 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	799b      	ldrb	r3, [r3, #6]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005258:	2305      	movs	r3, #5
 800525a:	75fb      	strb	r3, [r7, #23]
 800525c:	e014      	b.n	8005288 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	4413      	add	r3, r2
 800526e:	4619      	mov	r1, r3
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff fdc8 	bl	8004e06 <ld_clust>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800527c:	e7c0      	b.n	8005200 <follow_path+0x50>
			if (res != FR_OK) break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <follow_path+0xd8>
				break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005286:	bf00      	nop
			}
		}
	}

	return res;
 8005288:	7dfb      	ldrb	r3, [r7, #23]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800529a:	f04f 33ff 	mov.w	r3, #4294967295
 800529e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d031      	beq.n	800530c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e002      	b.n	80052b6 <get_ldnumber+0x24>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d903      	bls.n	80052c6 <get_ldnumber+0x34>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b3a      	cmp	r3, #58	; 0x3a
 80052c4:	d1f4      	bne.n	80052b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b3a      	cmp	r3, #58	; 0x3a
 80052cc:	d11c      	bne.n	8005308 <get_ldnumber+0x76>
			tp = *path;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	60fa      	str	r2, [r7, #12]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	3b30      	subs	r3, #48	; 0x30
 80052de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d80e      	bhi.n	8005304 <get_ldnumber+0x72>
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d10a      	bne.n	8005304 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <get_ldnumber+0x72>
					vol = (int)i;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3301      	adds	r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	e002      	b.n	800530e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800530c:	693b      	ldr	r3, [r7, #16]
}
 800530e:	4618      	mov	r0, r3
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	70da      	strb	r2, [r3, #3]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f04f 32ff 	mov.w	r2, #4294967295
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff f85e 	bl	80043f8 <move_window>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <check_fs+0x2a>
 8005342:	2304      	movs	r3, #4
 8005344:	e038      	b.n	80053b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3330      	adds	r3, #48	; 0x30
 800534a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe fda2 	bl	8003e98 <ld_word>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <check_fs+0x48>
 8005360:	2303      	movs	r3, #3
 8005362:	e029      	b.n	80053b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800536a:	2be9      	cmp	r3, #233	; 0xe9
 800536c:	d009      	beq.n	8005382 <check_fs+0x66>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005374:	2beb      	cmp	r3, #235	; 0xeb
 8005376:	d11e      	bne.n	80053b6 <check_fs+0x9a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800537e:	2b90      	cmp	r3, #144	; 0x90
 8005380:	d119      	bne.n	80053b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3330      	adds	r3, #48	; 0x30
 8005386:	3336      	adds	r3, #54	; 0x36
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fd9d 	bl	8003ec8 <ld_dword>
 800538e:	4603      	mov	r3, r0
 8005390:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005394:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <check_fs+0xa4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <check_fs+0x82>
 800539a:	2300      	movs	r3, #0
 800539c:	e00c      	b.n	80053b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3330      	adds	r3, #48	; 0x30
 80053a2:	3352      	adds	r3, #82	; 0x52
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe fd8f 	bl	8003ec8 <ld_dword>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <check_fs+0xa8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d101      	bne.n	80053b6 <check_fs+0x9a>
 80053b2:	2300      	movs	r3, #0
 80053b4:	e000      	b.n	80053b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80053b6:	2302      	movs	r3, #2
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	00544146 	.word	0x00544146
 80053c4:	33544146 	.word	0x33544146

080053c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b096      	sub	sp, #88	; 0x58
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff ff58 	bl	8005292 <get_ldnumber>
 80053e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da01      	bge.n	80053ee <find_volume+0x26>
 80053ea:	230b      	movs	r3, #11
 80053ec:	e22e      	b.n	800584c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80053ee:	4aa8      	ldr	r2, [pc, #672]	; (8005690 <find_volume+0x2c8>)
 80053f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <find_volume+0x3a>
 80053fe:	230c      	movs	r3, #12
 8005400:	e224      	b.n	800584c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005406:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01a      	beq.n	800544e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fc9d 	bl	8003d5c <disk_status>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10c      	bne.n	800544e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <find_volume+0x82>
 800543a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005446:	230a      	movs	r3, #10
 8005448:	e200      	b.n	800584c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800544a:	2300      	movs	r3, #0
 800544c:	e1fe      	b.n	800584c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fc95 	bl	8003d90 <disk_initialize>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800546c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005478:	2303      	movs	r3, #3
 800547a:	e1e7      	b.n	800584c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <find_volume+0xca>
 8005482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800548e:	230a      	movs	r3, #10
 8005490:	e1dc      	b.n	800584c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800549a:	f7ff ff3f 	bl	800531c <check_fs>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80054a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d14b      	bne.n	8005544 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054ac:	2300      	movs	r3, #0
 80054ae:	643b      	str	r3, [r7, #64]	; 0x40
 80054b0:	e01f      	b.n	80054f2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80054b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80054c0:	4413      	add	r3, r2
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	3304      	adds	r3, #4
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d006      	beq.n	80054dc <find_volume+0x114>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	3308      	adds	r3, #8
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe fcf8 	bl	8003ec8 <ld_dword>
 80054d8:	4602      	mov	r2, r0
 80054da:	e000      	b.n	80054de <find_volume+0x116>
 80054dc:	2200      	movs	r2, #0
 80054de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80054e6:	440b      	add	r3, r1
 80054e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	3301      	adds	r3, #1
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
 80054f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d9dc      	bls.n	80054b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80054f8:	2300      	movs	r3, #0
 80054fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80054fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <find_volume+0x140>
 8005502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005504:	3b01      	subs	r3, #1
 8005506:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005510:	4413      	add	r3, r2
 8005512:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005516:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <find_volume+0x162>
 800551e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005522:	f7ff fefb 	bl	800531c <check_fs>
 8005526:	4603      	mov	r3, r0
 8005528:	e000      	b.n	800552c <find_volume+0x164>
 800552a:	2303      	movs	r3, #3
 800552c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005534:	2b01      	cmp	r3, #1
 8005536:	d905      	bls.n	8005544 <find_volume+0x17c>
 8005538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553a:	3301      	adds	r3, #1
 800553c:	643b      	str	r3, [r7, #64]	; 0x40
 800553e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005540:	2b03      	cmp	r3, #3
 8005542:	d9e1      	bls.n	8005508 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005548:	2b04      	cmp	r3, #4
 800554a:	d101      	bne.n	8005550 <find_volume+0x188>
 800554c:	2301      	movs	r3, #1
 800554e:	e17d      	b.n	800584c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005554:	2b01      	cmp	r3, #1
 8005556:	d901      	bls.n	800555c <find_volume+0x194>
 8005558:	230d      	movs	r3, #13
 800555a:	e177      	b.n	800584c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	3330      	adds	r3, #48	; 0x30
 8005560:	330b      	adds	r3, #11
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fc98 	bl	8003e98 <ld_word>
 8005568:	4603      	mov	r3, r0
 800556a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556e:	d001      	beq.n	8005574 <find_volume+0x1ac>
 8005570:	230d      	movs	r3, #13
 8005572:	e16b      	b.n	800584c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	3330      	adds	r3, #48	; 0x30
 8005578:	3316      	adds	r3, #22
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fc8c 	bl	8003e98 <ld_word>
 8005580:	4603      	mov	r3, r0
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <find_volume+0x1d0>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	3330      	adds	r3, #48	; 0x30
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fc99 	bl	8003ec8 <ld_dword>
 8005596:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800559c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d005      	beq.n	80055bc <find_volume+0x1f4>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	789b      	ldrb	r3, [r3, #2]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d001      	beq.n	80055bc <find_volume+0x1f4>
 80055b8:	230d      	movs	r3, #13
 80055ba:	e147      	b.n	800584c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	789b      	ldrb	r3, [r3, #2]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	fb02 f303 	mul.w	r3, r2, r3
 80055c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	895b      	ldrh	r3, [r3, #10]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <find_volume+0x228>
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	895b      	ldrh	r3, [r3, #10]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	895b      	ldrh	r3, [r3, #10]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <find_volume+0x22c>
 80055f0:	230d      	movs	r3, #13
 80055f2:	e12b      	b.n	800584c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	3330      	adds	r3, #48	; 0x30
 80055f8:	3311      	adds	r3, #17
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fc4c 	bl	8003e98 <ld_word>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	891b      	ldrh	r3, [r3, #8]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <find_volume+0x252>
 8005616:	230d      	movs	r3, #13
 8005618:	e118      	b.n	800584c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	3330      	adds	r3, #48	; 0x30
 800561e:	3313      	adds	r3, #19
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe fc39 	bl	8003e98 <ld_word>
 8005626:	4603      	mov	r3, r0
 8005628:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800562a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <find_volume+0x276>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	3330      	adds	r3, #48	; 0x30
 8005634:	3320      	adds	r3, #32
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fc46 	bl	8003ec8 <ld_dword>
 800563c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	3330      	adds	r3, #48	; 0x30
 8005642:	330e      	adds	r3, #14
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fc27 	bl	8003e98 <ld_word>
 800564a:	4603      	mov	r3, r0
 800564c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800564e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <find_volume+0x290>
 8005654:	230d      	movs	r3, #13
 8005656:	e0f9      	b.n	800584c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005658:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800565a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565c:	4413      	add	r3, r2
 800565e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005660:	8912      	ldrh	r2, [r2, #8]
 8005662:	0912      	lsrs	r2, r2, #4
 8005664:	b292      	uxth	r2, r2
 8005666:	4413      	add	r3, r2
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800566a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	429a      	cmp	r2, r3
 8005670:	d201      	bcs.n	8005676 <find_volume+0x2ae>
 8005672:	230d      	movs	r3, #13
 8005674:	e0ea      	b.n	800584c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567e:	8952      	ldrh	r2, [r2, #10]
 8005680:	fbb3 f3f2 	udiv	r3, r3, r2
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <find_volume+0x2cc>
 800568c:	230d      	movs	r3, #13
 800568e:	e0dd      	b.n	800584c <find_volume+0x484>
 8005690:	200000a8 	.word	0x200000a8
		fmt = FS_FAT32;
 8005694:	2303      	movs	r3, #3
 8005696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d802      	bhi.n	80056aa <find_volume+0x2e2>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d802      	bhi.n	80056ba <find_volume+0x2f2>
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056cc:	441a      	add	r2, r3
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80056d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	441a      	add	r2, r3
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80056dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d11e      	bne.n	8005722 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	3330      	adds	r3, #48	; 0x30
 80056e8:	332a      	adds	r3, #42	; 0x2a
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fbd4 	bl	8003e98 <ld_word>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <find_volume+0x332>
 80056f6:	230d      	movs	r3, #13
 80056f8:	e0a8      	b.n	800584c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	891b      	ldrh	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <find_volume+0x33e>
 8005702:	230d      	movs	r3, #13
 8005704:	e0a2      	b.n	800584c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	3330      	adds	r3, #48	; 0x30
 800570a:	332c      	adds	r3, #44	; 0x2c
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fbdb 	bl	8003ec8 <ld_dword>
 8005712:	4602      	mov	r2, r0
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
 8005720:	e01f      	b.n	8005762 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	891b      	ldrh	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <find_volume+0x366>
 800572a:	230d      	movs	r3, #13
 800572c:	e08e      	b.n	800584c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	441a      	add	r2, r3
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800573a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800573e:	2b02      	cmp	r3, #2
 8005740:	d103      	bne.n	800574a <find_volume+0x382>
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	e00a      	b.n	8005760 <find_volume+0x398>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	4613      	mov	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4413      	add	r3, r2
 8005754:	085a      	lsrs	r2, r3, #1
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005768:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800576c:	0a5b      	lsrs	r3, r3, #9
 800576e:	429a      	cmp	r2, r3
 8005770:	d201      	bcs.n	8005776 <find_volume+0x3ae>
 8005772:	230d      	movs	r3, #13
 8005774:	e06a      	b.n	800584c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	f04f 32ff 	mov.w	r2, #4294967295
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800578c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005790:	2b03      	cmp	r3, #3
 8005792:	d149      	bne.n	8005828 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	3330      	adds	r3, #48	; 0x30
 8005798:	3330      	adds	r3, #48	; 0x30
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fb7c 	bl	8003e98 <ld_word>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d140      	bne.n	8005828 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80057a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a8:	3301      	adds	r3, #1
 80057aa:	4619      	mov	r1, r3
 80057ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057ae:	f7fe fe23 	bl	80043f8 <move_window>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d137      	bne.n	8005828 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	2200      	movs	r2, #0
 80057bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	3330      	adds	r3, #48	; 0x30
 80057c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fb66 	bl	8003e98 <ld_word>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d127      	bne.n	8005828 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	3330      	adds	r3, #48	; 0x30
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fb73 	bl	8003ec8 <ld_dword>
 80057e2:	4603      	mov	r3, r0
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <find_volume+0x48c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d11e      	bne.n	8005828 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	3330      	adds	r3, #48	; 0x30
 80057ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fb68 	bl	8003ec8 <ld_dword>
 80057f8:	4603      	mov	r3, r0
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <find_volume+0x490>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	3330      	adds	r3, #48	; 0x30
 8005804:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe fb5d 	bl	8003ec8 <ld_dword>
 800580e:	4602      	mov	r2, r0
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	3330      	adds	r3, #48	; 0x30
 8005818:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fb53 	bl	8003ec8 <ld_dword>
 8005822:	4602      	mov	r2, r0
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800582e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <find_volume+0x494>)
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <find_volume+0x494>)
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <find_volume+0x494>)
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005846:	f7fe fd6f 	bl	8004328 <clear_lock>
#endif
	return FR_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3758      	adds	r7, #88	; 0x58
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	41615252 	.word	0x41615252
 8005858:	61417272 	.word	0x61417272
 800585c:	200000ac 	.word	0x200000ac

08005860 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800586a:	2309      	movs	r3, #9
 800586c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01c      	beq.n	80058ae <validate+0x4e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d018      	beq.n	80058ae <validate+0x4e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d013      	beq.n	80058ae <validate+0x4e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	889a      	ldrh	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	88db      	ldrh	r3, [r3, #6]
 8005890:	429a      	cmp	r2, r3
 8005892:	d10c      	bne.n	80058ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fa5e 	bl	8003d5c <disk_status>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <validate+0x4e>
			res = FR_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <validate+0x5a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	e000      	b.n	80058bc <validate+0x5c>
 80058ba:	2300      	movs	r3, #0
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	6013      	str	r3, [r2, #0]
	return res;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b098      	sub	sp, #96	; 0x60
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <f_open+0x18>
 80058de:	2309      	movs	r3, #9
 80058e0:	e1ad      	b.n	8005c3e <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80058ea:	79fa      	ldrb	r2, [r7, #7]
 80058ec:	f107 0110 	add.w	r1, r7, #16
 80058f0:	f107 0308 	add.w	r3, r7, #8
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fd67 	bl	80053c8 <find_volume>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 8191 	bne.w	8005c2c <f_open+0x362>
		dj.obj.fs = fs;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fc4a 	bl	80051b0 <follow_path>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005926:	2b00      	cmp	r3, #0
 8005928:	d11a      	bne.n	8005960 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800592a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800592e:	b25b      	sxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	da03      	bge.n	800593c <f_open+0x72>
				res = FR_INVALID_NAME;
 8005934:	2306      	movs	r3, #6
 8005936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800593a:	e011      	b.n	8005960 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf14      	ite	ne
 8005946:	2301      	movne	r3, #1
 8005948:	2300      	moveq	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	f107 0314 	add.w	r3, r7, #20
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fb9f 	bl	8004098 <chk_lock>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	f003 031c 	and.w	r3, r3, #28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d07f      	beq.n	8005a6a <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800596a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800596e:	2b00      	cmp	r3, #0
 8005970:	d017      	beq.n	80059a2 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005976:	2b04      	cmp	r3, #4
 8005978:	d10e      	bne.n	8005998 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800597a:	f7fe fbe9 	bl	8004150 <enq_lock>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <f_open+0xc8>
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fb2d 	bl	8004fe8 <dir_register>
 800598e:	4603      	mov	r3, r0
 8005990:	e000      	b.n	8005994 <f_open+0xca>
 8005992:	2312      	movs	r3, #18
 8005994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f043 0308 	orr.w	r3, r3, #8
 800599e:	71fb      	strb	r3, [r7, #7]
 80059a0:	e010      	b.n	80059c4 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80059a2:	7ebb      	ldrb	r3, [r7, #26]
 80059a4:	f003 0311 	and.w	r3, r3, #17
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <f_open+0xea>
					res = FR_DENIED;
 80059ac:	2307      	movs	r3, #7
 80059ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059b2:	e007      	b.n	80059c4 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <f_open+0xfa>
 80059be:	2308      	movs	r3, #8
 80059c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80059c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d168      	bne.n	8005a9e <f_open+0x1d4>
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d063      	beq.n	8005a9e <f_open+0x1d4>
				dw = GET_FATTIME();
 80059d6:	f001 fc9b 	bl	8007310 <get_fattime>
 80059da:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80059dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059de:	330e      	adds	r3, #14
 80059e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe faae 	bl	8003f44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	3316      	adds	r3, #22
 80059ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe faa8 	bl	8003f44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	330b      	adds	r3, #11
 80059f8:	2220      	movs	r2, #32
 80059fa:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff f9ff 	bl	8004e06 <ld_clust>
 8005a08:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fa17 	bl	8004e44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	331c      	adds	r3, #28
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fa91 	bl	8003f44 <st_dword>
					fs->wflag = 1;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2201      	movs	r2, #1
 8005a26:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d037      	beq.n	8005a9e <f_open+0x1d4>
						dw = fs->winsect;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	2200      	movs	r2, #0
 8005a3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe ff2a 	bl	8004896 <remove_chain>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d126      	bne.n	8005a9e <f_open+0x1d4>
							res = move_window(fs, dw);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fccf 	bl	80043f8 <move_window>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a64:	3a01      	subs	r2, #1
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	e019      	b.n	8005a9e <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d115      	bne.n	8005a9e <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005a72:	7ebb      	ldrb	r3, [r7, #26]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005a82:	e00c      	b.n	8005a9e <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <f_open+0x1d4>
 8005a8e:	7ebb      	ldrb	r3, [r7, #26]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <f_open+0x1d4>
						res = FR_DENIED;
 8005a98:	2307      	movs	r3, #7
 8005a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d128      	bne.n	8005af8 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f107 0314 	add.w	r3, r7, #20
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fb58 	bl	8004194 <inc_lock>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <f_open+0x22e>
 8005af2:	2302      	movs	r3, #2
 8005af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 8095 	bne.w	8005c2c <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff f97c 	bl	8004e06 <ld_clust>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	331c      	adds	r3, #28
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe f9d5 	bl	8003ec8 <ld_dword>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	88da      	ldrh	r2, [r3, #6]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	79fa      	ldrb	r2, [r7, #7]
 8005b3c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3330      	adds	r3, #48	; 0x30
 8005b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fa3f 	bl	8003fde <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d060      	beq.n	8005c2c <f_open+0x362>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d05c      	beq.n	8005c2c <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	895b      	ldrh	r3, [r3, #10]
 8005b7e:	025b      	lsls	r3, r3, #9
 8005b80:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b8e:	e016      	b.n	8005bbe <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe fcea 	bl	800456e <get_fat>
 8005b9a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d802      	bhi.n	8005ba8 <f_open+0x2de>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d102      	bne.n	8005bb6 <f_open+0x2ec>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005bb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <f_open+0x304>
 8005bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d8e0      	bhi.n	8005b90 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bd2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d127      	bne.n	8005c2c <f_open+0x362>
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d022      	beq.n	8005c2c <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fca0 	bl	8004530 <clust2sect>
 8005bf0:	6478      	str	r0, [r7, #68]	; 0x44
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d103      	bne.n	8005c00 <f_open+0x336>
						res = FR_INT_ERR;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005bfe:	e015      	b.n	8005c2c <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	0a5a      	lsrs	r2, r3, #9
 8005c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c06:	441a      	add	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	7858      	ldrb	r0, [r3, #1]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1a      	ldr	r2, [r3, #32]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f7fe f8de 	bl	8003ddc <disk_read>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <f_open+0x362>
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <f_open+0x370>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3760      	adds	r7, #96	; 0x60
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08c      	sub	sp, #48	; 0x30
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f107 0210 	add.w	r2, r7, #16
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fdfa 	bl	8005860 <validate>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d107      	bne.n	8005c8a <f_write+0x44>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	7d5b      	ldrb	r3, [r3, #21]
 8005c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <f_write+0x4a>
 8005c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c8e:	e14b      	b.n	8005f28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	7d1b      	ldrb	r3, [r3, #20]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <f_write+0x5a>
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	e143      	b.n	8005f28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	f080 812d 	bcs.w	8005f0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005cba:	e127      	b.n	8005f0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 80e3 	bne.w	8005e90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	8952      	ldrh	r2, [r2, #10]
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d143      	bne.n	8005d68 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10c      	bne.n	8005d02 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11a      	bne.n	8005d2a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fe31 	bl	8004960 <create_chain>
 8005cfe:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d00:	e013      	b.n	8005d2a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7fe febd 	bl	8004a90 <clmt_clust>
 8005d16:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d18:	e007      	b.n	8005d2a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f7fe fe1c 	bl	8004960 <create_chain>
 8005d28:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80f2 	beq.w	8005f16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d104      	bne.n	8005d42 <f_write+0xfc>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	755a      	strb	r2, [r3, #21]
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0f2      	b.n	8005f28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d104      	bne.n	8005d54 <f_write+0x10e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	755a      	strb	r2, [r3, #21]
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0e9      	b.n	8005f28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <f_write+0x122>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	7d1b      	ldrb	r3, [r3, #20]
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da18      	bge.n	8005da4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	7858      	ldrb	r0, [r3, #1]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	2301      	movs	r3, #1
 8005d82:	f7fe f84b 	bl	8003e1c <disk_write>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <f_write+0x150>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	755a      	strb	r2, [r3, #21]
 8005d92:	2301      	movs	r3, #1
 8005d94:	e0c8      	b.n	8005f28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	7d1b      	ldrb	r3, [r3, #20]
 8005d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7fe fbbf 	bl	8004530 <clust2sect>
 8005db2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <f_write+0x17e>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	755a      	strb	r2, [r3, #21]
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0b1      	b.n	8005f28 <f_write+0x2e2>
			sect += csect;
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	0a5b      	lsrs	r3, r3, #9
 8005dd0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d03c      	beq.n	8005e52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	4413      	add	r3, r2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	8952      	ldrh	r2, [r2, #10]
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d905      	bls.n	8005df2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	895b      	ldrh	r3, [r3, #10]
 8005dea:	461a      	mov	r2, r3
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	7858      	ldrb	r0, [r3, #1]
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	69f9      	ldr	r1, [r7, #28]
 8005dfc:	f7fe f80e 	bl	8003e1c <disk_write>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <f_write+0x1ca>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	755a      	strb	r2, [r3, #21]
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e08b      	b.n	8005f28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d915      	bls.n	8005e4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	025b      	lsls	r3, r3, #9
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	4619      	mov	r1, r3
 8005e38:	f7fe f8b0 	bl	8003f9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	7d1b      	ldrb	r3, [r3, #20]
 8005e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	025b      	lsls	r3, r3, #9
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005e50:	e03f      	b.n	8005ed2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d016      	beq.n	8005e8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d210      	bcs.n	8005e8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	7858      	ldrb	r0, [r3, #1]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e72:	2301      	movs	r3, #1
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	f7fd ffb1 	bl	8003ddc <disk_read>
 8005e7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	755a      	strb	r2, [r3, #21]
 8005e86:	2301      	movs	r3, #1
 8005e88:	e04e      	b.n	8005f28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d901      	bls.n	8005eaa <f_write+0x264>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb8:	4413      	add	r3, r2
 8005eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebc:	69f9      	ldr	r1, [r7, #28]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe f86c 	bl	8003f9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	7d1b      	ldrb	r3, [r3, #20]
 8005ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	4413      	add	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	619a      	str	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	bf38      	it	cc
 8005ef2:	461a      	movcc	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	441a      	add	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f47f aed4 	bne.w	8005cbc <f_write+0x76>
 8005f14:	e000      	b.n	8005f18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	7d1b      	ldrb	r3, [r3, #20]
 8005f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3730      	adds	r7, #48	; 0x30
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f107 0208 	add.w	r2, r7, #8
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fc8d 	bl	8005860 <validate>
 8005f46:	4603      	mov	r3, r0
 8005f48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d168      	bne.n	8006022 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7d1b      	ldrb	r3, [r3, #20]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d062      	beq.n	8006022 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7d1b      	ldrb	r3, [r3, #20]
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da15      	bge.n	8005f92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	7858      	ldrb	r0, [r3, #1]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1a      	ldr	r2, [r3, #32]
 8005f74:	2301      	movs	r3, #1
 8005f76:	f7fd ff51 	bl	8003e1c <disk_write>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <f_sync+0x54>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e04f      	b.n	8006024 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	7d1b      	ldrb	r3, [r3, #20]
 8005f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005f92:	f001 f9bd 	bl	8007310 <get_fattime>
 8005f96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7fe fa29 	bl	80043f8 <move_window>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d138      	bne.n	8006022 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	330b      	adds	r3, #11
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	330b      	adds	r3, #11
 8005fc0:	f042 0220 	orr.w	r2, r2, #32
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f7fe ff36 	bl	8004e44 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f103 021c 	add.w	r2, r3, #28
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7fd ffad 	bl	8003f44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3316      	adds	r3, #22
 8005fee:	6939      	ldr	r1, [r7, #16]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd ffa7 	bl	8003f44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3312      	adds	r3, #18
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd ff86 	bl	8003f0e <st_word>
					fs->wflag = 1;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2201      	movs	r2, #1
 8006006:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fa22 	bl	8004454 <sync_fs>
 8006010:	4603      	mov	r3, r0
 8006012:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7d1b      	ldrb	r3, [r3, #20]
 8006018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601c:	b2da      	uxtb	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff7b 	bl	8005f30 <f_sync>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d118      	bne.n	8006076 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f107 0208 	add.w	r2, r7, #8
 800604a:	4611      	mov	r1, r2
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fc07 	bl	8005860 <validate>
 8006052:	4603      	mov	r3, r0
 8006054:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10c      	bne.n	8006076 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe f925 	bl	80042b0 <dec_lock>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006076:	7bfb      	ldrb	r3, [r7, #15]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b09e      	sub	sp, #120	; 0x78
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800608c:	f107 010c 	add.w	r1, r7, #12
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	2202      	movs	r2, #2
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff f997 	bl	80053c8 <find_volume>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80060a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 808e 	bne.w	80061ca <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f87a 	bl	80051b0 <follow_path>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80060c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <f_unlink+0x5c>
 80060ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd ffe1 	bl	8004098 <chk_lock>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80060dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d172      	bne.n	80061ca <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80060e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da03      	bge.n	80060f6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80060ee:	2306      	movs	r3, #6
 80060f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80060f4:	e008      	b.n	8006108 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80060f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006102:	2307      	movs	r3, #7
 8006104:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8006108:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800610c:	2b00      	cmp	r3, #0
 800610e:	d134      	bne.n	800617a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fe75 	bl	8004e06 <ld_clust>
 800611c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800611e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d027      	beq.n	800617a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800612e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006130:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8006132:	f107 0310 	add.w	r3, r7, #16
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe fcdd 	bl	8004af8 <dir_sdi>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8006144:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006148:	2b00      	cmp	r3, #0
 800614a:	d116      	bne.n	800617a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800614c:	f107 0310 	add.w	r3, r7, #16
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fe96 	bl	8004e84 <dir_read>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800615e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <f_unlink+0xec>
 8006166:	2307      	movs	r3, #7
 8006168:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800616c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006170:	2b04      	cmp	r3, #4
 8006172:	d102      	bne.n	800617a <f_unlink+0xfa>
 8006174:	2300      	movs	r3, #0
 8006176:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800617a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800617e:	2b00      	cmp	r3, #0
 8006180:	d123      	bne.n	80061ca <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe ff60 	bl	800504c <dir_remove>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8006192:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10c      	bne.n	80061b4 <f_unlink+0x134>
 800619a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80061a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061a4:	2200      	movs	r2, #0
 80061a6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe fb74 	bl	8004896 <remove_chain>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80061b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <f_unlink+0x14a>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe f948 	bl	8004454 <sync_fs>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80061ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3778      	adds	r7, #120	; 0x78
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	2b0a      	cmp	r3, #10
 80061e6:	d103      	bne.n	80061f0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80061e8:	210d      	movs	r1, #13
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fff3 	bl	80061d6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	db25      	blt.n	8006248 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	60fa      	str	r2, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b3c      	cmp	r3, #60	; 0x3c
 800620e:	dd12      	ble.n	8006236 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f103 010c 	add.w	r1, r3, #12
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	f107 0308 	add.w	r3, r7, #8
 8006220:	f7ff fd11 	bl	8005c46 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	d101      	bne.n	8006230 <putc_bfd+0x5a>
 800622c:	2300      	movs	r3, #0
 800622e:	e001      	b.n	8006234 <putc_bfd+0x5e>
 8006230:	f04f 33ff 	mov.w	r3, #4294967295
 8006234:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]
 8006246:	e000      	b.n	800624a <putc_bfd+0x74>
	if (i < 0) return;
 8006248:	bf00      	nop
}
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	db16      	blt.n	800628e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f103 010c 	add.w	r1, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	461a      	mov	r2, r3
 8006270:	f107 030c 	add.w	r3, r7, #12
 8006274:	f7ff fce7 	bl	8005c46 <f_write>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d107      	bne.n	800628e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4293      	cmp	r3, r2
 8006286:	d102      	bne.n	800628e <putc_flush+0x3e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	e001      	b.n	8006292 <putc_flush+0x42>
	return EOF;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80062c4:	b40e      	push	{r1, r2, r3}
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b0a7      	sub	sp, #156	; 0x9c
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80062ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff ffe0 	bl	800629a <putc_init>

	va_start(arp, fmt);
 80062da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80062de:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80062e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80062f0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 81f4 	beq.w	80066e2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 80062fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80062fe:	2b25      	cmp	r3, #37	; 0x25
 8006300:	d008      	beq.n	8006314 <f_printf+0x50>
			putc_bfd(&pb, c);
 8006302:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8006306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff62 	bl	80061d6 <putc_bfd>
			continue;
 8006312:	e1e5      	b.n	80066e0 <f_printf+0x41c>
		}
		w = f = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800631a:	2300      	movs	r3, #0
 800631c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8006320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8006330:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006334:	2b30      	cmp	r3, #48	; 0x30
 8006336:	d10b      	bne.n	8006350 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8006338:	2301      	movs	r3, #1
 800633a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800633e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800634e:	e024      	b.n	800639a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8006350:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006354:	2b2d      	cmp	r3, #45	; 0x2d
 8006356:	d120      	bne.n	800639a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8006358:	2302      	movs	r3, #2
 800635a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800635e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800636e:	e014      	b.n	800639a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8006370:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	461a      	mov	r2, r3
 800637e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006382:	4413      	add	r3, r2
 8006384:	3b30      	subs	r3, #48	; 0x30
 8006386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800638a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800639a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800639e:	2b2f      	cmp	r3, #47	; 0x2f
 80063a0:	d903      	bls.n	80063aa <f_printf+0xe6>
 80063a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80063a6:	2b39      	cmp	r3, #57	; 0x39
 80063a8:	d9e2      	bls.n	8006370 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80063aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80063ae:	2b6c      	cmp	r3, #108	; 0x6c
 80063b0:	d003      	beq.n	80063ba <f_printf+0xf6>
 80063b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80063b6:	2b4c      	cmp	r3, #76	; 0x4c
 80063b8:	d10d      	bne.n	80063d6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80063ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80063be:	f043 0304 	orr.w	r3, r3, #4
 80063c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80063c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80063d6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8183 	beq.w	80066e6 <f_printf+0x422>
		d = c;
 80063e0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80063e4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80063e8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80063ec:	2b60      	cmp	r3, #96	; 0x60
 80063ee:	d908      	bls.n	8006402 <f_printf+0x13e>
 80063f0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80063f4:	2b7a      	cmp	r3, #122	; 0x7a
 80063f6:	d804      	bhi.n	8006402 <f_printf+0x13e>
 80063f8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80063fc:	3b20      	subs	r3, #32
 80063fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8006402:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8006406:	3b42      	subs	r3, #66	; 0x42
 8006408:	2b16      	cmp	r3, #22
 800640a:	f200 8098 	bhi.w	800653e <f_printf+0x27a>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <f_printf+0x150>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	0800651f 	.word	0x0800651f
 8006418:	08006507 	.word	0x08006507
 800641c:	0800652f 	.word	0x0800652f
 8006420:	0800653f 	.word	0x0800653f
 8006424:	0800653f 	.word	0x0800653f
 8006428:	0800653f 	.word	0x0800653f
 800642c:	0800653f 	.word	0x0800653f
 8006430:	0800653f 	.word	0x0800653f
 8006434:	0800653f 	.word	0x0800653f
 8006438:	0800653f 	.word	0x0800653f
 800643c:	0800653f 	.word	0x0800653f
 8006440:	0800653f 	.word	0x0800653f
 8006444:	0800653f 	.word	0x0800653f
 8006448:	08006527 	.word	0x08006527
 800644c:	0800653f 	.word	0x0800653f
 8006450:	0800653f 	.word	0x0800653f
 8006454:	0800653f 	.word	0x0800653f
 8006458:	08006471 	.word	0x08006471
 800645c:	0800653f 	.word	0x0800653f
 8006460:	0800652f 	.word	0x0800652f
 8006464:	0800653f 	.word	0x0800653f
 8006468:	0800653f 	.word	0x0800653f
 800646c:	08006537 	.word	0x08006537
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8006470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	67ba      	str	r2, [r7, #120]	; 0x78
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006480:	e004      	b.n	800648c <f_printf+0x1c8>
 8006482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006486:	3301      	adds	r3, #1
 8006488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800648c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800648e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006492:	4413      	add	r3, r2
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f3      	bne.n	8006482 <f_printf+0x1be>
			if (!(f & 2)) {
 800649a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11a      	bne.n	80064dc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80064a6:	e005      	b.n	80064b4 <f_printf+0x1f0>
 80064a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064ac:	2120      	movs	r1, #32
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fe91 	bl	80061d6 <putc_bfd>
 80064b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d8f0      	bhi.n	80064a8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80064c6:	e009      	b.n	80064dc <f_printf+0x218>
 80064c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fe7d 	bl	80061d6 <putc_bfd>
 80064dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f1      	bne.n	80064c8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80064e4:	e005      	b.n	80064f2 <f_printf+0x22e>
 80064e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064ea:	2120      	movs	r1, #32
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fe72 	bl	80061d6 <putc_bfd>
 80064f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006500:	429a      	cmp	r2, r3
 8006502:	d8f0      	bhi.n	80064e6 <f_printf+0x222>
			continue;
 8006504:	e0ec      	b.n	80066e0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8006506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	67ba      	str	r2, [r7, #120]	; 0x78
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fe5d 	bl	80061d6 <putc_bfd>
 800651c:	e0e0      	b.n	80066e0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800651e:	2302      	movs	r3, #2
 8006520:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006524:	e014      	b.n	8006550 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8006526:	2308      	movs	r3, #8
 8006528:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800652c:	e010      	b.n	8006550 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800652e:	230a      	movs	r3, #10
 8006530:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006534:	e00c      	b.n	8006550 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8006536:	2310      	movs	r3, #16
 8006538:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800653c:	e008      	b.n	8006550 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800653e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8006542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fe44 	bl	80061d6 <putc_bfd>
 800654e:	e0c7      	b.n	80066e0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8006550:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <f_printf+0x2a2>
 800655c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	67ba      	str	r2, [r7, #120]	; 0x78
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	e00c      	b.n	8006580 <f_printf+0x2bc>
 8006566:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800656a:	2b44      	cmp	r3, #68	; 0x44
 800656c:	d104      	bne.n	8006578 <f_printf+0x2b4>
 800656e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006570:	1d1a      	adds	r2, r3, #4
 8006572:	67ba      	str	r2, [r7, #120]	; 0x78
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	e003      	b.n	8006580 <f_printf+0x2bc>
 8006578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	67ba      	str	r2, [r7, #120]	; 0x78
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8006584:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8006588:	2b44      	cmp	r3, #68	; 0x44
 800658a:	d10e      	bne.n	80065aa <f_printf+0x2e6>
 800658c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006590:	2b00      	cmp	r3, #0
 8006592:	da0a      	bge.n	80065aa <f_printf+0x2e6>
			v = 0 - v;
 8006594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006598:	425b      	negs	r3, r3
 800659a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800659e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80065a2:	f043 0308 	orr.w	r3, r3, #8
 80065a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80065b0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80065b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80065bc:	fb02 f201 	mul.w	r2, r2, r1
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80065c6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80065ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80065d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80065da:	2b09      	cmp	r3, #9
 80065dc:	d90b      	bls.n	80065f6 <f_printf+0x332>
 80065de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80065e2:	2b78      	cmp	r3, #120	; 0x78
 80065e4:	d101      	bne.n	80065ea <f_printf+0x326>
 80065e6:	2227      	movs	r2, #39	; 0x27
 80065e8:	e000      	b.n	80065ec <f_printf+0x328>
 80065ea:	2207      	movs	r2, #7
 80065ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80065f0:	4413      	add	r3, r2
 80065f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80065f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006600:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8006604:	3230      	adds	r2, #48	; 0x30
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800660c:	440b      	add	r3, r1
 800660e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8006612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <f_printf+0x35e>
 800661a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800661e:	2b1f      	cmp	r3, #31
 8006620:	d9c6      	bls.n	80065b0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8006622:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <f_printf+0x380>
 800662e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006638:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800663c:	4413      	add	r3, r2
 800663e:	222d      	movs	r2, #45	; 0x2d
 8006640:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8006644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006648:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800664c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <f_printf+0x398>
 8006658:	2330      	movs	r3, #48	; 0x30
 800665a:	e000      	b.n	800665e <f_printf+0x39a>
 800665c:	2320      	movs	r3, #32
 800665e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8006662:	e007      	b.n	8006674 <f_printf+0x3b0>
 8006664:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8006668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fdb1 	bl	80061d6 <putc_bfd>
 8006674:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <f_printf+0x3ce>
 8006680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800668a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800668e:	429a      	cmp	r2, r3
 8006690:	d8e8      	bhi.n	8006664 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8006692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006696:	3b01      	subs	r3, #1
 8006698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800669c:	f107 020c 	add.w	r2, r7, #12
 80066a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a4:	4413      	add	r3, r2
 80066a6:	781a      	ldrb	r2, [r3, #0]
 80066a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fd91 	bl	80061d6 <putc_bfd>
		} while (i);
 80066b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1ea      	bne.n	8006692 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80066bc:	e007      	b.n	80066ce <f_printf+0x40a>
 80066be:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80066c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fd84 	bl	80061d6 <putc_bfd>
 80066ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80066dc:	429a      	cmp	r2, r3
 80066de:	d8ee      	bhi.n	80066be <f_printf+0x3fa>
		c = *fmt++;
 80066e0:	e5fe      	b.n	80062e0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80066e2:	bf00      	nop
 80066e4:	e000      	b.n	80066e8 <f_printf+0x424>
		if (!c) break;
 80066e6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80066e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fdaf 	bl	8006250 <putc_flush>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	379c      	adds	r7, #156	; 0x9c
 80066f8:	46bd      	mov	sp, r7
 80066fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066fe:	b003      	add	sp, #12
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop

08006704 <_ZN3IVT17compare_prechargeEm>:
#include "IVT.h"

[[nodiscard]] IVT::State IVT::compare_precharge(uint32_t const sum_of_cells) noexcept {
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
    static constexpr float kPrechargeMinStartVoltage{ 470.0f };
    static constexpr float kPrechargeMaxEndVoltage{ 450.0f };
    static constexpr uint8_t kHysteresis{ 10 };

    if (is_lost())
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8fe 	bl	8006910 <_ZN3IVT7is_lostEv>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <_ZN3IVT17compare_prechargeEm+0x1a>
        return Lost;
 800671a:	2303      	movs	r3, #3
 800671c:	e07a      	b.n	8006814 <_ZN3IVT17compare_prechargeEm+0x110>

    float const percentage = voltage1 * 100 / voltage2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800681c <_ZN3IVT17compare_prechargeEm+0x118>
 8006728:	ee67 6a87 	vmul.f32	s13, s15, s14
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006736:	edc7 7a05 	vstr	s15, [r7, #20]
    float const match_percentage = voltage2 * 100 / sum_of_cells - 100;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006740:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800681c <_ZN3IVT17compare_prechargeEm+0x118>
 8006744:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006756:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800681c <_ZN3IVT17compare_prechargeEm+0x118>
 800675a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800675e:	edc7 7a04 	vstr	s15, [r7, #16]
    bool const is_voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 8006762:	edd7 7a04 	vldr	s15, [r7, #16]
 8006766:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800676a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006772:	d50a      	bpl.n	800678a <_ZN3IVT17compare_prechargeEm+0x86>
 8006774:	edd7 7a04 	vldr	s15, [r7, #16]
 8006778:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800677c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006784:	dd01      	ble.n	800678a <_ZN3IVT17compare_prechargeEm+0x86>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <_ZN3IVT17compare_prechargeEm+0x88>
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]

    if (percentage >= 95 && is_voltage_match && voltage1 > kPrechargeMinStartVoltage && voltage2 > kPrechargeMinStartVoltage)
 800678e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006792:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006820 <_ZN3IVT17compare_prechargeEm+0x11c>
 8006796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	db18      	blt.n	80067d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d015      	beq.n	80067d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	edd3 7a00 	vldr	s15, [r3]
 80067ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006824 <_ZN3IVT17compare_prechargeEm+0x120>
 80067b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b8:	dd0b      	ble.n	80067d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80067c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006824 <_ZN3IVT17compare_prechargeEm+0x120>
 80067c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	dd01      	ble.n	80067d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <_ZN3IVT17compare_prechargeEm+0xd0>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <_ZN3IVT17compare_prechargeEm+0xd8>
        return Charged;
 80067d8:	2300      	movs	r3, #0
 80067da:	e01b      	b.n	8006814 <_ZN3IVT17compare_prechargeEm+0x110>
    else if (voltage1 < kPrechargeMaxEndVoltage || voltage2 < kPrechargeMaxEndVoltage)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	edd3 7a00 	vldr	s15, [r3]
 80067e2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006828 <_ZN3IVT17compare_prechargeEm+0x124>
 80067e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ee:	d409      	bmi.n	8006804 <_ZN3IVT17compare_prechargeEm+0x100>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80067f6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006828 <_ZN3IVT17compare_prechargeEm+0x124>
 80067fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006802:	d501      	bpl.n	8006808 <_ZN3IVT17compare_prechargeEm+0x104>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <_ZN3IVT17compare_prechargeEm+0x106>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <_ZN3IVT17compare_prechargeEm+0x10e>
        return NotCharged;
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <_ZN3IVT17compare_prechargeEm+0x110>
    else
        return Hysteresis;
 8006812:	2302      	movs	r3, #2
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	42c80000 	.word	0x42c80000
 8006820:	42be0000 	.word	0x42be0000
 8006824:	43eb0000 	.word	0x43eb0000
 8006828:	43e10000 	.word	0x43e10000

0800682c <_ZN3IVT11set_currentEf>:

void IVT::set_current(float const new_current) noexcept {
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	ed87 0a00 	vstr	s0, [r7]
    current = new_current;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	609a      	str	r2, [r3, #8]
    last_update = uwTick;
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <_ZN3IVT11set_currentEf+0x28>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000228 	.word	0x20000228

08006858 <_ZN3IVT11get_currentEv>:

[[nodiscard]] float IVT::get_current() noexcept {
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
    return current;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	ee07 3a90 	vmov	s15, r3
}
 8006868:	eeb0 0a67 	vmov.f32	s0, s15
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <_ZN3IVT12set_voltage1Ef>:

void IVT::set_voltage1(float const new_voltage1) noexcept {
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	ed87 0a00 	vstr	s0, [r7]
    voltage1 = new_voltage1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	601a      	str	r2, [r3, #0]
    last_update = uwTick;
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <_ZN3IVT12set_voltage1Ef+0x28>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000228 	.word	0x20000228

080068a4 <_ZN3IVT12get_voltage1Ev>:

[[nodiscard]] float IVT::get_voltage1() noexcept {
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
    return voltage1;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	ee07 3a90 	vmov	s15, r3
}
 80068b4:	eeb0 0a67 	vmov.f32	s0, s15
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <_ZN3IVT12set_voltage2Ef>:

void IVT::set_voltage2(float const new_voltage2) noexcept {
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	ed87 0a00 	vstr	s0, [r7]
    voltage2 = new_voltage2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	605a      	str	r2, [r3, #4]
    last_update = uwTick;
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <_ZN3IVT12set_voltage2Ef+0x28>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60da      	str	r2, [r3, #12]
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000228 	.word	0x20000228

080068f0 <_ZN3IVT12get_voltage2Ev>:

[[nodiscard]] float IVT::get_voltage2() noexcept {
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
    return voltage2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	ee07 3a90 	vmov	s15, r3
}
 8006900:	eeb0 0a67 	vmov.f32	s0, s15
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <_ZN3IVT7is_lostEv>:

[[nodiscard]] bool IVT::is_lost() noexcept {
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
    static constexpr uint32_t kMaxDelay{ 500 }; // time in ms / ticks

    return uwTick - last_update > kMaxDelay;
 8006918:	4b08      	ldr	r3, [pc, #32]	; (800693c <_ZN3IVT7is_lostEv+0x2c>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006926:	bf8c      	ite	hi
 8006928:	2301      	movhi	r3, #1
 800692a:	2300      	movls	r3, #0
 800692c:	b2db      	uxtb	r3, r3
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	20000228 	.word	0x20000228

08006940 <_ZN10DWTWrapper8delay_usEm>:
#ifndef DWTWRAPPER_H_
#define DWTWRAPPER_H_

class DWTWrapper {
public:
    static void delay_us(uint32_t const microseconds) noexcept {
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
        static const DWTWrapper dwtSingleton;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <_ZN10DWTWrapper8delay_usEm+0x84>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f3bf 8f5b 	dmb	ish
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <_ZN10DWTWrapper8delay_usEm+0x46>
 8006964:	4817      	ldr	r0, [pc, #92]	; (80069c4 <_ZN10DWTWrapper8delay_usEm+0x84>)
 8006966:	f003 fd18 	bl	800a39a <__cxa_guard_acquire>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <_ZN10DWTWrapper8delay_usEm+0x46>
 800697a:	4813      	ldr	r0, [pc, #76]	; (80069c8 <_ZN10DWTWrapper8delay_usEm+0x88>)
 800697c:	f000 f82c 	bl	80069d8 <_ZN10DWTWrapperC1Ev>
 8006980:	4810      	ldr	r0, [pc, #64]	; (80069c4 <_ZN10DWTWrapper8delay_usEm+0x84>)
 8006982:	f003 fd16 	bl	800a3b2 <__cxa_guard_release>
        uint32_t const startTicks = DWT->CYCCNT;
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <_ZN10DWTWrapper8delay_usEm+0x8c>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60fb      	str	r3, [r7, #12]
        uint32_t const delayTicks = (SystemCoreClock / 1'000'000) * microseconds;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <_ZN10DWTWrapper8delay_usEm+0x90>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a10      	ldr	r2, [pc, #64]	; (80069d4 <_ZN10DWTWrapper8delay_usEm+0x94>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	0c9a      	lsrs	r2, r3, #18
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	60bb      	str	r3, [r7, #8]
        while (DWT->CYCCNT - startTicks < delayTicks);
 80069a0:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <_ZN10DWTWrapper8delay_usEm+0x8c>)
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	bf8c      	ite	hi
 80069ae:	2301      	movhi	r3, #1
 80069b0:	2300      	movls	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d000      	beq.n	80069ba <_ZN10DWTWrapper8delay_usEm+0x7a>
 80069b8:	e7f2      	b.n	80069a0 <_ZN10DWTWrapper8delay_usEm+0x60>
    }
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200000e0 	.word	0x200000e0
 80069c8:	200000dc 	.word	0x200000dc
 80069cc:	e0001000 	.word	0xe0001000
 80069d0:	20000020 	.word	0x20000020
 80069d4:	431bde83 	.word	0x431bde83

080069d8 <_ZN10DWTWrapperC1Ev>:

    DWTWrapper(DWTWrapper const&)       = delete;
    void operator=(DWTWrapper const&)   = delete;

private:
    constexpr DWTWrapper() {
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80069e0:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <_ZN10DWTWrapperC1Ev+0x30>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a08      	ldr	r2, [pc, #32]	; (8006a08 <_ZN10DWTWrapperC1Ev+0x30>)
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ea:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80069ec:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <_ZN10DWTWrapperC1Ev+0x34>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a06      	ldr	r2, [pc, #24]	; (8006a0c <_ZN10DWTWrapperC1Ev+0x34>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6013      	str	r3, [r2, #0]
    };
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	e000edf0 	.word	0xe000edf0
 8006a0c:	e0001000 	.word	0xe0001000

08006a10 <_ZN7LTC6811C1EPFvbEPFvPKhjEPFvPhjE>:
 */

#include "LTC6811.h"
#include "DWTWrapper.h"

LTC6811::LTC6811(
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
        void (*chip_select)(bool level),
        void (*spi_transmit)(uint8_t const * tx_buffer, std::size_t size),
        void (*spi_receive)(uint8_t* rx_buffer, std::size_t size)
) : chip_select{ chip_select }, spi_transmit{ spi_transmit }, spi_receive{ spi_receive } {}
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	609a      	str	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	60da      	str	r2, [r3, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <_ZN7LTC68115WRCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE>:

void LTC6811::WRCFG(Group group, RegisterGroup<uint8_t>& register_group) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	72fb      	strb	r3, [r7, #11]
    static constexpr Command commands[]{ { 0b00000000001 }, { 0b00000100100 } };
    write(commands[group], register_group);
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4a05      	ldr	r2, [pc, #20]	; (8006a6c <_ZN7LTC68115WRCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE+0x28>)
 8006a58:	4413      	add	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f90c 	bl	8006c7c <_ZN7LTC68115writeIhEEvRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	0800abb0 	.word	0x0800abb0

08006a70 <_ZN7LTC68115RDCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE>:

bool LTC6811::RDCFG(Group group, RegisterGroup<uint8_t>& register_group) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	72fb      	strb	r3, [r7, #11]
    static constexpr Command commands[]{ { 0b00000000010 }, { 0b00000100110 } };
    return read(commands[group], register_group);
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4a06      	ldr	r2, [pc, #24]	; (8006a9c <_ZN7LTC68115RDCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE+0x2c>)
 8006a84:	4413      	add	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f931 	bl	8006cf2 <_ZN7LTC68114readIhEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>
 8006a90:	4603      	mov	r3, r0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	0800abb8 	.word	0x0800abb8

08006aa0 <_ZN7LTC68114RDCVENS_5GroupERSt5arrayINS_8RegisterItEELj1EE>:

bool LTC6811::RDCV(Group group, RegisterGroup<uint16_t>& register_group) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	72fb      	strb	r3, [r7, #11]
    static constexpr Command commands[]{ { 0b00000000100 }, { 0b00000000110 },
            { 0b00000001000 }, { 0b00000001010 }, { 0b00000001001 }, { 0b00000001011 } };
    return read(commands[group], register_group);
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a06      	ldr	r2, [pc, #24]	; (8006acc <_ZN7LTC68114RDCVENS_5GroupERSt5arrayINS_8RegisterItEELj1EE+0x2c>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f95d 	bl	8006d7a <_ZN7LTC68114readItEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	0800abc0 	.word	0x0800abc0

08006ad0 <_ZN7LTC68115RDAUXENS_5GroupERSt5arrayINS_8RegisterIsEELj1EE>:

bool LTC6811::RDAUX(Group group, RegisterGroup<int16_t>& register_group) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	72fb      	strb	r3, [r7, #11]
    static constexpr Command commands[]{ { 0b00000001100 }, { 0b00000001110 },
            { 0b00000001101 }, { 0b00000001111 } };
    return read(commands[group], register_group);
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a06      	ldr	r2, [pc, #24]	; (8006afc <_ZN7LTC68115RDAUXENS_5GroupERSt5arrayINS_8RegisterIsEELj1EE+0x2c>)
 8006ae4:	4413      	add	r3, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f989 	bl	8006e02 <_ZN7LTC68114readIsEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>
 8006af0:	4603      	mov	r3, r0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	0800abd8 	.word	0x0800abd8

08006b00 <_ZN7LTC68114ADCVEv>:
    static constexpr Command commands[]{ { 0b00000010000 }, { 0b00000010010 },
            { 0b00000001101 }, { 0b00000001111 } };
    return read(commands[group], register_group);
}

void LTC6811::ADCV() {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    static constexpr Command command{ 0b01001100000 | md << 7 | dcp << 4 | ch };
    write(command);
 8006b08:	4903      	ldr	r1, [pc, #12]	; (8006b18 <_ZN7LTC68114ADCVEv+0x18>)
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f890 	bl	8006c30 <_ZN7LTC68115writeERKNS_7CommandE>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	0800abe8 	.word	0x0800abe8

08006b1c <_ZN7LTC68114ADAXEv>:

void LTC6811::ADAX() {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
    static constexpr Command command{ 0b10001100000 | md << 7 | chg };
    write(command);
 8006b24:	4903      	ldr	r1, [pc, #12]	; (8006b34 <_ZN7LTC68114ADAXEv+0x18>)
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f882 	bl	8006c30 <_ZN7LTC68115writeERKNS_7CommandE>
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	0800abec 	.word	0x0800abec

08006b38 <_ZZN7LTC68117wake_upEvENKUltE_clEt>:

void LTC6811::wake_up() noexcept {
    static constexpr uint16_t tREADY{ 10 }, tWAKE{ 400 }; // Time in us
    static constexpr uint16_t tIDLE{ 5 }, tSLEEP{ 2000 }; // Time in ms. tIDLE is rounded down from 5.5, just to be safe.

    static auto toggle_chip_select = [this](uint16_t pulse_length) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
        for (std::size_t i = 0; i < kDaisyChainLength; ++i) {
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d111      	bne.n	8006b72 <_ZZN7LTC68117wake_upEvENKUltE_clEt+0x3a>
    static auto toggle_chip_select = [this](uint16_t pulse_length) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
            chip_select(false);
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2000      	movs	r0, #0
 8006b56:	4798      	blx	r3
            DWTWrapper::delay_us(pulse_length);
 8006b58:	887b      	ldrh	r3, [r7, #2]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fef0 	bl	8006940 <_ZN10DWTWrapper8delay_usEm>
    static auto toggle_chip_select = [this](uint16_t pulse_length) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
            chip_select(true);
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2001      	movs	r0, #1
 8006b68:	4798      	blx	r3
        for (std::size_t i = 0; i < kDaisyChainLength; ++i) {
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e7ea      	b.n	8006b48 <_ZZN7LTC68117wake_upEvENKUltE_clEt+0x10>
        }
    };
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <_ZN7LTC68117wake_upEv>:
void LTC6811::wake_up() noexcept {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
    };
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <_ZN7LTC68117wake_upEv+0xac>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f3bf 8f5b 	dmb	ish
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d010      	beq.n	8006bc2 <_ZN7LTC68117wake_upEv+0x46>
 8006ba0:	4821      	ldr	r0, [pc, #132]	; (8006c28 <_ZN7LTC68117wake_upEv+0xac>)
 8006ba2:	f003 fbfa 	bl	800a39a <__cxa_guard_acquire>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <_ZN7LTC68117wake_upEv+0x46>
 8006bb6:	4a1d      	ldr	r2, [pc, #116]	; (8006c2c <_ZN7LTC68117wake_upEv+0xb0>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	481a      	ldr	r0, [pc, #104]	; (8006c28 <_ZN7LTC68117wake_upEv+0xac>)
 8006bbe:	f003 fbf8 	bl	800a3b2 <__cxa_guard_release>

    if (HAL_GetTick() - last_tick > tSLEEP || last_tick == 0)
 8006bc2:	f7f9 fced 	bl	80005a0 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006bd2:	d803      	bhi.n	8006bdc <_ZN7LTC68117wake_upEv+0x60>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <_ZN7LTC68117wake_upEv+0x64>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <_ZN7LTC68117wake_upEv+0x66>
 8006be0:	2300      	movs	r3, #0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <_ZN7LTC68117wake_upEv+0x76>
        toggle_chip_select(tWAKE);
 8006be6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bea:	4810      	ldr	r0, [pc, #64]	; (8006c2c <_ZN7LTC68117wake_upEv+0xb0>)
 8006bec:	f7ff ffa4 	bl	8006b38 <_ZZN7LTC68117wake_upEvENKUltE_clEt>
 8006bf0:	e010      	b.n	8006c14 <_ZN7LTC68117wake_upEv+0x98>
    else if (HAL_GetTick() - last_tick > tIDLE)
 8006bf2:	f7f9 fcd5 	bl	80005a0 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	bf8c      	ite	hi
 8006c02:	2301      	movhi	r3, #1
 8006c04:	2300      	movls	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <_ZN7LTC68117wake_upEv+0x98>
        toggle_chip_select(tREADY);
 8006c0c:	210a      	movs	r1, #10
 8006c0e:	4807      	ldr	r0, [pc, #28]	; (8006c2c <_ZN7LTC68117wake_upEv+0xb0>)
 8006c10:	f7ff ff92 	bl	8006b38 <_ZZN7LTC68117wake_upEvENKUltE_clEt>

    last_tick = HAL_GetTick();
 8006c14:	f7f9 fcc4 	bl	80005a0 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60da      	str	r2, [r3, #12]
}
 8006c1e:	bf00      	nop
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200000e8 	.word	0x200000e8
 8006c2c:	200000e4 	.word	0x200000e4

08006c30 <_ZN7LTC68115writeERKNS_7CommandE>:

void LTC6811::write(Command const & command) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
    wake_up();
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff ff9e 	bl	8006b7c <_ZN7LTC68117wake_upEv>
    chip_select(false);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2000      	movs	r0, #0
 8006c46:	4798      	blx	r3
    spi_transmit(reinterpret_cast<uint8_t const *>(&command), sizeof(command));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	6838      	ldr	r0, [r7, #0]
 8006c50:	4798      	blx	r3
    for (uint8_t value = 0; value == 0; ) // Poll for ADC complete
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <_ZN7LTC68115writeERKNS_7CommandE+0x3c>
        spi_receive(&value, 1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f107 020f 	add.w	r2, r7, #15
 8006c64:	2101      	movs	r1, #1
 8006c66:	4610      	mov	r0, r2
 8006c68:	4798      	blx	r3
    for (uint8_t value = 0; value == 0; ) // Poll for ADC complete
 8006c6a:	e7f4      	b.n	8006c56 <_ZN7LTC68115writeERKNS_7CommandE+0x26>
    chip_select(true);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2001      	movs	r0, #1
 8006c72:	4798      	blx	r3
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <_ZN7LTC68115writeIhEEvRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>:
    }

    void write(Command const & command);

    template <typename T>
    void write(Command const & command, RegisterGroup<T>& register_group) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
        for (auto& IC : register_group)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	69b8      	ldr	r0, [r7, #24]
 8006c8e:	f000 f8fc 	bl	8006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8006c92:	61f8      	str	r0, [r7, #28]
 8006c94:	69b8      	ldr	r0, [r7, #24]
 8006c96:	f000 f904 	bl	8006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 8006c9a:	6178      	str	r0, [r7, #20]
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d00d      	beq.n	8006cc0 <_ZN7LTC68115writeIhEEvRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x44>
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	613b      	str	r3, [r7, #16]
            IC.PEC = PEC15Calc(IC.data);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f916 	bl	8006edc <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EE>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	80da      	strh	r2, [r3, #6]
        for (auto& IC : register_group)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	e7ed      	b.n	8006c9c <_ZN7LTC68115writeIhEEvRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x20>
        wake_up();
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7ff ff5b 	bl	8006b7c <_ZN7LTC68117wake_upEv>
        chip_select(false);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	4798      	blx	r3
        spi_transmit(reinterpret_cast<uint8_t const *>(&command), sizeof(command));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2104      	movs	r1, #4
 8006cd4:	68b8      	ldr	r0, [r7, #8]
 8006cd6:	4798      	blx	r3
        spi_transmit(reinterpret_cast<uint8_t const *>(&register_group), sizeof(register_group));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2108      	movs	r1, #8
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
        chip_select(true);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	4798      	blx	r3
    }
 8006cea:	bf00      	nop
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <_ZN7LTC68114readIhEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>:
    bool read(Command const & command, RegisterGroup<T>& register_group) {
 8006cf2:	b590      	push	{r4, r7, lr}
 8006cf4:	b089      	sub	sp, #36	; 0x24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
        wake_up();
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff ff3c 	bl	8006b7c <_ZN7LTC68117wake_upEv>
        chip_select(false);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2000      	movs	r0, #0
 8006d0a:	4798      	blx	r3
        spi_transmit(reinterpret_cast<uint8_t const *>(&command), sizeof(command));
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2104      	movs	r1, #4
 8006d12:	68b8      	ldr	r0, [r7, #8]
 8006d14:	4798      	blx	r3
        spi_receive(reinterpret_cast<uint8_t*>(&register_group), sizeof(register_group));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2108      	movs	r1, #8
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
        chip_select(true);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2001      	movs	r0, #1
 8006d26:	4798      	blx	r3
        for (auto& IC : register_group)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	69b8      	ldr	r0, [r7, #24]
 8006d2e:	f000 f8ac 	bl	8006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8006d32:	61f8      	str	r0, [r7, #28]
 8006d34:	69b8      	ldr	r0, [r7, #24]
 8006d36:	f000 f8b4 	bl	8006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 8006d3a:	6178      	str	r0, [r7, #20]
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d015      	beq.n	8006d70 <_ZN7LTC68114readIhEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x7e>
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	613b      	str	r3, [r7, #16]
            if (IC.PEC != PEC15Calc(IC.data))
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	88dc      	ldrh	r4, [r3, #6]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f8c4 	bl	8006edc <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EE>
 8006d54:	4603      	mov	r3, r0
 8006d56:	429c      	cmp	r4, r3
 8006d58:	bf14      	ite	ne
 8006d5a:	2301      	movne	r3, #1
 8006d5c:	2300      	moveq	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <_ZN7LTC68114readIhEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x76>
                return true;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e004      	b.n	8006d72 <_ZN7LTC68114readIhEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x80>
        for (auto& IC : register_group)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	e7e5      	b.n	8006d3c <_ZN7LTC68114readIhEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x4a>
        return false;
 8006d70:	2300      	movs	r3, #0
    }
 8006d72:	4618      	mov	r0, r3
 8006d74:	3724      	adds	r7, #36	; 0x24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd90      	pop	{r4, r7, pc}

08006d7a <_ZN7LTC68114readItEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>:
    bool read(Command const & command, RegisterGroup<T>& register_group) {
 8006d7a:	b590      	push	{r4, r7, lr}
 8006d7c:	b089      	sub	sp, #36	; 0x24
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
        wake_up();
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fef8 	bl	8006b7c <_ZN7LTC68117wake_upEv>
        chip_select(false);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2000      	movs	r0, #0
 8006d92:	4798      	blx	r3
        spi_transmit(reinterpret_cast<uint8_t const *>(&command), sizeof(command));
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2104      	movs	r1, #4
 8006d9a:	68b8      	ldr	r0, [r7, #8]
 8006d9c:	4798      	blx	r3
        spi_receive(reinterpret_cast<uint8_t*>(&register_group), sizeof(register_group));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2108      	movs	r1, #8
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
        chip_select(true);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2001      	movs	r0, #1
 8006dae:	4798      	blx	r3
        for (auto& IC : register_group)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	69b8      	ldr	r0, [r7, #24]
 8006db6:	f000 f8cf 	bl	8006f58 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 8006dba:	61f8      	str	r0, [r7, #28]
 8006dbc:	69b8      	ldr	r0, [r7, #24]
 8006dbe:	f000 f8d7 	bl	8006f70 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 8006dc2:	6178      	str	r0, [r7, #20]
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d015      	beq.n	8006df8 <_ZN7LTC68114readItEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x7e>
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	613b      	str	r3, [r7, #16]
            if (IC.PEC != PEC15Calc(IC.data))
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	88dc      	ldrh	r4, [r3, #6]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f8d8 	bl	8006f8c <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EE>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	429c      	cmp	r4, r3
 8006de0:	bf14      	ite	ne
 8006de2:	2301      	movne	r3, #1
 8006de4:	2300      	moveq	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <_ZN7LTC68114readItEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x76>
                return true;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e004      	b.n	8006dfa <_ZN7LTC68114readItEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x80>
        for (auto& IC : register_group)
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	3308      	adds	r3, #8
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	e7e5      	b.n	8006dc4 <_ZN7LTC68114readItEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x4a>
        return false;
 8006df8:	2300      	movs	r3, #0
    }
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3724      	adds	r7, #36	; 0x24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd90      	pop	{r4, r7, pc}

08006e02 <_ZN7LTC68114readIsEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE>:
    bool read(Command const & command, RegisterGroup<T>& register_group) {
 8006e02:	b590      	push	{r4, r7, lr}
 8006e04:	b089      	sub	sp, #36	; 0x24
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
        wake_up();
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff feb4 	bl	8006b7c <_ZN7LTC68117wake_upEv>
        chip_select(false);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2000      	movs	r0, #0
 8006e1a:	4798      	blx	r3
        spi_transmit(reinterpret_cast<uint8_t const *>(&command), sizeof(command));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2104      	movs	r1, #4
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	4798      	blx	r3
        spi_receive(reinterpret_cast<uint8_t*>(&register_group), sizeof(register_group));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2108      	movs	r1, #8
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
        chip_select(true);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2001      	movs	r0, #1
 8006e36:	4798      	blx	r3
        for (auto& IC : register_group)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	69b8      	ldr	r0, [r7, #24]
 8006e3e:	f000 f8e5 	bl	800700c <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 8006e42:	61f8      	str	r0, [r7, #28]
 8006e44:	69b8      	ldr	r0, [r7, #24]
 8006e46:	f000 f8ed 	bl	8007024 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8006e4a:	6178      	str	r0, [r7, #20]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d015      	beq.n	8006e80 <_ZN7LTC68114readIsEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x7e>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	613b      	str	r3, [r7, #16]
            if (IC.PEC != PEC15Calc(IC.data))
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	88dc      	ldrh	r4, [r3, #6]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f8ee 	bl	8007040 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EE>
 8006e64:	4603      	mov	r3, r0
 8006e66:	429c      	cmp	r4, r3
 8006e68:	bf14      	ite	ne
 8006e6a:	2301      	movne	r3, #1
 8006e6c:	2300      	moveq	r3, #0
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <_ZN7LTC68114readIsEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x76>
                return true;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e004      	b.n	8006e82 <_ZN7LTC68114readIsEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x80>
        for (auto& IC : register_group)
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e7e5      	b.n	8006e4c <_ZN7LTC68114readIsEEbRKNS_7CommandERSt5arrayINS_8RegisterIT_EELj1EE+0x4a>
        return false;
 8006e80:	2300      	movs	r3, #0
    }
 8006e82:	4618      	mov	r0, r3
 8006e84:	3724      	adds	r7, #36	; 0x24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd90      	pop	{r4, r7, pc}

08006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f914 	bl	80070c0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f908 	bl	80070c0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <_ZNKSt5arrayIhLj6EEixEj>:
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f905 	bl	80070da <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EE>:
        0x0AF8, 0xCF61, 0xC453, 0x01CA, 0xD237, 0x17AE, 0x1C9C, 0xD905, 0xFEFF, 0x3B66, 0x3054, 0xF5CD, 0x2630, 0xE3A9, 0xE89B, 0x2D02,
        0xA76F, 0x62F6, 0x69C4, 0xAC5D, 0x7FA0, 0xBA39, 0xB10B, 0x7492, 0x5368, 0x96F1, 0x9DC3, 0x585A, 0x8BA7, 0x4E3E, 0x450C, 0x8095
    };

    template <typename T, size_t S>
    [[nodiscard]] static constexpr uint16_t PEC15Calc(std::array<T, S> const & data) noexcept {
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
        uint16_t PEC{ 16 }, addr{ 0 };
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	81fb      	strh	r3, [r7, #14]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	817b      	strh	r3, [r7, #10]
            for (uint8_t i = 0; i < sizeof(data); ++i) {
                addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
                PEC = PEC << 8 ^ crc15Table[addr];
            }
        } else {
            for (uint8_t i = 0; i < sizeof(data); ++i) {
 8006eec:	2300      	movs	r3, #0
 8006eee:	737b      	strb	r3, [r7, #13]
 8006ef0:	7b7b      	ldrb	r3, [r7, #13]
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d81e      	bhi.n	8006f34 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EE+0x58>
                addr = (PEC >> 7 ^ data[i]) & 0xFF;
 8006ef6:	89fb      	ldrh	r3, [r7, #14]
 8006ef8:	11db      	asrs	r3, r3, #7
 8006efa:	b21c      	sxth	r4, r3
 8006efc:	7b7b      	ldrb	r3, [r7, #13]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ffdb 	bl	8006ebc <_ZNKSt5arrayIhLj6EEixEj>
 8006f06:	4603      	mov	r3, r0
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	4063      	eors	r3, r4
 8006f0e:	b21b      	sxth	r3, r3
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	817b      	strh	r3, [r7, #10]
                PEC = PEC << 8 ^ crc15Table[addr];
 8006f16:	89fb      	ldrh	r3, [r7, #14]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	b21a      	sxth	r2, r3
 8006f1c:	897b      	ldrh	r3, [r7, #10]
 8006f1e:	490d      	ldr	r1, [pc, #52]	; (8006f54 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EE+0x78>)
 8006f20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006f24:	b21b      	sxth	r3, r3
 8006f26:	4053      	eors	r3, r2
 8006f28:	b21b      	sxth	r3, r3
 8006f2a:	81fb      	strh	r3, [r7, #14]
            for (uint8_t i = 0; i < sizeof(data); ++i) {
 8006f2c:	7b7b      	ldrb	r3, [r7, #13]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	737b      	strb	r3, [r7, #13]
 8006f32:	e7dd      	b.n	8006ef0 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EE+0x14>
            }
        }

        PEC <<= 1; // The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	81fb      	strh	r3, [r7, #14]
        return (PEC << 8 & 0xFF00) | (PEC >> 8);
 8006f3a:	89fb      	ldrh	r3, [r7, #14]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	b21a      	sxth	r2, r3
 8006f40:	89fb      	ldrh	r3, [r7, #14]
 8006f42:	121b      	asrs	r3, r3, #8
 8006f44:	b21b      	sxth	r3, r3
 8006f46:	4313      	orrs	r3, r2
 8006f48:	b21b      	sxth	r3, r3
 8006f4a:	b29b      	uxth	r3, r3
    }
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd90      	pop	{r4, r7, pc}
 8006f54:	0800a9b0 	.word	0x0800a9b0

08006f58 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>:
      begin() noexcept
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8c8 	bl	80070f6 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 8006f66:	4603      	mov	r3, r0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>:
      end() noexcept
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f8bc 	bl	80070f6 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	3308      	adds	r3, #8
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EE>:
    [[nodiscard]] static constexpr uint16_t PEC15Calc(std::array<T, S> const & data) noexcept {
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
        uint16_t PEC{ 16 }, addr{ 0 };
 8006f94:	2310      	movs	r3, #16
 8006f96:	82fb      	strh	r3, [r7, #22]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	827b      	strh	r3, [r7, #18]
            auto serialized = reinterpret_cast<uint8_t const*>(&data);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]
            for (uint8_t i = 0; i < sizeof(data); ++i) {
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	757b      	strb	r3, [r7, #21]
 8006fa4:	7d7b      	ldrb	r3, [r7, #21]
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	d81b      	bhi.n	8006fe2 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EE+0x56>
                addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8006faa:	8afb      	ldrh	r3, [r7, #22]
 8006fac:	11db      	asrs	r3, r3, #7
 8006fae:	b21a      	sxth	r2, r3
 8006fb0:	7d7b      	ldrb	r3, [r7, #21]
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	440b      	add	r3, r1
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	4053      	eors	r3, r2
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	827b      	strh	r3, [r7, #18]
                PEC = PEC << 8 ^ crc15Table[addr];
 8006fc4:	8afb      	ldrh	r3, [r7, #22]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	b21a      	sxth	r2, r3
 8006fca:	8a7b      	ldrh	r3, [r7, #18]
 8006fcc:	490e      	ldr	r1, [pc, #56]	; (8007008 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EE+0x7c>)
 8006fce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	4053      	eors	r3, r2
 8006fd6:	b21b      	sxth	r3, r3
 8006fd8:	82fb      	strh	r3, [r7, #22]
            for (uint8_t i = 0; i < sizeof(data); ++i) {
 8006fda:	7d7b      	ldrb	r3, [r7, #21]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	757b      	strb	r3, [r7, #21]
 8006fe0:	e7e0      	b.n	8006fa4 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EE+0x18>
        PEC <<= 1; // The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8006fe2:	8afb      	ldrh	r3, [r7, #22]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	82fb      	strh	r3, [r7, #22]
        return (PEC << 8 & 0xFF00) | (PEC >> 8);
 8006fe8:	8afb      	ldrh	r3, [r7, #22]
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	b21a      	sxth	r2, r3
 8006fee:	8afb      	ldrh	r3, [r7, #22]
 8006ff0:	121b      	asrs	r3, r3, #8
 8006ff2:	b21b      	sxth	r3, r3
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	b21b      	sxth	r3, r3
 8006ff8:	b29b      	uxth	r3, r3
    }
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	0800a9b0 	.word	0x0800a9b0

0800700c <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>:
      begin() noexcept
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f87b 	bl	8007110 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 800701a:	4603      	mov	r3, r0
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>:
      end() noexcept
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f86f 	bl	8007110 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 8007032:	4603      	mov	r3, r0
 8007034:	3308      	adds	r3, #8
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EE>:
    [[nodiscard]] static constexpr uint16_t PEC15Calc(std::array<T, S> const & data) noexcept {
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
        uint16_t PEC{ 16 }, addr{ 0 };
 8007048:	2310      	movs	r3, #16
 800704a:	82fb      	strh	r3, [r7, #22]
 800704c:	2300      	movs	r3, #0
 800704e:	827b      	strh	r3, [r7, #18]
            auto serialized = reinterpret_cast<uint8_t const*>(&data);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]
            for (uint8_t i = 0; i < sizeof(data); ++i) {
 8007054:	2300      	movs	r3, #0
 8007056:	757b      	strb	r3, [r7, #21]
 8007058:	7d7b      	ldrb	r3, [r7, #21]
 800705a:	2b05      	cmp	r3, #5
 800705c:	d81b      	bhi.n	8007096 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EE+0x56>
                addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800705e:	8afb      	ldrh	r3, [r7, #22]
 8007060:	11db      	asrs	r3, r3, #7
 8007062:	b21a      	sxth	r2, r3
 8007064:	7d7b      	ldrb	r3, [r7, #21]
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	440b      	add	r3, r1
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b21b      	sxth	r3, r3
 800706e:	4053      	eors	r3, r2
 8007070:	b21b      	sxth	r3, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	b2db      	uxtb	r3, r3
 8007076:	827b      	strh	r3, [r7, #18]
                PEC = PEC << 8 ^ crc15Table[addr];
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	b21a      	sxth	r2, r3
 800707e:	8a7b      	ldrh	r3, [r7, #18]
 8007080:	490e      	ldr	r1, [pc, #56]	; (80070bc <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EE+0x7c>)
 8007082:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007086:	b21b      	sxth	r3, r3
 8007088:	4053      	eors	r3, r2
 800708a:	b21b      	sxth	r3, r3
 800708c:	82fb      	strh	r3, [r7, #22]
            for (uint8_t i = 0; i < sizeof(data); ++i) {
 800708e:	7d7b      	ldrb	r3, [r7, #21]
 8007090:	3301      	adds	r3, #1
 8007092:	757b      	strb	r3, [r7, #21]
 8007094:	e7e0      	b.n	8007058 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EE+0x18>
        PEC <<= 1; // The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	82fb      	strh	r3, [r7, #22]
        return (PEC << 8 & 0xFF00) | (PEC >> 8);
 800709c:	8afb      	ldrh	r3, [r7, #22]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	b21a      	sxth	r2, r3
 80070a2:	8afb      	ldrh	r3, [r7, #22]
 80070a4:	121b      	asrs	r3, r3, #8
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b21b      	sxth	r3, r3
 80070ac:	b29b      	uxth	r3, r3
    }
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	0800a9b0 	.word	0x0800a9b0

080070c0 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f82d 	bl	800712a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>
 80070d0:	4603      	mov	r3, r0
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	4413      	add	r3, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>:
      data() noexcept
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f81d 	bl	8007140 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>
 8007106:	4603      	mov	r3, r0
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>:
      data() noexcept
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f81b 	bl	8007156 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>
 8007120:	4603      	mov	r3, r0
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <_ZN6StatusC1Eh>:
 *      Author: Joshua
 */

#include "Status.h"

Status::Status(uint8_t op_mode) : op_mode{ op_mode } {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	705a      	strb	r2, [r3, #1]
    set_precharge_state(GPIO_PIN_RESET);
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f80a 	bl	80071a0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
    set_AIR_state(GPIO_PIN_RESET);
 800718c:	2100      	movs	r1, #0
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f830 	bl	80071f4 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
};
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>:

void Status::set_precharge_state(GPIO_PinState state) const noexcept {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, state);
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	461a      	mov	r2, r3
 80071b0:	2101      	movs	r1, #1
 80071b2:	4806      	ldr	r0, [pc, #24]	; (80071cc <_ZNK6Status19set_precharge_stateE13GPIO_PinState+0x2c>)
 80071b4:	f7fa fad2 	bl	800175c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, state);
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	461a      	mov	r2, r3
 80071bc:	2102      	movs	r1, #2
 80071be:	4804      	ldr	r0, [pc, #16]	; (80071d0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState+0x30>)
 80071c0:	f7fa facc 	bl	800175c <HAL_GPIO_WritePin>
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	40020400 	.word	0x40020400
 80071d0:	40020800 	.word	0x40020800

080071d4 <_ZNK6Status19get_precharge_stateEv>:

[[nodiscard]] GPIO_PinState Status::get_precharge_state() const noexcept {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(PreCharge_GPIO_Port, PreCharge_Pin);
 80071dc:	2101      	movs	r1, #1
 80071de:	4804      	ldr	r0, [pc, #16]	; (80071f0 <_ZNK6Status19get_precharge_stateEv+0x1c>)
 80071e0:	f7fa faa4 	bl	800172c <HAL_GPIO_ReadPin>
 80071e4:	4603      	mov	r3, r0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40020400 	.word	0x40020400

080071f4 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>:

void Status::set_AIR_state(GPIO_PinState state) const noexcept {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, state);
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	461a      	mov	r2, r3
 8007204:	2102      	movs	r1, #2
 8007206:	4806      	ldr	r0, [pc, #24]	; (8007220 <_ZNK6Status13set_AIR_stateE13GPIO_PinState+0x2c>)
 8007208:	f7fa faa8 	bl	800175c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, state);
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	461a      	mov	r2, r3
 8007210:	2104      	movs	r1, #4
 8007212:	4804      	ldr	r0, [pc, #16]	; (8007224 <_ZNK6Status13set_AIR_stateE13GPIO_PinState+0x30>)
 8007214:	f7fa faa2 	bl	800175c <HAL_GPIO_WritePin>
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40020400 	.word	0x40020400
 8007224:	40020800 	.word	0x40020800

08007228 <_ZNK6Status13get_AIR_stateEv>:

[[nodiscard]] GPIO_PinState Status::get_AIR_state() const noexcept {
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(BMSrelay_GPIO_Port, BMSrelay_Pin);
 8007230:	2102      	movs	r1, #2
 8007232:	4804      	ldr	r0, [pc, #16]	; (8007244 <_ZNK6Status13get_AIR_stateEv+0x1c>)
 8007234:	f7fa fa7a 	bl	800172c <HAL_GPIO_ReadPin>
 8007238:	4603      	mov	r3, r0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	40020400 	.word	0x40020400

08007248 <_ZN6Status8is_errorE5Errorb>:

bool Status::is_error(Error const e, bool const error) noexcept {
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
 8007254:	4613      	mov	r3, r2
 8007256:	70bb      	strb	r3, [r7, #2]
    if (error) {
 8007258:	78bb      	ldrb	r3, [r7, #2]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d040      	beq.n	80072e0 <_ZN6Status8is_errorE5Errorb+0x98>
        ++error_counters[e];
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	441a      	add	r2, r3
 8007264:	7892      	ldrb	r2, [r2, #2]
 8007266:	3201      	adds	r2, #1
 8007268:	b2d1      	uxtb	r1, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	460a      	mov	r2, r1
 8007270:	709a      	strb	r2, [r3, #2]
        if (error_counters[e] > error_limits[e]) {
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	4413      	add	r3, r2
 8007278:	789a      	ldrb	r2, [r3, #2]
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	4923      	ldr	r1, [pc, #140]	; (800730c <_ZN6Status8is_errorE5Errorb+0xc4>)
 800727e:	5ccb      	ldrb	r3, [r1, r3]
 8007280:	429a      	cmp	r2, r3
 8007282:	d93d      	bls.n	8007300 <_ZN6Status8is_errorE5Errorb+0xb8>
            if (e == Limping)
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	2b03      	cmp	r3, #3
 8007288:	d10b      	bne.n	80072a2 <_ZN6Status8is_errorE5Errorb+0x5a>
                error_counters[e] += 9; // Add some amount to the counter when limping so that it takes some time to return to non-limping
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	789a      	ldrb	r2, [r3, #2]
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	3209      	adds	r2, #9
 8007296:	b2d1      	uxtb	r1, r2
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	4413      	add	r3, r2
 800729c:	460a      	mov	r2, r1
 800729e:	709a      	strb	r2, [r3, #2]
 80072a0:	e01a      	b.n	80072d8 <_ZN6Status8is_errorE5Errorb+0x90>
            else {
#if BMS_RELAY_CTRL_BYPASS
                // Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
                if (e != PECError) {
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d007      	beq.n	80072b8 <_ZN6Status8is_errorE5Errorb+0x70>
                    set_AIR_state(GPIO_PIN_RESET);
 80072a8:	2100      	movs	r1, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff ffa2 	bl	80071f4 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
                    set_precharge_state(GPIO_PIN_RESET);
 80072b0:	2100      	movs	r1, #0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff ff74 	bl	80071a0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
#else
                set_AIR_state(GPIO_PIN_RESET);
                setPrechargeState(GPIO_PIN_RESET);
#endif
#if STOP_CORE_ON_SAFE_STATE
                op_mode &= ~Core;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	701a      	strb	r2, [r3, #0]
#endif
#if START_DEBUG_ON_SAFE_STATE
                op_mode |= Debug;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f043 0308 	orr.w	r3, r3, #8
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	701a      	strb	r2, [r3, #0]
#endif
            }
            last_error = e;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	705a      	strb	r2, [r3, #1]
 80072de:	e00f      	b.n	8007300 <_ZN6Status8is_errorE5Errorb+0xb8>
        }
    } else if (error_counters[e] > 0) { // If no error, decrement counter if it is greater than 0.
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	789b      	ldrb	r3, [r3, #2]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d009      	beq.n	8007300 <_ZN6Status8is_errorE5Errorb+0xb8>
        --error_counters[e];
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	441a      	add	r2, r3
 80072f2:	7892      	ldrb	r2, [r2, #2]
 80072f4:	3a01      	subs	r2, #1
 80072f6:	b2d1      	uxtb	r1, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	460a      	mov	r2, r1
 80072fe:	709a      	strb	r2, [r3, #2]
    }

    return error;
 8007300:	78bb      	ldrb	r3, [r7, #2]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	0800abf0 	.word	0x0800abf0

08007310 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
    return 0;
 8007314:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007316:	4618      	mov	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	b25a      	sxtb	r2, r3
 8007330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007334:	4013      	ands	r3, r2
 8007336:	b25b      	sxtb	r3, r3
 8007338:	b2db      	uxtb	r3, r3
  }
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <_ZNSt6atomicImEC1Em>:
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f002 f994 	bl	8009682 <_ZNSt13__atomic_baseImEC1Em>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <_ZN4NLG5C1ER19__CAN_HandleTypeDefR19CAN_TxHeaderTypeDefttt>:

public:
    /*** Bit definitions in NLG5 Control Bitmap (NLG5_CTLB) ***/
    enum { C_CP_V = 1 << 5, C_C_EL = 1 << 6, C_C_EN = 1 << 7 }; // From http://media3.ev-tv.me/BrusaCANbusspec201.pdf

    NLG5(CAN_HandleTypeDef& hcan, CAN_TxHeaderTypeDef& TxHeader, uint16_t const mc_limit = 160, uint16_t const oc_limit = 60, uint16_t const ov_limit = 2990)
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	807b      	strh	r3, [r7, #2]
    : hcan{ hcan }, TxHeader{ TxHeader}, ctrl{ C_C_EN }, mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit }, a_buffer{ 0 }, b_buffer{ 0 } {};
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3308      	adds	r3, #8
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff ffde 	bl	8007346 <_ZNSt6atomicImEC1Em>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2280      	movs	r2, #128	; 0x80
 800738e:	731a      	strb	r2, [r3, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	81da      	strh	r2, [r3, #14]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8b3a      	ldrh	r2, [r7, #24]
 800739a:	821a      	strh	r2, [r3, #16]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8bba      	ldrh	r2, [r7, #28]
 80073a0:	825a      	strh	r2, [r3, #18]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	615a      	str	r2, [r3, #20]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	619a      	str	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZN4NLG516setChargeCurrentEt>:

    void setChargeCurrent(uint16_t const max_voltage) noexcept {
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
        if (max_voltage > kChargerDis)
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	f24a 3248 	movw	r2, #41800	; 0xa348
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d903      	bls.n	80073d6 <_ZN4NLG516setChargeCurrentEt+0x1e>
            ctrl = 0;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	731a      	strb	r2, [r3, #12]
        else if (max_voltage < kChargerEn)
            ctrl = C_C_EN;
    }
 80073d4:	e007      	b.n	80073e6 <_ZN4NLG516setChargeCurrentEt+0x2e>
        else if (max_voltage < kChargerEn)
 80073d6:	887b      	ldrh	r3, [r7, #2]
 80073d8:	f24a 221b 	movw	r2, #41499	; 0xa21b
 80073dc:	4293      	cmp	r3, r2
 80073de:	d802      	bhi.n	80073e6 <_ZN4NLG516setChargeCurrentEt+0x2e>
            ctrl = C_C_EN;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2280      	movs	r2, #128	; 0x80
 80073e4:	731a      	strb	r2, [r3, #12]
    }
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
	...

080073f4 <_ZN4NLG54tickEv>:

    void tick() noexcept {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
        /* Every fifth time the timeout occurs, ctrl is set to a reset command if charger is in fault state. Otherwise it is set to a charge command.  */

#if CAN_ENABLED
        static std::atomic<uint8_t> event_counter{ 0 };

        if (++mCounter >= kChargerEventTimeout) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3308      	adds	r3, #8
 8007400:	4618      	mov	r0, r3
 8007402:	f002 f94d 	bl	80096a0 <_ZNSt13__atomic_baseImEppEv>
 8007406:	4603      	mov	r3, r0
 8007408:	2b63      	cmp	r3, #99	; 0x63
 800740a:	bf8c      	ite	hi
 800740c:	2301      	movhi	r3, #1
 800740e:	2300      	movls	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d06a      	beq.n	80074ec <_ZN4NLG54tickEv+0xf8>
            mCounter = 0;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3308      	adds	r3, #8
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f002 f957 	bl	80096d0 <_ZNSt13__atomic_baseImEaSEm>

            /* Checks specified chargers MOB status */
            if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7d1b      	ldrb	r3, [r3, #20]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b88      	cmp	r3, #136	; 0x88
 800742a:	d004      	beq.n	8007436 <_ZN4NLG54tickEv+0x42>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b98      	cmp	r3, #152	; 0x98
 8007434:	d109      	bne.n	800744a <_ZN4NLG54tickEv+0x56>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7e1b      	ldrb	r3, [r3, #24]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b88      	cmp	r3, #136	; 0x88
 800743e:	d006      	beq.n	800744e <_ZN4NLG54tickEv+0x5a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7e1b      	ldrb	r3, [r3, #24]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b98      	cmp	r3, #152	; 0x98
 8007448:	d001      	beq.n	800744e <_ZN4NLG54tickEv+0x5a>
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <_ZN4NLG54tickEv+0x5c>
 800744e:	2300      	movs	r3, #0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d015      	beq.n	8007480 <_ZN4NLG54tickEv+0x8c>
                if (++event_counter >= 5) {
 8007454:	4827      	ldr	r0, [pc, #156]	; (80074f4 <_ZN4NLG54tickEv+0x100>)
 8007456:	f002 f95b 	bl	8009710 <_ZNSt13__atomic_baseIhEppEv>
 800745a:	4603      	mov	r3, r0
 800745c:	2b04      	cmp	r3, #4
 800745e:	bf8c      	ite	hi
 8007460:	2301      	movhi	r3, #1
 8007462:	2300      	movls	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d007      	beq.n	800747a <_ZN4NLG54tickEv+0x86>
                    ctrl = C_C_EL;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2240      	movs	r2, #64	; 0x40
 800746e:	731a      	strb	r2, [r3, #12]
                    event_counter = 0;
 8007470:	2100      	movs	r1, #0
 8007472:	4820      	ldr	r0, [pc, #128]	; (80074f4 <_ZN4NLG54tickEv+0x100>)
 8007474:	f002 f964 	bl	8009740 <_ZNSt13__atomic_baseIhEaSEh>
 8007478:	e002      	b.n	8007480 <_ZN4NLG54tickEv+0x8c>
                } else {
                    ctrl = C_C_EN;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2280      	movs	r2, #128	; 0x80
 800747e:	731a      	strb	r2, [r3, #12]
                }
            }

            TxHeader.StdId = NLGACtrl;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8007488:	601a      	str	r2, [r3, #0]
            TxHeader.DLC = 7;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2207      	movs	r2, #7
 8007490:	611a      	str	r2, [r3, #16]
            uint32_t mailbox{ 0 };
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]
            uint8_t data[7] {
                ctrl,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7b1b      	ldrb	r3, [r3, #12]
 800749a:	b2db      	uxtb	r3, r3
                static_cast<uint8_t>(mc_limit),
                static_cast<uint8_t>(ov_limit >> 8),
                static_cast<uint8_t>(ov_limit),
                static_cast<uint8_t>(oc_limit >> 8),
                static_cast<uint8_t>(oc_limit)
            };
 800749c:	733b      	strb	r3, [r7, #12]
                static_cast<uint8_t>(mc_limit >> 8),
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	89db      	ldrh	r3, [r3, #14]
 80074a2:	121b      	asrs	r3, r3, #8
            };
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	737b      	strb	r3, [r7, #13]
                static_cast<uint8_t>(mc_limit),
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	89db      	ldrh	r3, [r3, #14]
            };
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	73bb      	strb	r3, [r7, #14]
                static_cast<uint8_t>(ov_limit >> 8),
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8a5b      	ldrh	r3, [r3, #18]
 80074b4:	121b      	asrs	r3, r3, #8
            };
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	73fb      	strb	r3, [r7, #15]
                static_cast<uint8_t>(ov_limit),
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8a5b      	ldrh	r3, [r3, #18]
            };
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	743b      	strb	r3, [r7, #16]
                static_cast<uint8_t>(oc_limit >> 8),
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8a1b      	ldrh	r3, [r3, #16]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	121b      	asrs	r3, r3, #8
            };
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	747b      	strb	r3, [r7, #17]
                static_cast<uint8_t>(oc_limit)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8a1b      	ldrh	r3, [r3, #16]
 80074d2:	b29b      	uxth	r3, r3
            };
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	74bb      	strb	r3, [r7, #18]

            HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &mailbox);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6859      	ldr	r1, [r3, #4]
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	f107 020c 	add.w	r2, r7, #12
 80074e8:	f7f9 fa42 	bl	8000970 <HAL_CAN_AddTxMessage>
        }
#endif
    }
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200000ec 	.word	0x200000ec

080074f8 <_ZN7PWM_FanC1Eh>:
#include <algorithm>
class PWM_Fan {
public:
    enum Mode { Manual, Automatic };

    PWM_Fan(uint8_t const duty_cycle = kLowDutyCycle) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
        setDutyCycle(duty_cycle);
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f822 	bl	8007558 <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <_ZSt5clampIhERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d309      	bcc.n	800754a <_ZSt5clampIhERKT_S2_S2_S2_+0x2c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d201      	bcs.n	8007546 <_ZSt5clampIhERKT_S2_S2_S2_+0x28>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	e002      	b.n	800754c <_ZSt5clampIhERKT_S2_S2_S2_+0x2e>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	e000      	b.n	800754c <_ZSt5clampIhERKT_S2_S2_S2_+0x2e>
 800754a:	68bb      	ldr	r3, [r7, #8]
    }
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <_ZNK7PWM_Fan12setDutyCycleEh>:

    void setDutyCycle(uint8_t const duty_cycle) const noexcept {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
        /* PWM period is 20000 cycles, so the duty cycle is:
         * (duty_cycle / 100) * 20000 or, duty_cycle * 200
         * TODO: This is probably not working right! */
        TIM2->CCR4 = std::clamp(duty_cycle, kMinDutyCycle, kMaxDutyCycle) * 200;
 8007564:	1cfb      	adds	r3, r7, #3
 8007566:	4a09      	ldr	r2, [pc, #36]	; (800758c <_ZNK7PWM_Fan12setDutyCycleEh+0x34>)
 8007568:	4909      	ldr	r1, [pc, #36]	; (8007590 <_ZNK7PWM_Fan12setDutyCycleEh+0x38>)
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ffd7 	bl	800751e <_ZSt5clampIhERKT_S2_S2_S2_>
 8007570:	4603      	mov	r3, r0
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	23c8      	movs	r3, #200	; 0xc8
 8007578:	fb03 f202 	mul.w	r2, r3, r2
 800757c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	0800abfe 	.word	0x0800abfe
 8007590:	0800abfd 	.word	0x0800abfd

08007594 <_ZN7PWM_Fan13calcDutyCycleEs>:


    void calcDutyCycle(int16_t const max_temp) noexcept {
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	460b      	mov	r3, r1
 800759e:	817b      	strh	r3, [r7, #10]
        if (max_temp > kHighTemp)
 80075a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80075a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80075a8:	4293      	cmp	r3, r2
 80075aa:	dd04      	ble.n	80075b6 <_ZN7PWM_Fan13calcDutyCycleEs+0x22>
            setDutyCycle(kMaxDutyCycle);
 80075ac:	2164      	movs	r1, #100	; 0x64
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff ffd2 	bl	8007558 <_ZNK7PWM_Fan12setDutyCycleEh>
        else if (max_temp < kLowTemp)
            setDutyCycle(kLowDutyCycle);
        else
            setDutyCycle(kM * max_temp + kB);

    }
 80075b4:	e021      	b.n	80075fa <_ZN7PWM_Fan13calcDutyCycleEs+0x66>
        else if (max_temp < kLowTemp)
 80075b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80075ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80075be:	da04      	bge.n	80075ca <_ZN7PWM_Fan13calcDutyCycleEs+0x36>
            setDutyCycle(kLowDutyCycle);
 80075c0:	210a      	movs	r1, #10
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff ffc8 	bl	8007558 <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 80075c8:	e017      	b.n	80075fa <_ZN7PWM_Fan13calcDutyCycleEs+0x66>
            setDutyCycle(kM * max_temp + kB);
 80075ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007604 <_ZN7PWM_Fan13calcDutyCycleEs+0x70>
 80075da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075de:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007608 <_ZN7PWM_Fan13calcDutyCycleEs+0x74>
 80075e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80075ee:	793b      	ldrb	r3, [r7, #4]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	4619      	mov	r1, r3
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff ffaf 	bl	8007558 <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	3cb851ec 	.word	0x3cb851ec
 8007608:	420c0000 	.word	0x420c0000

0800760c <_ZN7PWM_Fan7setModeENS_4ModeE>:

    void setMode(Mode const mode) noexcept {
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
        this->mode = mode;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	701a      	strb	r2, [r3, #0]
    }
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <_ZNK7PWM_Fan7getModeEv>:

    [[nodiscard]] Mode getMode() const noexcept {
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
        return mode;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	b2db      	uxtb	r3, r3
    }
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <_ZNK6Status11get_op_modeEv>:

    [[nodiscard]] GPIO_PinState get_AIR_state() const noexcept;

    bool is_error(Error const e, bool const error) noexcept;

    uint8_t get_op_mode() const noexcept {
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
        return op_mode;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	b2db      	uxtb	r3, r3
    }
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <_ZN6Status11set_op_modeE7Op_Mode>:

    void set_op_mode(Op_Mode op_mode) noexcept {
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
        this->op_mode = op_mode;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	701a      	strb	r2, [r3, #0]
    }
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <_ZNK6Status14get_last_errorEv>:

    Error get_last_error() const noexcept {
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
        return last_error;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	785b      	ldrb	r3, [r3, #1]
    }
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <_ZN6Status15get_error_countE5Error>:

    uint8_t get_error_count(Error error) {
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
        return error_counters[error];
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	4413      	add	r3, r2
 80076a6:	789b      	ldrb	r3, [r3, #2]
    }
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <_ZN6Status20get_error_over_limitE5Error>:

    bool get_error_over_limit(Error error) {
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
        return error_counters[error] > error_limits[error];
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	789a      	ldrb	r2, [r3, #2]
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	4906      	ldr	r1, [pc, #24]	; (80076e4 <_ZN6Status20get_error_over_limitE5Error+0x30>)
 80076cc:	5ccb      	ldrb	r3, [r1, r3]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf8c      	ite	hi
 80076d2:	2301      	movhi	r3, #1
 80076d4:	2300      	movls	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
    }
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	0800abf0 	.word	0x0800abf0

080076e8 <_Z10get_uptimev>:
HAL_StatusTypeDef CANTxVoltage(LTC6811::CellData const &);
HAL_StatusTypeDef CANTxTemperature(LTC6811::TempData const &);
HAL_StatusTypeDef CANTxStatus();
HAL_StatusTypeDef CANTxPECError();
HAL_StatusTypeDef CANTxVolumeSize(uint32_t const);
inline auto get_uptime() { return uwTick / 10; }
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_Z10get_uptimev+0x1c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a05      	ldr	r2, [pc, #20]	; (8007708 <_Z10get_uptimev+0x20>)
 80076f2:	fba2 2303 	umull	r2, r3, r2, r3
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000228 	.word	0x20000228
 8007708:	cccccccd 	.word	0xcccccccd

0800770c <HAL_IncTick>:

extern "C" { void HAL_IncTick() {
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <HAL_IncTick+0x44>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <HAL_IncTick+0x48>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4413      	add	r3, r2
 800771c:	4a0d      	ldr	r2, [pc, #52]	; (8007754 <HAL_IncTick+0x48>)
 800771e:	6013      	str	r3, [r2, #0]
    if (nlg5 != nullptr && status.get_op_mode() & Charging)
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <HAL_IncTick+0x4c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d009      	beq.n	800773c <HAL_IncTick+0x30>
 8007728:	480c      	ldr	r0, [pc, #48]	; (800775c <HAL_IncTick+0x50>)
 800772a:	f7ff ff8b 	bl	8007644 <_ZNK6Status11get_op_modeEv>
 800772e:	4603      	mov	r3, r0
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <HAL_IncTick+0x30>
 8007738:	2301      	movs	r3, #1
 800773a:	e000      	b.n	800773e <HAL_IncTick+0x32>
 800773c:	2300      	movs	r3, #0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d004      	beq.n	800774c <HAL_IncTick+0x40>
        nlg5->tick();
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <HAL_IncTick+0x4c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fe54 	bl	80073f4 <_ZN4NLG54tickEv>
}}
 800774c:	bf00      	nop
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000004 	.word	0x20000004
 8007754:	20000228 	.word	0x20000228
 8007758:	200001e0 	.word	0x200001e0
 800775c:	20000200 	.word	0x20000200

08007760 <_ZZ4mainENKUlbE_clEb>:
    //HAL_Delay(5000);
    status.set_precharge_state(GPIO_PIN_SET);
#endif

    ltc6811 = new LTC6811{
        [](bool level) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
            HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, static_cast<GPIO_PinState>(level));
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	461a      	mov	r2, r3
 8007770:	2140      	movs	r1, #64	; 0x40
 8007772:	4803      	ldr	r0, [pc, #12]	; (8007780 <_ZZ4mainENKUlbE_clEb+0x20>)
 8007774:	f7f9 fff2 	bl	800175c <HAL_GPIO_WritePin>
        },
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40020400 	.word	0x40020400

08007784 <_ZZ4mainENUlbE_4_FUNEb>:
        [](bool level) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	71fb      	strb	r3, [r7, #7]
        },
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	4619      	mov	r1, r3
 8007792:	2000      	movs	r0, #0
 8007794:	f7ff ffe4 	bl	8007760 <_ZZ4mainENKUlbE_clEb>
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <_ZZ4mainENKUlbE_cvPFvbEEv>:
        [](bool level) {
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
        },
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <_ZZ4mainENKUlbE_cvPFvbEEv+0x18>)
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	08007785 	.word	0x08007785

080077bc <_ZZ4mainENKUlPKhjE0_clES0_j>:
        [](uint8_t const * tx_buffer, std::size_t size) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
            HAL_SPI_Transmit(&hspi1, tx_buffer, size, HAL_MAX_DELAY);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4803      	ldr	r0, [pc, #12]	; (80077e0 <_ZZ4mainENKUlPKhjE0_clES0_j+0x24>)
 80077d4:	f7fb f820 	bl	8002818 <HAL_SPI_Transmit>
        },
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000148 	.word	0x20000148

080077e4 <_ZZ4mainENUlPKhjE0_4_FUNES0_j>:
        [](uint8_t const * tx_buffer, std::size_t size) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
        },
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	2000      	movs	r0, #0
 80077f4:	f7ff ffe2 	bl	80077bc <_ZZ4mainENKUlPKhjE0_clES0_j>
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <_ZZ4mainENKUlPKhjE0_cvPFvS0_jEEv>:
        [](uint8_t const * tx_buffer, std::size_t size) {
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
        },
 8007808:	4b03      	ldr	r3, [pc, #12]	; (8007818 <_ZZ4mainENKUlPKhjE0_cvPFvS0_jEEv+0x18>)
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	080077e5 	.word	0x080077e5

0800781c <_ZZ4mainENKUlPhjE1_clES_j>:
        [](uint8_t* rx_buffer, std::size_t size) {
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
            HAL_SPI_Receive(&hspi1, rx_buffer, size, HAL_MAX_DELAY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	b29a      	uxth	r2, r3
 800782c:	f04f 33ff 	mov.w	r3, #4294967295
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	4803      	ldr	r0, [pc, #12]	; (8007840 <_ZZ4mainENKUlPhjE1_clES_j+0x24>)
 8007834:	f7fb f924 	bl	8002a80 <HAL_SPI_Receive>
        }
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000148 	.word	0x20000148

08007844 <_ZZ4mainENUlPhjE1_4_FUNES_j>:
        [](uint8_t* rx_buffer, std::size_t size) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
        }
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	2000      	movs	r0, #0
 8007854:	f7ff ffe2 	bl	800781c <_ZZ4mainENKUlPhjE1_clES_j>
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <_ZZ4mainENKUlPhjE1_cvPFvS_jEEv>:
        [](uint8_t* rx_buffer, std::size_t size) {
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
        }
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <_ZZ4mainENKUlPhjE1_cvPFvS_jEEv+0x18>)
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	08007845 	.word	0x08007845

0800787c <_ZNKSt8optionalI13VoltageStatusE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f805 	bl	8007894 <_ZNKSt19_Optional_base_implI13VoltageStatusSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 800788a:	4603      	mov	r3, r0
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <_ZNKSt19_Optional_base_implI13VoltageStatusSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7d1b      	ldrb	r3, [r3, #20]
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <_ZNKSt8optionalI10TempStatusE9has_valueEv>:
      constexpr bool has_value() const noexcept
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f805 	bl	80078c4 <_ZNKSt19_Optional_base_implI10TempStatusSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>
 80078ba:	4603      	mov	r3, r0
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZNKSt19_Optional_base_implI10TempStatusSt14_Optional_baseIS0_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7c1b      	ldrb	r3, [r3, #16]
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <_ZNKSt8optionalI13VoltageStatusEptEv>:
      operator->() const
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f814 	bl	8007912 <_ZNKSt19_Optional_base_implI13VoltageStatusSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 80078ea:	4603      	mov	r3, r0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f805 	bl	80078fc <_ZSt11__addressofIK13VoltageStatusEPT_RS2_>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_ZSt11__addressofIK13VoltageStatusEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <_ZNKSt19_Optional_base_implI13VoltageStatusSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() const noexcept
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 f805 	bl	800792c <_ZNKSt22_Optional_payload_baseI13VoltageStatusE6_M_getEv>
 8007922:	4603      	mov	r3, r0
      }
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <_ZNKSt22_Optional_payload_baseI13VoltageStatusE6_M_getEv>:
      _M_get() const noexcept
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <_ZNKSt8optionalI10TempStatusEptEv>:
      operator->() const
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f814 	bl	8007978 <_ZNKSt19_Optional_base_implI10TempStatusSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 8007950:	4603      	mov	r3, r0
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f805 	bl	8007962 <_ZSt11__addressofIK10TempStatusEPT_RS2_>
 8007958:	4603      	mov	r3, r0
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <_ZSt11__addressofIK10TempStatusEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <_ZNKSt19_Optional_base_implI10TempStatusSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>:
      _M_get() const noexcept
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f805 	bl	8007992 <_ZNKSt22_Optional_payload_baseI10TempStatusE6_M_getEv>
 8007988:	4603      	mov	r3, r0
      }
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <_ZNKSt22_Optional_payload_baseI10TempStatusE6_M_getEv>:
      _M_get() const noexcept
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <main>:
int main() {
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	ed2d 8b02 	vpush	{d8}
 80079b0:	b0c4      	sub	sp, #272	; 0x110
 80079b2:	af04      	add	r7, sp, #16
    HAL_Init();
 80079b4:	f7f8 fda2 	bl	80004fc <HAL_Init>
    SystemClock_Config();
 80079b8:	f000 fc0a 	bl	80081d0 <_ZL18SystemClock_Configv>
    MX_GPIO_Init();
 80079bc:	f000 fe0c 	bl	80085d8 <_ZL12MX_GPIO_Initv>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80079c0:	2201      	movs	r2, #1
 80079c2:	2140      	movs	r1, #64	; 0x40
 80079c4:	48ab      	ldr	r0, [pc, #684]	; (8007c74 <main+0x2cc>)
 80079c6:	f7f9 fec9 	bl	800175c <HAL_GPIO_WritePin>
    MX_CAN1_Init();
 80079ca:	f000 fc9d 	bl	8008308 <_ZL12MX_CAN1_Initv>
    MX_CAN2_Init();
 80079ce:	f000 fce9 	bl	80083a4 <_ZL12MX_CAN2_Initv>
    MX_SPI1_Init();
 80079d2:	f000 fd35 	bl	8008440 <_ZL12MX_SPI1_Initv>
    MX_TIM2_Init();
 80079d6:	f000 fd6f 	bl	80084b8 <_ZL12MX_TIM2_Initv>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80079da:	210c      	movs	r1, #12
 80079dc:	48a6      	ldr	r0, [pc, #664]	; (8007c78 <main+0x2d0>)
 80079de:	f7fb fc69 	bl	80032b4 <HAL_TIM_PWM_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80079e2:	2113      	movs	r1, #19
 80079e4:	48a5      	ldr	r0, [pc, #660]	; (8007c7c <main+0x2d4>)
 80079e6:	f7f9 f9b0 	bl	8000d4a <HAL_CAN_ActivateNotification>
    nlg5 = new NLG5(hcan1, TxHeader);
 80079ea:	201c      	movs	r0, #28
 80079ec:	f002 fce4 	bl	800a3b8 <_Znwj>
 80079f0:	4603      	mov	r3, r0
 80079f2:	461c      	mov	r4, r3
 80079f4:	f640 33ae 	movw	r3, #2990	; 0xbae
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	233c      	movs	r3, #60	; 0x3c
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	23a0      	movs	r3, #160	; 0xa0
 8007a00:	4a9f      	ldr	r2, [pc, #636]	; (8007c80 <main+0x2d8>)
 8007a02:	499e      	ldr	r1, [pc, #632]	; (8007c7c <main+0x2d4>)
 8007a04:	4620      	mov	r0, r4
 8007a06:	f7ff fcad 	bl	8007364 <_ZN4NLG5C1ER19__CAN_HandleTypeDefR19CAN_TxHeaderTypeDefttt>
 8007a0a:	4b9e      	ldr	r3, [pc, #632]	; (8007c84 <main+0x2dc>)
 8007a0c:	601c      	str	r4, [r3, #0]
    pwm_fan = new PWM_Fan;
 8007a0e:	2001      	movs	r0, #1
 8007a10:	f002 fcd2 	bl	800a3b8 <_Znwj>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461c      	mov	r4, r3
 8007a18:	210a      	movs	r1, #10
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff fd6c 	bl	80074f8 <_ZN7PWM_FanC1Eh>
 8007a20:	4b99      	ldr	r3, [pc, #612]	; (8007c88 <main+0x2e0>)
 8007a22:	601c      	str	r4, [r3, #0]
    status.set_AIR_state(GPIO_PIN_SET);
 8007a24:	2101      	movs	r1, #1
 8007a26:	4899      	ldr	r0, [pc, #612]	; (8007c8c <main+0x2e4>)
 8007a28:	f7ff fbe4 	bl	80071f4 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
    status.set_precharge_state(GPIO_PIN_SET);
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4897      	ldr	r0, [pc, #604]	; (8007c8c <main+0x2e4>)
 8007a30:	f7ff fbb6 	bl	80071a0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
    };
 8007a34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff feb1 	bl	80077a0 <_ZZ4mainENKUlbE_cvPFvbEEv>
 8007a3e:	4605      	mov	r5, r0
 8007a40:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fedb 	bl	8007800 <_ZZ4mainENKUlPKhjE0_cvPFvS0_jEEv>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff ff05 	bl	8007860 <_ZZ4mainENKUlPhjE1_cvPFvS_jEEv>
 8007a56:	4680      	mov	r8, r0
 8007a58:	2010      	movs	r0, #16
 8007a5a:	f002 fcad 	bl	800a3b8 <_Znwj>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461c      	mov	r4, r3
 8007a62:	4643      	mov	r3, r8
 8007a64:	4632      	mov	r2, r6
 8007a66:	4629      	mov	r1, r5
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f7fe ffd1 	bl	8006a10 <_ZN7LTC6811C1EPFvbEPFvPKhjEPFvPhjE>
    ltc6811 = new LTC6811{
 8007a6e:	4b88      	ldr	r3, [pc, #544]	; (8007c90 <main+0x2e8>)
 8007a70:	601c      	str	r4, [r3, #0]

    LTC6811::RegisterGroup<uint8_t> default_config{ 0 };
 8007a72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	605a      	str	r2, [r3, #4]
    for (auto& IC : default_config)
 8007a7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007a80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a84:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8007a88:	f7ff f9ff 	bl	8006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8007a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a90:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8007a94:	f7ff fa05 	bl	8006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 8007a98:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8007a9c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d012      	beq.n	8007ace <main+0x126>
 8007aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        IC.data[0] = LTC6811::CFGR0;
 8007ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 fe63 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8007abc:	4603      	mov	r3, r0
 8007abe:	22fe      	movs	r2, #254	; 0xfe
 8007ac0:	701a      	strb	r2, [r3, #0]
    for (auto& IC : default_config)
 8007ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007acc:	e7e6      	b.n	8007a9c <main+0xf4>
    ltc6811->WRCFG(LTC6811::A, default_config);
 8007ace:	4b70      	ldr	r3, [pc, #448]	; (8007c90 <main+0x2e8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe ffb3 	bl	8006a44 <_ZN7LTC68115WRCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE>
    ltc6811->RDCFG(LTC6811::A, default_config);
 8007ade:	4b6c      	ldr	r3, [pc, #432]	; (8007c90 <main+0x2e8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe ffc1 	bl	8006a70 <_ZN7LTC68115RDCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE>

    LTC6811::CellData cell_data{ 0 };
 8007aee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007af2:	2220      	movs	r2, #32
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f002 fdde 	bl	800a6b8 <memset>
    LTC6811::TempData temp_data{ 0 };
 8007afc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	609a      	str	r2, [r3, #8]
 8007b08:	60da      	str	r2, [r3, #12]

    while (true) {
        HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	4861      	ldr	r0, [pc, #388]	; (8007c94 <main+0x2ec>)
 8007b0e:	f7f9 fe3e 	bl	800178e <HAL_GPIO_TogglePin>
        auto const op_mode = status.get_op_mode();
 8007b12:	485e      	ldr	r0, [pc, #376]	; (8007c8c <main+0x2e4>)
 8007b14:	f7ff fd96 	bl	8007644 <_ZNK6Status11get_op_modeEv>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

        /*  Core routine for monitoring voltage and temperature of the cells.  */
        if (op_mode & Core) {
 8007b1e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 81db 	beq.w	8007ee2 <main+0x53a>
            auto const voltage_status = read_cell_data(cell_data);
 8007b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 ff9c 	bl	8008a74 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE>
            auto const temp_status = read_temp_data(temp_data);
 8007b3c:	f107 031c 	add.w	r3, r7, #28
 8007b40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 f8b0 	bl	8008cac <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE>
            // The boolean logic here is confusing, I know, but it's correct. The error handling needs a full rewrite.
            if (!status.is_error(PECError, !voltage_status.has_value()) &&
 8007b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fe93 	bl	800787c <_ZNKSt8optionalI13VoltageStatusE9has_valueEv>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f083 0301 	eor.w	r3, r3, #1
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2109      	movs	r1, #9
 8007b62:	484a      	ldr	r0, [pc, #296]	; (8007c8c <main+0x2e4>)
 8007b64:	f7ff fb70 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f083 0301 	eor.w	r3, r3, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <main+0x1f8>
                    !status.is_error(PECError, !temp_status.has_value())) { // If no PEC errors and we have both statuses
 8007b74:	f107 031c 	add.w	r3, r7, #28
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fe97 	bl	80078ac <_ZNKSt8optionalI10TempStatusE9has_valueEv>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f083 0301 	eor.w	r3, r3, #1
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	2109      	movs	r1, #9
 8007b8a:	4840      	ldr	r0, [pc, #256]	; (8007c8c <main+0x2e4>)
 8007b8c:	f7ff fb5c 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f083 0301 	eor.w	r3, r3, #1
 8007b96:	b2db      	uxtb	r3, r3
            if (!status.is_error(PECError, !voltage_status.has_value()) &&
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <main+0x1f8>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <main+0x1fa>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 8199 	beq.w	8007eda <main+0x532>
                status.is_error(Limping, voltage_status->min < kLimpMinVoltage);
 8007ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fe95 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	889b      	ldrh	r3, [r3, #4]
 8007bb6:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	bf94      	ite	ls
 8007bbe:	2301      	movls	r3, #1
 8007bc0:	2300      	movhi	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	2103      	movs	r1, #3
 8007bc8:	4830      	ldr	r0, [pc, #192]	; (8007c8c <main+0x2e4>)
 8007bca:	f7ff fb3d 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
                nlg5->setChargeCurrent(voltage_status->max);
 8007bce:	4b2d      	ldr	r3, [pc, #180]	; (8007c84 <main+0x2dc>)
 8007bd0:	681c      	ldr	r4, [r3, #0]
 8007bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fe80 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	899b      	ldrh	r3, [r3, #12]
 8007be0:	4619      	mov	r1, r3
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fbe8 	bl	80073b8 <_ZN4NLG516setChargeCurrentEt>

                if (op_mode & Balance)
 8007be8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00d      	beq.n	8007c10 <main+0x268>
                    balance_cells(cell_data, *voltage_status, discharge_mode);
 8007bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 fdd1 	bl	80097a0 <_ZNKRSt8optionalI13VoltageStatusEdeEv>
 8007bfe:	4601      	mov	r1, r0
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <main+0x2f0>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fd96 	bl	800873c <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode>

                if (pwm_fan->getMode() == PWM_Fan::Automatic)
 8007c10:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <main+0x2e0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff fd08 	bl	800762a <_ZNK7PWM_Fan7getModeEv>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00d      	beq.n	8007c46 <main+0x29e>
                    pwm_fan->calcDutyCycle(temp_status->max);
 8007c2a:	4b17      	ldr	r3, [pc, #92]	; (8007c88 <main+0x2e0>)
 8007c2c:	681c      	ldr	r4, [r3, #0]
 8007c2e:	f107 031c 	add.w	r3, r7, #28
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fe85 	bl	8007942 <_ZNKSt8optionalI10TempStatusEptEv>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7ff fca7 	bl	8007594 <_ZN7PWM_Fan13calcDutyCycleEs>

#if CHECK_IVT
                switch (ivt.compare_precharge(voltage_status->sum)) {
 8007c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff fe46 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007c50:	4603      	mov	r3, r0
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4619      	mov	r1, r3
 8007c56:	4811      	ldr	r0, [pc, #68]	; (8007c9c <main+0x2f4>)
 8007c58:	f7fe fd54 	bl	8006704 <_ZN3IVT17compare_prechargeEm>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <main+0x2c0>
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d01c      	beq.n	8007ca0 <main+0x2f8>

                case ivt.Hysteresis:
                case ivt.Lost:
                default:
                    // Do nothing.
                    break;
 8007c66:	e020      	b.n	8007caa <main+0x302>
                status.set_precharge_state(GPIO_PIN_SET);
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4808      	ldr	r0, [pc, #32]	; (8007c8c <main+0x2e4>)
 8007c6c:	f7ff fa98 	bl	80071a0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
                break;
 8007c70:	e01b      	b.n	8007caa <main+0x302>
 8007c72:	bf00      	nop
 8007c74:	40020400 	.word	0x40020400
 8007c78:	200001a0 	.word	0x200001a0
 8007c7c:	200000f8 	.word	0x200000f8
 8007c80:	20000008 	.word	0x20000008
 8007c84:	200001e0 	.word	0x200001e0
 8007c88:	200001e8 	.word	0x200001e8
 8007c8c:	20000200 	.word	0x20000200
 8007c90:	200001e4 	.word	0x200001e4
 8007c94:	40020800 	.word	0x40020800
 8007c98:	2000020f 	.word	0x2000020f
 8007c9c:	200001ec 	.word	0x200001ec
                status.set_precharge_state(GPIO_PIN_RESET);
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	48a6      	ldr	r0, [pc, #664]	; (8007f3c <main+0x594>)
 8007ca4:	f7ff fa7c 	bl	80071a0 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
                break;
 8007ca8:	bf00      	nop
#endif

                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all status.is_error() calls to happen, so do not replace & with &&.
#if CHECK_IVT
#if IVT_TIMEOUT
                        !status.is_error(IVTLost, ivt.is_lost()) &
 8007caa:	48a5      	ldr	r0, [pc, #660]	; (8007f40 <main+0x598>)
 8007cac:	f7fe fe30 	bl	8006910 <_ZN3IVT7is_lostEv>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	210b      	movs	r1, #11
 8007cb6:	48a1      	ldr	r0, [pc, #644]	; (8007f3c <main+0x594>)
 8007cb8:	f7ff fac6 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f083 0301 	eor.w	r3, r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461c      	mov	r4, r3
#endif
#if TEST_OVERPOWER
                        !status.is_error(OverPower, voltage_status->sum * ivt.get_current() > kMaxPower) &
 8007cc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fe06 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8007cdc:	4898      	ldr	r0, [pc, #608]	; (8007f40 <main+0x598>)
 8007cde:	f7fe fdbb 	bl	8006858 <_ZN3IVT11get_currentEv>
 8007ce2:	eef0 7a40 	vmov.f32	s15, s0
 8007ce6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007cea:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8007f44 <main+0x59c>
 8007cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf6:	bfcc      	ite	gt
 8007cf8:	2301      	movgt	r3, #1
 8007cfa:	2300      	movle	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2107      	movs	r1, #7
 8007d02:	488e      	ldr	r0, [pc, #568]	; (8007f3c <main+0x594>)
 8007d04:	f7ff faa0 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f083 0301 	eor.w	r3, r3, #1
 8007d0e:	b2db      	uxtb	r3, r3
                        !status.is_error(IVTLost, ivt.is_lost()) &
 8007d10:	401c      	ands	r4, r3
#endif
#if TEST_OVERCURRENT
                        !status.is_error(OverCurrent, ivt.get_current() > kMaxCurrent) &
 8007d12:	488b      	ldr	r0, [pc, #556]	; (8007f40 <main+0x598>)
 8007d14:	f7fe fda0 	bl	8006858 <_ZN3IVT11get_currentEv>
 8007d18:	eef0 7a40 	vmov.f32	s15, s0
 8007d1c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007f48 <main+0x5a0>
 8007d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d28:	bfcc      	ite	gt
 8007d2a:	2301      	movgt	r3, #1
 8007d2c:	2300      	movle	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	2106      	movs	r1, #6
 8007d34:	4881      	ldr	r0, [pc, #516]	; (8007f3c <main+0x594>)
 8007d36:	f7ff fa87 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f083 0301 	eor.w	r3, r3, #1
 8007d40:	b2db      	uxtb	r3, r3
                        !status.is_error(OverPower, voltage_status->sum * ivt.get_current() > kMaxPower) &
 8007d42:	401c      	ands	r4, r3
#endif
#if TEST_ACCU_UNDERVOLTAGE
                        !status.is_error(AccuUnderVoltage, ivt.get_voltage2() < kAccuMinVoltage) &
 8007d44:	487e      	ldr	r0, [pc, #504]	; (8007f40 <main+0x598>)
 8007d46:	f7fe fdd3 	bl	80068f0 <_ZN3IVT12get_voltage2Ev>
 8007d4a:	eef0 7a40 	vmov.f32	s15, s0
 8007d4e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8007f4c <main+0x5a4>
 8007d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	bf4c      	ite	mi
 8007d5c:	2301      	movmi	r3, #1
 8007d5e:	2300      	movpl	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	210a      	movs	r1, #10
 8007d66:	4875      	ldr	r0, [pc, #468]	; (8007f3c <main+0x594>)
 8007d68:	f7ff fa6e 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f083 0301 	eor.w	r3, r3, #1
 8007d72:	b2db      	uxtb	r3, r3
                        !status.is_error(OverCurrent, ivt.get_current() > kMaxCurrent) &
 8007d74:	401c      	ands	r4, r3
#endif
#endif
#if TEST_UNDERVOLTAGE
                        !status.is_error(UnderVoltage, voltage_status->min < kMinVoltage) &
 8007d76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fdae 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007d80:	4603      	mov	r3, r0
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	f647 1217 	movw	r2, #30999	; 0x7917
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	bf94      	ite	ls
 8007d8c:	2301      	movls	r3, #1
 8007d8e:	2300      	movhi	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	2102      	movs	r1, #2
 8007d96:	4869      	ldr	r0, [pc, #420]	; (8007f3c <main+0x594>)
 8007d98:	f7ff fa56 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f083 0301 	eor.w	r3, r3, #1
 8007da2:	b2db      	uxtb	r3, r3
                        !status.is_error(AccuUnderVoltage, ivt.get_voltage2() < kAccuMinVoltage) &
 8007da4:	401c      	ands	r4, r3
#endif
#if TEST_OVERVOLTAGE
                        !status.is_error(OverVoltage, voltage_status->max > kMaxVoltage) &
 8007da6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fd96 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007db0:	4603      	mov	r3, r0
 8007db2:	899b      	ldrh	r3, [r3, #12]
 8007db4:	f24a 4210 	movw	r2, #42000	; 0xa410
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bf8c      	ite	hi
 8007dbc:	2301      	movhi	r3, #1
 8007dbe:	2300      	movls	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	485d      	ldr	r0, [pc, #372]	; (8007f3c <main+0x594>)
 8007dc8:	f7ff fa3e 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f083 0301 	eor.w	r3, r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
                        !status.is_error(UnderVoltage, voltage_status->min < kMinVoltage) &
 8007dd4:	401c      	ands	r4, r3
#endif
#if TEST_UNDERTEMPERATURE
                        !status.is_error(UnderTemp, temp_status->min < kMinTemp) &
 8007dd6:	f107 031c 	add.w	r3, r7, #28
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fdb1 	bl	8007942 <_ZNKSt8optionalI10TempStatusEptEv>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007de6:	4a5a      	ldr	r2, [pc, #360]	; (8007f50 <main+0x5a8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bfb4      	ite	lt
 8007dec:	2301      	movlt	r3, #1
 8007dee:	2300      	movge	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	2105      	movs	r1, #5
 8007df6:	4851      	ldr	r0, [pc, #324]	; (8007f3c <main+0x594>)
 8007df8:	f7ff fa26 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f083 0301 	eor.w	r3, r3, #1
 8007e02:	b2db      	uxtb	r3, r3
                        !status.is_error(OverVoltage, voltage_status->max > kMaxVoltage) &
 8007e04:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE
                        !status.is_error(OverTemp, temp_status->max > kMaxTemp) &
 8007e06:	f107 031c 	add.w	r3, r7, #28
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fd99 	bl	8007942 <_ZNKSt8optionalI10TempStatusEptEv>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e16:	f241 720c 	movw	r2, #5900	; 0x170c
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfcc      	ite	gt
 8007e1e:	2301      	movgt	r3, #1
 8007e20:	2300      	movle	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	2104      	movs	r1, #4
 8007e28:	4844      	ldr	r0, [pc, #272]	; (8007f3c <main+0x594>)
 8007e2a:	f7ff fa0d 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f083 0301 	eor.w	r3, r3, #1
 8007e34:	b2db      	uxtb	r3, r3
                        !status.is_error(UnderTemp, temp_status->min < kMinTemp) &
 8007e36:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE_CHARGING
                        !status.is_error(OverTempCharging, (op_mode & Charging) && (temp_status->max > kMaxChargeTemp)) &
 8007e38:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00d      	beq.n	8007e60 <main+0x4b8>
 8007e44:	f107 031c 	add.w	r3, r7, #28
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff fd7a 	bl	8007942 <_ZNKSt8optionalI10TempStatusEptEv>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e54:	f241 1230 	movw	r2, #4400	; 0x1130
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	dd01      	ble.n	8007e60 <main+0x4b8>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <main+0x4ba>
 8007e60:	2300      	movs	r3, #0
 8007e62:	461a      	mov	r2, r3
 8007e64:	210c      	movs	r1, #12
 8007e66:	4835      	ldr	r0, [pc, #212]	; (8007f3c <main+0x594>)
 8007e68:	f7ff f9ee 	bl	8007248 <_ZN6Status8is_errorE5Errorb>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f083 0301 	eor.w	r3, r3, #1
 8007e72:	b2db      	uxtb	r3, r3
                        !status.is_error(OverTemp, temp_status->max > kMaxTemp) &
 8007e74:	4023      	ands	r3, r4
                        !status.is_error(OverTempCharging, (op_mode & Charging) && (temp_status->max > kMaxChargeTemp)) &
 8007e76:	f003 0301 	and.w	r3, r3, #1
#endif
                        true
                ) {
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bf14      	ite	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	2300      	moveq	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all status.is_error() calls to happen, so do not replace & with &&.
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <main+0x4e8>
                    // If no errors occurred, including PEC errors, since that's the condition of entering this scope.
                    status.set_AIR_state(GPIO_PIN_SET);
 8007e88:	2101      	movs	r1, #1
 8007e8a:	482c      	ldr	r0, [pc, #176]	; (8007f3c <main+0x594>)
 8007e8c:	f7ff f9b2 	bl	80071f4 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
#if !CHECK_IVT
                    status.set_precharge_state(GPIO_PIN_SET);
#endif
                }
#if CAN_ENABLED
                CANTxData(voltage_status->min, voltage_status->max, temp_status->max);
 8007e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fd21 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	889c      	ldrh	r4, [r3, #4]
 8007e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fd1a 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	899d      	ldrh	r5, [r3, #12]
 8007eac:	f107 031c 	add.w	r3, r7, #28
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff fd46 	bl	8007942 <_ZNKSt8optionalI10TempStatusEptEv>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 f98d 	bl	80091e0 <_Z9CANTxDatatts>
                CANTxVoltageLimpTotal(voltage_status->sum);
 8007ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fd06 	bl	80078dc <_ZNKSt8optionalI13VoltageStatusEptEv>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 faf1 	bl	80094bc <_Z21CANTxVoltageLimpTotalm>
#endif
            }
#if CAN_ENABLED
            CANTxStatus();
 8007eda:	f001 f8f5 	bl	80090c8 <_Z11CANTxStatusv>
            CANTxPECError();
 8007ede:	f001 f935 	bl	800914c <_Z13CANTxPECErrorv>
        }

#if CAN_DEBUG
        /*  Functions for debugging and untested code.  */
        if (op_mode & Debug) {
 8007ee2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <main+0x55e>
            CANTxVoltage(cell_data);
 8007eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 f9be 	bl	8009274 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE>
            CANTxTemperature(temp_data);
 8007ef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 fa57 	bl	80093b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE>
            CANTxDCCfg();
 8007f02:	f001 fb13 	bl	800952c <_Z10CANTxDCCfgv>
        }
#endif
#endif
        /*  Log data to SD card.  */
        if (op_mode & Logging) {
 8007f06:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f43f adfb 	beq.w	8007b0a <main+0x162>
            if (retSD == FR_OK) {
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <main+0x5ac>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f47f adf6 	bne.w	8007b0a <main+0x162>
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 8007f1e:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <main+0x5b0>)
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 8007f26:	d21b      	bcs.n	8007f60 <main+0x5b8>
 8007f28:	2232      	movs	r2, #50	; 0x32
 8007f2a:	490c      	ldr	r1, [pc, #48]	; (8007f5c <main+0x5b4>)
 8007f2c:	480a      	ldr	r0, [pc, #40]	; (8007f58 <main+0x5b0>)
 8007f2e:	f7fd fccc 	bl	80058ca <f_open>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d113      	bne.n	8007f60 <main+0x5b8>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e012      	b.n	8007f62 <main+0x5ba>
 8007f3c:	20000200 	.word	0x20000200
 8007f40:	200001ec 	.word	0x200001ec
 8007f44:	4af42400 	.word	0x4af42400
 8007f48:	43340000 	.word	0x43340000
 8007f4c:	43f50000 	.word	0x43f50000
 8007f50:	fffffa24 	.word	0xfffffa24
 8007f54:	2000022c 	.word	0x2000022c
 8007f58:	20000234 	.word	0x20000234
 8007f5c:	0800a89c 	.word	0x0800a89c
 8007f60:	2300      	movs	r3, #0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f43f add1 	beq.w	8007b0a <main+0x162>
                    HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8007f68:	2104      	movs	r1, #4
 8007f6a:	4894      	ldr	r0, [pc, #592]	; (80081bc <main+0x814>)
 8007f6c:	f7f9 fc0f 	bl	800178e <HAL_GPIO_TogglePin>

                    /* NOTE: f_printf might be pretty slow compared to f_write. */
                    f_printf(&SDFile, "%u,", get_uptime());
 8007f70:	f7ff fbba 	bl	80076e8 <_Z10get_uptimev>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	4991      	ldr	r1, [pc, #580]	; (80081c0 <main+0x818>)
 8007f7a:	4892      	ldr	r0, [pc, #584]	; (80081c4 <main+0x81c>)
 8007f7c:	f7fe f9a2 	bl	80062c4 <f_printf>
                    /* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
                    // TODO Not implemented.
                    f_printf(&SDFile, "%04u-%02u-%02uT%02u:%02u:%02u\n", rtc.year, rtc.month, rtc.days, rtc.hours, rtc.minutes, rtc.seconds);
 8007f80:	4b91      	ldr	r3, [pc, #580]	; (80081c8 <main+0x820>)
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	461c      	mov	r4, r3
 8007f88:	4b8f      	ldr	r3, [pc, #572]	; (80081c8 <main+0x820>)
 8007f8a:	789b      	ldrb	r3, [r3, #2]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	461d      	mov	r5, r3
 8007f90:	4b8d      	ldr	r3, [pc, #564]	; (80081c8 <main+0x820>)
 8007f92:	78db      	ldrb	r3, [r3, #3]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	4b8b      	ldr	r3, [pc, #556]	; (80081c8 <main+0x820>)
 8007f9a:	791b      	ldrb	r3, [r3, #4]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4b89      	ldr	r3, [pc, #548]	; (80081c8 <main+0x820>)
 8007fa2:	795b      	ldrb	r3, [r3, #5]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	4b87      	ldr	r3, [pc, #540]	; (80081c8 <main+0x820>)
 8007faa:	799b      	ldrb	r3, [r3, #6]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	9002      	str	r0, [sp, #8]
 8007fb2:	9101      	str	r1, [sp, #4]
 8007fb4:	9200      	str	r2, [sp, #0]
 8007fb6:	462b      	mov	r3, r5
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4984      	ldr	r1, [pc, #528]	; (80081cc <main+0x824>)
 8007fbc:	4881      	ldr	r0, [pc, #516]	; (80081c4 <main+0x81c>)
 8007fbe:	f7fe f981 	bl	80062c4 <f_printf>

                    UINT number_written{ 0 };
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61bb      	str	r3, [r7, #24]
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	6053      	str	r3, [r2, #4]
 8007fd0:	6093      	str	r3, [r2, #8]
 8007fd2:	60d3      	str	r3, [r2, #12]
 8007fd4:	6113      	str	r3, [r2, #16]
 8007fd6:	6153      	str	r3, [r2, #20]
                    size_t position{ 0 };
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                    for (auto const& register_group : cell_data) // 4 voltage register groups
 8007fde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fe6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007fea:	f001 fbe5 	bl	80097b8 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 8007fee:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8007ff2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007ff6:	f001 fbeb 	bl	80097d0 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8007ffa:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8007ffe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008006:	429a      	cmp	r2, r3
 8008008:	d054      	beq.n	80080b4 <main+0x70c>
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8008012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800801a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800801e:	f001 fbe4 	bl	80097ea <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 8008022:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008026:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800802a:	f001 fbea 	bl	8009802 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 800802e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8008032:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800803a:	429a      	cmp	r2, r3
 800803c:	d034      	beq.n	80080a8 <main+0x700>
 800803e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            for (auto const voltage : IC.data) // 3 voltages in IC.data
 8008046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800804a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800804e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8008052:	f000 fb59 	bl	8008708 <_ZNKSt5arrayItLj3EE5beginEv>
 8008056:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800805a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800805e:	f000 fb5f 	bl	8008720 <_ZNKSt5arrayItLj3EE3endEv>
 8008062:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8008066:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800806a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800806e:	429a      	cmp	r2, r3
 8008070:	d014      	beq.n	800809c <main+0x6f4>
 8008072:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
                                buffer[position++] = voltage;
 800807c:	f8b7 10ae 	ldrh.w	r1, [r7, #174]	; 0xae
 8008080:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800808a:	463a      	mov	r2, r7
 800808c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                            for (auto const voltage : IC.data) // 3 voltages in IC.data
 8008090:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008094:	3302      	adds	r3, #2
 8008096:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800809a:	e7e4      	b.n	8008066 <main+0x6be>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800809c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080a0:	3308      	adds	r3, #8
 80080a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080a6:	e7c4      	b.n	8008032 <main+0x68a>
                    for (auto const& register_group : cell_data) // 4 voltage register groups
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	3308      	adds	r3, #8
 80080ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080b2:	e7a4      	b.n	8007ffe <main+0x656>
                    f_write(&SDFile, buffer, sizeof(buffer), &number_written);
 80080b4:	f107 0318 	add.w	r3, r7, #24
 80080b8:	4639      	mov	r1, r7
 80080ba:	2218      	movs	r2, #24
 80080bc:	4841      	ldr	r0, [pc, #260]	; (80081c4 <main+0x81c>)
 80080be:	f7fd fdc2 	bl	8005c46 <f_write>

                    position = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                    for (auto const& register_group : temp_data) // 2 temperature register groups
 80080c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80080d4:	f001 fba2 	bl	800981c <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>
 80080d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80080dc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80080e0:	f001 fba8 	bl	8009834 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>
 80080e4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80080e8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80080ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d054      	beq.n	800819e <main+0x7f6>
 80080f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 80080fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008104:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8008108:	f001 fba1 	bl	800984e <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 800810c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8008110:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8008114:	f001 fba7 	bl	8009866 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8008118:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 800811c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008124:	429a      	cmp	r2, r3
 8008126:	d034      	beq.n	8008192 <main+0x7ea>
 8008128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            for (auto const temperature : IC.data) // 3 temperatures in IC.data
 8008130:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008138:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800813c:	f001 f91e 	bl	800937c <_ZNKSt5arrayIsLj3EE5beginEv>
 8008140:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8008144:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008148:	f001 f924 	bl	8009394 <_ZNKSt5arrayIsLj3EE3endEv>
 800814c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8008150:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008158:	429a      	cmp	r2, r3
 800815a:	d014      	beq.n	8008186 <main+0x7de>
 800815c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
                                buffer[position++] = temperature;
 8008166:	f8b7 108a 	ldrh.w	r1, [r7, #138]	; 0x8a
 800816a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8008174:	463a      	mov	r2, r7
 8008176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                            for (auto const temperature : IC.data) // 3 temperatures in IC.data
 800817a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817e:	3302      	adds	r3, #2
 8008180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008184:	e7e4      	b.n	8008150 <main+0x7a8>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818a:	3308      	adds	r3, #8
 800818c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008190:	e7c4      	b.n	800811c <main+0x774>
                    for (auto const& register_group : temp_data) // 2 temperature register groups
 8008192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008196:	3308      	adds	r3, #8
 8008198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800819c:	e7a4      	b.n	80080e8 <main+0x740>
                    f_write(&SDFile, buffer, sizeof(buffer) / 2, &number_written);
 800819e:	f107 0318 	add.w	r3, r7, #24
 80081a2:	4639      	mov	r1, r7
 80081a4:	220c      	movs	r2, #12
 80081a6:	4807      	ldr	r0, [pc, #28]	; (80081c4 <main+0x81c>)
 80081a8:	f7fd fd4d 	bl	8005c46 <f_write>

                    f_sync(&SDFile);
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <main+0x81c>)
 80081ae:	f7fd febf 	bl	8005f30 <f_sync>
                    f_close(&SDFile);
 80081b2:	4804      	ldr	r0, [pc, #16]	; (80081c4 <main+0x81c>)
 80081b4:	f7fd ff3a 	bl	800602c <f_close>
                }
            }
        }
    }
 80081b8:	e4a7      	b.n	8007b0a <main+0x162>
 80081ba:	bf00      	nop
 80081bc:	40020800 	.word	0x40020800
 80081c0:	0800a8ac 	.word	0x0800a8ac
 80081c4:	20000234 	.word	0x20000234
 80081c8:	200000f0 	.word	0x200000f0
 80081cc:	0800a8b0 	.word	0x0800a8b0

080081d0 <_ZL18SystemClock_Configv>:
}

static void SystemClock_Config() {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0ac      	sub	sp, #176	; 0xb0
 80081d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80081da:	2234      	movs	r2, #52	; 0x34
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f002 fa6a 	bl	800a6b8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	60da      	str	r2, [r3, #12]
 80081f2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	225c      	movs	r2, #92	; 0x5c
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f002 fa5b 	bl	800a6b8 <memset>

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	4b3e      	ldr	r3, [pc, #248]	; (8008300 <_ZL18SystemClock_Configv+0x130>)
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	4a3d      	ldr	r2, [pc, #244]	; (8008300 <_ZL18SystemClock_Configv+0x130>)
 800820c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008210:	6413      	str	r3, [r2, #64]	; 0x40
 8008212:	4b3b      	ldr	r3, [pc, #236]	; (8008300 <_ZL18SystemClock_Configv+0x130>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821a:	60bb      	str	r3, [r7, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800821e:	2300      	movs	r3, #0
 8008220:	607b      	str	r3, [r7, #4]
 8008222:	4b38      	ldr	r3, [pc, #224]	; (8008304 <_ZL18SystemClock_Configv+0x134>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800822a:	4a36      	ldr	r2, [pc, #216]	; (8008304 <_ZL18SystemClock_Configv+0x134>)
 800822c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	4b34      	ldr	r3, [pc, #208]	; (8008304 <_ZL18SystemClock_Configv+0x134>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800823a:	607b      	str	r3, [r7, #4]
 800823c:	687b      	ldr	r3, [r7, #4]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800823e:	2302      	movs	r3, #2
 8008240:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008242:	2301      	movs	r3, #1
 8008244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008248:	2310      	movs	r3, #16
 800824a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800824e:	2302      	movs	r3, #2
 8008250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008254:	2300      	movs	r3, #0
 8008256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 8;
 800825a:	2308      	movs	r3, #8
 800825c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 50;
 8008260:	2332      	movs	r3, #50	; 0x32
 8008262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008266:	2302      	movs	r3, #2
 8008268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800826c:	2303      	movs	r3, #3
 800826e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = 2;
 8008272:	2302      	movs	r3, #2
 8008274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008278:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800827c:	4618      	mov	r0, r3
 800827e:	f7fa f80d 	bl	800229c <HAL_RCC_OscConfig>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	bf14      	ite	ne
 8008288:	2301      	movne	r3, #1
 800828a:	2300      	moveq	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <_ZL18SystemClock_Configv+0xc6>
        Error_Handler();
 8008292:	f001 f9ef 	bl	8009674 <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8008296:	230f      	movs	r3, #15
 8008298:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800829a:	2300      	movs	r3, #0
 800829c:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800829e:	2300      	movs	r3, #0
 80082a0:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082a2:	2300      	movs	r3, #0
 80082a4:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082a6:	2300      	movs	r3, #0
 80082a8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80082aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7f9 fa87 	bl	80017c4 <HAL_RCC_ClockConfig>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bf14      	ite	ne
 80082bc:	2301      	movne	r3, #1
 80082be:	2300      	moveq	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <_ZL18SystemClock_Configv+0xfa>
        Error_Handler();
 80082c6:	f001 f9d5 	bl	8009674 <Error_Handler>

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80082ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80082d0:	2300      	movs	r3, #0
 80082d2:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80082d4:	2300      	movs	r3, #0
 80082d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80082d8:	f107 030c 	add.w	r3, r7, #12
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f9 fb57 	bl	8001990 <HAL_RCCEx_PeriphCLKConfig>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf14      	ite	ne
 80082e8:	2301      	movne	r3, #1
 80082ea:	2300      	moveq	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <_ZL18SystemClock_Configv+0x126>
        Error_Handler();
 80082f2:	f001 f9bf 	bl	8009674 <Error_Handler>
}
 80082f6:	bf00      	nop
 80082f8:	37b0      	adds	r7, #176	; 0xb0
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	40023800 	.word	0x40023800
 8008304:	40007000 	.word	0x40007000

08008308 <_ZL12MX_CAN1_Initv>:

static void MX_CAN1_Init() {
 8008308:	b5b0      	push	{r4, r5, r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af00      	add	r7, sp, #0
    hcan1.Instance = CAN1;
 800830e:	4b22      	ldr	r3, [pc, #136]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008310:	4a22      	ldr	r2, [pc, #136]	; (800839c <_ZL12MX_CAN1_Initv+0x94>)
 8008312:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 16;
 8008314:	4b20      	ldr	r3, [pc, #128]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008316:	2210      	movs	r2, #16
 8008318:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 800831a:	4b1f      	ldr	r3, [pc, #124]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 800831c:	2200      	movs	r2, #0
 800831e:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008320:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008322:	2200      	movs	r2, #0
 8008324:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008326:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008328:	2200      	movs	r2, #0
 800832a:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800832c:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 800832e:	2200      	movs	r2, #0
 8008330:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8008332:	4b19      	ldr	r3, [pc, #100]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008334:	2200      	movs	r2, #0
 8008336:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 8008338:	4b17      	ldr	r3, [pc, #92]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 800833a:	2200      	movs	r2, #0
 800833c:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008340:	2200      	movs	r2, #0
 8008342:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 8008344:	4b14      	ldr	r3, [pc, #80]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008346:	2200      	movs	r2, #0
 8008348:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8008350:	4b11      	ldr	r3, [pc, #68]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008352:	2200      	movs	r2, #0
 8008354:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008356:	4810      	ldr	r0, [pc, #64]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 8008358:	f7f8 f92e 	bl	80005b8 <HAL_CAN_Init>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	bf14      	ite	ne
 8008362:	2301      	movne	r3, #1
 8008364:	2300      	moveq	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <_ZL12MX_CAN1_Initv+0x68>
        Error_Handler();
 800836c:	f001 f982 	bl	8009674 <Error_Handler>
    /* USER CODE BEGIN CAN1_Init 2 */
    CAN_FilterTypeDef sFilterConfig = {
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <_ZL12MX_CAN1_Initv+0x98>)
 8008372:	463c      	mov	r4, r7
 8008374:	461d      	mov	r5, r3
 8008376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800837a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800837c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800837e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008382:	e884 0003 	stmia.w	r4, {r0, r1}
            .FilterMode = CAN_FILTERMODE_IDLIST,
            .FilterScale = CAN_FILTERSCALE_16BIT,
            .FilterActivation = ENABLE,
            .SlaveStartFilterBank = 14
    };
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8008386:	463b      	mov	r3, r7
 8008388:	4619      	mov	r1, r3
 800838a:	4803      	ldr	r0, [pc, #12]	; (8008398 <_ZL12MX_CAN1_Initv+0x90>)
 800838c:	f7f8 fa10 	bl	80007b0 <HAL_CAN_ConfigFilter>
}
 8008390:	bf00      	nop
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bdb0      	pop	{r4, r5, r7, pc}
 8008398:	200000f8 	.word	0x200000f8
 800839c:	40006400 	.word	0x40006400
 80083a0:	0800a8d0 	.word	0x0800a8d0

080083a4 <_ZL12MX_CAN2_Initv>:

static void MX_CAN2_Init() {
 80083a4:	b5b0      	push	{r4, r5, r7, lr}
 80083a6:	b08a      	sub	sp, #40	; 0x28
 80083a8:	af00      	add	r7, sp, #0
    hcan2.Instance = CAN2;
 80083aa:	4b22      	ldr	r3, [pc, #136]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083ac:	4a22      	ldr	r2, [pc, #136]	; (8008438 <_ZL12MX_CAN2_Initv+0x94>)
 80083ae:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 16;
 80083b0:	4b20      	ldr	r3, [pc, #128]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083b2:	2210      	movs	r2, #16
 80083b4:	605a      	str	r2, [r3, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;
 80083b6:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	609a      	str	r2, [r3, #8]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80083bc:	4b1d      	ldr	r3, [pc, #116]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083be:	2200      	movs	r2, #0
 80083c0:	60da      	str	r2, [r3, #12]
    hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80083c2:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	611a      	str	r2, [r3, #16]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	615a      	str	r2, [r3, #20]
    hcan2.Init.TimeTriggeredMode = DISABLE;
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	761a      	strb	r2, [r3, #24]
    hcan2.Init.AutoBusOff = DISABLE;
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	765a      	strb	r2, [r3, #25]
    hcan2.Init.AutoWakeUp = DISABLE;
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083dc:	2200      	movs	r2, #0
 80083de:	769a      	strb	r2, [r3, #26]
    hcan2.Init.AutoRetransmission = DISABLE;
 80083e0:	4b14      	ldr	r3, [pc, #80]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	76da      	strb	r2, [r3, #27]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	771a      	strb	r2, [r3, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80083f2:	4810      	ldr	r0, [pc, #64]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 80083f4:	f7f8 f8e0 	bl	80005b8 <HAL_CAN_Init>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <_ZL12MX_CAN2_Initv+0x68>
        Error_Handler();
 8008408:	f001 f934 	bl	8009674 <Error_Handler>
    CAN_FilterTypeDef sFilterConfig = {
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <_ZL12MX_CAN2_Initv+0x98>)
 800840e:	463c      	mov	r4, r7
 8008410:	461d      	mov	r5, r3
 8008412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800841a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800841e:	e884 0003 	stmia.w	r4, {r0, r1}
            .FilterMode = CAN_FILTERMODE_IDLIST,
            .FilterScale = CAN_FILTERSCALE_16BIT,
            .FilterActivation = ENABLE,
            .SlaveStartFilterBank = 14,
    };
    HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8008422:	463b      	mov	r3, r7
 8008424:	4619      	mov	r1, r3
 8008426:	4803      	ldr	r0, [pc, #12]	; (8008434 <_ZL12MX_CAN2_Initv+0x90>)
 8008428:	f7f8 f9c2 	bl	80007b0 <HAL_CAN_ConfigFilter>
}
 800842c:	bf00      	nop
 800842e:	3728      	adds	r7, #40	; 0x28
 8008430:	46bd      	mov	sp, r7
 8008432:	bdb0      	pop	{r4, r5, r7, pc}
 8008434:	20000120 	.word	0x20000120
 8008438:	40006800 	.word	0x40006800
 800843c:	0800a8f8 	.word	0x0800a8f8

08008440 <_ZL12MX_SPI1_Initv>:
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
    hsd.Init.ClockDiv = 0;
}

static void MX_SPI1_Init() {
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8008444:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008446:	4a1b      	ldr	r2, [pc, #108]	; (80084b4 <_ZL12MX_SPI1_Initv+0x74>)
 8008448:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800844a:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 800844c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008450:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008458:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800845e:	4b14      	ldr	r3, [pc, #80]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008460:	2200      	movs	r2, #0
 8008462:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008464:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008466:	2200      	movs	r2, #0
 8008468:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800846a:	4b11      	ldr	r3, [pc, #68]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 800846c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008470:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008474:	2220      	movs	r2, #32
 8008476:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 800847a:	2200      	movs	r2, #0
 800847c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800847e:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008480:	2200      	movs	r2, #0
 8008482:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008484:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008486:	2200      	movs	r2, #0
 8008488:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 1;
 800848a:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 800848c:	2201      	movs	r2, #1
 800848e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008490:	4807      	ldr	r0, [pc, #28]	; (80084b0 <_ZL12MX_SPI1_Initv+0x70>)
 8008492:	f7fa f95d 	bl	8002750 <HAL_SPI_Init>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	bf14      	ite	ne
 800849c:	2301      	movne	r3, #1
 800849e:	2300      	moveq	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <_ZL12MX_SPI1_Initv+0x6a>
        Error_Handler();
 80084a6:	f001 f8e5 	bl	8009674 <Error_Handler>
}
 80084aa:	bf00      	nop
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000148 	.word	0x20000148
 80084b4:	40013000 	.word	0x40013000

080084b8 <_ZL12MX_TIM2_Initv>:

static void MX_TIM2_Init() {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af00      	add	r7, sp, #0


    htim2.Instance = TIM2;
 80084be:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80084c4:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 800; // Prescaler is 800 as 16MHz / 800 == 20kHz, I guess?
 80084c6:	4b43      	ldr	r3, [pc, #268]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80084cc:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084ce:	4b41      	ldr	r3, [pc, #260]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 19999;
 80084d4:	4b3f      	ldr	r3, [pc, #252]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084d6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80084da:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084dc:	4b3d      	ldr	r3, [pc, #244]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084de:	2200      	movs	r2, #0
 80084e0:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084e2:	4b3c      	ldr	r3, [pc, #240]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80084e8:	483a      	ldr	r0, [pc, #232]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80084ea:	f7fa fe83 	bl	80031f4 <HAL_TIM_Base_Init>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bf14      	ite	ne
 80084f4:	2301      	movne	r3, #1
 80084f6:	2300      	moveq	r3, #0
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <_ZL12MX_TIM2_Initv+0x4a>
        Error_Handler();
 80084fe:	f001 f8b9 	bl	8009674 <Error_Handler>

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	605a      	str	r2, [r3, #4]
 800850c:	609a      	str	r2, [r3, #8]
 800850e:	60da      	str	r2, [r3, #12]
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008514:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800851a:	4619      	mov	r1, r3
 800851c:	482d      	ldr	r0, [pc, #180]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 800851e:	f7fa ffcd 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	bf14      	ite	ne
 8008528:	2301      	movne	r3, #1
 800852a:	2300      	moveq	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <_ZL12MX_TIM2_Initv+0x7e>
        Error_Handler();
 8008532:	f001 f89f 	bl	8009674 <Error_Handler>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008536:	4827      	ldr	r0, [pc, #156]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 8008538:	f7fa fe87 	bl	800324a <HAL_TIM_PWM_Init>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	bf14      	ite	ne
 8008542:	2301      	movne	r3, #1
 8008544:	2300      	moveq	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <_ZL12MX_TIM2_Initv+0x98>
        Error_Handler();
 800854c:	f001 f892 	bl	8009674 <Error_Handler>

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008550:	f107 0320 	add.w	r3, r7, #32
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	605a      	str	r2, [r3, #4]
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800855a:	2300      	movs	r3, #0
 800855c:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800855e:	2300      	movs	r3, #0
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008562:	f107 0320 	add.w	r3, r7, #32
 8008566:	4619      	mov	r1, r3
 8008568:	481a      	ldr	r0, [pc, #104]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 800856a:	f7fb fb7b 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <_ZL12MX_TIM2_Initv+0xca>
        Error_Handler();
 800857e:	f001 f879 	bl	8009674 <Error_Handler>

    TIM_OC_InitTypeDef sConfigOC = {0};
 8008582:	1d3b      	adds	r3, r7, #4
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	609a      	str	r2, [r3, #8]
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	611a      	str	r2, [r3, #16]
 8008590:	615a      	str	r2, [r3, #20]
 8008592:	619a      	str	r2, [r3, #24]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008594:	2360      	movs	r3, #96	; 0x60
 8008596:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80085a4:	1d3b      	adds	r3, r7, #4
 80085a6:	220c      	movs	r2, #12
 80085a8:	4619      	mov	r1, r3
 80085aa:	480a      	ldr	r0, [pc, #40]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80085ac:	f7fa fec0 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bf14      	ite	ne
 80085b6:	2301      	movne	r3, #1
 80085b8:	2300      	moveq	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <_ZL12MX_TIM2_Initv+0x10c>
        Error_Handler();
 80085c0:	f001 f858 	bl	8009674 <Error_Handler>
    HAL_TIM_MspPostInit(&htim2);
 80085c4:	4803      	ldr	r0, [pc, #12]	; (80085d4 <_ZL12MX_TIM2_Initv+0x11c>)
 80085c6:	f001 fdc1 	bl	800a14c <HAL_TIM_MspPostInit>
}
 80085ca:	bf00      	nop
 80085cc:	3738      	adds	r7, #56	; 0x38
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200001a0 	.word	0x200001a0

080085d8 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init() {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	; 0x28
 80085dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085de:	f107 0314 	add.w	r3, r7, #20
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	605a      	str	r2, [r3, #4]
 80085e8:	609a      	str	r2, [r3, #8]
 80085ea:	60da      	str	r2, [r3, #12]
 80085ec:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ee:	2300      	movs	r3, #0
 80085f0:	613b      	str	r3, [r7, #16]
 80085f2:	4b41      	ldr	r3, [pc, #260]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	4a40      	ldr	r2, [pc, #256]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 80085f8:	f043 0304 	orr.w	r3, r3, #4
 80085fc:	6313      	str	r3, [r2, #48]	; 0x30
 80085fe:	4b3e      	ldr	r3, [pc, #248]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	613b      	str	r3, [r7, #16]
 8008608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	4b3a      	ldr	r3, [pc, #232]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	4a39      	ldr	r2, [pc, #228]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	6313      	str	r3, [r2, #48]	; 0x30
 800861a:	4b37      	ldr	r3, [pc, #220]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008626:	2300      	movs	r3, #0
 8008628:	60bb      	str	r3, [r7, #8]
 800862a:	4b33      	ldr	r3, [pc, #204]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	4a32      	ldr	r2, [pc, #200]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	6313      	str	r3, [r2, #48]	; 0x30
 8008636:	4b30      	ldr	r3, [pc, #192]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	60bb      	str	r3, [r7, #8]
 8008640:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
 8008646:	4b2c      	ldr	r3, [pc, #176]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	4a2b      	ldr	r2, [pc, #172]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 800864c:	f043 0302 	orr.w	r3, r3, #2
 8008650:	6313      	str	r3, [r2, #48]	; 0x30
 8008652:	4b29      	ldr	r3, [pc, #164]	; (80086f8 <_ZL12MX_GPIO_Initv+0x120>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Levels */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin|IO_1_Pin|IO_2_Pin, GPIO_PIN_RESET);
 800865e:	2200      	movs	r2, #0
 8008660:	213f      	movs	r1, #63	; 0x3f
 8008662:	4826      	ldr	r0, [pc, #152]	; (80086fc <_ZL12MX_GPIO_Initv+0x124>)
 8008664:	f7f9 f87a 	bl	800175c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 8008668:	2200      	movs	r2, #0
 800866a:	2180      	movs	r1, #128	; 0x80
 800866c:	4824      	ldr	r0, [pc, #144]	; (8008700 <_ZL12MX_GPIO_Initv+0x128>)
 800866e:	f7f9 f875 	bl	800175c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 8008672:	2200      	movs	r2, #0
 8008674:	2103      	movs	r1, #3
 8008676:	4823      	ldr	r0, [pc, #140]	; (8008704 <_ZL12MX_GPIO_Initv+0x12c>)
 8008678:	f7f9 f870 	bl	800175c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800867c:	2201      	movs	r2, #1
 800867e:	2140      	movs	r1, #64	; 0x40
 8008680:	4820      	ldr	r0, [pc, #128]	; (8008704 <_ZL12MX_GPIO_Initv+0x12c>)
 8008682:	f7f9 f86b 	bl	800175c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = Led0_Pin | Led1_Pin | Led2_Pin | Led3_Pin | IO_1_Pin | IO_2_Pin;
 8008686:	233f      	movs	r3, #63	; 0x3f
 8008688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800868a:	2301      	movs	r3, #1
 800868c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008692:	2300      	movs	r3, #0
 8008694:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008696:	f107 0314 	add.w	r3, r7, #20
 800869a:	4619      	mov	r1, r3
 800869c:	4817      	ldr	r0, [pc, #92]	; (80086fc <_ZL12MX_GPIO_Initv+0x124>)
 800869e:	f7f8 feb1 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IO_0_Pin;
 80086a2:	2380      	movs	r3, #128	; 0x80
 80086a4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 80086a6:	f107 0314 	add.w	r3, r7, #20
 80086aa:	4619      	mov	r1, r3
 80086ac:	4814      	ldr	r0, [pc, #80]	; (8008700 <_ZL12MX_GPIO_Initv+0x128>)
 80086ae:	f7f8 fea9 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PreCharge_Pin | BMSrelay_Pin | NSS_Pin;
 80086b2:	2343      	movs	r3, #67	; 0x43
 80086b4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086b6:	f107 0314 	add.w	r3, r7, #20
 80086ba:	4619      	mov	r1, r3
 80086bc:	4811      	ldr	r0, [pc, #68]	; (8008704 <_ZL12MX_GPIO_Initv+0x12c>)
 80086be:	f7f8 fea1 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Det_Pin |Lock_Pin | Det_Lock_Pin;
 80086c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80086c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086cc:	f107 0314 	add.w	r3, r7, #20
 80086d0:	4619      	mov	r1, r3
 80086d2:	480b      	ldr	r0, [pc, #44]	; (8008700 <_ZL12MX_GPIO_Initv+0x128>)
 80086d4:	f7f8 fe96 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOS_Pin;
 80086d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086de:	2303      	movs	r3, #3
 80086e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	4619      	mov	r1, r3
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <_ZL12MX_GPIO_Initv+0x12c>)
 80086ea:	f7f8 fe8b 	bl	8001404 <HAL_GPIO_Init>
}
 80086ee:	bf00      	nop
 80086f0:	3728      	adds	r7, #40	; 0x28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40023800 	.word	0x40023800
 80086fc:	40020800 	.word	0x40020800
 8008700:	40020000 	.word	0x40020000
 8008704:	40020400 	.word	0x40020400

08008708 <_ZNKSt5arrayItLj3EE5beginEv>:
      begin() const noexcept
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f8e8 	bl	80098e6 <_ZNKSt5arrayItLj3EE4dataEv>
 8008716:	4603      	mov	r3, r0
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <_ZNKSt5arrayItLj3EE3endEv>:
      end() const noexcept
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 f8dc 	bl	80098e6 <_ZNKSt5arrayItLj3EE4dataEv>
 800872e:	4603      	mov	r3, r0
 8008730:	3306      	adds	r3, #6
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode>:

void balance_cells(LTC6811::CellData const & cell_data, VoltageStatus const & voltage_status, DischargeMode discharge_mode) noexcept {
 800873c:	b590      	push	{r4, r7, lr}
 800873e:	b0a1      	sub	sp, #132	; 0x84
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	71fb      	strb	r3, [r7, #7]
    static constexpr uint8_t kDelta{ 100 };
    uint16_t DCC{ 0 };
 800874a:	2300      	movs	r3, #0
 800874c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    uint8_t current_cell{ 0 }, current_ic{ LTC6811::kDaisyChainLength - 1 };
 8008750:	2300      	movs	r3, #0
 8008752:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8008756:	2300      	movs	r3, #0
 8008758:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    LTC6811::RegisterGroup<uint8_t> config_register_group{ 0 };
 800875c:	f107 0310 	add.w	r3, r7, #16
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	605a      	str	r2, [r3, #4]

    switch (discharge_mode) {
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	2b02      	cmp	r3, #2
 800876a:	f000 80e5 	beq.w	8008938 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x1fc>
 800876e:	2b02      	cmp	r3, #2
 8008770:	f300 816d 	bgt.w	8008a4e <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x312>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x44>
 8008778:	2b01      	cmp	r3, #1
 800877a:	f000 8082 	beq.w	8008882 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x146>
 800877e:	e166      	b.n	8008a4e <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x312>
    case GTMinPlusDelta:
        for (auto& IC : config_register_group) { // 12 register groups
 8008780:	f107 0310 	add.w	r3, r7, #16
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
 8008786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008788:	f7fe fb7f 	bl	8006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 800878c:	67b8      	str	r0, [r7, #120]	; 0x78
 800878e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008790:	f7fe fb87 	bl	8006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 8008794:	6378      	str	r0, [r7, #52]	; 0x34
 8008796:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	429a      	cmp	r2, r3
 800879c:	f000 8152 	beq.w	8008a44 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x308>
 80087a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087a2:	633b      	str	r3, [r7, #48]	; 0x30
            DCC = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            current_cell = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087b6:	f001 f863 	bl	8009880 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 80087ba:	6778      	str	r0, [r7, #116]	; 0x74
 80087bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087be:	f001 f86b 	bl	8009898 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 80087c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80087c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d037      	beq.n	800883c <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x100>
 80087cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 80087d0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80087d4:	4619      	mov	r1, r3
 80087d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087d8:	f001 f86b 	bl	80098b2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 80087dc:	4603      	mov	r3, r0
 80087de:	623b      	str	r3, [r7, #32]
 80087e0:	6a38      	ldr	r0, [r7, #32]
 80087e2:	f7ff ff91 	bl	8008708 <_ZNKSt5arrayItLj3EE5beginEv>
 80087e6:	6738      	str	r0, [r7, #112]	; 0x70
 80087e8:	6a38      	ldr	r0, [r7, #32]
 80087ea:	f7ff ff99 	bl	8008720 <_ZNKSt5arrayItLj3EE3endEv>
 80087ee:	61f8      	str	r0, [r7, #28]
 80087f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d01d      	beq.n	8008834 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0xf8>
 80087f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	837b      	strh	r3, [r7, #26]
                    if (voltage > voltage_status.min + kDelta)
 80087fe:	8b7a      	ldrh	r2, [r7, #26]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	889b      	ldrh	r3, [r3, #4]
 8008804:	3364      	adds	r3, #100	; 0x64
 8008806:	429a      	cmp	r2, r3
 8008808:	dd0b      	ble.n	8008822 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0xe6>
                        DCC |= 1 << current_cell;
 800880a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800880e:	2201      	movs	r2, #1
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	b21a      	sxth	r2, r3
 8008816:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800881a:	4313      	orrs	r3, r2
 800881c:	b21b      	sxth	r3, r3
 800881e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    ++current_cell;
 8008822:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008826:	3301      	adds	r3, #1
 8008828:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 800882c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800882e:	3302      	adds	r3, #2
 8008830:	673b      	str	r3, [r7, #112]	; 0x70
 8008832:	e7dd      	b.n	80087f0 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0xb4>
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8008834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008836:	3308      	adds	r3, #8
 8008838:	677b      	str	r3, [r7, #116]	; 0x74
 800883a:	e7c3      	b.n	80087c4 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x88>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            --current_ic;
 800883c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008840:	3b01      	subs	r3, #1
 8008842:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
            IC.data[4] = DCC >> 0 & 0xFF;
 8008846:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800884a:	b2dc      	uxtb	r4, r3
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	2104      	movs	r1, #4
 8008850:	4618      	mov	r0, r3
 8008852:	f000 ff96 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8008856:	4603      	mov	r3, r0
 8008858:	4622      	mov	r2, r4
 800885a:	701a      	strb	r2, [r3, #0]
            IC.data[5] = DCC >> 8 & 0x0F;
 800885c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8008860:	121b      	asrs	r3, r3, #8
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	b2dc      	uxtb	r4, r3
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	2105      	movs	r1, #5
 800886e:	4618      	mov	r0, r3
 8008870:	f000 ff87 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8008874:	4603      	mov	r3, r0
 8008876:	4622      	mov	r2, r4
 8008878:	701a      	strb	r2, [r3, #0]
        for (auto& IC : config_register_group) { // 12 register groups
 800887a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800887c:	3308      	adds	r3, #8
 800887e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008880:	e789      	b.n	8008796 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x5a>
        } // 12 * 12 = 144 voltages associated with the entire daisy chain
        break;

    case MaxOnly:
        if (voltage_status.max - voltage_status.min > kDelta) {
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	899b      	ldrh	r3, [r3, #12]
 8008886:	461a      	mov	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	889b      	ldrh	r3, [r3, #4]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b64      	cmp	r3, #100	; 0x64
 8008890:	f340 80da 	ble.w	8008a48 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x30c>
            current_ic = voltage_status.max_id / 3 % 12;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	4a73      	ldr	r2, [pc, #460]	; (8008a68 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x32c>)
 800889a:	fba2 2303 	umull	r2, r3, r2, r3
 800889e:	0859      	lsrs	r1, r3, #1
 80088a0:	4b71      	ldr	r3, [pc, #452]	; (8008a68 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x32c>)
 80088a2:	fba3 2301 	umull	r2, r3, r3, r1
 80088a6:	08da      	lsrs	r2, r3, #3
 80088a8:	4613      	mov	r3, r2
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	1aca      	subs	r2, r1, r3
 80088b2:	4613      	mov	r3, r2
 80088b4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
            DCC |= 1 << voltage_status.max_id % 11;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6919      	ldr	r1, [r3, #16]
 80088bc:	4b6b      	ldr	r3, [pc, #428]	; (8008a6c <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x330>)
 80088be:	fba3 2301 	umull	r2, r3, r3, r1
 80088c2:	08da      	lsrs	r2, r3, #3
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	1aca      	subs	r2, r1, r3
 80088d0:	2301      	movs	r3, #1
 80088d2:	4093      	lsls	r3, r2
 80088d4:	b21a      	sxth	r2, r3
 80088d6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80088da:	4313      	orrs	r3, r2
 80088dc:	b21b      	sxth	r3, r3
 80088de:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            config_register_group[current_ic].data[4] = DCC >> 0 & 0xFF;
 80088e2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80088e6:	b2dc      	uxtb	r4, r3
 80088e8:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 80088ec:	f107 0310 	add.w	r3, r7, #16
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f804 	bl	8009900 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2104      	movs	r1, #4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 ff40 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8008902:	4603      	mov	r3, r0
 8008904:	4622      	mov	r2, r4
 8008906:	701a      	strb	r2, [r3, #0]
            config_register_group[current_ic].data[5] = DCC >> 8 & 0x0F;
 8008908:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800890c:	121b      	asrs	r3, r3, #8
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	b2dc      	uxtb	r4, r3
 8008916:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 800891a:	f107 0310 	add.w	r3, r7, #16
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f000 ffed 	bl	8009900 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 8008926:	4603      	mov	r3, r0
 8008928:	2105      	movs	r1, #5
 800892a:	4618      	mov	r0, r3
 800892c:	f000 ff29 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8008930:	4603      	mov	r3, r0
 8008932:	4622      	mov	r2, r4
 8008934:	701a      	strb	r2, [r3, #0]
        }
        break;
 8008936:	e087      	b.n	8008a48 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x30c>

    case GTMeanPlusDelta: {
        size_t const average_voltage{ voltage_status.sum / (4 * LTC6811::kDaisyChainLength * 3) };
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a4a      	ldr	r2, [pc, #296]	; (8008a68 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x32c>)
 800893e:	fba2 2303 	umull	r2, r3, r2, r3
 8008942:	08db      	lsrs	r3, r3, #3
 8008944:	663b      	str	r3, [r7, #96]	; 0x60
        for (auto& IC : config_register_group) {
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800894c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800894e:	f7fe fa9c 	bl	8006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8008952:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008954:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008956:	f7fe faa4 	bl	8006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 800895a:	65b8      	str	r0, [r7, #88]	; 0x58
 800895c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800895e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008960:	429a      	cmp	r2, r3
 8008962:	d073      	beq.n	8008a4c <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x310>
 8008964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008966:	657b      	str	r3, [r7, #84]	; 0x54
            DCC = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            current_cell = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	653b      	str	r3, [r7, #80]	; 0x50
 8008978:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800897a:	f000 ff81 	bl	8009880 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 800897e:	66b8      	str	r0, [r7, #104]	; 0x68
 8008980:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008982:	f000 ff89 	bl	8009898 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8008986:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008988:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898c:	429a      	cmp	r2, r3
 800898e:	d036      	beq.n	80089fe <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x2c2>
 8008990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008992:	64bb      	str	r3, [r7, #72]	; 0x48
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008994:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008998:	4619      	mov	r1, r3
 800899a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800899c:	f000 ff89 	bl	80098b2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 80089a0:	4603      	mov	r3, r0
 80089a2:	647b      	str	r3, [r7, #68]	; 0x44
 80089a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80089a6:	f7ff feaf 	bl	8008708 <_ZNKSt5arrayItLj3EE5beginEv>
 80089aa:	6678      	str	r0, [r7, #100]	; 0x64
 80089ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80089ae:	f7ff feb7 	bl	8008720 <_ZNKSt5arrayItLj3EE3endEv>
 80089b2:	6438      	str	r0, [r7, #64]	; 0x40
 80089b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d01c      	beq.n	80089f6 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x2ba>
 80089bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (voltage > average_voltage + kDelta)
 80089c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80089c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089c6:	3364      	adds	r3, #100	; 0x64
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d90b      	bls.n	80089e4 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x2a8>
                        DCC |= 1 << current_cell;
 80089cc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80089d0:	2201      	movs	r2, #1
 80089d2:	fa02 f303 	lsl.w	r3, r2, r3
 80089d6:	b21a      	sxth	r2, r3
 80089d8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80089dc:	4313      	orrs	r3, r2
 80089de:	b21b      	sxth	r3, r3
 80089e0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    ++current_cell;
 80089e4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80089e8:	3301      	adds	r3, #1
 80089ea:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 80089ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089f0:	3302      	adds	r3, #2
 80089f2:	667b      	str	r3, [r7, #100]	; 0x64
 80089f4:	e7de      	b.n	80089b4 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x278>
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 80089f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089f8:	3308      	adds	r3, #8
 80089fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80089fc:	e7c4      	b.n	8008988 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x24c>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            --current_ic;
 80089fe:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008a02:	3b01      	subs	r3, #1
 8008a04:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
            IC.data[4] = DCC >> 0 & 0xFF;
 8008a08:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8008a0c:	b2dc      	uxtb	r4, r3
 8008a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a10:	2104      	movs	r1, #4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 feb5 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	701a      	strb	r2, [r3, #0]
            IC.data[5] = DCC >> 8 & 0x0F;
 8008a1e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8008a22:	121b      	asrs	r3, r3, #8
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	b2dc      	uxtb	r4, r3
 8008a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2e:	2105      	movs	r1, #5
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fea6 	bl	8009782 <_ZNSt5arrayIhLj6EEixEj>
 8008a36:	4603      	mov	r3, r0
 8008a38:	4622      	mov	r2, r4
 8008a3a:	701a      	strb	r2, [r3, #0]
        for (auto& IC : config_register_group) {
 8008a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3e:	3308      	adds	r3, #8
 8008a40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a42:	e78b      	b.n	800895c <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x220>
        break;
 8008a44:	bf00      	nop
 8008a46:	e002      	b.n	8008a4e <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x312>
        break;
 8008a48:	bf00      	nop
 8008a4a:	e000      	b.n	8008a4e <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x312>
        }
        break;
 8008a4c:	bf00      	nop
    }
    }

    ltc6811->WRCFG(LTC6811::A, config_register_group);
 8008a4e:	4b08      	ldr	r3, [pc, #32]	; (8008a70 <_Z13balance_cellsRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EERK13VoltageStatus13DischargeMode+0x334>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f107 0210 	add.w	r2, r7, #16
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fff3 	bl	8006a44 <_ZN7LTC68115WRCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE>
}
 8008a5e:	bf00      	nop
 8008a60:	3784      	adds	r7, #132	; 0x84
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd90      	pop	{r4, r7, pc}
 8008a66:	bf00      	nop
 8008a68:	aaaaaaab 	.word	0xaaaaaaab
 8008a6c:	ba2e8ba3 	.word	0xba2e8ba3
 8008a70:	200001e4 	.word	0x200001e4

08008a74 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE>:

/* Read cell data and generate a status report of the cell voltage register groups.
 * Returns a VoltageStatus on success, nullopt if error. */
[[nodiscard]] std::optional<VoltageStatus> read_cell_data(LTC6811::CellData& cell_data) noexcept {
 8008a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a76:	b099      	sub	sp, #100	; 0x64
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
    VoltageStatus status;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
 8008a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a86:	833b      	strh	r3, [r7, #24]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61fb      	str	r3, [r7, #28]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	843b      	strh	r3, [r7, #32]
 8008a90:	2300      	movs	r3, #0
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
    size_t count{ 0 };
 8008a94:	2300      	movs	r3, #0
 8008a96:	65fb      	str	r3, [r7, #92]	; 0x5c

    //WRCFG[0](config_register_group);
    //DWTWrapper::delay_us(500);
    //RDCFG[0](rd_cfgr_dump);
    LTC6811::RegisterGroup<uint8_t> config_register_group;
    ltc6811->ADCV();
 8008a98:	4b4b      	ldr	r3, [pc, #300]	; (8008bc8 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x154>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe f82f 	bl	8006b00 <_ZN7LTC68114ADCVEv>

    for (size_t i = 0; i < cell_data.size(); ++i)
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aa6:	6838      	ldr	r0, [r7, #0]
 8008aa8:	f000 ff39 	bl	800991e <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4sizeEv>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bf34      	ite	cc
 8008ab4:	2301      	movcc	r3, #1
 8008ab6:	2300      	movcs	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01e      	beq.n	8008afc <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x88>
        if (ltc6811->RDCV(static_cast<LTC6811::Group>(i), cell_data[i]) == true)
 8008abe:	4b42      	ldr	r3, [pc, #264]	; (8008bc8 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x154>)
 8008ac0:	681c      	ldr	r4, [r3, #0]
 8008ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ac4:	b2dd      	uxtb	r5, r3
 8008ac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ac8:	6838      	ldr	r0, [r7, #0]
 8008aca:	f000 ff33 	bl	8009934 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EEixEj>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7fd ffe3 	bl	8006aa0 <_ZN7LTC68114RDCVENS_5GroupERSt5arrayINS_8RegisterItEELj1EE>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	bf0c      	ite	eq
 8008ae0:	2301      	moveq	r3, #1
 8008ae2:	2300      	movne	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d004      	beq.n	8008af4 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x80>
            return std::nullopt;
 8008aea:	4631      	mov	r1, r6
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 ff65 	bl	80099bc <_ZNSt8optionalI13VoltageStatusEC1ESt9nullopt_t>
 8008af2:	e064      	b.n	8008bbe <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x14a>
    for (size_t i = 0; i < cell_data.size(); ++i)
 8008af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af6:	3301      	adds	r3, #1
 8008af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008afa:	e7d4      	b.n	8008aa6 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x32>

    for (const auto& register_group : cell_data) {
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b02:	f000 fe59 	bl	80097b8 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 8008b06:	6578      	str	r0, [r7, #84]	; 0x54
 8008b08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b0a:	f000 fe61 	bl	80097d0 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8008b0e:	6478      	str	r0, [r7, #68]	; 0x44
 8008b10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d046      	beq.n	8008ba6 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x132>
 8008b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1a:	643b      	str	r3, [r7, #64]	; 0x40
        for (const auto& IC : register_group) {
 8008b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b22:	f000 fe62 	bl	80097ea <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 8008b26:	6538      	str	r0, [r7, #80]	; 0x50
 8008b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b2a:	f000 fe6a 	bl	8009802 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 8008b2e:	63b8      	str	r0, [r7, #56]	; 0x38
 8008b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d032      	beq.n	8008b9e <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x12a>
 8008b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
            for (const auto voltage : IC.data) {
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b42:	f7ff fde1 	bl	8008708 <_ZNKSt5arrayItLj3EE5beginEv>
 8008b46:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4a:	f7ff fde9 	bl	8008720 <_ZNKSt5arrayItLj3EE3endEv>
 8008b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d01e      	beq.n	8008b96 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x122>
 8008b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	857b      	strh	r3, [r7, #42]	; 0x2a
                status.sum += voltage;
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b62:	4413      	add	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
                if (voltage < status.min) {
 8008b66:	8b3b      	ldrh	r3, [r7, #24]
 8008b68:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d204      	bcs.n	8008b78 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x104>
                    status.min = voltage;
 8008b6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b70:	833b      	strh	r3, [r7, #24]
                    status.min_id = count;
 8008b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	e007      	b.n	8008b88 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x114>
                } else if (voltage > status.max) {
 8008b78:	8c3b      	ldrh	r3, [r7, #32]
 8008b7a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d903      	bls.n	8008b88 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x114>
                    status.max = voltage;
 8008b80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b82:	843b      	strh	r3, [r7, #32]
                    status.max_id = count;
 8008b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
                }
                ++count;
 8008b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (const auto voltage : IC.data) {
 8008b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b90:	3302      	adds	r3, #2
 8008b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b94:	e7dc      	b.n	8008b50 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xdc>
        for (const auto& IC : register_group) {
 8008b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b98:	3308      	adds	r3, #8
 8008b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b9c:	e7c8      	b.n	8008b30 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xbc>
    for (const auto& register_group : cell_data) {
 8008b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ba4:	e7b4      	b.n	8008b10 <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x9c>
            }
        }
    }
    status.sum /= 10000; // Convert centiDegC to DegC (with rounding errors, but this is what the old code did...)
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4a08      	ldr	r2, [pc, #32]	; (8008bcc <_Z14read_cell_dataRSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x158>)
 8008baa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bae:	0b5b      	lsrs	r3, r3, #13
 8008bb0:	617b      	str	r3, [r7, #20]
    return status;
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 ff0d 	bl	80099d8 <_ZNSt8optionalI13VoltageStatusEC1IS0_Lb1EEEOT_>
}
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	3764      	adds	r7, #100	; 0x64
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	200001e4 	.word	0x200001e4
 8008bcc:	d1b71759 	.word	0xd1b71759

08008bd0 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs>:

/* Read temp data and generate a status report of the current temperatures from aux voltage register groups.
 * Returns a TempStatus on success, nullopt if error. */
[[nodiscard]] std::optional<TempStatus> read_temp_data(LTC6811::TempData& temp_data) noexcept {
    static constexpr auto steinharthart = [](int16_t const NTC_voltage) noexcept {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	; 0x28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	807b      	strh	r3, [r7, #2]
        constexpr auto Vin = 30000.0f; // 3[V], or 30000[V * 10-5]
 8008bdc:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xac>)
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
        constexpr auto KtoC = 27315; // centiKelvin to centiDegCelsius
 8008be0:	f646 23b3 	movw	r3, #27315	; 0x6ab3
 8008be4:	623b      	str	r3, [r7, #32]
        constexpr auto A = 0.003354016f;
 8008be6:	4b26      	ldr	r3, [pc, #152]	; (8008c80 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xb0>)
 8008be8:	61fb      	str	r3, [r7, #28]
        constexpr auto B = 0.000256524f;
 8008bea:	4b26      	ldr	r3, [pc, #152]	; (8008c84 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xb4>)
 8008bec:	61bb      	str	r3, [r7, #24]
        constexpr auto C = 0.00000260597f;
 8008bee:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xb8>)
 8008bf0:	617b      	str	r3, [r7, #20]
        constexpr auto D = 0.0000000632926f;
 8008bf2:	4b26      	ldr	r3, [pc, #152]	; (8008c8c <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xbc>)
 8008bf4:	613b      	str	r3, [r7, #16]
        auto log = -logf(Vin / NTC_voltage - 1);
 8008bf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c02:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008c90 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xc0>
 8008c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c12:	eeb0 0a67 	vmov.f32	s0, s15
 8008c16:	f001 fbe9 	bl	800a3ec <logf>
 8008c1a:	eef0 7a40 	vmov.f32	s15, s0
 8008c1e:	eef1 7a67 	vneg.f32	s15, s15
 8008c22:	edc7 7a03 	vstr	s15, [r7, #12]
        return static_cast<int16_t>(100.0f / (A + log * ( B + log * (C + D * log))) - KtoC);
 8008c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c2a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008c94 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xc4>
 8008c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c32:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008c98 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xc8>
 8008c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008c9c <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xcc>
 8008c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c52:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8008ca0 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xd0>
 8008c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c5a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008ca4 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xd4>
 8008c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c62:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008ca8 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs+0xd8>
 8008c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c6e:	ee17 3a90 	vmov	r3, s15
 8008c72:	b21b      	sxth	r3, r3
    };
 8008c74:	4618      	mov	r0, r3
 8008c76:	3728      	adds	r7, #40	; 0x28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	46ea6000 	.word	0x46ea6000
 8008c80:	3b5bcf0d 	.word	0x3b5bcf0d
 8008c84:	39867e12 	.word	0x39867e12
 8008c88:	362ee239 	.word	0x362ee239
 8008c8c:	3387eb7a 	.word	0x3387eb7a
 8008c90:	46ea6000 	.word	0x46ea6000
 8008c94:	3387eb7a 	.word	0x3387eb7a
 8008c98:	362ee239 	.word	0x362ee239
 8008c9c:	39867e12 	.word	0x39867e12
 8008ca0:	3b5bcf0d 	.word	0x3b5bcf0d
 8008ca4:	42c80000 	.word	0x42c80000
 8008ca8:	46d56600 	.word	0x46d56600

08008cac <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE>:
[[nodiscard]] std::optional<TempStatus> read_temp_data(LTC6811::TempData& temp_data) noexcept {
 8008cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cae:	b095      	sub	sp, #84	; 0x54
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]

    TempStatus status;
 8008cb6:	4b54      	ldr	r3, [pc, #336]	; (8008e08 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x15c>)
 8008cb8:	f107 0408 	add.w	r4, r7, #8
 8008cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t count{ 0 };
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	64fb      	str	r3, [r7, #76]	; 0x4c

    ltc6811->ADAX();
 8008cc6:	4b51      	ldr	r3, [pc, #324]	; (8008e0c <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x160>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd ff26 	bl	8006b1c <_ZN7LTC68114ADAXEv>

    for (size_t i = 0; i < temp_data.size(); ++i)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cd4:	6838      	ldr	r0, [r7, #0]
 8008cd6:	f000 fe93 	bl	8009a00 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4sizeEv>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	bf34      	ite	cc
 8008ce2:	2301      	movcc	r3, #1
 8008ce4:	2300      	movcs	r3, #0
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01e      	beq.n	8008d2a <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x7e>
        if (ltc6811->RDAUX(static_cast<LTC6811::Group>(i), temp_data[i]) == true)
 8008cec:	4b47      	ldr	r3, [pc, #284]	; (8008e0c <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x160>)
 8008cee:	681c      	ldr	r4, [r3, #0]
 8008cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf2:	b2dd      	uxtb	r5, r3
 8008cf4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f000 fe8d 	bl	8009a16 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEixEj>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4629      	mov	r1, r5
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7fd fee4 	bl	8006ad0 <_ZN7LTC68115RDAUXENS_5GroupERSt5arrayINS_8RegisterIsEELj1EE>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	2300      	movne	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x76>
            return std::nullopt;
 8008d18:	4631      	mov	r1, r6
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 febf 	bl	8009a9e <_ZNSt8optionalI10TempStatusEC1ESt9nullopt_t>
 8008d20:	e06e      	b.n	8008e00 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x154>
    for (size_t i = 0; i < temp_data.size(); ++i)
 8008d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d24:	3301      	adds	r3, #1
 8008d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d28:	e7d4      	b.n	8008cd4 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x28>

    for (auto& register_group : temp_data) {
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d30:	f000 fd74 	bl	800981c <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>
 8008d34:	6478      	str	r0, [r7, #68]	; 0x44
 8008d36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d38:	f000 fd7c 	bl	8009834 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>
 8008d3c:	6378      	str	r0, [r7, #52]	; 0x34
 8008d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d056      	beq.n	8008df4 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x148>
 8008d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30
        for (auto& IC : register_group) {
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d50:	f7fe f95c 	bl	800700c <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 8008d54:	6438      	str	r0, [r7, #64]	; 0x40
 8008d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d58:	f7fe f964 	bl	8007024 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8008d5c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d042      	beq.n	8008dec <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x140>
 8008d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
            for (auto& temperature : IC.data) {
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	623b      	str	r3, [r7, #32]
 8008d6e:	6a38      	ldr	r0, [r7, #32]
 8008d70:	f000 fea3 	bl	8009aba <_ZNSt5arrayIsLj3EE5beginEv>
 8008d74:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008d76:	6a38      	ldr	r0, [r7, #32]
 8008d78:	f000 feab 	bl	8009ad2 <_ZNSt5arrayIsLj3EE3endEv>
 8008d7c:	61f8      	str	r0, [r7, #28]
 8008d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d02e      	beq.n	8008de4 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x138>
 8008d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d88:	61bb      	str	r3, [r7, #24]
                temperature = steinharthart(temperature);
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d90:	4619      	mov	r1, r3
 8008d92:	481f      	ldr	r0, [pc, #124]	; (8008e10 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x164>)
 8008d94:	f7ff ff1c 	bl	8008bd0 <_ZZ14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEENKUlsE_clEs>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	801a      	strh	r2, [r3, #0]
                if (temperature < status.min) {
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008da6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	da06      	bge.n	8008dbc <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x110>
                    status.min = temperature;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db4:	813b      	strh	r3, [r7, #8]
                    status.min_id = count;
 8008db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	e00c      	b.n	8008dd6 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x12a>
                } else if (temperature > status.max) {
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008dc2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	dd05      	ble.n	8008dd6 <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x12a>
                    status.max = temperature;
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dd0:	823b      	strh	r3, [r7, #16]
                    status.max_id = count;
 8008dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd4:	617b      	str	r3, [r7, #20]
                }
                ++count;
 8008dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd8:	3301      	adds	r3, #1
 8008dda:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (auto& temperature : IC.data) {
 8008ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dde:	3302      	adds	r3, #2
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de2:	e7cc      	b.n	8008d7e <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xd2>
        for (auto& IC : register_group) {
 8008de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de6:	3308      	adds	r3, #8
 8008de8:	643b      	str	r3, [r7, #64]	; 0x40
 8008dea:	e7b8      	b.n	8008d5e <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xb2>
    for (auto& register_group : temp_data) {
 8008dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dee:	3308      	adds	r3, #8
 8008df0:	647b      	str	r3, [r7, #68]	; 0x44
 8008df2:	e7a4      	b.n	8008d3e <_Z14read_temp_dataRSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x92>
            }
        }
    }
    return status;
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fe76 	bl	8009aec <_ZNSt8optionalI10TempStatusEC1IS0_Lb1EEEOT_>
}
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	3754      	adds	r7, #84	; 0x54
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e08:	0800a920 	.word	0x0800a920
 8008e0c:	200001e4 	.word	0x200001e4
 8008e10:	0800ac00 	.word	0x0800ac00

08008e14 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN0 / CAN2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08c      	sub	sp, #48	; 0x30
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	2300      	movs	r3, #0
 8008e22:	613b      	str	r3, [r7, #16]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 8008e24:	f107 030c 	add.w	r3, r7, #12
 8008e28:	f107 0214 	add.w	r2, r7, #20
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7f7 fe79 	bl	8000b26 <HAL_CAN_GetRxMessage>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bf0c      	ite	eq
 8008e3a:	2301      	moveq	r3, #1
 8008e3c:	2300      	movne	r3, #0
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d05a      	beq.n	8008efa <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
        switch(RxHeader.StdId) {
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f240 5223 	movw	r2, #1315	; 0x523
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d03c      	beq.n	8008ec8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8008e4e:	f240 5223 	movw	r2, #1315	; 0x523
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d850      	bhi.n	8008ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
 8008e56:	f240 5221 	movw	r2, #1313	; 0x521
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
 8008e5e:	f240 5222 	movw	r2, #1314	; 0x522
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d018      	beq.n	8008e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
        case IVT_U2:
            ivt.set_voltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
            break;

        default:
            break;
 8008e66:	e047      	b.n	8008ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
            ivt.set_current(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	061a      	lsls	r2, r3, #24
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	041b      	lsls	r3, r3, #16
 8008e70:	431a      	orrs	r2, r3
 8008e72:	7c3b      	ldrb	r3, [r7, #16]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	4313      	orrs	r3, r2
 8008e78:	7c7a      	ldrb	r2, [r7, #17]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e84:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008f04 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8008e88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8008e90:	481d      	ldr	r0, [pc, #116]	; (8008f08 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8008e92:	f7fd fccb 	bl	800682c <_ZN3IVT11set_currentEf>
            break;
 8008e96:	e030      	b.n	8008efa <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            ivt.set_voltage1(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	061a      	lsls	r2, r3, #24
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	7c3b      	ldrb	r3, [r7, #16]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	7c7a      	ldrb	r2, [r7, #17]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8008f04 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8008eb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8008ec0:	4811      	ldr	r0, [pc, #68]	; (8008f08 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8008ec2:	f7fd fcd9 	bl	8006878 <_ZN3IVT12set_voltage1Ef>
            break;
 8008ec6:	e018      	b.n	8008efa <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            ivt.set_voltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	061a      	lsls	r2, r3, #24
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	7c3b      	ldrb	r3, [r7, #16]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	7c7a      	ldrb	r2, [r7, #17]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ee4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8008f04 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8008ee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008eec:	eeb0 0a47 	vmov.f32	s0, s14
 8008ef0:	4805      	ldr	r0, [pc, #20]	; (8008f08 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8008ef2:	f7fd fce7 	bl	80068c4 <_ZN3IVT12set_voltage2Ef>
            break;
 8008ef6:	e000      	b.n	8008efa <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            break;
 8008ef8:	bf00      	nop
        }
    }
}
 8008efa:	bf00      	nop
 8008efc:	3730      	adds	r7, #48	; 0x30
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	447a0000 	.word	0x447a0000
 8008f08:	200001ec 	.word	0x200001ec

08008f0c <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN1
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08c      	sub	sp, #48	; 0x30
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	613b      	str	r3, [r7, #16]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, data) == HAL_OK) {
 8008f1c:	f107 030c 	add.w	r3, r7, #12
 8008f20:	f107 0214 	add.w	r2, r7, #20
 8008f24:	2101      	movs	r1, #1
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f7 fdfd 	bl	8000b26 <HAL_CAN_GetRxMessage>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf0c      	ite	eq
 8008f32:	2301      	moveq	r3, #1
 8008f34:	2300      	movne	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80b0 	beq.w	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
        switch(RxHeader.StdId) {
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f240 72b4 	movw	r2, #1972	; 0x7b4
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d053      	beq.n	8008ff0 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 8008f48:	f240 72b4 	movw	r2, #1972	; 0x7b4
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	f200 80a3 	bhi.w	8009098 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
 8008f52:	f240 726e 	movw	r2, #1902	; 0x76e
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d072      	beq.n	8009040 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>
 8008f5a:	f240 726e 	movw	r2, #1902	; 0x76e
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f200 809a 	bhi.w	8009098 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
 8008f64:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8008f68:	d031      	beq.n	8008fce <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
 8008f6a:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8008f6e:	f200 8093 	bhi.w	8009098 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
 8008f72:	2b7b      	cmp	r3, #123	; 0x7b
 8008f74:	d003      	beq.n	8008f7e <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 8008f76:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8008f7a:	d017      	beq.n	8008fac <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>
                pwm_fan->setDutyCycle(data[7]);

            break;

        default:
            break;
 8008f7c:	e08c      	b.n	8009098 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
            rtc.year = data[0] + 2000;
 8008f7e:	7b3b      	ldrb	r3, [r7, #12]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	4b47      	ldr	r3, [pc, #284]	; (80090a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008f8a:	801a      	strh	r2, [r3, #0]
            rtc.month = data[1];
 8008f8c:	7b7a      	ldrb	r2, [r7, #13]
 8008f8e:	4b46      	ldr	r3, [pc, #280]	; (80090a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008f90:	709a      	strb	r2, [r3, #2]
            rtc.days = data[2];
 8008f92:	7bba      	ldrb	r2, [r7, #14]
 8008f94:	4b44      	ldr	r3, [pc, #272]	; (80090a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008f96:	70da      	strb	r2, [r3, #3]
            rtc.hours = data[3];
 8008f98:	7bfa      	ldrb	r2, [r7, #15]
 8008f9a:	4b43      	ldr	r3, [pc, #268]	; (80090a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008f9c:	711a      	strb	r2, [r3, #4]
            rtc.minutes = data[4];
 8008f9e:	7c3a      	ldrb	r2, [r7, #16]
 8008fa0:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fa2:	715a      	strb	r2, [r3, #5]
            rtc.seconds = data[5];
 8008fa4:	7c7a      	ldrb	r2, [r7, #17]
 8008fa6:	4b40      	ldr	r3, [pc, #256]	; (80090a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fa8:	719a      	strb	r2, [r3, #6]
            break;
 8008faa:	e078      	b.n	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            nlg5->a_buffer[0] = data[0];
 8008fac:	4b3f      	ldr	r3, [pc, #252]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	7b3a      	ldrb	r2, [r7, #12]
 8008fb2:	751a      	strb	r2, [r3, #20]
            nlg5->a_buffer[1] = data[1];
 8008fb4:	4b3d      	ldr	r3, [pc, #244]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	7b7a      	ldrb	r2, [r7, #13]
 8008fba:	755a      	strb	r2, [r3, #21]
            nlg5->a_buffer[2] = data[2];
 8008fbc:	4b3b      	ldr	r3, [pc, #236]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	7bba      	ldrb	r2, [r7, #14]
 8008fc2:	759a      	strb	r2, [r3, #22]
            nlg5->a_buffer[3] = data[3];
 8008fc4:	4b39      	ldr	r3, [pc, #228]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	7bfa      	ldrb	r2, [r7, #15]
 8008fca:	75da      	strb	r2, [r3, #23]
            break;
 8008fcc:	e067      	b.n	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            nlg5->b_buffer[0] = data[0];
 8008fce:	4b37      	ldr	r3, [pc, #220]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	7b3a      	ldrb	r2, [r7, #12]
 8008fd4:	761a      	strb	r2, [r3, #24]
            nlg5->b_buffer[1] = data[1];
 8008fd6:	4b35      	ldr	r3, [pc, #212]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	7b7a      	ldrb	r2, [r7, #13]
 8008fdc:	765a      	strb	r2, [r3, #25]
            nlg5->b_buffer[2] = data[2];
 8008fde:	4b33      	ldr	r3, [pc, #204]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	7bba      	ldrb	r2, [r7, #14]
 8008fe4:	769a      	strb	r2, [r3, #26]
            nlg5->b_buffer[3] = data[3];
 8008fe6:	4b31      	ldr	r3, [pc, #196]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	7bfa      	ldrb	r2, [r7, #15]
 8008fec:	76da      	strb	r2, [r3, #27]
            break;
 8008fee:	e056      	b.n	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            switch (data[3]) {
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d820      	bhi.n	8009038 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009039 	.word	0x08009039
 8009000:	0800900d 	.word	0x0800900d
 8009004:	08009029 	.word	0x08009029
 8009008:	08009039 	.word	0x08009039
                if (retSD == FR_OK)
 800900c:	4b28      	ldr	r3, [pc, #160]	; (80090b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>
                    CANTxVolumeSize(f_size(&SDFile));
 8009014:	4b27      	ldr	r3, [pc, #156]	; (80090b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 faff 	bl	800961c <_Z15CANTxVolumeSizem>
                break;
 800901e:	e00e      	b.n	800903e <HAL_CAN_RxFifo1MsgPendingCallback+0x132>
                    CANTxVolumeSize(0);
 8009020:	2000      	movs	r0, #0
 8009022:	f000 fafb 	bl	800961c <_Z15CANTxVolumeSizem>
                break;
 8009026:	e00a      	b.n	800903e <HAL_CAN_RxFifo1MsgPendingCallback+0x132>
                if (retSD == FR_OK)
 8009028:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>
                    f_unlink(kFile);
 8009030:	4821      	ldr	r0, [pc, #132]	; (80090b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 8009032:	f7fd f825 	bl	8006080 <f_unlink>
                break;
 8009036:	e001      	b.n	800903c <HAL_CAN_RxFifo1MsgPendingCallback+0x130>
                break;
 8009038:	bf00      	nop
 800903a:	e030      	b.n	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
                break;
 800903c:	bf00      	nop
            break;
 800903e:	e02e      	b.n	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            status.set_op_mode(static_cast<Op_Mode>(data[2]));
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	4619      	mov	r1, r3
 8009044:	481d      	ldr	r0, [pc, #116]	; (80090bc <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 8009046:	f7fe fb0a 	bl	800765e <_ZN6Status11set_op_modeE7Op_Mode>
            discharge_mode = static_cast<DischargeMode>(data[3]);
 800904a:	7bfa      	ldrb	r2, [r7, #15]
 800904c:	4b1c      	ldr	r3, [pc, #112]	; (80090c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 800904e:	701a      	strb	r2, [r3, #0]
            nlg5->oc_limit = data[6];
 8009050:	7cba      	ldrb	r2, [r7, #18]
 8009052:	4b16      	ldr	r3, [pc, #88]	; (80090ac <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	b292      	uxth	r2, r2
 8009058:	821a      	strh	r2, [r3, #16]
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 800905a:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	7cfb      	ldrb	r3, [r7, #19]
 8009060:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009064:	b2db      	uxtb	r3, r3
 8009066:	4619      	mov	r1, r3
 8009068:	4610      	mov	r0, r2
 800906a:	f7fe facf 	bl	800760c <_ZN7PWM_Fan7setModeENS_4ModeE>
            if (pwm_fan->getMode() == PWM_Fan::Manual)
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fad9 	bl	800762a <_ZNK7PWM_Fan7getModeEv>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	bf0c      	ite	eq
 800907e:	2301      	moveq	r3, #1
 8009080:	2300      	movne	r3, #0
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d009      	beq.n	800909c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
                pwm_fan->setDutyCycle(data[7]);
 8009088:	4b0e      	ldr	r3, [pc, #56]	; (80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	7cfa      	ldrb	r2, [r7, #19]
 800908e:	4611      	mov	r1, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fa61 	bl	8007558 <_ZNK7PWM_Fan12setDutyCycleEh>
            break;
 8009096:	e001      	b.n	800909c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            break;
 8009098:	bf00      	nop
 800909a:	e000      	b.n	800909e <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            break;
 800909c:	bf00      	nop
        }
    }
}
 800909e:	bf00      	nop
 80090a0:	3730      	adds	r7, #48	; 0x30
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	200000f0 	.word	0x200000f0
 80090ac:	200001e0 	.word	0x200001e0
 80090b0:	2000022c 	.word	0x2000022c
 80090b4:	20000234 	.word	0x20000234
 80090b8:	0800a89c 	.word	0x0800a89c
 80090bc:	20000200 	.word	0x20000200
 80090c0:	2000020f 	.word	0x2000020f
 80090c4:	200001e8 	.word	0x200001e8

080090c8 <_Z11CANTxStatusv>:

HAL_StatusTypeDef CANTxStatus() {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
    TxHeader.StdId = OpMode;
 80090ce:	4b1b      	ldr	r3, [pc, #108]	; (800913c <_Z11CANTxStatusv+0x74>)
 80090d0:	2208      	movs	r2, #8
 80090d2:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80090d4:	4b19      	ldr	r3, [pc, #100]	; (800913c <_Z11CANTxStatusv+0x74>)
 80090d6:	2208      	movs	r2, #8
 80090d8:	611a      	str	r2, [r3, #16]

    uint32_t const uptime = get_uptime();
 80090da:	f7fe fb05 	bl	80076e8 <_Z10get_uptimev>
 80090de:	60f8      	str	r0, [r7, #12]

    uint8_t data[] = {
            static_cast<uint8_t>(uptime >> 24),
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(uptime >>  0),
            status.get_op_mode(),
            status.get_last_error(),
            status.get_precharge_state(),
            status.get_AIR_state()
    };
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(uptime >> 16),
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0c1b      	lsrs	r3, r3, #16
    };
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(uptime >>  8),
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	0a1b      	lsrs	r3, r3, #8
    };
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	71bb      	strb	r3, [r7, #6]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	71fb      	strb	r3, [r7, #7]
            status.get_op_mode(),
 80090fe:	4810      	ldr	r0, [pc, #64]	; (8009140 <_Z11CANTxStatusv+0x78>)
 8009100:	f7fe faa0 	bl	8007644 <_ZNK6Status11get_op_modeEv>
 8009104:	4603      	mov	r3, r0
    };
 8009106:	723b      	strb	r3, [r7, #8]
            status.get_last_error(),
 8009108:	480d      	ldr	r0, [pc, #52]	; (8009140 <_Z11CANTxStatusv+0x78>)
 800910a:	f7fe fab7 	bl	800767c <_ZNK6Status14get_last_errorEv>
 800910e:	4603      	mov	r3, r0
    };
 8009110:	727b      	strb	r3, [r7, #9]
            status.get_precharge_state(),
 8009112:	480b      	ldr	r0, [pc, #44]	; (8009140 <_Z11CANTxStatusv+0x78>)
 8009114:	f7fe f85e 	bl	80071d4 <_ZNK6Status19get_precharge_stateEv>
 8009118:	4603      	mov	r3, r0
    };
 800911a:	72bb      	strb	r3, [r7, #10]
            status.get_AIR_state()
 800911c:	4808      	ldr	r0, [pc, #32]	; (8009140 <_Z11CANTxStatusv+0x78>)
 800911e:	f7fe f883 	bl	8007228 <_ZNK6Status13get_AIR_stateEv>
 8009122:	4603      	mov	r3, r0
    };
 8009124:	72fb      	strb	r3, [r7, #11]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009126:	1d3a      	adds	r2, r7, #4
 8009128:	4b06      	ldr	r3, [pc, #24]	; (8009144 <_Z11CANTxStatusv+0x7c>)
 800912a:	4904      	ldr	r1, [pc, #16]	; (800913c <_Z11CANTxStatusv+0x74>)
 800912c:	4806      	ldr	r0, [pc, #24]	; (8009148 <_Z11CANTxStatusv+0x80>)
 800912e:	f7f7 fc1f 	bl	8000970 <HAL_CAN_AddTxMessage>
 8009132:	4603      	mov	r3, r0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000008 	.word	0x20000008
 8009140:	20000200 	.word	0x20000200
 8009144:	200001fc 	.word	0x200001fc
 8009148:	200000f8 	.word	0x200000f8

0800914c <_Z13CANTxPECErrorv>:

HAL_StatusTypeDef CANTxPECError() {
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
    TxHeader.StdId = PECError;
 8009152:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <_Z13CANTxPECErrorv+0x80>)
 8009154:	2209      	movs	r2, #9
 8009156:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8009158:	4b1c      	ldr	r3, [pc, #112]	; (80091cc <_Z13CANTxPECErrorv+0x80>)
 800915a:	2208      	movs	r2, #8
 800915c:	611a      	str	r2, [r3, #16]

    static uint32_t last_error{ 0 };

    uint32_t const total_error{ status.get_error_count(PECError) };
 800915e:	2109      	movs	r1, #9
 8009160:	481b      	ldr	r0, [pc, #108]	; (80091d0 <_Z13CANTxPECErrorv+0x84>)
 8009162:	f7fe fa97 	bl	8007694 <_ZN6Status15get_error_countE5Error>
 8009166:	4603      	mov	r3, r0
 8009168:	60fb      	str	r3, [r7, #12]
    uint32_t const error_change = total_error - last_error;
 800916a:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <_Z13CANTxPECErrorv+0x88>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	60bb      	str	r3, [r7, #8]
    uint8_t data[] = {
            static_cast<uint8_t>(total_error >> 24),
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(total_error >>  0),
            static_cast<uint8_t>(error_change >> 24),
            static_cast<uint8_t>(error_change >> 16),
            static_cast<uint8_t>(error_change >>  8),
            static_cast<uint8_t>(error_change >>  0),
    };
 8009178:	b2db      	uxtb	r3, r3
 800917a:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(total_error >> 16),
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	0c1b      	lsrs	r3, r3, #16
    };
 8009180:	b2db      	uxtb	r3, r3
 8009182:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(total_error >>  8),
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	0a1b      	lsrs	r3, r3, #8
    };
 8009188:	b2db      	uxtb	r3, r3
 800918a:	70bb      	strb	r3, [r7, #2]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(error_change >> 24),
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	0e1b      	lsrs	r3, r3, #24
    };
 8009196:	b2db      	uxtb	r3, r3
 8009198:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(error_change >> 16),
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	0c1b      	lsrs	r3, r3, #16
    };
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(error_change >>  8),
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	0a1b      	lsrs	r3, r3, #8
    };
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	71bb      	strb	r3, [r7, #6]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	71fb      	strb	r3, [r7, #7]
    last_error = total_error;
 80091b0:	4a08      	ldr	r2, [pc, #32]	; (80091d4 <_Z13CANTxPECErrorv+0x88>)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6013      	str	r3, [r2, #0]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 80091b6:	463a      	mov	r2, r7
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <_Z13CANTxPECErrorv+0x8c>)
 80091ba:	4904      	ldr	r1, [pc, #16]	; (80091cc <_Z13CANTxPECErrorv+0x80>)
 80091bc:	4807      	ldr	r0, [pc, #28]	; (80091dc <_Z13CANTxPECErrorv+0x90>)
 80091be:	f7f7 fbd7 	bl	8000970 <HAL_CAN_AddTxMessage>
 80091c2:	4603      	mov	r3, r0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000008 	.word	0x20000008
 80091d0:	20000200 	.word	0x20000200
 80091d4:	20000210 	.word	0x20000210
 80091d8:	200001fc 	.word	0x200001fc
 80091dc:	200000f8 	.word	0x200000f8

080091e0 <_Z9CANTxDatatts>:

HAL_StatusTypeDef CANTxData(uint16_t const v_min, uint16_t const v_max, int16_t const t_max) {
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	80fb      	strh	r3, [r7, #6]
 80091ea:	460b      	mov	r3, r1
 80091ec:	80bb      	strh	r3, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	807b      	strh	r3, [r7, #2]
    TxHeader.StdId = Data;
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <_Z9CANTxDatatts+0x84>)
 80091f4:	220a      	movs	r2, #10
 80091f6:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80091f8:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <_Z9CANTxDatatts+0x84>)
 80091fa:	2208      	movs	r2, #8
 80091fc:	611a      	str	r2, [r3, #16]

    uint16_t U1 = static_cast<uint16_t>(ivt.get_voltage1()); // TODO this is bad
 80091fe:	481a      	ldr	r0, [pc, #104]	; (8009268 <_Z9CANTxDatatts+0x88>)
 8009200:	f7fd fb50 	bl	80068a4 <_ZN3IVT12get_voltage1Ev>
 8009204:	eef0 7a40 	vmov.f32	s15, s0
 8009208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800920c:	ee17 3a90 	vmov	r3, s15
 8009210:	82fb      	strh	r3, [r7, #22]
    uint8_t data[] = {
            static_cast<uint8_t>(U1 >> 8),
 8009212:	8afb      	ldrh	r3, [r7, #22]
 8009214:	121b      	asrs	r3, r3, #8
            static_cast<uint8_t>(v_min >> 0),
            static_cast<uint8_t>(v_max >> 8),
            static_cast<uint8_t>(v_max >> 0),
            static_cast<uint8_t>(t_max >> 8),
            static_cast<uint8_t>(t_max >> 0)
    };
 8009216:	b2db      	uxtb	r3, r3
 8009218:	733b      	strb	r3, [r7, #12]
 800921a:	8afb      	ldrh	r3, [r7, #22]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(v_min >> 8),
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	121b      	asrs	r3, r3, #8
    };
 8009224:	b2db      	uxtb	r3, r3
 8009226:	73bb      	strb	r3, [r7, #14]
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	73fb      	strb	r3, [r7, #15]
            static_cast<uint8_t>(v_max >> 8),
 800922e:	88bb      	ldrh	r3, [r7, #4]
 8009230:	121b      	asrs	r3, r3, #8
    };
 8009232:	b2db      	uxtb	r3, r3
 8009234:	743b      	strb	r3, [r7, #16]
 8009236:	88bb      	ldrh	r3, [r7, #4]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	747b      	strb	r3, [r7, #17]
            static_cast<uint8_t>(t_max >> 8),
 800923c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009240:	121b      	asrs	r3, r3, #8
    };
 8009242:	b2db      	uxtb	r3, r3
 8009244:	74bb      	strb	r3, [r7, #18]
 8009246:	887b      	ldrh	r3, [r7, #2]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	74fb      	strb	r3, [r7, #19]
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 800924c:	f107 020c 	add.w	r2, r7, #12
 8009250:	4b06      	ldr	r3, [pc, #24]	; (800926c <_Z9CANTxDatatts+0x8c>)
 8009252:	4904      	ldr	r1, [pc, #16]	; (8009264 <_Z9CANTxDatatts+0x84>)
 8009254:	4806      	ldr	r0, [pc, #24]	; (8009270 <_Z9CANTxDatatts+0x90>)
 8009256:	f7f7 fb8b 	bl	8000970 <HAL_CAN_AddTxMessage>
 800925a:	4603      	mov	r3, r0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000008 	.word	0x20000008
 8009268:	200001ec 	.word	0x200001ec
 800926c:	200001fc 	.word	0x200001fc
 8009270:	200000f8 	.word	0x200000f8

08009274 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE>:

HAL_StatusTypeDef CANTxVoltage(LTC6811::CellData const & cell_data) {
 8009274:	b580      	push	{r7, lr}
 8009276:	b08e      	sub	sp, #56	; 0x38
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = Volt;
 800927c:	4b3c      	ldr	r3, [pc, #240]	; (8009370 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xfc>)
 800927e:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 8009282:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8009284:	4b3a      	ldr	r3, [pc, #232]	; (8009370 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xfc>)
 8009286:	2208      	movs	r2, #8
 8009288:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800928a:	2300      	movs	r3, #0
 800928c:	60bb      	str	r3, [r7, #8]
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
    for (size_t current_ic = 0, byte_position = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 8009292:	2300      	movs	r3, #0
 8009294:	637b      	str	r3, [r7, #52]	; 0x34
 8009296:	2300      	movs	r3, #0
 8009298:	633b      	str	r3, [r7, #48]	; 0x30
 800929a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	d162      	bne.n	8009366 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xf2>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
 80092a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092a6:	f000 faeb 	bl	8009880 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 80092aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80092ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ae:	f000 faf3 	bl	8009898 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 80092b2:	6238      	str	r0, [r7, #32]
 80092b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d050      	beq.n	800935e <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xea>
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	61fb      	str	r3, [r7, #28]
            for (const auto value : register_group[current_ic].data) { // 3 voltages per IC
 80092c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092c2:	69f8      	ldr	r0, [r7, #28]
 80092c4:	f000 faf5 	bl	80098b2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 80092c8:	4603      	mov	r3, r0
 80092ca:	61bb      	str	r3, [r7, #24]
 80092cc:	69b8      	ldr	r0, [r7, #24]
 80092ce:	f7ff fa1b 	bl	8008708 <_ZNKSt5arrayItLj3EE5beginEv>
 80092d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80092d4:	69b8      	ldr	r0, [r7, #24]
 80092d6:	f7ff fa23 	bl	8008720 <_ZNKSt5arrayItLj3EE3endEv>
 80092da:	6178      	str	r0, [r7, #20]
 80092dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d038      	beq.n	8009356 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xe2>
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	827b      	strh	r3, [r7, #18]
                data[byte_position++] = static_cast<uint8_t>(value >> 8);
 80092ea:	8a7b      	ldrh	r3, [r7, #18]
 80092ec:	121b      	asrs	r3, r3, #8
 80092ee:	b2d9      	uxtb	r1, r3
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	633a      	str	r2, [r7, #48]	; 0x30
 80092f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80092fa:	4413      	add	r3, r2
 80092fc:	460a      	mov	r2, r1
 80092fe:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(value);
 8009302:	8a7b      	ldrh	r3, [r7, #18]
 8009304:	b2d9      	uxtb	r1, r3
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	633a      	str	r2, [r7, #48]	; 0x30
 800930c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009310:	4413      	add	r3, r2
 8009312:	460a      	mov	r2, r1
 8009314:	f803 2c30 	strb.w	r2, [r3, #-48]

                if (byte_position == 8) {
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	2b08      	cmp	r3, #8
 800931c:	d117      	bne.n	800934e <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xda>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 800931e:	f107 0208 	add.w	r2, r7, #8
 8009322:	4b14      	ldr	r3, [pc, #80]	; (8009374 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x100>)
 8009324:	4912      	ldr	r1, [pc, #72]	; (8009370 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xfc>)
 8009326:	4814      	ldr	r0, [pc, #80]	; (8009378 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x104>)
 8009328:	f7f7 fb22 	bl	8000970 <HAL_CAN_AddTxMessage>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	bf14      	ite	ne
 8009332:	2301      	movne	r3, #1
 8009334:	2300      	moveq	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xcc>
                        return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e013      	b.n	8009368 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xf4>
                    byte_position = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	633b      	str	r3, [r7, #48]	; 0x30
                    ++TxHeader.StdId;
 8009344:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xfc>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	4a09      	ldr	r2, [pc, #36]	; (8009370 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xfc>)
 800934c:	6013      	str	r3, [r2, #0]
            for (const auto value : register_group[current_ic].data) { // 3 voltages per IC
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	3302      	adds	r3, #2
 8009352:	62bb      	str	r3, [r7, #40]	; 0x28
 8009354:	e7c2      	b.n	80092dc <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x68>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	3308      	adds	r3, #8
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800935c:	e7aa      	b.n	80092b4 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x40>
    for (size_t current_ic = 0, byte_position = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800935e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009360:	3301      	adds	r3, #1
 8009362:	637b      	str	r3, [r7, #52]	; 0x34
 8009364:	e799      	b.n	800929a <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x26>
                }
            } // 4 * 3 == 12 voltages associated with each LTC6811 in the daisy chain
        }
    } // 4 * 3 * kDaisyChainLength == all voltages associated with the daisy chain
    return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3738      	adds	r7, #56	; 0x38
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000008 	.word	0x20000008
 8009374:	200001fc 	.word	0x200001fc
 8009378:	200000f8 	.word	0x200000f8

0800937c <_ZNKSt5arrayIsLj3EE5beginEv>:
      begin() const noexcept
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fbf8 	bl	8009b7a <_ZNKSt5arrayIsLj3EE4dataEv>
 800938a:	4603      	mov	r3, r0
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <_ZNKSt5arrayIsLj3EE3endEv>:
      end() const noexcept
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fbec 	bl	8009b7a <_ZNKSt5arrayIsLj3EE4dataEv>
 80093a2:	4603      	mov	r3, r0
 80093a4:	3306      	adds	r3, #6
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE>:

HAL_StatusTypeDef CANTxTemperature(LTC6811::TempData const & temp_data) {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = Temp;
 80093b8:	4b3d      	ldr	r3, [pc, #244]	; (80094b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x100>)
 80093ba:	f240 729c 	movw	r2, #1948	; 0x79c
 80093be:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80093c0:	4b3b      	ldr	r3, [pc, #236]	; (80094b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x100>)
 80093c2:	2208      	movs	r2, #8
 80093c4:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
    for (size_t current_ic = 0, byte_position = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 80093ce:	2300      	movs	r3, #0
 80093d0:	637b      	str	r3, [r7, #52]	; 0x34
 80093d2:	2300      	movs	r3, #0
 80093d4:	633b      	str	r3, [r7, #48]	; 0x30
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d163      	bne.n	80094a4 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xf4>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
 80093e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e2:	f000 fb97 	bl	8009b14 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>
 80093e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80093e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ea:	f000 fb9f 	bl	8009b2c <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>
 80093ee:	6238      	str	r0, [r7, #32]
 80093f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d051      	beq.n	800949c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xec>
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	61fb      	str	r3, [r7, #28]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 80093fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093fe:	69f8      	ldr	r0, [r7, #28]
 8009400:	f000 fba1 	bl	8009b46 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EEixEj>
 8009404:	4603      	mov	r3, r0
 8009406:	61bb      	str	r3, [r7, #24]
 8009408:	69b8      	ldr	r0, [r7, #24]
 800940a:	f7ff ffb7 	bl	800937c <_ZNKSt5arrayIsLj3EE5beginEv>
 800940e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009410:	69b8      	ldr	r0, [r7, #24]
 8009412:	f7ff ffbf 	bl	8009394 <_ZNKSt5arrayIsLj3EE3endEv>
 8009416:	6178      	str	r0, [r7, #20]
 8009418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	429a      	cmp	r2, r3
 800941e:	d039      	beq.n	8009494 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xe4>
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	827b      	strh	r3, [r7, #18]
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 8009426:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800942a:	121b      	asrs	r3, r3, #8
 800942c:	b2d9      	uxtb	r1, r3
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	633a      	str	r2, [r7, #48]	; 0x30
 8009434:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009438:	4413      	add	r3, r2
 800943a:	460a      	mov	r2, r1
 800943c:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(temperature);
 8009440:	8a7b      	ldrh	r3, [r7, #18]
 8009442:	b2d9      	uxtb	r1, r3
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	633a      	str	r2, [r7, #48]	; 0x30
 800944a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800944e:	4413      	add	r3, r2
 8009450:	460a      	mov	r2, r1
 8009452:	f803 2c30 	strb.w	r2, [r3, #-48]
                if (byte_position == 8) {
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	2b08      	cmp	r3, #8
 800945a:	d117      	bne.n	800948c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xdc>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 800945c:	f107 0208 	add.w	r2, r7, #8
 8009460:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x104>)
 8009462:	4913      	ldr	r1, [pc, #76]	; (80094b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x100>)
 8009464:	4814      	ldr	r0, [pc, #80]	; (80094b8 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x108>)
 8009466:	f7f7 fa83 	bl	8000970 <HAL_CAN_AddTxMessage>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xce>
                        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e013      	b.n	80094a6 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xf6>
                    byte_position = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	633b      	str	r3, [r7, #48]	; 0x30
                    ++TxHeader.StdId;
 8009482:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x100>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x100>)
 800948a:	6013      	str	r3, [r2, #0]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	3302      	adds	r3, #2
 8009490:	62bb      	str	r3, [r7, #40]	; 0x28
 8009492:	e7c1      	b.n	8009418 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x68>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 8009494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009496:	3308      	adds	r3, #8
 8009498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800949a:	e7a9      	b.n	80093f0 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x40>
    for (size_t current_ic = 0, byte_position = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800949c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949e:	3301      	adds	r3, #1
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
 80094a2:	e798      	b.n	80093d6 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x26>
                }
            } // 2 * 3 == 6 temperatures associated with each LTC6811 in the daisy chain
        }
    } // 2 * 3 * kDaisyChainLength == all temperatures associated with the daisy chain
    return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3738      	adds	r7, #56	; 0x38
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000008 	.word	0x20000008
 80094b4:	200001fc 	.word	0x200001fc
 80094b8:	200000f8 	.word	0x200000f8

080094bc <_Z21CANTxVoltageLimpTotalm>:

HAL_StatusTypeDef CANTxVoltageLimpTotal(uint32_t const sum_of_cells) {
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = VoltTotal;
 80094c4:	4b15      	ldr	r3, [pc, #84]	; (800951c <_Z21CANTxVoltageLimpTotalm+0x60>)
 80094c6:	220b      	movs	r2, #11
 80094c8:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80094ca:	4b14      	ldr	r3, [pc, #80]	; (800951c <_Z21CANTxVoltageLimpTotalm+0x60>)
 80094cc:	2208      	movs	r2, #8
 80094ce:	611a      	str	r2, [r3, #16]
    uint8_t data[8] {
 80094d0:	f107 0308 	add.w	r3, r7, #8
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	605a      	str	r2, [r3, #4]
        static_cast<uint8_t>(sum_of_cells >> 24),
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	0e1b      	lsrs	r3, r3, #24
                static_cast<uint8_t>(sum_of_cells >>  0),
                status.get_error_over_limit(Limping),
                0x0,
                0x0,
                0x0
    };
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	723b      	strb	r3, [r7, #8]
                static_cast<uint8_t>(sum_of_cells >> 16),
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	0c1b      	lsrs	r3, r3, #16
    };
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	727b      	strb	r3, [r7, #9]
                static_cast<uint8_t>(sum_of_cells >>  8),
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	0a1b      	lsrs	r3, r3, #8
    };
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	72bb      	strb	r3, [r7, #10]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	72fb      	strb	r3, [r7, #11]
                status.get_error_over_limit(Limping),
 80094f8:	2103      	movs	r1, #3
 80094fa:	4809      	ldr	r0, [pc, #36]	; (8009520 <_Z21CANTxVoltageLimpTotalm+0x64>)
 80094fc:	f7fe f8da 	bl	80076b4 <_ZN6Status20get_error_over_limitE5Error>
 8009500:	4603      	mov	r3, r0
    };
 8009502:	733b      	strb	r3, [r7, #12]
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009504:	f107 0208 	add.w	r2, r7, #8
 8009508:	4b06      	ldr	r3, [pc, #24]	; (8009524 <_Z21CANTxVoltageLimpTotalm+0x68>)
 800950a:	4904      	ldr	r1, [pc, #16]	; (800951c <_Z21CANTxVoltageLimpTotalm+0x60>)
 800950c:	4806      	ldr	r0, [pc, #24]	; (8009528 <_Z21CANTxVoltageLimpTotalm+0x6c>)
 800950e:	f7f7 fa2f 	bl	8000970 <HAL_CAN_AddTxMessage>
 8009512:	4603      	mov	r3, r0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20000008 	.word	0x20000008
 8009520:	20000200 	.word	0x20000200
 8009524:	200001fc 	.word	0x200001fc
 8009528:	200000f8 	.word	0x200000f8

0800952c <_Z10CANTxDCCfgv>:

/* Put discharge flag data on CAN bus. */
HAL_StatusTypeDef CANTxDCCfg() {
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af00      	add	r7, sp, #0
    TxHeader.StdId = DishB;
 8009532:	4b36      	ldr	r3, [pc, #216]	; (800960c <_Z10CANTxDCCfgv+0xe0>)
 8009534:	f240 7275 	movw	r2, #1909	; 0x775
 8009538:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800953a:	4b34      	ldr	r3, [pc, #208]	; (800960c <_Z10CANTxDCCfgv+0xe0>)
 800953c:	2208      	movs	r2, #8
 800953e:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	2300      	movs	r3, #0
 8009546:	613b      	str	r3, [r7, #16]
    uint8_t byte_position{ 0 };
 8009548:	2300      	movs	r3, #0
 800954a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LTC6811::RegisterGroup<uint8_t> config_register_group;
    ltc6811->RDCFG(LTC6811::A, config_register_group);
 800954e:	4b30      	ldr	r3, [pc, #192]	; (8009610 <_Z10CANTxDCCfgv+0xe4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	1d3a      	adds	r2, r7, #4
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f7fd fa8a 	bl	8006a70 <_ZN7LTC68115RDCFGENS_5GroupERSt5arrayINS_8RegisterIhEELj1EE>
    for (const auto& IC : config_register_group) {
 800955c:	1d3b      	adds	r3, r7, #4
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	69f8      	ldr	r0, [r7, #28]
 8009562:	f7fd fc92 	bl	8006e8a <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8009566:	6238      	str	r0, [r7, #32]
 8009568:	69f8      	ldr	r0, [r7, #28]
 800956a:	f7fd fc9a 	bl	8006ea2 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 800956e:	61b8      	str	r0, [r7, #24]
 8009570:	6a3a      	ldr	r2, [r7, #32]
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	429a      	cmp	r2, r3
 8009576:	d044      	beq.n	8009602 <_Z10CANTxDCCfgv+0xd6>
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	617b      	str	r3, [r7, #20]
        data[byte_position++] = IC.data[5];
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2105      	movs	r1, #5
 8009580:	4618      	mov	r0, r3
 8009582:	f7fd fc9b 	bl	8006ebc <_ZNKSt5arrayIhLj6EEixEj>
 8009586:	4603      	mov	r3, r0
 8009588:	781a      	ldrb	r2, [r3, #0]
 800958a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800958e:	1c59      	adds	r1, r3, #1
 8009590:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8009594:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009598:	440b      	add	r3, r1
 800959a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[byte_position++] = IC.data[4];
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2104      	movs	r1, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fd fc8a 	bl	8006ebc <_ZNKSt5arrayIhLj6EEixEj>
 80095a8:	4603      	mov	r3, r0
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b0:	1c59      	adds	r1, r3, #1
 80095b2:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80095b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80095ba:	440b      	add	r3, r1
 80095bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
        if (byte_position == 8) {
 80095c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d118      	bne.n	80095fa <_Z10CANTxDCCfgv+0xce>
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 80095c8:	f107 020c 	add.w	r2, r7, #12
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <_Z10CANTxDCCfgv+0xe8>)
 80095ce:	490f      	ldr	r1, [pc, #60]	; (800960c <_Z10CANTxDCCfgv+0xe0>)
 80095d0:	4811      	ldr	r0, [pc, #68]	; (8009618 <_Z10CANTxDCCfgv+0xec>)
 80095d2:	f7f7 f9cd 	bl	8000970 <HAL_CAN_AddTxMessage>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bf14      	ite	ne
 80095dc:	2301      	movne	r3, #1
 80095de:	2300      	moveq	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <_Z10CANTxDCCfgv+0xbe>
                return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e00c      	b.n	8009604 <_Z10CANTxDCCfgv+0xd8>
            byte_position = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            ++TxHeader.StdId;
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <_Z10CANTxDCCfgv+0xe0>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	4a05      	ldr	r2, [pc, #20]	; (800960c <_Z10CANTxDCCfgv+0xe0>)
 80095f8:	6013      	str	r3, [r2, #0]
    for (const auto& IC : config_register_group) {
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	3308      	adds	r3, #8
 80095fe:	623b      	str	r3, [r7, #32]
 8009600:	e7b6      	b.n	8009570 <_Z10CANTxDCCfgv+0x44>
        }
    }
    return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3728      	adds	r7, #40	; 0x28
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000008 	.word	0x20000008
 8009610:	200001e4 	.word	0x200001e4
 8009614:	200001fc 	.word	0x200001fc
 8009618:	200000f8 	.word	0x200000f8

0800961c <_Z15CANTxVolumeSizem>:

HAL_StatusTypeDef CANTxVolumeSize(uint32_t const size_of_log) {
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = LoggerResp;
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <_Z15CANTxVolumeSizem+0x4c>)
 8009626:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800962a:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 4;
 800962c:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <_Z15CANTxVolumeSizem+0x4c>)
 800962e:	2204      	movs	r2, #4
 8009630:	611a      	str	r2, [r3, #16]

    uint8_t data[] = {
            static_cast<uint8_t>(size_of_log >> 24),
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >>  8),
            static_cast<uint8_t>(size_of_log >>  0)
    };
 8009636:	b2db      	uxtb	r3, r3
 8009638:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(size_of_log >> 16),
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0c1b      	lsrs	r3, r3, #16
    };
 800963e:	b2db      	uxtb	r3, r3
 8009640:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(size_of_log >>  8),
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	0a1b      	lsrs	r3, r3, #8
    };
 8009646:	b2db      	uxtb	r3, r3
 8009648:	73bb      	strb	r3, [r7, #14]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	73fb      	strb	r3, [r7, #15]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009650:	f107 020c 	add.w	r2, r7, #12
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <_Z15CANTxVolumeSizem+0x50>)
 8009656:	4904      	ldr	r1, [pc, #16]	; (8009668 <_Z15CANTxVolumeSizem+0x4c>)
 8009658:	4805      	ldr	r0, [pc, #20]	; (8009670 <_Z15CANTxVolumeSizem+0x54>)
 800965a:	f7f7 f989 	bl	8000970 <HAL_CAN_AddTxMessage>
 800965e:	4603      	mov	r3, r0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000008 	.word	0x20000008
 800966c:	200001fc 	.word	0x200001fc
 8009670:	200000f8 	.word	0x200000f8

08009674 <Error_Handler>:

void Error_Handler() {}
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
 8009678:	bf00      	nop
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <_ZNSt13__atomic_baseImEC1Em>:
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <_ZNSt13__atomic_baseImEppEv>:
      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f3bf 8f5b 	dmb	ish
 80096ae:	e853 2f00 	ldrex	r2, [r3]
 80096b2:	f102 0201 	add.w	r2, r2, #1
 80096b6:	e843 2100 	strex	r1, r2, [r3]
 80096ba:	2900      	cmp	r1, #0
 80096bc:	d1f7      	bne.n	80096ae <_ZNSt13__atomic_baseImEppEv+0xe>
 80096be:	f3bf 8f5b 	dmb	ish
 80096c2:	4613      	mov	r3, r2
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <_ZNSt13__atomic_baseImEaSEm>:
      operator=(__int_type __i) noexcept
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	2305      	movs	r3, #5
 80096e4:	73fb      	strb	r3, [r7, #15]
      }

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fd fe17 	bl	8007320 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73bb      	strb	r3, [r7, #14]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f3bf 8f5b 	dmb	ish
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	f3bf 8f5b 	dmb	ish
      }
 8009704:	bf00      	nop
	return __i;
 8009706:	683b      	ldr	r3, [r7, #0]
      }
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <_ZNSt13__atomic_baseIhEppEv>:
      operator++() noexcept
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f3bf 8f5b 	dmb	ish
 800971e:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009722:	f102 0201 	add.w	r2, r2, #1
 8009726:	e8c3 2f41 	strexb	r1, r2, [r3]
 800972a:	2900      	cmp	r1, #0
 800972c:	d1f7      	bne.n	800971e <_ZNSt13__atomic_baseIhEppEv+0xe>
 800972e:	f3bf 8f5b 	dmb	ish
 8009732:	b2d3      	uxtb	r3, r2
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <_ZNSt13__atomic_baseIhEaSEh>:
      operator=(__int_type __i) noexcept
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	72fb      	strb	r3, [r7, #11]
 8009754:	2305      	movs	r3, #5
 8009756:	72bb      	strb	r3, [r7, #10]
	memory_order __b = __m & __memory_order_mask;
 8009758:	7abb      	ldrb	r3, [r7, #10]
 800975a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd fdde 	bl	8007320 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8009764:	4603      	mov	r3, r0
 8009766:	727b      	strb	r3, [r7, #9]
	__atomic_store_n(&_M_i, __i, int(__m));
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f3bf 8f5b 	dmb	ish
 800976e:	7afa      	ldrb	r2, [r7, #11]
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	f3bf 8f5b 	dmb	ish
      }
 8009776:	bf00      	nop
	return __i;
 8009778:	78fb      	ldrb	r3, [r7, #3]
      }
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <_ZNSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) noexcept
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f7fd fca2 	bl	80070da <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 8009796:	4603      	mov	r3, r0
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_ZNKRSt8optionalI13VoltageStatusEdeEv>:
      operator*() const&
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
      { return this->_M_get(); }
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7fe f8b2 	bl	8007912 <_ZNKSt19_Optional_base_implI13VoltageStatusSt14_Optional_baseIS0_Lb1ELb1EEE6_M_getEv>
 80097ae:	4603      	mov	r3, r0
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>:
      begin() noexcept
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9e7 	bl	8009b94 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 80097c6:	4603      	mov	r3, r0
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>:
      end() noexcept
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f9db 	bl	8009b94 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 80097de:	4603      	mov	r3, r0
 80097e0:	3320      	adds	r3, #32
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>:
      begin() const noexcept
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f9db 	bl	8009bae <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>:
      end() const noexcept
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f9cf 	bl	8009bae <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 8009810:	4603      	mov	r3, r0
 8009812:	3308      	adds	r3, #8
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>:
      begin() noexcept
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f9cf 	bl	8009bc8 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 800982a:	4603      	mov	r3, r0
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>:
      end() noexcept
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f9c3 	bl	8009bc8 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 8009842:	4603      	mov	r3, r0
 8009844:	3310      	adds	r3, #16
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>:
      begin() const noexcept
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f9c3 	bl	8009be2 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 800985c:	4603      	mov	r3, r0
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>:
      end() const noexcept
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f9b7 	bl	8009be2 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 8009874:	4603      	mov	r3, r0
 8009876:	3308      	adds	r3, #8
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>:
      begin() const noexcept
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9c2 	bl	8009c12 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 800988e:	4603      	mov	r3, r0
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>:
      end() const noexcept
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9b6 	bl	8009c12 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 80098a6:	4603      	mov	r3, r0
 80098a8:	3320      	adds	r3, #32
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>:
      operator[](size_type __n) const noexcept
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f9b3 	bl	8009c2c <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_refERA1_KS2_j>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>:
      _S_ptr(const _Type& __t) noexcept
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <_ZNKSt5arrayItLj3EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff ffed 	bl	80098d0 <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>
 80098f6:	4603      	mov	r3, r0
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>:
      operator[](size_type __n) noexcept
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f99b 	bl	8009c4a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_refERA1_KS2_j>
 8009914:	4603      	mov	r3, r0
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	2304      	movs	r3, #4
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f990 	bl	8009c68 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_refERA4_KS4_j>
 8009948:	4603      	mov	r3, r0
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <_ZNSt22_Optional_payload_baseI13VoltageStatusE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <_ZNSt22_Optional_payload_baseI13VoltageStatusEC1Ev>:
      _Optional_payload_base() = default;
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff ffed 	bl	8009952 <_ZNSt22_Optional_payload_baseI13VoltageStatusE8_StorageIS0_Lb1EEC1Ev>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	751a      	strb	r2, [r3, #20]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <_ZNSt17_Optional_payloadI13VoltageStatusLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff ffe8 	bl	8009968 <_ZNSt22_Optional_payload_baseI13VoltageStatusEC1Ev>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <_ZNSt14_Optional_baseI13VoltageStatusLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff ffeb 	bl	8009988 <_ZNSt17_Optional_payloadI13VoltageStatusLb1ELb1ELb1EEC1Ev>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <_ZNSt8optionalI13VoltageStatusEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	7039      	strb	r1, [r7, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff ffea 	bl	80099a2 <_ZNSt14_Optional_baseI13VoltageStatusLb1ELb1EEC1Ev>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_ZNSt8optionalI13VoltageStatusEC1IS0_Lb1EEEOT_>:
	optional(_Up&& __t)
 80099d8:	b5b0      	push	{r4, r5, r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80099e2:	687c      	ldr	r4, [r7, #4]
 80099e4:	6838      	ldr	r0, [r7, #0]
 80099e6:	f000 f94e 	bl	8009c86 <_ZSt7forwardI13VoltageStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 80099ea:	4603      	mov	r3, r0
 80099ec:	461a      	mov	r2, r3
 80099ee:	4629      	mov	r1, r5
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 f964 	bl	8009cbe <_ZNSt14_Optional_baseI13VoltageStatusLb1ELb1EEC1IJS0_ELb0EEESt10in_place_tDpOT_>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bdb0      	pop	{r4, r5, r7, pc}

08009a00 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	2302      	movs	r3, #2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEixEj>:
      operator[](size_type __n) noexcept
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 f95f 	bl	8009ce8 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_refERA2_KS4_j>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <_ZNSt22_Optional_payload_baseI10TempStatusE8_StorageIS0_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <_ZNSt22_Optional_payload_baseI10TempStatusEC1Ev>:
      _Optional_payload_base() = default;
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff ffed 	bl	8009a34 <_ZNSt22_Optional_payload_baseI10TempStatusE8_StorageIS0_Lb1EEC1Ev>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	741a      	strb	r2, [r3, #16]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <_ZNSt17_Optional_payloadI10TempStatusLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff ffe8 	bl	8009a4a <_ZNSt22_Optional_payload_baseI10TempStatusEC1Ev>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <_ZNSt14_Optional_baseI10TempStatusLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff ffeb 	bl	8009a6a <_ZNSt17_Optional_payloadI10TempStatusLb1ELb1ELb1EEC1Ev>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <_ZNSt8optionalI10TempStatusEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	7039      	strb	r1, [r7, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff ffea 	bl	8009a84 <_ZNSt14_Optional_baseI10TempStatusLb1ELb1EEC1Ev>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <_ZNSt5arrayIsLj3EE5beginEv>:
      begin() noexcept
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f91f 	bl	8009d06 <_ZNSt5arrayIsLj3EE4dataEv>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <_ZNSt5arrayIsLj3EE3endEv>:
      end() noexcept
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f913 	bl	8009d06 <_ZNSt5arrayIsLj3EE4dataEv>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	3306      	adds	r3, #6
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <_ZNSt8optionalI10TempStatusEC1IS0_Lb1EEEOT_>:
	optional(_Up&& __t)
 8009aec:	b5b0      	push	{r4, r5, r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8009af6:	687c      	ldr	r4, [r7, #4]
 8009af8:	6838      	ldr	r0, [r7, #0]
 8009afa:	f000 f911 	bl	8009d20 <_ZSt7forwardI10TempStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	4629      	mov	r1, r5
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 f927 	bl	8009d58 <_ZNSt14_Optional_baseI10TempStatusLb1ELb1EEC1IJS0_ELb0EEESt10in_place_tDpOT_>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bdb0      	pop	{r4, r5, r7, pc}

08009b14 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>:
      begin() const noexcept
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f93b 	bl	8009d98 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 8009b22:	4603      	mov	r3, r0
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>:
      end() const noexcept
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f92f 	bl	8009d98 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	3310      	adds	r3, #16
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EEixEj>:
      operator[](size_type __n) const noexcept
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 f92c 	bl	8009db2 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_refERA1_KS2_j>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <_ZNKSt5arrayIsLj3EE4dataEv>:
      data() const noexcept
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff ffed 	bl	8009b64 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>:
      data() noexcept
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f82c 	bl	8009bfc <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>:
      data() const noexcept
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fd fac1 	bl	8007140 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>:
      data() noexcept
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 f8d5 	bl	8009d82 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>:
      data() const noexcept
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fd fab2 	bl	8007156 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>:
      _S_ptr(const _Type& __t) noexcept
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4618      	mov	r0, r3
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>:
      data() const noexcept
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff ffed 	bl	8009bfc <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>
 8009c22:	4603      	mov	r3, r0
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_refERA4_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4413      	add	r3, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <_ZSt7forwardI13VoltageStatusEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <_ZNSt17_Optional_payloadI13VoltageStatusLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJS0_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	7239      	strb	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	4621      	mov	r1, r4
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f8a4 	bl	8009dfc <_ZNSt22_Optional_payload_baseI13VoltageStatusEC1IJS0_EEESt10in_place_tDpOT_>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd90      	pop	{r4, r7, pc}

08009cbe <_ZNSt14_Optional_baseI13VoltageStatusLb1ELb1EEC1IJS0_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8009cbe:	b5b0      	push	{r4, r5, r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	7239      	strb	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8009cca:	68fc      	ldr	r4, [r7, #12]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ffda 	bl	8009c86 <_ZSt7forwardI13VoltageStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff ffdf 	bl	8009c9c <_ZNSt17_Optional_payloadI13VoltageStatusLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJS0_EEESt10in_place_tDpOT_>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bdb0      	pop	{r4, r5, r7, pc}

08009ce8 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_refERA2_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <_ZNSt5arrayIsLj3EE4dataEv>:
      data() noexcept
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff ff27 	bl	8009b64 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 8009d16:	4603      	mov	r3, r0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <_ZSt7forwardI10TempStatusEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <_ZNSt17_Optional_payloadI10TempStatusLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJS0_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8009d36:	b590      	push	{r4, r7, lr}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	7239      	strb	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	4621      	mov	r1, r4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 f884 	bl	8009e56 <_ZNSt22_Optional_payload_baseI10TempStatusEC1IJS0_EEESt10in_place_tDpOT_>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd90      	pop	{r4, r7, pc}

08009d58 <_ZNSt14_Optional_baseI10TempStatusLb1ELb1EEC1IJS0_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8009d58:	b5b0      	push	{r4, r5, r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	7239      	strb	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8009d64:	68fc      	ldr	r4, [r7, #12]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7ff ffda 	bl	8009d20 <_ZSt7forwardI10TempStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4629      	mov	r1, r5
 8009d72:	4620      	mov	r0, r4
 8009d74:	f7ff ffdf 	bl	8009d36 <_ZNSt17_Optional_payloadI10TempStatusLb1ELb1ELb1EECI1St22_Optional_payload_baseIS0_EIJS0_EEESt10in_place_tDpOT_>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bdb0      	pop	{r4, r5, r7, pc}

08009d82 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>:
      _S_ptr(const _Type& __t) noexcept
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>:
      data() const noexcept
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff ffed 	bl	8009d82 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>
 8009da8:	4603      	mov	r3, r0
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <_ZNSt22_Optional_payload_baseI13VoltageStatusE8_StorageIS0_Lb1EEC1IJS0_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8009dd0:	b5b0      	push	{r4, r5, r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	7239      	strb	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff ff52 	bl	8009c86 <_ZSt7forwardI13VoltageStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009de2:	4602      	mov	r2, r0
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	461c      	mov	r4, r3
 8009de8:	4615      	mov	r5, r2
 8009dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	6023      	str	r3, [r4, #0]
	    { }
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bdb0      	pop	{r4, r5, r7, pc}

08009dfc <_ZNSt22_Optional_payload_baseI13VoltageStatusEC1IJS0_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8009dfc:	b5b0      	push	{r4, r5, r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	7239      	strb	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8009e08:	68fc      	ldr	r4, [r7, #12]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff ff3b 	bl	8009c86 <_ZSt7forwardI13VoltageStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	4629      	mov	r1, r5
 8009e16:	4620      	mov	r0, r4
 8009e18:	f7ff ffda 	bl	8009dd0 <_ZNSt22_Optional_payload_baseI13VoltageStatusE8_StorageIS0_Lb1EEC1IJS0_EEESt10in_place_tDpOT_>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	751a      	strb	r2, [r3, #20]
	{ }
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bdb0      	pop	{r4, r5, r7, pc}

08009e2c <_ZNSt22_Optional_payload_baseI10TempStatusE8_StorageIS0_Lb1EEC1IJS0_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8009e2c:	b590      	push	{r4, r7, lr}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	7239      	strb	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff ff71 	bl	8009d20 <_ZSt7forwardI10TempStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	461c      	mov	r4, r3
 8009e44:	4613      	mov	r3, r2
 8009e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    { }
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd90      	pop	{r4, r7, pc}

08009e56 <_ZNSt22_Optional_payload_baseI10TempStatusEC1IJS0_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8009e56:	b5b0      	push	{r4, r5, r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	7239      	strb	r1, [r7, #8]
 8009e60:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8009e62:	68fc      	ldr	r4, [r7, #12]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff5b 	bl	8009d20 <_ZSt7forwardI10TempStatusEOT_RNSt16remove_referenceIS1_E4typeE>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7ff ffdb 	bl	8009e2c <_ZNSt22_Optional_payload_baseI10TempStatusE8_StorageIS0_Lb1EEC1IJS0_EEESt10in_place_tDpOT_>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	741a      	strb	r2, [r3, #16]
	{ }
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009e88 <_Z41__static_initialization_and_destruction_0ii>:
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d108      	bne.n	8009eaa <_Z41__static_initialization_and_destruction_0ii+0x22>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d103      	bne.n	8009eaa <_Z41__static_initialization_and_destruction_0ii+0x22>
Status status{ Core | Charging };
 8009ea2:	2105      	movs	r1, #5
 8009ea4:	4803      	ldr	r0, [pc, #12]	; (8009eb4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8009ea6:	f7fd f961 	bl	800716c <_ZN6StatusC1Eh>
void Error_Handler() {}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000200 	.word	0x20000200

08009eb8 <_GLOBAL__sub_I_rtc>:
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f7ff ffe1 	bl	8009e88 <_Z41__static_initialization_and_destruction_0ii>
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ece:	2300      	movs	r3, #0
 8009ed0:	607b      	str	r3, [r7, #4]
 8009ed2:	4b10      	ldr	r3, [pc, #64]	; (8009f14 <HAL_MspInit+0x4c>)
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed6:	4a0f      	ldr	r2, [pc, #60]	; (8009f14 <HAL_MspInit+0x4c>)
 8009ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009edc:	6453      	str	r3, [r2, #68]	; 0x44
 8009ede:	4b0d      	ldr	r3, [pc, #52]	; (8009f14 <HAL_MspInit+0x4c>)
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ee6:	607b      	str	r3, [r7, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8009eea:	2300      	movs	r3, #0
 8009eec:	603b      	str	r3, [r7, #0]
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <HAL_MspInit+0x4c>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <HAL_MspInit+0x4c>)
 8009ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8009efa:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <HAL_MspInit+0x4c>)
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40023800 	.word	0x40023800

08009f18 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08c      	sub	sp, #48	; 0x30
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f20:	f107 031c 	add.w	r3, r7, #28
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	611a      	str	r2, [r3, #16]
    if(hcan->Instance==CAN1)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a4b      	ldr	r2, [pc, #300]	; (800a064 <HAL_CAN_MspInit+0x14c>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d13e      	bne.n	8009fb8 <HAL_CAN_MspInit+0xa0>
    {
        /* USER CODE BEGIN CAN1_MspInit 0 */

        /* USER CODE END CAN1_MspInit 0 */
        /* Peripheral clock enable */
        HAL_RCC_CAN1_CLK_ENABLED++;
 8009f3a:	4b4b      	ldr	r3, [pc, #300]	; (800a068 <HAL_CAN_MspInit+0x150>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	4a49      	ldr	r2, [pc, #292]	; (800a068 <HAL_CAN_MspInit+0x150>)
 8009f42:	6013      	str	r3, [r2, #0]
        if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009f44:	4b48      	ldr	r3, [pc, #288]	; (800a068 <HAL_CAN_MspInit+0x150>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d10d      	bne.n	8009f68 <HAL_CAN_MspInit+0x50>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	61bb      	str	r3, [r7, #24]
 8009f50:	4b46      	ldr	r3, [pc, #280]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	4a45      	ldr	r2, [pc, #276]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8009f5c:	4b43      	ldr	r3, [pc, #268]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f64:	61bb      	str	r3, [r7, #24]
 8009f66:	69bb      	ldr	r3, [r7, #24]
        }

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	4b3f      	ldr	r3, [pc, #252]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f70:	4a3e      	ldr	r2, [pc, #248]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009f72:	f043 0301 	orr.w	r3, r3, #1
 8009f76:	6313      	str	r3, [r2, #48]	; 0x30
 8009f78:	4b3c      	ldr	r3, [pc, #240]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	697b      	ldr	r3, [r7, #20]
        /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f88:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f92:	2303      	movs	r3, #3
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009f96:	2309      	movs	r3, #9
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f9a:	f107 031c 	add.w	r3, r7, #28
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4833      	ldr	r0, [pc, #204]	; (800a070 <HAL_CAN_MspInit+0x158>)
 8009fa2:	f7f7 fa2f 	bl	8001404 <HAL_GPIO_Init>

        /* CAN1 interrupt Init */
        HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	2100      	movs	r1, #0
 8009faa:	2014      	movs	r0, #20
 8009fac:	f7f7 f9f3 	bl	8001396 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8009fb0:	2014      	movs	r0, #20
 8009fb2:	f7f7 fa0c 	bl	80013ce <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN CAN2_MspInit 1 */

        /* USER CODE END CAN2_MspInit 1 */
    }

}
 8009fb6:	e050      	b.n	800a05a <HAL_CAN_MspInit+0x142>
    else if(hcan->Instance==CAN2)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a2d      	ldr	r2, [pc, #180]	; (800a074 <HAL_CAN_MspInit+0x15c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d14b      	bne.n	800a05a <HAL_CAN_MspInit+0x142>
        __HAL_RCC_CAN2_CLK_ENABLE();
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	613b      	str	r3, [r7, #16]
 8009fc6:	4b29      	ldr	r3, [pc, #164]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	4a28      	ldr	r2, [pc, #160]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8009fd2:	4b26      	ldr	r3, [pc, #152]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]
        HAL_RCC_CAN1_CLK_ENABLED++;
 8009fde:	4b22      	ldr	r3, [pc, #136]	; (800a068 <HAL_CAN_MspInit+0x150>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	4a20      	ldr	r2, [pc, #128]	; (800a068 <HAL_CAN_MspInit+0x150>)
 8009fe6:	6013      	str	r3, [r2, #0]
        if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009fe8:	4b1f      	ldr	r3, [pc, #124]	; (800a068 <HAL_CAN_MspInit+0x150>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10d      	bne.n	800a00c <HAL_CAN_MspInit+0xf4>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	4a1c      	ldr	r2, [pc, #112]	; (800a06c <HAL_CAN_MspInit+0x154>)
 8009ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ffe:	6413      	str	r3, [r2, #64]	; 0x40
 800a000:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <HAL_CAN_MspInit+0x154>)
 800a002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800a00c:	2300      	movs	r3, #0
 800a00e:	60bb      	str	r3, [r7, #8]
 800a010:	4b16      	ldr	r3, [pc, #88]	; (800a06c <HAL_CAN_MspInit+0x154>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	4a15      	ldr	r2, [pc, #84]	; (800a06c <HAL_CAN_MspInit+0x154>)
 800a016:	f043 0302 	orr.w	r3, r3, #2
 800a01a:	6313      	str	r3, [r2, #48]	; 0x30
 800a01c:	4b13      	ldr	r3, [pc, #76]	; (800a06c <HAL_CAN_MspInit+0x154>)
 800a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	60bb      	str	r3, [r7, #8]
 800a026:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800a028:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a02c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a02e:	2302      	movs	r3, #2
 800a030:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a032:	2300      	movs	r3, #0
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a036:	2303      	movs	r3, #3
 800a038:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800a03a:	2309      	movs	r3, #9
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a03e:	f107 031c 	add.w	r3, r7, #28
 800a042:	4619      	mov	r1, r3
 800a044:	480c      	ldr	r0, [pc, #48]	; (800a078 <HAL_CAN_MspInit+0x160>)
 800a046:	f7f7 f9dd 	bl	8001404 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	2041      	movs	r0, #65	; 0x41
 800a050:	f7f7 f9a1 	bl	8001396 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800a054:	2041      	movs	r0, #65	; 0x41
 800a056:	f7f7 f9ba 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 800a05a:	bf00      	nop
 800a05c:	3730      	adds	r7, #48	; 0x30
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	40006400 	.word	0x40006400
 800a068:	20000214 	.word	0x20000214
 800a06c:	40023800 	.word	0x40023800
 800a070:	40020000 	.word	0x40020000
 800a074:	40006800 	.word	0x40006800
 800a078:	40020400 	.word	0x40020400

0800a07c <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08a      	sub	sp, #40	; 0x28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	605a      	str	r2, [r3, #4]
 800a08e:	609a      	str	r2, [r3, #8]
 800a090:	60da      	str	r2, [r3, #12]
 800a092:	611a      	str	r2, [r3, #16]
    if(hspi->Instance==SPI1) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a19      	ldr	r2, [pc, #100]	; (800a100 <HAL_SPI_MspInit+0x84>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d12b      	bne.n	800a0f6 <HAL_SPI_MspInit+0x7a>
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 800a09e:	2300      	movs	r3, #0
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	4b18      	ldr	r3, [pc, #96]	; (800a104 <HAL_SPI_MspInit+0x88>)
 800a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a6:	4a17      	ldr	r2, [pc, #92]	; (800a104 <HAL_SPI_MspInit+0x88>)
 800a0a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a0ae:	4b15      	ldr	r3, [pc, #84]	; (800a104 <HAL_SPI_MspInit+0x88>)
 800a0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0b6:	613b      	str	r3, [r7, #16]
 800a0b8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	4b11      	ldr	r3, [pc, #68]	; (800a104 <HAL_SPI_MspInit+0x88>)
 800a0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c2:	4a10      	ldr	r2, [pc, #64]	; (800a104 <HAL_SPI_MspInit+0x88>)
 800a0c4:	f043 0302 	orr.w	r3, r3, #2
 800a0c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <HAL_SPI_MspInit+0x88>)
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ce:	f003 0302 	and.w	r3, r3, #2
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800a0d6:	2338      	movs	r3, #56	; 0x38
 800a0d8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a0de:	2302      	movs	r3, #2
 800a0e0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a0e6:	2305      	movs	r3, #5
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4805      	ldr	r0, [pc, #20]	; (800a108 <HAL_SPI_MspInit+0x8c>)
 800a0f2:	f7f7 f987 	bl	8001404 <HAL_GPIO_Init>
        /* USER CODE BEGIN SPI1_MspInit 1 */

        /* USER CODE END SPI1_MspInit 1 */
    }

}
 800a0f6:	bf00      	nop
 800a0f8:	3728      	adds	r7, #40	; 0x28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	40013000 	.word	0x40013000
 800a104:	40023800 	.word	0x40023800
 800a108:	40020400 	.word	0x40020400

0800a10c <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance==TIM2)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11c:	d10d      	bne.n	800a13a <HAL_TIM_Base_MspInit+0x2e>
    {
        /* USER CODE BEGIN TIM2_MspInit 0 */

        /* USER CODE END TIM2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <HAL_TIM_Base_MspInit+0x3c>)
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	4a08      	ldr	r2, [pc, #32]	; (800a148 <HAL_TIM_Base_MspInit+0x3c>)
 800a128:	f043 0301 	orr.w	r3, r3, #1
 800a12c:	6413      	str	r3, [r2, #64]	; 0x40
 800a12e:	4b06      	ldr	r3, [pc, #24]	; (800a148 <HAL_TIM_Base_MspInit+0x3c>)
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM2_MspInit 1 */

        /* USER CODE END TIM2_MspInit 1 */
    }

}
 800a13a:	bf00      	nop
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	40023800 	.word	0x40023800

0800a14c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a154:	f107 030c 	add.w	r3, r7, #12
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	609a      	str	r2, [r3, #8]
 800a160:	60da      	str	r2, [r3, #12]
 800a162:	611a      	str	r2, [r3, #16]
    if(htim->Instance==TIM2)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16c:	d11d      	bne.n	800a1aa <HAL_TIM_MspPostInit+0x5e>
    {
        /* USER CODE BEGIN TIM2_MspPostInit 0 */

        /* USER CODE END TIM2_MspPostInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800a16e:	2300      	movs	r3, #0
 800a170:	60bb      	str	r3, [r7, #8]
 800a172:	4b10      	ldr	r3, [pc, #64]	; (800a1b4 <HAL_TIM_MspPostInit+0x68>)
 800a174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a176:	4a0f      	ldr	r2, [pc, #60]	; (800a1b4 <HAL_TIM_MspPostInit+0x68>)
 800a178:	f043 0302 	orr.w	r3, r3, #2
 800a17c:	6313      	str	r3, [r2, #48]	; 0x30
 800a17e:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <HAL_TIM_MspPostInit+0x68>)
 800a180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	60bb      	str	r3, [r7, #8]
 800a188:	68bb      	ldr	r3, [r7, #8]
        /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4 
         */
        GPIO_InitStruct.Pin = FansPWM_Pin;
 800a18a:	2304      	movs	r3, #4
 800a18c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a18e:	2302      	movs	r3, #2
 800a190:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a19a:	2301      	movs	r3, #1
 800a19c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4804      	ldr	r0, [pc, #16]	; (800a1b8 <HAL_TIM_MspPostInit+0x6c>)
 800a1a6:	f7f7 f92d 	bl	8001404 <HAL_GPIO_Init>
        /* USER CODE BEGIN TIM2_MspPostInit 1 */

        /* USER CODE END TIM2_MspPostInit 1 */
    }

}
 800a1aa:	bf00      	nop
 800a1ac:	3720      	adds	r7, #32
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40023800 	.word	0x40023800
 800a1b8:	40020400 	.word	0x40020400

0800a1bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a1c0:	bf00      	nop
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a1ce:	e7fe      	b.n	800a1ce <HardFault_Handler+0x4>

0800a1d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a1d4:	e7fe      	b.n	800a1d4 <MemManage_Handler+0x4>

0800a1d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a1da:	e7fe      	b.n	800a1da <BusFault_Handler+0x4>

0800a1dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a1e0:	e7fe      	b.n	800a1e0 <UsageFault_Handler+0x4>

0800a1e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a1e6:	bf00      	nop
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a1f4:	bf00      	nop
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a1fe:	b480      	push	{r7}
 800a200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a202:	bf00      	nop
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a210:	f7fd fa7c 	bl	800770c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a214:	bf00      	nop
 800a216:	bd80      	pop	{r7, pc}

0800a218 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a21c:	4802      	ldr	r0, [pc, #8]	; (800a228 <CAN1_RX0_IRQHandler+0x10>)
 800a21e:	f7f6 fdba 	bl	8000d96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a222:	bf00      	nop
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	200000f8 	.word	0x200000f8

0800a22c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800a230:	4802      	ldr	r0, [pc, #8]	; (800a23c <CAN2_RX1_IRQHandler+0x10>)
 800a232:	f7f6 fdb0 	bl	8000d96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800a236:	bf00      	nop
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000120 	.word	0x20000120

0800a240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	return 1;
 800a244:	2301      	movs	r3, #1
}
 800a246:	4618      	mov	r0, r3
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <_kill>:

int _kill(int pid, int sig)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a25a:	f000 f9fb 	bl	800a654 <__errno>
 800a25e:	4603      	mov	r3, r0
 800a260:	2216      	movs	r2, #22
 800a262:	601a      	str	r2, [r3, #0]
	return -1;
 800a264:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <_exit>:

void _exit (int status)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a278:	f04f 31ff 	mov.w	r1, #4294967295
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff ffe7 	bl	800a250 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a282:	e7fe      	b.n	800a282 <_exit+0x12>

0800a284 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a28c:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <_sbrk+0x50>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d102      	bne.n	800a29a <_sbrk+0x16>
		heap_end = &end;
 800a294:	4b0f      	ldr	r3, [pc, #60]	; (800a2d4 <_sbrk+0x50>)
 800a296:	4a10      	ldr	r2, [pc, #64]	; (800a2d8 <_sbrk+0x54>)
 800a298:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <_sbrk+0x50>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <_sbrk+0x50>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	466a      	mov	r2, sp
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d907      	bls.n	800a2be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a2ae:	f000 f9d1 	bl	800a654 <__errno>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	220c      	movs	r2, #12
 800a2b6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800a2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2bc:	e006      	b.n	800a2cc <_sbrk+0x48>
	}

	heap_end += incr;
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <_sbrk+0x50>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4a03      	ldr	r2, [pc, #12]	; (800a2d4 <_sbrk+0x50>)
 800a2c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	20000218 	.word	0x20000218
 800a2d8:	200006c0 	.word	0x200006c0

0800a2dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a2e0:	4b16      	ldr	r3, [pc, #88]	; (800a33c <SystemInit+0x60>)
 800a2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e6:	4a15      	ldr	r2, [pc, #84]	; (800a33c <SystemInit+0x60>)
 800a2e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a2f0:	4b13      	ldr	r3, [pc, #76]	; (800a340 <SystemInit+0x64>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a12      	ldr	r2, [pc, #72]	; (800a340 <SystemInit+0x64>)
 800a2f6:	f043 0301 	orr.w	r3, r3, #1
 800a2fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <SystemInit+0x64>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a302:	4b0f      	ldr	r3, [pc, #60]	; (800a340 <SystemInit+0x64>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a0e      	ldr	r2, [pc, #56]	; (800a340 <SystemInit+0x64>)
 800a308:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a30c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a310:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a312:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <SystemInit+0x64>)
 800a314:	4a0b      	ldr	r2, [pc, #44]	; (800a344 <SystemInit+0x68>)
 800a316:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a318:	4b09      	ldr	r3, [pc, #36]	; (800a340 <SystemInit+0x64>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a08      	ldr	r2, [pc, #32]	; (800a340 <SystemInit+0x64>)
 800a31e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <SystemInit+0x64>)
 800a326:	2200      	movs	r2, #0
 800a328:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a32a:	4b04      	ldr	r3, [pc, #16]	; (800a33c <SystemInit+0x60>)
 800a32c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a330:	609a      	str	r2, [r3, #8]
#endif
}
 800a332:	bf00      	nop
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	e000ed00 	.word	0xe000ed00
 800a340:	40023800 	.word	0x40023800
 800a344:	24003010 	.word	0x24003010

0800a348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a348:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a380 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a34c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a34e:	e003      	b.n	800a358 <LoopCopyDataInit>

0800a350 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a350:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a352:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a354:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a356:	3104      	adds	r1, #4

0800a358 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a358:	480b      	ldr	r0, [pc, #44]	; (800a388 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a35a:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a35c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a35e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a360:	d3f6      	bcc.n	800a350 <CopyDataInit>
  ldr  r2, =_sbss
 800a362:	4a0b      	ldr	r2, [pc, #44]	; (800a390 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a364:	e002      	b.n	800a36c <LoopFillZerobss>

0800a366 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a366:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a368:	f842 3b04 	str.w	r3, [r2], #4

0800a36c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a36c:	4b09      	ldr	r3, [pc, #36]	; (800a394 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a36e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a370:	d3f9      	bcc.n	800a366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a372:	f7ff ffb3 	bl	800a2dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a376:	f000 f973 	bl	800a660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a37a:	f7fd fb15 	bl	80079a8 <main>
  bx  lr    
 800a37e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a380:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a384:	0800ac2c 	.word	0x0800ac2c
  ldr  r0, =_sdata
 800a388:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a38c:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 800a390:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 800a394:	200006bc 	.word	0x200006bc

0800a398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a398:	e7fe      	b.n	800a398 <ADC_IRQHandler>

0800a39a <__cxa_guard_acquire>:
 800a39a:	6803      	ldr	r3, [r0, #0]
 800a39c:	07db      	lsls	r3, r3, #31
 800a39e:	d406      	bmi.n	800a3ae <__cxa_guard_acquire+0x14>
 800a3a0:	7843      	ldrb	r3, [r0, #1]
 800a3a2:	b103      	cbz	r3, 800a3a6 <__cxa_guard_acquire+0xc>
 800a3a4:	deff      	udf	#255	; 0xff
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	7043      	strb	r3, [r0, #1]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	4770      	bx	lr
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	4770      	bx	lr

0800a3b2 <__cxa_guard_release>:
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	6003      	str	r3, [r0, #0]
 800a3b6:	4770      	bx	lr

0800a3b8 <_Znwj>:
 800a3b8:	2801      	cmp	r0, #1
 800a3ba:	bf38      	it	cc
 800a3bc:	2001      	movcc	r0, #1
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 f970 	bl	800a6a8 <malloc>
 800a3c8:	b930      	cbnz	r0, 800a3d8 <_Znwj+0x20>
 800a3ca:	f000 f807 	bl	800a3dc <_ZSt15get_new_handlerv>
 800a3ce:	b908      	cbnz	r0, 800a3d4 <_Znwj+0x1c>
 800a3d0:	f000 f938 	bl	800a644 <abort>
 800a3d4:	4780      	blx	r0
 800a3d6:	e7f4      	b.n	800a3c2 <_Znwj+0xa>
 800a3d8:	bd10      	pop	{r4, pc}
	...

0800a3dc <_ZSt15get_new_handlerv>:
 800a3dc:	4b02      	ldr	r3, [pc, #8]	; (800a3e8 <_ZSt15get_new_handlerv+0xc>)
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	f3bf 8f5b 	dmb	ish
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	2000021c 	.word	0x2000021c

0800a3ec <logf>:
 800a3ec:	b508      	push	{r3, lr}
 800a3ee:	ed2d 8b02 	vpush	{d8}
 800a3f2:	eeb0 8a40 	vmov.f32	s16, s0
 800a3f6:	f000 f82f 	bl	800a458 <__ieee754_logf>
 800a3fa:	4b14      	ldr	r3, [pc, #80]	; (800a44c <logf+0x60>)
 800a3fc:	f993 3000 	ldrsb.w	r3, [r3]
 800a400:	3301      	adds	r3, #1
 800a402:	d014      	beq.n	800a42e <logf+0x42>
 800a404:	eeb4 8a48 	vcmp.f32	s16, s16
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	d60f      	bvs.n	800a42e <logf+0x42>
 800a40e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a416:	dc0a      	bgt.n	800a42e <logf+0x42>
 800a418:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	d108      	bne.n	800a434 <logf+0x48>
 800a422:	f000 f917 	bl	800a654 <__errno>
 800a426:	2322      	movs	r3, #34	; 0x22
 800a428:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a450 <logf+0x64>
 800a42c:	6003      	str	r3, [r0, #0]
 800a42e:	ecbd 8b02 	vpop	{d8}
 800a432:	bd08      	pop	{r3, pc}
 800a434:	f000 f90e 	bl	800a654 <__errno>
 800a438:	ecbd 8b02 	vpop	{d8}
 800a43c:	2321      	movs	r3, #33	; 0x21
 800a43e:	6003      	str	r3, [r0, #0]
 800a440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a444:	4803      	ldr	r0, [pc, #12]	; (800a454 <logf+0x68>)
 800a446:	f000 b8f7 	b.w	800a638 <nanf>
 800a44a:	bf00      	nop
 800a44c:	20000024 	.word	0x20000024
 800a450:	ff800000 	.word	0xff800000
 800a454:	0800ac14 	.word	0x0800ac14

0800a458 <__ieee754_logf>:
 800a458:	ee10 3a10 	vmov	r3, s0
 800a45c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a460:	d106      	bne.n	800a470 <__ieee754_logf+0x18>
 800a462:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a5f8 <__ieee754_logf+0x1a0>
 800a466:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a5fc <__ieee754_logf+0x1a4>
 800a46a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a46e:	4770      	bx	lr
 800a470:	2b00      	cmp	r3, #0
 800a472:	da02      	bge.n	800a47a <__ieee754_logf+0x22>
 800a474:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a478:	e7f5      	b.n	800a466 <__ieee754_logf+0xe>
 800a47a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a47e:	db02      	blt.n	800a486 <__ieee754_logf+0x2e>
 800a480:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a484:	4770      	bx	lr
 800a486:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a48a:	bfb8      	it	lt
 800a48c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a600 <__ieee754_logf+0x1a8>
 800a490:	485c      	ldr	r0, [pc, #368]	; (800a604 <__ieee754_logf+0x1ac>)
 800a492:	bfbe      	ittt	lt
 800a494:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a498:	f06f 0118 	mvnlt.w	r1, #24
 800a49c:	ee17 3a90 	vmovlt	r3, s15
 800a4a0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800a4a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a4a8:	4418      	add	r0, r3
 800a4aa:	bfa8      	it	ge
 800a4ac:	2100      	movge	r1, #0
 800a4ae:	3a7f      	subs	r2, #127	; 0x7f
 800a4b0:	440a      	add	r2, r1
 800a4b2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800a4b6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800a4ba:	4319      	orrs	r1, r3
 800a4bc:	ee00 1a10 	vmov	s0, r1
 800a4c0:	4951      	ldr	r1, [pc, #324]	; (800a608 <__ieee754_logf+0x1b0>)
 800a4c2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800a4c6:	f103 000f 	add.w	r0, r3, #15
 800a4ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a4ce:	4001      	ands	r1, r0
 800a4d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a4d4:	bb89      	cbnz	r1, 800a53a <__ieee754_logf+0xe2>
 800a4d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4de:	d10f      	bne.n	800a500 <__ieee754_logf+0xa8>
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	f000 8085 	beq.w	800a5f0 <__ieee754_logf+0x198>
 800a4e6:	ee07 2a90 	vmov	s15, r2
 800a4ea:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a60c <__ieee754_logf+0x1b4>
 800a4ee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a610 <__ieee754_logf+0x1b8>
 800a4f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a4fa:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a4fe:	4770      	bx	lr
 800a500:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a614 <__ieee754_logf+0x1bc>
 800a504:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a508:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a50c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a510:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a514:	b912      	cbnz	r2, 800a51c <__ieee754_logf+0xc4>
 800a516:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a51a:	4770      	bx	lr
 800a51c:	ee07 2a90 	vmov	s15, r2
 800a520:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a60c <__ieee754_logf+0x1b4>
 800a524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a528:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a52c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a530:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a610 <__ieee754_logf+0x1b8>
 800a534:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a538:	4770      	bx	lr
 800a53a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a53e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a542:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a618 <__ieee754_logf+0x1c0>
 800a546:	eddf 4a35 	vldr	s9, [pc, #212]	; 800a61c <__ieee754_logf+0x1c4>
 800a54a:	4935      	ldr	r1, [pc, #212]	; (800a620 <__ieee754_logf+0x1c8>)
 800a54c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a550:	4419      	add	r1, r3
 800a552:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800a556:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a55a:	430b      	orrs	r3, r1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	ee07 2a90 	vmov	s15, r2
 800a562:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a566:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a56a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a56e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a624 <__ieee754_logf+0x1cc>
 800a572:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a576:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800a628 <__ieee754_logf+0x1d0>
 800a57a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a57e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a62c <__ieee754_logf+0x1d4>
 800a582:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a586:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800a630 <__ieee754_logf+0x1d8>
 800a58a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a58e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a634 <__ieee754_logf+0x1dc>
 800a592:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a596:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a59a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a59e:	dd1c      	ble.n	800a5da <__ieee754_logf+0x182>
 800a5a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a5a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a5a8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a5ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a5b4:	b922      	cbnz	r2, 800a5c0 <__ieee754_logf+0x168>
 800a5b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5be:	4770      	bx	lr
 800a5c0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800a60c <__ieee754_logf+0x1b4>
 800a5c4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a5d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a610 <__ieee754_logf+0x1b8>
 800a5d4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a5d8:	4770      	bx	lr
 800a5da:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a5de:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	d0e9      	beq.n	800a5ba <__ieee754_logf+0x162>
 800a5e6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a60c <__ieee754_logf+0x1b4>
 800a5ea:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a5ee:	e7ed      	b.n	800a5cc <__ieee754_logf+0x174>
 800a5f0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a5fc <__ieee754_logf+0x1a4>
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	cc000000 	.word	0xcc000000
 800a5fc:	00000000 	.word	0x00000000
 800a600:	4c000000 	.word	0x4c000000
 800a604:	004afb20 	.word	0x004afb20
 800a608:	007ffff0 	.word	0x007ffff0
 800a60c:	3717f7d1 	.word	0x3717f7d1
 800a610:	3f317180 	.word	0x3f317180
 800a614:	3eaaaaab 	.word	0x3eaaaaab
 800a618:	3e1cd04f 	.word	0x3e1cd04f
 800a61c:	3e178897 	.word	0x3e178897
 800a620:	ffcf5c30 	.word	0xffcf5c30
 800a624:	3e638e29 	.word	0x3e638e29
 800a628:	3ecccccd 	.word	0x3ecccccd
 800a62c:	3e3a3325 	.word	0x3e3a3325
 800a630:	3e924925 	.word	0x3e924925
 800a634:	3f2aaaab 	.word	0x3f2aaaab

0800a638 <nanf>:
 800a638:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a640 <nanf+0x8>
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	7fc00000 	.word	0x7fc00000

0800a644 <abort>:
 800a644:	b508      	push	{r3, lr}
 800a646:	2006      	movs	r0, #6
 800a648:	f000 f8d0 	bl	800a7ec <raise>
 800a64c:	2001      	movs	r0, #1
 800a64e:	f7ff fe0f 	bl	800a270 <_exit>
	...

0800a654 <__errno>:
 800a654:	4b01      	ldr	r3, [pc, #4]	; (800a65c <__errno+0x8>)
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000028 	.word	0x20000028

0800a660 <__libc_init_array>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	4d0d      	ldr	r5, [pc, #52]	; (800a698 <__libc_init_array+0x38>)
 800a664:	4c0d      	ldr	r4, [pc, #52]	; (800a69c <__libc_init_array+0x3c>)
 800a666:	1b64      	subs	r4, r4, r5
 800a668:	10a4      	asrs	r4, r4, #2
 800a66a:	2600      	movs	r6, #0
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	d109      	bne.n	800a684 <__libc_init_array+0x24>
 800a670:	4d0b      	ldr	r5, [pc, #44]	; (800a6a0 <__libc_init_array+0x40>)
 800a672:	4c0c      	ldr	r4, [pc, #48]	; (800a6a4 <__libc_init_array+0x44>)
 800a674:	f000 f8e4 	bl	800a840 <_init>
 800a678:	1b64      	subs	r4, r4, r5
 800a67a:	10a4      	asrs	r4, r4, #2
 800a67c:	2600      	movs	r6, #0
 800a67e:	42a6      	cmp	r6, r4
 800a680:	d105      	bne.n	800a68e <__libc_init_array+0x2e>
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	f855 3b04 	ldr.w	r3, [r5], #4
 800a688:	4798      	blx	r3
 800a68a:	3601      	adds	r6, #1
 800a68c:	e7ee      	b.n	800a66c <__libc_init_array+0xc>
 800a68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a692:	4798      	blx	r3
 800a694:	3601      	adds	r6, #1
 800a696:	e7f2      	b.n	800a67e <__libc_init_array+0x1e>
 800a698:	0800ac20 	.word	0x0800ac20
 800a69c:	0800ac20 	.word	0x0800ac20
 800a6a0:	0800ac20 	.word	0x0800ac20
 800a6a4:	0800ac28 	.word	0x0800ac28

0800a6a8 <malloc>:
 800a6a8:	4b02      	ldr	r3, [pc, #8]	; (800a6b4 <malloc+0xc>)
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	f000 b80b 	b.w	800a6c8 <_malloc_r>
 800a6b2:	bf00      	nop
 800a6b4:	20000028 	.word	0x20000028

0800a6b8 <memset>:
 800a6b8:	4402      	add	r2, r0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d100      	bne.n	800a6c2 <memset+0xa>
 800a6c0:	4770      	bx	lr
 800a6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c6:	e7f9      	b.n	800a6bc <memset+0x4>

0800a6c8 <_malloc_r>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	1ccd      	adds	r5, r1, #3
 800a6cc:	f025 0503 	bic.w	r5, r5, #3
 800a6d0:	3508      	adds	r5, #8
 800a6d2:	2d0c      	cmp	r5, #12
 800a6d4:	bf38      	it	cc
 800a6d6:	250c      	movcc	r5, #12
 800a6d8:	2d00      	cmp	r5, #0
 800a6da:	4606      	mov	r6, r0
 800a6dc:	db01      	blt.n	800a6e2 <_malloc_r+0x1a>
 800a6de:	42a9      	cmp	r1, r5
 800a6e0:	d903      	bls.n	800a6ea <_malloc_r+0x22>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	6033      	str	r3, [r6, #0]
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ea:	f000 f89b 	bl	800a824 <__malloc_lock>
 800a6ee:	4921      	ldr	r1, [pc, #132]	; (800a774 <_malloc_r+0xac>)
 800a6f0:	680a      	ldr	r2, [r1, #0]
 800a6f2:	4614      	mov	r4, r2
 800a6f4:	b99c      	cbnz	r4, 800a71e <_malloc_r+0x56>
 800a6f6:	4f20      	ldr	r7, [pc, #128]	; (800a778 <_malloc_r+0xb0>)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	b923      	cbnz	r3, 800a706 <_malloc_r+0x3e>
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 f83c 	bl	800a77c <_sbrk_r>
 800a704:	6038      	str	r0, [r7, #0]
 800a706:	4629      	mov	r1, r5
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 f837 	bl	800a77c <_sbrk_r>
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d123      	bne.n	800a75a <_malloc_r+0x92>
 800a712:	230c      	movs	r3, #12
 800a714:	6033      	str	r3, [r6, #0]
 800a716:	4630      	mov	r0, r6
 800a718:	f000 f88a 	bl	800a830 <__malloc_unlock>
 800a71c:	e7e3      	b.n	800a6e6 <_malloc_r+0x1e>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	1b5b      	subs	r3, r3, r5
 800a722:	d417      	bmi.n	800a754 <_malloc_r+0x8c>
 800a724:	2b0b      	cmp	r3, #11
 800a726:	d903      	bls.n	800a730 <_malloc_r+0x68>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	441c      	add	r4, r3
 800a72c:	6025      	str	r5, [r4, #0]
 800a72e:	e004      	b.n	800a73a <_malloc_r+0x72>
 800a730:	6863      	ldr	r3, [r4, #4]
 800a732:	42a2      	cmp	r2, r4
 800a734:	bf0c      	ite	eq
 800a736:	600b      	streq	r3, [r1, #0]
 800a738:	6053      	strne	r3, [r2, #4]
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 f878 	bl	800a830 <__malloc_unlock>
 800a740:	f104 000b 	add.w	r0, r4, #11
 800a744:	1d23      	adds	r3, r4, #4
 800a746:	f020 0007 	bic.w	r0, r0, #7
 800a74a:	1ac2      	subs	r2, r0, r3
 800a74c:	d0cc      	beq.n	800a6e8 <_malloc_r+0x20>
 800a74e:	1a1b      	subs	r3, r3, r0
 800a750:	50a3      	str	r3, [r4, r2]
 800a752:	e7c9      	b.n	800a6e8 <_malloc_r+0x20>
 800a754:	4622      	mov	r2, r4
 800a756:	6864      	ldr	r4, [r4, #4]
 800a758:	e7cc      	b.n	800a6f4 <_malloc_r+0x2c>
 800a75a:	1cc4      	adds	r4, r0, #3
 800a75c:	f024 0403 	bic.w	r4, r4, #3
 800a760:	42a0      	cmp	r0, r4
 800a762:	d0e3      	beq.n	800a72c <_malloc_r+0x64>
 800a764:	1a21      	subs	r1, r4, r0
 800a766:	4630      	mov	r0, r6
 800a768:	f000 f808 	bl	800a77c <_sbrk_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	d1dd      	bne.n	800a72c <_malloc_r+0x64>
 800a770:	e7cf      	b.n	800a712 <_malloc_r+0x4a>
 800a772:	bf00      	nop
 800a774:	20000220 	.word	0x20000220
 800a778:	20000224 	.word	0x20000224

0800a77c <_sbrk_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d06      	ldr	r5, [pc, #24]	; (800a798 <_sbrk_r+0x1c>)
 800a780:	2300      	movs	r3, #0
 800a782:	4604      	mov	r4, r0
 800a784:	4608      	mov	r0, r1
 800a786:	602b      	str	r3, [r5, #0]
 800a788:	f7ff fd7c 	bl	800a284 <_sbrk>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_sbrk_r+0x1a>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_sbrk_r+0x1a>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	200006ac 	.word	0x200006ac

0800a79c <_raise_r>:
 800a79c:	291f      	cmp	r1, #31
 800a79e:	b538      	push	{r3, r4, r5, lr}
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	460d      	mov	r5, r1
 800a7a4:	d904      	bls.n	800a7b0 <_raise_r+0x14>
 800a7a6:	2316      	movs	r3, #22
 800a7a8:	6003      	str	r3, [r0, #0]
 800a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7b2:	b112      	cbz	r2, 800a7ba <_raise_r+0x1e>
 800a7b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7b8:	b94b      	cbnz	r3, 800a7ce <_raise_r+0x32>
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 f830 	bl	800a820 <_getpid_r>
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ca:	f000 b817 	b.w	800a7fc <_kill_r>
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d00a      	beq.n	800a7e8 <_raise_r+0x4c>
 800a7d2:	1c59      	adds	r1, r3, #1
 800a7d4:	d103      	bne.n	800a7de <_raise_r+0x42>
 800a7d6:	2316      	movs	r3, #22
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	2001      	movs	r0, #1
 800a7dc:	e7e7      	b.n	800a7ae <_raise_r+0x12>
 800a7de:	2400      	movs	r4, #0
 800a7e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	4798      	blx	r3
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	e7e0      	b.n	800a7ae <_raise_r+0x12>

0800a7ec <raise>:
 800a7ec:	4b02      	ldr	r3, [pc, #8]	; (800a7f8 <raise+0xc>)
 800a7ee:	4601      	mov	r1, r0
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	f7ff bfd3 	b.w	800a79c <_raise_r>
 800a7f6:	bf00      	nop
 800a7f8:	20000028 	.word	0x20000028

0800a7fc <_kill_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4d07      	ldr	r5, [pc, #28]	; (800a81c <_kill_r+0x20>)
 800a800:	2300      	movs	r3, #0
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	4611      	mov	r1, r2
 800a808:	602b      	str	r3, [r5, #0]
 800a80a:	f7ff fd21 	bl	800a250 <_kill>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	d102      	bne.n	800a818 <_kill_r+0x1c>
 800a812:	682b      	ldr	r3, [r5, #0]
 800a814:	b103      	cbz	r3, 800a818 <_kill_r+0x1c>
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	bd38      	pop	{r3, r4, r5, pc}
 800a81a:	bf00      	nop
 800a81c:	200006ac 	.word	0x200006ac

0800a820 <_getpid_r>:
 800a820:	f7ff bd0e 	b.w	800a240 <_getpid>

0800a824 <__malloc_lock>:
 800a824:	4801      	ldr	r0, [pc, #4]	; (800a82c <__malloc_lock+0x8>)
 800a826:	f000 b809 	b.w	800a83c <__retarget_lock_acquire_recursive>
 800a82a:	bf00      	nop
 800a82c:	200006b4 	.word	0x200006b4

0800a830 <__malloc_unlock>:
 800a830:	4801      	ldr	r0, [pc, #4]	; (800a838 <__malloc_unlock+0x8>)
 800a832:	f000 b804 	b.w	800a83e <__retarget_lock_release_recursive>
 800a836:	bf00      	nop
 800a838:	200006b4 	.word	0x200006b4

0800a83c <__retarget_lock_acquire_recursive>:
 800a83c:	4770      	bx	lr

0800a83e <__retarget_lock_release_recursive>:
 800a83e:	4770      	bx	lr

0800a840 <_init>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	bf00      	nop
 800a844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a846:	bc08      	pop	{r3}
 800a848:	469e      	mov	lr, r3
 800a84a:	4770      	bx	lr

0800a84c <_fini>:
 800a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84e:	bf00      	nop
 800a850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a852:	bc08      	pop	{r3}
 800a854:	469e      	mov	lr, r3
 800a856:	4770      	bx	lr


BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b70c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b8d0  0800b8d0  0001b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc5c  0800bc5c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc64  0800bc64  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc64  0800bc64  0001bc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc68  0800bc68  0001bc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800bc6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  200000bc  0800bd28  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  0800bd28  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e440  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c95  00000000  00000000  0003e52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  000421c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025fac  00000000  00000000  00044680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f83  00000000  00000000  0006a62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da8a1  00000000  00000000  0007b5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155e50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005278  00000000  00000000  00155ecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000bc 	.word	0x200000bc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800b8b8 	.word	0x0800b8b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000c0 	.word	0x200000c0
 8000200:	0800b8b8 	.word	0x0800b8b8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	2003      	movs	r0, #3
 800052e:	f000 ffa1 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>
 8000538:	f00a fe3a 	bl	800b1b0 <HAL_MspInit>
 800053c:	2300      	movs	r3, #0
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ffb9 	bl	80014de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 ff81 	bl	800148a <HAL_NVIC_SetPriority>
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
 8000592:	2301      	movs	r3, #1
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000054 	.word	0x20000054
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000488 	.word	0x20000488

080005d0 <HAL_GetTick>:
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000488 	.word	0x20000488

080005e8 <HAL_Delay>:
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_CAN_Init>:
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <HAL_CAN_Init+0x12>
 800063a:	2301      	movs	r3, #1
 800063c:	e0ed      	b.n	800081a <HAL_CAN_Init+0x1ee>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <HAL_CAN_Init+0x24>
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f00a fdd8 	bl	800b200 <HAL_CAN_MspInit>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f022 0202 	bic.w	r2, r2, #2
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	f7ff ffb6 	bl	80005d0 <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	e012      	b.n	800068e <HAL_CAN_Init+0x62>
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d90b      	bls.n	800068e <HAL_CAN_Init+0x62>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2205      	movs	r2, #5
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
 800068a:	2301      	movs	r3, #1
 800068c:	e0c5      	b.n	800081a <HAL_CAN_Init+0x1ee>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e5      	bne.n	8000668 <HAL_CAN_Init+0x3c>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	f7ff ff90 	bl	80005d0 <HAL_GetTick>
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	e012      	b.n	80006da <HAL_CAN_Init+0xae>
 80006b4:	f7ff ff8c 	bl	80005d0 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d90b      	bls.n	80006da <HAL_CAN_Init+0xae>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2205      	movs	r2, #5
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
 80006d6:	2301      	movs	r3, #1
 80006d8:	e09f      	b.n	800081a <HAL_CAN_Init+0x1ee>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0e5      	beq.n	80006b4 <HAL_CAN_Init+0x88>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7e1b      	ldrb	r3, [r3, #24]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d108      	bne.n	8000702 <HAL_CAN_Init+0xd6>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e007      	b.n	8000712 <HAL_CAN_Init+0xe6>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7e5b      	ldrb	r3, [r3, #25]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <HAL_CAN_Init+0x100>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e007      	b.n	800073c <HAL_CAN_Init+0x110>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e9b      	ldrb	r3, [r3, #26]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0x12a>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0220 	orr.w	r2, r2, #32
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0x13a>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0220 	bic.w	r2, r2, #32
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7edb      	ldrb	r3, [r3, #27]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x154>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0210 	bic.w	r2, r2, #16
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x164>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0210 	orr.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7f1b      	ldrb	r3, [r3, #28]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x17e>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0208 	orr.w	r2, r2, #8
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x18e>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0208 	bic.w	r2, r2, #8
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7f5b      	ldrb	r3, [r3, #29]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x1a8>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0204 	orr.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x1b8>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0204 	bic.w	r2, r2, #4
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	ea42 0103 	orr.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	430a      	orrs	r2, r1
 8000808:	61da      	str	r2, [r3, #28]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2020 	strb.w	r2, [r3, #32]
 8000818:	2300      	movs	r3, #0
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_CAN_ConfigFilter>:
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083a:	74fb      	strb	r3, [r7, #19]
 800083c:	7cfb      	ldrb	r3, [r7, #19]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d003      	beq.n	800084a <HAL_CAN_ConfigFilter+0x26>
 8000842:	7cfb      	ldrb	r3, [r7, #19]
 8000844:	2b02      	cmp	r3, #2
 8000846:	f040 80be 	bne.w	80009c6 <HAL_CAN_ConfigFilter+0x1a2>
 800084a:	4b65      	ldr	r3, [pc, #404]	; (80009e0 <HAL_CAN_ConfigFilter+0x1bc>)
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000854:	f043 0201 	orr.w	r2, r3, #1
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000864:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	431a      	orrs	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	2201      	movs	r2, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	43db      	mvns	r3, r3
 800089c:	401a      	ands	r2, r3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d123      	bne.n	80008f4 <HAL_CAN_ConfigFilter+0xd0>
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	0419      	lsls	r1, r3, #16
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	6952      	ldr	r2, [r2, #20]
 80008ce:	4319      	orrs	r1, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3248      	adds	r2, #72	; 0x48
 80008d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	0419      	lsls	r1, r3, #16
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	6979      	ldr	r1, [r7, #20]
 80008ec:	3348      	adds	r3, #72	; 0x48
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	440b      	add	r3, r1
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d122      	bne.n	8000942 <HAL_CAN_ConfigFilter+0x11e>
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	431a      	orrs	r2, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	0419      	lsls	r1, r3, #16
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	b29b      	uxth	r3, r3
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	6952      	ldr	r2, [r2, #20]
 800091c:	4319      	orrs	r1, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3248      	adds	r2, #72	; 0x48
 8000922:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	0419      	lsls	r1, r3, #16
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	b29a      	uxth	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	430a      	orrs	r2, r1
 8000938:	6979      	ldr	r1, [r7, #20]
 800093a:	3348      	adds	r3, #72	; 0x48
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <HAL_CAN_ConfigFilter+0x13a>
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800095c:	e007      	b.n	800096e <HAL_CAN_ConfigFilter+0x14a>
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d109      	bne.n	800098a <HAL_CAN_ConfigFilter+0x166>
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	43db      	mvns	r3, r3
 8000980:	401a      	ands	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000988:	e007      	b.n	800099a <HAL_CAN_ConfigFilter+0x176>
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	431a      	orrs	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d107      	bne.n	80009b2 <HAL_CAN_ConfigFilter+0x18e>
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009b8:	f023 0201 	bic.w	r2, r3, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80009c2:	2300      	movs	r3, #0
 80009c4:	e006      	b.n	80009d4 <HAL_CAN_ConfigFilter+0x1b0>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
 80009d2:	2301      	movs	r3, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40006400 	.word	0x40006400

080009e4 <HAL_CAN_Start>:
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d12e      	bne.n	8000a56 <HAL_CAN_Start+0x72>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2202      	movs	r2, #2
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	f7ff fdde 	bl	80005d0 <HAL_GetTick>
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	e012      	b.n	8000a3e <HAL_CAN_Start+0x5a>
 8000a18:	f7ff fdda 	bl	80005d0 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b0a      	cmp	r3, #10
 8000a24:	d90b      	bls.n	8000a3e <HAL_CAN_Start+0x5a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2205      	movs	r2, #5
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e012      	b.n	8000a64 <HAL_CAN_Start+0x80>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e5      	bne.n	8000a18 <HAL_CAN_Start+0x34>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
 8000a52:	2300      	movs	r3, #0
 8000a54:	e006      	b.n	8000a64 <HAL_CAN_Start+0x80>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
 8000a62:	2301      	movs	r3, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_CAN_AddTxMessage>:
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a80:	77fb      	strb	r3, [r7, #31]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d003      	beq.n	8000a98 <HAL_CAN_AddTxMessage+0x2c>
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 80b8 	bne.w	8000c08 <HAL_CAN_AddTxMessage+0x19c>
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10a      	bne.n	8000ab8 <HAL_CAN_AddTxMessage+0x4c>
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_CAN_AddTxMessage+0x4c>
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 80a0 	beq.w	8000bf8 <HAL_CAN_AddTxMessage+0x18c>
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	0e1b      	lsrs	r3, r3, #24
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d907      	bls.n	8000ad8 <HAL_CAN_AddTxMessage+0x6c>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000acc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e09e      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
 8000ad8:	2201      	movs	r2, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	409a      	lsls	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10d      	bne.n	8000b06 <HAL_CAN_AddTxMessage+0x9a>
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	055a      	lsls	r2, r3, #21
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	68f9      	ldr	r1, [r7, #12]
 8000af6:	6809      	ldr	r1, [r1, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3318      	adds	r3, #24
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	440b      	add	r3, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e00f      	b.n	8000b26 <HAL_CAN_AddTxMessage+0xba>
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	00da      	lsls	r2, r3, #3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	6809      	ldr	r1, [r1, #0]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3318      	adds	r3, #24
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	440b      	add	r3, r1
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3318      	adds	r3, #24
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	440b      	add	r3, r1
 8000b36:	3304      	adds	r3, #4
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	7d1b      	ldrb	r3, [r3, #20]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d111      	bne.n	8000b66 <HAL_CAN_AddTxMessage+0xfa>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3318      	adds	r3, #24
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	4413      	add	r3, r2
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3318      	adds	r3, #24
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	440b      	add	r3, r1
 8000b62:	3304      	adds	r3, #4
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3307      	adds	r3, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	061a      	lsls	r2, r3, #24
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3306      	adds	r3, #6
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3305      	adds	r3, #5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4313      	orrs	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	3204      	adds	r2, #4
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	4610      	mov	r0, r2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	6811      	ldr	r1, [r2, #0]
 8000b8e:	ea43 0200 	orr.w	r2, r3, r0
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	440b      	add	r3, r1
 8000b98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3303      	adds	r3, #3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	061a      	lsls	r2, r3, #24
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	6811      	ldr	r1, [r2, #0]
 8000bc4:	ea43 0200 	orr.w	r2, r3, r0
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	440b      	add	r3, r1
 8000bce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	f043 0201 	orr.w	r2, r3, #1
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3318      	adds	r3, #24
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	440b      	add	r3, r1
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e00e      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
 8000c04:	2301      	movs	r3, #1
 8000c06:	e006      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
 8000c14:	2301      	movs	r3, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_CAN_GetRxMessage>:
 8000c22:	b480      	push	{r7}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c36:	75fb      	strb	r3, [r7, #23]
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d003      	beq.n	8000c46 <HAL_CAN_GetRxMessage+0x24>
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	f040 80f4 	bne.w	8000e2e <HAL_CAN_GetRxMessage+0x20c>
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10e      	bne.n	8000c6a <HAL_CAN_GetRxMessage+0x48>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d116      	bne.n	8000c88 <HAL_CAN_GetRxMessage+0x66>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0e8      	b.n	8000e3c <HAL_CAN_GetRxMessage+0x21a>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <HAL_CAN_GetRxMessage+0x66>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0d9      	b.n	8000e3c <HAL_CAN_GetRxMessage+0x21a>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	331b      	adds	r3, #27
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	4413      	add	r3, r2
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0204 	and.w	r2, r3, #4
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_CAN_GetRxMessage+0x9e>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	331b      	adds	r3, #27
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	4413      	add	r3, r2
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	0d5b      	lsrs	r3, r3, #21
 8000cb6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_CAN_GetRxMessage+0xb6>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	331b      	adds	r3, #27
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	331b      	adds	r3, #27
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	085b      	lsrs	r3, r3, #1
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	331b      	adds	r3, #27
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 020f 	and.w	r2, r3, #15
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	331b      	adds	r3, #27
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4413      	add	r3, r2
 8000d14:	3304      	adds	r3, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	331b      	adds	r3, #27
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	0c1b      	lsrs	r3, r3, #16
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	4413      	add	r3, r2
 8000d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	0a1a      	lsrs	r2, r3, #8
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	4413      	add	r3, r2
 8000d72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0c1a      	lsrs	r2, r3, #16
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	4413      	add	r3, r2
 8000d8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	0e1a      	lsrs	r2, r3, #24
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	3303      	adds	r3, #3
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	3304      	adds	r3, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	0a1a      	lsrs	r2, r3, #8
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3305      	adds	r3, #5
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0c1a      	lsrs	r2, r3, #16
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3306      	adds	r3, #6
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	0e1a      	lsrs	r2, r3, #24
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d108      	bne.n	8000e1a <HAL_CAN_GetRxMessage+0x1f8>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	e007      	b.n	8000e2a <HAL_CAN_GetRxMessage+0x208>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0220 	orr.w	r2, r2, #32
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e006      	b.n	8000e3c <HAL_CAN_GetRxMessage+0x21a>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_CAN_ActivateNotification>:
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d002      	beq.n	8000e66 <HAL_CAN_ActivateNotification+0x1e>
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d109      	bne.n	8000e7a <HAL_CAN_ActivateNotification+0x32>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6959      	ldr	r1, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	2300      	movs	r3, #0
 8000e78:	e006      	b.n	8000e88 <HAL_CAN_ActivateNotification+0x40>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
 8000e86:	2301      	movs	r3, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_CAN_IRQHandler>:
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d07c      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d023      	beq.n	8000f2c <HAL_CAN_IRQHandler+0x98>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_CAN_IRQHandler+0x6a>
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f97d 	bl	80011f6 <HAL_CAN_TxMailbox0CompleteCallback>
 8000efc:	e016      	b.n	8000f2c <HAL_CAN_IRQHandler+0x98>
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x7e>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f10:	e00c      	b.n	8000f2c <HAL_CAN_IRQHandler+0x98>
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <HAL_CAN_IRQHandler+0x92>
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
 8000f24:	e002      	b.n	8000f2c <HAL_CAN_IRQHandler+0x98>
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f983 	bl	8001232 <HAL_CAN_TxMailbox0AbortCallback>
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d024      	beq.n	8000f80 <HAL_CAN_IRQHandler+0xec>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_CAN_IRQHandler+0xbe>
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f95d 	bl	800120a <HAL_CAN_TxMailbox1CompleteCallback>
 8000f50:	e016      	b.n	8000f80 <HAL_CAN_IRQHandler+0xec>
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_CAN_IRQHandler+0xd2>
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
 8000f64:	e00c      	b.n	8000f80 <HAL_CAN_IRQHandler+0xec>
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <HAL_CAN_IRQHandler+0xe6>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	e002      	b.n	8000f80 <HAL_CAN_IRQHandler+0xec>
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f963 	bl	8001246 <HAL_CAN_TxMailbox1AbortCallback>
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d024      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x112>
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f93d 	bl	800121e <HAL_CAN_TxMailbox2CompleteCallback>
 8000fa4:	e016      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <HAL_CAN_IRQHandler+0x126>
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb8:	e00c      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <HAL_CAN_IRQHandler+0x13a>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	e002      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x140>
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f943 	bl	800125a <HAL_CAN_TxMailbox2AbortCallback>
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x164>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x164>
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_CAN_IRQHandler+0x186>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_CAN_IRQHandler+0x186>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2208      	movs	r2, #8
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f92a 	bl	800126e <HAL_CAN_RxFifo0FullCallback>
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d009      	beq.n	8001038 <HAL_CAN_IRQHandler+0x1a4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <HAL_CAN_IRQHandler+0x1a4>
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f009 f93c 	bl	800a2b0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00c      	beq.n	800105c <HAL_CAN_IRQHandler+0x1c8>
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <HAL_CAN_IRQHandler+0x1c8>
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2210      	movs	r2, #16
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_CAN_IRQHandler+0x1ea>
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_CAN_IRQHandler+0x1ea>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2208      	movs	r2, #8
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f902 	bl	8001282 <HAL_CAN_RxFifo1FullCallback>
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <HAL_CAN_IRQHandler+0x208>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <HAL_CAN_IRQHandler+0x208>
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f009 f92c 	bl	800a2f4 <HAL_CAN_RxFifo1MsgPendingCallback>
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <HAL_CAN_IRQHandler+0x22a>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_CAN_IRQHandler+0x22a>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2210      	movs	r2, #16
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8ec 	bl	8001296 <HAL_CAN_SleepCallback>
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x24c>
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x24c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2208      	movs	r2, #8
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f8e5 	bl	80012aa <HAL_CAN_WakeUpFromRxMsgCallback>
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d075      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x342>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d06c      	beq.n	80011ce <HAL_CAN_IRQHandler+0x33a>
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <HAL_CAN_IRQHandler+0x27c>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_CAN_IRQHandler+0x27c>
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <HAL_CAN_IRQHandler+0x298>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_CAN_IRQHandler+0x298>
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <HAL_CAN_IRQHandler+0x2b4>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_CAN_IRQHandler+0x2b4>
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03d      	beq.n	80011ce <HAL_CAN_IRQHandler+0x33a>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001158:	2b00      	cmp	r3, #0
 800115a:	d038      	beq.n	80011ce <HAL_CAN_IRQHandler+0x33a>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001162:	2b30      	cmp	r3, #48	; 0x30
 8001164:	d017      	beq.n	8001196 <HAL_CAN_IRQHandler+0x302>
 8001166:	2b30      	cmp	r3, #48	; 0x30
 8001168:	d804      	bhi.n	8001174 <HAL_CAN_IRQHandler+0x2e0>
 800116a:	2b10      	cmp	r3, #16
 800116c:	d009      	beq.n	8001182 <HAL_CAN_IRQHandler+0x2ee>
 800116e:	2b20      	cmp	r3, #32
 8001170:	d00c      	beq.n	800118c <HAL_CAN_IRQHandler+0x2f8>
 8001172:	e024      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 8001174:	2b50      	cmp	r3, #80	; 0x50
 8001176:	d018      	beq.n	80011aa <HAL_CAN_IRQHandler+0x316>
 8001178:	2b60      	cmp	r3, #96	; 0x60
 800117a:	d01b      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x320>
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d00f      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x30c>
 8001180:	e01d      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e018      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	e013      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
 800119e:	e00e      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
 80011a8:	e009      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	e004      	b.n	80011be <HAL_CAN_IRQHandler+0x32a>
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
 80011bc:	bf00      	nop
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_CAN_IRQHandler+0x35a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f868 	bl	80012be <HAL_CAN_ErrorCallback>
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_CAN_TxMailbox0CompleteCallback>:
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_CAN_TxMailbox1CompleteCallback>:
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_CAN_TxMailbox2CompleteCallback>:
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_CAN_TxMailbox0AbortCallback>:
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_CAN_TxMailbox1AbortCallback>:
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_TxMailbox2AbortCallback>:
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_CAN_RxFifo0FullCallback>:
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_CAN_RxFifo1FullCallback>:
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_CAN_SleepCallback>:
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_CAN_WakeUpFromRxMsgCallback>:
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_CAN_ErrorCallback>:
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <__NVIC_SetPriorityGrouping>:
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
 8001420:	4313      	orrs	r3, r2
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e165      	b.n	80017e0 <HAL_GPIO_Init+0x2e8>
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8154 	bne.w	80017da <HAL_GPIO_Init+0x2e2>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x4a>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x92>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0203 	and.w	r2, r3, #3
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d00b      	beq.n	80015de <HAL_GPIO_Init+0xe6>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0xe6>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0xe6>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0x148>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80ae 	beq.w	80017da <HAL_GPIO_Init+0x2e2>
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b5c      	ldr	r3, [pc, #368]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a5b      	ldr	r2, [pc, #364]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_GPIO_Init+0x300>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4e      	ldr	r2, [pc, #312]	; (80017fc <HAL_GPIO_Init+0x304>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d025      	beq.n	8001712 <HAL_GPIO_Init+0x21a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x308>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01f      	beq.n	800170e <HAL_GPIO_Init+0x216>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x30c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <HAL_GPIO_Init+0x310>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x20a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x206>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a48      	ldr	r2, [pc, #288]	; (8001814 <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x202>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x21c>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	4934      	ldr	r1, [pc, #208]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x25e>
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_GPIO_Init+0x320>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x288>
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	6053      	str	r3, [r2, #4]
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2b2>
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2dc>
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae96 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
 80017e8:	bf00      	nop
 80017ea:	3724      	adds	r7, #36	; 0x24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40021400 	.word	0x40021400
 8001814:	40021800 	.word	0x40021800
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_ReadPin>:
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_GPIO_ReadPin+0x1e>
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e001      	b.n	800183e <HAL_GPIO_ReadPin+0x22>
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_WritePin>:
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_GPIO_TogglePin>:
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	401a      	ands	r2, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	429a      	cmp	r2, r3
 8001896:	d104      	bne.n	80018a2 <HAL_GPIO_TogglePin+0x24>
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_TogglePin+0x2a>
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_RCC_ClockConfig>:
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0ca      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 80018c8:	4b67      	ldr	r3, [pc, #412]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d90c      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
 80018d6:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b6      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x8a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x60>
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001912:	6093      	str	r3, [r2, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x78>
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800192a:	6093      	str	r3, [r2, #8]
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494c      	ldr	r1, [pc, #304]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d044      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d119      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
 800195e:	2301      	movs	r3, #1
 8001960:	e07d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_ClockConfig+0xbe>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
 8001972:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
 800197e:	2301      	movs	r3, #1
 8001980:	e06d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
 800198e:	2301      	movs	r3, #1
 8001990:	e065      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
 80019a4:	f7fe fe14 	bl	80005d0 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
 80019ac:	f7fe fe10 	bl	80005d0 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
 80019be:	2303      	movs	r3, #3
 80019c0:	e04d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20c      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x148>
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_RCC_ClockConfig+0x1b4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x148>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e030      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1aa>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x166>
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4915      	ldr	r1, [pc, #84]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x186>
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490d      	ldr	r1, [pc, #52]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
 8001a3a:	f000 fb47 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8001a3e:	4601      	mov	r1, r0
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7fe fd76 	bl	8000548 <HAL_InitTick>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	0800bc4c 	.word	0x0800bc4c
 8001a74:	20000054 	.word	0x20000054

08001a78 <HAL_RCCEx_PeriphCLKConfig>:
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	496c      	ldr	r1, [pc, #432]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d010      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	4960      	ldr	r1, [pc, #384]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8001afc:	2301      	movs	r3, #1
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4955      	ldr	r1, [pc, #340]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8001b48:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	4946      	ldr	r1, [pc, #280]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b66:	d101      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8001b74:	2301      	movs	r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 808a 	beq.w	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	f7fe fd0f 	bl	80005d0 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001bb6:	f7fe fd0b 	bl	80005d0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e278      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d02f      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bec:	6a3a      	ldr	r2, [r7, #32]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d114      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001c1a:	f7fe fcd9 	bl	80005d0 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8001c20:	e00a      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001c22:	f7fe fcd5 	bl	80005d0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e240      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ee      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c50:	d114      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c66:	4902      	ldr	r1, [pc, #8]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
 8001c6c:	e00c      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
 8001c78:	42470e40 	.word	0x42470e40
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c86:	6093      	str	r3, [r2, #8]
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	4944      	ldr	r1, [pc, #272]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	670b      	str	r3, [r1, #112]	; 0x70
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001cac:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	492e      	ldr	r1, [pc, #184]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d011      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	4926      	ldr	r1, [pc, #152]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	491a      	ldr	r1, [pc, #104]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d011      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d60:	4911      	ldr	r1, [pc, #68]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d70:	d101      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8001d72:	2301      	movs	r3, #1
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d84:	f040 80ff 	bne.w	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f7fe fc1f 	bl	80005d0 <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	; 0x24
 8001d94:	e00e      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8001d96:	f7fe fc1b 	bl	80005d0 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e188      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	424711e0 	.word	0x424711e0
 8001db0:	42470068 	.word	0x42470068
 8001db4:	4b7e      	ldr	r3, [pc, #504]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ea      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d028      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d124      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8001de8:	4b71      	ldr	r3, [pc, #452]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dee:	0c1b      	lsrs	r3, r3, #16
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	3301      	adds	r3, #1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e00:	0e1b      	lsrs	r3, r3, #24
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	431a      	orrs	r2, r3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	071b      	lsls	r3, r3, #28
 8001e2a:	4961      	ldr	r1, [pc, #388]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d035      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5c:	d130      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x448>
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e76:	0f1b      	lsrs	r3, r3, #28
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	019b      	lsls	r3, r3, #6
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	071b      	lsls	r3, r3, #28
 8001ea0:	4943      	ldr	r1, [pc, #268]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eae:	f023 021f 	bic.w	r2, r3, #31
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d029      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed4:	d124      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eee:	0f1b      	lsrs	r3, r3, #28
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	019b      	lsls	r3, r3, #6
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	431a      	orrs	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	071b      	lsls	r3, r3, #28
 8001f18:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d016      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	071b      	lsls	r3, r3, #28
 8001f52:	4917      	ldr	r1, [pc, #92]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f7fe fb36 	bl	80005d0 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	; 0x24
 8001f66:	e008      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8001f68:	f7fe fb32 	bl	80005d0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e09f      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	f040 8095 	bne.w	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f7fe fb1c 	bl	80005d0 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x544>
 8001f9c:	f7fe fb18 	bl	80005d0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x544>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e085      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	42470068 	.word	0x42470068
 8001fb8:	42470070 	.word	0x42470070
 8001fbc:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fc8:	d0e8      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d02b      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d127      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	431a      	orrs	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4928      	ldr	r1, [pc, #160]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800202a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	3b01      	subs	r3, #1
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01d      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002056:	d118      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	3b01      	subs	r3, #1
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f7fe fa9e 	bl	80005d0 <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	; 0x24
 8002096:	e008      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x632>
 8002098:	f7fe fa9a 	bl	80005d0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x632>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e007      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b6:	d1ef      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x620>
 80020b8:	2300      	movs	r3, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	3730      	adds	r7, #48	; 0x30
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470070 	.word	0x42470070

080020cc <HAL_RCC_GetSysClockFreq>:
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b9f      	ldr	r3, [pc, #636]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	f200 8130 	bhi.w	8002354 <HAL_RCC_GetSysClockFreq+0x288>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <HAL_RCC_GetSysClockFreq+0x30>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	08002131 	.word	0x08002131
 8002100:	08002355 	.word	0x08002355
 8002104:	08002355 	.word	0x08002355
 8002108:	08002355 	.word	0x08002355
 800210c:	08002137 	.word	0x08002137
 8002110:	08002355 	.word	0x08002355
 8002114:	08002355 	.word	0x08002355
 8002118:	08002355 	.word	0x08002355
 800211c:	0800213d 	.word	0x0800213d
 8002120:	08002355 	.word	0x08002355
 8002124:	08002355 	.word	0x08002355
 8002128:	08002355 	.word	0x08002355
 800212c:	0800224b 	.word	0x0800224b
 8002130:	4b8d      	ldr	r3, [pc, #564]	; (8002368 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e111      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
 8002136:	4b8d      	ldr	r3, [pc, #564]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e10e      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
 800213c:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b87      	ldr	r3, [pc, #540]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d023      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0xce>
 8002152:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea03 0501 	and.w	r5, r3, r1
 8002168:	ea04 0602 	and.w	r6, r4, r2
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800216e:	fb02 f106 	mul.w	r1, r2, r6
 8002172:	2200      	movs	r2, #0
 8002174:	fb02 f205 	mul.w	r2, r2, r5
 8002178:	440a      	add	r2, r1
 800217a:	497c      	ldr	r1, [pc, #496]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800217c:	fba5 0101 	umull	r0, r1, r5, r1
 8002180:	1853      	adds	r3, r2, r1
 8002182:	4619      	mov	r1, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f04f 0400 	mov.w	r4, #0
 800218a:	461a      	mov	r2, r3
 800218c:	4623      	mov	r3, r4
 800218e:	f7fe f839 	bl	8000204 <__aeabi_uldivmod>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e049      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x162>
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	ea03 0501 	and.w	r5, r3, r1
 80021b0:	ea04 0602 	and.w	r6, r4, r2
 80021b4:	4629      	mov	r1, r5
 80021b6:	4632      	mov	r2, r6
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	0154      	lsls	r4, r2, #5
 80021c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021c6:	014b      	lsls	r3, r1, #5
 80021c8:	4619      	mov	r1, r3
 80021ca:	4622      	mov	r2, r4
 80021cc:	1b49      	subs	r1, r1, r5
 80021ce:	eb62 0206 	sbc.w	r2, r2, r6
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	0194      	lsls	r4, r2, #6
 80021dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021e0:	018b      	lsls	r3, r1, #6
 80021e2:	1a5b      	subs	r3, r3, r1
 80021e4:	eb64 0402 	sbc.w	r4, r4, r2
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	00e2      	lsls	r2, r4, #3
 80021f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021f6:	00d9      	lsls	r1, r3, #3
 80021f8:	460b      	mov	r3, r1
 80021fa:	4614      	mov	r4, r2
 80021fc:	195b      	adds	r3, r3, r5
 80021fe:	eb44 0406 	adc.w	r4, r4, r6
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	02a2      	lsls	r2, r4, #10
 800220c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002210:	0299      	lsls	r1, r3, #10
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	f7fd ffee 	bl	8000204 <__aeabi_uldivmod>
 8002228:	4603      	mov	r3, r0
 800222a:	460c      	mov	r4, r1
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e087      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x1dc>
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	ea03 0501 	and.w	r5, r3, r1
 8002276:	ea04 0602 	and.w	r6, r4, r2
 800227a:	4a3c      	ldr	r2, [pc, #240]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800227c:	fb02 f106 	mul.w	r1, r2, r6
 8002280:	2200      	movs	r2, #0
 8002282:	fb02 f205 	mul.w	r2, r2, r5
 8002286:	440a      	add	r2, r1
 8002288:	4938      	ldr	r1, [pc, #224]	; (800236c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800228a:	fba5 0101 	umull	r0, r1, r5, r1
 800228e:	1853      	adds	r3, r2, r1
 8002290:	4619      	mov	r1, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	461a      	mov	r2, r3
 800229a:	4623      	mov	r3, r4
 800229c:	f7fd ffb2 	bl	8000204 <__aeabi_uldivmod>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e049      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x270>
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	ea03 0501 	and.w	r5, r3, r1
 80022be:	ea04 0602 	and.w	r6, r4, r2
 80022c2:	4629      	mov	r1, r5
 80022c4:	4632      	mov	r2, r6
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	0154      	lsls	r4, r2, #5
 80022d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022d4:	014b      	lsls	r3, r1, #5
 80022d6:	4619      	mov	r1, r3
 80022d8:	4622      	mov	r2, r4
 80022da:	1b49      	subs	r1, r1, r5
 80022dc:	eb62 0206 	sbc.w	r2, r2, r6
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	f04f 0400 	mov.w	r4, #0
 80022e8:	0194      	lsls	r4, r2, #6
 80022ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	1a5b      	subs	r3, r3, r1
 80022f2:	eb64 0402 	sbc.w	r4, r4, r2
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002304:	00d9      	lsls	r1, r3, #3
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	195b      	adds	r3, r3, r5
 800230c:	eb44 0406 	adc.w	r4, r4, r6
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	02a2      	lsls	r2, r4, #10
 800231a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800231e:	0299      	lsls	r1, r3, #10
 8002320:	460b      	mov	r3, r1
 8002322:	4614      	mov	r4, r2
 8002324:	4618      	mov	r0, r3
 8002326:	4621      	mov	r1, r4
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	461a      	mov	r2, r3
 8002330:	4623      	mov	r3, r4
 8002332:	f7fd ff67 	bl	8000204 <__aeabi_uldivmod>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_GetSysClockFreq+0x298>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0f1b      	lsrs	r3, r3, #28
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e002      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x28e>
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	bf00      	nop
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	00f42400 	.word	0x00f42400
 800236c:	017d7840 	.word	0x017d7840

08002370 <HAL_RCC_OscConfig>:
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8083 	beq.w	8002490 <HAL_RCC_OscConfig+0x120>
 800238a:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x5a>
 8002396:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x40>
 80023a2:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ae:	d00c      	beq.n	80023ca <HAL_RCC_OscConfig+0x5a>
 80023b0:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d112      	bne.n	80023e2 <HAL_RCC_OscConfig+0x72>
 80023bc:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c8:	d10b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x72>
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d05b      	beq.n	800248e <HAL_RCC_OscConfig+0x11e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d157      	bne.n	800248e <HAL_RCC_OscConfig+0x11e>
 80023de:	2301      	movs	r3, #1
 80023e0:	e216      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x8a>
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e01d      	b.n	8002436 <HAL_RCC_OscConfig+0xc6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0xae>
 8002404:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800240a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a72      	ldr	r2, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0xc6>
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6c      	ldr	r2, [pc, #432]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <HAL_RCC_OscConfig+0xf6>
 800243e:	f7fe f8c7 	bl	80005d0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002446:	f7fe f8c3 	bl	80005d0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002454:	2303      	movs	r3, #3
 8002456:	e1db      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 8002458:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0xd6>
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x120>
 8002466:	f7fe f8b3 	bl	80005d0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x110>
 800246e:	f7fe f8af 	bl	80005d0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x110>
 800247c:	2303      	movs	r3, #3
 800247e:	e1c7      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0xfe>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x120>
 800248e:	bf00      	nop
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d06f      	beq.n	800257c <HAL_RCC_OscConfig+0x20c>
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d017      	beq.n	80024d8 <HAL_RCC_OscConfig+0x168>
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x150>
 80024b4:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x168>
 80024c0:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d11c      	bne.n	8002506 <HAL_RCC_OscConfig+0x196>
 80024cc:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d116      	bne.n	8002506 <HAL_RCC_OscConfig+0x196>
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x180>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x180>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e18f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4938      	ldr	r1, [pc, #224]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e03a      	b.n	800257c <HAL_RCC_OscConfig+0x20c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_RCC_OscConfig+0x1e0>
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f7fe f85c 	bl	80005d0 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1be>
 800251c:	f7fe f858 	bl	80005d0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1be>
 800252a:	2303      	movs	r3, #3
 800252c:	e170      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 800252e:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x1ac>
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4925      	ldr	r1, [pc, #148]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
 800254e:	e015      	b.n	800257c <HAL_RCC_OscConfig+0x20c>
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f7fe f83b 	bl	80005d0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x200>
 800255e:	f7fe f837 	bl	80005d0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x200>
 800256c:	2303      	movs	r3, #3
 800256e:	e14f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x1ee>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d037      	beq.n	80025f8 <HAL_RCC_OscConfig+0x288>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d016      	beq.n	80025be <HAL_RCC_OscConfig+0x24e>
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x278>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f7fe f81b 	bl	80005d0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x240>
 800259e:	f7fe f817 	bl	80005d0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x240>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e12f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x22e>
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x288>
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_RCC_OscConfig+0x278>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f7fe f804 	bl	80005d0 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]
 80025ca:	e00f      	b.n	80025ec <HAL_RCC_OscConfig+0x27c>
 80025cc:	f7fe f800 	bl	80005d0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d908      	bls.n	80025ec <HAL_RCC_OscConfig+0x27c>
 80025da:	2303      	movs	r3, #3
 80025dc:	e118      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	42470000 	.word	0x42470000
 80025e8:	42470e80 	.word	0x42470e80
 80025ec:	4b8a      	ldr	r3, [pc, #552]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e9      	bne.n	80025cc <HAL_RCC_OscConfig+0x25c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8097 	beq.w	8002734 <HAL_RCC_OscConfig+0x3c4>
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
 800260a:	4b83      	ldr	r3, [pc, #524]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_RCC_OscConfig+0x2c6>
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b7c      	ldr	r3, [pc, #496]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
 8002636:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x304>
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	f7fd ffbf 	bl	80005d0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2f8>
 8002656:	f7fd ffbb 	bl	80005d0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2f8>
 8002664:	2303      	movs	r3, #3
 8002666:	e0d3      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x4ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2e6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x31a>
 800267c:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x354>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x33c>
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x354>
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a59      	ldr	r2, [pc, #356]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026be:	f023 0304 	bic.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_RCC_OscConfig+0x388>
 80026cc:	f7fd ff80 	bl	80005d0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x37a>
 80026d4:	f7fd ff7c 	bl	80005d0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x37a>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e092      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80026ea:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ee      	beq.n	80026d4 <HAL_RCC_OscConfig+0x364>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x3b2>
 80026f8:	f7fd ff6a 	bl	80005d0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x3a6>
 8002700:	f7fd ff66 	bl	80005d0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3a6>
 8002712:	2303      	movs	r3, #3
 8002714:	e07c      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ee      	bne.n	8002700 <HAL_RCC_OscConfig+0x390>
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x3c4>
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d068      	beq.n	800280e <HAL_RCC_OscConfig+0x49e>
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d060      	beq.n	800280a <HAL_RCC_OscConfig+0x49a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d145      	bne.n	80027dc <HAL_RCC_OscConfig+0x46c>
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4b0>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f7fd ff3b 	bl	80005d0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x400>
 800275e:	f7fd ff37 	bl	80005d0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x400>
 800276c:	2303      	movs	r3, #3
 800276e:	e04f      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x3ee>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	019b      	lsls	r3, r3, #6
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	061b      	lsls	r3, r3, #24
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	071b      	lsls	r3, r3, #28
 80027a8:	491b      	ldr	r1, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x4b0>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f7fd ff0c 	bl	80005d0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x45e>
 80027bc:	f7fd ff08 	bl	80005d0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x45e>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e020      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x44c>
 80027da:	e018      	b.n	800280e <HAL_RCC_OscConfig+0x49e>
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x4b0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f7fd fef5 	bl	80005d0 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x48c>
 80027ea:	f7fd fef1 	bl	80005d0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x48c>
 80027f8:	2303      	movs	r3, #3
 80027fa:	e009      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x4a8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x47a>
 8002808:	e001      	b.n	800280e <HAL_RCC_OscConfig+0x49e>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x4a0>
 800280e:	2300      	movs	r3, #0
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000
 8002820:	42470060 	.word	0x42470060

08002824 <HAL_SD_Init>:
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_SD_Init+0x12>
 8002832:	2301      	movs	r3, #1
 8002834:	e01d      	b.n	8002872 <HAL_SD_Init+0x4e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_SD_Init+0x2a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f008 fd8b 	bl	800b364 <HAL_SD_MspInit>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f810 	bl	800287c <HAL_SD_InitCard>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002870:	2300      	movs	r3, #0
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_SD_InitCard>:
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b08e      	sub	sp, #56	; 0x38
 8002880:	af04      	add	r7, sp, #16
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	2376      	movs	r3, #118	; 0x76
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681d      	ldr	r5, [r3, #0]
 80028a4:	466c      	mov	r4, sp
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b8:	4628      	mov	r0, r5
 80028ba:	f001 fd13 	bl	80042e4 <SDIO_Init>
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_SD_InitCard+0xb4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 fd54 	bl	8004376 <SDIO_PowerState_ON>
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_SD_InitCard+0xb4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	2002      	movs	r0, #2
 80028d6:	f7fd fe87 	bl	80005e8 <HAL_Delay>
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fee6 	bl	80036ac <SD_PowerON>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_SD_InitCard+0x84>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	639a      	str	r2, [r3, #56]	; 0x38
 80028fc:	2301      	movs	r3, #1
 80028fe:	e013      	b.n	8002928 <HAL_SD_InitCard+0xac>
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fe0a 	bl	800351a <SD_InitCard>
 8002906:	6278      	str	r0, [r7, #36]	; 0x24
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_SD_InitCard+0xaa>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_SD_InitCard+0xac>
 8002926:	2300      	movs	r3, #0
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bdb0      	pop	{r4, r5, r7, pc}
 8002930:	422580a0 	.word	0x422580a0

08002934 <HAL_SD_ReadBlocks>:
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08f      	sub	sp, #60	; 0x3c
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	f7fd fe43 	bl	80005d0 <HAL_GetTick>
 800294a:	62b8      	str	r0, [r7, #40]	; 0x28
 800294c:	2300      	movs	r3, #0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_SD_ReadBlocks+0x36>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
 8002966:	2301      	movs	r3, #1
 8002968:	e176      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 8169 	bne.w	8002c4a <HAL_SD_ReadBlocks+0x316>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	441a      	add	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	429a      	cmp	r2, r3
 800298a:	d907      	bls.n	800299c <HAL_SD_ReadBlocks+0x68>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
 8002998:	2301      	movs	r3, #1
 800299a:	e15d      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <HAL_SD_ReadBlocks+0x86>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fd6b 	bl	800449e <SDMMC_CmdBlockLength>
 80029c8:	6378      	str	r0, [r7, #52]	; 0x34
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_SD_ReadBlocks+0xbe>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80029ee:	2301      	movs	r3, #1
 80029f0:	e132      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	2390      	movs	r3, #144	; 0x90
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2302      	movs	r3, #2
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f107 0210 	add.w	r2, r7, #16
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 fd14 	bl	8004446 <SDIO_ConfigData>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d90a      	bls.n	8002a3a <HAL_SD_ReadBlocks+0x106>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2202      	movs	r2, #2
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fd7c 	bl	800452e <SDMMC_CmdReadMultiBlock>
 8002a36:	6378      	str	r0, [r7, #52]	; 0x34
 8002a38:	e009      	b.n	8002a4e <HAL_SD_ReadBlocks+0x11a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 fd4d 	bl	80044e6 <SDMMC_CmdReadSingleBlock>
 8002a4c:	6378      	str	r0, [r7, #52]	; 0x34
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d04a      	beq.n	8002aea <HAL_SD_ReadBlocks+0x1b6>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0f0      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <HAL_SD_ReadBlocks+0x17e>
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
 8002a88:	e00d      	b.n	8002aa6 <HAL_SD_ReadBlocks+0x172>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	18d4      	adds	r4, r2, r3
 8002a96:	4608      	mov	r0, r1
 8002a98:	f001 fc4f 	bl	800433a <SDIO_ReadFIFO>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	6023      	str	r3, [r4, #0]
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d9ee      	bls.n	8002a8a <HAL_SD_ReadBlocks+0x156>
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	3320      	adds	r3, #32
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_SD_ReadBlocks+0x194>
 8002ab8:	f7fd fd8a 	bl	80005d0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d810      	bhi.n	8002aea <HAL_SD_ReadBlocks+0x1b6>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0b6      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0be      	beq.n	8002a76 <HAL_SD_ReadBlocks+0x142>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d020      	beq.n	8002b48 <HAL_SD_ReadBlocks+0x214>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d91d      	bls.n	8002b48 <HAL_SD_ReadBlocks+0x214>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d019      	beq.n	8002b48 <HAL_SD_ReadBlocks+0x214>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 fd75 	bl	8004608 <SDMMC_CmdStopTransfer>
 8002b1e:	6378      	str	r0, [r7, #52]	; 0x34
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_SD_ReadBlocks+0x214>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002b44:	2301      	movs	r3, #1
 8002b46:	e087      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <HAL_SD_ReadBlocks+0x244>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	f043 0208 	orr.w	r2, r3, #8
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002b74:	2301      	movs	r3, #1
 8002b76:	e06f      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_SD_ReadBlocks+0x274>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f043 0202 	orr.w	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e057      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d037      	beq.n	8002c26 <HAL_SD_ReadBlocks+0x2f2>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e03f      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fbac 	bl	800433a <SDIO_ReadFIFO>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	3304      	adds	r3, #4
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_SD_ReadBlocks+0x2d0>
 8002bf4:	f7fd fcec 	bl	80005d0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d810      	bhi.n	8002c26 <HAL_SD_ReadBlocks+0x2f2>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002c22:	2301      	movs	r3, #1
 8002c24:	e018      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1d1      	bne.n	8002bd8 <HAL_SD_ReadBlocks+0x2a4>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002c46:	2300      	movs	r3, #0
 8002c48:	e006      	b.n	8002c58 <HAL_SD_ReadBlocks+0x324>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
 8002c56:	2301      	movs	r3, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	373c      	adds	r7, #60	; 0x3c
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}

08002c60 <HAL_SD_WriteBlocks>:
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
 8002c72:	f7fd fcad 	bl	80005d0 <HAL_GetTick>
 8002c76:	62b8      	str	r0, [r7, #40]	; 0x28
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_SD_WriteBlocks+0x36>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
 8002c92:	2301      	movs	r3, #1
 8002c94:	e147      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	f040 813a 	bne.w	8002f18 <HAL_SD_WriteBlocks+0x2b8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	441a      	add	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d907      	bls.n	8002cc8 <HAL_SD_WriteBlocks+0x68>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e12e      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <HAL_SD_WriteBlocks+0x86>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	025b      	lsls	r3, r3, #9
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fbd5 	bl	800449e <SDMMC_CmdBlockLength>
 8002cf4:	6378      	str	r0, [r7, #52]	; 0x34
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_SD_WriteBlocks+0xbe>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e103      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d90a      	bls.n	8002d3a <HAL_SD_WriteBlocks+0xda>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fc44 	bl	80045be <SDMMC_CmdWriteMultiBlock>
 8002d36:	6378      	str	r0, [r7, #52]	; 0x34
 8002d38:	e009      	b.n	8002d4e <HAL_SD_WriteBlocks+0xee>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 fc15 	bl	8004576 <SDMMC_CmdWriteSingleBlock>
 8002d4c:	6378      	str	r0, [r7, #52]	; 0x34
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_SD_WriteBlocks+0x116>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0d7      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	025b      	lsls	r3, r3, #9
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	2390      	movs	r3, #144	; 0x90
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f107 0210 	add.w	r2, r7, #16
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fb52 	bl	8004446 <SDIO_ConfigData>
 8002da2:	e037      	b.n	8002e14 <HAL_SD_WriteBlocks+0x1b4>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_SD_WriteBlocks+0x17c>
 8002db2:	2300      	movs	r3, #0
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
 8002db6:	e00b      	b.n	8002dd0 <HAL_SD_WriteBlocks+0x170>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f001 fac5 	bl	8004354 <SDIO_WriteFIFO>
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	3301      	adds	r3, #1
 8002dce:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	2b07      	cmp	r3, #7
 8002dd4:	d9f0      	bls.n	8002db8 <HAL_SD_WriteBlocks+0x158>
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	3320      	adds	r3, #32
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_SD_WriteBlocks+0x192>
 8002de2:	f7fd fbf5 	bl	80005d0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d810      	bhi.n	8002e14 <HAL_SD_WriteBlocks+0x1b4>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002e10:	2303      	movs	r3, #3
 8002e12:	e088      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0c0      	beq.n	8002da4 <HAL_SD_WriteBlocks+0x144>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_SD_WriteBlocks+0x212>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d91d      	bls.n	8002e72 <HAL_SD_WriteBlocks+0x212>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d019      	beq.n	8002e72 <HAL_SD_WriteBlocks+0x212>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fbe0 	bl	8004608 <SDMMC_CmdStopTransfer>
 8002e48:	6378      	str	r0, [r7, #52]	; 0x34
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_SD_WriteBlocks+0x212>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e059      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_SD_WriteBlocks+0x242>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_SD_WriteBlocks+0x272>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e029      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_SD_WriteBlocks+0x2a2>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002efe:	2301      	movs	r3, #1
 8002f00:	e011      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002f14:	2300      	movs	r3, #0
 8002f16:	e006      	b.n	8002f26 <HAL_SD_WriteBlocks+0x2c6>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
 8002f24:	2301      	movs	r3, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	3738      	adds	r7, #56	; 0x38
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SD_GetCardCSD>:
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	705a      	strb	r2, [r3, #1]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	709a      	strb	r2, [r3, #2]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	70da      	strb	r2, [r3, #3]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	711a      	strb	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	715a      	strb	r2, [r3, #5]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	0e1b      	lsrs	r3, r3, #24
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	80da      	strh	r2, [r3, #6]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	88db      	ldrh	r3, [r3, #6]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	80da      	strh	r2, [r3, #6]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	721a      	strb	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	09db      	lsrs	r3, r3, #7
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	725a      	strb	r2, [r3, #9]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	729a      	strb	r2, [r3, #10]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	72da      	strb	r2, [r3, #11]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	731a      	strb	r2, [r3, #12]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2200      	movs	r2, #0
 800303a:	735a      	strb	r2, [r3, #13]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 8087 	bne.w	8003154 <HAL_SD_GetCardCSD+0x226>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	611a      	str	r2, [r3, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003056:	b2db      	uxtb	r3, r3
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	431a      	orrs	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	611a      	str	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306c:	0e1b      	lsrs	r3, r3, #24
 800306e:	b2db      	uxtb	r3, r3
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	431a      	orrs	r2, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b2da      	uxtb	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	751a      	strb	r2, [r3, #20]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	b2da      	uxtb	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	755a      	strb	r2, [r3, #21]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	759a      	strb	r2, [r3, #22]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	75da      	strb	r2, [r3, #23]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0306 	and.w	r3, r3, #6
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	761a      	strb	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	7e1b      	ldrb	r3, [r3, #24]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	09db      	lsrs	r3, r3, #7
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	761a      	strb	r2, [r3, #24]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3302      	adds	r3, #2
 8003114:	2201      	movs	r2, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800311e:	fb02 f203 	mul.w	r2, r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	7a1b      	ldrb	r3, [r3, #8]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	2301      	movs	r3, #1
 8003130:	fa03 f202 	lsl.w	r2, r3, r2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	; 0x58
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003140:	0a52      	lsrs	r2, r2, #9
 8003142:	fb02 f203 	mul.w	r2, r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	; 0x5c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003150:	661a      	str	r2, [r3, #96]	; 0x60
 8003152:	e04d      	b.n	80031f0 <HAL_SD_GetCardCSD+0x2c2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	2b01      	cmp	r3, #1
 800315a:	d138      	bne.n	80031ce <HAL_SD_GetCardCSD+0x2a0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003160:	b2db      	uxtb	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	611a      	str	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003174:	0e1b      	lsrs	r3, r3, #24
 8003176:	b2db      	uxtb	r3, r3
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	431a      	orrs	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	611a      	str	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	b2db      	uxtb	r3, r3
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	431a      	orrs	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	611a      	str	r2, [r3, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	029a      	lsls	r2, r3, #10
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c2:	659a      	str	r2, [r3, #88]	; 0x58
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60
 80031cc:	e010      	b.n	80031f0 <HAL_SD_GetCardCSD+0x2c2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0c1      	b.n	8003374 <HAL_SD_GetCardCSD+0x446>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	765a      	strb	r2, [r3, #25]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800320c:	b2da      	uxtb	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	769a      	strb	r2, [r3, #26]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003216:	b2db      	uxtb	r3, r3
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	7e9b      	ldrb	r3, [r3, #26]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4313      	orrs	r3, r2
 800322e:	b2da      	uxtb	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	769a      	strb	r2, [r3, #26]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323c:	b2da      	uxtb	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	76da      	strb	r2, [r3, #27]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	b2db      	uxtb	r3, r3
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	09db      	lsrs	r3, r3, #7
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	771a      	strb	r2, [r3, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	775a      	strb	r2, [r3, #29]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	779a      	strb	r2, [r3, #30]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	b2da      	uxtb	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	77da      	strb	r2, [r3, #31]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b2db      	uxtb	r3, r3
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	7fdb      	ldrb	r3, [r3, #31]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4313      	orrs	r3, r2
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	77da      	strb	r2, [r3, #31]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f883 2020 	strb.w	r2, [r3, #32]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	09db      	lsrs	r3, r3, #7
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	b2da      	uxtb	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	b2da      	uxtb	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	b2db      	uxtb	r3, r3
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003362:	b2da      	uxtb	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003372:	2300      	movs	r3, #0
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_SD_GetCardInfo>:
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	615a      	str	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	619a      	str	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	61da      	str	r2, [r3, #28]
 80033ca:	2300      	movs	r3, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_SD_ConfigWideBusOperation>:
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b08e      	sub	sp, #56	; 0x38
 80033dc:	af04      	add	r7, sp, #16
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d02e      	beq.n	8003454 <HAL_SD_ConfigWideBusOperation+0x7c>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d106      	bne.n	800340c <HAL_SD_ConfigWideBusOperation+0x34>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
 800340a:	e029      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d10a      	bne.n	800342a <HAL_SD_ConfigWideBusOperation+0x52>
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa1b 	bl	8003850 <SD_WideBus_Enable>
 800341a:	6278      	str	r0, [r7, #36]	; 0x24
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
 8003428:	e01a      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_SD_ConfigWideBusOperation+0x6e>
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fa5a 	bl	80038ea <SD_WideBus_Disable>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
 8003444:	e00c      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
 8003452:	e005      	b.n	8003460 <HAL_SD_ConfigWideBusOperation+0x88>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_SD_ConfigWideBusOperation+0xa6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800347a:	2301      	movs	r3, #1
 800347c:	e024      	b.n	80034c8 <HAL_SD_ConfigWideBusOperation+0xf0>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681d      	ldr	r5, [r3, #0]
 80034a4:	466c      	mov	r4, sp
 80034a6:	f107 0318 	add.w	r3, r7, #24
 80034aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 ff13 	bl	80042e4 <SDIO_Init>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80034c6:	2300      	movs	r3, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}

080034d0 <HAL_SD_GetCardState>:
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	2304      	movs	r3, #4
 80034da:	75fb      	strb	r3, [r7, #23]
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f986 	bl	80037fc <SD_SendStatus>
 80034f0:	6138      	str	r0, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_SD_GetCardState+0x34>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0a5b      	lsrs	r3, r3, #9
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	75fb      	strb	r3, [r7, #23]
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <SD_InitCard>:
 800351a:	b5b0      	push	{r4, r5, r7, lr}
 800351c:	b094      	sub	sp, #80	; 0x50
 800351e:	af04      	add	r7, sp, #16
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	2300      	movs	r3, #0
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003526:	2301      	movs	r3, #1
 8003528:	81fb      	strh	r3, [r7, #14]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 ff2f 	bl	8004392 <SDIO_GetPowerState>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <SD_InitCard+0x26>
 800353a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800353e:	e0b1      	b.n	80036a4 <SD_InitCard+0x18a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	2b03      	cmp	r3, #3
 8003546:	d02f      	beq.n	80035a8 <SD_InitCard+0x8e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f975 	bl	800483c <SDMMC_CmdSendCID>
 8003552:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <SD_InitCard+0x44>
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	e0a2      	b.n	80036a4 <SD_InitCard+0x18a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f000 ff59 	bl	800441c <SDIO_GetResponse>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	675a      	str	r2, [r3, #116]	; 0x74
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2104      	movs	r1, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f000 ff50 	bl	800441c <SDIO_GetResponse>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	679a      	str	r2, [r3, #120]	; 0x78
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2108      	movs	r1, #8
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ff47 	bl	800441c <SDIO_GetResponse>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	67da      	str	r2, [r3, #124]	; 0x7c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	210c      	movs	r1, #12
 800359a:	4618      	mov	r0, r3
 800359c:	f000 ff3e 	bl	800441c <SDIO_GetResponse>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d00d      	beq.n	80035cc <SD_InitCard+0xb2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f107 020e 	add.w	r2, r7, #14
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 f97f 	bl	80048be <SDMMC_CmdSetRelAdd>
 80035c0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <SD_InitCard+0xb2>
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	e06b      	b.n	80036a4 <SD_InitCard+0x18a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d036      	beq.n	8003642 <SD_InitCard+0x128>
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	651a      	str	r2, [r3, #80]	; 0x50
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f001 f947 	bl	800487c <SDMMC_CmdSendCSD>
 80035ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80035f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <SD_InitCard+0xe0>
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	e054      	b.n	80036a4 <SD_InitCard+0x18a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 ff0b 	bl	800441c <SDIO_GetResponse>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	665a      	str	r2, [r3, #100]	; 0x64
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2104      	movs	r1, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f000 ff02 	bl	800441c <SDIO_GetResponse>
 8003618:	4602      	mov	r2, r0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	669a      	str	r2, [r3, #104]	; 0x68
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2108      	movs	r1, #8
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fef9 	bl	800441c <SDIO_GetResponse>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	210c      	movs	r1, #12
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fef0 	bl	800441c <SDIO_GetResponse>
 800363c:	4602      	mov	r2, r0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	671a      	str	r2, [r3, #112]	; 0x70
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2104      	movs	r1, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fee7 	bl	800441c <SDIO_GetResponse>
 800364e:	4603      	mov	r3, r0
 8003650:	0d1a      	lsrs	r2, r3, #20
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4619      	mov	r1, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fc66 	bl	8002f2e <HAL_SD_GetCardCSD>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	461a      	mov	r2, r3
 8003672:	4623      	mov	r3, r4
 8003674:	4608      	mov	r0, r1
 8003676:	f000 ffeb 	bl	8004650 <SDMMC_CmdSelDesel>
 800367a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <SD_InitCard+0x16c>
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	e00e      	b.n	80036a4 <SD_InitCard+0x18a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681d      	ldr	r5, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	466c      	mov	r4, sp
 800368e:	f103 0210 	add.w	r2, r3, #16
 8003692:	ca07      	ldmia	r2, {r0, r1, r2}
 8003694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003698:	3304      	adds	r3, #4
 800369a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369c:	4628      	mov	r0, r5
 800369e:	f000 fe21 	bl	80042e4 <SDIO_Init>
 80036a2:	2300      	movs	r3, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	3740      	adds	r7, #64	; 0x40
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bdb0      	pop	{r4, r5, r7, pc}

080036ac <SD_PowerON>:
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 ffe6 	bl	800469a <SDMMC_CmdGoIdleState>
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <SD_PowerON+0x2e>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	e08c      	b.n	80037f4 <SD_PowerON+0x148>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fffb 	bl	80046da <SDMMC_CmdOperCond>
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03d      	beq.n	8003768 <SD_PowerON+0xbc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	649a      	str	r2, [r3, #72]	; 0x48
 80036f2:	e032      	b.n	800375a <SD_PowerON+0xae>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036fe:	4293      	cmp	r3, r2
 8003700:	d102      	bne.n	8003708 <SD_PowerON+0x5c>
 8003702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003706:	e075      	b.n	80037f4 <SD_PowerON+0x148>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f804 	bl	800471c <SDMMC_CmdAppCommand>
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <SD_PowerON+0x76>
 800371c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003720:	e068      	b.n	80037f4 <SD_PowerON+0x148>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f81b 	bl	8004764 <SDMMC_CmdAppOperCommand>
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <SD_PowerON+0x90>
 8003736:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800373a:	e05b      	b.n	80037f4 <SD_PowerON+0x148>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fe6a 	bl	800441c <SDIO_GetResponse>
 8003748:	6178      	str	r0, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	0fdb      	lsrs	r3, r3, #31
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <SD_PowerON+0xaa>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <SD_PowerON+0xac>
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0c9      	beq.n	80036f4 <SD_PowerON+0x48>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
 8003766:	e044      	b.n	80037f2 <SD_PowerON+0x146>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	649a      	str	r2, [r3, #72]	; 0x48
 800376e:	e031      	b.n	80037d4 <SD_PowerON+0x128>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	60ba      	str	r2, [r7, #8]
 8003776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377a:	4293      	cmp	r3, r2
 800377c:	d102      	bne.n	8003784 <SD_PowerON+0xd8>
 800377e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003782:	e037      	b.n	80037f4 <SD_PowerON+0x148>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f000 ffc6 	bl	800471c <SDMMC_CmdAppCommand>
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SD_PowerON+0xf0>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	e02b      	b.n	80037f4 <SD_PowerON+0x148>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 ffdd 	bl	8004764 <SDMMC_CmdAppOperCommand>
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SD_PowerON+0x10a>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e01e      	b.n	80037f4 <SD_PowerON+0x148>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fe2d 	bl	800441c <SDIO_GetResponse>
 80037c2:	6178      	str	r0, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	0fdb      	lsrs	r3, r3, #31
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <SD_PowerON+0x124>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <SD_PowerON+0x126>
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ca      	beq.n	8003770 <SD_PowerON+0xc4>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <SD_PowerON+0x140>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ea:	e002      	b.n	80037f2 <SD_PowerON+0x146>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
 80037f2:	2300      	movs	r3, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <SD_SendStatus>:
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <SD_SendStatus+0x1a>
 8003810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003814:	e018      	b.n	8003848 <SD_SendStatus+0x4c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f001 f86e 	bl	8004904 <SDMMC_CmdSendStatus>
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <SD_SendStatus+0x38>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	e009      	b.n	8003848 <SD_SendStatus+0x4c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fdee 	bl	800441c <SDIO_GetResponse>
 8003840:	4602      	mov	r2, r0
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	2300      	movs	r3, #0
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <SD_WideBus_Enable>:
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fdd6 	bl	800441c <SDIO_GetResponse>
 8003870:	4603      	mov	r3, r0
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387a:	d102      	bne.n	8003882 <SD_WideBus_Enable+0x32>
 800387c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003880:	e02f      	b.n	80038e2 <SD_WideBus_Enable+0x92>
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f87b 	bl	8003984 <SD_FindSCR>
 800388e:	6178      	str	r0, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <SD_WideBus_Enable+0x4a>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	e023      	b.n	80038e2 <SD_WideBus_Enable+0x92>
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01c      	beq.n	80038de <SD_WideBus_Enable+0x8e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 ff33 	bl	800471c <SDMMC_CmdAppCommand>
 80038b6:	6178      	str	r0, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <SD_WideBus_Enable+0x72>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	e00f      	b.n	80038e2 <SD_WideBus_Enable+0x92>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 ff70 	bl	80047ae <SDMMC_CmdBusWidth>
 80038ce:	6178      	str	r0, [r7, #20]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <SD_WideBus_Enable+0x8a>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	e003      	b.n	80038e2 <SD_WideBus_Enable+0x92>
 80038da:	2300      	movs	r3, #0
 80038dc:	e001      	b.n	80038e2 <SD_WideBus_Enable+0x92>
 80038de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <SD_WideBus_Disable>:
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fd89 	bl	800441c <SDIO_GetResponse>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003914:	d102      	bne.n	800391c <SD_WideBus_Disable+0x32>
 8003916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800391a:	e02f      	b.n	800397c <SD_WideBus_Disable+0x92>
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f82e 	bl	8003984 <SD_FindSCR>
 8003928:	6178      	str	r0, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <SD_WideBus_Disable+0x4a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e023      	b.n	800397c <SD_WideBus_Disable+0x92>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01c      	beq.n	8003978 <SD_WideBus_Disable+0x8e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f000 fee6 	bl	800471c <SDMMC_CmdAppCommand>
 8003950:	6178      	str	r0, [r7, #20]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <SD_WideBus_Disable+0x72>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	e00f      	b.n	800397c <SD_WideBus_Disable+0x92>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f000 ff23 	bl	80047ae <SDMMC_CmdBusWidth>
 8003968:	6178      	str	r0, [r7, #20]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <SD_WideBus_Disable+0x8a>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	e003      	b.n	800397c <SD_WideBus_Disable+0x92>
 8003974:	2300      	movs	r3, #0
 8003976:	e001      	b.n	800397c <SD_WideBus_Disable+0x92>
 8003978:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SD_FindSCR>:
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b08f      	sub	sp, #60	; 0x3c
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
 8003992:	f7fc fe1d 	bl	80005d0 <HAL_GetTick>
 8003996:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003998:	2300      	movs	r3, #0
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2108      	movs	r1, #8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fd77 	bl	800449e <SDMMC_CmdBlockLength>
 80039b0:	6338      	str	r0, [r7, #48]	; 0x30
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <SD_FindSCR+0x38>
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	e0a8      	b.n	8003b0e <SD_FindSCR+0x18a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 fea7 	bl	800471c <SDMMC_CmdAppCommand>
 80039ce:	6338      	str	r0, [r7, #48]	; 0x30
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SD_FindSCR+0x56>
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	e099      	b.n	8003b0e <SD_FindSCR+0x18a>
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	2308      	movs	r3, #8
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	2330      	movs	r3, #48	; 0x30
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	2301      	movs	r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f107 0214 	add.w	r2, r7, #20
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd21 	bl	8004446 <SDIO_ConfigData>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fef4 	bl	80047f6 <SDMMC_CmdSendSCR>
 8003a0e:	6338      	str	r0, [r7, #48]	; 0x30
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d022      	beq.n	8003a5c <SD_FindSCR+0xd8>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	e079      	b.n	8003b0e <SD_FindSCR+0x18a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <SD_FindSCR+0xc2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f107 020c 	add.w	r2, r7, #12
 8003a34:	18d4      	adds	r4, r2, r3
 8003a36:	4608      	mov	r0, r1
 8003a38:	f000 fc7f 	bl	800433a <SDIO_ReadFIFO>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	3301      	adds	r3, #1
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
 8003a46:	f7fc fdc3 	bl	80005d0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d102      	bne.n	8003a5c <SD_FindSCR+0xd8>
 8003a56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a5a:	e058      	b.n	8003b0e <SD_FindSCR+0x18a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a62:	f240 432a 	movw	r3, #1066	; 0x42a
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0d6      	beq.n	8003a1a <SD_FindSCR+0x96>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <SD_FindSCR+0x102>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
 8003a82:	2308      	movs	r3, #8
 8003a84:	e043      	b.n	8003b0e <SD_FindSCR+0x18a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <SD_FindSCR+0x11c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e036      	b.n	8003b0e <SD_FindSCR+0x18a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <SD_FindSCR+0x136>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	e029      	b.n	8003b0e <SD_FindSCR+0x18a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	061a      	lsls	r2, r3, #24
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ada:	ea42 0103 	orr.w	r1, r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0e1a      	lsrs	r2, r3, #24
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	061a      	lsls	r2, r3, #24
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003af6:	431a      	orrs	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b00:	431a      	orrs	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	431a      	orrs	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	373c      	adds	r7, #60	; 0x3c
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}

08003b16 <HAL_SPI_Init>:
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_SPI_Init+0x12>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e056      	b.n	8003bd6 <HAL_SPI_Init+0xc0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_SPI_Init+0x32>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f007 fc76 	bl	800b434 <HAL_SPI_MspInit>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	f003 0104 	and.w	r1, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc4:	61da      	str	r2, [r3, #28]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_SPI_Transmit>:
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_SPI_Transmit+0x22>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e11e      	b.n	8003e3e <HAL_SPI_Transmit+0x260>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c08:	f7fc fce2 	bl	80005d0 <HAL_GetTick>
 8003c0c:	61b8      	str	r0, [r7, #24]
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	82fb      	strh	r3, [r7, #22]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d002      	beq.n	8003c24 <HAL_SPI_Transmit+0x46>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e103      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0x52>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <HAL_SPI_Transmit+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e0fa      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	869a      	strh	r2, [r3, #52]	; 0x34
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d107      	bne.n	8003c8e <HAL_SPI_Transmit+0xb0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d007      	beq.n	8003cac <HAL_SPI_Transmit+0xce>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb4:	d14b      	bne.n	8003d4e <HAL_SPI_Transmit+0x170>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0xe6>
 8003cbe:	8afb      	ldrh	r3, [r7, #22]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13e      	bne.n	8003d42 <HAL_SPI_Transmit+0x164>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60da      	str	r2, [r3, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ce8:	e02b      	b.n	8003d42 <HAL_SPI_Transmit+0x164>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d112      	bne.n	8003d1e <HAL_SPI_Transmit+0x140>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d1c:	e011      	b.n	8003d42 <HAL_SPI_Transmit+0x164>
 8003d1e:	f7fc fc57 	bl	80005d0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d803      	bhi.n	8003d36 <HAL_SPI_Transmit+0x158>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_Transmit+0x15e>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x164>
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e074      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ce      	bne.n	8003cea <HAL_SPI_Transmit+0x10c>
 8003d4c:	e04c      	b.n	8003de8 <HAL_SPI_Transmit+0x20a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x17e>
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d140      	bne.n	8003dde <HAL_SPI_Transmit+0x200>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d82:	e02c      	b.n	8003dde <HAL_SPI_Transmit+0x200>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d113      	bne.n	8003dba <HAL_SPI_Transmit+0x1dc>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003db8:	e011      	b.n	8003dde <HAL_SPI_Transmit+0x200>
 8003dba:	f7fc fc09 	bl	80005d0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d803      	bhi.n	8003dd2 <HAL_SPI_Transmit+0x1f4>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d102      	bne.n	8003dd8 <HAL_SPI_Transmit+0x1fa>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <HAL_SPI_Transmit+0x200>
 8003dd8:	2303      	movs	r3, #3
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e026      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1cd      	bne.n	8003d84 <HAL_SPI_Transmit+0x1a6>
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	6839      	ldr	r1, [r7, #0]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fa37 	bl	8004260 <SPI_EndRxTxTransaction>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_Transmit+0x220>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_SPI_Transmit+0x23e>
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_SPI_Transmit+0x24c>
 8003e24:	2301      	movs	r3, #1
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e000      	b.n	8003e2c <HAL_SPI_Transmit+0x24e>
 8003e2a:	bf00      	nop
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e3c:	7ffb      	ldrb	r3, [r7, #31]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SPI_TransmitReceive>:
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08c      	sub	sp, #48	; 0x30
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	2301      	movs	r3, #1
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x26>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e18a      	b.n	8004182 <HAL_SPI_TransmitReceive+0x33c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e74:	f7fc fbac 	bl	80005d0 <HAL_GetTick>
 8003e78:	6278      	str	r0, [r7, #36]	; 0x24
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	837b      	strh	r3, [r7, #26]
 8003e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d00f      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x70>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9c:	d107      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x68>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_SPI_TransmitReceive+0x68>
 8003ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d003      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0x70>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb4:	e15b      	b.n	800416e <HAL_SPI_TransmitReceive+0x328>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x82>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x82>
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x8a>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ece:	e14e      	b.n	800416e <HAL_SPI_TransmitReceive+0x328>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d003      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x9e>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	887a      	ldrh	r2, [r7, #2]
 8003f06:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	869a      	strh	r2, [r3, #52]	; 0x34
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d007      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0xf2>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f40:	d178      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x1ee>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x10a>
 8003f4a:	8b7b      	ldrh	r3, [r7, #26]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d166      	bne.n	800401e <HAL_SPI_TransmitReceive+0x1d8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f74:	e053      	b.n	800401e <HAL_SPI_TransmitReceive+0x1d8>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d11b      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x176>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0x176>
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d113      	bne.n	8003fbc <HAL_SPI_TransmitReceive+0x176>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d119      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x1b8>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d014      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x1b8>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ffe:	f7fc fae7 	bl	80005d0 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800400a:	429a      	cmp	r2, r3
 800400c:	d807      	bhi.n	800401e <HAL_SPI_TransmitReceive+0x1d8>
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d003      	beq.n	800401e <HAL_SPI_TransmitReceive+0x1d8>
 8004016:	2303      	movs	r3, #3
 8004018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401c:	e0a7      	b.n	800416e <HAL_SPI_TransmitReceive+0x328>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1a6      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x130>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1a1      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x130>
 8004032:	e07c      	b.n	800412e <HAL_SPI_TransmitReceive+0x2e8>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x1fc>
 800403c:	8b7b      	ldrh	r3, [r7, #26]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d16b      	bne.n	800411a <HAL_SPI_TransmitReceive+0x2d4>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	86da      	strh	r2, [r3, #54]	; 0x36
 8004068:	e057      	b.n	800411a <HAL_SPI_TransmitReceive+0x2d4>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11c      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x26c>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d017      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x26c>
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d114      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x26c>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80040ae:	2300      	movs	r3, #0
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d119      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x2ae>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d014      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x2ae>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f0:	2301      	movs	r3, #1
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	f7fc fa6c 	bl	80005d0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004100:	429a      	cmp	r2, r3
 8004102:	d803      	bhi.n	800410c <HAL_SPI_TransmitReceive+0x2c6>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d102      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x2cc>
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <HAL_SPI_TransmitReceive+0x2d4>
 8004112:	2303      	movs	r3, #3
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004118:	e029      	b.n	800416e <HAL_SPI_TransmitReceive+0x328>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1a2      	bne.n	800406a <HAL_SPI_TransmitReceive+0x224>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d19d      	bne.n	800406a <HAL_SPI_TransmitReceive+0x224>
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f894 	bl	8004260 <SPI_EndRxTxTransaction>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <HAL_SPI_TransmitReceive+0x306>
 800413e:	2301      	movs	r3, #1
 8004140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
 800414a:	e010      	b.n	800416e <HAL_SPI_TransmitReceive+0x328>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_SPI_TransmitReceive+0x326>
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	e000      	b.n	800416e <HAL_SPI_TransmitReceive+0x328>
 800416c:	bf00      	nop
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800417e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004182:	4618      	mov	r0, r3
 8004184:	3730      	adds	r7, #48	; 0x30
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <SPI_WaitFlagStateUntilTimeout>:
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
 800419a:	e04c      	b.n	8004236 <SPI_WaitFlagStateUntilTimeout+0xac>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d048      	beq.n	8004236 <SPI_WaitFlagStateUntilTimeout+0xac>
 80041a4:	f7fc fa14 	bl	80005d0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d902      	bls.n	80041ba <SPI_WaitFlagStateUntilTimeout+0x30>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d13d      	bne.n	8004236 <SPI_WaitFlagStateUntilTimeout+0xac>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d2:	d111      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041dc:	d004      	beq.n	80041e8 <SPI_WaitFlagStateUntilTimeout+0x5e>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d107      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d10f      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004232:	2303      	movs	r3, #3
 8004234:	e00f      	b.n	8004256 <SPI_WaitFlagStateUntilTimeout+0xcc>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	429a      	cmp	r2, r3
 8004252:	d1a3      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0x12>
 8004254:	2300      	movs	r3, #0
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <SPI_EndRxTxTransaction>:
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <SPI_EndRxTxTransaction+0x7c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <SPI_EndRxTxTransaction+0x80>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0d5b      	lsrs	r3, r3, #21
 8004278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428a:	d112      	bne.n	80042b2 <SPI_EndRxTxTransaction+0x52>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff77 	bl	800418a <SPI_WaitFlagStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <SPI_EndRxTxTransaction+0x70>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <SPI_EndRxTxTransaction+0x72>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <SPI_EndRxTxTransaction+0x6e>
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d0f2      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x52>
 80042cc:	e000      	b.n	80042d0 <SPI_EndRxTxTransaction+0x70>
 80042ce:	bf00      	nop
 80042d0:	2300      	movs	r3, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000054 	.word	0x20000054
 80042e0:	165e9f81 	.word	0x165e9f81

080042e4 <SDIO_Init>:
 80042e4:	b084      	sub	sp, #16
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	f107 001c 	add.w	r0, r7, #28
 80042f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	431a      	orrs	r2, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	431a      	orrs	r2, r3
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	431a      	orrs	r2, r3
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	431a      	orrs	r2, r3
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	4313      	orrs	r3, r2
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800431e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	2300      	movs	r3, #0
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	b004      	add	sp, #16
 8004338:	4770      	bx	lr

0800433a <SDIO_ReadFIFO>:
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <SDIO_WriteFIFO>:
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004368:	2300      	movs	r3, #0
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <SDIO_PowerState_ON>:
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2203      	movs	r2, #3
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <SDIO_GetPowerState>:
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <SDIO_SendCommand>:
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80043e8:	f023 030f 	bic.w	r3, r3, #15
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	2300      	movs	r3, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <SDIO_GetCommandResponse>:
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <SDIO_GetResponse>:
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3314      	adds	r3, #20
 800442e:	461a      	mov	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4413      	add	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <SDIO_ConfigData>:
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	431a      	orrs	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	431a      	orrs	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004490:	2300      	movs	r3, #0
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <SDMMC_CmdBlockLength>:
 800449e:	b580      	push	{r7, lr}
 80044a0:	b088      	sub	sp, #32
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	2310      	movs	r3, #16
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff70 	bl	80043ae <SDIO_SendCommand>
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	2110      	movs	r1, #16
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fa63 	bl	80049a0 <SDMMC_GetCmdResp1>
 80044da:	61f8      	str	r0, [r7, #28]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <SDMMC_CmdReadSingleBlock>:
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b088      	sub	sp, #32
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	2311      	movs	r3, #17
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	2340      	movs	r3, #64	; 0x40
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff4c 	bl	80043ae <SDIO_SendCommand>
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	2111      	movs	r1, #17
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fa3f 	bl	80049a0 <SDMMC_GetCmdResp1>
 8004522:	61f8      	str	r0, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <SDMMC_CmdReadMultiBlock>:
 800452e:	b580      	push	{r7, lr}
 8004530:	b088      	sub	sp, #32
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	2312      	movs	r3, #18
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ff28 	bl	80043ae <SDIO_SendCommand>
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	2112      	movs	r1, #18
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa1b 	bl	80049a0 <SDMMC_GetCmdResp1>
 800456a:	61f8      	str	r0, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <SDMMC_CmdWriteSingleBlock>:
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	2318      	movs	r3, #24
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	2340      	movs	r3, #64	; 0x40
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff04 	bl	80043ae <SDIO_SendCommand>
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	2118      	movs	r1, #24
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9f7 	bl	80049a0 <SDMMC_GetCmdResp1>
 80045b2:	61f8      	str	r0, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <SDMMC_CmdWriteMultiBlock>:
 80045be:	b580      	push	{r7, lr}
 80045c0:	b088      	sub	sp, #32
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	2319      	movs	r3, #25
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fee0 	bl	80043ae <SDIO_SendCommand>
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	2119      	movs	r1, #25
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f9d3 	bl	80049a0 <SDMMC_GetCmdResp1>
 80045fa:	61f8      	str	r0, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <SDMMC_CmdStopTransfer>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	230c      	movs	r3, #12
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	2340      	movs	r3, #64	; 0x40
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff febc 	bl	80043ae <SDIO_SendCommand>
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <SDMMC_CmdStopTransfer+0x44>)
 8004638:	210c      	movs	r1, #12
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9b0 	bl	80049a0 <SDMMC_GetCmdResp1>
 8004640:	61f8      	str	r0, [r7, #28]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	05f5e100 	.word	0x05f5e100

08004650 <SDMMC_CmdSelDesel>:
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	e9c7 2300 	strd	r2, r3, [r7]
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	2307      	movs	r3, #7
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	2340      	movs	r3, #64	; 0x40
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	f107 0310 	add.w	r3, r7, #16
 800467a:	4619      	mov	r1, r3
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fe96 	bl	80043ae <SDIO_SendCommand>
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	2107      	movs	r1, #7
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f989 	bl	80049a0 <SDMMC_GetCmdResp1>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	; 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <SDMMC_CmdGoIdleState>:
 800469a:	b580      	push	{r7, lr}
 800469c:	b088      	sub	sp, #32
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fe73 	bl	80043ae <SDIO_SendCommand>
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f93f 	bl	800494c <SDMMC_GetCmdError>
 80046ce:	61f8      	str	r0, [r7, #28]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <SDMMC_CmdOperCond>:
 80046da:	b580      	push	{r7, lr}
 80046dc:	b088      	sub	sp, #32
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	2308      	movs	r3, #8
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fe52 	bl	80043ae <SDIO_SendCommand>
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fb10 	bl	8004d30 <SDMMC_GetCmdResp7>
 8004710:	61f8      	str	r0, [r7, #28]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <SDMMC_CmdAppCommand>:
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	2337      	movs	r3, #55	; 0x37
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	2340      	movs	r3, #64	; 0x40
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	f107 0308 	add.w	r3, r7, #8
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fe31 	bl	80043ae <SDIO_SendCommand>
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	2137      	movs	r1, #55	; 0x37
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f924 	bl	80049a0 <SDMMC_GetCmdResp1>
 8004758:	61f8      	str	r0, [r7, #28]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <SDMMC_CmdAppOperCommand>:
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	2329      	movs	r3, #41	; 0x29
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	2340      	movs	r3, #64	; 0x40
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff fe09 	bl	80043ae <SDIO_SendCommand>
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fa25 	bl	8004bec <SDMMC_GetCmdResp3>
 80047a2:	61f8      	str	r0, [r7, #28]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <SDMMC_CmdBusWidth>:
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b088      	sub	sp, #32
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	2306      	movs	r3, #6
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	2340      	movs	r3, #64	; 0x40
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fde8 	bl	80043ae <SDIO_SendCommand>
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	2106      	movs	r1, #6
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8db 	bl	80049a0 <SDMMC_GetCmdResp1>
 80047ea:	61f8      	str	r0, [r7, #28]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <SDMMC_CmdSendSCR>:
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b088      	sub	sp, #32
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	2333      	movs	r3, #51	; 0x33
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	2340      	movs	r3, #64	; 0x40
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fdc5 	bl	80043ae <SDIO_SendCommand>
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	2133      	movs	r1, #51	; 0x33
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8b8 	bl	80049a0 <SDMMC_GetCmdResp1>
 8004830:	61f8      	str	r0, [r7, #28]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <SDMMC_CmdSendCID>:
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	2300      	movs	r3, #0
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	2302      	movs	r3, #2
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	f107 0308 	add.w	r3, r7, #8
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fda2 	bl	80043ae <SDIO_SendCommand>
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f97e 	bl	8004b6c <SDMMC_GetCmdResp2>
 8004870:	61f8      	str	r0, [r7, #28]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <SDMMC_CmdSendCSD>:
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	2309      	movs	r3, #9
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	23c0      	movs	r3, #192	; 0xc0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fd81 	bl	80043ae <SDIO_SendCommand>
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f95d 	bl	8004b6c <SDMMC_GetCmdResp2>
 80048b2:	61f8      	str	r0, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4618      	mov	r0, r3
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <SDMMC_CmdSetRelAdd>:
 80048be:	b580      	push	{r7, lr}
 80048c0:	b088      	sub	sp, #32
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	2303      	movs	r3, #3
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	2340      	movs	r3, #64	; 0x40
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	f107 0308 	add.w	r3, r7, #8
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fd60 	bl	80043ae <SDIO_SendCommand>
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	2103      	movs	r1, #3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f9ae 	bl	8004c54 <SDMMC_GetCmdResp6>
 80048f8:	61f8      	str	r0, [r7, #28]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <SDMMC_CmdSendStatus>:
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	230d      	movs	r3, #13
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	2340      	movs	r3, #64	; 0x40
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fd3d 	bl	80043ae <SDIO_SendCommand>
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	210d      	movs	r1, #13
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f830 	bl	80049a0 <SDMMC_GetCmdResp1>
 8004940:	61f8      	str	r0, [r7, #28]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SDMMC_GetCmdError>:
 800494c:	b490      	push	{r4, r7}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <SDMMC_GetCmdError+0x4c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a10      	ldr	r2, [pc, #64]	; (800499c <SDMMC_GetCmdError+0x50>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0a5b      	lsrs	r3, r3, #9
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	fb02 f403 	mul.w	r4, r2, r3
 8004968:	4623      	mov	r3, r4
 800496a:	1e5c      	subs	r4, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <SDMMC_GetCmdError+0x2a>
 8004970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004974:	e00a      	b.n	800498c <SDMMC_GetCmdError+0x40>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f2      	beq.n	8004968 <SDMMC_GetCmdError+0x1c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
 800498a:	2300      	movs	r3, #0
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bc90      	pop	{r4, r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000054 	.word	0x20000054
 800499c:	10624dd3 	.word	0x10624dd3

080049a0 <SDMMC_GetCmdResp1>:
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	460b      	mov	r3, r1
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	72fb      	strb	r3, [r7, #11]
 80049ae:	4b6c      	ldr	r3, [pc, #432]	; (8004b60 <SDMMC_GetCmdResp1+0x1c0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6c      	ldr	r2, [pc, #432]	; (8004b64 <SDMMC_GetCmdResp1+0x1c4>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	fb02 f403 	mul.w	r4, r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	1e5c      	subs	r4, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <SDMMC_GetCmdResp1+0x2e>
 80049c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049cc:	e0c3      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f2      	beq.n	80049c0 <SDMMC_GetCmdResp1+0x20>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d004      	beq.n	80049f0 <SDMMC_GetCmdResp1+0x50>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2204      	movs	r2, #4
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
 80049ec:	2304      	movs	r3, #4
 80049ee:	e0b2      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <SDMMC_GetCmdResp1+0x66>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0a7      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fcfb 	bl	8004402 <SDIO_GetCommandResponse>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d001      	beq.n	8004a1a <SDMMC_GetCmdResp1+0x7a>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e09d      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
 8004a22:	2100      	movs	r1, #0
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fcf9 	bl	800441c <SDIO_GetResponse>
 8004a2a:	6178      	str	r0, [r7, #20]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4b4e      	ldr	r3, [pc, #312]	; (8004b68 <SDMMC_GetCmdResp1+0x1c8>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <SDMMC_GetCmdResp1+0x9a>
 8004a36:	2300      	movs	r3, #0
 8004a38:	e08d      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da02      	bge.n	8004a46 <SDMMC_GetCmdResp1+0xa6>
 8004a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a44:	e087      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <SDMMC_GetCmdResp1+0xb4>
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	e080      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <SDMMC_GetCmdResp1+0xc2>
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	e079      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <SDMMC_GetCmdResp1+0xd2>
 8004a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a70:	e071      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <SDMMC_GetCmdResp1+0xe2>
 8004a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a80:	e069      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <SDMMC_GetCmdResp1+0xf2>
 8004a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a90:	e061      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <SDMMC_GetCmdResp1+0x102>
 8004a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa0:	e059      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <SDMMC_GetCmdResp1+0x112>
 8004aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab0:	e051      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <SDMMC_GetCmdResp1+0x122>
 8004abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac0:	e049      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <SDMMC_GetCmdResp1+0x132>
 8004acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ad0:	e041      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <SDMMC_GetCmdResp1+0x142>
 8004adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae0:	e039      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <SDMMC_GetCmdResp1+0x152>
 8004aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004af0:	e031      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <SDMMC_GetCmdResp1+0x162>
 8004afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b00:	e029      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <SDMMC_GetCmdResp1+0x172>
 8004b0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b10:	e021      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <SDMMC_GetCmdResp1+0x182>
 8004b1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b20:	e019      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <SDMMC_GetCmdResp1+0x192>
 8004b2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b30:	e011      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <SDMMC_GetCmdResp1+0x1a2>
 8004b3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b40:	e009      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <SDMMC_GetCmdResp1+0x1b2>
 8004b4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004b50:	e001      	b.n	8004b56 <SDMMC_GetCmdResp1+0x1b6>
 8004b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b56:	4618      	mov	r0, r3
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd90      	pop	{r4, r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000054 	.word	0x20000054
 8004b64:	10624dd3 	.word	0x10624dd3
 8004b68:	fdffe008 	.word	0xfdffe008

08004b6c <SDMMC_GetCmdResp2>:
 8004b6c:	b490      	push	{r4, r7}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <SDMMC_GetCmdResp2+0x78>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <SDMMC_GetCmdResp2+0x7c>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	0a5b      	lsrs	r3, r3, #9
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	fb02 f403 	mul.w	r4, r2, r3
 8004b88:	4623      	mov	r3, r4
 8004b8a:	1e5c      	subs	r4, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <SDMMC_GetCmdResp2+0x2a>
 8004b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b94:	e020      	b.n	8004bd8 <SDMMC_GetCmdResp2+0x6c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f2      	beq.n	8004b88 <SDMMC_GetCmdResp2+0x1c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <SDMMC_GetCmdResp2+0x4c>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e00f      	b.n	8004bd8 <SDMMC_GetCmdResp2+0x6c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <SDMMC_GetCmdResp2+0x62>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e004      	b.n	8004bd8 <SDMMC_GetCmdResp2+0x6c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc90      	pop	{r4, r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000054 	.word	0x20000054
 8004be8:	10624dd3 	.word	0x10624dd3

08004bec <SDMMC_GetCmdResp3>:
 8004bec:	b490      	push	{r4, r7}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <SDMMC_GetCmdResp3+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <SDMMC_GetCmdResp3+0x64>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a5b      	lsrs	r3, r3, #9
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	fb02 f403 	mul.w	r4, r2, r3
 8004c08:	4623      	mov	r3, r4
 8004c0a:	1e5c      	subs	r4, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <SDMMC_GetCmdResp3+0x2a>
 8004c10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c14:	e015      	b.n	8004c42 <SDMMC_GetCmdResp3+0x56>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f2      	beq.n	8004c08 <SDMMC_GetCmdResp3+0x1c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <SDMMC_GetCmdResp3+0x4c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2204      	movs	r2, #4
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
 8004c34:	2304      	movs	r3, #4
 8004c36:	e004      	b.n	8004c42 <SDMMC_GetCmdResp3+0x56>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c40:	2300      	movs	r3, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc90      	pop	{r4, r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	20000054 	.word	0x20000054
 8004c50:	10624dd3 	.word	0x10624dd3

08004c54 <SDMMC_GetCmdResp6>:
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	72fb      	strb	r3, [r7, #11]
 8004c62:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <SDMMC_GetCmdResp6+0xd4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a31      	ldr	r2, [pc, #196]	; (8004d2c <SDMMC_GetCmdResp6+0xd8>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	0a5b      	lsrs	r3, r3, #9
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	fb02 f403 	mul.w	r4, r2, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	1e5c      	subs	r4, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <SDMMC_GetCmdResp6+0x30>
 8004c7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c82:	e04c      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f2      	beq.n	8004c76 <SDMMC_GetCmdResp6+0x22>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <SDMMC_GetCmdResp6+0x52>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	e03b      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <SDMMC_GetCmdResp6+0x68>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e030      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fba0 	bl	8004402 <SDIO_GetCommandResponse>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d001      	beq.n	8004cd0 <SDMMC_GetCmdResp6+0x7c>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e026      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cd8:	2100      	movs	r1, #0
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff fb9e 	bl	800441c <SDIO_GetResponse>
 8004ce0:	6178      	str	r0, [r7, #20]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <SDMMC_GetCmdResp6+0xa6>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e011      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <SDMMC_GetCmdResp6+0xb6>
 8004d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d08:	e009      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <SDMMC_GetCmdResp6+0xc6>
 8004d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d18:	e001      	b.n	8004d1e <SDMMC_GetCmdResp6+0xca>
 8004d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d1e:	4618      	mov	r0, r3
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd90      	pop	{r4, r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000054 	.word	0x20000054
 8004d2c:	10624dd3 	.word	0x10624dd3

08004d30 <SDMMC_GetCmdResp7>:
 8004d30:	b490      	push	{r4, r7}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <SDMMC_GetCmdResp7+0x6c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a18      	ldr	r2, [pc, #96]	; (8004da0 <SDMMC_GetCmdResp7+0x70>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	0a5b      	lsrs	r3, r3, #9
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	fb02 f403 	mul.w	r4, r2, r3
 8004d4c:	4623      	mov	r3, r4
 8004d4e:	1e5c      	subs	r4, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <SDMMC_GetCmdResp7+0x2a>
 8004d54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d58:	e01a      	b.n	8004d90 <SDMMC_GetCmdResp7+0x60>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f2      	beq.n	8004d4c <SDMMC_GetCmdResp7+0x1c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <SDMMC_GetCmdResp7+0x4c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2240      	movs	r2, #64	; 0x40
 8004d76:	639a      	str	r2, [r3, #56]	; 0x38
 8004d78:	2304      	movs	r3, #4
 8004d7a:	e009      	b.n	8004d90 <SDMMC_GetCmdResp7+0x60>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <SDMMC_GetCmdResp7+0x5e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc90      	pop	{r4, r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000054 	.word	0x20000054
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <disk_status>:
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <disk_status+0x30>)
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	79fa      	ldrb	r2, [r7, #7]
 8004dbc:	4905      	ldr	r1, [pc, #20]	; (8004dd4 <disk_status+0x30>)
 8004dbe:	440a      	add	r2, r1
 8004dc0:	7a12      	ldrb	r2, [r2, #8]
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4798      	blx	r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	73fb      	strb	r3, [r7, #15]
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000100 	.word	0x20000100

08004dd8 <disk_initialize>:
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	71fb      	strb	r3, [r7, #7]
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <disk_initialize+0x48>)
 8004dea:	5cd3      	ldrb	r3, [r2, r3]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d111      	bne.n	8004e14 <disk_initialize+0x3c>
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	4a0b      	ldr	r2, [pc, #44]	; (8004e20 <disk_initialize+0x48>)
 8004df4:	2101      	movs	r1, #1
 8004df6:	54d1      	strb	r1, [r2, r3]
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <disk_initialize+0x48>)
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	79fa      	ldrb	r2, [r7, #7]
 8004e06:	4906      	ldr	r1, [pc, #24]	; (8004e20 <disk_initialize+0x48>)
 8004e08:	440a      	add	r2, r1
 8004e0a:	7a12      	ldrb	r2, [r2, #8]
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4798      	blx	r3
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000100 	.word	0x20000100

08004e24 <disk_read>:
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <disk_read+0x3c>)
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	689c      	ldr	r4, [r3, #8]
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <disk_read+0x3c>)
 8004e44:	4413      	add	r3, r2
 8004e46:	7a18      	ldrb	r0, [r3, #8]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	47a0      	blx	r4
 8004e50:	4603      	mov	r3, r0
 8004e52:	75fb      	strb	r3, [r7, #23]
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	4618      	mov	r0, r3
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd90      	pop	{r4, r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000100 	.word	0x20000100

08004e64 <disk_write>:
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <disk_write+0x3c>)
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68dc      	ldr	r4, [r3, #12]
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <disk_write+0x3c>)
 8004e84:	4413      	add	r3, r2
 8004e86:	7a18      	ldrb	r0, [r3, #8]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	47a0      	blx	r4
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	4618      	mov	r0, r3
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000100 	.word	0x20000100

08004ea4 <disk_ioctl>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	603a      	str	r2, [r7, #0]
 8004eae:	71fb      	strb	r3, [r7, #7]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	71bb      	strb	r3, [r7, #6]
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	4a09      	ldr	r2, [pc, #36]	; (8004edc <disk_ioctl+0x38>)
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	79fa      	ldrb	r2, [r7, #7]
 8004ec2:	4906      	ldr	r1, [pc, #24]	; (8004edc <disk_ioctl+0x38>)
 8004ec4:	440a      	add	r2, r1
 8004ec6:	7a10      	ldrb	r0, [r2, #8]
 8004ec8:	79b9      	ldrb	r1, [r7, #6]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4798      	blx	r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000100 	.word	0x20000100

08004ee0 <ld_word>:
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	81fb      	strh	r3, [r7, #14]
 8004ef0:	89fb      	ldrh	r3, [r7, #14]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	b21a      	sxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	4313      	orrs	r3, r2
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	81fb      	strh	r3, [r7, #14]
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <ld_dword>:
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3303      	adds	r3, #3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	3202      	adds	r2, #2
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	3201      	adds	r2, #1
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <st_word>:
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	807b      	strh	r3, [r7, #2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	887a      	ldrh	r2, [r7, #2]
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <st_dword>:
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	0a1b      	lsrs	r3, r3, #8
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <mem_cpy>:
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <mem_cpy+0x36>
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	1c53      	adds	r3, r2, #1
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	6179      	str	r1, [r7, #20]
 800500a:	7812      	ldrb	r2, [r2, #0]
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3b01      	subs	r3, #1
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f1      	bne.n	8004ffe <mem_cpy+0x1a>
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <mem_set>:
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	617a      	str	r2, [r7, #20]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3b01      	subs	r3, #1
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f3      	bne.n	8005036 <mem_set+0x10>
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <mem_cmp>:
 800505a:	b480      	push	{r7}
 800505c:	b089      	sub	sp, #36	; 0x24
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	61fa      	str	r2, [r7, #28]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	61ba      	str	r2, [r7, #24]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	1acb      	subs	r3, r1, r3
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3b01      	subs	r3, #1
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <mem_cmp+0x40>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0eb      	beq.n	8005072 <mem_cmp+0x18>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	4618      	mov	r0, r3
 800509e:	3724      	adds	r7, #36	; 0x24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <chk_chr>:
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	e002      	b.n	80050ba <chk_chr+0x12>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <chk_chr+0x26>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d1f2      	bne.n	80050b4 <chk_chr+0xc>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <chk_lock>:
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e029      	b.n	8005148 <chk_lock+0x68>
 80050f4:	4a27      	ldr	r2, [pc, #156]	; (8005194 <chk_lock+0xb4>)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	4413      	add	r3, r2
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01d      	beq.n	800513e <chk_lock+0x5e>
 8005102:	4a24      	ldr	r2, [pc, #144]	; (8005194 <chk_lock+0xb4>)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	4413      	add	r3, r2
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d116      	bne.n	8005142 <chk_lock+0x62>
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <chk_lock+0xb4>)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	4413      	add	r3, r2
 800511c:	3304      	adds	r3, #4
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d10c      	bne.n	8005142 <chk_lock+0x62>
 8005128:	4a1a      	ldr	r2, [pc, #104]	; (8005194 <chk_lock+0xb4>)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	4413      	add	r3, r2
 8005130:	3308      	adds	r3, #8
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	429a      	cmp	r2, r3
 800513a:	d102      	bne.n	8005142 <chk_lock+0x62>
 800513c:	e007      	b.n	800514e <chk_lock+0x6e>
 800513e:	2301      	movs	r3, #1
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d9d2      	bls.n	80050f4 <chk_lock+0x14>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d109      	bne.n	8005168 <chk_lock+0x88>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <chk_lock+0x80>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d101      	bne.n	8005164 <chk_lock+0x84>
 8005160:	2300      	movs	r3, #0
 8005162:	e010      	b.n	8005186 <chk_lock+0xa6>
 8005164:	2312      	movs	r3, #18
 8005166:	e00e      	b.n	8005186 <chk_lock+0xa6>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <chk_lock+0xa0>
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <chk_lock+0xb4>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	4413      	add	r3, r2
 8005176:	330c      	adds	r3, #12
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517e:	d101      	bne.n	8005184 <chk_lock+0xa4>
 8005180:	2310      	movs	r3, #16
 8005182:	e000      	b.n	8005186 <chk_lock+0xa6>
 8005184:	2300      	movs	r3, #0
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	200000e0 	.word	0x200000e0

08005198 <enq_lock>:
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	e002      	b.n	80051aa <enq_lock+0x12>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d806      	bhi.n	80051be <enq_lock+0x26>
 80051b0:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <enq_lock+0x40>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4413      	add	r3, r2
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f2      	bne.n	80051a4 <enq_lock+0xc>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	bf14      	ite	ne
 80051c4:	2301      	movne	r3, #1
 80051c6:	2300      	moveq	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	200000e0 	.word	0x200000e0

080051dc <inc_lock>:
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e01f      	b.n	800522c <inc_lock+0x50>
 80051ec:	4a41      	ldr	r2, [pc, #260]	; (80052f4 <inc_lock+0x118>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	4413      	add	r3, r2
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d113      	bne.n	8005226 <inc_lock+0x4a>
 80051fe:	4a3d      	ldr	r2, [pc, #244]	; (80052f4 <inc_lock+0x118>)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	4413      	add	r3, r2
 8005206:	3304      	adds	r3, #4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	d109      	bne.n	8005226 <inc_lock+0x4a>
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <inc_lock+0x118>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	3308      	adds	r3, #8
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	429a      	cmp	r2, r3
 8005224:	d006      	beq.n	8005234 <inc_lock+0x58>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d9dc      	bls.n	80051ec <inc_lock+0x10>
 8005232:	e000      	b.n	8005236 <inc_lock+0x5a>
 8005234:	bf00      	nop
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d132      	bne.n	80052a2 <inc_lock+0xc6>
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e002      	b.n	8005248 <inc_lock+0x6c>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d806      	bhi.n	800525c <inc_lock+0x80>
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <inc_lock+0x118>)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	4413      	add	r3, r2
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f2      	bne.n	8005242 <inc_lock+0x66>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d101      	bne.n	8005266 <inc_lock+0x8a>
 8005262:	2300      	movs	r3, #0
 8005264:	e040      	b.n	80052e8 <inc_lock+0x10c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4922      	ldr	r1, [pc, #136]	; (80052f4 <inc_lock+0x118>)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	440b      	add	r3, r1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	491e      	ldr	r1, [pc, #120]	; (80052f4 <inc_lock+0x118>)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	440b      	add	r3, r1
 8005280:	3304      	adds	r3, #4
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	491a      	ldr	r1, [pc, #104]	; (80052f4 <inc_lock+0x118>)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	440b      	add	r3, r1
 8005290:	3308      	adds	r3, #8
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <inc_lock+0x118>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	4413      	add	r3, r2
 800529c:	330c      	adds	r3, #12
 800529e:	2200      	movs	r2, #0
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <inc_lock+0xe0>
 80052a8:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <inc_lock+0x118>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	4413      	add	r3, r2
 80052b0:	330c      	adds	r3, #12
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <inc_lock+0xe0>
 80052b8:	2300      	movs	r3, #0
 80052ba:	e015      	b.n	80052e8 <inc_lock+0x10c>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d108      	bne.n	80052d4 <inc_lock+0xf8>
 80052c2:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <inc_lock+0x118>)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	4413      	add	r3, r2
 80052ca:	330c      	adds	r3, #12
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	e001      	b.n	80052d8 <inc_lock+0xfc>
 80052d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d8:	4906      	ldr	r1, [pc, #24]	; (80052f4 <inc_lock+0x118>)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	440b      	add	r3, r1
 80052e0:	330c      	adds	r3, #12
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	200000e0 	.word	0x200000e0

080052f8 <dec_lock>:
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3b01      	subs	r3, #1
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d825      	bhi.n	8005358 <dec_lock+0x60>
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <dec_lock+0x74>)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	330c      	adds	r3, #12
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	81fb      	strh	r3, [r7, #14]
 800531a:	89fb      	ldrh	r3, [r7, #14]
 800531c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005320:	d101      	bne.n	8005326 <dec_lock+0x2e>
 8005322:	2300      	movs	r3, #0
 8005324:	81fb      	strh	r3, [r7, #14]
 8005326:	89fb      	ldrh	r3, [r7, #14]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <dec_lock+0x3a>
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	3b01      	subs	r3, #1
 8005330:	81fb      	strh	r3, [r7, #14]
 8005332:	4a0e      	ldr	r2, [pc, #56]	; (800536c <dec_lock+0x74>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4413      	add	r3, r2
 800533a:	330c      	adds	r3, #12
 800533c:	89fa      	ldrh	r2, [r7, #14]
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <dec_lock+0x5a>
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <dec_lock+0x74>)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4413      	add	r3, r2
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	737b      	strb	r3, [r7, #13]
 8005356:	e001      	b.n	800535c <dec_lock+0x64>
 8005358:	2302      	movs	r3, #2
 800535a:	737b      	strb	r3, [r7, #13]
 800535c:	7b7b      	ldrb	r3, [r7, #13]
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	200000e0 	.word	0x200000e0

08005370 <clear_lock>:
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	e010      	b.n	80053a0 <clear_lock+0x30>
 800537e:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <clear_lock+0x44>)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	4413      	add	r3, r2
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d105      	bne.n	800539a <clear_lock+0x2a>
 800538e:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <clear_lock+0x44>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	4413      	add	r3, r2
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d9eb      	bls.n	800537e <clear_lock+0xe>
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	200000e0 	.word	0x200000e0

080053b8 <sync_window>:
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	2300      	movs	r3, #0
 80053c2:	73fb      	strb	r3, [r7, #15]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	78db      	ldrb	r3, [r3, #3]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d034      	beq.n	8005436 <sync_window+0x7e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	7858      	ldrb	r0, [r3, #1]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053dc:	2301      	movs	r3, #1
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	f7ff fd40 	bl	8004e64 <disk_write>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <sync_window+0x38>
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
 80053ee:	e022      	b.n	8005436 <sync_window+0x7e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	70da      	strb	r2, [r3, #3]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	429a      	cmp	r2, r3
 8005404:	d217      	bcs.n	8005436 <sync_window+0x7e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	789b      	ldrb	r3, [r3, #2]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e010      	b.n	8005430 <sync_window+0x78>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7858      	ldrb	r0, [r3, #1]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005422:	2301      	movs	r3, #1
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	f7ff fd1d 	bl	8004e64 <disk_write>
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3b01      	subs	r3, #1
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d8eb      	bhi.n	800540e <sync_window+0x56>
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <move_window>:
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d01b      	beq.n	8005490 <move_window+0x50>
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ffad 	bl	80053b8 <sync_window>
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <move_window+0x50>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7858      	ldrb	r0, [r3, #1]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005472:	2301      	movs	r3, #1
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	f7ff fcd5 	bl	8004e24 <disk_read>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <move_window+0x4a>
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <sync_fs>:
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff ff87 	bl	80053b8 <sync_window>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d158      	bne.n	8005566 <sync_fs+0xca>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d148      	bne.n	800554e <sync_fs+0xb2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	791b      	ldrb	r3, [r3, #4]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d144      	bne.n	800554e <sync_fs+0xb2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3330      	adds	r3, #48	; 0x30
 80054c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fda9 	bl	8005026 <mem_set>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3330      	adds	r3, #48	; 0x30
 80054d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80054dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fd38 	bl	8004f56 <st_word>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3330      	adds	r3, #48	; 0x30
 80054ea:	4921      	ldr	r1, [pc, #132]	; (8005570 <sync_fs+0xd4>)
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fd4d 	bl	8004f8c <st_dword>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3330      	adds	r3, #48	; 0x30
 80054f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80054fa:	491e      	ldr	r1, [pc, #120]	; (8005574 <sync_fs+0xd8>)
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fd45 	bl	8004f8c <st_dword>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3330      	adds	r3, #48	; 0x30
 8005506:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7ff fd3b 	bl	8004f8c <st_dword>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3330      	adds	r3, #48	; 0x30
 800551a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7ff fd31 	bl	8004f8c <st_dword>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	62da      	str	r2, [r3, #44]	; 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	7858      	ldrb	r0, [r3, #1]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	2301      	movs	r3, #1
 8005544:	f7ff fc8e 	bl	8004e64 <disk_write>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	711a      	strb	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2200      	movs	r2, #0
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fca4 	bl	8004ea4 <disk_ioctl>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <sync_fs+0xca>
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	41615252 	.word	0x41615252
 8005574:	61417272 	.word	0x61417272

08005578 <clust2sect>:
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3b02      	subs	r3, #2
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	3b02      	subs	r3, #2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d301      	bcc.n	8005598 <clust2sect+0x20>
 8005594:	2300      	movs	r3, #0
 8005596:	e008      	b.n	80055aa <clust2sect+0x32>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	895b      	ldrh	r3, [r3, #10]
 800559c:	461a      	mov	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	fb03 f202 	mul.w	r2, r3, r2
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	4413      	add	r3, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <get_fat>:
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d904      	bls.n	80055d6 <get_fat+0x20>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <get_fat+0x26>
 80055d6:	2301      	movs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e08c      	b.n	80056f6 <get_fat+0x140>
 80055dc:	f04f 33ff 	mov.w	r3, #4294967295
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d045      	beq.n	8005676 <get_fat+0xc0>
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d05d      	beq.n	80056aa <get_fat+0xf4>
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d177      	bne.n	80056e2 <get_fat+0x12c>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	6a1a      	ldr	r2, [r3, #32]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	0a5b      	lsrs	r3, r3, #9
 8005608:	4413      	add	r3, r2
 800560a:	4619      	mov	r1, r3
 800560c:	6938      	ldr	r0, [r7, #16]
 800560e:	f7ff ff17 	bl	8005440 <move_window>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d167      	bne.n	80056e8 <get_fat+0x132>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	60fa      	str	r2, [r7, #12]
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	0a5b      	lsrs	r3, r3, #9
 8005634:	4413      	add	r3, r2
 8005636:	4619      	mov	r1, r3
 8005638:	6938      	ldr	r0, [r7, #16]
 800563a:	f7ff ff01 	bl	8005440 <move_window>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d153      	bne.n	80056ec <get_fat+0x136>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <get_fat+0xb6>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	e002      	b.n	8005672 <get_fat+0xbc>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e03f      	b.n	80056f6 <get_fat+0x140>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	4413      	add	r3, r2
 8005680:	4619      	mov	r1, r3
 8005682:	6938      	ldr	r0, [r7, #16]
 8005684:	f7ff fedc 	bl	8005440 <move_window>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d130      	bne.n	80056f0 <get_fat+0x13a>
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800569c:	4413      	add	r3, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fc1e 	bl	8004ee0 <ld_word>
 80056a4:	4603      	mov	r3, r0
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e025      	b.n	80056f6 <get_fat+0x140>
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	09db      	lsrs	r3, r3, #7
 80056b2:	4413      	add	r3, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f7ff fec2 	bl	8005440 <move_window>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d118      	bne.n	80056f4 <get_fat+0x13e>
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80056d0:	4413      	add	r3, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fc1c 	bl	8004f10 <ld_dword>
 80056d8:	4603      	mov	r3, r0
 80056da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e009      	b.n	80056f6 <get_fat+0x140>
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e006      	b.n	80056f6 <get_fat+0x140>
 80056e8:	bf00      	nop
 80056ea:	e004      	b.n	80056f6 <get_fat+0x140>
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <get_fat+0x140>
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <get_fat+0x140>
 80056f4:	bf00      	nop
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <put_fat>:
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	2302      	movs	r3, #2
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b01      	cmp	r3, #1
 8005714:	f240 80d6 	bls.w	80058c4 <put_fat+0x1c4>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	f080 80d0 	bcs.w	80058c4 <put_fat+0x1c4>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d073      	beq.n	8005814 <put_fat+0x114>
 800572c:	2b03      	cmp	r3, #3
 800572e:	f000 8091 	beq.w	8005854 <put_fat+0x154>
 8005732:	2b01      	cmp	r3, #1
 8005734:	f040 80c6 	bne.w	80058c4 <put_fat+0x1c4>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4413      	add	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	0a5b      	lsrs	r3, r3, #9
 800574e:	4413      	add	r3, r2
 8005750:	4619      	mov	r1, r3
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fe74 	bl	8005440 <move_window>
 8005758:	4603      	mov	r3, r0
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	7ffb      	ldrb	r3, [r7, #31]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 80a9 	bne.w	80058b6 <put_fat+0x1b6>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	1c59      	adds	r1, r3, #1
 800576e:	61b9      	str	r1, [r7, #24]
 8005770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005774:	4413      	add	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <put_fat+0x9e>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	b25b      	sxtb	r3, r3
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	b25a      	sxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	b25b      	sxtb	r3, r3
 8005796:	4313      	orrs	r3, r2
 8005798:	b25b      	sxtb	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e001      	b.n	80057a2 <put_fat+0xa2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	7013      	strb	r3, [r2, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	70da      	strb	r2, [r3, #3]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	0a5b      	lsrs	r3, r3, #9
 80057b4:	4413      	add	r3, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff fe41 	bl	8005440 <move_window>
 80057be:	4603      	mov	r3, r0
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	7ffb      	ldrb	r3, [r7, #31]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d178      	bne.n	80058ba <put_fat+0x1ba>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	4413      	add	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <put_fat+0xea>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e00e      	b.n	8005808 <put_fat+0x108>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	f023 030f 	bic.w	r3, r3, #15
 80057f4:	b25a      	sxtb	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	b25b      	sxtb	r3, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	b25b      	sxtb	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	7013      	strb	r3, [r2, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	70da      	strb	r2, [r3, #3]
 8005812:	e057      	b.n	80058c4 <put_fat+0x1c4>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	4413      	add	r3, r2
 800581e:	4619      	mov	r1, r3
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fe0d 	bl	8005440 <move_window>
 8005826:	4603      	mov	r3, r0
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	7ffb      	ldrb	r3, [r7, #31]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d146      	bne.n	80058be <put_fat+0x1be>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800583e:	4413      	add	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	b292      	uxth	r2, r2
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fb85 	bl	8004f56 <st_word>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	70da      	strb	r2, [r3, #3]
 8005852:	e037      	b.n	80058c4 <put_fat+0x1c4>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	4413      	add	r3, r2
 800585e:	4619      	mov	r1, r3
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fded 	bl	8005440 <move_window>
 8005866:	4603      	mov	r3, r0
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	7ffb      	ldrb	r3, [r7, #31]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d128      	bne.n	80058c2 <put_fat+0x1c2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005884:	4413      	add	r3, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fb42 	bl	8004f10 <ld_dword>
 800588c:	4603      	mov	r3, r0
 800588e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005892:	4323      	orrs	r3, r4
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80058a4:	4413      	add	r3, r2
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fb6f 	bl	8004f8c <st_dword>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	70da      	strb	r2, [r3, #3]
 80058b4:	e006      	b.n	80058c4 <put_fat+0x1c4>
 80058b6:	bf00      	nop
 80058b8:	e004      	b.n	80058c4 <put_fat+0x1c4>
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <put_fat+0x1c4>
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <put_fat+0x1c4>
 80058c2:	bf00      	nop
 80058c4:	7ffb      	ldrb	r3, [r7, #31]
 80058c6:	4618      	mov	r0, r3
 80058c8:	3724      	adds	r7, #36	; 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}

080058ce <remove_chain>:
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b088      	sub	sp, #32
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	2300      	movs	r3, #0
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d904      	bls.n	80058f4 <remove_chain+0x26>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d301      	bcc.n	80058f8 <remove_chain+0x2a>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e04b      	b.n	8005990 <remove_chain+0xc2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <remove_chain+0x4a>
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	69b8      	ldr	r0, [r7, #24]
 8005906:	f7ff fefb 	bl	8005700 <put_fat>
 800590a:	4603      	mov	r3, r0
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	7ffb      	ldrb	r3, [r7, #31]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <remove_chain+0x4a>
 8005914:	7ffb      	ldrb	r3, [r7, #31]
 8005916:	e03b      	b.n	8005990 <remove_chain+0xc2>
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff fe4b 	bl	80055b6 <get_fat>
 8005920:	6178      	str	r0, [r7, #20]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d031      	beq.n	800598c <remove_chain+0xbe>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <remove_chain+0x64>
 800592e:	2302      	movs	r3, #2
 8005930:	e02e      	b.n	8005990 <remove_chain+0xc2>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d101      	bne.n	800593e <remove_chain+0x70>
 800593a:	2301      	movs	r3, #1
 800593c:	e028      	b.n	8005990 <remove_chain+0xc2>
 800593e:	2200      	movs	r2, #0
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f7ff fedc 	bl	8005700 <put_fat>
 8005948:	4603      	mov	r3, r0
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	7ffb      	ldrb	r3, [r7, #31]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <remove_chain+0x88>
 8005952:	7ffb      	ldrb	r3, [r7, #31]
 8005954:	e01c      	b.n	8005990 <remove_chain+0xc2>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	3b02      	subs	r3, #2
 8005960:	429a      	cmp	r2, r3
 8005962:	d20b      	bcs.n	800597c <remove_chain+0xae>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	611a      	str	r2, [r3, #16]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	791b      	ldrb	r3, [r3, #4]
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	b2da      	uxtb	r2, r3
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	711a      	strb	r2, [r3, #4]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	d3c6      	bcc.n	8005918 <remove_chain+0x4a>
 800598a:	e000      	b.n	800598e <remove_chain+0xc0>
 800598c:	bf00      	nop
 800598e:	2300      	movs	r3, #0
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <create_chain>:
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10d      	bne.n	80059ca <create_chain+0x32>
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <create_chain+0x2c>
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d31b      	bcc.n	80059fc <create_chain+0x64>
 80059c4:	2301      	movs	r3, #1
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e018      	b.n	80059fc <create_chain+0x64>
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff fdf2 	bl	80055b6 <get_fat>
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d801      	bhi.n	80059de <create_chain+0x46>
 80059da:	2301      	movs	r3, #1
 80059dc:	e070      	b.n	8005ac0 <create_chain+0x128>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d101      	bne.n	80059ea <create_chain+0x52>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	e06a      	b.n	8005ac0 <create_chain+0x128>
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d201      	bcs.n	80059f8 <create_chain+0x60>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	e063      	b.n	8005ac0 <create_chain+0x128>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d307      	bcc.n	8005a20 <create_chain+0x88>
 8005a10:	2302      	movs	r3, #2
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d901      	bls.n	8005a20 <create_chain+0x88>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e04f      	b.n	8005ac0 <create_chain+0x128>
 8005a20:	69f9      	ldr	r1, [r7, #28]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fdc7 	bl	80055b6 <get_fat>
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <create_chain+0xb6>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d003      	beq.n	8005a3e <create_chain+0xa6>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d101      	bne.n	8005a42 <create_chain+0xaa>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	e03e      	b.n	8005ac0 <create_chain+0x128>
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d1da      	bne.n	8005a00 <create_chain+0x68>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e038      	b.n	8005ac0 <create_chain+0x128>
 8005a4e:	bf00      	nop
 8005a50:	f04f 32ff 	mov.w	r2, #4294967295
 8005a54:	69f9      	ldr	r1, [r7, #28]
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7ff fe52 	bl	8005700 <put_fat>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	75fb      	strb	r3, [r7, #23]
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <create_chain+0xe2>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <create_chain+0xe2>
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6938      	ldr	r0, [r7, #16]
 8005a72:	f7ff fe45 	bl	8005700 <put_fat>
 8005a76:	4603      	mov	r3, r0
 8005a78:	75fb      	strb	r3, [r7, #23]
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d116      	bne.n	8005aae <create_chain+0x116>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	3b02      	subs	r3, #2
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d804      	bhi.n	8005a9e <create_chain+0x106>
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	1e5a      	subs	r2, r3, #1
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	611a      	str	r2, [r3, #16]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	791b      	ldrb	r3, [r3, #4]
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	711a      	strb	r2, [r3, #4]
 8005aac:	e007      	b.n	8005abe <create_chain+0x126>
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <create_chain+0x122>
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab8:	e000      	b.n	8005abc <create_chain+0x124>
 8005aba:	2301      	movs	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <clmt_clust>:
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	3304      	adds	r3, #4
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	0a5b      	lsrs	r3, r3, #9
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	8952      	ldrh	r2, [r2, #10]
 8005ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1d1a      	adds	r2, r3, #4
 8005af2:	613a      	str	r2, [r7, #16]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <clmt_clust+0x3a>
 8005afe:	2300      	movs	r3, #0
 8005b00:	e010      	b.n	8005b24 <clmt_clust+0x5c>
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d307      	bcc.n	8005b1a <clmt_clust+0x52>
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	3304      	adds	r3, #4
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e7e9      	b.n	8005aee <clmt_clust+0x26>
 8005b1a:	bf00      	nop
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	4618      	mov	r0, r3
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <dir_sdi>:
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b46:	d204      	bcs.n	8005b52 <dir_sdi+0x22>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <dir_sdi+0x26>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e063      	b.n	8005c1e <dir_sdi+0xee>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	615a      	str	r2, [r3, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <dir_sdi+0x46>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d902      	bls.n	8005b76 <dir_sdi+0x46>
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10c      	bne.n	8005b96 <dir_sdi+0x66>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	8912      	ldrh	r2, [r2, #8]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d301      	bcc.n	8005b8c <dir_sdi+0x5c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e048      	b.n	8005c1e <dir_sdi+0xee>
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	61da      	str	r2, [r3, #28]
 8005b94:	e029      	b.n	8005bea <dir_sdi+0xba>
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	895b      	ldrh	r3, [r3, #10]
 8005b9a:	025b      	lsls	r3, r3, #9
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e019      	b.n	8005bd4 <dir_sdi+0xa4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fd06 	bl	80055b6 <get_fat>
 8005baa:	6178      	str	r0, [r7, #20]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb2:	d101      	bne.n	8005bb8 <dir_sdi+0x88>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e032      	b.n	8005c1e <dir_sdi+0xee>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d904      	bls.n	8005bc8 <dir_sdi+0x98>
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d301      	bcc.n	8005bcc <dir_sdi+0x9c>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e028      	b.n	8005c1e <dir_sdi+0xee>
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d2e1      	bcs.n	8005ba0 <dir_sdi+0x70>
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	6938      	ldr	r0, [r7, #16]
 8005be0:	f7ff fcca 	bl	8005578 <clust2sect>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	61da      	str	r2, [r3, #28]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <dir_sdi+0xcc>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e010      	b.n	8005c1e <dir_sdi+0xee>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	0a5b      	lsrs	r3, r3, #9
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	61da      	str	r2, [r3, #28]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	441a      	add	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <dir_next>:
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	3320      	adds	r3, #32
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <dir_next+0x28>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c4c:	d301      	bcc.n	8005c52 <dir_next+0x2c>
 8005c4e:	2304      	movs	r3, #4
 8005c50:	e0aa      	b.n	8005da8 <dir_next+0x182>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 8098 	bne.w	8005d8e <dir_next+0x168>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	61da      	str	r2, [r3, #28]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <dir_next+0x62>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	8912      	ldrh	r2, [r2, #8]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f0c0 8088 	bcc.w	8005d8e <dir_next+0x168>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	61da      	str	r2, [r3, #28]
 8005c84:	2304      	movs	r3, #4
 8005c86:	e08f      	b.n	8005da8 <dir_next+0x182>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	0a5b      	lsrs	r3, r3, #9
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	8952      	ldrh	r2, [r2, #10]
 8005c90:	3a01      	subs	r2, #1
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d17a      	bne.n	8005d8e <dir_next+0x168>
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f7ff fc88 	bl	80055b6 <get_fat>
 8005ca6:	6178      	str	r0, [r7, #20]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d801      	bhi.n	8005cb2 <dir_next+0x8c>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e07a      	b.n	8005da8 <dir_next+0x182>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d101      	bne.n	8005cbe <dir_next+0x98>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e074      	b.n	8005da8 <dir_next+0x182>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d358      	bcc.n	8005d7a <dir_next+0x154>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <dir_next+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	61da      	str	r2, [r3, #28]
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	e067      	b.n	8005da8 <dir_next+0x182>
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7ff fe59 	bl	8005998 <create_chain>
 8005ce6:	6178      	str	r0, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <dir_next+0xcc>
 8005cee:	2307      	movs	r3, #7
 8005cf0:	e05a      	b.n	8005da8 <dir_next+0x182>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <dir_next+0xd6>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e055      	b.n	8005da8 <dir_next+0x182>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d101      	bne.n	8005d08 <dir_next+0xe2>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e04f      	b.n	8005da8 <dir_next+0x182>
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fb55 	bl	80053b8 <sync_window>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <dir_next+0xf2>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e047      	b.n	8005da8 <dir_next+0x182>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3330      	adds	r3, #48	; 0x30
 8005d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff f97f 	bl	8005026 <mem_set>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff fc22 	bl	8005578 <clust2sect>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d3a:	e012      	b.n	8005d62 <dir_next+0x13c>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	70da      	strb	r2, [r3, #3]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff fb38 	bl	80053b8 <sync_window>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <dir_next+0x12c>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e02a      	b.n	8005da8 <dir_next+0x182>
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3301      	adds	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	895b      	ldrh	r3, [r3, #10]
 8005d66:	461a      	mov	r2, r3
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d3e6      	bcc.n	8005d3c <dir_next+0x116>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	619a      	str	r2, [r3, #24]
 8005d80:	6979      	ldr	r1, [r7, #20]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff fbf8 	bl	8005578 <clust2sect>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	61da      	str	r2, [r3, #28]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	615a      	str	r2, [r3, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	621a      	str	r2, [r3, #32]
 8005da6:	2300      	movs	r3, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <dir_alloc>:
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff feb4 	bl	8005b30 <dir_sdi>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d12b      	bne.n	8005e2a <dir_alloc+0x7a>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff fb2f 	bl	8005440 <move_window>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11d      	bne.n	8005e28 <dir_alloc+0x78>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2be5      	cmp	r3, #229	; 0xe5
 8005df4:	d004      	beq.n	8005e00 <dir_alloc+0x50>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d107      	bne.n	8005e10 <dir_alloc+0x60>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3301      	adds	r3, #1
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d102      	bne.n	8005e14 <dir_alloc+0x64>
 8005e0e:	e00c      	b.n	8005e2a <dir_alloc+0x7a>
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	2101      	movs	r1, #1
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ff05 	bl	8005c26 <dir_next>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	75fb      	strb	r3, [r7, #23]
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0d7      	beq.n	8005dd6 <dir_alloc+0x26>
 8005e26:	e000      	b.n	8005e2a <dir_alloc+0x7a>
 8005e28:	bf00      	nop
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d101      	bne.n	8005e34 <dir_alloc+0x84>
 8005e30:	2307      	movs	r3, #7
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <ld_clust>:
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	331a      	adds	r3, #26
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff f847 	bl	8004ee0 <ld_word>
 8005e52:	4603      	mov	r3, r0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d109      	bne.n	8005e72 <ld_clust+0x34>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	3314      	adds	r3, #20
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff f83c 	bl	8004ee0 <ld_word>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <st_clust>:
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	331a      	adds	r3, #26
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff f85f 	bl	8004f56 <st_word>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d109      	bne.n	8005eb4 <st_clust+0x38>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f103 0214 	add.w	r2, r3, #20
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7ff f851 	bl	8004f56 <st_word>
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <dir_read>:
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	75fb      	strb	r3, [r7, #23]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	e03c      	b.n	8005f4c <dir_read+0x90>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6938      	ldr	r0, [r7, #16]
 8005eda:	f7ff fab1 	bl	8005440 <move_window>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	75fb      	strb	r3, [r7, #23]
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d136      	bne.n	8005f56 <dir_read+0x9a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <dir_read+0x40>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	75fb      	strb	r3, [r7, #23]
 8005efa:	e031      	b.n	8005f60 <dir_read+0xa4>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	330b      	adds	r3, #11
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f08:	73bb      	strb	r3, [r7, #14]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7bba      	ldrb	r2, [r7, #14]
 8005f0e:	719a      	strb	r2, [r3, #6]
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2be5      	cmp	r3, #229	; 0xe5
 8005f14:	d011      	beq.n	8005f3a <dir_read+0x7e>
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b2e      	cmp	r3, #46	; 0x2e
 8005f1a:	d00e      	beq.n	8005f3a <dir_read+0x7e>
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	d00b      	beq.n	8005f3a <dir_read+0x7e>
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	f023 0320 	bic.w	r3, r3, #32
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00f      	beq.n	8005f5a <dir_read+0x9e>
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff fe72 	bl	8005c26 <dir_next>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75fb      	strb	r3, [r7, #23]
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <dir_read+0xa2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1be      	bne.n	8005ed2 <dir_read+0x16>
 8005f54:	e004      	b.n	8005f60 <dir_read+0xa4>
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <dir_read+0xa4>
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <dir_read+0xa4>
 8005f5e:	bf00      	nop
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <dir_read+0xb0>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	61da      	str	r2, [r3, #28]
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <dir_find>:
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	2100      	movs	r1, #0
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fdd2 	bl	8005b30 <dir_sdi>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	75fb      	strb	r3, [r7, #23]
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <dir_find+0x24>
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	e03e      	b.n	8006018 <dir_find+0xa2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6938      	ldr	r0, [r7, #16]
 8005fa2:	f7ff fa4d 	bl	8005440 <move_window>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d12f      	bne.n	8006010 <dir_find+0x9a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <dir_find+0x4e>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	75fb      	strb	r3, [r7, #23]
 8005fc2:	e028      	b.n	8006016 <dir_find+0xa0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	330b      	adds	r3, #11
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	719a      	strb	r2, [r3, #6]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	330b      	adds	r3, #11
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <dir_find+0x86>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a18      	ldr	r0, [r3, #32]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	220b      	movs	r2, #11
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f7ff f832 	bl	800505a <mem_cmp>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <dir_find+0x9e>
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fe11 	bl	8005c26 <dir_next>
 8006004:	4603      	mov	r3, r0
 8006006:	75fb      	strb	r3, [r7, #23]
 8006008:	7dfb      	ldrb	r3, [r7, #23]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0c5      	beq.n	8005f9a <dir_find+0x24>
 800600e:	e002      	b.n	8006016 <dir_find+0xa0>
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <dir_find+0xa0>
 8006014:	bf00      	nop
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <dir_register>:
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	2101      	movs	r1, #1
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff febd 	bl	8005db0 <dir_alloc>
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d11c      	bne.n	800607a <dir_register+0x5a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	4619      	mov	r1, r3
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f7ff f9fa 	bl	8005440 <move_window>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d111      	bne.n	800607a <dir_register+0x5a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	2220      	movs	r2, #32
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe ffe1 	bl	8005026 <mem_set>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a18      	ldr	r0, [r3, #32]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	220b      	movs	r2, #11
 800606e:	4619      	mov	r1, r3
 8006070:	f7fe ffb8 	bl	8004fe4 <mem_cpy>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2201      	movs	r2, #1
 8006078:	70da      	strb	r2, [r3, #3]
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <dir_remove>:
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4619      	mov	r1, r3
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff f9d1 	bl	8005440 <move_window>
 800609e:	4603      	mov	r3, r0
 80060a0:	72fb      	strb	r3, [r7, #11]
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <dir_remove+0x32>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	22e5      	movs	r2, #229	; 0xe5
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	70da      	strb	r2, [r3, #3]
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <get_fileinfo>:
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	725a      	strb	r2, [r3, #9]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d04e      	beq.n	8006176 <get_fileinfo+0xb6>
 80060d8:	2300      	movs	r3, #0
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e021      	b.n	8006126 <get_fileinfo+0x66>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	1c59      	adds	r1, r3, #1
 80060ea:	6179      	str	r1, [r7, #20]
 80060ec:	4413      	add	r3, r2
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d100      	bne.n	80060fa <get_fileinfo+0x3a>
 80060f8:	e015      	b.n	8006126 <get_fileinfo+0x66>
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d101      	bne.n	8006104 <get_fileinfo+0x44>
 8006100:	23e5      	movs	r3, #229	; 0xe5
 8006102:	73fb      	strb	r3, [r7, #15]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b09      	cmp	r3, #9
 8006108:	d106      	bne.n	8006118 <get_fileinfo+0x58>
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	613a      	str	r2, [r7, #16]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	4413      	add	r3, r2
 8006114:	222e      	movs	r2, #46	; 0x2e
 8006116:	725a      	strb	r2, [r3, #9]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	613a      	str	r2, [r7, #16]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	4413      	add	r3, r2
 8006122:	7bfa      	ldrb	r2, [r7, #15]
 8006124:	725a      	strb	r2, [r3, #9]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b0a      	cmp	r3, #10
 800612a:	d9da      	bls.n	80060e2 <get_fileinfo+0x22>
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	3309      	adds	r3, #9
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	7ada      	ldrb	r2, [r3, #11]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	721a      	strb	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	331c      	adds	r3, #28
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fee1 	bl	8004f10 <ld_dword>
 800614e:	4602      	mov	r2, r0
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	3316      	adds	r3, #22
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fed8 	bl	8004f10 <ld_dword>
 8006160:	60b8      	str	r0, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	b29a      	uxth	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	80da      	strh	r2, [r3, #6]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	b29a      	uxth	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	809a      	strh	r2, [r3, #4]
 8006174:	e000      	b.n	8006178 <get_fileinfo+0xb8>
 8006176:	bf00      	nop
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <create_name>:
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3324      	adds	r3, #36	; 0x24
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	220b      	movs	r2, #11
 8006198:	2120      	movs	r1, #32
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f7fe ff43 	bl	8005026 <mem_set>
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	2308      	movs	r3, #8
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	617a      	str	r2, [r7, #20]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	7ffb      	ldrb	r3, [r7, #31]
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d94e      	bls.n	800625e <create_name+0xde>
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	2b2f      	cmp	r3, #47	; 0x2f
 80061c4:	d006      	beq.n	80061d4 <create_name+0x54>
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	2b5c      	cmp	r3, #92	; 0x5c
 80061ca:	d110      	bne.n	80061ee <create_name+0x6e>
 80061cc:	e002      	b.n	80061d4 <create_name+0x54>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	3301      	adds	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b2f      	cmp	r3, #47	; 0x2f
 80061de:	d0f6      	beq.n	80061ce <create_name+0x4e>
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b5c      	cmp	r3, #92	; 0x5c
 80061ea:	d0f0      	beq.n	80061ce <create_name+0x4e>
 80061ec:	e038      	b.n	8006260 <create_name+0xe0>
 80061ee:	7ffb      	ldrb	r3, [r7, #31]
 80061f0:	2b2e      	cmp	r3, #46	; 0x2e
 80061f2:	d003      	beq.n	80061fc <create_name+0x7c>
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d30c      	bcc.n	8006216 <create_name+0x96>
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	2b0b      	cmp	r3, #11
 8006200:	d002      	beq.n	8006208 <create_name+0x88>
 8006202:	7ffb      	ldrb	r3, [r7, #31]
 8006204:	2b2e      	cmp	r3, #46	; 0x2e
 8006206:	d001      	beq.n	800620c <create_name+0x8c>
 8006208:	2306      	movs	r3, #6
 800620a:	e044      	b.n	8006296 <create_name+0x116>
 800620c:	2308      	movs	r3, #8
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	230b      	movs	r3, #11
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e022      	b.n	800625c <create_name+0xdc>
 8006216:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da04      	bge.n	8006228 <create_name+0xa8>
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	3b80      	subs	r3, #128	; 0x80
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <create_name+0x120>)
 8006224:	5cd3      	ldrb	r3, [r2, r3]
 8006226:	77fb      	strb	r3, [r7, #31]
 8006228:	7ffb      	ldrb	r3, [r7, #31]
 800622a:	4619      	mov	r1, r3
 800622c:	481d      	ldr	r0, [pc, #116]	; (80062a4 <create_name+0x124>)
 800622e:	f7fe ff3b 	bl	80050a8 <chk_chr>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <create_name+0xbc>
 8006238:	2306      	movs	r3, #6
 800623a:	e02c      	b.n	8006296 <create_name+0x116>
 800623c:	7ffb      	ldrb	r3, [r7, #31]
 800623e:	2b60      	cmp	r3, #96	; 0x60
 8006240:	d905      	bls.n	800624e <create_name+0xce>
 8006242:	7ffb      	ldrb	r3, [r7, #31]
 8006244:	2b7a      	cmp	r3, #122	; 0x7a
 8006246:	d802      	bhi.n	800624e <create_name+0xce>
 8006248:	7ffb      	ldrb	r3, [r7, #31]
 800624a:	3b20      	subs	r3, #32
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	613a      	str	r2, [r7, #16]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4413      	add	r3, r2
 8006258:	7ffa      	ldrb	r2, [r7, #31]
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e7a6      	b.n	80061ac <create_name+0x2c>
 800625e:	bf00      	nop
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	441a      	add	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <create_name+0xf4>
 8006270:	2306      	movs	r3, #6
 8006272:	e010      	b.n	8006296 <create_name+0x116>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2be5      	cmp	r3, #229	; 0xe5
 800627a:	d102      	bne.n	8006282 <create_name+0x102>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2205      	movs	r2, #5
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	7ffb      	ldrb	r3, [r7, #31]
 8006284:	2b20      	cmp	r3, #32
 8006286:	d801      	bhi.n	800628c <create_name+0x10c>
 8006288:	2204      	movs	r2, #4
 800628a:	e000      	b.n	800628e <create_name+0x10e>
 800628c:	2200      	movs	r2, #0
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	330b      	adds	r3, #11
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	0800b978 	.word	0x0800b978
 80062a4:	0800b8d0 	.word	0x0800b8d0

080062a8 <follow_path>:
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e002      	b.n	80062c4 <follow_path+0x1c>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b2f      	cmp	r3, #47	; 0x2f
 80062ca:	d0f8      	beq.n	80062be <follow_path+0x16>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b5c      	cmp	r3, #92	; 0x5c
 80062d2:	d0f4      	beq.n	80062be <follow_path+0x16>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2200      	movs	r2, #0
 80062d8:	609a      	str	r2, [r3, #8]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b1f      	cmp	r3, #31
 80062e0:	d80a      	bhi.n	80062f8 <follow_path+0x50>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80062ea:	2100      	movs	r1, #0
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fc1f 	bl	8005b30 <dir_sdi>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]
 80062f6:	e043      	b.n	8006380 <follow_path+0xd8>
 80062f8:	463b      	mov	r3, r7
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff3f 	bl	8006180 <create_name>
 8006302:	4603      	mov	r3, r0
 8006304:	75fb      	strb	r3, [r7, #23]
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d134      	bne.n	8006376 <follow_path+0xce>
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fe32 	bl	8005f76 <dir_find>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800631c:	72fb      	strb	r3, [r7, #11]
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <follow_path+0x92>
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b04      	cmp	r3, #4
 8006328:	d127      	bne.n	800637a <follow_path+0xd2>
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d122      	bne.n	800637a <follow_path+0xd2>
 8006334:	2305      	movs	r3, #5
 8006336:	75fb      	strb	r3, [r7, #23]
 8006338:	e01f      	b.n	800637a <follow_path+0xd2>
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11c      	bne.n	800637e <follow_path+0xd6>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	799b      	ldrb	r3, [r3, #6]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <follow_path+0xae>
 8006350:	2305      	movs	r3, #5
 8006352:	75fb      	strb	r3, [r7, #23]
 8006354:	e014      	b.n	8006380 <follow_path+0xd8>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006364:	4413      	add	r3, r2
 8006366:	4619      	mov	r1, r3
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff fd68 	bl	8005e3e <ld_clust>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	e7c0      	b.n	80062f8 <follow_path+0x50>
 8006376:	bf00      	nop
 8006378:	e002      	b.n	8006380 <follow_path+0xd8>
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <follow_path+0xd8>
 800637e:	bf00      	nop
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <get_ldnumber>:
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d031      	beq.n	8006404 <get_ldnumber+0x7a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e002      	b.n	80063ae <get_ldnumber+0x24>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	3301      	adds	r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d903      	bls.n	80063be <get_ldnumber+0x34>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b3a      	cmp	r3, #58	; 0x3a
 80063bc:	d1f4      	bne.n	80063a8 <get_ldnumber+0x1e>
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b3a      	cmp	r3, #58	; 0x3a
 80063c4:	d11c      	bne.n	8006400 <get_ldnumber+0x76>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	60fa      	str	r2, [r7, #12]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	3b30      	subs	r3, #48	; 0x30
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b09      	cmp	r3, #9
 80063dc:	d80e      	bhi.n	80063fc <get_ldnumber+0x72>
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d10a      	bne.n	80063fc <get_ldnumber+0x72>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <get_ldnumber+0x72>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	3301      	adds	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	e002      	b.n	8006406 <get_ldnumber+0x7c>
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <check_fs>:
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	70da      	strb	r2, [r3, #3]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff f806 	bl	8005440 <move_window>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <check_fs+0x2a>
 800643a:	2304      	movs	r3, #4
 800643c:	e038      	b.n	80064b0 <check_fs+0x9c>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3330      	adds	r3, #48	; 0x30
 8006442:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fd4a 	bl	8004ee0 <ld_word>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <check_fs+0x48>
 8006458:	2303      	movs	r3, #3
 800645a:	e029      	b.n	80064b0 <check_fs+0x9c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006462:	2be9      	cmp	r3, #233	; 0xe9
 8006464:	d009      	beq.n	800647a <check_fs+0x66>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800646c:	2beb      	cmp	r3, #235	; 0xeb
 800646e:	d11e      	bne.n	80064ae <check_fs+0x9a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006476:	2b90      	cmp	r3, #144	; 0x90
 8006478:	d119      	bne.n	80064ae <check_fs+0x9a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3330      	adds	r3, #48	; 0x30
 800647e:	3336      	adds	r3, #54	; 0x36
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fd45 	bl	8004f10 <ld_dword>
 8006486:	4603      	mov	r3, r0
 8006488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800648c:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <check_fs+0xa4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <check_fs+0x82>
 8006492:	2300      	movs	r3, #0
 8006494:	e00c      	b.n	80064b0 <check_fs+0x9c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3330      	adds	r3, #48	; 0x30
 800649a:	3352      	adds	r3, #82	; 0x52
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fd37 	bl	8004f10 <ld_dword>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <check_fs+0xa8>)
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d101      	bne.n	80064ae <check_fs+0x9a>
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <check_fs+0x9c>
 80064ae:	2302      	movs	r3, #2
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	00544146 	.word	0x00544146
 80064bc:	33544146 	.word	0x33544146

080064c0 <find_volume>:
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b096      	sub	sp, #88	; 0x58
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ff58 	bl	800638a <get_ldnumber>
 80064da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80064dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	da01      	bge.n	80064e6 <find_volume+0x26>
 80064e2:	230b      	movs	r3, #11
 80064e4:	e22e      	b.n	8006944 <find_volume+0x484>
 80064e6:	4aa8      	ldr	r2, [pc, #672]	; (8006788 <find_volume+0x2c8>)
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <find_volume+0x3a>
 80064f6:	230c      	movs	r3, #12
 80064f8:	e224      	b.n	8006944 <find_volume+0x484>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01a      	beq.n	8006546 <find_volume+0x86>
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fc45 	bl	8004da4 <disk_status>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <find_volume+0x86>
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <find_volume+0x82>
 8006532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <find_volume+0x82>
 800653e:	230a      	movs	r3, #10
 8006540:	e200      	b.n	8006944 <find_volume+0x484>
 8006542:	2300      	movs	r3, #0
 8006544:	e1fe      	b.n	8006944 <find_volume+0x484>
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	705a      	strb	r2, [r3, #1]
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fc3d 	bl	8004dd8 <disk_initialize>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <find_volume+0xb4>
 8006570:	2303      	movs	r3, #3
 8006572:	e1e7      	b.n	8006944 <find_volume+0x484>
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <find_volume+0xca>
 800657a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <find_volume+0xca>
 8006586:	230a      	movs	r3, #10
 8006588:	e1dc      	b.n	8006944 <find_volume+0x484>
 800658a:	2300      	movs	r3, #0
 800658c:	653b      	str	r3, [r7, #80]	; 0x50
 800658e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006590:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006592:	f7ff ff3f 	bl	8006414 <check_fs>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800659c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d14b      	bne.n	800663c <find_volume+0x17c>
 80065a4:	2300      	movs	r3, #0
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	e01f      	b.n	80065ea <find_volume+0x12a>
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80065b8:	4413      	add	r3, r2
 80065ba:	633b      	str	r3, [r7, #48]	; 0x30
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	3304      	adds	r3, #4
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <find_volume+0x114>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	3308      	adds	r3, #8
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe fca0 	bl	8004f10 <ld_dword>
 80065d0:	4602      	mov	r2, r0
 80065d2:	e000      	b.n	80065d6 <find_volume+0x116>
 80065d4:	2200      	movs	r2, #0
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80065de:	440b      	add	r3, r1
 80065e0:	f843 2c44 	str.w	r2, [r3, #-68]
 80065e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e6:	3301      	adds	r3, #1
 80065e8:	643b      	str	r3, [r7, #64]	; 0x40
 80065ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d9dc      	bls.n	80065aa <find_volume+0xea>
 80065f0:	2300      	movs	r3, #0
 80065f2:	643b      	str	r3, [r7, #64]	; 0x40
 80065f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <find_volume+0x140>
 80065fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fc:	3b01      	subs	r3, #1
 80065fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006608:	4413      	add	r3, r2
 800660a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800660e:	653b      	str	r3, [r7, #80]	; 0x50
 8006610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <find_volume+0x162>
 8006616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800661a:	f7ff fefb 	bl	8006414 <check_fs>
 800661e:	4603      	mov	r3, r0
 8006620:	e000      	b.n	8006624 <find_volume+0x164>
 8006622:	2303      	movs	r3, #3
 8006624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8006628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800662c:	2b01      	cmp	r3, #1
 800662e:	d905      	bls.n	800663c <find_volume+0x17c>
 8006630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006632:	3301      	adds	r3, #1
 8006634:	643b      	str	r3, [r7, #64]	; 0x40
 8006636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006638:	2b03      	cmp	r3, #3
 800663a:	d9e1      	bls.n	8006600 <find_volume+0x140>
 800663c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006640:	2b04      	cmp	r3, #4
 8006642:	d101      	bne.n	8006648 <find_volume+0x188>
 8006644:	2301      	movs	r3, #1
 8006646:	e17d      	b.n	8006944 <find_volume+0x484>
 8006648:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800664c:	2b01      	cmp	r3, #1
 800664e:	d901      	bls.n	8006654 <find_volume+0x194>
 8006650:	230d      	movs	r3, #13
 8006652:	e177      	b.n	8006944 <find_volume+0x484>
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	3330      	adds	r3, #48	; 0x30
 8006658:	330b      	adds	r3, #11
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fc40 	bl	8004ee0 <ld_word>
 8006660:	4603      	mov	r3, r0
 8006662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006666:	d001      	beq.n	800666c <find_volume+0x1ac>
 8006668:	230d      	movs	r3, #13
 800666a:	e16b      	b.n	8006944 <find_volume+0x484>
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	3330      	adds	r3, #48	; 0x30
 8006670:	3316      	adds	r3, #22
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fc34 	bl	8004ee0 <ld_word>
 8006678:	4603      	mov	r3, r0
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <find_volume+0x1d0>
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	3330      	adds	r3, #48	; 0x30
 8006686:	3324      	adds	r3, #36	; 0x24
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fc41 	bl	8004f10 <ld_dword>
 800668e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006694:	619a      	str	r2, [r3, #24]
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	709a      	strb	r2, [r3, #2]
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	789b      	ldrb	r3, [r3, #2]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d005      	beq.n	80066b4 <find_volume+0x1f4>
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	789b      	ldrb	r3, [r3, #2]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d001      	beq.n	80066b4 <find_volume+0x1f4>
 80066b0:	230d      	movs	r3, #13
 80066b2:	e147      	b.n	8006944 <find_volume+0x484>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	789b      	ldrb	r3, [r3, #2]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	815a      	strh	r2, [r3, #10]
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	895b      	ldrh	r3, [r3, #10]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <find_volume+0x228>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	895b      	ldrh	r3, [r3, #10]
 80066da:	461a      	mov	r2, r3
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	895b      	ldrh	r3, [r3, #10]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <find_volume+0x22c>
 80066e8:	230d      	movs	r3, #13
 80066ea:	e12b      	b.n	8006944 <find_volume+0x484>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	3330      	adds	r3, #48	; 0x30
 80066f0:	3311      	adds	r3, #17
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fbf4 	bl	8004ee0 <ld_word>
 80066f8:	4603      	mov	r3, r0
 80066fa:	461a      	mov	r2, r3
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	811a      	strh	r2, [r3, #8]
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	891b      	ldrh	r3, [r3, #8]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <find_volume+0x252>
 800670e:	230d      	movs	r3, #13
 8006710:	e118      	b.n	8006944 <find_volume+0x484>
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	3330      	adds	r3, #48	; 0x30
 8006716:	3313      	adds	r3, #19
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fbe1 	bl	8004ee0 <ld_word>
 800671e:	4603      	mov	r3, r0
 8006720:	64bb      	str	r3, [r7, #72]	; 0x48
 8006722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <find_volume+0x276>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	3330      	adds	r3, #48	; 0x30
 800672c:	3320      	adds	r3, #32
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fbee 	bl	8004f10 <ld_dword>
 8006734:	64b8      	str	r0, [r7, #72]	; 0x48
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	3330      	adds	r3, #48	; 0x30
 800673a:	330e      	adds	r3, #14
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fbcf 	bl	8004ee0 <ld_word>
 8006742:	4603      	mov	r3, r0
 8006744:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <find_volume+0x290>
 800674c:	230d      	movs	r3, #13
 800674e:	e0f9      	b.n	8006944 <find_volume+0x484>
 8006750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006754:	4413      	add	r3, r2
 8006756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006758:	8912      	ldrh	r2, [r2, #8]
 800675a:	0912      	lsrs	r2, r2, #4
 800675c:	b292      	uxth	r2, r2
 800675e:	4413      	add	r3, r2
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
 8006762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	429a      	cmp	r2, r3
 8006768:	d201      	bcs.n	800676e <find_volume+0x2ae>
 800676a:	230d      	movs	r3, #13
 800676c:	e0ea      	b.n	8006944 <find_volume+0x484>
 800676e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006776:	8952      	ldrh	r2, [r2, #10]
 8006778:	fbb3 f3f2 	udiv	r3, r3, r2
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <find_volume+0x2cc>
 8006784:	230d      	movs	r3, #13
 8006786:	e0dd      	b.n	8006944 <find_volume+0x484>
 8006788:	200000d8 	.word	0x200000d8
 800678c:	2303      	movs	r3, #3
 800678e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006798:	4293      	cmp	r3, r2
 800679a:	d802      	bhi.n	80067a2 <find_volume+0x2e2>
 800679c:	2302      	movs	r3, #2
 800679e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d802      	bhi.n	80067b2 <find_volume+0x2f2>
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	1c9a      	adds	r2, r3, #2
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	615a      	str	r2, [r3, #20]
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067be:	61da      	str	r2, [r3, #28]
 80067c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c4:	441a      	add	r2, r3
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	621a      	str	r2, [r3, #32]
 80067ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	441a      	add	r2, r3
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
 80067d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d11e      	bne.n	800681a <find_volume+0x35a>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	3330      	adds	r3, #48	; 0x30
 80067e0:	332a      	adds	r3, #42	; 0x2a
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fb7c 	bl	8004ee0 <ld_word>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <find_volume+0x332>
 80067ee:	230d      	movs	r3, #13
 80067f0:	e0a8      	b.n	8006944 <find_volume+0x484>
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	891b      	ldrh	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <find_volume+0x33e>
 80067fa:	230d      	movs	r3, #13
 80067fc:	e0a2      	b.n	8006944 <find_volume+0x484>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	3330      	adds	r3, #48	; 0x30
 8006802:	332c      	adds	r3, #44	; 0x2c
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fb83 	bl	8004f10 <ld_dword>
 800680a:	4602      	mov	r2, r0
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	625a      	str	r2, [r3, #36]	; 0x24
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	647b      	str	r3, [r7, #68]	; 0x44
 8006818:	e01f      	b.n	800685a <find_volume+0x39a>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	891b      	ldrh	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <find_volume+0x366>
 8006822:	230d      	movs	r3, #13
 8006824:	e08e      	b.n	8006944 <find_volume+0x484>
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	6a1a      	ldr	r2, [r3, #32]
 800682a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682c:	441a      	add	r2, r3
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	625a      	str	r2, [r3, #36]	; 0x24
 8006832:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006836:	2b02      	cmp	r3, #2
 8006838:	d103      	bne.n	8006842 <find_volume+0x382>
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	e00a      	b.n	8006858 <find_volume+0x398>
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	085a      	lsrs	r2, r3, #1
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	4413      	add	r3, r2
 8006858:	647b      	str	r3, [r7, #68]	; 0x44
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006860:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006864:	0a5b      	lsrs	r3, r3, #9
 8006866:	429a      	cmp	r2, r3
 8006868:	d201      	bcs.n	800686e <find_volume+0x3ae>
 800686a:	230d      	movs	r3, #13
 800686c:	e06a      	b.n	8006944 <find_volume+0x484>
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	f04f 32ff 	mov.w	r2, #4294967295
 8006874:	611a      	str	r2, [r3, #16]
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	711a      	strb	r2, [r3, #4]
 8006884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006888:	2b03      	cmp	r3, #3
 800688a:	d149      	bne.n	8006920 <find_volume+0x460>
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	3330      	adds	r3, #48	; 0x30
 8006890:	3330      	adds	r3, #48	; 0x30
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fb24 	bl	8004ee0 <ld_word>
 8006898:	4603      	mov	r3, r0
 800689a:	2b01      	cmp	r3, #1
 800689c:	d140      	bne.n	8006920 <find_volume+0x460>
 800689e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a0:	3301      	adds	r3, #1
 80068a2:	4619      	mov	r1, r3
 80068a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068a6:	f7fe fdcb 	bl	8005440 <move_window>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d137      	bne.n	8006920 <find_volume+0x460>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	2200      	movs	r2, #0
 80068b4:	711a      	strb	r2, [r3, #4]
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	3330      	adds	r3, #48	; 0x30
 80068ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe fb0e 	bl	8004ee0 <ld_word>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d127      	bne.n	8006920 <find_volume+0x460>
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	3330      	adds	r3, #48	; 0x30
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fb1b 	bl	8004f10 <ld_dword>
 80068da:	4602      	mov	r2, r0
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <find_volume+0x48c>)
 80068de:	429a      	cmp	r2, r3
 80068e0:	d11e      	bne.n	8006920 <find_volume+0x460>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	3330      	adds	r3, #48	; 0x30
 80068e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fb10 	bl	8004f10 <ld_dword>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4b17      	ldr	r3, [pc, #92]	; (8006950 <find_volume+0x490>)
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d113      	bne.n	8006920 <find_volume+0x460>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	3330      	adds	r3, #48	; 0x30
 80068fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fb05 	bl	8004f10 <ld_dword>
 8006906:	4602      	mov	r2, r0
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	611a      	str	r2, [r3, #16]
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	3330      	adds	r3, #48	; 0x30
 8006910:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fafb 	bl	8004f10 <ld_dword>
 800691a:	4602      	mov	r2, r0
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	60da      	str	r2, [r3, #12]
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <find_volume+0x494>)
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	4b08      	ldr	r3, [pc, #32]	; (8006954 <find_volume+0x494>)
 8006932:	801a      	strh	r2, [r3, #0]
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <find_volume+0x494>)
 8006936:	881a      	ldrh	r2, [r3, #0]
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	80da      	strh	r2, [r3, #6]
 800693c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800693e:	f7fe fd17 	bl	8005370 <clear_lock>
 8006942:	2300      	movs	r3, #0
 8006944:	4618      	mov	r0, r3
 8006946:	3758      	adds	r7, #88	; 0x58
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	41615252 	.word	0x41615252
 8006950:	61417272 	.word	0x61417272
 8006954:	200000dc 	.word	0x200000dc

08006958 <validate>:
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	2309      	movs	r3, #9
 8006964:	73fb      	strb	r3, [r7, #15]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01c      	beq.n	80069a6 <validate+0x4e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d018      	beq.n	80069a6 <validate+0x4e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d013      	beq.n	80069a6 <validate+0x4e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	889a      	ldrh	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	88db      	ldrh	r3, [r3, #6]
 8006988:	429a      	cmp	r2, r3
 800698a:	d10c      	bne.n	80069a6 <validate+0x4e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fa06 	bl	8004da4 <disk_status>
 8006998:	4603      	mov	r3, r0
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <validate+0x4e>
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <validate+0x5a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	e000      	b.n	80069b4 <validate+0x5c>
 80069b2:	2300      	movs	r3, #0
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <f_mount>:
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	f107 0310 	add.w	r3, r7, #16
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fcd5 	bl	800638a <get_ldnumber>
 80069e0:	61f8      	str	r0, [r7, #28]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da01      	bge.n	80069ec <f_mount+0x28>
 80069e8:	230b      	movs	r3, #11
 80069ea:	e02b      	b.n	8006a44 <f_mount+0x80>
 80069ec:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <f_mount+0x88>)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <f_mount+0x44>
 80069fc:	69b8      	ldr	r0, [r7, #24]
 80069fe:	f7fe fcb7 	bl	8005370 <clear_lock>
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <f_mount+0x50>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	490d      	ldr	r1, [pc, #52]	; (8006a4c <f_mount+0x88>)
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <f_mount+0x66>
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <f_mount+0x6a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e00a      	b.n	8006a44 <f_mount+0x80>
 8006a2e:	f107 010c 	add.w	r1, r7, #12
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	2200      	movs	r2, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fd41 	bl	80064c0 <find_volume>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	4618      	mov	r0, r3
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200000d8 	.word	0x200000d8

08006a50 <f_open>:
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b098      	sub	sp, #96	; 0x60
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	71fb      	strb	r3, [r7, #7]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <f_open+0x18>
 8006a64:	2309      	movs	r3, #9
 8006a66:	e1ad      	b.n	8006dc4 <f_open+0x374>
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a6e:	71fb      	strb	r3, [r7, #7]
 8006a70:	79fa      	ldrb	r2, [r7, #7]
 8006a72:	f107 0110 	add.w	r1, r7, #16
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fd20 	bl	80064c0 <find_volume>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 8191 	bne.w	8006db2 <f_open+0x362>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	f107 0314 	add.w	r3, r7, #20
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fc03 	bl	80062a8 <follow_path>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d11a      	bne.n	8006ae6 <f_open+0x96>
 8006ab0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	da03      	bge.n	8006ac2 <f_open+0x72>
 8006aba:	2306      	movs	r3, #6
 8006abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ac0:	e011      	b.n	8006ae6 <f_open+0x96>
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f107 0314 	add.w	r3, r7, #20
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fb00 	bl	80050e0 <chk_lock>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	f003 031c 	and.w	r3, r3, #28
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d07f      	beq.n	8006bf0 <f_open+0x1a0>
 8006af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d017      	beq.n	8006b28 <f_open+0xd8>
 8006af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d10e      	bne.n	8006b1e <f_open+0xce>
 8006b00:	f7fe fb4a 	bl	8005198 <enq_lock>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <f_open+0xc8>
 8006b0a:	f107 0314 	add.w	r3, r7, #20
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fa86 	bl	8006020 <dir_register>
 8006b14:	4603      	mov	r3, r0
 8006b16:	e000      	b.n	8006b1a <f_open+0xca>
 8006b18:	2312      	movs	r3, #18
 8006b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	f043 0308 	orr.w	r3, r3, #8
 8006b24:	71fb      	strb	r3, [r7, #7]
 8006b26:	e010      	b.n	8006b4a <f_open+0xfa>
 8006b28:	7ebb      	ldrb	r3, [r7, #26]
 8006b2a:	f003 0311 	and.w	r3, r3, #17
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <f_open+0xea>
 8006b32:	2307      	movs	r3, #7
 8006b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b38:	e007      	b.n	8006b4a <f_open+0xfa>
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <f_open+0xfa>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d168      	bne.n	8006c24 <f_open+0x1d4>
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d063      	beq.n	8006c24 <f_open+0x1d4>
 8006b5c:	f002 f968 	bl	8008e30 <get_fattime>
 8006b60:	6538      	str	r0, [r7, #80]	; 0x50
 8006b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b64:	330e      	adds	r3, #14
 8006b66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe fa0f 	bl	8004f8c <st_dword>
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b70:	3316      	adds	r3, #22
 8006b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fa09 	bl	8004f8c <st_dword>
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	330b      	adds	r3, #11
 8006b7e:	2220      	movs	r2, #32
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f958 	bl	8005e3e <ld_clust>
 8006b8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b94:	2200      	movs	r2, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff f970 	bl	8005e7c <st_clust>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	331c      	adds	r3, #28
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe f9f2 	bl	8004f8c <st_dword>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2201      	movs	r2, #1
 8006bac:	70da      	strb	r2, [r3, #3]
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d037      	beq.n	8006c24 <f_open+0x1d4>
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8006bba:	f107 0314 	add.w	r3, r7, #20
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fe83 	bl	80058ce <remove_chain>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d126      	bne.n	8006c24 <f_open+0x1d4>
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fc30 	bl	8005440 <move_window>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bea:	3a01      	subs	r2, #1
 8006bec:	60da      	str	r2, [r3, #12]
 8006bee:	e019      	b.n	8006c24 <f_open+0x1d4>
 8006bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d115      	bne.n	8006c24 <f_open+0x1d4>
 8006bf8:	7ebb      	ldrb	r3, [r7, #26]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <f_open+0x1ba>
 8006c02:	2304      	movs	r3, #4
 8006c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c08:	e00c      	b.n	8006c24 <f_open+0x1d4>
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <f_open+0x1d4>
 8006c14:	7ebb      	ldrb	r3, [r7, #26]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <f_open+0x1d4>
 8006c1e:	2307      	movs	r3, #7
 8006c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d128      	bne.n	8006c7e <f_open+0x22e>
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <f_open+0x1ee>
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3c:	71fb      	strb	r3, [r7, #7]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24
 8006c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f107 0314 	add.w	r3, r7, #20
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe fab9 	bl	80051dc <inc_lock>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	611a      	str	r2, [r3, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <f_open+0x22e>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 8095 	bne.w	8006db2 <f_open+0x362>
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff f8d5 	bl	8005e3e <ld_clust>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	609a      	str	r2, [r3, #8]
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	331c      	adds	r3, #28
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe f936 	bl	8004f10 <ld_dword>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	88da      	ldrh	r2, [r3, #6]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	809a      	strh	r2, [r3, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	79fa      	ldrb	r2, [r7, #7]
 8006cc2:	751a      	strb	r2, [r3, #20]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	755a      	strb	r2, [r3, #21]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	621a      	str	r2, [r3, #32]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	619a      	str	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3330      	adds	r3, #48	; 0x30
 8006cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe f9a0 	bl	8005026 <mem_set>
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d060      	beq.n	8006db2 <f_open+0x362>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05c      	beq.n	8006db2 <f_open+0x362>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	619a      	str	r2, [r3, #24]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	895b      	ldrh	r3, [r3, #10]
 8006d04:	025b      	lsls	r3, r3, #9
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	657b      	str	r3, [r7, #84]	; 0x54
 8006d14:	e016      	b.n	8006d44 <f_open+0x2f4>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fc4b 	bl	80055b6 <get_fat>
 8006d20:	65b8      	str	r0, [r7, #88]	; 0x58
 8006d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d802      	bhi.n	8006d2e <f_open+0x2de>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d102      	bne.n	8006d3c <f_open+0x2ec>
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	657b      	str	r3, [r7, #84]	; 0x54
 8006d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <f_open+0x304>
 8006d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d8e0      	bhi.n	8006d16 <f_open+0x2c6>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d58:	61da      	str	r2, [r3, #28]
 8006d5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d127      	bne.n	8006db2 <f_open+0x362>
 8006d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d022      	beq.n	8006db2 <f_open+0x362>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fc01 	bl	8005578 <clust2sect>
 8006d76:	6478      	str	r0, [r7, #68]	; 0x44
 8006d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <f_open+0x336>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d84:	e015      	b.n	8006db2 <f_open+0x362>
 8006d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d88:	0a5a      	lsrs	r2, r3, #9
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	7858      	ldrb	r0, [r3, #1]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	2301      	movs	r3, #1
 8006da2:	f7fe f83f 	bl	8004e24 <disk_read>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <f_open+0x362>
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006db2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <f_open+0x370>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3760      	adds	r7, #96	; 0x60
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <f_write>:
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08c      	sub	sp, #48	; 0x30
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f107 0210 	add.w	r2, r7, #16
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fdb3 	bl	8006958 <validate>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <f_write+0x44>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	7d5b      	ldrb	r3, [r3, #21]
 8006e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <f_write+0x4a>
 8006e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e14:	e14b      	b.n	80070ae <f_write+0x2e2>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	7d1b      	ldrb	r3, [r3, #20]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <f_write+0x5a>
 8006e22:	2307      	movs	r3, #7
 8006e24:	e143      	b.n	80070ae <f_write+0x2e2>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	f080 812d 	bcs.w	8007092 <f_write+0x2c6>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	e127      	b.n	8007092 <f_write+0x2c6>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 80e3 	bne.w	8007016 <f_write+0x24a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	0a5b      	lsrs	r3, r3, #9
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	8952      	ldrh	r2, [r2, #10]
 8006e5a:	3a01      	subs	r2, #1
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d143      	bne.n	8006eee <f_write+0x122>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10c      	bne.n	8006e88 <f_write+0xbc>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d11a      	bne.n	8006eb0 <f_write+0xe4>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fd8a 	bl	8005998 <create_chain>
 8006e84:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e86:	e013      	b.n	8006eb0 <f_write+0xe4>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <f_write+0xd4>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	4619      	mov	r1, r3
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7fe fe16 	bl	8005ac8 <clmt_clust>
 8006e9c:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e9e:	e007      	b.n	8006eb0 <f_write+0xe4>
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fe fd75 	bl	8005998 <create_chain>
 8006eae:	62b8      	str	r0, [r7, #40]	; 0x28
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80f2 	beq.w	800709c <f_write+0x2d0>
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d104      	bne.n	8006ec8 <f_write+0xfc>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	755a      	strb	r2, [r3, #21]
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e0f2      	b.n	80070ae <f_write+0x2e2>
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d104      	bne.n	8006eda <f_write+0x10e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	755a      	strb	r2, [r3, #21]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e0e9      	b.n	80070ae <f_write+0x2e2>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ede:	61da      	str	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <f_write+0x122>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eec:	609a      	str	r2, [r3, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	7d1b      	ldrb	r3, [r3, #20]
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	da18      	bge.n	8006f2a <f_write+0x15e>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	7858      	ldrb	r0, [r3, #1]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1a      	ldr	r2, [r3, #32]
 8006f06:	2301      	movs	r3, #1
 8006f08:	f7fd ffac 	bl	8004e64 <disk_write>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d004      	beq.n	8006f1c <f_write+0x150>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	755a      	strb	r2, [r3, #21]
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0c8      	b.n	80070ae <f_write+0x2e2>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	7d1b      	ldrb	r3, [r3, #20]
 8006f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	751a      	strb	r2, [r3, #20]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fe fb20 	bl	8005578 <clust2sect>
 8006f38:	6178      	str	r0, [r7, #20]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <f_write+0x17e>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2202      	movs	r2, #2
 8006f44:	755a      	strb	r2, [r3, #21]
 8006f46:	2302      	movs	r3, #2
 8006f48:	e0b1      	b.n	80070ae <f_write+0x2e2>
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	4413      	add	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0a5b      	lsrs	r3, r3, #9
 8006f56:	623b      	str	r3, [r7, #32]
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d03c      	beq.n	8006fd8 <f_write+0x20c>
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	4413      	add	r3, r2
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	8952      	ldrh	r2, [r2, #10]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d905      	bls.n	8006f78 <f_write+0x1ac>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	895b      	ldrh	r3, [r3, #10]
 8006f70:	461a      	mov	r2, r3
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	623b      	str	r3, [r7, #32]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	7858      	ldrb	r0, [r3, #1]
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	f7fd ff6f 	bl	8004e64 <disk_write>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <f_write+0x1ca>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	755a      	strb	r2, [r3, #21]
 8006f92:	2301      	movs	r3, #1
 8006f94:	e08b      	b.n	80070ae <f_write+0x2e2>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d915      	bls.n	8006fd0 <f_write+0x204>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a1a      	ldr	r2, [r3, #32]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	025b      	lsls	r3, r3, #9
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f7fe f811 	bl	8004fe4 <mem_cpy>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	7d1b      	ldrb	r3, [r3, #20]
 8006fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	751a      	strb	r2, [r3, #20]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	025b      	lsls	r3, r3, #9
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd6:	e03f      	b.n	8007058 <f_write+0x28c>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d016      	beq.n	8007010 <f_write+0x244>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d210      	bcs.n	8007010 <f_write+0x244>
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	7858      	ldrb	r0, [r3, #1]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	f7fd ff12 	bl	8004e24 <disk_read>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <f_write+0x244>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	755a      	strb	r2, [r3, #21]
 800700c:	2301      	movs	r3, #1
 800700e:	e04e      	b.n	80070ae <f_write+0x2e2>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
 8007024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d901      	bls.n	8007030 <f_write+0x264>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	4413      	add	r3, r2
 8007040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007042:	69f9      	ldr	r1, [r7, #28]
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd ffcd 	bl	8004fe4 <mem_cpy>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	7d1b      	ldrb	r3, [r3, #20]
 800704e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	751a      	strb	r2, [r3, #20]
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	4413      	add	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	441a      	add	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	619a      	str	r2, [r3, #24]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	bf38      	it	cc
 8007078:	461a      	movcc	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	441a      	add	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	607b      	str	r3, [r7, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f aed4 	bne.w	8006e42 <f_write+0x76>
 800709a:	e000      	b.n	800709e <f_write+0x2d2>
 800709c:	bf00      	nop
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7d1b      	ldrb	r3, [r3, #20]
 80070a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	751a      	strb	r2, [r3, #20]
 80070ac:	2300      	movs	r3, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	3730      	adds	r7, #48	; 0x30
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <f_sync>:
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b086      	sub	sp, #24
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f107 0208 	add.w	r2, r7, #8
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fc46 	bl	8006958 <validate>
 80070cc:	4603      	mov	r3, r0
 80070ce:	75fb      	strb	r3, [r7, #23]
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d168      	bne.n	80071a8 <f_sync+0xf2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7d1b      	ldrb	r3, [r3, #20]
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d062      	beq.n	80071a8 <f_sync+0xf2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7d1b      	ldrb	r3, [r3, #20]
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	da15      	bge.n	8007118 <f_sync+0x62>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	7858      	ldrb	r0, [r3, #1]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1a      	ldr	r2, [r3, #32]
 80070fa:	2301      	movs	r3, #1
 80070fc:	f7fd feb2 	bl	8004e64 <disk_write>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <f_sync+0x54>
 8007106:	2301      	movs	r3, #1
 8007108:	e04f      	b.n	80071aa <f_sync+0xf4>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7d1b      	ldrb	r3, [r3, #20]
 800710e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007112:	b2da      	uxtb	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	751a      	strb	r2, [r3, #20]
 8007118:	f001 fe8a 	bl	8008e30 <get_fattime>
 800711c:	6138      	str	r0, [r7, #16]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7fe f98a 	bl	8005440 <move_window>
 800712c:	4603      	mov	r3, r0
 800712e:	75fb      	strb	r3, [r7, #23]
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d138      	bne.n	80071a8 <f_sync+0xf2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	330b      	adds	r3, #11
 8007140:	781a      	ldrb	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	330b      	adds	r3, #11
 8007146:	f042 0220 	orr.w	r2, r2, #32
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	461a      	mov	r2, r3
 8007158:	68f9      	ldr	r1, [r7, #12]
 800715a:	f7fe fe8f 	bl	8005e7c <st_clust>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f103 021c 	add.w	r2, r3, #28
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7fd ff0e 	bl	8004f8c <st_dword>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3316      	adds	r3, #22
 8007174:	6939      	ldr	r1, [r7, #16]
 8007176:	4618      	mov	r0, r3
 8007178:	f7fd ff08 	bl	8004f8c <st_dword>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3312      	adds	r3, #18
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd fee7 	bl	8004f56 <st_word>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2201      	movs	r2, #1
 800718c:	70da      	strb	r2, [r3, #3]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe f983 	bl	800549c <sync_fs>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	751a      	strb	r2, [r3, #20]
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <f_close>:
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff ff7b 	bl	80070b6 <f_sync>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d118      	bne.n	80071fc <f_close+0x4a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f107 0208 	add.w	r2, r7, #8
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fbc0 	bl	8006958 <validate>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10c      	bne.n	80071fc <f_close+0x4a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe f886 	bl	80052f8 <dec_lock>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <f_close+0x4a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <f_stat>:
 8007206:	b580      	push	{r7, lr}
 8007208:	b090      	sub	sp, #64	; 0x40
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
 8007210:	f107 010c 	add.w	r1, r7, #12
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	2200      	movs	r2, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff f951 	bl	80064c0 <find_volume>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007224:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007228:	2b00      	cmp	r3, #0
 800722a:	d11f      	bne.n	800726c <f_stat+0x66>
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	f107 030c 	add.w	r3, r7, #12
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff f837 	bl	80062a8 <follow_path>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007244:	2b00      	cmp	r3, #0
 8007246:	d111      	bne.n	800726c <f_stat+0x66>
 8007248:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800724c:	b25b      	sxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	da03      	bge.n	800725a <f_stat+0x54>
 8007252:	2306      	movs	r3, #6
 8007254:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007258:	e008      	b.n	800726c <f_stat+0x66>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <f_stat+0x66>
 8007260:	f107 030c 	add.w	r3, r7, #12
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe ff2a 	bl	80060c0 <get_fileinfo>
 800726c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007270:	4618      	mov	r0, r3
 8007272:	3740      	adds	r7, #64	; 0x40
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <f_unlink>:
 8007278:	b580      	push	{r7, lr}
 800727a:	b09e      	sub	sp, #120	; 0x78
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	2300      	movs	r3, #0
 8007282:	673b      	str	r3, [r7, #112]	; 0x70
 8007284:	f107 010c 	add.w	r1, r7, #12
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	2202      	movs	r2, #2
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff f917 	bl	80064c0 <find_volume>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	643b      	str	r3, [r7, #64]	; 0x40
 800729c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 808e 	bne.w	80073c2 <f_unlink+0x14a>
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fffa 	bl	80062a8 <follow_path>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80072ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d108      	bne.n	80072d4 <f_unlink+0x5c>
 80072c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072c6:	2102      	movs	r1, #2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fd ff09 	bl	80050e0 <chk_lock>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80072d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d172      	bne.n	80073c2 <f_unlink+0x14a>
 80072dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072e0:	b25b      	sxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da03      	bge.n	80072ee <f_unlink+0x76>
 80072e6:	2306      	movs	r3, #6
 80072e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80072ec:	e008      	b.n	8007300 <f_unlink+0x88>
 80072ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <f_unlink+0x88>
 80072fa:	2307      	movs	r3, #7
 80072fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007300:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007304:	2b00      	cmp	r3, #0
 8007306:	d134      	bne.n	8007372 <f_unlink+0xfa>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fd95 	bl	8005e3e <ld_clust>
 8007314:	6738      	str	r0, [r7, #112]	; 0x70
 8007316:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	d027      	beq.n	8007372 <f_unlink+0xfa>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	f107 0310 	add.w	r3, r7, #16
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fbfd 	bl	8005b30 <dir_sdi>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800733c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007340:	2b00      	cmp	r3, #0
 8007342:	d116      	bne.n	8007372 <f_unlink+0xfa>
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fdb6 	bl	8005ebc <dir_read>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007356:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <f_unlink+0xec>
 800735e:	2307      	movs	r3, #7
 8007360:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007364:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007368:	2b04      	cmp	r3, #4
 800736a:	d102      	bne.n	8007372 <f_unlink+0xfa>
 800736c:	2300      	movs	r3, #0
 800736e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007372:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007376:	2b00      	cmp	r3, #0
 8007378:	d123      	bne.n	80073c2 <f_unlink+0x14a>
 800737a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fe80 	bl	8006084 <dir_remove>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800738a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <f_unlink+0x134>
 8007392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <f_unlink+0x134>
 8007398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800739c:	2200      	movs	r2, #0
 800739e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fa94 	bl	80058ce <remove_chain>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80073ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <f_unlink+0x14a>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe f870 	bl	800549c <sync_fs>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80073c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80073c6:	4618      	mov	r0, r3
 80073c8:	3778      	adds	r7, #120	; 0x78
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <f_mkdir>:
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b096      	sub	sp, #88	; 0x58
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	f107 0108 	add.w	r1, r7, #8
 80073da:	1d3b      	adds	r3, r7, #4
 80073dc:	2202      	movs	r2, #2
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff f86e 	bl	80064c0 <find_volume>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f040 80ec 	bne.w	80075d0 <f_mkdir+0x202>
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	f107 030c 	add.w	r3, r7, #12
 80073fe:	4611      	mov	r1, r2
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe ff51 	bl	80062a8 <follow_path>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800740c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <f_mkdir+0x4c>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800741a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800741e:	2b04      	cmp	r3, #4
 8007420:	f040 80d6 	bne.w	80075d0 <f_mkdir+0x202>
 8007424:	f107 030c 	add.w	r3, r7, #12
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fab4 	bl	8005998 <create_chain>
 8007430:	6478      	str	r0, [r7, #68]	; 0x44
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	895b      	ldrh	r3, [r3, #10]
 8007436:	025b      	lsls	r3, r3, #9
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <f_mkdir+0x7e>
 8007446:	2307      	movs	r3, #7
 8007448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800744c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744e:	2b01      	cmp	r3, #1
 8007450:	d102      	bne.n	8007458 <f_mkdir+0x8a>
 8007452:	2302      	movs	r3, #2
 8007454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <f_mkdir+0x98>
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <f_mkdir+0xae>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f7fd ffa1 	bl	80053b8 <sync_window>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800747c:	f001 fcd8 	bl	8008e30 <get_fattime>
 8007480:	6438      	str	r0, [r7, #64]	; 0x40
 8007482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007486:	2b00      	cmp	r3, #0
 8007488:	d16a      	bne.n	8007560 <f_mkdir+0x192>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe f872 	bl	8005578 <clust2sect>
 8007494:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3330      	adds	r3, #48	; 0x30
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800749c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a0:	2100      	movs	r1, #0
 80074a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074a4:	f7fd fdbf 	bl	8005026 <mem_set>
 80074a8:	220b      	movs	r2, #11
 80074aa:	2120      	movs	r1, #32
 80074ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074ae:	f7fd fdba 	bl	8005026 <mem_set>
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	222e      	movs	r2, #46	; 0x2e
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ba:	330b      	adds	r3, #11
 80074bc:	2210      	movs	r2, #16
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c2:	3316      	adds	r3, #22
 80074c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd fd60 	bl	8004f8c <st_dword>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fcd2 	bl	8005e7c <st_clust>
 80074d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074da:	3320      	adds	r3, #32
 80074dc:	2220      	movs	r2, #32
 80074de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fd7f 	bl	8004fe4 <mem_cpy>
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	3321      	adds	r3, #33	; 0x21
 80074ea:	222e      	movs	r2, #46	; 0x2e
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d106      	bne.n	8007508 <f_mkdir+0x13a>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007500:	429a      	cmp	r2, r3
 8007502:	d101      	bne.n	8007508 <f_mkdir+0x13a>
 8007504:	2300      	movs	r3, #0
 8007506:	64bb      	str	r3, [r7, #72]	; 0x48
 8007508:	68b8      	ldr	r0, [r7, #8]
 800750a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750c:	3320      	adds	r3, #32
 800750e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007510:	4619      	mov	r1, r3
 8007512:	f7fe fcb3 	bl	8005e7c <st_clust>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	895b      	ldrh	r3, [r3, #10]
 800751a:	653b      	str	r3, [r7, #80]	; 0x50
 800751c:	e01b      	b.n	8007556 <f_mkdir+0x188>
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2201      	movs	r2, #1
 800752c:	70da      	strb	r2, [r3, #3]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4618      	mov	r0, r3
 8007532:	f7fd ff41 	bl	80053b8 <sync_window>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800753c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10c      	bne.n	800755e <f_mkdir+0x190>
 8007544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007548:	2100      	movs	r1, #0
 800754a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800754c:	f7fd fd6b 	bl	8005026 <mem_set>
 8007550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007552:	3b01      	subs	r3, #1
 8007554:	653b      	str	r3, [r7, #80]	; 0x50
 8007556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e0      	bne.n	800751e <f_mkdir+0x150>
 800755c:	e000      	b.n	8007560 <f_mkdir+0x192>
 800755e:	bf00      	nop
 8007560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <f_mkdir+0x1aa>
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fd57 	bl	8006020 <dir_register>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800757c:	2b00      	cmp	r3, #0
 800757e:	d120      	bne.n	80075c2 <f_mkdir+0x1f4>
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007586:	3316      	adds	r3, #22
 8007588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800758a:	4618      	mov	r0, r3
 800758c:	f7fd fcfe 	bl	8004f8c <st_dword>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fc70 	bl	8005e7c <st_clust>
 800759c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759e:	330b      	adds	r3, #11
 80075a0:	2210      	movs	r2, #16
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2201      	movs	r2, #1
 80075a8:	70da      	strb	r2, [r3, #3]
 80075aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10e      	bne.n	80075d0 <f_mkdir+0x202>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fd ff71 	bl	800549c <sync_fs>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80075c0:	e006      	b.n	80075d0 <f_mkdir+0x202>
 80075c2:	f107 030c 	add.w	r3, r7, #12
 80075c6:	2200      	movs	r2, #0
 80075c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe f97f 	bl	80058ce <remove_chain>
 80075d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075d4:	4618      	mov	r0, r3
 80075d6:	3758      	adds	r7, #88	; 0x58
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <putc_bfd>:
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	2b0a      	cmp	r3, #10
 80075ec:	d103      	bne.n	80075f6 <putc_bfd+0x1a>
 80075ee:	210d      	movs	r1, #13
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fff3 	bl	80075dc <putc_bfd>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	db25      	blt.n	800764e <putc_bfd+0x72>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	60fa      	str	r2, [r7, #12]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4413      	add	r3, r2
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	731a      	strb	r2, [r3, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b3c      	cmp	r3, #60	; 0x3c
 8007614:	dd12      	ble.n	800763c <putc_bfd+0x60>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f103 010c 	add.w	r1, r3, #12
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	f107 0308 	add.w	r3, r7, #8
 8007626:	f7ff fbd1 	bl	8006dcc <f_write>
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	429a      	cmp	r2, r3
 8007630:	d101      	bne.n	8007636 <putc_bfd+0x5a>
 8007632:	2300      	movs	r3, #0
 8007634:	e001      	b.n	800763a <putc_bfd+0x5e>
 8007636:	f04f 33ff 	mov.w	r3, #4294967295
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	609a      	str	r2, [r3, #8]
 800764c:	e000      	b.n	8007650 <putc_bfd+0x74>
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <putc_flush>:
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	db17      	blt.n	8007696 <putc_flush+0x40>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f103 010c 	add.w	r1, r3, #12
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	461a      	mov	r2, r3
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	f7ff fba7 	bl	8006dcc <f_write>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d108      	bne.n	8007696 <putc_flush+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	461a      	mov	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	429a      	cmp	r2, r3
 800768e:	d102      	bne.n	8007696 <putc_flush+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	e001      	b.n	800769a <putc_flush+0x44>
 8007696:	f04f 33ff 	mov.w	r3, #4294967295
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <putc_init>:
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	605a      	str	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	609a      	str	r2, [r3, #8]
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <f_printf>:
 80076cc:	b40e      	push	{r1, r2, r3}
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b0a7      	sub	sp, #156	; 0x9c
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff ffe0 	bl	80076a2 <putc_init>
 80076e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80076e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80076e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80076f8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 81f4 	beq.w	8007aea <f_printf+0x41e>
 8007702:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007706:	2b25      	cmp	r3, #37	; 0x25
 8007708:	d008      	beq.n	800771c <f_printf+0x50>
 800770a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800770e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007712:	4611      	mov	r1, r2
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff ff61 	bl	80075dc <putc_bfd>
 800771a:	e1e5      	b.n	8007ae8 <f_printf+0x41c>
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007722:	2300      	movs	r3, #0
 8007724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007738:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800773c:	2b30      	cmp	r3, #48	; 0x30
 800773e:	d10b      	bne.n	8007758 <f_printf+0x8c>
 8007740:	2301      	movs	r3, #1
 8007742:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007756:	e024      	b.n	80077a2 <f_printf+0xd6>
 8007758:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800775c:	2b2d      	cmp	r3, #45	; 0x2d
 800775e:	d120      	bne.n	80077a2 <f_printf+0xd6>
 8007760:	2302      	movs	r3, #2
 8007762:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8007776:	e014      	b.n	80077a2 <f_printf+0xd6>
 8007778:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	461a      	mov	r2, r3
 8007786:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800778a:	4413      	add	r3, r2
 800778c:	3b30      	subs	r3, #48	; 0x30
 800778e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80077a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80077a6:	2b2f      	cmp	r3, #47	; 0x2f
 80077a8:	d903      	bls.n	80077b2 <f_printf+0xe6>
 80077aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80077ae:	2b39      	cmp	r3, #57	; 0x39
 80077b0:	d9e2      	bls.n	8007778 <f_printf+0xac>
 80077b2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80077b6:	2b6c      	cmp	r3, #108	; 0x6c
 80077b8:	d003      	beq.n	80077c2 <f_printf+0xf6>
 80077ba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80077be:	2b4c      	cmp	r3, #76	; 0x4c
 80077c0:	d10d      	bne.n	80077de <f_printf+0x112>
 80077c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80077c6:	f043 0304 	orr.w	r3, r3, #4
 80077ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80077ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80077de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8183 	beq.w	8007aee <f_printf+0x422>
 80077e8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80077ec:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80077f0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80077f4:	2b60      	cmp	r3, #96	; 0x60
 80077f6:	d908      	bls.n	800780a <f_printf+0x13e>
 80077f8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80077fc:	2b7a      	cmp	r3, #122	; 0x7a
 80077fe:	d804      	bhi.n	800780a <f_printf+0x13e>
 8007800:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007804:	3b20      	subs	r3, #32
 8007806:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800780a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800780e:	3b42      	subs	r3, #66	; 0x42
 8007810:	2b16      	cmp	r3, #22
 8007812:	f200 8098 	bhi.w	8007946 <f_printf+0x27a>
 8007816:	a201      	add	r2, pc, #4	; (adr r2, 800781c <f_printf+0x150>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	08007927 	.word	0x08007927
 8007820:	0800790f 	.word	0x0800790f
 8007824:	08007937 	.word	0x08007937
 8007828:	08007947 	.word	0x08007947
 800782c:	08007947 	.word	0x08007947
 8007830:	08007947 	.word	0x08007947
 8007834:	08007947 	.word	0x08007947
 8007838:	08007947 	.word	0x08007947
 800783c:	08007947 	.word	0x08007947
 8007840:	08007947 	.word	0x08007947
 8007844:	08007947 	.word	0x08007947
 8007848:	08007947 	.word	0x08007947
 800784c:	08007947 	.word	0x08007947
 8007850:	0800792f 	.word	0x0800792f
 8007854:	08007947 	.word	0x08007947
 8007858:	08007947 	.word	0x08007947
 800785c:	08007947 	.word	0x08007947
 8007860:	08007879 	.word	0x08007879
 8007864:	08007947 	.word	0x08007947
 8007868:	08007937 	.word	0x08007937
 800786c:	08007947 	.word	0x08007947
 8007870:	08007947 	.word	0x08007947
 8007874:	0800793f 	.word	0x0800793f
 8007878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787a:	1d1a      	adds	r2, r3, #4
 800787c:	67ba      	str	r2, [r7, #120]	; 0x78
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007882:	2300      	movs	r3, #0
 8007884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007888:	e004      	b.n	8007894 <f_printf+0x1c8>
 800788a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800788e:	3301      	adds	r3, #1
 8007890:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007894:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f3      	bne.n	800788a <f_printf+0x1be>
 80078a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d11a      	bne.n	80078e4 <f_printf+0x218>
 80078ae:	e005      	b.n	80078bc <f_printf+0x1f0>
 80078b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078b4:	2120      	movs	r1, #32
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fe90 	bl	80075dc <putc_bfd>
 80078bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d8f0      	bhi.n	80078b0 <f_printf+0x1e4>
 80078ce:	e009      	b.n	80078e4 <f_printf+0x218>
 80078d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fe7c 	bl	80075dc <putc_bfd>
 80078e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f1      	bne.n	80078d0 <f_printf+0x204>
 80078ec:	e005      	b.n	80078fa <f_printf+0x22e>
 80078ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078f2:	2120      	movs	r1, #32
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fe71 	bl	80075dc <putc_bfd>
 80078fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007904:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007908:	429a      	cmp	r2, r3
 800790a:	d8f0      	bhi.n	80078ee <f_printf+0x222>
 800790c:	e0ec      	b.n	8007ae8 <f_printf+0x41c>
 800790e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007910:	1d1a      	adds	r2, r3, #4
 8007912:	67ba      	str	r2, [r7, #120]	; 0x78
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fe5c 	bl	80075dc <putc_bfd>
 8007924:	e0e0      	b.n	8007ae8 <f_printf+0x41c>
 8007926:	2302      	movs	r3, #2
 8007928:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800792c:	e014      	b.n	8007958 <f_printf+0x28c>
 800792e:	2308      	movs	r3, #8
 8007930:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007934:	e010      	b.n	8007958 <f_printf+0x28c>
 8007936:	230a      	movs	r3, #10
 8007938:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800793c:	e00c      	b.n	8007958 <f_printf+0x28c>
 800793e:	2310      	movs	r3, #16
 8007940:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8007944:	e008      	b.n	8007958 <f_printf+0x28c>
 8007946:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800794a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff fe43 	bl	80075dc <putc_bfd>
 8007956:	e0c7      	b.n	8007ae8 <f_printf+0x41c>
 8007958:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <f_printf+0x2a2>
 8007964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007966:	1d1a      	adds	r2, r3, #4
 8007968:	67ba      	str	r2, [r7, #120]	; 0x78
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	e00c      	b.n	8007988 <f_printf+0x2bc>
 800796e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007972:	2b44      	cmp	r3, #68	; 0x44
 8007974:	d104      	bne.n	8007980 <f_printf+0x2b4>
 8007976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007978:	1d1a      	adds	r2, r3, #4
 800797a:	67ba      	str	r2, [r7, #120]	; 0x78
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	e003      	b.n	8007988 <f_printf+0x2bc>
 8007980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	67ba      	str	r2, [r7, #120]	; 0x78
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800798c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007990:	2b44      	cmp	r3, #68	; 0x44
 8007992:	d10e      	bne.n	80079b2 <f_printf+0x2e6>
 8007994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007998:	2b00      	cmp	r3, #0
 800799a:	da0a      	bge.n	80079b2 <f_printf+0x2e6>
 800799c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a0:	425b      	negs	r3, r3
 80079a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80079aa:	f043 0308 	orr.w	r3, r3, #8
 80079ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80079b2:	2300      	movs	r3, #0
 80079b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079b8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80079bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80079c4:	fb02 f201 	mul.w	r2, r2, r1
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80079ce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80079d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80079d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079de:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80079e2:	2b09      	cmp	r3, #9
 80079e4:	d90b      	bls.n	80079fe <f_printf+0x332>
 80079e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80079ea:	2b78      	cmp	r3, #120	; 0x78
 80079ec:	d101      	bne.n	80079f2 <f_printf+0x326>
 80079ee:	2227      	movs	r2, #39	; 0x27
 80079f0:	e000      	b.n	80079f4 <f_printf+0x328>
 80079f2:	2207      	movs	r2, #7
 80079f4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80079f8:	4413      	add	r3, r2
 80079fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80079fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007a08:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007a0c:	3230      	adds	r2, #48	; 0x30
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007a14:	440b      	add	r3, r1
 8007a16:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8007a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <f_printf+0x35e>
 8007a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a26:	2b1f      	cmp	r3, #31
 8007a28:	d9c6      	bls.n	80079b8 <f_printf+0x2ec>
 8007a2a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <f_printf+0x380>
 8007a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007a40:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007a44:	4413      	add	r3, r2
 8007a46:	222d      	movs	r2, #45	; 0x2d
 8007a48:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8007a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <f_printf+0x398>
 8007a60:	2330      	movs	r3, #48	; 0x30
 8007a62:	e000      	b.n	8007a66 <f_printf+0x39a>
 8007a64:	2320      	movs	r3, #32
 8007a66:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8007a6a:	e007      	b.n	8007a7c <f_printf+0x3b0>
 8007a6c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fdb0 	bl	80075dc <putc_bfd>
 8007a7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <f_printf+0x3ce>
 8007a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d8e8      	bhi.n	8007a6c <f_printf+0x3a0>
 8007a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aa4:	f107 020c 	add.w	r2, r7, #12
 8007aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007aac:	4413      	add	r3, r2
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff fd90 	bl	80075dc <putc_bfd>
 8007abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1ea      	bne.n	8007a9a <f_printf+0x3ce>
 8007ac4:	e007      	b.n	8007ad6 <f_printf+0x40a>
 8007ac6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8007aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fd83 	bl	80075dc <putc_bfd>
 8007ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ae0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d8ee      	bhi.n	8007ac6 <f_printf+0x3fa>
 8007ae8:	e5fe      	b.n	80076e8 <f_printf+0x1c>
 8007aea:	bf00      	nop
 8007aec:	e000      	b.n	8007af0 <f_printf+0x424>
 8007aee:	bf00      	nop
 8007af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fdae 	bl	8007656 <putc_flush>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4618      	mov	r0, r3
 8007afe:	379c      	adds	r7, #156	; 0x9c
 8007b00:	46bd      	mov	sp, r7
 8007b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b06:	b003      	add	sp, #12
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop

08007b0c <FATFS_LinkDriverEx>:
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75bb      	strb	r3, [r7, #22]
 8007b22:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b24:	7a5b      	ldrb	r3, [r3, #9]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d131      	bne.n	8007b90 <FATFS_LinkDriverEx+0x84>
 8007b2c:	4b1c      	ldr	r3, [pc, #112]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b2e:	7a5b      	ldrb	r3, [r3, #9]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]
 8007b3a:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b3c:	7a5b      	ldrb	r3, [r3, #9]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b4c:	7a5b      	ldrb	r3, [r3, #9]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b54:	4413      	add	r3, r2
 8007b56:	79fa      	ldrb	r2, [r7, #7]
 8007b58:	721a      	strb	r2, [r3, #8]
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b5c:	7a5b      	ldrb	r3, [r3, #9]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	b2d1      	uxtb	r1, r2
 8007b64:	4a0e      	ldr	r2, [pc, #56]	; (8007ba0 <FATFS_LinkDriverEx+0x94>)
 8007b66:	7251      	strb	r1, [r2, #9]
 8007b68:	75bb      	strb	r3, [r7, #22]
 8007b6a:	7dbb      	ldrb	r3, [r7, #22]
 8007b6c:	3330      	adds	r3, #48	; 0x30
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	3301      	adds	r3, #1
 8007b78:	223a      	movs	r2, #58	; 0x3a
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3302      	adds	r3, #2
 8007b80:	222f      	movs	r2, #47	; 0x2f
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3303      	adds	r3, #3
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	75fb      	strb	r3, [r7, #23]
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	4618      	mov	r0, r3
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20000100 	.word	0x20000100

08007ba4 <FATFS_LinkDriver>:
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ffaa 	bl	8007b0c <FATFS_LinkDriverEx>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <_ZNK6Status7OpenAIREv>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
	}

	/* De-energize AIR (Accumulator Indicator Relay). */
	void OpenAIR(void) const {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
 8007bcc:	2201      	movs	r2, #1
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4805      	ldr	r0, [pc, #20]	; (8007be8 <_ZNK6Status7OpenAIREv+0x24>)
 8007bd2:	f7f9 fe3b 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	2104      	movs	r1, #4
 8007bda:	4804      	ldr	r0, [pc, #16]	; (8007bec <_ZNK6Status7OpenAIREv+0x28>)
 8007bdc:	f7f9 fe36 	bl	800184c <HAL_GPIO_WritePin>
	}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40020400 	.word	0x40020400
 8007bec:	40020800 	.word	0x40020800

08007bf0 <_ZN6Status7OpenPREEv>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // LED1
		precharge_flag = true;
	}

	/* De-energize PRE (Pre-charge Relay). */
	void OpenPRE(void) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // PRECHARGE
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	4807      	ldr	r0, [pc, #28]	; (8007c1c <_ZN6Status7OpenPREEv+0x2c>)
 8007bfe:	f7f9 fe25 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // LED1
 8007c02:	2200      	movs	r2, #0
 8007c04:	2102      	movs	r1, #2
 8007c06:	4806      	ldr	r0, [pc, #24]	; (8007c20 <_ZN6Status7OpenPREEv+0x30>)
 8007c08:	f7f9 fe20 	bl	800184c <HAL_GPIO_WritePin>
		precharge_flag = false;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	731a      	strb	r2, [r3, #12]
	}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40020400 	.word	0x40020400
 8007c20:	40020800 	.word	0x40020800

08007c24 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>:

		return pec_change;
	}

	/* Sets BMS into safe state. */
	void GoToSafeState(ErrorEvent e) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
#if BMS_RELAY_CTRL_BYPASS
		// Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
		if (e != PecError) {
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d005      	beq.n	8007c42 <_ZN6Status13GoToSafeStateENS_10ErrorEventE+0x1e>
			OpenAIR();
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ffc4 	bl	8007bc4 <_ZNK6Status7OpenAIREv>
			OpenPRE();
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ffd7 	bl	8007bf0 <_ZN6Status7OpenPREEv>
		OpenAIR();
		OpenPRE();
#endif

#if STOP_CORE_ON_SAFE_STATE
		op_mode &= ~Core;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	701a      	strb	r2, [r3, #0]
#endif

#if START_DEBUG_ON_SAFE_STATE
		op_mode |= Debug;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f043 0308 	orr.w	r3, r3, #8
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	701a      	strb	r2, [r3, #0]
#endif
		safe_state_executed = true;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	735a      	strb	r2, [r3, #13]
		reason_code = e;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	739a      	strb	r2, [r3, #14]
	}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>:
		}
#endif
		return 0;
	}

	int8_t ErrorHandler(ErrorEvent e, bool occurred) {
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	70bb      	strb	r3, [r7, #2]
		if(++error_counters[e] > kErrorLimit || !tested) {
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	f103 0210 	add.w	r2, r3, #16
 8007c8a:	0092      	lsls	r2, r2, #2
 8007c8c:	440a      	add	r2, r1
 8007c8e:	6852      	ldr	r2, [r2, #4]
 8007c90:	1c51      	adds	r1, r2, #1
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f103 0210 	add.w	r2, r3, #16
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	4402      	add	r2, r0
 8007c9c:	6051      	str	r1, [r2, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	3310      	adds	r3, #16
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d807      	bhi.n	8007cbc <_ZN6Status12ErrorHandlerENS_10ErrorEventEb+0x4a>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007cb2:	f083 0301 	eor.w	r3, r3, #1
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb+0x4e>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb+0x50>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb+0x64>
			GoToSafeState(e);
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff ffaa 	bl	8007c24 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>
			return -1;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd4:	e016      	b.n	8007d04 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb+0x92>
		} else if (error_counters[e] > 0)
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	3310      	adds	r3, #16
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00d      	beq.n	8007d02 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb+0x90>
			--error_counters[e];
 8007ce6:	78fa      	ldrb	r2, [r7, #3]
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	f102 0310 	add.w	r3, r2, #16
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	1e59      	subs	r1, r3, #1
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f102 0310 	add.w	r3, r2, #16
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4403      	add	r3, r0
 8007d00:	6059      	str	r1, [r3, #4]

		return 0;
 8007d02:	2300      	movs	r3, #0
	}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZN9__gnu_cxx5__ops15__iter_less_valEv>:
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <_ZN9__gnu_cxx5__ops15__val_less_iterEv>:
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }
 8007d1a:	b480      	push	{r7}
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <_ZN7LTC682012WakeFromIdleEv>:
}

uint8_t discharge_mode { 0 };

/* Wake the LTC SPI from IDLE state. */
void WakeFromIdle(void) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0xFF;
 8007d30:	23ff      	movs	r3, #255	; 0xff
 8007d32:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi, &data, 1, 10);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6858      	ldr	r0, [r3, #4]
 8007d38:	f107 010f 	add.w	r1, r7, #15
 8007d3c:	230a      	movs	r3, #10
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f7fb ff4d 	bl	8003bde <HAL_SPI_Transmit>
	HAL_Delay(IC_NUM * T_READY);
 8007d44:	2078      	movs	r0, #120	; 0x78
 8007d46:	f7f8 fc4f 	bl	80005e8 <HAL_Delay>
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <_ZN7LTC68204adcvEv>:
 *      Author: Joshua
 */

#include "LTC6811.h"

void LTC6820::adcv(void) {
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
	WakeFromIdle();
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff ffe4 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>
	HAL_SPI_Transmit(&hspi, ADCV, 4, 10);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6858      	ldr	r0, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8007d6a:	230a      	movs	r3, #10
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	f7fb ff36 	bl	8003bde <HAL_SPI_Transmit>
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZN7LTC68204adaxEv>:


/* Start an GPIO Conversion. */
void LTC6820::adax(void) {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
	WakeFromIdle();
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff ffd0 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>
	HAL_SPI_Transmit(&hspi, ADAX, 4, 10);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6858      	ldr	r0, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f103 0194 	add.w	r1, r3, #148	; 0x94
 8007d92:	230a      	movs	r3, #10
 8007d94:	2204      	movs	r2, #4
 8007d96:	f7fb ff22 	bl	8003bde <HAL_SPI_Transmit>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t>:
	WakeFromIdle();
	HAL_SPI_Transmit(&hspi, ADSTAT, 4, 10);
}

/* Reads and parses the LTC6804 cell voltage registers. */
uint8_t LTC6820::ReadVoltageHelper(VoltageRegisters& cell_data) {
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b08b      	sub	sp, #44	; 0x2c
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	uint8_t const bytes_in_reg = 6, cells_in_reg = 3;
 8007dae:	2306      	movs	r3, #6
 8007db0:	76fb      	strb	r3, [r7, #27]
 8007db2:	2303      	movs	r3, #3
 8007db4:	76bb      	strb	r3, [r7, #26]
	uint8_t pec_error;
	status.sum_of_cells = 0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
	// TODO min and max might need to be reset
	for (uint8_t reg = 0; reg < 4; ++reg) {
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	f200 8183 	bhi.w	80080d4 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x330>
		uint8_t data_counter = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		ReadVoltageRegister(reg);
 8007dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f984 	bl	80080e8 <_ZN7LTC682019ReadVoltageRegisterEh>

		for (auto& row : cell_data) {
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	623b      	str	r3, [r7, #32]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	6a3a      	ldr	r2, [r7, #32]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	f000 813d 	beq.w	8008074 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x2d0>
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	60fb      	str	r3, [r7, #12]
			for (auto voltage = std::begin(row) + reg * cells_in_reg; voltage != std::begin(row) + (reg + 1) * cells_in_reg; ++voltage, data_counter += 2) {
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fc1c 	bl	800863c <_ZSt5beginItLj12EEPT_RAT0__S0_>
 8007e04:	4601      	mov	r1, r0
 8007e06:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	4413      	add	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	440b      	add	r3, r1
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fc10 	bl	800863c <_ZSt5beginItLj12EEPT_RAT0__S0_>
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	4613      	mov	r3, r2
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	4413      	add	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	440b      	add	r3, r1
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	bf14      	ite	ne
 8007e34:	2301      	movne	r3, #1
 8007e36:	2300      	moveq	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80dd 	beq.w	8007ffa <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x256>
				*voltage = buffer[data_counter + 1] << 8 | buffer[data_counter];
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007e46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f000 fbd8 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8007e54:	4603      	mov	r3, r0
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	b21c      	sxth	r4, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	332c      	adds	r3, #44	; 0x2c
 8007e60:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fbcc 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b21b      	sxth	r3, r3
 8007e72:	4323      	orrs	r3, r4
 8007e74:	b21b      	sxth	r3, r3
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	801a      	strh	r2, [r3, #0]
				status.sum_of_cells += *voltage;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	881a      	ldrh	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	b292      	uxth	r2, r2
 8007e8e:	879a      	strh	r2, [r3, #60]	; 0x3c

				if (*voltage < status.min_voltage && *voltage > 5000) {
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d25c      	bcs.n	8007f58 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x1b4>
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d956      	bls.n	8007f58 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x1b4>
					status.min_voltage = *voltage;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	8812      	ldrh	r2, [r2, #0]
 8007eb2:	869a      	strh	r2, [r3, #52]	; 0x34
					status.min_voltage_id = std::distance(*cell_data, voltage);
 8007eb4:	69f9      	ldr	r1, [r7, #28]
 8007eb6:	6838      	ldr	r0, [r7, #0]
 8007eb8:	f000 fbd5 	bl	8008666 <_ZSt8distanceIPtENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
#if TEST_UNDERVOLTAGE
					if (status.ErrorHandler(Status::Undervoltage, status.min_voltage < kMinVoltage))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6898      	ldr	r0, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007ed2:	f647 1217 	movw	r2, #30999	; 0x7917
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	bf94      	ite	ls
 8007eda:	2301      	movls	r3, #1
 8007edc:	2300      	movhi	r3, #0
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	f7ff fec5 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bf14      	ite	ne
 8007eee:	2301      	movne	r3, #1
 8007ef0:	2300      	moveq	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x158>
						return Status::Undervoltage;
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e0ed      	b.n	80080d8 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x334>

					if (status.min_voltage < kLimpMinVoltage) { // TODO might only want to check this at the end of the loop
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007f02:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d819      	bhi.n	8007f3e <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x19a>
						if (++limp_counter > kLimpCountLimit)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	bf8c      	ite	hi
 8007f22:	2301      	movhi	r3, #1
 8007f24:	2300      	movls	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05c      	beq.n	8007fe6 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x242>
							limp_counter += 9; // We have this here so it takes a bit of time for bms to exit limp mode once it enters
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f32:	f103 0209 	add.w	r2, r3, #9
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					if (status.min_voltage < kLimpMinVoltage) { // TODO might only want to check this at the end of the loop
 8007f3c:	e053      	b.n	8007fe6 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x242>
					} else if (limp_counter > 0)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d04e      	beq.n	8007fe6 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x242>
						--limp_counter;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f4e:	1e5a      	subs	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					if (status.min_voltage < kLimpMinVoltage) { // TODO might only want to check this at the end of the loop
 8007f56:	e046      	b.n	8007fe6 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x242>
#endif
				} else if (*voltage > status.max_voltage) {
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	881a      	ldrh	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d940      	bls.n	8007fe8 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x244>
					status.max_voltage = *voltage;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	8812      	ldrh	r2, [r2, #0]
 8007f6e:	871a      	strh	r2, [r3, #56]	; 0x38
					status.max_voltage_id = std::distance(*cell_data, voltage);
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	6838      	ldr	r0, [r7, #0]
 8007f74:	f000 fb77 	bl	8008666 <_ZSt8distanceIPtENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

					if (status.max_voltage > kChargerDis)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007f8a:	f24a 3248 	movw	r2, #41800	; 0xa348
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d904      	bls.n	8007f9c <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x1f8>
						nlg5.ctrl = 0;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	e00a      	b.n	8007fb2 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x20e>
					else if (status.max_voltage < kChargerEn)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007fa2:	f24a 221b 	movw	r2, #41499	; 0xa21b
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d803      	bhi.n	8007fb2 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x20e>
						nlg5.ctrl = NLG5::C_C_EN;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	701a      	strb	r2, [r3, #0]
#if TEST_OVERVOLTAGE
					if (status.ErrorHandler(Status::Overvoltage, status.max_voltage > kMaxVoltage))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6898      	ldr	r0, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007fbc:	f24a 4210 	movw	r2, #42000	; 0xa410
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bf8c      	ite	hi
 8007fc4:	2301      	movhi	r3, #1
 8007fc6:	2300      	movls	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	2101      	movs	r1, #1
 8007fce:	f7ff fe50 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bf14      	ite	ne
 8007fd8:	2301      	movne	r3, #1
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x244>
						return Status::Overvoltage;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e078      	b.n	80080d8 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x334>
					if (status.min_voltage < kLimpMinVoltage) { // TODO might only want to check this at the end of the loop
 8007fe6:	bf00      	nop
			for (auto voltage = std::begin(row) + reg * cells_in_reg; voltage != std::begin(row) + (reg + 1) * cells_in_reg; ++voltage, data_counter += 2) {
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	3302      	adds	r3, #2
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007ff8:	e70d      	b.n	8007e16 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x72>
#endif
				}
			}

			if ((buffer[data_counter + 1] | buffer[data_counter] << 8) != PEC15Calc(&buffer[data_counter - bytes_in_reg], bytes_in_reg))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008000:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008004:	3301      	adds	r3, #1
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f000 fafb 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 800800e:	4603      	mov	r3, r0
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461c      	mov	r4, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	332c      	adds	r3, #44	; 0x2c
 8008018:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f000 faf0 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8008024:	4603      	mov	r3, r0
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	431c      	orrs	r4, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008032:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008036:	3b06      	subs	r3, #6
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f000 fae2 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8008040:	4603      	mov	r3, r0
 8008042:	2206      	movs	r2, #6
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 faa8 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 800804c:	4603      	mov	r3, r0
 800804e:	429c      	cmp	r4, r3
 8008050:	bf14      	ite	ne
 8008052:	2301      	movne	r3, #1
 8008054:	2300      	moveq	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x2be>
				pec_error = Status::PecError;
 800805c:	2308      	movs	r3, #8
 800805e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			data_counter += 2;
 8008062:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008066:	3302      	adds	r3, #2
 8008068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		for (auto& row : cell_data) {
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	3318      	adds	r3, #24
 8008070:	623b      	str	r3, [r7, #32]
 8008072:	e6bd      	b.n	8007df0 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x4c>
		}

		power = current * status.sum_of_cells / 10000; // TODO: current is not being assigned to anywhere at all. sum_of_cells on Atmel was being divided by 10000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6892      	ldr	r2, [r2, #8]
 800807e:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x33c>)
 8008086:	fb82 1203 	smull	r1, r2, r2, r3
 800808a:	1312      	asrs	r2, r2, #12
 800808c:	17db      	asrs	r3, r3, #31
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#if TEST_OVERPOWER
		if (status.ErrorHandler(Status::Overpower, power > kMaxPower))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6898      	ldr	r0, [r3, #8]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080a0:	4a10      	ldr	r2, [pc, #64]	; (80080e4 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x340>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	bfcc      	ite	gt
 80080a6:	2301      	movgt	r3, #1
 80080a8:	2300      	movle	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	2106      	movs	r1, #6
 80080b0:	f7ff fddf 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bf14      	ite	ne
 80080ba:	2301      	movne	r3, #1
 80080bc:	2300      	moveq	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x324>
			return Status::Overpower;
 80080c4:	2306      	movs	r3, #6
 80080c6:	e007      	b.n	80080d8 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x334>
	for (uint8_t reg = 0; reg < 4; ++reg) {
 80080c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080cc:	3301      	adds	r3, #1
 80080ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80080d2:	e677      	b.n	8007dc4 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t+0x20>
#endif
	}
	return pec_error;
 80080d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			return 1;
#endif
	}
 */

}
 80080d8:	4618      	mov	r0, r3
 80080da:	372c      	adds	r7, #44	; 0x2c
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd90      	pop	{r4, r7, pc}
 80080e0:	68db8bad 	.word	0x68db8bad
 80080e4:	007a1200 	.word	0x007a1200

080080e8 <_ZN7LTC682019ReadVoltageRegisterEh>:

/* Read the raw data from the LTC6804 cell voltage register. */
void LTC6820::ReadVoltageRegister(uint8_t reg) {
 80080e8:	b5b0      	push	{r4, r5, r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
	buffer = { 0, static_cast<uint8_t>(0x2 + reg * 0x2) };
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	3301      	adds	r3, #1
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	b2dc      	uxtb	r4, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	332c      	adds	r3, #44	; 0x2c
 8008102:	2264      	movs	r2, #100	; 0x64
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f003 fb1e 	bl	800b748 <memset>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4622      	mov	r2, r4
 8008110:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	auto buffer_pec = PEC15Calc(buffer.data(), 2);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	332c      	adds	r3, #44	; 0x2c
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fa82 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 800811e:	4603      	mov	r3, r0
 8008120:	2202      	movs	r2, #2
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fa39 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 800812a:	4603      	mov	r3, r0
 800812c:	81fb      	strh	r3, [r7, #14]
	buffer[2] = static_cast<uint8_t>(buffer_pec >> 8);
 800812e:	89fb      	ldrh	r3, [r7, #14]
 8008130:	121c      	asrs	r4, r3, #8
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	332c      	adds	r3, #44	; 0x2c
 8008136:	2102      	movs	r1, #2
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fa63 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 800813e:	4603      	mov	r3, r0
 8008140:	b2e2      	uxtb	r2, r4
 8008142:	701a      	strb	r2, [r3, #0]
	buffer[3] = static_cast<uint8_t>(buffer_pec);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	332c      	adds	r3, #44	; 0x2c
 8008148:	2103      	movs	r1, #3
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fa5a 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8008150:	4603      	mov	r3, r0
 8008152:	89fa      	ldrh	r2, [r7, #14]
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	701a      	strb	r2, [r3, #0]

	WakeFromIdle();
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff fde5 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>
	HAL_SPI_TransmitReceive(&hspi, buffer.data(), buffer.data(), 96, 10);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685c      	ldr	r4, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	332c      	adds	r3, #44	; 0x2c
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fa5b 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 800816c:	4605      	mov	r5, r0
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	332c      	adds	r3, #44	; 0x2c
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fa55 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 8008178:	4602      	mov	r2, r0
 800817a:	230a      	movs	r3, #10
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	2360      	movs	r3, #96	; 0x60
 8008180:	4629      	mov	r1, r5
 8008182:	4620      	mov	r0, r4
 8008184:	f7fb fe5f 	bl	8003e46 <HAL_SPI_TransmitReceive>
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bdb0      	pop	{r4, r5, r7, pc}

08008190 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s>:

/* Reads and parses the LTC6804 auxiliary registers. */
int8_t LTC6820::ReadTemperatureHelper(TempRegisters& temp_data) {
 8008190:	b590      	push	{r4, r7, lr}
 8008192:	b08b      	sub	sp, #44	; 0x2c
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	uint8_t const bytes_in_reg = 6, gpios_in_reg = 3;
 800819a:	2306      	movs	r3, #6
 800819c:	76fb      	strb	r3, [r7, #27]
 800819e:	2303      	movs	r3, #3
 80081a0:	76bb      	strb	r3, [r7, #26]
	uint8_t pec_error;

	for (uint8_t reg = 0; reg < 2; ++reg) {
 80081a2:	2300      	movs	r3, #0
 80081a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80081a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	f200 8133 	bhi.w	8008418 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x288>
		uint8_t data_counter = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		ReadAuxRegister(reg + 1);
 80081b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081bc:	3301      	adds	r3, #1
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f930 	bl	8008428 <_ZN7LTC682015ReadAuxRegisterEh>

		for (auto& row : temp_data) {
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	623b      	str	r3, [r7, #32]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	3390      	adds	r3, #144	; 0x90
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	6a3a      	ldr	r2, [r7, #32]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	f000 8116 	beq.w	800840c <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x27c>
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	60fb      	str	r3, [r7, #12]
			for (auto temperature = std::begin(row) + reg * gpios_in_reg; temperature != std::begin(row) + (reg + 1) * gpios_in_reg; ++temperature, data_counter += 2) {
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fa52 	bl	800868e <_ZSt5beginIsLj6EEPT_RAT0__S0_>
 80081ea:	4601      	mov	r1, r0
 80081ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081f0:	4613      	mov	r3, r2
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	4413      	add	r3, r2
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	440b      	add	r3, r1
 80081fa:	61fb      	str	r3, [r7, #28]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fa46 	bl	800868e <_ZSt5beginIsLj6EEPT_RAT0__S0_>
 8008202:	4601      	mov	r1, r0
 8008204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	4613      	mov	r3, r2
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	4413      	add	r3, r2
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	440b      	add	r3, r1
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	429a      	cmp	r2, r3
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80b7 	beq.w	8008394 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x204>
				*temperature = CalcTemp(buffer[data_counter + 1] << 8 | buffer[data_counter]);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800822c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008230:	3301      	adds	r3, #1
 8008232:	4619      	mov	r1, r3
 8008234:	4610      	mov	r0, r2
 8008236:	f000 f9e5 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 800823a:	4603      	mov	r3, r0
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	b21c      	sxth	r4, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	332c      	adds	r3, #44	; 0x2c
 8008246:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f000 f9d9 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8008252:	4603      	mov	r3, r0
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b21b      	sxth	r3, r3
 8008258:	4323      	orrs	r3, r4
 800825a:	b21b      	sxth	r3, r3
 800825c:	b29b      	uxth	r3, r3
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f937 	bl	80084d4 <_ZN7LTC68208CalcTempEt>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	801a      	strh	r2, [r3, #0]
				if (*temperature < status.min_temp) {
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800827c:	429a      	cmp	r2, r3
 800827e:	da29      	bge.n	80082d4 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x144>
					status.min_temp = *temperature;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	f9b2 2000 	ldrsh.w	r2, [r2]
 800828a:	87da      	strh	r2, [r3, #62]	; 0x3e
					status.min_temp_id = std::distance(*temp_data, temperature); // TODO again, could be off by one
 800828c:	69f9      	ldr	r1, [r7, #28]
 800828e:	6838      	ldr	r0, [r7, #0]
 8008290:	f000 fa12 	bl	80086b8 <_ZSt8distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8008294:	4602      	mov	r2, r0
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
#if TEST_UNDERTEMPERATURE
					if (status.ErrorHandler(Status::Undertemp, status.min_temp < kMinTemp))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6898      	ldr	r0, [r3, #8]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80082ac:	4a5d      	ldr	r2, [pc, #372]	; (8008424 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x294>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	bfb4      	ite	lt
 80082b2:	2301      	movlt	r3, #1
 80082b4:	2300      	movge	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	2104      	movs	r1, #4
 80082bc:	f7ff fcd9 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d058      	beq.n	8008382 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1f2>
						return Status::Undertemp;
 80082d0:	2304      	movs	r3, #4
 80082d2:	e0a3      	b.n	800841c <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x28c>
#endif
				} else if (*temperature > status.max_temp) {
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80082e2:	429a      	cmp	r2, r3
 80082e4:	dd4d      	ble.n	8008382 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1f2>
					status.max_temp = *temperature;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80082f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
					status.max_temp_id = std::distance(*temp_data, temperature);
 80082f4:	69f9      	ldr	r1, [r7, #28]
 80082f6:	6838      	ldr	r0, [r7, #0]
 80082f8:	f000 f9de 	bl	80086b8 <_ZSt8distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80082fc:	4602      	mov	r2, r0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
#if TEST_OVERTEMPERATURE
					if (status.ErrorHandler(Status::Overtemp, status.max_temp > kMaxTemp))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6898      	ldr	r0, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008314:	f241 720c 	movw	r2, #5900	; 0x170c
 8008318:	4293      	cmp	r3, r2
 800831a:	bfcc      	ite	gt
 800831c:	2301      	movgt	r3, #1
 800831e:	2300      	movle	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	2103      	movs	r1, #3
 8008326:	f7ff fca4 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1ae>
						return Status::Overtemp;
 800833a:	2303      	movs	r3, #3
 800833c:	e06e      	b.n	800841c <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x28c>
#endif
#if TEST_OVERTEMPERATURE_CHARGING
					if (status.op_mode & 1 << 2 && status.ErrorHandler(Status::OvertempCharging, status.max_temp > kMaxChargeTemp))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d015      	beq.n	8008378 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1e8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6898      	ldr	r0, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008358:	f241 1230 	movw	r2, #4400	; 0x1130
 800835c:	4293      	cmp	r3, r2
 800835e:	bfcc      	ite	gt
 8008360:	2301      	movgt	r3, #1
 8008362:	2300      	movle	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	461a      	mov	r2, r3
 8008368:	210b      	movs	r1, #11
 800836a:	f7ff fc82 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1e8>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1ea>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x1f2>
						return Status::OvertempCharging;
 800837e:	230b      	movs	r3, #11
 8008380:	e04c      	b.n	800841c <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x28c>
			for (auto temperature = std::begin(row) + reg * gpios_in_reg; temperature != std::begin(row) + (reg + 1) * gpios_in_reg; ++temperature, data_counter += 2) {
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	3302      	adds	r3, #2
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800838c:	3302      	adds	r3, #2
 800838e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008392:	e733      	b.n	80081fc <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x6c>
#endif
				}
			}
			if ((buffer[data_counter] << 8 | buffer[data_counter + 1]) != PEC15Calc(&buffer[data_counter - bytes_in_reg], bytes_in_reg))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	332c      	adds	r3, #44	; 0x2c
 8008398:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f930 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 80083a4:	4603      	mov	r3, r0
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	021c      	lsls	r4, r3, #8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80083b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083b4:	3301      	adds	r3, #1
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f000 f923 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 80083be:	4603      	mov	r3, r0
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	431c      	orrs	r4, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80083ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083ce:	3b06      	subs	r3, #6
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f000 f916 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 80083d8:	4603      	mov	r3, r0
 80083da:	2206      	movs	r2, #6
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f8dc 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 80083e4:	4603      	mov	r3, r0
 80083e6:	429c      	cmp	r4, r3
 80083e8:	bf14      	ite	ne
 80083ea:	2301      	movne	r3, #1
 80083ec:	2300      	moveq	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x26a>
				pec_error = Status::PecError;
 80083f4:	2308      	movs	r3, #8
 80083f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			data_counter += 2;
 80083fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083fe:	3302      	adds	r3, #2
 8008400:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		for (auto& row : temp_data) {
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	330c      	adds	r3, #12
 8008408:	623b      	str	r3, [r7, #32]
 800840a:	e6e4      	b.n	80081d6 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x46>
	for (uint8_t reg = 0; reg < 2; ++reg) {
 800840c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008410:	3301      	adds	r3, #1
 8008412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008416:	e6c7      	b.n	80081a8 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s+0x18>
			}
			if ((buffer[data_counter] << 8 | buffer[data_counter + 1])  !=  PEC15Calc(&buffer[current_ic * bytes_received], bytes_in_reg))
				pec_error = Status::PecError;
		}*/

	return pec_error;
 8008418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800841c:	4618      	mov	r0, r3
 800841e:	372c      	adds	r7, #44	; 0x2c
 8008420:	46bd      	mov	sp, r7
 8008422:	bd90      	pop	{r4, r7, pc}
 8008424:	fffffa24 	.word	0xfffffa24

08008428 <_ZN7LTC682015ReadAuxRegisterEh>:

/* Read the raw data from the LTC6804 auxiliary register.*/
void LTC6820::ReadAuxRegister(uint8_t reg) {
 8008428:	b5b0      	push	{r4, r5, r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af02      	add	r7, sp, #8
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
	buffer = { 0x0, reg == 2 ? static_cast<uint8_t>(0xE) : static_cast<uint8_t>(0xC) };
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d101      	bne.n	800843e <_ZN7LTC682015ReadAuxRegisterEh+0x16>
 800843a:	240e      	movs	r4, #14
 800843c:	e000      	b.n	8008440 <_ZN7LTC682015ReadAuxRegisterEh+0x18>
 800843e:	240c      	movs	r4, #12
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	332c      	adds	r3, #44	; 0x2c
 8008444:	2264      	movs	r2, #100	; 0x64
 8008446:	2100      	movs	r1, #0
 8008448:	4618      	mov	r0, r3
 800844a:	f003 f97d 	bl	800b748 <memset>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4622      	mov	r2, r4
 8008452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	auto buffer_pec = PEC15Calc(buffer.data(), 2);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	332c      	adds	r3, #44	; 0x2c
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f8e1 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 8008460:	4603      	mov	r3, r0
 8008462:	2202      	movs	r2, #2
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f898 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 800846c:	4603      	mov	r3, r0
 800846e:	81fb      	strh	r3, [r7, #14]
	buffer[2] = static_cast<uint8_t>(buffer_pec >> 8);
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	121c      	asrs	r4, r3, #8
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	332c      	adds	r3, #44	; 0x2c
 8008478:	2102      	movs	r1, #2
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f8c2 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8008480:	4603      	mov	r3, r0
 8008482:	b2e2      	uxtb	r2, r4
 8008484:	701a      	strb	r2, [r3, #0]
	buffer[3] = static_cast<uint8_t>(buffer_pec);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	332c      	adds	r3, #44	; 0x2c
 800848a:	2103      	movs	r1, #3
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f8b9 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8008492:	4603      	mov	r3, r0
 8008494:	89fa      	ldrh	r2, [r7, #14]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	701a      	strb	r2, [r3, #0]

	WakeFromIdle();
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fc44 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>
	HAL_SPI_TransmitReceive(&hspi, buffer.data(), buffer.data(), 96, 10); // 96 being length of register (8) * IC_NUM (12)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685c      	ldr	r4, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	332c      	adds	r3, #44	; 0x2c
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f8ba 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 80084ae:	4605      	mov	r5, r0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	332c      	adds	r3, #44	; 0x2c
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f8b4 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 80084ba:	4602      	mov	r2, r0
 80084bc:	230a      	movs	r3, #10
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2360      	movs	r3, #96	; 0x60
 80084c2:	4629      	mov	r1, r5
 80084c4:	4620      	mov	r0, r4
 80084c6:	f7fb fcbe 	bl	8003e46 <HAL_SPI_TransmitReceive>
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080084d4 <_ZN7LTC68208CalcTempEt>:

/* Calculates the temperature from thermistor voltage using lookup table. Linear equations are used for approximation. */
int16_t LTC6820::CalcTemp(uint16_t ntc_voltage) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	; 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	807b      	strh	r3, [r7, #2]
			18000, 17332, 16662, 15994, 15330, 14672, 14023, 13385,
			12760, 12150, 11556, 10980, 10423,  9885,  9367,  8870,
			8394,  7939,  7505,  7091,  6697,  6323,  5969,  5633
	};

	auto indices = std::equal_range(std::rbegin(LUT), std::rend(LUT), ntc_voltage);
 80084e0:	f107 0310 	add.w	r3, r7, #16
 80084e4:	492b      	ldr	r1, [pc, #172]	; (8008594 <_ZN7LTC68208CalcTempEt+0xc0>)
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f8fa 	bl	80086e0 <_ZSt6rbeginIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>
 80084ec:	f107 0314 	add.w	r3, r7, #20
 80084f0:	4928      	ldr	r1, [pc, #160]	; (8008594 <_ZN7LTC68208CalcTempEt+0xc0>)
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 f903 	bl	80086fe <_ZSt4rendIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>
 80084f8:	f107 0008 	add.w	r0, r7, #8
 80084fc:	1cbb      	adds	r3, r7, #2
 80084fe:	f107 0214 	add.w	r2, r7, #20
 8008502:	f107 0110 	add.w	r1, r7, #16
 8008506:	f000 f917 	bl	8008738 <_ZSt11equal_rangeISt16reverse_iteratorIPKsEtESt4pairIT_S5_ES5_S5_RKT0_>

	int16_t x0 = *indices.first;
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f939 	bl	8008786 <_ZNKSt16reverse_iteratorIPKsEdeEv>
 8008514:	4603      	mov	r3, r0
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t x1 = *indices.second;
 800851a:	f107 0308 	add.w	r3, r7, #8
 800851e:	3304      	adds	r3, #4
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f930 	bl	8008786 <_ZNKSt16reverse_iteratorIPKsEdeEv>
 8008526:	4603      	mov	r3, r0
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int32_t m = (2 << 20) / (x1 - x0);
 800852c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8008530:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800853a:	fb92 f3f3 	sdiv	r3, r2, r3
 800853e:	623b      	str	r3, [r7, #32]
	int32_t b = ((std::rend(LUT) - indices.first - 1) * 2) - m * x0; //TODO possibly off by 1, but I don't think so
 8008540:	f107 0318 	add.w	r3, r7, #24
 8008544:	4913      	ldr	r1, [pc, #76]	; (8008594 <_ZN7LTC68208CalcTempEt+0xc0>)
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f8d9 	bl	80086fe <_ZSt4rendIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>
 800854c:	f107 0208 	add.w	r2, r7, #8
 8008550:	f107 0318 	add.w	r3, r7, #24
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f926 	bl	80087a8 <_ZStmiIPKsS1_EDTmicldtfp0_4baseEcldtfp_4baseEERKSt16reverse_iteratorIT_ERKS3_IT0_E>
 800855c:	4603      	mov	r3, r0
 800855e:	3b01      	subs	r3, #1
 8008560:	005a      	lsls	r2, r3, #1
 8008562:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008566:	6a39      	ldr	r1, [r7, #32]
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	61fb      	str	r3, [r7, #28]
	return (m * ntc_voltage + b) / 10486; // (2^20 / 100) == 1048576
 8008570:	887b      	ldrh	r3, [r7, #2]
 8008572:	461a      	mov	r2, r3
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	fb03 f202 	mul.w	r2, r3, r2
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	4a06      	ldr	r2, [pc, #24]	; (8008598 <_ZN7LTC68208CalcTempEt+0xc4>)
 8008580:	fb82 1203 	smull	r1, r2, r2, r3
 8008584:	1312      	asrs	r2, r2, #12
 8008586:	17db      	asrs	r3, r3, #31
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	b21b      	sxth	r3, r3
}
 800858c:	4618      	mov	r0, r3
 800858e:	3728      	adds	r7, #40	; 0x28
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	0800b9f8 	.word	0x0800b9f8
 8008598:	63ff6a01 	.word	0x63ff6a01

0800859c <_ZN7LTC68209PEC15CalcEPKhj>:

/* 	Calculates and returns the CRC15 */
uint16_t LTC6820::PEC15Calc(uint8_t const * const data, size_t data_length) {
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
			0xfc41, 0x39d8, 0x32ea, 0xf773, 0x248e, 0xe117, 0xea25, 0x2fbc, 0x0846, 0xcddf, 0xc6ed, 0x0374, 0xd089, 0x1510, 0x1e22, 0xdbbb,
			0x0af8, 0xcf61, 0xc453, 0x01ca, 0xd237, 0x17ae, 0x1c9c, 0xd905, 0xfeff, 0x3b66, 0x3054, 0xf5cd, 0x2630, 0xe3a9, 0xe89b, 0x2d02,
			0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
	};

	uint16_t remainder = 16, addr;
 80085a8:	2310      	movs	r3, #16
 80085aa:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < data_length; i++) {
 80085ac:	2300      	movs	r3, #0
 80085ae:	757b      	strb	r3, [r7, #21]
 80085b0:	7d7b      	ldrb	r3, [r7, #21]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d91a      	bls.n	80085ee <_ZN7LTC68209PEC15CalcEPKhj+0x52>
		addr = (remainder >> 7 ^ data[i]) & 0xFF;
 80085b8:	8afb      	ldrh	r3, [r7, #22]
 80085ba:	11db      	asrs	r3, r3, #7
 80085bc:	b21a      	sxth	r2, r3
 80085be:	7d7b      	ldrb	r3, [r7, #21]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b21b      	sxth	r3, r3
 80085c8:	4053      	eors	r3, r2
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	827b      	strh	r3, [r7, #18]
		remainder <<= 8 ^ crc15Table[addr];
 80085d2:	8afb      	ldrh	r3, [r7, #22]
 80085d4:	8a7a      	ldrh	r2, [r7, #18]
 80085d6:	490a      	ldr	r1, [pc, #40]	; (8008600 <_ZN7LTC68209PEC15CalcEPKhj+0x64>)
 80085d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80085dc:	f082 0208 	eor.w	r2, r2, #8
 80085e0:	b292      	uxth	r2, r2
 80085e2:	4093      	lsls	r3, r2
 80085e4:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < data_length; i++) {
 80085e6:	7d7b      	ldrb	r3, [r7, #21]
 80085e8:	3301      	adds	r3, #1
 80085ea:	757b      	strb	r3, [r7, #21]
 80085ec:	e7e0      	b.n	80085b0 <_ZN7LTC68209PEC15CalcEPKhj+0x14>
	}

	return remainder * 2;
 80085ee:	8afb      	ldrh	r3, [r7, #22]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	b29b      	uxth	r3, r3
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	0800ba38 	.word	0x0800ba38

08008604 <_ZNSt5arrayIhLj100EEixEj>:
      constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f8dc 	bl	80087d0 <_ZNSt14__array_traitsIhLj100EE6_S_refERA100_Khj>
 8008618:	4603      	mov	r3, r0
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <_ZNSt5arrayIhLj100EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f8dd 	bl	80087ec <_ZNSt14__array_traitsIhLj100EE6_S_ptrERA100_Kh>
 8008632:	4603      	mov	r3, r0
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZSt5beginItLj12EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm])
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <_ZSt19__iterator_categoryIPtENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <_ZSt8distanceIPtENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008666:	b5b0      	push	{r4, r5, r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008670:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff ffec 	bl	8008652 <_ZSt19__iterator_categoryIPtENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800867a:	462a      	mov	r2, r5
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	4620      	mov	r0, r4
 8008680:	f000 f8bf 	bl	8008802 <_ZSt10__distanceIPtENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8008684:	4603      	mov	r3, r0
    }
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bdb0      	pop	{r4, r5, r7, pc}

0800868e <_ZSt5beginIsLj6EEPT_RAT0__S0_>:
    begin(_Tp (&__arr)[_Nm])
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <_ZSt19__iterator_categoryIPsENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <_ZSt8distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80086b8:	b5b0      	push	{r4, r5, r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80086c2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff ffec 	bl	80086a4 <_ZSt19__iterator_categoryIPsENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80086cc:	462a      	mov	r2, r5
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 f8a6 	bl	8008822 <_ZSt10__distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80086d6:	4603      	mov	r3, r0
    }
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bdb0      	pop	{r4, r5, r7, pc}

080086e0 <_ZSt6rbeginIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>:
   *          the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
    { return reverse_iterator<_Tp*>(__arr + _Nm); }
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3340      	adds	r3, #64	; 0x40
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8a6 	bl	8008842 <_ZNSt16reverse_iteratorIPKsEC1ES1_>
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <_ZSt4rendIKsLj32EESt16reverse_iteratorIPT_ERAT0__S2_>:
   *          the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
    { return reverse_iterator<_Tp*>(__arr); }
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f899 	bl	8008842 <_ZNSt16reverse_iteratorIPKsEC1ES1_>
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>:

      /**
       *  The copy constructor is normal.
      */
      _GLIBCXX17_CONSTEXPR
      reverse_iterator(const reverse_iterator& __x)
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
      : current(__x.current) { }
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <_ZSt11equal_rangeISt16reverse_iteratorIPKsEtESt4pairIT_S5_ES5_S5_RKT0_>:
   *  @endcode
   *  but does not actually call those functions.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
 8008738:	b5b0      	push	{r4, r5, r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af02      	add	r7, sp, #8
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
      __glibcxx_requires_partitioned_lower(__first, __last, __val);
      __glibcxx_requires_partitioned_upper(__first, __last, __val);

      return std::__equal_range(__first, __last, __val,
				__gnu_cxx::__ops::__iter_less_val(),
				__gnu_cxx::__ops::__val_less_iter());
 8008746:	f107 0310 	add.w	r3, r7, #16
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff ffe3 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008752:	f107 0314 	add.w	r3, r7, #20
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff ffdd 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
				__gnu_cxx::__ops::__iter_less_val(),
 800875e:	f7ff fad5 	bl	8007d0c <_ZN9__gnu_cxx5__ops15__iter_less_valEv>
				__gnu_cxx::__ops::__val_less_iter());
 8008762:	f7ff fada 	bl	8007d1a <_ZN9__gnu_cxx5__ops15__val_less_iterEv>
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f107 0214 	add.w	r2, r7, #20
 800876c:	f107 0110 	add.w	r1, r7, #16
 8008770:	f88d 5004 	strb.w	r5, [sp, #4]
 8008774:	f88d 4000 	strb.w	r4, [sp]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f000 f871 	bl	8008860 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_>
    }
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	3720      	adds	r7, #32
 8008782:	46bd      	mov	sp, r7
 8008784:	bdb0      	pop	{r4, r5, r7, pc}

08008786 <_ZNKSt16reverse_iteratorIPKsEdeEv>:
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */
      _GLIBCXX17_CONSTEXPR reference
      operator*() const
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
      {
	_Iterator __tmp = current;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]
	return *--__tmp;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3b02      	subs	r3, #2
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
      }
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <_ZStmiIPKsS1_EDTmicldtfp0_4baseEcldtfp_4baseEERKSt16reverse_iteratorIT_ERKS3_IT0_E>:
#else
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // DR 685. reverse_iterator/move_iterator difference has invalid signatures
  template<typename _IteratorL, typename _IteratorR>
    inline _GLIBCXX17_CONSTEXPR auto
    operator-(const reverse_iterator<_IteratorL>& __x,
 80087a8:	b590      	push	{r4, r7, lr}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
	      const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }
 80087b2:	6838      	ldr	r0, [r7, #0]
 80087b4:	f000 f904 	bl	80089c0 <_ZNKSt16reverse_iteratorIPKsE4baseEv>
 80087b8:	4603      	mov	r3, r0
 80087ba:	461c      	mov	r4, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f8ff 	bl	80089c0 <_ZNKSt16reverse_iteratorIPKsE4baseEv>
 80087c2:	4603      	mov	r3, r0
 80087c4:	1ae3      	subs	r3, r4, r3
 80087c6:	105b      	asrs	r3, r3, #1
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}

080087d0 <_ZNSt14__array_traitsIhLj100EE6_S_refERA100_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	4413      	add	r3, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <_ZNSt14__array_traitsIhLj100EE6_S_ptrERA100_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <_ZSt10__distanceIPtENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	105b      	asrs	r3, r3, #1
    }
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <_ZSt10__distanceIPsENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	105b      	asrs	r3, r3, #1
    }
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <_ZNSt16reverse_iteratorIPKsEC1ES1_>:
      reverse_iterator(iterator_type __x) : current(__x) { }
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_>:
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
 8008860:	b5b0      	push	{r4, r5, r7, lr}
 8008862:	b094      	sub	sp, #80	; 0x50
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
      _DistanceType __len = std::distance(__first, __last);
 800886e:	f107 0320 	add.w	r3, r7, #32
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff ff4f 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 800887a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff ff49 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008886:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800888a:	f107 0320 	add.w	r3, r7, #32
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8ab 	bl	80089ec <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8008896:	6478      	str	r0, [r7, #68]	; 0x44
      while (__len > 0)
 8008898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800889a:	2b00      	cmp	r3, #0
 800889c:	f340 8087 	ble.w	80089ae <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x14e>
	  _DistanceType __half = __len >> 1;
 80088a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a2:	105b      	asrs	r3, r3, #1
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
	  _ForwardIterator __middle = __first;
 80088a6:	f107 031c 	add.w	r3, r7, #28
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff ff33 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
	  std::advance(__middle, __half);
 80088b2:	f107 031c 	add.w	r3, r7, #28
 80088b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 f8b8 	bl	8008a2e <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
	  if (__comp_it_val(__middle, __val))
 80088be:	f107 021c 	add.w	r2, r7, #28
 80088c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff ff25 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 80088ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4619      	mov	r1, r3
 80088d6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80088da:	f000 f8bb 	bl	8008a54 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclISt16reverse_iteratorIPKsEKtEEbT_RT0_>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00b      	beq.n	80088fc <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x9c>
	      __first = __middle;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	601a      	str	r2, [r3, #0]
	      ++__first;
 80088ea:	68b8      	ldr	r0, [r7, #8]
 80088ec:	f000 f8ca 	bl	8008a84 <_ZNSt16reverse_iteratorIPKsEppEv>
	      __len = __len - __half - 1;
 80088f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	647b      	str	r3, [r7, #68]	; 0x44
 80088fa:	e7cd      	b.n	8008898 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x38>
	  else if (__comp_val_it(__val, __middle))
 80088fc:	f107 021c 	add.w	r2, r7, #28
 8008900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff ff06 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 800890c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008910:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f8c4 	bl	8008aa4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKtSt16reverse_iteratorIPKsEEEbRT_T0_>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0xc8>
	    __len = __half;
 8008922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
 8008926:	e7b7      	b.n	8008898 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x38>
	      _ForwardIterator __left
 8008928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800892c:	68b9      	ldr	r1, [r7, #8]
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff fef2 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008934:	f107 021c 	add.w	r2, r7, #28
 8008938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff feea 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008944:	f107 0018 	add.w	r0, r7, #24
 8008948:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800894c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008950:	f88d 5000 	strb.w	r5, [sp]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	f000 f8bd 	bl	8008ad4 <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_>
	      std::advance(__first, __len);
 800895a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800895c:	68b8      	ldr	r0, [r7, #8]
 800895e:	f000 f866 	bl	8008a2e <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
 8008962:	f107 031c 	add.w	r3, r7, #28
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f88c 	bl	8008a84 <_ZNSt16reverse_iteratorIPKsEppEv>
 800896c:	4602      	mov	r2, r0
	      _ForwardIterator __right
 800896e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fecf 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 800897a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fec9 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008986:	f107 0014 	add.w	r0, r7, #20
 800898a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800898e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008992:	f88d 4000 	strb.w	r4, [sp]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f000 f8f4 	bl	8008b84 <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_>
	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
 800899c:	f107 0214 	add.w	r2, r7, #20
 80089a0:	f107 0318 	add.w	r3, r7, #24
 80089a4:	4619      	mov	r1, r3
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f94f 	bl	8008c4a <_ZNSt4pairISt16reverse_iteratorIPKsES3_EC1IRS3_S6_Lb1EEEOT_OT0_>
 80089ac:	e004      	b.n	80089b8 <_ZSt13__equal_rangeISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valENS5_14_Val_less_iterEESt4pairIT_S9_ES9_S9_RKT0_T1_T2_+0x158>
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 f949 	bl	8008c4a <_ZNSt4pairISt16reverse_iteratorIPKsES3_EC1IRS3_S6_Lb1EEEOT_OT0_>
    }
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	3748      	adds	r7, #72	; 0x48
 80089bc:	46bd      	mov	sp, r7
 80089be:	bdb0      	pop	{r4, r5, r7, pc}

080089c0 <_ZNKSt16reverse_iteratorIPKsE4baseEv>:
      base() const
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
      { return current; }
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <_ZSt19__iterator_categoryISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
    __iterator_category(const _Iter&)
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fe8b 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008a02:	f107 0310 	add.w	r3, r7, #16
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fe85 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
			     std::__iterator_category(__first));
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff ffe2 	bl	80089d8 <_ZSt19__iterator_categoryISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8008a14:	f107 0110 	add.w	r1, r7, #16
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f931 	bl	8008c86 <_ZSt10__distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8008a24:	4603      	mov	r3, r0
    }
 8008a26:	4618      	mov	r0, r3
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd90      	pop	{r4, r7, pc}

08008a2e <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8008a2e:	b590      	push	{r4, r7, lr}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ffcb 	bl	80089d8 <_ZSt19__iterator_categoryISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8008a42:	4622      	mov	r2, r4
 8008a44:	68f9      	ldr	r1, [r7, #12]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f92c 	bl	8008ca4 <_ZSt9__advanceISt16reverse_iteratorIPKsEiEvRT_T0_St26random_access_iterator_tag>
    }
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd90      	pop	{r4, r7, pc}

08008a54 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclISt16reverse_iteratorIPKsEKtEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8008a60:	68b8      	ldr	r0, [r7, #8]
 8008a62:	f7ff fe90 	bl	8008786 <_ZNKSt16reverse_iteratorIPKsEdeEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	bfb4      	ite	lt
 8008a76:	2301      	movlt	r3, #1
 8008a78:	2300      	movge	r3, #0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <_ZNSt16reverse_iteratorIPKsEppEv>:
      operator++()
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	--current;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	1e9a      	subs	r2, r3, #2
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	601a      	str	r2, [r3, #0]
	return *this;
 8008a96:	687b      	ldr	r3, [r7, #4]
      }
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKtSt16reverse_iteratorIPKsEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	461c      	mov	r4, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fe65 	bl	8008786 <_ZNKSt16reverse_iteratorIPKsEdeEv>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	bfb4      	ite	lt
 8008ac6:	2301      	movlt	r3, #1
 8008ac8:	2300      	movge	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd90      	pop	{r4, r7, pc}

08008ad4 <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_>:
							    __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08a      	sub	sp, #40	; 0x28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
		  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);
 8008ae2:	f107 0314 	add.w	r3, r7, #20
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fe15 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008aee:	f107 0318 	add.w	r3, r7, #24
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff fe0f 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008afa:	f107 0218 	add.w	r2, r7, #24
 8008afe:	f107 0314 	add.w	r3, r7, #20
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff ff71 	bl	80089ec <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8008b0a:	6278      	str	r0, [r7, #36]	; 0x24

      while (__len > 0)
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dd30      	ble.n	8008b74 <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0xa0>
	{
	  _DistanceType __half = __len >> 1;
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	105b      	asrs	r3, r3, #1
 8008b16:	623b      	str	r3, [r7, #32]
	  _ForwardIterator __middle = __first;
 8008b18:	f107 0310 	add.w	r3, r7, #16
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fdfa 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
	  std::advance(__middle, __half);
 8008b24:	f107 0310 	add.w	r3, r7, #16
 8008b28:	6a39      	ldr	r1, [r7, #32]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff ff7f 	bl	8008a2e <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
	  if (__comp(__middle, __val))
 8008b30:	f107 0210 	add.w	r2, r7, #16
 8008b34:	f107 031c 	add.w	r3, r7, #28
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fdec 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008b40:	f107 031c 	add.w	r3, r7, #28
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	4619      	mov	r1, r3
 8008b48:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008b4c:	f7ff ff82 	bl	8008a54 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclISt16reverse_iteratorIPKsEKtEEbT_RT0_>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0x9a>
	    {
	      __first = __middle;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	601a      	str	r2, [r3, #0]
	      ++__first;
 8008b5c:	68b8      	ldr	r0, [r7, #8]
 8008b5e:	f7ff ff91 	bl	8008a84 <_ZNSt16reverse_iteratorIPKsEppEv>
	      __len = __len - __half - 1;
 8008b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b6c:	e7ce      	b.n	8008b0c <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0x38>
	    }
	  else
	    __len = __half;
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
      while (__len > 0)
 8008b72:	e7cb      	b.n	8008b0c <_ZSt13__lower_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Iter_less_valEET_S7_S7_RKT0_T1_+0x38>
	}
      return __first;
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fdce 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
    }
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	3728      	adds	r7, #40	; 0x28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_>:
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	; 0x28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
      _DistanceType __len = std::distance(__first, __last);
 8008b92:	f107 0314 	add.w	r3, r7, #20
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fdbd 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008b9e:	f107 0318 	add.w	r3, r7, #24
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fdb7 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008baa:	f107 0218 	add.w	r2, r7, #24
 8008bae:	f107 0314 	add.w	r3, r7, #20
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff ff19 	bl	80089ec <_ZSt8distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24
      while (__len > 0)
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dd30      	ble.n	8008c24 <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0xa0>
	  _DistanceType __half = __len >> 1;
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	105b      	asrs	r3, r3, #1
 8008bc6:	623b      	str	r3, [r7, #32]
	  _ForwardIterator __middle = __first;
 8008bc8:	f107 0310 	add.w	r3, r7, #16
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fda2 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
	  std::advance(__middle, __half);
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	6a39      	ldr	r1, [r7, #32]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff ff27 	bl	8008a2e <_ZSt7advanceISt16reverse_iteratorIPKsEiEvRT_T0_>
	  if (__comp(__val, __middle))
 8008be0:	f107 0210 	add.w	r2, r7, #16
 8008be4:	f107 031c 	add.w	r3, r7, #28
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff fd94 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008bf0:	f107 031c 	add.w	r3, r7, #28
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008bfc:	f7ff ff52 	bl	8008aa4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKtSt16reverse_iteratorIPKsEEEbRT_T0_>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0x88>
	    __len = __half;
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0a:	e7d7      	b.n	8008bbc <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0x38>
	      __first = __middle;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	601a      	str	r2, [r3, #0]
	      ++__first;
 8008c12:	68b8      	ldr	r0, [r7, #8]
 8008c14:	f7ff ff36 	bl	8008a84 <_ZNSt16reverse_iteratorIPKsEppEv>
	      __len = __len - __half - 1;
 8008c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
      while (__len > 0)
 8008c22:	e7cb      	b.n	8008bbc <_ZSt13__upper_boundISt16reverse_iteratorIPKsEtN9__gnu_cxx5__ops14_Val_less_iterEET_S7_S7_RKT0_T1_+0x38>
      return __first;
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7ff fd76 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
    }
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	3728      	adds	r7, #40	; 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <_ZSt7forwardIRSt16reverse_iteratorIPKsEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <_ZNSt4pairISt16reverse_iteratorIPKsES3_EC1IRS3_S6_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8008c4a:	b590      	push	{r4, r7, lr}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	60f8      	str	r0, [r7, #12]
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008c56:	68fc      	ldr	r4, [r7, #12]
 8008c58:	68b8      	ldr	r0, [r7, #8]
 8008c5a:	f7ff ffeb 	bl	8008c34 <_ZSt7forwardIRSt16reverse_iteratorIPKsEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4619      	mov	r1, r3
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7ff fd58 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	1d1c      	adds	r4, r3, #4
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff ffe1 	bl	8008c34 <_ZSt7forwardIRSt16reverse_iteratorIPKsEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008c72:	4603      	mov	r3, r0
 8008c74:	4619      	mov	r1, r3
 8008c76:	4620      	mov	r0, r4
 8008c78:	f7ff fd4e 	bl	8008718 <_ZNSt16reverse_iteratorIPKsEC1ERKS2_>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd90      	pop	{r4, r7, pc}

08008c86 <_ZSt10__distanceISt16reverse_iteratorIPKsEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	68b8      	ldr	r0, [r7, #8]
 8008c96:	f7ff fd87 	bl	80087a8 <_ZStmiIPKsS1_EDTmicldtfp0_4baseEcldtfp_4baseEERKSt16reverse_iteratorIT_ERKS3_IT0_E>
 8008c9a:	4603      	mov	r3, r0
    }
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <_ZSt9__advanceISt16reverse_iteratorIPKsEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	713a      	strb	r2, [r7, #4]
      __i += __n;
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f804 	bl	8008cc0 <_ZNSt16reverse_iteratorIPKsEpLEi>
    }
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <_ZNSt16reverse_iteratorIPKsEpLEi>:
      operator+=(difference_type __n)
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
	current -= __n;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	425b      	negs	r3, r3
 8008cd4:	441a      	add	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	601a      	str	r2, [r3, #0]
	return *this;
 8008cda:	687b      	ldr	r3, [r7, #4]
      }
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <BSP_SD_Init>:
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	71fb      	strb	r3, [r7, #7]
 8008cf2:	f000 f879 	bl	8008de8 <BSP_SD_IsDetected>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d001      	beq.n	8008d00 <BSP_SD_Init+0x18>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e012      	b.n	8008d26 <BSP_SD_Init+0x3e>
 8008d00:	480b      	ldr	r0, [pc, #44]	; (8008d30 <BSP_SD_Init+0x48>)
 8008d02:	f7f9 fd8f 	bl	8002824 <HAL_SD_Init>
 8008d06:	4603      	mov	r3, r0
 8008d08:	71fb      	strb	r3, [r7, #7]
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <BSP_SD_Init+0x3c>
 8008d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008d14:	4806      	ldr	r0, [pc, #24]	; (8008d30 <BSP_SD_Init+0x48>)
 8008d16:	f7fa fb5f 	bl	80033d8 <HAL_SD_ConfigWideBusOperation>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <BSP_SD_Init+0x3c>
 8008d20:	2301      	movs	r3, #1
 8008d22:	71fb      	strb	r3, [r7, #7]
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	2000015c 	.word	0x2000015c

08008d34 <BSP_SD_ReadBlocks>:
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	2300      	movs	r3, #0
 8008d44:	75fb      	strb	r3, [r7, #23]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	4806      	ldr	r0, [pc, #24]	; (8008d6c <BSP_SD_ReadBlocks+0x38>)
 8008d52:	f7f9 fdef 	bl	8002934 <HAL_SD_ReadBlocks>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <BSP_SD_ReadBlocks+0x2c>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	2000015c 	.word	0x2000015c

08008d70 <BSP_SD_WriteBlocks>:
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	4806      	ldr	r0, [pc, #24]	; (8008da8 <BSP_SD_WriteBlocks+0x38>)
 8008d8e:	f7f9 ff67 	bl	8002c60 <HAL_SD_WriteBlocks>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <BSP_SD_WriteBlocks+0x2c>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	75fb      	strb	r3, [r7, #23]
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	2000015c 	.word	0x2000015c

08008dac <BSP_SD_GetCardState>:
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	4805      	ldr	r0, [pc, #20]	; (8008dc8 <BSP_SD_GetCardState+0x1c>)
 8008db2:	f7fa fb8d 	bl	80034d0 <HAL_SD_GetCardState>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	bf14      	ite	ne
 8008dbc:	2301      	movne	r3, #1
 8008dbe:	2300      	moveq	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2000015c 	.word	0x2000015c

08008dcc <BSP_SD_GetCardInfo>:
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4803      	ldr	r0, [pc, #12]	; (8008de4 <BSP_SD_GetCardInfo+0x18>)
 8008dd8:	f7fa fad2 	bl	8003380 <HAL_SD_GetCardInfo>
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	2000015c 	.word	0x2000015c

08008de8 <BSP_SD_IsDetected>:
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	2301      	movs	r3, #1
 8008df0:	71fb      	strb	r3, [r7, #7]
 8008df2:	f000 f825 	bl	8008e40 <BSP_PlatformIsDetected>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <BSP_SD_IsDetected+0x18>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	71fb      	strb	r3, [r7, #7]
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <MX_FATFS_Init>:
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	4904      	ldr	r1, [pc, #16]	; (8008e24 <MX_FATFS_Init+0x18>)
 8008e12:	4805      	ldr	r0, [pc, #20]	; (8008e28 <MX_FATFS_Init+0x1c>)
 8008e14:	f7fe fec6 	bl	8007ba4 <FATFS_LinkDriver>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <MX_FATFS_Init+0x20>)
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	bf00      	nop
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000490 	.word	0x20000490
 8008e28:	0800bc38 	.word	0x0800bc38
 8008e2c:	2000048c 	.word	0x2000048c

08008e30 <get_fattime>:
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <BSP_PlatformIsDetected>:
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	2301      	movs	r3, #1
 8008e48:	71fb      	strb	r3, [r7, #7]
 8008e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e4e:	4806      	ldr	r0, [pc, #24]	; (8008e68 <BSP_PlatformIsDetected+0x28>)
 8008e50:	f7f8 fce4 	bl	800181c <HAL_GPIO_ReadPin>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <BSP_PlatformIsDetected+0x1e>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	71fb      	strb	r3, [r7, #7]
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40020000 	.word	0x40020000

08008e6c <_ZN6StatusC1Eh>:
	Status(uint8_t op_mode) : op_mode { op_mode }, manual_mode { false } { // get rid of logging bool and just use op mode
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	705a      	strb	r2, [r3, #1]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	609a      	str	r2, [r3, #8]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	731a      	strb	r2, [r3, #12]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	735a      	strb	r2, [r3, #13]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	739a      	strb	r2, [r3, #14]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	73da      	strb	r2, [r3, #15]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3310      	adds	r3, #16
 8008eac:	2224      	movs	r2, #36	; 0x24
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f002 fc49 	bl	800b748 <memset>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	869a      	strh	r2, [r3, #52]	; 0x34
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	871a      	strh	r2, [r3, #56]	; 0x38
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3344      	adds	r3, #68	; 0x44
 8008efa:	2230      	movs	r2, #48	; 0x30
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 fc22 	bl	800b748 <memset>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	675a      	str	r2, [r3, #116]	; 0x74
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	679a      	str	r2, [r3, #120]	; 0x78
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		OpenAIR();
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fe fe52 	bl	8007bc4 <_ZNK6Status7OpenAIREv>
		OpenPRE();
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe fe65 	bl	8007bf0 <_ZN6Status7OpenPREEv>
		SetFanDutyCycle(kFanDCDefault);
 8008f26:	210a      	movs	r1, #10
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f86a 	bl	8009002 <_ZN6Status15SetFanDutyCycleEh>
	};
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <_ZNK6Status8CloseAIREv>:
	void CloseAIR(void) const {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BMSRelay
 8008f40:	2201      	movs	r2, #1
 8008f42:	2102      	movs	r1, #2
 8008f44:	4805      	ldr	r0, [pc, #20]	; (8008f5c <_ZNK6Status8CloseAIREv+0x24>)
 8008f46:	f7f8 fc81 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // LED2
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	4804      	ldr	r0, [pc, #16]	; (8008f60 <_ZNK6Status8CloseAIREv+0x28>)
 8008f50:	f7f8 fc7c 	bl	800184c <HAL_GPIO_WritePin>
	}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40020400 	.word	0x40020400
 8008f60:	40020800 	.word	0x40020800

08008f64 <_ZN6Status8ClosePREEv>:
	void ClosePRE(void) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // PRECHARGE
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4807      	ldr	r0, [pc, #28]	; (8008f90 <_ZN6Status8ClosePREEv+0x2c>)
 8008f72:	f7f8 fc6b 	bl	800184c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); // LED1
 8008f76:	2201      	movs	r2, #1
 8008f78:	2102      	movs	r1, #2
 8008f7a:	4806      	ldr	r0, [pc, #24]	; (8008f94 <_ZN6Status8ClosePREEv+0x30>)
 8008f7c:	f7f8 fc66 	bl	800184c <HAL_GPIO_WritePin>
		precharge_flag = true;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	731a      	strb	r2, [r3, #12]
	}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	40020400 	.word	0x40020400
 8008f94:	40020800 	.word	0x40020800

08008f98 <_ZN6Status18IncreasePecCounterEv>:
	void IncreasePecCounter() {
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
		pec_average = static_cast<float>(++pec_counter) / uptime;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	609a      	str	r2, [r3, #8]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <_ZN6Status12GetPecChangeEv>:
	auto GetPecChange() {
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
		auto pec_change = pec_counter - pec_counter_last;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	60fb      	str	r3, [r7, #12]
		pec_counter_last = pec_counter;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	675a      	str	r2, [r3, #116]	; 0x74
		return pec_change;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
	}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <_ZN6Status15SetFanDutyCycleEh>:
	void SetFanDutyCycle(uint8_t duty_cycle = kFanDCDefault) {
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
		if (duty_cycle > kFanDCMax)
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	2b64      	cmp	r3, #100	; 0x64
 8009012:	d901      	bls.n	8009018 <_ZN6Status15SetFanDutyCycleEh+0x16>
			duty_cycle = kFanDCMax;
 8009014:	2364      	movs	r3, #100	; 0x64
 8009016:	70fb      	strb	r3, [r7, #3]
	}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <_ZN6Status13CalcDutyCycleEv>:
	constexpr uint8_t CalcDutyCycle() {
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
		if (max_temp > kT2DCHighTemp)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009032:	f241 7270 	movw	r2, #6000	; 0x1770
 8009036:	4293      	cmp	r3, r2
 8009038:	dd01      	ble.n	800903e <_ZN6Status13CalcDutyCycleEv+0x1a>
			return kFanDCMax;
 800903a:	2364      	movs	r3, #100	; 0x64
 800903c:	e01c      	b.n	8009078 <_ZN6Status13CalcDutyCycleEv+0x54>
		else if (max_temp < kT2DCLowTemp)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009044:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009048:	da01      	bge.n	800904e <_ZN6Status13CalcDutyCycleEv+0x2a>
			return kFanDCDefault;
 800904a:	230a      	movs	r3, #10
 800904c:	e014      	b.n	8009078 <_ZN6Status13CalcDutyCycleEv+0x54>
			return (max_temp * kT2DC_M) + (kT2DCLowDutyCycle - kT2DC_M * kT2DCLowTemp);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800905c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009084 <_ZN6Status13CalcDutyCycleEv+0x60>
 8009060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009064:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009088 <_ZN6Status13CalcDutyCycleEv+0x64>
 8009068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800906c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009070:	edc7 7a00 	vstr	s15, [r7]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	b2db      	uxtb	r3, r3
	};
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	3cb851ec 	.word	0x3cb851ec
 8009088:	420c0000 	.word	0x420c0000

0800908c <_ZN6Status10TestLimitsEv>:
	int8_t TestLimits() {
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
		return 0;
 8009094:	2300      	movs	r3, #0
	}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <_ZN3IVTC1ER6Status>:
#include "stm32f4xx_hal.h"
#include "Status.h"

class IVT {
public:
	IVT(Status& status) : status{ status } {}
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	609a      	str	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	60da      	str	r2, [r3, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	611a      	str	r2, [r3, #16]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	751a      	strb	r2, [r3, #20]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <_ZN3IVT10SetCurrentEl>:

	int8_t SetCurrent(int32_t raw_current) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
		current = static_cast<float>(raw_current) / 1000;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090fc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8009140 <_ZN3IVT10SetCurrentEl+0x58>
 8009100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	edc3 7a01 	vstr	s15, [r3, #4]
		received_update = true;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	751a      	strb	r2, [r3, #20]
#if TEST_OVERCURRENT
		return status.ErrorHandler(Status::Overcurrent, current > kMaxCurrent);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	edd3 7a01 	vldr	s15, [r3, #4]
 800911a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009144 <_ZN3IVT10SetCurrentEl+0x5c>
 800911e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	bfcc      	ite	gt
 8009128:	2301      	movgt	r3, #1
 800912a:	2300      	movle	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	2105      	movs	r1, #5
 8009132:	f7fe fd9e 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 8009136:	4603      	mov	r3, r0
#endif
		return 0;
	}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	447a0000 	.word	0x447a0000
 8009144:	43340000 	.word	0x43340000

08009148 <_ZN3IVT10SetVoltageEl>:

	void SetVoltage(int32_t raw_voltage) {
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
		voltage = static_cast<float>(raw_voltage) / 1000;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	ee07 3a90 	vmov	s15, r3
 8009158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800915c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800917c <_ZN3IVT10SetVoltageEl+0x34>
 8009160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	edc3 7a02 	vstr	s15, [r3, #8]
		received_update = true;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	751a      	strb	r2, [r3, #20]
	}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	447a0000 	.word	0x447a0000

08009180 <_ZN3IVT11SetVoltage2El>:

	// TODO This used to be precharge compare, kinda
	int8_t SetVoltage2(int32_t raw_voltage) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
		voltage2 = static_cast<float>(raw_voltage) / 1000;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	ee07 3a90 	vmov	s15, r3
 8009190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009194:	eddf 6a41 	vldr	s13, [pc, #260]	; 800929c <_ZN3IVT11SetVoltage2El+0x11c>
 8009198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	edc3 7a03 	vstr	s15, [r3, #12]
		received_update = true;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	751a      	strb	r2, [r3, #20]

#if TEST_ACCU_UNDERVOLTAGE
		if (status.ErrorHandler(Status::AccuUndervoltage, voltage2 < kAccuMinVoltage))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80091b2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80092a0 <_ZN3IVT11SetVoltage2El+0x120>
 80091b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091be:	bf4c      	ite	mi
 80091c0:	2301      	movmi	r3, #1
 80091c2:	2300      	movpl	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	2109      	movs	r1, #9
 80091ca:	f7fe fd52 	bl	8007c72 <_ZN6Status12ErrorHandlerENS_10ErrorEventEb>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	bf14      	ite	ne
 80091d4:	2301      	movne	r3, #1
 80091d6:	2300      	moveq	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <_ZN3IVT11SetVoltage2El+0x64>
			return -1;
 80091de:	f04f 33ff 	mov.w	r3, #4294967295
 80091e2:	e057      	b.n	8009294 <_ZN3IVT11SetVoltage2El+0x114>
#endif

		/* Doing this here because it should hopefully avoid divide by 0 errors... */
		precharge_percentage = voltage * 100 / voltage2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80091ea:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80092a4 <_ZN3IVT11SetVoltage2El+0x124>
 80091ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80091f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	edc3 7a04 	vstr	s15, [r3, #16]

		if (precharge_percentage >= 95 && CheckVoltageMatch() && voltage > kPrechargeMinStartVoltage && voltage2 > kPrechargeMinStartVoltage)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	edd3 7a04 	vldr	s15, [r3, #16]
 8009208:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80092a8 <_ZN3IVT11SetVoltage2El+0x128>
 800920c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009214:	db1b      	blt.n	800924e <_ZN3IVT11SetVoltage2El+0xce>
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f84c 	bl	80092b4 <_ZN3IVT17CheckVoltageMatchEv>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d015      	beq.n	800924e <_ZN3IVT11SetVoltage2El+0xce>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	edd3 7a02 	vldr	s15, [r3, #8]
 8009228:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80092ac <_ZN3IVT11SetVoltage2El+0x12c>
 800922c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009234:	dd0b      	ble.n	800924e <_ZN3IVT11SetVoltage2El+0xce>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	edd3 7a03 	vldr	s15, [r3, #12]
 800923c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80092ac <_ZN3IVT11SetVoltage2El+0x12c>
 8009240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009248:	dd01      	ble.n	800924e <_ZN3IVT11SetVoltage2El+0xce>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <_ZN3IVT11SetVoltage2El+0xd0>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <_ZN3IVT11SetVoltage2El+0xe0>
			status.ClosePRE();
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fe83 	bl	8008f64 <_ZN6Status8ClosePREEv>
 800925e:	e018      	b.n	8009292 <_ZN3IVT11SetVoltage2El+0x112>
		else if (voltage < kPrechargeMaxEndVoltage || voltage2 < kPrechargeMaxEndVoltage) // TODO think there was a bug here in old system
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	edd3 7a02 	vldr	s15, [r3, #8]
 8009266:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80092b0 <_ZN3IVT11SetVoltage2El+0x130>
 800926a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800926e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009272:	d409      	bmi.n	8009288 <_ZN3IVT11SetVoltage2El+0x108>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	edd3 7a03 	vldr	s15, [r3, #12]
 800927a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80092b0 <_ZN3IVT11SetVoltage2El+0x130>
 800927e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	d504      	bpl.n	8009292 <_ZN3IVT11SetVoltage2El+0x112>
			status.OpenPRE();
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fcaf 	bl	8007bf0 <_ZN6Status7OpenPREEv>

		return 0;
 8009292:	2300      	movs	r3, #0
	}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	447a0000 	.word	0x447a0000
 80092a0:	43f50000 	.word	0x43f50000
 80092a4:	42c80000 	.word	0x42c80000
 80092a8:	42be0000 	.word	0x42be0000
 80092ac:	43eb0000 	.word	0x43eb0000
 80092b0:	43e10000 	.word	0x43e10000

080092b4 <_ZN3IVT17CheckVoltageMatchEv>:

	bool CheckVoltageMatch(void) {
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
		float percentage = voltage * 100 / (status.sum_of_cells / 10000)- 100;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	edd3 7a02 	vldr	s15, [r3, #8]
 80092c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009328 <_ZN3IVT17CheckVoltageMatchEv+0x74>
 80092c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80092d0:	4a16      	ldr	r2, [pc, #88]	; (800932c <_ZN3IVT17CheckVoltageMatchEv+0x78>)
 80092d2:	fba2 2303 	umull	r2, r3, r2, r3
 80092d6:	0b5b      	lsrs	r3, r3, #13
 80092d8:	b29b      	uxth	r3, r3
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009328 <_ZN3IVT17CheckVoltageMatchEv+0x74>
 80092ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092ee:	edc7 7a03 	vstr	s15, [r7, #12]
		return percentage < 10 && percentage > -10;
 80092f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80092f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80092fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009302:	d50a      	bpl.n	800931a <_ZN3IVT17CheckVoltageMatchEv+0x66>
 8009304:	edd7 7a03 	vldr	s15, [r7, #12]
 8009308:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800930c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009314:	dd01      	ble.n	800931a <_ZN3IVT17CheckVoltageMatchEv+0x66>
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <_ZN3IVT17CheckVoltageMatchEv+0x68>
 800931a:	2300      	movs	r3, #0
	}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	42c80000 	.word	0x42c80000
 800932c:	d1b71759 	.word	0xd1b71759

08009330 <_ZN4NLG5C1Ettt>:
	uint16_t oc_limit;
	uint16_t ov_limit;
	uint8_t a_buffer[4];
	uint8_t b_buffer[4];

	NLG5(uint16_t mc_limit = 160, uint16_t oc_limit = 60, uint16_t ov_limit = 2990) :
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	461a      	mov	r2, r3
 800933e:	4603      	mov	r3, r0
 8009340:	817b      	strh	r3, [r7, #10]
 8009342:	460b      	mov	r3, r1
 8009344:	813b      	strh	r3, [r7, #8]
 8009346:	4613      	mov	r3, r2
 8009348:	80fb      	strh	r3, [r7, #6]
	mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit } {};
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	897a      	ldrh	r2, [r7, #10]
 800934e:	805a      	strh	r2, [r3, #2]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	893a      	ldrh	r2, [r7, #8]
 8009354:	809a      	strh	r2, [r3, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	88fa      	ldrh	r2, [r7, #6]
 800935a:	80da      	strh	r2, [r3, #6]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <_ZN7LTC6820C1ER19__SPI_HandleTypeDefR6StatusR4NLG5R19__CAN_HandleTypeDef4Mode3DCP6CellCh5AuxCh5STSCh>:
	LTC6820(SPI_HandleTypeDef& hspi,
 800936a:	b580      	push	{r7, lr}
 800936c:	b086      	sub	sp, #24
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	603b      	str	r3, [r7, #0]
: 	hspi{ hspi }, status{ status }, nlg5 { nlg5 }, hcan { hcan } {
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	605a      	str	r2, [r3, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	609a      	str	r2, [r3, #8]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	60da      	str	r2, [r3, #12]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a3a      	ldr	r2, [r7, #32]
 8009394:	611a      	str	r2, [r3, #16]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	uint8_t md_bits = (static_cast<uint8_t>(mode) & 0x02) >> 1;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	105b      	asrs	r3, r3, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]
	ADCV[0]   = md_bits + 0x02;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	3302      	adds	r3, #2
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	ADAX[0]   = md_bits + 0x04;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	3304      	adds	r3, #4
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	ADSTAT[0] = md_bits + 0x04;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	3304      	adds	r3, #4
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	md_bits   = (static_cast<uint8_t>(mode) & 0x01) << 7;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	01db      	lsls	r3, r3, #7
 80093e6:	75fb      	strb	r3, [r7, #23]
	ADCV[1]   =	md_bits	+ 0x60 + (static_cast<uint8_t>(dcp) << 4) + static_cast<uint8_t>(cell);
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	4413      	add	r3, r2
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	4413      	add	r3, r2
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	3360      	adds	r3, #96	; 0x60
 8009400:	b2da      	uxtb	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	ADAX[1]   =	md_bits	+ 0x60 + static_cast<uint8_t>(aux);
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	b2da      	uxtb	r2, r3
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	4413      	add	r3, r2
 8009410:	b2db      	uxtb	r3, r3
 8009412:	3360      	adds	r3, #96	; 0x60
 8009414:	b2da      	uxtb	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	ADSTAT[1] = md_bits + 0x68 + static_cast<uint8_t>(sts);
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	b2da      	uxtb	r2, r3
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	4413      	add	r3, r2
 8009424:	b2db      	uxtb	r3, r3
 8009426:	3368      	adds	r3, #104	; 0x68
 8009428:	b2da      	uxtb	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	pec = PEC15Calc(ADCV, 2);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3390      	adds	r3, #144	; 0x90
 8009434:	2202      	movs	r2, #2
 8009436:	4619      	mov	r1, r3
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff f8af 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 800943e:	4603      	mov	r3, r0
 8009440:	82bb      	strh	r3, [r7, #20]
	ADCV[2] = static_cast<uint8_t>(pec >> 8);
 8009442:	8abb      	ldrh	r3, [r7, #20]
 8009444:	121b      	asrs	r3, r3, #8
 8009446:	b2da      	uxtb	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	ADCV[3] = static_cast<uint8_t>(pec);
 800944e:	8abb      	ldrh	r3, [r7, #20]
 8009450:	b2da      	uxtb	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	pec = PEC15Calc(ADAX, 2);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3394      	adds	r3, #148	; 0x94
 800945c:	2202      	movs	r2, #2
 800945e:	4619      	mov	r1, r3
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff f89b 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 8009466:	4603      	mov	r3, r0
 8009468:	82bb      	strh	r3, [r7, #20]
	ADAX[2] = static_cast<uint8_t>(pec >> 8);
 800946a:	8abb      	ldrh	r3, [r7, #20]
 800946c:	121b      	asrs	r3, r3, #8
 800946e:	b2da      	uxtb	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	ADAX[3] = static_cast<uint8_t>(pec);
 8009476:	8abb      	ldrh	r3, [r7, #20]
 8009478:	b2da      	uxtb	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	pec = PEC15Calc(ADAX, 2);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3394      	adds	r3, #148	; 0x94
 8009484:	2202      	movs	r2, #2
 8009486:	4619      	mov	r1, r3
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff f887 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 800948e:	4603      	mov	r3, r0
 8009490:	82bb      	strh	r3, [r7, #20]
	ADSTAT[2] = static_cast<uint8_t>(pec >> 8);
 8009492:	8abb      	ldrh	r3, [r7, #20]
 8009494:	121b      	asrs	r3, r3, #8
 8009496:	b2da      	uxtb	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	ADSTAT[3] = static_cast<uint8_t>(pec);
 800949e:	8abb      	ldrh	r3, [r7, #20]
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
}
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <_ZN7LTC682013WakeFromSleepEv>:
	than tIDLE. In this case, after waiting longer than the time
	of N * tWAKE, the host may send another dummy byte and
	wait for the time N * tREADY, in order to ensure that all
	devices are in the READY state."
 */
void WakeFromSleep(void) {
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
	uint8_t data = 0xFF;
 80094ba:	23ff      	movs	r3, #255	; 0xff
 80094bc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi, &data, 1, 10);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6858      	ldr	r0, [r3, #4]
 80094c2:	f107 010f 	add.w	r1, r7, #15
 80094c6:	230a      	movs	r3, #10
 80094c8:	2201      	movs	r2, #1
 80094ca:	f7fa fb88 	bl	8003bde <HAL_SPI_Transmit>
	HAL_Delay(IC_NUM * T_WAKE_MAX);
 80094ce:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80094d2:	f7f7 f889 	bl	80005e8 <HAL_Delay>
#if (IC_NUM * T_WAKE_MAX >= T_IDLE_MIN)
	HAL_SPI_Transmit(&hspi, &data, 1, 10);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6858      	ldr	r0, [r3, #4]
 80094da:	f107 010f 	add.w	r1, r7, #15
 80094de:	230a      	movs	r3, #10
 80094e0:	2201      	movs	r2, #1
 80094e2:	f7fa fb7c 	bl	8003bde <HAL_SPI_Transmit>
	HAL_Delay(IC_NUM * T_READY);
 80094e6:	2078      	movs	r0, #120	; 0x78
 80094e8:	f7f7 f87e 	bl	80005e8 <HAL_Delay>
#endif
}
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <_Z7reverseIA12_A6_hEDaRKT_>:
private:
    Range const& range;
};

template<typename Range>
auto reverse(Range const& range) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	return Reverse<Range>{ range };
 80094fc:	f107 030c 	add.w	r3, r7, #12
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	f001 fcab 	bl	800ae5e <_ZN7ReverseIA12_A6_hEC1ERA12_A6_Kh>
 8009508:	68fb      	ldr	r3, [r7, #12]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNK7ReverseIA12_A6_hE5beginEv>:
    auto begin() const {
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
    	return std::make_reverse_iterator(std::end(range));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f001 fcab 	bl	800ae7c <_ZSt3endIA6_KhLj12EEPT_RAT0__S2_>
 8009526:	4602      	mov	r2, r0
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f001 fcb1 	bl	800ae94 <_ZSt21make_reverse_iteratorIPA6_KhESt16reverse_iteratorIT_ES4_>
    }
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <_ZNK7ReverseIA12_A6_hE3endEv>:
    auto end() const {
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
    	return std::make_reverse_iterator(std::begin(range));
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f001 fcb0 	bl	800aeae <_ZSt5beginIA6_KhLj12EEPT_RAT0__S2_>
 800954e:	4602      	mov	r2, r0
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f001 fc9d 	bl	800ae94 <_ZSt21make_reverse_iteratorIPA6_KhESt16reverse_iteratorIT_ES4_>
    }
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <_ZN7LTC682019WriteConfigRegisterERA12_A6_h>:

/* Write the LTC6804 configuration register. */
void WriteConfigRegister(CfgTxRegisters& cfg_tx) {
 8009562:	b590      	push	{r4, r7, lr}
 8009564:	b08f      	sub	sp, #60	; 0x3c
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
	buffer = { 0x00, 0x01, 0x3D, 0x6E };
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	332c      	adds	r3, #44	; 0x2c
 8009570:	2264      	movs	r2, #100	; 0x64
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f002 f8e7 	bl	800b748 <memset>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	223d      	movs	r2, #61	; 0x3d
 8009586:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	226e      	movs	r2, #110	; 0x6e
 800958e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	uint8_t buffer_index = 4; // One past the elements added in the line above.
 8009592:	2304      	movs	r3, #4
 8009594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (auto const& row : reverse(cfg_tx)) {
 8009598:	6838      	ldr	r0, [r7, #0]
 800959a:	f7ff ffab 	bl	80094f4 <_Z7reverseIA12_A6_hEDaRKT_>
 800959e:	4603      	mov	r3, r0
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	f107 0314 	add.w	r3, r7, #20
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095a8:	f107 0310 	add.w	r3, r7, #16
 80095ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff ffaf 	bl	8009512 <_ZNK7ReverseIA12_A6_hE5beginEv>
 80095b4:	f107 030c 	add.w	r3, r7, #12
 80095b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff ffbd 	bl	800953a <_ZNK7ReverseIA12_A6_hE3endEv>
 80095c0:	f107 020c 	add.w	r2, r7, #12
 80095c4:	f107 0310 	add.w	r3, r7, #16
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 fc7a 	bl	800aec4 <_ZStneIPA6_KhEbRKSt16reverse_iteratorIT_ES7_>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d054      	beq.n	8009680 <_ZN7LTC682019WriteConfigRegisterERA12_A6_h+0x11e>
 80095d6:	f107 0310 	add.w	r3, r7, #16
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 fc93 	bl	800af06 <_ZNKSt16reverse_iteratorIPA6_KhEdeEv>
 80095e0:	62b8      	str	r0, [r7, #40]	; 0x28
		for (auto const& byte : row)
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	3306      	adds	r3, #6
 80095ee:	623b      	str	r3, [r7, #32]
 80095f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d015      	beq.n	8009624 <_ZN7LTC682019WriteConfigRegisterERA12_A6_h+0xc2>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	61fb      	str	r3, [r7, #28]
			buffer[buffer_index++] = byte;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009606:	1c59      	adds	r1, r3, #1
 8009608:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f7fe fff8 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 8009614:	4602      	mov	r2, r0
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	7013      	strb	r3, [r2, #0]
		for (auto const& byte : row)
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	3301      	adds	r3, #1
 8009620:	633b      	str	r3, [r7, #48]	; 0x30
 8009622:	e7e5      	b.n	80095f0 <_ZN7LTC682019WriteConfigRegisterERA12_A6_h+0x8e>

		auto cfg_pec = PEC15Calc(row, sizeof(row));
 8009624:	2206      	movs	r2, #6
 8009626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7fe ffb7 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 800962e:	4603      	mov	r3, r0
 8009630:	837b      	strh	r3, [r7, #26]
		buffer[buffer_index++] = static_cast<uint8_t>(cfg_pec >> 8);
 8009632:	8b7b      	ldrh	r3, [r7, #26]
 8009634:	121c      	asrs	r4, r3, #8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800963c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009640:	1c59      	adds	r1, r3, #1
 8009642:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f7fe ffdb 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 800964e:	4603      	mov	r3, r0
 8009650:	b2e2      	uxtb	r2, r4
 8009652:	701a      	strb	r2, [r3, #0]
		buffer[buffer_index++] = static_cast<uint8_t>(cfg_pec);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800965a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800965e:	1c59      	adds	r1, r3, #1
 8009660:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe ffcc 	bl	8008604 <_ZNSt5arrayIhLj100EEixEj>
 800966c:	4603      	mov	r3, r0
 800966e:	8b7a      	ldrh	r2, [r7, #26]
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	701a      	strb	r2, [r3, #0]
	for (auto const& row : reverse(cfg_tx)) {
 8009674:	f107 0310 	add.w	r3, r7, #16
 8009678:	4618      	mov	r0, r3
 800967a:	f001 fc34 	bl	800aee6 <_ZNSt16reverse_iteratorIPA6_KhEppEv>
 800967e:	e79f      	b.n	80095c0 <_ZN7LTC682019WriteConfigRegisterERA12_A6_h+0x5e>
	}

	WakeFromIdle();
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe fb51 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>
	HAL_SPI_Transmit(&hspi, buffer.data(), 100, 10);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685c      	ldr	r4, [r3, #4]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	332c      	adds	r3, #44	; 0x2c
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe ffc7 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 8009694:	4601      	mov	r1, r0
 8009696:	230a      	movs	r3, #10
 8009698:	2264      	movs	r2, #100	; 0x64
 800969a:	4620      	mov	r0, r4
 800969c:	f7fa fa9f 	bl	8003bde <HAL_SPI_Transmit>
}
 80096a0:	bf00      	nop
 80096a2:	373c      	adds	r7, #60	; 0x3c
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd90      	pop	{r4, r7, pc}

080096a8 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt>:

void ReadWriteConfigRegisters(CfgTxRegisters& cfg_tx, CfgRxRegisters& cfg_rx, const VoltageRegisters& cell_data) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b09a      	sub	sp, #104	; 0x68
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
	uint16_t DCCx = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint8_t index = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint16_t avg_cell = status.sum_of_cells / 144;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80096c8:	4aab      	ldr	r2, [pc, #684]	; (8009978 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2d0>)
 80096ca:	fba2 2303 	umull	r2, r3, r2, r3
 80096ce:	095b      	lsrs	r3, r3, #5
 80096d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	if (status.op_mode & Status::Balance) {
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 811a 	beq.w	8009918 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x270>
		switch (discharge_mode) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d065      	beq.n	80097b8 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x110>
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	f000 80b5 	beq.w	800985c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x1b4>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f040 812d 	bne.w	8009952 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2aa>
		case 0: //Discharge all above (min_voltage + delta)
			for (const auto& row : cell_data) {
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	663b      	str	r3, [r7, #96]	; 0x60
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009706:	623b      	str	r3, [r7, #32]
 8009708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	429a      	cmp	r2, r3
 800970e:	f000 811b 	beq.w	8009948 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2a0>
 8009712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009714:	61fb      	str	r3, [r7, #28]
				for (const auto& voltage : row )
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	61bb      	str	r3, [r7, #24]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	3318      	adds	r3, #24
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	429a      	cmp	r2, r3
 800972a:	d01c      	beq.n	8009766 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0xbe>
 800972c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800972e:	613b      	str	r3, [r7, #16]
					if (voltage > status.min_voltage + kDelta)
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800973c:	3364      	adds	r3, #100	; 0x64
 800973e:	429a      	cmp	r2, r3
 8009740:	dd0d      	ble.n	800975e <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0xb6>
						DCCx |= 1 << std::distance(row, &voltage); // Set bit
 8009742:	6939      	ldr	r1, [r7, #16]
 8009744:	69f8      	ldr	r0, [r7, #28]
 8009746:	f001 fbf9 	bl	800af3c <_ZSt8distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800974a:	4602      	mov	r2, r0
 800974c:	2301      	movs	r3, #1
 800974e:	4093      	lsls	r3, r2
 8009750:	b21a      	sxth	r2, r3
 8009752:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8009756:	4313      	orrs	r3, r2
 8009758:	b21b      	sxth	r3, r3
 800975a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (const auto& voltage : row )
 800975e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009760:	3302      	adds	r3, #2
 8009762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009764:	e7de      	b.n	8009724 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x7c>

				cfg_tx[index][4] = DCCx & 0xFF;
 8009766:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800976a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800976e:	b2d8      	uxtb	r0, r3
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4413      	add	r3, r2
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	440b      	add	r3, r1
 800977c:	3304      	adds	r3, #4
 800977e:	4602      	mov	r2, r0
 8009780:	701a      	strb	r2, [r3, #0]
				cfg_tx[index++][5] = DCCx >> 8 & 0xFF; // TODO All of these used to be 0x0F. Seemed wrong?
 8009782:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b29a      	uxth	r2, r3
 800978a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800978e:	1c59      	adds	r1, r3, #1
 8009790:	f887 1065 	strb.w	r1, [r7, #101]	; 0x65
 8009794:	4619      	mov	r1, r3
 8009796:	b2d0      	uxtb	r0, r2
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	460b      	mov	r3, r1
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	440b      	add	r3, r1
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4413      	add	r3, r2
 80097a4:	3305      	adds	r3, #5
 80097a6:	4602      	mov	r2, r0
 80097a8:	701a      	strb	r2, [r3, #0]
				DCCx = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			for (const auto& row : cell_data) {
 80097b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097b2:	3318      	adds	r3, #24
 80097b4:	663b      	str	r3, [r7, #96]	; 0x60
 80097b6:	e7a7      	b.n	8009708 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x60>
			}
			break;

		case 1: //Discharge only the max_voltage cell.
			// TODO could be wrongly implemented, and id could be used wrong.
			if (status.max_voltage - status.min_voltage > kDelta) {
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80097be:	461a      	mov	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b64      	cmp	r3, #100	; 0x64
 80097ca:	f340 80bf 	ble.w	800994c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2a4>
				DCCx |= 1 << status.max_voltage_id % IC_NUM;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80097d6:	4b69      	ldr	r3, [pc, #420]	; (800997c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2d4>)
 80097d8:	fba3 1302 	umull	r1, r3, r3, r2
 80097dc:	08d9      	lsrs	r1, r3, #3
 80097de:	460b      	mov	r3, r1
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	440b      	add	r3, r1
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	461a      	mov	r2, r3
 80097ec:	2301      	movs	r3, #1
 80097ee:	4093      	lsls	r3, r2
 80097f0:	b21a      	sxth	r2, r3
 80097f2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80097f6:	4313      	orrs	r3, r2
 80097f8:	b21b      	sxth	r3, r3
 80097fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				cfg_tx[status.max_voltage_id / IC_NUM][4] = DCCx & 0xFF;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009806:	4a5d      	ldr	r2, [pc, #372]	; (800997c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2d4>)
 8009808:	fba2 2303 	umull	r2, r3, r2, r3
 800980c:	08db      	lsrs	r3, r3, #3
 800980e:	b2db      	uxtb	r3, r3
 8009810:	4619      	mov	r1, r3
 8009812:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009816:	b2d8      	uxtb	r0, r3
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	460b      	mov	r3, r1
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	440b      	add	r3, r1
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	4413      	add	r3, r2
 8009824:	3304      	adds	r3, #4
 8009826:	4602      	mov	r2, r0
 8009828:	701a      	strb	r2, [r3, #0]
				cfg_tx[status.max_voltage_id / IC_NUM][5] = DCCx >> 8 & 0xFF;
 800982a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	b298      	uxth	r0, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800983a:	4a50      	ldr	r2, [pc, #320]	; (800997c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2d4>)
 800983c:	fba2 2303 	umull	r2, r3, r2, r3
 8009840:	08db      	lsrs	r3, r3, #3
 8009842:	b2db      	uxtb	r3, r3
 8009844:	4619      	mov	r1, r3
 8009846:	b2c0      	uxtb	r0, r0
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	460b      	mov	r3, r1
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	440b      	add	r3, r1
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	4413      	add	r3, r2
 8009854:	3305      	adds	r3, #5
 8009856:	4602      	mov	r2, r0
 8009858:	701a      	strb	r2, [r3, #0]
			}
			break;
 800985a:	e077      	b.n	800994c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2a4>

		case 2: //Discharge all cells that are above (average cell voltage + delta)
			for (const auto& row : cell_data) {
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009862:	65bb      	str	r3, [r7, #88]	; 0x58
 8009864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009866:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800986a:	63bb      	str	r3, [r7, #56]	; 0x38
 800986c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	429a      	cmp	r2, r3
 8009872:	d06d      	beq.n	8009950 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2a8>
 8009874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009876:	637b      	str	r3, [r7, #52]	; 0x34
				for (const auto& voltage : row )
 8009878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987a:	633b      	str	r3, [r7, #48]	; 0x30
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	657b      	str	r3, [r7, #84]	; 0x54
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	3318      	adds	r3, #24
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	429a      	cmp	r2, r3
 800988c:	d01b      	beq.n	80098c6 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x21e>
 800988e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009890:	62bb      	str	r3, [r7, #40]	; 0x28
					if (voltage > avg_cell + kDelta)
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800989c:	3364      	adds	r3, #100	; 0x64
 800989e:	429a      	cmp	r2, r3
 80098a0:	dd0d      	ble.n	80098be <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x216>
						DCCx |= 1 << std::distance(row, &voltage); // Set bit
 80098a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80098a6:	f001 fb49 	bl	800af3c <_ZSt8distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80098aa:	4602      	mov	r2, r0
 80098ac:	2301      	movs	r3, #1
 80098ae:	4093      	lsls	r3, r2
 80098b0:	b21a      	sxth	r2, r3
 80098b2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80098b6:	4313      	orrs	r3, r2
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (const auto& voltage : row )
 80098be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c0:	3302      	adds	r3, #2
 80098c2:	657b      	str	r3, [r7, #84]	; 0x54
 80098c4:	e7df      	b.n	8009886 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x1de>

				cfg_tx[index][4] = DCCx & 0xFF;
 80098c6:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80098ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80098ce:	b2d8      	uxtb	r0, r3
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	4413      	add	r3, r2
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	440b      	add	r3, r1
 80098dc:	3304      	adds	r3, #4
 80098de:	4602      	mov	r2, r0
 80098e0:	701a      	strb	r2, [r3, #0]
				cfg_tx[index++][5] = DCCx >> 8 & 0xFF; // TODO All of these used to be 0x0F. Seemed wrong?
 80098e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80098e6:	0a1b      	lsrs	r3, r3, #8
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80098ee:	1c59      	adds	r1, r3, #1
 80098f0:	f887 1065 	strb.w	r1, [r7, #101]	; 0x65
 80098f4:	4619      	mov	r1, r3
 80098f6:	b2d0      	uxtb	r0, r2
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	460b      	mov	r3, r1
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	440b      	add	r3, r1
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4413      	add	r3, r2
 8009904:	3305      	adds	r3, #5
 8009906:	4602      	mov	r2, r0
 8009908:	701a      	strb	r2, [r3, #0]
				DCCx = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			for (const auto& row : cell_data) {
 8009910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009912:	3318      	adds	r3, #24
 8009914:	65bb      	str	r3, [r7, #88]	; 0x58
 8009916:	e7a9      	b.n	800986c <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x1c4>
			}
			break;
		}
	} else
		for (auto& row : cfg_tx)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	64bb      	str	r3, [r7, #72]	; 0x48
 800991c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800991e:	653b      	str	r3, [r7, #80]	; 0x50
 8009920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009922:	3348      	adds	r3, #72	; 0x48
 8009924:	647b      	str	r3, [r7, #68]	; 0x44
 8009926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800992a:	429a      	cmp	r2, r3
 800992c:	d011      	beq.n	8009952 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2aa>
 800992e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009930:	643b      	str	r3, [r7, #64]	; 0x40
			row[4] = row[5] = 0;
 8009932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009934:	2200      	movs	r2, #0
 8009936:	715a      	strb	r2, [r3, #5]
 8009938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800993a:	795a      	ldrb	r2, [r3, #5]
 800993c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800993e:	711a      	strb	r2, [r3, #4]
		for (auto& row : cfg_tx)
 8009940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009942:	3306      	adds	r3, #6
 8009944:	653b      	str	r3, [r7, #80]	; 0x50
 8009946:	e7ee      	b.n	8009926 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x27e>
			break;
 8009948:	bf00      	nop
 800994a:	e002      	b.n	8009952 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2aa>
			break;
 800994c:	bf00      	nop
 800994e:	e000      	b.n	8009952 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt+0x2aa>
			break;
 8009950:	bf00      	nop

	WakeFromSleep();
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fdad 	bl	80094b2 <_ZN7LTC682013WakeFromSleepEv>
	WriteConfigRegister(cfg_tx);
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fe01 	bl	8009562 <_ZN7LTC682019WriteConfigRegisterERA12_A6_h>
	HAL_Delay(500);
 8009960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009964:	f7f6 fe40 	bl	80005e8 <HAL_Delay>
	ReadConfigRegister(cfg_rx);
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f808 	bl	8009980 <_ZN7LTC682018ReadConfigRegisterERA12_A8_h>
}
 8009970:	bf00      	nop
 8009972:	3768      	adds	r7, #104	; 0x68
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	38e38e39 	.word	0x38e38e39
 800997c:	aaaaaaab 	.word	0xaaaaaaab

08009980 <_ZN7LTC682018ReadConfigRegisterERA12_A8_h>:

/* Reads configuration registers of a LTC6804 daisy chain. */
int8_t ReadConfigRegister(CfgRxRegisters& cfg_rx) {
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b08b      	sub	sp, #44	; 0x2c
 8009984:	af02      	add	r7, sp, #8
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
	int8_t pec_error;
	buffer = {0x00, 0x02, 0x2b, 0x0a};
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	332c      	adds	r3, #44	; 0x2c
 800998e:	2264      	movs	r2, #100	; 0x64
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f001 fed8 	bl	800b748 <memset>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	222b      	movs	r2, #43	; 0x2b
 80099a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	220a      	movs	r2, #10
 80099ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	WakeFromIdle();
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7fe f9b9 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>
	HAL_SPI_TransmitReceive(&hspi, buffer.data(), *cfg_rx, 96, 10);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685c      	ldr	r4, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	332c      	adds	r3, #44	; 0x2c
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fe2f 	bl	8008622 <_ZNSt5arrayIhLj100EE4dataEv>
 80099c4:	4601      	mov	r1, r0
 80099c6:	230a      	movs	r3, #10
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	2360      	movs	r3, #96	; 0x60
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7fa fa39 	bl	8003e46 <HAL_SPI_TransmitReceive>

	for (const auto& row : cfg_rx)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	3360      	adds	r3, #96	; 0x60
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d01b      	beq.n	8009a22 <_ZN7LTC682018ReadConfigRegisterERA12_A8_h+0xa2>
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	60fb      	str	r3, [r7, #12]
		if ((row[6] << 8 | row[7]) != PEC15Calc(row, 6))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	799b      	ldrb	r3, [r3, #6]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	79d2      	ldrb	r2, [r2, #7]
 80099f8:	ea43 0402 	orr.w	r4, r3, r2
 80099fc:	2206      	movs	r2, #6
 80099fe:	68f9      	ldr	r1, [r7, #12]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7fe fdcb 	bl	800859c <_ZN7LTC68209PEC15CalcEPKhj>
 8009a06:	4603      	mov	r3, r0
 8009a08:	429c      	cmp	r4, r3
 8009a0a:	bf14      	ite	ne
 8009a0c:	2301      	movne	r3, #1
 8009a0e:	2300      	moveq	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <_ZN7LTC682018ReadConfigRegisterERA12_A8_h+0x9a>
			pec_error = -1;
 8009a16:	23ff      	movs	r3, #255	; 0xff
 8009a18:	77fb      	strb	r3, [r7, #31]
	for (const auto& row : cfg_rx)
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	e7df      	b.n	80099e2 <_ZN7LTC682018ReadConfigRegisterERA12_A8_h+0x62>

	return pec_error;
 8009a22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3724      	adds	r7, #36	; 0x24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd90      	pop	{r4, r7, pc}

08009a2e <_ZN7LTC682011ReadVoltageERA12_A12_t>:


/* Read all cell voltages from LTC-6811 daisy chain.
 * Up to five consecutive reads are performed in case a CRC (PEC) check fails.
 * -1 on pec error, 0 on successful read. */
int8_t ReadVoltage(VoltageRegisters& cell_data) {
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
	WakeFromSleep();
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fd3a 	bl	80094b2 <_ZN7LTC682013WakeFromSleepEv>
	adcv();
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fe f987 	bl	8007d52 <_ZN7LTC68204adcvEv>
	HAL_Delay((T_REFUP_MAX + T_CYCLE_FAST_MAX) / 1000); // Was a microsecond delay on old board.
 8009a44:	2005      	movs	r0, #5
 8009a46:	f7f6 fdcf 	bl	80005e8 <HAL_Delay>
	WakeFromIdle(); // Make sure isoSPI port is active
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7fe f96c 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>

	for (uint8_t i = 0; i < 5; ++i)	{
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	d817      	bhi.n	8009a8a <_ZN7LTC682011ReadVoltageERA12_A12_t+0x5c>
		if (ReadVoltageHelper(cell_data) == Status::PecError)
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7fe f9a1 	bl	8007da4 <_ZN7LTC682017ReadVoltageHelperERA12_A12_t>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	bf0c      	ite	eq
 8009a68:	2301      	moveq	r3, #1
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <_ZN7LTC682011ReadVoltageERA12_A12_t+0x50>
			status.IncreasePecCounter();
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff fa8e 	bl	8008f98 <_ZN6Status18IncreasePecCounterEv>
 8009a7c:	e001      	b.n	8009a82 <_ZN7LTC682011ReadVoltageERA12_A12_t+0x54>
		else
			return 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e00b      	b.n	8009a9a <_ZN7LTC682011ReadVoltageERA12_A12_t+0x6c>
	for (uint8_t i = 0; i < 5; ++i)	{
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	3301      	adds	r3, #1
 8009a86:	73fb      	strb	r3, [r7, #15]
 8009a88:	e7e4      	b.n	8009a54 <_ZN7LTC682011ReadVoltageERA12_A12_t+0x26>
	}

	status.GoToSafeState(Status::PecError);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2108      	movs	r1, #8
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe f8c7 	bl	8007c24 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>
	return -1;
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <_ZN7LTC682015ReadTemperatureERA12_A6_s>:

/* Read all auxiliary voltages from LTC-6811 daisy chain.
 * Up to five consecutive reads are performed in case a CRC (PEC) check fails.
 * -1 on pec error, 0 on successful read.
 */
int8_t ReadTemperature(TempRegisters& temp_data) {
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
	WakeFromSleep();
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff fd00 	bl	80094b2 <_ZN7LTC682013WakeFromSleepEv>
	adax();
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fe f961 	bl	8007d7a <_ZN7LTC68204adaxEv>
	HAL_Delay((T_REFUP_MAX + T_CYCLE_FAST_MAX) / 1000);
 8009ab8:	2005      	movs	r0, #5
 8009aba:	f7f6 fd95 	bl	80005e8 <HAL_Delay>
	WakeFromIdle();
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fe f932 	bl	8007d28 <_ZN7LTC682012WakeFromIdleEv>

	for (uint8_t i = 0; i < 5; i++)	{
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d817      	bhi.n	8009afe <_ZN7LTC682015ReadTemperatureERA12_A6_s+0x5c>
		if (ReadTemperatureHelper(temp_data) == Status::PecError)
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7fe fb5d 	bl	8008190 <_ZN7LTC682021ReadTemperatureHelperERA12_A6_s>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	bf0c      	ite	eq
 8009adc:	2301      	moveq	r3, #1
 8009ade:	2300      	movne	r3, #0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <_ZN7LTC682015ReadTemperatureERA12_A6_s+0x50>
			status.IncreasePecCounter();
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff fa54 	bl	8008f98 <_ZN6Status18IncreasePecCounterEv>
 8009af0:	e001      	b.n	8009af6 <_ZN7LTC682015ReadTemperatureERA12_A6_s+0x54>
		else
			return 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e00b      	b.n	8009b0e <_ZN7LTC682015ReadTemperatureERA12_A6_s+0x6c>
	for (uint8_t i = 0; i < 5; i++)	{
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	3301      	adds	r3, #1
 8009afa:	73fb      	strb	r3, [r7, #15]
 8009afc:	e7e4      	b.n	8009ac8 <_ZN7LTC682015ReadTemperatureERA12_A6_s+0x26>
	}

	status.GoToSafeState(Status::PecError);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2108      	movs	r1, #8
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe f88d 	bl	8007c24 <_ZN6Status13GoToSafeStateENS_10ErrorEventE>
	return -1;
 8009b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <_ZNK7LTC682010GetLimpingEv>:
			pec_error = -1;

	return pec_error;
}

auto GetLimping() const {
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
	return limp_counter > kLimpCountLimit;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	bf8c      	ite	hi
 8009b28:	2301      	movhi	r3, #1
 8009b2a:	2300      	movls	r3, #0
 8009b2c:	b2db      	uxtb	r3, r3
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
	...

08009b3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af06      	add	r7, sp, #24


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009b42:	f7f6 fcdf 	bl	8000504 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8009b46:	f000 f8c1 	bl	8009ccc <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009b4a:	f000 faf1 	bl	800a130 <_ZL12MX_GPIO_Initv>
	MX_CAN1_Init();
 8009b4e:	f000 f959 	bl	8009e04 <_ZL12MX_CAN1_Initv>
	MX_CAN2_Init();
 8009b52:	f000 fa57 	bl	800a004 <_ZL12MX_CAN2_Initv>
	MX_SDIO_SD_Init();
 8009b56:	f000 fa8f 	bl	800a078 <_ZL15MX_SDIO_SD_Initv>
	MX_SPI1_Init();
 8009b5a:	f000 faad 	bl	800a0b8 <_ZL12MX_SPI1_Initv>
	MX_FATFS_Init();
 8009b5e:	f7ff f955 	bl	8008e0c <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	nlg5 = new NLG5;
 8009b62:	2010      	movs	r0, #16
 8009b64:	f001 fd9d 	bl	800b6a2 <_Znwj>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461c      	mov	r4, r3
 8009b6c:	f640 33ae 	movw	r3, #2990	; 0xbae
 8009b70:	223c      	movs	r2, #60	; 0x3c
 8009b72:	21a0      	movs	r1, #160	; 0xa0
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7ff fbdb 	bl	8009330 <_ZN4NLG5C1Ettt>
 8009b7a:	4b46      	ldr	r3, [pc, #280]	; (8009c94 <main+0x158>)
 8009b7c:	601c      	str	r4, [r3, #0]
	status = new Status(Status::Core | Status::Logging);
 8009b7e:	2080      	movs	r0, #128	; 0x80
 8009b80:	f001 fd8f 	bl	800b6a2 <_Znwj>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461c      	mov	r4, r3
 8009b88:	2111      	movs	r1, #17
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7ff f96e 	bl	8008e6c <_ZN6StatusC1Eh>
 8009b90:	4b41      	ldr	r3, [pc, #260]	; (8009c98 <main+0x15c>)
 8009b92:	601c      	str	r4, [r3, #0]
	ltc6820 = new LTC6820(hspi1, *status, *nlg5, hcan1); // TODO could be hcan2!
 8009b94:	20a8      	movs	r0, #168	; 0xa8
 8009b96:	f001 fd84 	bl	800b6a2 <_Znwj>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461c      	mov	r4, r3
 8009b9e:	4b3e      	ldr	r3, [pc, #248]	; (8009c98 <main+0x15c>)
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	4b3c      	ldr	r3, [pc, #240]	; (8009c94 <main+0x158>)
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9305      	str	r3, [sp, #20]
 8009baa:	2300      	movs	r3, #0
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9302      	str	r3, [sp, #8]
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	4b38      	ldr	r3, [pc, #224]	; (8009c9c <main+0x160>)
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4937      	ldr	r1, [pc, #220]	; (8009ca0 <main+0x164>)
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f7ff fbd1 	bl	800936a <_ZN7LTC6820C1ER19__SPI_HandleTypeDefR6StatusR4NLG5R19__CAN_HandleTypeDef4Mode3DCP6CellCh5AuxCh5STSCh>
 8009bc8:	4b36      	ldr	r3, [pc, #216]	; (8009ca4 <main+0x168>)
 8009bca:	601c      	str	r4, [r3, #0]
	ivt = new IVT(*status);
 8009bcc:	2018      	movs	r0, #24
 8009bce:	f001 fd68 	bl	800b6a2 <_Znwj>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461c      	mov	r4, r3
 8009bd6:	4b30      	ldr	r3, [pc, #192]	; (8009c98 <main+0x15c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f7ff fa60 	bl	80090a2 <_ZN3IVTC1ER6Status>
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <main+0x16c>)
 8009be4:	601c      	str	r4, [r3, #0]
	f_mount(&SDFatFS, "", 0);
 8009be6:	2200      	movs	r2, #0
 8009be8:	4930      	ldr	r1, [pc, #192]	; (8009cac <main+0x170>)
 8009bea:	4831      	ldr	r0, [pc, #196]	; (8009cb0 <main+0x174>)
 8009bec:	f7fc feea 	bl	80069c4 <f_mount>
	f_open(&SDFile, "data.csv", FA_WRITE | FA_OPEN_APPEND);
 8009bf0:	2232      	movs	r2, #50	; 0x32
 8009bf2:	4930      	ldr	r1, [pc, #192]	; (8009cb4 <main+0x178>)
 8009bf4:	4830      	ldr	r0, [pc, #192]	; (8009cb8 <main+0x17c>)
 8009bf6:	f7fc ff2b 	bl	8006a50 <f_open>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
#if BYPASS_INITIAL_CHECK
	status->CloseAIR();
 8009bfa:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <main+0x15c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff f99a 	bl	8008f38 <_ZNK6Status8CloseAIREv>
	HAL_Delay(5000);
 8009c04:	f241 3088 	movw	r0, #5000	; 0x1388
 8009c08:	f7f6 fcee 	bl	80005e8 <HAL_Delay>
	status->ClosePRE();
 8009c0c:	4b22      	ldr	r3, [pc, #136]	; (8009c98 <main+0x15c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff f9a7 	bl	8008f64 <_ZN6Status8ClosePREEv>
#endif
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8009c16:	2101      	movs	r1, #1
 8009c18:	4828      	ldr	r0, [pc, #160]	; (8009cbc <main+0x180>)
 8009c1a:	f7f7 fe30 	bl	800187e <HAL_GPIO_TogglePin>
		/* Each bit of opmode represents a different mode. */
		if (status->op_mode & Status::Core)
 8009c1e:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <main+0x15c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <main+0xf4>
			core_routine();
 8009c2c:	f000 fc30 	bl	800a490 <core_routine>

		if (status->op_mode & Status::Balance)
 8009c30:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <main+0x15c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d006      	beq.n	8009c4c <main+0x110>
			ltc6820->ReadWriteConfigRegisters(slave_cfg_Tx, slave_cfg_rx, cell_data);
 8009c3e:	4b19      	ldr	r3, [pc, #100]	; (8009ca4 <main+0x168>)
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	4b1f      	ldr	r3, [pc, #124]	; (8009cc0 <main+0x184>)
 8009c44:	4a1f      	ldr	r2, [pc, #124]	; (8009cc4 <main+0x188>)
 8009c46:	4920      	ldr	r1, [pc, #128]	; (8009cc8 <main+0x18c>)
 8009c48:	f7ff fd2e 	bl	80096a8 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt>

#if CAN_ENABLED
		/* 	Charging routine. CAN buffers for charger messages are checked, and charger command message is sent. */
		if (status->op_mode & Status::Charging)
 8009c4c:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <main+0x15c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <main+0x122>
			SetCharger();
 8009c5a:	f000 fcdf 	bl	800a61c <SetCharger>
#endif
#if CAN_DEBUG
		/*	Functions for debugging and untested code. */
		if (status->op_mode & Status::Debug) {
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <main+0x15c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 0308 	and.w	r3, r3, #8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d009      	beq.n	8009c80 <main+0x144>
			CANTxVoltage();
 8009c6c:	f000 fd1c 	bl	800a6a8 <CANTxVoltage>
			CANTxTemperature();
 8009c70:	f000 fde4 	bl	800a83c <CANTxTemperature>
			CANTxDCfg();
 8009c74:	f000 ff74 	bl	800ab60 <CANTxDCfg>
			CANTxUptime();
 8009c78:	f000 fe72 	bl	800a960 <CANTxUptime>
			CanTxOpMode();
 8009c7c:	f000 feca 	bl	800aa14 <CanTxOpMode>
		}
#endif
		if (status->op_mode & Status::Logging)
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <main+0x15c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0310 	and.w	r3, r3, #16
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c3      	beq.n	8009c16 <main+0xda>
			datalog_routine();
 8009c8e:	f000 fc43 	bl	800a518 <datalog_routine>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8009c92:	e7c0      	b.n	8009c16 <main+0xda>
 8009c94:	20000460 	.word	0x20000460
 8009c98:	20000464 	.word	0x20000464
 8009c9c:	2000010c 	.word	0x2000010c
 8009ca0:	200001e0 	.word	0x200001e0
 8009ca4:	20000468 	.word	0x20000468
 8009ca8:	2000046c 	.word	0x2000046c
 8009cac:	0800b914 	.word	0x0800b914
 8009cb0:	200006c4 	.word	0x200006c4
 8009cb4:	0800b918 	.word	0x0800b918
 8009cb8:	20000494 	.word	0x20000494
 8009cbc:	40020800 	.word	0x40020800
 8009cc0:	20000250 	.word	0x20000250
 8009cc4:	20000400 	.word	0x20000400
 8009cc8:	20000008 	.word	0x20000008

08009ccc <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b0ac      	sub	sp, #176	; 0xb0
 8009cd0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009cd6:	2234      	movs	r2, #52	; 0x34
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fd34 	bl	800b748 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ce0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	605a      	str	r2, [r3, #4]
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	60da      	str	r2, [r3, #12]
 8009cee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009cf0:	f107 030c 	add.w	r3, r7, #12
 8009cf4:	225c      	movs	r2, #92	; 0x5c
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fd25 	bl	800b748 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60bb      	str	r3, [r7, #8]
 8009d02:	4b3e      	ldr	r3, [pc, #248]	; (8009dfc <_Z18SystemClock_Configv+0x130>)
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	4a3d      	ldr	r2, [pc, #244]	; (8009dfc <_Z18SystemClock_Configv+0x130>)
 8009d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8009d0e:	4b3b      	ldr	r3, [pc, #236]	; (8009dfc <_Z18SystemClock_Configv+0x130>)
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d16:	60bb      	str	r3, [r7, #8]
 8009d18:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	4b38      	ldr	r3, [pc, #224]	; (8009e00 <_Z18SystemClock_Configv+0x134>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009d26:	4a36      	ldr	r2, [pc, #216]	; (8009e00 <_Z18SystemClock_Configv+0x134>)
 8009d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <_Z18SystemClock_Configv+0x134>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d36:	607b      	str	r3, [r7, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009d44:	2310      	movs	r3, #16
 8009d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 8;
 8009d56:	2308      	movs	r3, #8
 8009d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 50;
 8009d5c:	2332      	movs	r3, #50	; 0x32
 8009d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d62:	2302      	movs	r3, #2
 8009d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f8 faf9 	bl	8002370 <HAL_RCC_OscConfig>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <_Z18SystemClock_Configv+0xc6>
	{
		Error_Handler();
 8009d8e:	f001 f85f 	bl	800ae50 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d92:	230f      	movs	r3, #15
 8009d94:	66bb      	str	r3, [r7, #104]	; 0x68
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009d96:	2300      	movs	r3, #0
 8009d98:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009da2:	2300      	movs	r3, #0
 8009da4:	67bb      	str	r3, [r7, #120]	; 0x78

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009da6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7f7 fd81 	bl	80018b4 <HAL_RCC_ClockConfig>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bf14      	ite	ne
 8009db8:	2301      	movne	r3, #1
 8009dba:	2300      	moveq	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <_Z18SystemClock_Configv+0xfa>
	{
		Error_Handler();
 8009dc2:	f001 f845 	bl	800ae50 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8009dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dca:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009dd4:	f107 030c 	add.w	r3, r7, #12
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7f7 fe4d 	bl	8001a78 <HAL_RCCEx_PeriphCLKConfig>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf14      	ite	ne
 8009de4:	2301      	movne	r3, #1
 8009de6:	2300      	moveq	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <_Z18SystemClock_Configv+0x126>
	{
		Error_Handler();
 8009dee:	f001 f82f 	bl	800ae50 <Error_Handler>
	}
}
 8009df2:	bf00      	nop
 8009df4:	37b0      	adds	r7, #176	; 0xb0
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40023800 	.word	0x40023800
 8009e00:	40007000 	.word	0x40007000

08009e04 <_ZL12MX_CAN1_Initv>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	; 0x28
 8009e08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef  sFilterConfig;

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8009e0a:	4b7c      	ldr	r3, [pc, #496]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e0c:	4a7c      	ldr	r2, [pc, #496]	; (800a000 <_ZL12MX_CAN1_Initv+0x1fc>)
 8009e0e:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8009e10:	4b7a      	ldr	r3, [pc, #488]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e12:	2210      	movs	r2, #16
 8009e14:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009e16:	4b79      	ldr	r3, [pc, #484]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009e1c:	4b77      	ldr	r3, [pc, #476]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009e22:	4b76      	ldr	r3, [pc, #472]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009e28:	4b74      	ldr	r3, [pc, #464]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8009e2e:	4b73      	ldr	r3, [pc, #460]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8009e34:	4b71      	ldr	r3, [pc, #452]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8009e3a:	4b70      	ldr	r3, [pc, #448]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8009e40:	4b6e      	ldr	r3, [pc, #440]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009e46:	4b6d      	ldr	r3, [pc, #436]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8009e4c:	4b6b      	ldr	r3, [pc, #428]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009e52:	486a      	ldr	r0, [pc, #424]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e54:	f7f6 fbea 	bl	800062c <HAL_CAN_Init>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <_ZL12MX_CAN1_Initv+0x68>
	{
		Error_Handler();
 8009e68:	f000 fff2 	bl	800ae50 <Error_Handler>
	/* USER CODE BEGIN CAN1_Init 2 */

	// Need to find what filter INDEX might be.
	/* Copying from ECU code for now. */
	/* BMS filter */
	sFilterConfig.FilterBank = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8009e70:	2301      	movs	r3, #1
 8009e72:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 8009e74:	2301      	movs	r3, #1
 8009e76:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x20 << 5; // first ID
 8009e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e7c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0; // don't think anything goes here
 8009e7e:	2300      	movs	r3, #0
 8009e80:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x21 << 5; //second ID
 8009e82:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8009e86:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8009e90:	2301      	movs	r3, #1
 8009e92:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8009e94:	230e      	movs	r3, #14
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8009e98:	463b      	mov	r3, r7
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4857      	ldr	r0, [pc, #348]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009e9e:	f7f6 fcc1 	bl	8000824 <HAL_CAN_ConfigFilter>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bf14      	ite	ne
 8009ea8:	2301      	movne	r3, #1
 8009eaa:	2300      	moveq	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <_ZL12MX_CAN1_Initv+0xb2>
		Error_Handler();
 8009eb2:	f000 ffcd 	bl	800ae50 <Error_Handler>

	//sFilterConfig.FilterIdHigh = 0x8 << 5; // first ID
	//sFilterConfig.FilterIdLow = 0x0;

	sFilterConfig.FilterBank++; // ECU CAN 1
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x20 << 5;
 8009ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x21;
 8009ec2:	2321      	movs	r3, #33	; 0x21
 8009ec4:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	4619      	mov	r1, r3
 8009eca:	484c      	ldr	r0, [pc, #304]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009ecc:	f7f6 fcaa 	bl	8000824 <HAL_CAN_ConfigFilter>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	bf14      	ite	ne
 8009ed6:	2301      	movne	r3, #1
 8009ed8:	2300      	moveq	r3, #0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <_ZL12MX_CAN1_Initv+0xe0>
		Error_Handler();
 8009ee0:	f000 ffb6 	bl	800ae50 <Error_Handler>

	sFilterConfig.FilterBank++; // PDM CAN 1
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x520 << 5;
 8009eea:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8009eee:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4840      	ldr	r0, [pc, #256]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009efa:	f7f6 fc93 	bl	8000824 <HAL_CAN_ConfigFilter>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bf14      	ite	ne
 8009f04:	2301      	movne	r3, #1
 8009f06:	2300      	moveq	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <_ZL12MX_CAN1_Initv+0x10e>
		Error_Handler();
 8009f0e:	f000 ff9f 	bl	800ae50 <Error_Handler>

	sFilterConfig.FilterBank++; // ADC ID Range
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	3301      	adds	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x600 << 5;
 8009f18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009f1c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x605;
 8009f1e:	f240 6305 	movw	r3, #1541	; 0x605
 8009f22:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8009f24:	463b      	mov	r3, r7
 8009f26:	4619      	mov	r1, r3
 8009f28:	4834      	ldr	r0, [pc, #208]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009f2a:	f7f6 fc7b 	bl	8000824 <HAL_CAN_ConfigFilter>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bf14      	ite	ne
 8009f34:	2301      	movne	r3, #1
 8009f36:	2300      	moveq	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <_ZL12MX_CAN1_Initv+0x13e>
		Error_Handler();
 8009f3e:	f000 ff87 	bl	800ae50 <Error_Handler>

	sFilterConfig.FilterBank++;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	3301      	adds	r3, #1
 8009f46:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x610 << 5;
 8009f48:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 8009f4c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x614;
 8009f4e:	f240 6314 	movw	r3, #1556	; 0x614
 8009f52:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8009f54:	463b      	mov	r3, r7
 8009f56:	4619      	mov	r1, r3
 8009f58:	4828      	ldr	r0, [pc, #160]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009f5a:	f7f6 fc63 	bl	8000824 <HAL_CAN_ConfigFilter>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf14      	ite	ne
 8009f64:	2301      	movne	r3, #1
 8009f66:	2300      	moveq	r3, #0
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <_ZL12MX_CAN1_Initv+0x16e>
		Error_Handler();
 8009f6e:	f000 ff6f 	bl	800ae50 <Error_Handler>

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterBank++; // Front Wheelspeed Filter
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdHigh = 0x70;
 8009f7c:	2370      	movs	r3, #112	; 0x70
 8009f7e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x7F;
 8009f80:	237f      	movs	r3, #127	; 0x7f
 8009f82:	607b      	str	r3, [r7, #4]

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8009f84:	463b      	mov	r3, r7
 8009f86:	4619      	mov	r1, r3
 8009f88:	481c      	ldr	r0, [pc, #112]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009f8a:	f7f6 fc4b 	bl	8000824 <HAL_CAN_ConfigFilter>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bf14      	ite	ne
 8009f94:	2301      	movne	r3, #1
 8009f96:	2300      	moveq	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <_ZL12MX_CAN1_Initv+0x19e>
		Error_Handler();
 8009f9e:	f000 ff57 	bl	800ae50 <Error_Handler>

#ifndef ONECAN
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8009fa2:	4816      	ldr	r0, [pc, #88]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009fa4:	f7f6 fd1e 	bl	80009e4 <HAL_CAN_Start>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bf14      	ite	ne
 8009fae:	2301      	movne	r3, #1
 8009fb0:	2300      	moveq	r3, #0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <_ZL12MX_CAN1_Initv+0x1b8>
		Error_Handler();
 8009fb8:	f000 ff4a 	bl	800ae50 <Error_Handler>

	// Start CANRX interrupt for CAN1
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8009fbc:	2102      	movs	r1, #2
 8009fbe:	480f      	ldr	r0, [pc, #60]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009fc0:	f7f6 ff42 	bl	8000e48 <HAL_CAN_ActivateNotification>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bf14      	ite	ne
 8009fca:	2301      	movne	r3, #1
 8009fcc:	2300      	moveq	r3, #0
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <_ZL12MX_CAN1_Initv+0x1d4>
		Error_Handler();
 8009fd4:	f000 ff3c 	bl	800ae50 <Error_Handler>
#endif

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8009fd8:	4808      	ldr	r0, [pc, #32]	; (8009ffc <_ZL12MX_CAN1_Initv+0x1f8>)
 8009fda:	f7f6 fd03 	bl	80009e4 <HAL_CAN_Start>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bf14      	ite	ne
 8009fe4:	2301      	movne	r3, #1
 8009fe6:	2300      	moveq	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <_ZL12MX_CAN1_Initv+0x1ee>
		Error_Handler();
 8009fee:	f000 ff2f 	bl	800ae50 <Error_Handler>
	//TxHeader.MessageMarker = 0;


	/* USER CODE END CAN1_Init 2 */

}
 8009ff2:	bf00      	nop
 8009ff4:	3728      	adds	r7, #40	; 0x28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	2000010c 	.word	0x2000010c
 800a000:	40006400 	.word	0x40006400

0800a004 <_ZL12MX_CAN2_Initv>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a00a:	4a1a      	ldr	r2, [pc, #104]	; (800a074 <_ZL12MX_CAN2_Initv+0x70>)
 800a00c:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 800a00e:	4b18      	ldr	r3, [pc, #96]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a010:	2210      	movs	r2, #16
 800a012:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800a014:	4b16      	ldr	r3, [pc, #88]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a016:	2200      	movs	r2, #0
 800a018:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a01a:	4b15      	ldr	r3, [pc, #84]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800a020:	4b13      	ldr	r3, [pc, #76]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a028:	2200      	movs	r2, #0
 800a02a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a02e:	2200      	movs	r2, #0
 800a030:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800a032:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a034:	2200      	movs	r2, #0
 800a036:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800a03e:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a040:	2200      	movs	r2, #0
 800a042:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800a044:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a046:	2200      	movs	r2, #0
 800a048:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800a050:	4807      	ldr	r0, [pc, #28]	; (800a070 <_ZL12MX_CAN2_Initv+0x6c>)
 800a052:	f7f6 faeb 	bl	800062c <HAL_CAN_Init>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <_ZL12MX_CAN2_Initv+0x66>
	{
		Error_Handler();
 800a066:	f000 fef3 	bl	800ae50 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 800a06a:	bf00      	nop
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000134 	.word	0x20000134
 800a074:	40006800 	.word	0x40006800

0800a078 <_ZL15MX_SDIO_SD_Initv>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800a07c:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a07e:	4a0d      	ldr	r2, [pc, #52]	; (800a0b4 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 800a080:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a082:	4b0b      	ldr	r3, [pc, #44]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a084:	2200      	movs	r2, #0
 800a086:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a088:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a08e:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a090:	2200      	movs	r2, #0
 800a092:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a094:	4b06      	ldr	r3, [pc, #24]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a096:	2200      	movs	r2, #0
 800a098:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a09a:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 800a0a0:	4b03      	ldr	r3, [pc, #12]	; (800a0b0 <_ZL15MX_SDIO_SD_Initv+0x38>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800a0a6:	bf00      	nop
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	2000015c 	.word	0x2000015c
 800a0b4:	40012c00 	.word	0x40012c00

0800a0b8 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800a0bc:	4b1a      	ldr	r3, [pc, #104]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0be:	4a1b      	ldr	r2, [pc, #108]	; (800a12c <_ZL12MX_SPI1_Initv+0x74>)
 800a0c0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800a0c2:	4b19      	ldr	r3, [pc, #100]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a0c8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a0ca:	4b17      	ldr	r3, [pc, #92]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // correct
 800a0d0:	4b15      	ldr	r3, [pc, #84]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // correct
 800a0d6:	4b14      	ldr	r3, [pc, #80]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 800a0dc:	4b12      	ldr	r3, [pc, #72]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0de:	2201      	movs	r2, #1
 800a0e0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800a0e2:	4b11      	ldr	r3, [pc, #68]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0e8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a0ea:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a0f0:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a104:	220a      	movs	r2, #10
 800a106:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a108:	4807      	ldr	r0, [pc, #28]	; (800a128 <_ZL12MX_SPI1_Initv+0x70>)
 800a10a:	f7f9 fd04 	bl	8003b16 <HAL_SPI_Init>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	bf14      	ite	ne
 800a114:	2301      	movne	r3, #1
 800a116:	2300      	moveq	r3, #0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <_ZL12MX_SPI1_Initv+0x6a>
	{
		Error_Handler();
 800a11e:	f000 fe97 	bl	800ae50 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800a122:	bf00      	nop
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200001e0 	.word	0x200001e0
 800a12c:	40013000 	.word	0x40013000

0800a130 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	; 0x28
 800a134:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a136:	f107 0314 	add.w	r3, r7, #20
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	605a      	str	r2, [r3, #4]
 800a140:	609a      	str	r2, [r3, #8]
 800a142:	60da      	str	r2, [r3, #12]
 800a144:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a146:	2300      	movs	r3, #0
 800a148:	613b      	str	r3, [r7, #16]
 800a14a:	4b55      	ldr	r3, [pc, #340]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	4a54      	ldr	r2, [pc, #336]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a150:	f043 0304 	orr.w	r3, r3, #4
 800a154:	6313      	str	r3, [r2, #48]	; 0x30
 800a156:	4b52      	ldr	r3, [pc, #328]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	4b4e      	ldr	r3, [pc, #312]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16a:	4a4d      	ldr	r2, [pc, #308]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	6313      	str	r3, [r2, #48]	; 0x30
 800a172:	4b4b      	ldr	r3, [pc, #300]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a17e:	2300      	movs	r3, #0
 800a180:	60bb      	str	r3, [r7, #8]
 800a182:	4b47      	ldr	r3, [pc, #284]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a186:	4a46      	ldr	r2, [pc, #280]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a188:	f043 0301 	orr.w	r3, r3, #1
 800a18c:	6313      	str	r3, [r2, #48]	; 0x30
 800a18e:	4b44      	ldr	r3, [pc, #272]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	60bb      	str	r3, [r7, #8]
 800a198:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a19a:	2300      	movs	r3, #0
 800a19c:	607b      	str	r3, [r7, #4]
 800a19e:	4b40      	ldr	r3, [pc, #256]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	4a3f      	ldr	r2, [pc, #252]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a1a4:	f043 0302 	orr.w	r3, r3, #2
 800a1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1aa:	4b3d      	ldr	r3, [pc, #244]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	603b      	str	r3, [r7, #0]
 800a1ba:	4b39      	ldr	r3, [pc, #228]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	4a38      	ldr	r2, [pc, #224]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a1c0:	f043 0308 	orr.w	r3, r3, #8
 800a1c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a1c6:	4b36      	ldr	r3, [pc, #216]	; (800a2a0 <_ZL12MX_GPIO_Initv+0x170>)
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	f003 0308 	and.w	r3, r3, #8
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	213f      	movs	r1, #63	; 0x3f
 800a1d6:	4833      	ldr	r0, [pc, #204]	; (800a2a4 <_ZL12MX_GPIO_Initv+0x174>)
 800a1d8:	f7f7 fb38 	bl	800184c <HAL_GPIO_WritePin>
			|IO_1_Pin|IO_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2180      	movs	r1, #128	; 0x80
 800a1e0:	4831      	ldr	r0, [pc, #196]	; (800a2a8 <_ZL12MX_GPIO_Initv+0x178>)
 800a1e2:	f7f7 fb33 	bl	800184c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2103      	movs	r1, #3
 800a1ea:	4830      	ldr	r0, [pc, #192]	; (800a2ac <_ZL12MX_GPIO_Initv+0x17c>)
 800a1ec:	f7f7 fb2e 	bl	800184c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
	GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800a1f0:	233f      	movs	r3, #63	; 0x3f
 800a1f2:	617b      	str	r3, [r7, #20]
			|IO_1_Pin|IO_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a200:	f107 0314 	add.w	r3, r7, #20
 800a204:	4619      	mov	r1, r3
 800a206:	4827      	ldr	r0, [pc, #156]	; (800a2a4 <_ZL12MX_GPIO_Initv+0x174>)
 800a208:	f7f7 f976 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : IO_0_Pin */
	GPIO_InitStruct.Pin = IO_0_Pin;
 800a20c:	2380      	movs	r3, #128	; 0x80
 800a20e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a210:	2301      	movs	r3, #1
 800a212:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a218:	2300      	movs	r3, #0
 800a21a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800a21c:	f107 0314 	add.w	r3, r7, #20
 800a220:	4619      	mov	r1, r3
 800a222:	4821      	ldr	r0, [pc, #132]	; (800a2a8 <_ZL12MX_GPIO_Initv+0x178>)
 800a224:	f7f7 f968 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin */
	GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 800a228:	2303      	movs	r3, #3
 800a22a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a22c:	2301      	movs	r3, #1
 800a22e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a230:	2300      	movs	r3, #0
 800a232:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a234:	2300      	movs	r3, #0
 800a236:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a238:	f107 0314 	add.w	r3, r7, #20
 800a23c:	4619      	mov	r1, r3
 800a23e:	481b      	ldr	r0, [pc, #108]	; (800a2ac <_ZL12MX_GPIO_Initv+0x17c>)
 800a240:	f7f7 f95a 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : FansPWM_Pin */
	GPIO_InitStruct.Pin = FansPWM_Pin;
 800a244:	2304      	movs	r3, #4
 800a246:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a248:	2302      	movs	r3, #2
 800a24a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a250:	2300      	movs	r3, #0
 800a252:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a254:	2301      	movs	r3, #1
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	4619      	mov	r1, r3
 800a25e:	4813      	ldr	r0, [pc, #76]	; (800a2ac <_ZL12MX_GPIO_Initv+0x17c>)
 800a260:	f7f7 f94a 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
	GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 800a264:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a268:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	4619      	mov	r1, r3
 800a278:	480b      	ldr	r0, [pc, #44]	; (800a2a8 <_ZL12MX_GPIO_Initv+0x178>)
 800a27a:	f7f7 f93d 	bl	80014f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SOS_Pin */
	GPIO_InitStruct.Pin = SOS_Pin;
 800a27e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a282:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a284:	2303      	movs	r3, #3
 800a286:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800a28c:	f107 0314 	add.w	r3, r7, #20
 800a290:	4619      	mov	r1, r3
 800a292:	4806      	ldr	r0, [pc, #24]	; (800a2ac <_ZL12MX_GPIO_Initv+0x17c>)
 800a294:	f7f7 f930 	bl	80014f8 <HAL_GPIO_Init>

}
 800a298:	bf00      	nop
 800a29a:	3728      	adds	r7, #40	; 0x28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40023800 	.word	0x40023800
 800a2a4:	40020800 	.word	0x40020800
 800a2a8:	40020000 	.word	0x40020000
 800a2ac:	40020400 	.word	0x40020400

0800a2b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN1
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08c      	sub	sp, #48	; 0x30
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef   RxHeader;
	uint8_t data[8] = { 0 };
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	605a      	str	r2, [r3, #4]

	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a2c2:	f107 030c 	add.w	r3, r7, #12
 800a2c6:	f107 0214 	add.w	r2, r7, #20
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7f6 fca8 	bl	8000c22 <HAL_CAN_GetRxMessage>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	bf0c      	ite	eq
 800a2d8:	2301      	moveq	r3, #1
 800a2da:	2300      	movne	r3, #0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		//Placeholder switch statement
		switch(RxHeader.StdId) {
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d000      	beq.n	800a2ea <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
		case 1:
			break;
		default:
			break;
 800a2e8:	e000      	b.n	800a2ec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
			break;
 800a2ea:	bf00      	nop
		}
	}
}
 800a2ec:	bf00      	nop
 800a2ee:	3730      	adds	r7, #48	; 0x30
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN2
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08c      	sub	sp, #48	; 0x30
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef   RxHeader;
	uint8_t data[8] = { 0 };
 800a2fc:	f107 030c 	add.w	r3, r7, #12
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	605a      	str	r2, [r3, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a306:	f107 030c 	add.w	r3, r7, #12
 800a30a:	f107 0214 	add.w	r2, r7, #20
 800a30e:	2100      	movs	r1, #0
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7f6 fc86 	bl	8000c22 <HAL_CAN_GetRxMessage>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bf0c      	ite	eq
 800a31c:	2301      	moveq	r3, #1
 800a31e:	2300      	movne	r3, #0
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 80a7 	beq.w	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
		//Placeholder switch statement
		switch(RxHeader.StdId) {
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800a32e:	d01c      	beq.n	800a36a <HAL_CAN_RxFifo1MsgPendingCallback+0x76>
 800a330:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800a334:	d80d      	bhi.n	800a352 <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
 800a336:	f240 5222 	movw	r2, #1314	; 0x522
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d06b      	beq.n	800a416 <HAL_CAN_RxFifo1MsgPendingCallback+0x122>
 800a33e:	f240 5223 	movw	r2, #1315	; 0x523
 800a342:	4293      	cmp	r3, r2
 800a344:	d077      	beq.n	800a436 <HAL_CAN_RxFifo1MsgPendingCallback+0x142>
 800a346:	f240 5221 	movw	r2, #1313	; 0x521
 800a34a:	4293      	cmp	r3, r2
 800a34c:	f000 8083 	beq.w	800a456 <HAL_CAN_RxFifo1MsgPendingCallback+0x162>
				ivt->SetCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
				break;
#endif

			default:
				break;
 800a350:	e091      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
		switch(RxHeader.StdId) {
 800a352:	f240 726e 	movw	r2, #1902	; 0x76e
 800a356:	4293      	cmp	r3, r2
 800a358:	d040      	beq.n	800a3dc <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>
 800a35a:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800a35e:	4293      	cmp	r3, r2
 800a360:	d025      	beq.n	800a3ae <HAL_CAN_RxFifo1MsgPendingCallback+0xba>
 800a362:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800a366:	d011      	beq.n	800a38c <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
				break;
 800a368:	e085      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
			nlg5->a_buffer[0] = data[0];
 800a36a:	4b45      	ldr	r3, [pc, #276]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	7b3a      	ldrb	r2, [r7, #12]
 800a370:	721a      	strb	r2, [r3, #8]
			nlg5->a_buffer[1] = data[1];
 800a372:	4b43      	ldr	r3, [pc, #268]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	7b7a      	ldrb	r2, [r7, #13]
 800a378:	725a      	strb	r2, [r3, #9]
			nlg5->a_buffer[2] = data[2];
 800a37a:	4b41      	ldr	r3, [pc, #260]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	7bba      	ldrb	r2, [r7, #14]
 800a380:	729a      	strb	r2, [r3, #10]
			nlg5->a_buffer[3] = data[3];
 800a382:	4b3f      	ldr	r3, [pc, #252]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	7bfa      	ldrb	r2, [r7, #15]
 800a388:	72da      	strb	r2, [r3, #11]
			break;
 800a38a:	e074      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
			nlg5->b_buffer[0] = data[0];
 800a38c:	4b3c      	ldr	r3, [pc, #240]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	7b3a      	ldrb	r2, [r7, #12]
 800a392:	731a      	strb	r2, [r3, #12]
			nlg5->b_buffer[1] = data[1];
 800a394:	4b3a      	ldr	r3, [pc, #232]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	7b7a      	ldrb	r2, [r7, #13]
 800a39a:	735a      	strb	r2, [r3, #13]
			nlg5->b_buffer[2] = data[2];
 800a39c:	4b38      	ldr	r3, [pc, #224]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	7bba      	ldrb	r2, [r7, #14]
 800a3a2:	739a      	strb	r2, [r3, #14]
			nlg5->b_buffer[3] = data[3];
 800a3a4:	4b36      	ldr	r3, [pc, #216]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	7bfa      	ldrb	r2, [r7, #15]
 800a3aa:	73da      	strb	r2, [r3, #15]
			break;
 800a3ac:	e063      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
			switch (data[3]) {
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d811      	bhi.n	800a3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 800a3b4:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a3d9 	.word	0x0800a3d9
 800a3c0:	0800a3cd 	.word	0x0800a3cd
 800a3c4:	0800a3d3 	.word	0x0800a3d3
 800a3c8:	0800a3d9 	.word	0x0800a3d9
				canresp_get_volume_size();
 800a3cc:	f000 fcfe 	bl	800adcc <canresp_get_volume_size>
				break;
 800a3d0:	e003      	b.n	800a3da <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
				canresp_delete_logfile();
 800a3d2:	f000 fd1d 	bl	800ae10 <canresp_delete_logfile>
				break;
 800a3d6:	e000      	b.n	800a3da <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>
				break;
 800a3d8:	bf00      	nop
			break;
 800a3da:	e04c      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				ltc6820->discharge_mode = data[0];
 800a3dc:	4b29      	ldr	r3, [pc, #164]	; (800a484 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	7b3a      	ldrb	r2, [r7, #12]
 800a3e2:	701a      	strb	r2, [r3, #0]
				status->op_mode = data[1];
 800a3e4:	4b28      	ldr	r3, [pc, #160]	; (800a488 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ea:	701a      	strb	r2, [r3, #0]
				status->manual_mode = data[4] & 0x80;
 800a3ec:	7c3b      	ldrb	r3, [r7, #16]
 800a3ee:	b25a      	sxtb	r2, r3
 800a3f0:	4b25      	ldr	r3, [pc, #148]	; (800a488 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	b2d2      	uxtb	r2, r2
 800a3f6:	09d2      	lsrs	r2, r2, #7
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	705a      	strb	r2, [r3, #1]
				status->SetFanDutyCycle(data[4]); // TODO set_fan_duty_cycle(data[4], 1);
 800a3fc:	4b22      	ldr	r3, [pc, #136]	; (800a488 <HAL_CAN_RxFifo1MsgPendingCallback+0x194>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	7c3a      	ldrb	r2, [r7, #16]
 800a402:	4611      	mov	r1, r2
 800a404:	4618      	mov	r0, r3
 800a406:	f7fe fdfc 	bl	8009002 <_ZN6Status15SetFanDutyCycleEh>
				nlg5->oc_limit = data[5];
 800a40a:	7c7a      	ldrb	r2, [r7, #17]
 800a40c:	4b1c      	ldr	r3, [pc, #112]	; (800a480 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	b292      	uxth	r2, r2
 800a412:	809a      	strh	r2, [r3, #4]
				break;
 800a414:	e02f      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				ivt->SetVoltage(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800a416:	4b1d      	ldr	r3, [pc, #116]	; (800a48c <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	061a      	lsls	r2, r3, #24
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	041b      	lsls	r3, r3, #16
 800a422:	431a      	orrs	r2, r3
 800a424:	7c3b      	ldrb	r3, [r7, #16]
 800a426:	021b      	lsls	r3, r3, #8
 800a428:	4313      	orrs	r3, r2
 800a42a:	7c7a      	ldrb	r2, [r7, #17]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	4619      	mov	r1, r3
 800a430:	f7fe fe8a 	bl	8009148 <_ZN3IVT10SetVoltageEl>
				break;
 800a434:	e01f      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				ivt->SetVoltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800a436:	4b15      	ldr	r3, [pc, #84]	; (800a48c <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	061a      	lsls	r2, r3, #24
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	041b      	lsls	r3, r3, #16
 800a442:	431a      	orrs	r2, r3
 800a444:	7c3b      	ldrb	r3, [r7, #16]
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	4313      	orrs	r3, r2
 800a44a:	7c7a      	ldrb	r2, [r7, #17]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	4619      	mov	r1, r3
 800a450:	f7fe fe96 	bl	8009180 <_ZN3IVT11SetVoltage2El>
				break;
 800a454:	e00f      	b.n	800a476 <HAL_CAN_RxFifo1MsgPendingCallback+0x182>
				ivt->SetCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]));
 800a456:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	061a      	lsls	r2, r3, #24
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	041b      	lsls	r3, r3, #16
 800a462:	431a      	orrs	r2, r3
 800a464:	7c3b      	ldrb	r3, [r7, #16]
 800a466:	021b      	lsls	r3, r3, #8
 800a468:	4313      	orrs	r3, r2
 800a46a:	7c7a      	ldrb	r2, [r7, #17]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	4619      	mov	r1, r3
 800a470:	f7fe fe3a 	bl	80090e8 <_ZN3IVT10SetCurrentEl>
				break;
 800a474:	bf00      	nop
		}
	}
}
 800a476:	bf00      	nop
 800a478:	3730      	adds	r7, #48	; 0x30
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20000460 	.word	0x20000460
 800a484:	20000468 	.word	0x20000468
 800a488:	20000464 	.word	0x20000464
 800a48c:	2000046c 	.word	0x2000046c

0800a490 <core_routine>:

int8_t core_routine() {
 800a490:	b598      	push	{r3, r4, r7, lr}
 800a492:	af00      	add	r7, sp, #0
	if ((status->op_mode & 0x02) == 0)
 800a494:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <core_routine+0x70>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <core_routine+0x20>
		ltc6820->ReadWriteConfigRegisters(slave_cfg_Tx, slave_cfg_rx, cell_data);
 800a4a2:	4b18      	ldr	r3, [pc, #96]	; (800a504 <core_routine+0x74>)
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	4b18      	ldr	r3, [pc, #96]	; (800a508 <core_routine+0x78>)
 800a4a8:	4a18      	ldr	r2, [pc, #96]	; (800a50c <core_routine+0x7c>)
 800a4aa:	4919      	ldr	r1, [pc, #100]	; (800a510 <core_routine+0x80>)
 800a4ac:	f7ff f8fc 	bl	80096a8 <_ZN7LTC682024ReadWriteConfigRegistersERA12_A6_hRA12_A8_hRA12_A12_Kt>
	ltc6820->ReadVoltage(cell_data);
 800a4b0:	4b14      	ldr	r3, [pc, #80]	; (800a504 <core_routine+0x74>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4914      	ldr	r1, [pc, #80]	; (800a508 <core_routine+0x78>)
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fab9 	bl	8009a2e <_ZN7LTC682011ReadVoltageERA12_A12_t>
	ltc6820->ReadTemperature(temp_data);
 800a4bc:	4b11      	ldr	r3, [pc, #68]	; (800a504 <core_routine+0x74>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4914      	ldr	r1, [pc, #80]	; (800a514 <core_routine+0x84>)
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff faed 	bl	8009aa2 <_ZN7LTC682015ReadTemperatureERA12_A6_s>
	status->SetFanDutyCycle(status->CalcDutyCycle());// TODO set_fan_duty_cycle(get_duty_cycle(status_data.max_temp), status_data.manual_fan_dc);
 800a4c8:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <core_routine+0x70>)
 800a4ca:	681c      	ldr	r4, [r3, #0]
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <core_routine+0x70>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fda7 	bl	8009024 <_ZN6Status13CalcDutyCycleEv>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f7fe fd91 	bl	8009002 <_ZN6Status15SetFanDutyCycleEh>
	CANTxUptime();
 800a4e0:	f000 fa3e 	bl	800a960 <CANTxUptime>
	CanTxOpMode();
 800a4e4:	f000 fa96 	bl	800aa14 <CanTxOpMode>

	// Should only be called once per cycle, but pec errors will be 0 if core mode isn't enabled anyway, so not sending it won't matter then
	CanTxError();
 800a4e8:	f000 fae4 	bl	800aab4 <CanTxError>
	CANTxVoltageLimpTotal();
 800a4ec:	f000 f952 	bl	800a794 <CANTxVoltageLimpTotal>
	return status->TestLimits();
 800a4f0:	4b03      	ldr	r3, [pc, #12]	; (800a500 <core_routine+0x70>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fdc9 	bl	800908c <_ZN6Status10TestLimitsEv>
 800a4fa:	4603      	mov	r3, r0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	bd98      	pop	{r3, r4, r7, pc}
 800a500:	20000464 	.word	0x20000464
 800a504:	20000468 	.word	0x20000468
 800a508:	20000250 	.word	0x20000250
 800a50c:	20000400 	.word	0x20000400
 800a510:	20000008 	.word	0x20000008
 800a514:	20000370 	.word	0x20000370

0800a518 <datalog_routine>:

void datalog_routine(void) {
 800a518:	b5b0      	push	{r4, r5, r7, lr}
 800a51a:	b08c      	sub	sp, #48	; 0x30
 800a51c:	af04      	add	r7, sp, #16
	FILINFO inf;
	if (BSP_SD_IsDetected()) { // Will need to check the short circuit eval here. Should be okay.
 800a51e:	f7fe fc63 	bl	8008de8 <BSP_SD_IsDetected>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	bf14      	ite	ne
 800a528:	2301      	movne	r3, #1
 800a52a:	2300      	moveq	r3, #0
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d05d      	beq.n	800a5ee <datalog_routine+0xd6>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2); // led 2
 800a532:	2104      	movs	r1, #4
 800a534:	4830      	ldr	r0, [pc, #192]	; (800a5f8 <datalog_routine+0xe0>)
 800a536:	f7f7 f9a2 	bl	800187e <HAL_GPIO_TogglePin>
		if (f_stat("/hpf20", &inf) == FR_NO_FILE)
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4619      	mov	r1, r3
 800a540:	482e      	ldr	r0, [pc, #184]	; (800a5fc <datalog_routine+0xe4>)
 800a542:	f7fc fe60 	bl	8007206 <f_stat>
 800a546:	4603      	mov	r3, r0
 800a548:	2b04      	cmp	r3, #4
 800a54a:	bf0c      	ite	eq
 800a54c:	2301      	moveq	r3, #1
 800a54e:	2300      	movne	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d002      	beq.n	800a55c <datalog_routine+0x44>
			f_mkdir("/hpf20");
 800a556:	4829      	ldr	r0, [pc, #164]	; (800a5fc <datalog_routine+0xe4>)
 800a558:	f7fc ff39 	bl	80073ce <f_mkdir>

		// TODO Magic number below that needs fixing
		if (f_size(&SDFile) < 524288000 && f_open(&SDFile, "/hpf20/data.csv", FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 800a55c:	4b28      	ldr	r3, [pc, #160]	; (800a600 <datalog_routine+0xe8>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 800a564:	d209      	bcs.n	800a57a <datalog_routine+0x62>
 800a566:	2232      	movs	r2, #50	; 0x32
 800a568:	4926      	ldr	r1, [pc, #152]	; (800a604 <datalog_routine+0xec>)
 800a56a:	4825      	ldr	r0, [pc, #148]	; (800a600 <datalog_routine+0xe8>)
 800a56c:	f7fc fa70 	bl	8006a50 <f_open>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <datalog_routine+0x62>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <datalog_routine+0x64>
 800a57a:	2300      	movs	r3, #0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d036      	beq.n	800a5ee <datalog_routine+0xd6>
			f_printf(&SDFile, "%u,", status->uptime);
 800a580:	4b21      	ldr	r3, [pc, #132]	; (800a608 <datalog_routine+0xf0>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	461a      	mov	r2, r3
 800a588:	4920      	ldr	r1, [pc, #128]	; (800a60c <datalog_routine+0xf4>)
 800a58a:	481d      	ldr	r0, [pc, #116]	; (800a600 <datalog_routine+0xe8>)
 800a58c:	f7fd f89e 	bl	80076cc <f_printf>
			/* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
			f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800a590:	4b1d      	ldr	r3, [pc, #116]	; (800a608 <datalog_routine+0xf0>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a596:	4b1c      	ldr	r3, [pc, #112]	; (800a608 <datalog_routine+0xf0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6a1d      	ldr	r5, [r3, #32]
 800a59c:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <datalog_routine+0xf0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	4a19      	ldr	r2, [pc, #100]	; (800a608 <datalog_routine+0xf0>)
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	6992      	ldr	r2, [r2, #24]
 800a5a8:	4917      	ldr	r1, [pc, #92]	; (800a608 <datalog_routine+0xf0>)
 800a5aa:	6809      	ldr	r1, [r1, #0]
 800a5ac:	6949      	ldr	r1, [r1, #20]
 800a5ae:	4816      	ldr	r0, [pc, #88]	; (800a608 <datalog_routine+0xf0>)
 800a5b0:	6800      	ldr	r0, [r0, #0]
 800a5b2:	6900      	ldr	r0, [r0, #16]
 800a5b4:	9003      	str	r0, [sp, #12]
 800a5b6:	9102      	str	r1, [sp, #8]
 800a5b8:	9201      	str	r2, [sp, #4]
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	462b      	mov	r3, r5
 800a5be:	4622      	mov	r2, r4
 800a5c0:	4913      	ldr	r1, [pc, #76]	; (800a610 <datalog_routine+0xf8>)
 800a5c2:	480f      	ldr	r0, [pc, #60]	; (800a600 <datalog_routine+0xe8>)
 800a5c4:	f7fd f882 	bl	80076cc <f_printf>
					status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
			// send error message if number written doesn't match what was expected
			UINT number_written;
			f_write(&SDFile, *cell_data, sizeof(cell_data), &number_written);
 800a5c8:	1d3b      	adds	r3, r7, #4
 800a5ca:	f44f 7290 	mov.w	r2, #288	; 0x120
 800a5ce:	4911      	ldr	r1, [pc, #68]	; (800a614 <datalog_routine+0xfc>)
 800a5d0:	480b      	ldr	r0, [pc, #44]	; (800a600 <datalog_routine+0xe8>)
 800a5d2:	f7fc fbfb 	bl	8006dcc <f_write>
			f_write(&SDFile, *temp_data, sizeof(temp_data), &number_written);
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	2290      	movs	r2, #144	; 0x90
 800a5da:	490f      	ldr	r1, [pc, #60]	; (800a618 <datalog_routine+0x100>)
 800a5dc:	4808      	ldr	r0, [pc, #32]	; (800a600 <datalog_routine+0xe8>)
 800a5de:	f7fc fbf5 	bl	8006dcc <f_write>

			f_sync(&SDFile);
 800a5e2:	4807      	ldr	r0, [pc, #28]	; (800a600 <datalog_routine+0xe8>)
 800a5e4:	f7fc fd67 	bl	80070b6 <f_sync>
			f_close(&SDFile);
 800a5e8:	4805      	ldr	r0, [pc, #20]	; (800a600 <datalog_routine+0xe8>)
 800a5ea:	f7fc fde2 	bl	80071b2 <f_close>
		}
	}

}
 800a5ee:	bf00      	nop
 800a5f0:	3720      	adds	r7, #32
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	40020800 	.word	0x40020800
 800a5fc:	0800b924 	.word	0x0800b924
 800a600:	20000494 	.word	0x20000494
 800a604:	0800b92c 	.word	0x0800b92c
 800a608:	20000464 	.word	0x20000464
 800a60c:	0800b93c 	.word	0x0800b93c
 800a610:	0800b940 	.word	0x0800b940
 800a614:	20000250 	.word	0x20000250
 800a618:	20000370 	.word	0x20000370

0800a61c <SetCharger>:

/* Send charger command message on CAN bus. Every fifth time the charger_event_flag is set a reset command is sent,
 * if charger is in fault state. Otherwise a charge command is sent. */
void SetCharger(void) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
	uint8_t charger_event_flag = true; // just to get things to compile // would be set to true every 1s in the old system by a timer
 800a622:	2301      	movs	r3, #1
 800a624:	71fb      	strb	r3, [r7, #7]
	if (charger_event_flag) {
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d035      	beq.n	800a698 <SetCharger+0x7c>
		if((nlg5->a_buffer[0] == 136 || nlg5->a_buffer[0] == 152) && (nlg5->b_buffer[0] == 136 || nlg5->b_buffer[0] == 152)) {
 800a62c:	4b1c      	ldr	r3, [pc, #112]	; (800a6a0 <SetCharger+0x84>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	7a1b      	ldrb	r3, [r3, #8]
 800a632:	2b88      	cmp	r3, #136	; 0x88
 800a634:	d004      	beq.n	800a640 <SetCharger+0x24>
 800a636:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <SetCharger+0x84>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	7a1b      	ldrb	r3, [r3, #8]
 800a63c:	2b98      	cmp	r3, #152	; 0x98
 800a63e:	d109      	bne.n	800a654 <SetCharger+0x38>
 800a640:	4b17      	ldr	r3, [pc, #92]	; (800a6a0 <SetCharger+0x84>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	7b1b      	ldrb	r3, [r3, #12]
 800a646:	2b88      	cmp	r3, #136	; 0x88
 800a648:	d01f      	beq.n	800a68a <SetCharger+0x6e>
 800a64a:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <SetCharger+0x84>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	7b1b      	ldrb	r3, [r3, #12]
 800a650:	2b98      	cmp	r3, #152	; 0x98
 800a652:	d01a      	beq.n	800a68a <SetCharger+0x6e>
			// Empty for now. No need for this check.
		} else if (status->charger_event_counter++ > 4) {
 800a654:	4b13      	ldr	r3, [pc, #76]	; (800a6a4 <SetCharger+0x88>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	7bd3      	ldrb	r3, [r2, #15]
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	b2c9      	uxtb	r1, r1
 800a65e:	73d1      	strb	r1, [r2, #15]
 800a660:	2b04      	cmp	r3, #4
 800a662:	bf8c      	ite	hi
 800a664:	2301      	movhi	r3, #1
 800a666:	2300      	movls	r3, #0
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d008      	beq.n	800a680 <SetCharger+0x64>
			nlg5->ctrl = NLG5::C_C_EL;
 800a66e:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <SetCharger+0x84>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2240      	movs	r2, #64	; 0x40
 800a674:	701a      	strb	r2, [r3, #0]
			status->charger_event_counter = 0;
 800a676:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <SetCharger+0x88>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2200      	movs	r2, #0
 800a67c:	73da      	strb	r2, [r3, #15]
 800a67e:	e005      	b.n	800a68c <SetCharger+0x70>
		} else
			nlg5->ctrl = NLG5::C_C_EN;
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <SetCharger+0x84>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2280      	movs	r2, #128	; 0x80
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	e000      	b.n	800a68c <SetCharger+0x70>
		if((nlg5->a_buffer[0] == 136 || nlg5->a_buffer[0] == 152) && (nlg5->b_buffer[0] == 136 || nlg5->b_buffer[0] == 152)) {
 800a68a:	bf00      	nop

		CANTxNLGAControl();
 800a68c:	f000 faca 	bl	800ac24 <CANTxNLGAControl>
		CANTxNLGBControl();
 800a690:	f000 fb16 	bl	800acc0 <CANTxNLGBControl>
		charger_event_flag = false;
 800a694:	2300      	movs	r3, #0
 800a696:	71fb      	strb	r3, [r7, #7]
	}
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000460 	.word	0x20000460
 800a6a4:	20000464 	.word	0x20000464

0800a6a8 <CANTxVoltage>:
		return -1;

	return 0;
}

int8_t CANTxVoltage(void) {
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08c      	sub	sp, #48	; 0x30
 800a6ac:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_VOLT;
 800a6ae:	4b35      	ldr	r3, [pc, #212]	; (800a784 <CANTxVoltage+0xdc>)
 800a6b0:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800a6b4:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800a6b6:	4b33      	ldr	r3, [pc, #204]	; (800a784 <CANTxVoltage+0xdc>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800a6bc:	4b31      	ldr	r3, [pc, #196]	; (800a784 <CANTxVoltage+0xdc>)
 800a6be:	2208      	movs	r2, #8
 800a6c0:	611a      	str	r2, [r3, #16]

	uint8_t data[8];
	uint8_t byte_position = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		++TxHeader.StdId;
	}
	return 0;
#endif

	for (const auto& row : cell_data) {
 800a6c8:	4b2f      	ldr	r3, [pc, #188]	; (800a788 <CANTxVoltage+0xe0>)
 800a6ca:	623b      	str	r3, [r7, #32]
 800a6cc:	4b2e      	ldr	r3, [pc, #184]	; (800a788 <CANTxVoltage+0xe0>)
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6d0:	4b2e      	ldr	r3, [pc, #184]	; (800a78c <CANTxVoltage+0xe4>)
 800a6d2:	61fb      	str	r3, [r7, #28]
 800a6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d04e      	beq.n	800a77a <CANTxVoltage+0xd2>
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	61bb      	str	r3, [r7, #24]
		for (const auto& voltage : row) {
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	3318      	adds	r3, #24
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d03d      	beq.n	800a772 <CANTxVoltage+0xca>
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	60fb      	str	r3, [r7, #12]
			data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	121a      	asrs	r2, r3, #8
 800a700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a710:	440b      	add	r3, r1
 800a712:	f803 2c2c 	strb.w	r2, [r3, #-44]
			data[byte_position++] = static_cast<uint8_t>(voltage);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	881a      	ldrh	r2, [r3, #0]
 800a71a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a71e:	1c59      	adds	r1, r3, #1
 800a720:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 800a724:	b2d2      	uxtb	r2, r2
 800a726:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a72a:	440b      	add	r3, r1
 800a72c:	f803 2c2c 	strb.w	r2, [r3, #-44]

			if (byte_position == 8) {
 800a730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a734:	2b08      	cmp	r3, #8
 800a736:	d118      	bne.n	800a76a <CANTxVoltage+0xc2>
				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a738:	1d3a      	adds	r2, r7, #4
 800a73a:	2301      	movs	r3, #1
 800a73c:	4911      	ldr	r1, [pc, #68]	; (800a784 <CANTxVoltage+0xdc>)
 800a73e:	4814      	ldr	r0, [pc, #80]	; (800a790 <CANTxVoltage+0xe8>)
 800a740:	f7f6 f994 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	bf14      	ite	ne
 800a74a:	2301      	movne	r3, #1
 800a74c:	2300      	moveq	r3, #0
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <CANTxVoltage+0xb2>
					return -1;
 800a754:	f04f 33ff 	mov.w	r3, #4294967295
 800a758:	e010      	b.n	800a77c <CANTxVoltage+0xd4>

				++TxHeader.StdId;
 800a75a:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <CANTxVoltage+0xdc>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3301      	adds	r3, #1
 800a760:	4a08      	ldr	r2, [pc, #32]	; (800a784 <CANTxVoltage+0xdc>)
 800a762:	6013      	str	r3, [r2, #0]
				byte_position = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (const auto& voltage : row) {
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	3302      	adds	r3, #2
 800a76e:	627b      	str	r3, [r7, #36]	; 0x24
 800a770:	e7bd      	b.n	800a6ee <CANTxVoltage+0x46>
	for (const auto& row : cell_data) {
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	3318      	adds	r3, #24
 800a776:	62bb      	str	r3, [r7, #40]	; 0x28
 800a778:	e7ac      	b.n	800a6d4 <CANTxVoltage+0x2c>
			}
		}
	}
	return 0;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3730      	adds	r7, #48	; 0x30
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20000238 	.word	0x20000238
 800a788:	20000250 	.word	0x20000250
 800a78c:	20000370 	.word	0x20000370
 800a790:	2000010c 	.word	0x2000010c

0800a794 <CANTxVoltageLimpTotal>:

int8_t CANTxVoltageLimpTotal(void) {
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_VOLT_TOTAL;
 800a79a:	4b23      	ldr	r3, [pc, #140]	; (800a828 <CANTxVoltageLimpTotal+0x94>)
 800a79c:	220b      	movs	r2, #11
 800a79e:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800a7a0:	4b21      	ldr	r3, [pc, #132]	; (800a828 <CANTxVoltageLimpTotal+0x94>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800a7a6:	4b20      	ldr	r3, [pc, #128]	; (800a828 <CANTxVoltageLimpTotal+0x94>)
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	611a      	str	r2, [r3, #16]

	auto sum_of_cells = status->sum_of_cells / 10000; // TODO was being divided by 10000 on old system, I believe
 800a7ac:	4b1f      	ldr	r3, [pc, #124]	; (800a82c <CANTxVoltageLimpTotal+0x98>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a7b2:	4a1f      	ldr	r2, [pc, #124]	; (800a830 <CANTxVoltageLimpTotal+0x9c>)
 800a7b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b8:	0b5b      	lsrs	r3, r3, #13
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	60fb      	str	r3, [r7, #12]

	uint8_t data[] = {
 800a7be:	1d3b      	adds	r3, r7, #4
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	605a      	str	r2, [r3, #4]
 800a7c6:	23cd      	movs	r3, #205	; 0xcd
 800a7c8:	723b      	strb	r3, [r7, #8]
 800a7ca:	23ab      	movs	r3, #171	; 0xab
 800a7cc:	727b      	strb	r3, [r7, #9]
			static_cast<uint8_t>(sum_of_cells >> 24),
			0xCD,
			0xAB,
			0,
			ltc6820->GetLimping()
	};
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(sum_of_cells >> 8),
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	121b      	asrs	r3, r3, #8
	};
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(sum_of_cells >> 16),
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	141b      	asrs	r3, r3, #16
	};
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	71bb      	strb	r3, [r7, #6]
			static_cast<uint8_t>(sum_of_cells >> 24),
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	161b      	asrs	r3, r3, #24
	};
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	71fb      	strb	r3, [r7, #7]
			ltc6820->GetLimping()
 800a7ec:	4b11      	ldr	r3, [pc, #68]	; (800a834 <CANTxVoltageLimpTotal+0xa0>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff f990 	bl	8009b16 <_ZNK7LTC682010GetLimpingEv>
 800a7f6:	4603      	mov	r3, r0
	};
 800a7f8:	72fb      	strb	r3, [r7, #11]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a7fa:	1d3a      	adds	r2, r7, #4
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	490a      	ldr	r1, [pc, #40]	; (800a828 <CANTxVoltageLimpTotal+0x94>)
 800a800:	480d      	ldr	r0, [pc, #52]	; (800a838 <CANTxVoltageLimpTotal+0xa4>)
 800a802:	f7f6 f933 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bf14      	ite	ne
 800a80c:	2301      	movne	r3, #1
 800a80e:	2300      	moveq	r3, #0
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <CANTxVoltageLimpTotal+0x88>
		return -1;
 800a816:	f04f 33ff 	mov.w	r3, #4294967295
 800a81a:	e000      	b.n	800a81e <CANTxVoltageLimpTotal+0x8a>

	return 0;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20000238 	.word	0x20000238
 800a82c:	20000464 	.word	0x20000464
 800a830:	d1b71759 	.word	0xd1b71759
 800a834:	20000468 	.word	0x20000468
 800a838:	2000010c 	.word	0x2000010c

0800a83c <CANTxTemperature>:

int8_t CANTxTemperature(void) {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	; 0x30
 800a840:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_TEMP;
 800a842:	4b43      	ldr	r3, [pc, #268]	; (800a950 <CANTxTemperature+0x114>)
 800a844:	f240 729c 	movw	r2, #1948	; 0x79c
 800a848:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800a84a:	4b41      	ldr	r3, [pc, #260]	; (800a950 <CANTxTemperature+0x114>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800a850:	4b3f      	ldr	r3, [pc, #252]	; (800a950 <CANTxTemperature+0x114>)
 800a852:	2208      	movs	r2, #8
 800a854:	611a      	str	r2, [r3, #16]

	uint8_t data[8];
	uint8_t byte_position = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (const auto& row : temp_data) {
 800a85c:	4b3d      	ldr	r3, [pc, #244]	; (800a954 <CANTxTemperature+0x118>)
 800a85e:	623b      	str	r3, [r7, #32]
 800a860:	4b3c      	ldr	r3, [pc, #240]	; (800a954 <CANTxTemperature+0x118>)
 800a862:	62bb      	str	r3, [r7, #40]	; 0x28
 800a864:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <CANTxTemperature+0x11c>)
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d050      	beq.n	800a912 <CANTxTemperature+0xd6>
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	61bb      	str	r3, [r7, #24]
		for (const auto& temperature : row) {
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	627b      	str	r3, [r7, #36]	; 0x24
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	330c      	adds	r3, #12
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	429a      	cmp	r2, r3
 800a888:	d03f      	beq.n	800a90a <CANTxTemperature+0xce>
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	60fb      	str	r3, [r7, #12]
			data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a894:	121a      	asrs	r2, r3, #8
 800a896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 800a8a0:	b2d2      	uxtb	r2, r2
 800a8a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a8a6:	440b      	add	r3, r1
 800a8a8:	f803 2c2c 	strb.w	r2, [r3, #-44]
			data[byte_position++] = static_cast<uint8_t>(temperature);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a8b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8b6:	1c59      	adds	r1, r3, #1
 800a8b8:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 800a8bc:	b2d2      	uxtb	r2, r2
 800a8be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a8c2:	440b      	add	r3, r1
 800a8c4:	f803 2c2c 	strb.w	r2, [r3, #-44]

			if (byte_position == 8) {
 800a8c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d118      	bne.n	800a902 <CANTxTemperature+0xc6>
				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a8d0:	1d3a      	adds	r2, r7, #4
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	491e      	ldr	r1, [pc, #120]	; (800a950 <CANTxTemperature+0x114>)
 800a8d6:	4821      	ldr	r0, [pc, #132]	; (800a95c <CANTxTemperature+0x120>)
 800a8d8:	f7f6 f8c8 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bf14      	ite	ne
 800a8e2:	2301      	movne	r3, #1
 800a8e4:	2300      	moveq	r3, #0
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <CANTxTemperature+0xb6>
					return -1;
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f0:	e029      	b.n	800a946 <CANTxTemperature+0x10a>

				++TxHeader.StdId;
 800a8f2:	4b17      	ldr	r3, [pc, #92]	; (800a950 <CANTxTemperature+0x114>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	4a15      	ldr	r2, [pc, #84]	; (800a950 <CANTxTemperature+0x114>)
 800a8fa:	6013      	str	r3, [r2, #0]
				byte_position = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (const auto& temperature : row) {
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	3302      	adds	r3, #2
 800a906:	627b      	str	r3, [r7, #36]	; 0x24
 800a908:	e7bb      	b.n	800a882 <CANTxTemperature+0x46>
	for (const auto& row : temp_data) {
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	330c      	adds	r3, #12
 800a90e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a910:	e7aa      	b.n	800a868 <CANTxTemperature+0x2c>
			}
		}
	}

	if (byte_position != 0)
 800a912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <CANTxTemperature+0xe6>
		TxHeader.DLC = byte_position; // I think this is unnecessary, but it was in the old code...
 800a91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a91e:	4a0c      	ldr	r2, [pc, #48]	; (800a950 <CANTxTemperature+0x114>)
 800a920:	6113      	str	r3, [r2, #16]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a922:	1d3a      	adds	r2, r7, #4
 800a924:	2301      	movs	r3, #1
 800a926:	490a      	ldr	r1, [pc, #40]	; (800a950 <CANTxTemperature+0x114>)
 800a928:	480c      	ldr	r0, [pc, #48]	; (800a95c <CANTxTemperature+0x120>)
 800a92a:	f7f6 f89f 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	bf14      	ite	ne
 800a934:	2301      	movne	r3, #1
 800a936:	2300      	moveq	r3, #0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <CANTxTemperature+0x108>
		return -1;
 800a93e:	f04f 33ff 	mov.w	r3, #4294967295
 800a942:	e000      	b.n	800a946 <CANTxTemperature+0x10a>

	return 0;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3730      	adds	r7, #48	; 0x30
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20000238 	.word	0x20000238
 800a954:	20000370 	.word	0x20000370
 800a958:	20000400 	.word	0x20000400
 800a95c:	2000010c 	.word	0x2000010c

0800a960 <CANTxUptime>:

int32_t CANTxUptime(void) {
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
	static uint32_t upCounter;
	upCounter++; // nicer way of saving the value between function calls
 800a966:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <CANTxUptime+0xa4>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3301      	adds	r3, #1
 800a96c:	4a25      	ldr	r2, [pc, #148]	; (800aa04 <CANTxUptime+0xa4>)
 800a96e:	6013      	str	r3, [r2, #0]

	TxHeader.StdId = CAN_ID_UPTIME;
 800a970:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <CANTxUptime+0xa8>)
 800a972:	2208      	movs	r2, #8
 800a974:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800a976:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <CANTxUptime+0xa8>)
 800a978:	2200      	movs	r2, #0
 800a97a:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800a97c:	4b22      	ldr	r3, [pc, #136]	; (800aa08 <CANTxUptime+0xa8>)
 800a97e:	2208      	movs	r2, #8
 800a980:	611a      	str	r2, [r3, #16]

			static_cast<uint8_t>(status->uptime),
			static_cast<uint8_t>(status->uptime >> 8),
			static_cast<uint8_t>(status->uptime >> 16),
			static_cast<uint8_t>(status->uptime >> 24)
	};
 800a982:	4b20      	ldr	r3, [pc, #128]	; (800aa04 <CANTxUptime+0xa4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(upCounter >> 8),
 800a98a:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <CANTxUptime+0xa4>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	0a1b      	lsrs	r3, r3, #8
	};
 800a990:	b2db      	uxtb	r3, r3
 800a992:	707b      	strb	r3, [r7, #1]
			static_cast<uint8_t>(upCounter >> 16),
 800a994:	4b1b      	ldr	r3, [pc, #108]	; (800aa04 <CANTxUptime+0xa4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	0c1b      	lsrs	r3, r3, #16
	};
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	70bb      	strb	r3, [r7, #2]
			static_cast<uint8_t>(upCounter >> 24),
 800a99e:	4b19      	ldr	r3, [pc, #100]	; (800aa04 <CANTxUptime+0xa4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	0e1b      	lsrs	r3, r3, #24
	};
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(status->uptime),
 800a9a8:	4b18      	ldr	r3, [pc, #96]	; (800aa0c <CANTxUptime+0xac>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
	};
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(status->uptime >> 8),
 800a9b2:	4b16      	ldr	r3, [pc, #88]	; (800aa0c <CANTxUptime+0xac>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	0a1b      	lsrs	r3, r3, #8
	};
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(status->uptime >> 16),
 800a9be:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <CANTxUptime+0xac>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	0c1b      	lsrs	r3, r3, #16
	};
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	71bb      	strb	r3, [r7, #6]
			static_cast<uint8_t>(status->uptime >> 24)
 800a9ca:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <CANTxUptime+0xac>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	0e1b      	lsrs	r3, r3, #24
	};
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	71fb      	strb	r3, [r7, #7]


	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a9d6:	463a      	mov	r2, r7
 800a9d8:	2301      	movs	r3, #1
 800a9da:	490b      	ldr	r1, [pc, #44]	; (800aa08 <CANTxUptime+0xa8>)
 800a9dc:	480c      	ldr	r0, [pc, #48]	; (800aa10 <CANTxUptime+0xb0>)
 800a9de:	f7f6 f845 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bf14      	ite	ne
 800a9e8:	2301      	movne	r3, #1
 800a9ea:	2300      	moveq	r3, #0
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <CANTxUptime+0x98>
		return -1;
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	e000      	b.n	800a9fa <CANTxUptime+0x9a>

	return 0;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000470 	.word	0x20000470
 800aa08:	20000238 	.word	0x20000238
 800aa0c:	20000464 	.word	0x20000464
 800aa10:	2000010c 	.word	0x2000010c

0800aa14 <CanTxOpMode>:

int32_t CanTxOpMode(void) {
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_OPMODE;
 800aa1a:	4b23      	ldr	r3, [pc, #140]	; (800aaa8 <CanTxOpMode+0x94>)
 800aa1c:	2209      	movs	r2, #9
 800aa1e:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800aa20:	4b21      	ldr	r3, [pc, #132]	; (800aaa8 <CanTxOpMode+0x94>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800aa26:	4b20      	ldr	r3, [pc, #128]	; (800aaa8 <CanTxOpMode+0x94>)
 800aa28:	2208      	movs	r2, #8
 800aa2a:	611a      	str	r2, [r3, #16]

	// I believe the order of these data arrays is wrong
	uint8_t data[8] = {
			status->precharge_flag,
 800aa2c:	4b1f      	ldr	r3, [pc, #124]	; (800aaac <CanTxOpMode+0x98>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	7b1b      	ldrb	r3, [r3, #12]
			status->safe_state_executed,
			static_cast<uint8_t>(status->min_voltage & 0xFF), // This one too
			static_cast<uint8_t>(status->min_voltage >> 8),
			status->min_voltage_id,
			status->op_mode
	};
 800aa32:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(status->max_temp >> 8), // Why are we ruining a 16 bit int like this?
 800aa34:	4b1d      	ldr	r3, [pc, #116]	; (800aaac <CanTxOpMode+0x98>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aa3c:	121b      	asrs	r3, r3, #8
	};
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	707b      	strb	r3, [r7, #1]
			status->reason_code,
 800aa42:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <CanTxOpMode+0x98>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	7b9b      	ldrb	r3, [r3, #14]
	};
 800aa48:	70bb      	strb	r3, [r7, #2]
			status->safe_state_executed,
 800aa4a:	4b18      	ldr	r3, [pc, #96]	; (800aaac <CanTxOpMode+0x98>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	7b5b      	ldrb	r3, [r3, #13]
	};
 800aa50:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(status->min_voltage & 0xFF), // This one too
 800aa52:	4b16      	ldr	r3, [pc, #88]	; (800aaac <CanTxOpMode+0x98>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
	};
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(status->min_voltage >> 8),
 800aa5c:	4b13      	ldr	r3, [pc, #76]	; (800aaac <CanTxOpMode+0x98>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800aa62:	121b      	asrs	r3, r3, #8
	};
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	717b      	strb	r3, [r7, #5]
			status->min_voltage_id,
 800aa68:	4b10      	ldr	r3, [pc, #64]	; (800aaac <CanTxOpMode+0x98>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	};
 800aa70:	71bb      	strb	r3, [r7, #6]
			status->op_mode
 800aa72:	4b0e      	ldr	r3, [pc, #56]	; (800aaac <CanTxOpMode+0x98>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
	};
 800aa78:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800aa7a:	463a      	mov	r2, r7
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	490a      	ldr	r1, [pc, #40]	; (800aaa8 <CanTxOpMode+0x94>)
 800aa80:	480b      	ldr	r0, [pc, #44]	; (800aab0 <CanTxOpMode+0x9c>)
 800aa82:	f7f5 fff3 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	bf14      	ite	ne
 800aa8c:	2301      	movne	r3, #1
 800aa8e:	2300      	moveq	r3, #0
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <CanTxOpMode+0x88>
		return -1;
 800aa96:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9a:	e000      	b.n	800aa9e <CanTxOpMode+0x8a>

	return 0;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000238 	.word	0x20000238
 800aaac:	20000464 	.word	0x20000464
 800aab0:	2000010c 	.word	0x2000010c

0800aab4 <CanTxError>:

int32_t CanTxError(void) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
	auto pec_change = status->GetPecChange();
 800aaba:	4b26      	ldr	r3, [pc, #152]	; (800ab54 <CanTxError+0xa0>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fa8a 	bl	8008fd8 <_ZN6Status12GetPecChangeEv>
 800aac4:	60f8      	str	r0, [r7, #12]

	TxHeader.StdId = 0xBEEF;
 800aac6:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <CanTxError+0xa4>)
 800aac8:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 800aacc:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800aace:	4b22      	ldr	r3, [pc, #136]	; (800ab58 <CanTxError+0xa4>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800aad4:	4b20      	ldr	r3, [pc, #128]	; (800ab58 <CanTxError+0xa4>)
 800aad6:	2208      	movs	r2, #8
 800aad8:	611a      	str	r2, [r3, #16]

	uint8_t data[] = {
			static_cast<uint8_t>(status->pec_counter >> 24),
 800aada:	4b1e      	ldr	r3, [pc, #120]	; (800ab54 <CanTxError+0xa0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	0e1b      	lsrs	r3, r3, #24

			static_cast<uint8_t>(pec_change >> 24),
			static_cast<uint8_t>(pec_change >> 16),
			static_cast<uint8_t>(pec_change >> 8),
			static_cast<uint8_t>(pec_change)
	};
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(status->pec_counter >> 16),
 800aae6:	4b1b      	ldr	r3, [pc, #108]	; (800ab54 <CanTxError+0xa0>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	0c1b      	lsrs	r3, r3, #16
	};
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(status->pec_counter >> 8),
 800aaf2:	4b18      	ldr	r3, [pc, #96]	; (800ab54 <CanTxError+0xa0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
	};
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	71bb      	strb	r3, [r7, #6]
			static_cast<uint8_t>(status->pec_counter),
 800aafe:	4b15      	ldr	r3, [pc, #84]	; (800ab54 <CanTxError+0xa0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
	};
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	71fb      	strb	r3, [r7, #7]
			static_cast<uint8_t>(pec_change >> 24),
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	0e1b      	lsrs	r3, r3, #24
	};
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	723b      	strb	r3, [r7, #8]
			static_cast<uint8_t>(pec_change >> 16),
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	0c1b      	lsrs	r3, r3, #16
	};
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	727b      	strb	r3, [r7, #9]
			static_cast<uint8_t>(pec_change >> 8),
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	0a1b      	lsrs	r3, r3, #8
	};
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	72bb      	strb	r3, [r7, #10]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	72fb      	strb	r3, [r7, #11]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800ab26:	1d3a      	adds	r2, r7, #4
 800ab28:	2301      	movs	r3, #1
 800ab2a:	490b      	ldr	r1, [pc, #44]	; (800ab58 <CanTxError+0xa4>)
 800ab2c:	480b      	ldr	r0, [pc, #44]	; (800ab5c <CanTxError+0xa8>)
 800ab2e:	f7f5 ff9d 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bf14      	ite	ne
 800ab38:	2301      	movne	r3, #1
 800ab3a:	2300      	moveq	r3, #0
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <CanTxError+0x94>
		return -1;
 800ab42:	f04f 33ff 	mov.w	r3, #4294967295
 800ab46:	e000      	b.n	800ab4a <CanTxError+0x96>

	return 0;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	20000464 	.word	0x20000464
 800ab58:	20000238 	.word	0x20000238
 800ab5c:	2000010c 	.word	0x2000010c

0800ab60 <CANTxDCfg>:

/*!
	\brief Puts discharge flag data on CAN bus.
 */
int32_t CANTxDCfg(void) {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_DISHB;
 800ab66:	4b2b      	ldr	r3, [pc, #172]	; (800ac14 <CANTxDCfg+0xb4>)
 800ab68:	f240 7275 	movw	r2, #1909	; 0x775
 800ab6c:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800ab6e:	4b29      	ldr	r3, [pc, #164]	; (800ac14 <CANTxDCfg+0xb4>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800ab74:	4b27      	ldr	r3, [pc, #156]	; (800ac14 <CANTxDCfg+0xb4>)
 800ab76:	2208      	movs	r2, #8
 800ab78:	611a      	str	r2, [r3, #16]

	uint8_t data[8] = { 0 };
 800ab7a:	1d3b      	adds	r3, r7, #4
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	605a      	str	r2, [r3, #4]
	uint8_t byte_position = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	77fb      	strb	r3, [r7, #31]

	for (const auto& row : slave_cfg_rx) {
 800ab86:	4b24      	ldr	r3, [pc, #144]	; (800ac18 <CANTxDCfg+0xb8>)
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	4b23      	ldr	r3, [pc, #140]	; (800ac18 <CANTxDCfg+0xb8>)
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	4b23      	ldr	r3, [pc, #140]	; (800ac1c <CANTxDCfg+0xbc>)
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d036      	beq.n	800ac08 <CANTxDCfg+0xa8>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	60fb      	str	r3, [r7, #12]
		data[byte_position++] = row[5];
 800ab9e:	7ffb      	ldrb	r3, [r7, #31]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	77fa      	strb	r2, [r7, #31]
 800aba4:	4619      	mov	r1, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	795a      	ldrb	r2, [r3, #5]
 800abaa:	f107 0320 	add.w	r3, r7, #32
 800abae:	440b      	add	r3, r1
 800abb0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		data[byte_position++] = row[4];
 800abb4:	7ffb      	ldrb	r3, [r7, #31]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	77fa      	strb	r2, [r7, #31]
 800abba:	4619      	mov	r1, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	791a      	ldrb	r2, [r3, #4]
 800abc0:	f107 0320 	add.w	r3, r7, #32
 800abc4:	440b      	add	r3, r1
 800abc6:	f803 2c1c 	strb.w	r2, [r3, #-28]

		if (byte_position == 8) {
 800abca:	7ffb      	ldrb	r3, [r7, #31]
 800abcc:	2b08      	cmp	r3, #8
 800abce:	d117      	bne.n	800ac00 <CANTxDCfg+0xa0>
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800abd0:	1d3a      	adds	r2, r7, #4
 800abd2:	2301      	movs	r3, #1
 800abd4:	490f      	ldr	r1, [pc, #60]	; (800ac14 <CANTxDCfg+0xb4>)
 800abd6:	4812      	ldr	r0, [pc, #72]	; (800ac20 <CANTxDCfg+0xc0>)
 800abd8:	f7f5 ff48 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bf14      	ite	ne
 800abe2:	2301      	movne	r3, #1
 800abe4:	2300      	moveq	r3, #0
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <CANTxDCfg+0x92>
				return -1;
 800abec:	f04f 33ff 	mov.w	r3, #4294967295
 800abf0:	e00b      	b.n	800ac0a <CANTxDCfg+0xaa>

		byte_position = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	77fb      	strb	r3, [r7, #31]
		++TxHeader.StdId;
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <CANTxDCfg+0xb4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3301      	adds	r3, #1
 800abfc:	4a05      	ldr	r2, [pc, #20]	; (800ac14 <CANTxDCfg+0xb4>)
 800abfe:	6013      	str	r3, [r2, #0]
	for (const auto& row : slave_cfg_rx) {
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	3308      	adds	r3, #8
 800ac04:	61bb      	str	r3, [r7, #24]
 800ac06:	e7c4      	b.n	800ab92 <CANTxDCfg+0x32>
		}
	}

	return 0;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000238 	.word	0x20000238
 800ac18:	20000400 	.word	0x20000400
 800ac1c:	20000460 	.word	0x20000460
 800ac20:	2000010c 	.word	0x2000010c

0800ac24 <CANTxNLGAControl>:

/* Checks specified chargers MOB status */
int32_t CANTxNLGAControl(void) {
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_NLGA_CTRL;
 800ac2a:	4b22      	ldr	r3, [pc, #136]	; (800acb4 <CANTxNLGAControl+0x90>)
 800ac2c:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800ac30:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800ac32:	4b20      	ldr	r3, [pc, #128]	; (800acb4 <CANTxNLGAControl+0x90>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 7;
 800ac38:	4b1e      	ldr	r3, [pc, #120]	; (800acb4 <CANTxNLGAControl+0x90>)
 800ac3a:	2207      	movs	r2, #7
 800ac3c:	611a      	str	r2, [r3, #16]

	uint8_t data[7] = {
			nlg5->ctrl,
 800ac3e:	4b1e      	ldr	r3, [pc, #120]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
			static_cast<uint8_t>(nlg5->mc_limit),
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
			static_cast<uint8_t>(nlg5->ov_limit),
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
			static_cast<uint8_t>(nlg5->oc_limit)
	};
 800ac44:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800ac46:	4b1c      	ldr	r3, [pc, #112]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	885b      	ldrh	r3, [r3, #2]
 800ac4c:	121b      	asrs	r3, r3, #8
	};
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	707b      	strb	r3, [r7, #1]
			static_cast<uint8_t>(nlg5->mc_limit),
 800ac52:	4b19      	ldr	r3, [pc, #100]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	885b      	ldrh	r3, [r3, #2]
	};
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	70bb      	strb	r3, [r7, #2]
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800ac5c:	4b16      	ldr	r3, [pc, #88]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	88db      	ldrh	r3, [r3, #6]
 800ac62:	121b      	asrs	r3, r3, #8
	};
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(nlg5->ov_limit),
 800ac68:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	88db      	ldrh	r3, [r3, #6]
	};
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800ac72:	4b11      	ldr	r3, [pc, #68]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	889b      	ldrh	r3, [r3, #4]
 800ac78:	121b      	asrs	r3, r3, #8
	};
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(nlg5->oc_limit)
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	; (800acb8 <CANTxNLGAControl+0x94>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	889b      	ldrh	r3, [r3, #4]
	};
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	71bb      	strb	r3, [r7, #6]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800ac88:	463a      	mov	r2, r7
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4909      	ldr	r1, [pc, #36]	; (800acb4 <CANTxNLGAControl+0x90>)
 800ac8e:	480b      	ldr	r0, [pc, #44]	; (800acbc <CANTxNLGAControl+0x98>)
 800ac90:	f7f5 feec 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bf14      	ite	ne
 800ac9a:	2301      	movne	r3, #1
 800ac9c:	2300      	moveq	r3, #0
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <CANTxNLGAControl+0x86>
		return -1;
 800aca4:	f04f 33ff 	mov.w	r3, #4294967295
 800aca8:	e000      	b.n	800acac <CANTxNLGAControl+0x88>

	return 0;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20000238 	.word	0x20000238
 800acb8:	20000460 	.word	0x20000460
 800acbc:	2000010c 	.word	0x2000010c

0800acc0 <CANTxNLGBControl>:

// TODO This is exactly the same as the function above?
int32_t CANTxNLGBControl(void) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
	TxHeader.StdId = CAN_ID_NLGB_CTRL;
 800acc6:	4b22      	ldr	r3, [pc, #136]	; (800ad50 <CANTxNLGBControl+0x90>)
 800acc8:	f44f 62c5 	mov.w	r2, #1576	; 0x628
 800accc:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800acce:	4b20      	ldr	r3, [pc, #128]	; (800ad50 <CANTxNLGBControl+0x90>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 7;
 800acd4:	4b1e      	ldr	r3, [pc, #120]	; (800ad50 <CANTxNLGBControl+0x90>)
 800acd6:	2207      	movs	r2, #7
 800acd8:	611a      	str	r2, [r3, #16]

	uint8_t data[7] = {
			nlg5->ctrl,
 800acda:	4b1e      	ldr	r3, [pc, #120]	; (800ad54 <CANTxNLGBControl+0x94>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
			static_cast<uint8_t>(nlg5->mc_limit),
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
			static_cast<uint8_t>(nlg5->ov_limit),
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
			static_cast<uint8_t>(nlg5->oc_limit)
	};
 800ace0:	703b      	strb	r3, [r7, #0]
			static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <CANTxNLGBControl+0x94>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	121b      	asrs	r3, r3, #8
	};
 800acea:	b2db      	uxtb	r3, r3
 800acec:	707b      	strb	r3, [r7, #1]
			static_cast<uint8_t>(nlg5->mc_limit),
 800acee:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <CANTxNLGBControl+0x94>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	885b      	ldrh	r3, [r3, #2]
	};
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	70bb      	strb	r3, [r7, #2]
			static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800acf8:	4b16      	ldr	r3, [pc, #88]	; (800ad54 <CANTxNLGBControl+0x94>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	88db      	ldrh	r3, [r3, #6]
 800acfe:	121b      	asrs	r3, r3, #8
	};
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	70fb      	strb	r3, [r7, #3]
			static_cast<uint8_t>(nlg5->ov_limit),
 800ad04:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <CANTxNLGBControl+0x94>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	88db      	ldrh	r3, [r3, #6]
	};
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	713b      	strb	r3, [r7, #4]
			static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800ad0e:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <CANTxNLGBControl+0x94>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	889b      	ldrh	r3, [r3, #4]
 800ad14:	121b      	asrs	r3, r3, #8
	};
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	717b      	strb	r3, [r7, #5]
			static_cast<uint8_t>(nlg5->oc_limit)
 800ad1a:	4b0e      	ldr	r3, [pc, #56]	; (800ad54 <CANTxNLGBControl+0x94>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	889b      	ldrh	r3, [r3, #4]
	};
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	71bb      	strb	r3, [r7, #6]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800ad24:	463a      	mov	r2, r7
 800ad26:	2301      	movs	r3, #1
 800ad28:	4909      	ldr	r1, [pc, #36]	; (800ad50 <CANTxNLGBControl+0x90>)
 800ad2a:	480b      	ldr	r0, [pc, #44]	; (800ad58 <CANTxNLGBControl+0x98>)
 800ad2c:	f7f5 fe9e 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bf14      	ite	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	2300      	moveq	r3, #0
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <CANTxNLGBControl+0x86>
		return -1;
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	e000      	b.n	800ad48 <CANTxNLGBControl+0x88>

	return 0;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20000238 	.word	0x20000238
 800ad54:	20000460 	.word	0x20000460
 800ad58:	2000010c 	.word	0x2000010c

0800ad5c <CANTxVolumeSize>:

int32_t CANTxVolumeSize(uint32_t size_of_log) {
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
	TxHeader.StdId = CAN_ID_LOGGER_RESP;
 800ad64:	4b17      	ldr	r3, [pc, #92]	; (800adc4 <CANTxVolumeSize+0x68>)
 800ad66:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800ad6a:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800ad6c:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <CANTxVolumeSize+0x68>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 4;
 800ad72:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <CANTxVolumeSize+0x68>)
 800ad74:	2204      	movs	r2, #4
 800ad76:	611a      	str	r2, [r3, #16]

	// TODO possible that size_of_log can just be cast to a pointer to an 8 bit int
	uint8_t data[] = {
			static_cast<uint8_t>(size_of_log >> 24),
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	0e1b      	lsrs	r3, r3, #24
			static_cast<uint8_t>(size_of_log >> 16),
			static_cast<uint8_t>(size_of_log >> 8),
			static_cast<uint8_t>(size_of_log)
	};
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	733b      	strb	r3, [r7, #12]
			static_cast<uint8_t>(size_of_log >> 16),
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	0c1b      	lsrs	r3, r3, #16
	};
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	737b      	strb	r3, [r7, #13]
			static_cast<uint8_t>(size_of_log >> 8),
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	0a1b      	lsrs	r3, r3, #8
	};
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	73bb      	strb	r3, [r7, #14]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	73fb      	strb	r3, [r7, #15]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800ad96:	f107 020c 	add.w	r2, r7, #12
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4909      	ldr	r1, [pc, #36]	; (800adc4 <CANTxVolumeSize+0x68>)
 800ad9e:	480a      	ldr	r0, [pc, #40]	; (800adc8 <CANTxVolumeSize+0x6c>)
 800ada0:	f7f5 fe64 	bl	8000a6c <HAL_CAN_AddTxMessage>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bf14      	ite	ne
 800adaa:	2301      	movne	r3, #1
 800adac:	2300      	moveq	r3, #0
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <CANTxVolumeSize+0x5e>
		return -1;
 800adb4:	f04f 33ff 	mov.w	r3, #4294967295
 800adb8:	e000      	b.n	800adbc <CANTxVolumeSize+0x60>

	return 0;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	20000238 	.word	0x20000238
 800adc8:	2000010c 	.word	0x2000010c

0800adcc <canresp_get_volume_size>:

void canresp_get_volume_size(void) {
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800add0:	2200      	movs	r2, #0
 800add2:	490c      	ldr	r1, [pc, #48]	; (800ae04 <canresp_get_volume_size+0x38>)
 800add4:	480c      	ldr	r0, [pc, #48]	; (800ae08 <canresp_get_volume_size+0x3c>)
 800add6:	f7fb fdf5 	bl	80069c4 <f_mount>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	bf0c      	ite	eq
 800ade0:	2301      	moveq	r3, #1
 800ade2:	2300      	movne	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <canresp_get_volume_size+0x32>
		CANTxVolumeSize(f_size(&SDFile));
 800adea:	4b08      	ldr	r3, [pc, #32]	; (800ae0c <canresp_get_volume_size+0x40>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7ff ffb4 	bl	800ad5c <CANTxVolumeSize>
		f_mount(NULL, "", 0); /* Unmount */
 800adf4:	2200      	movs	r2, #0
 800adf6:	4903      	ldr	r1, [pc, #12]	; (800ae04 <canresp_get_volume_size+0x38>)
 800adf8:	2000      	movs	r0, #0
 800adfa:	f7fb fde3 	bl	80069c4 <f_mount>
	}
}
 800adfe:	bf00      	nop
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	0800b914 	.word	0x0800b914
 800ae08:	200006c4 	.word	0x200006c4
 800ae0c:	20000494 	.word	0x20000494

0800ae10 <canresp_delete_logfile>:

void canresp_delete_logfile(void) {
 800ae10:	b580      	push	{r7, lr}
 800ae12:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800ae14:	2200      	movs	r2, #0
 800ae16:	490b      	ldr	r1, [pc, #44]	; (800ae44 <canresp_delete_logfile+0x34>)
 800ae18:	480b      	ldr	r0, [pc, #44]	; (800ae48 <canresp_delete_logfile+0x38>)
 800ae1a:	f7fb fdd3 	bl	80069c4 <f_mount>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf0c      	ite	eq
 800ae24:	2301      	moveq	r3, #1
 800ae26:	2300      	movne	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <canresp_delete_logfile+0x2e>
		f_unlink("/hpf17/data.txt");
 800ae2e:	4807      	ldr	r0, [pc, #28]	; (800ae4c <canresp_delete_logfile+0x3c>)
 800ae30:	f7fc fa22 	bl	8007278 <f_unlink>
		f_mount(NULL, "", 0); /* Unmount */
 800ae34:	2200      	movs	r2, #0
 800ae36:	4903      	ldr	r1, [pc, #12]	; (800ae44 <canresp_delete_logfile+0x34>)
 800ae38:	2000      	movs	r0, #0
 800ae3a:	f7fb fdc3 	bl	80069c4 <f_mount>
	}
}
 800ae3e:	bf00      	nop
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	0800b914 	.word	0x0800b914
 800ae48:	200006c4 	.word	0x200006c4
 800ae4c:	0800b968 	.word	0x0800b968

0800ae50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800ae50:	b480      	push	{r7}
 800ae52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800ae54:	bf00      	nop
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <_ZN7ReverseIA12_A6_hEC1ERA12_A6_Kh>:
    Reverse(Range const& range) : range { range } {}
 800ae5e:	b480      	push	{r7}
 800ae60:	b083      	sub	sp, #12
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <_ZSt3endIA6_KhLj12EEPT_RAT0__S2_>:
    end(_Tp (&__arr)[_Nm])
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3348      	adds	r3, #72	; 0x48
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <_ZSt21make_reverse_iteratorIPA6_KhESt16reverse_iteratorIT_ES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // DR 2285. make_reverse_iterator
  /// Generator function for reverse_iterator.
  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
    { return reverse_iterator<_Iterator>(__i); }
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f85f 	bl	800af64 <_ZNSt16reverse_iteratorIPA6_KhEC1ES2_>
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <_ZSt5beginIA6_KhLj12EEPT_RAT0__S2_>:
    begin(_Tp (&__arr)[_Nm])
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <_ZStneIPA6_KhEbRKSt16reverse_iteratorIT_ES7_>:
    operator!=(const reverse_iterator<_Iterator>& __x,
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f856 	bl	800af82 <_ZSteqIPA6_KhEbRKSt16reverse_iteratorIT_ES7_>
 800aed6:	4603      	mov	r3, r0
 800aed8:	f083 0301 	eor.w	r3, r3, #1
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <_ZNSt16reverse_iteratorIPA6_KhEppEv>:
      operator++()
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
	--current;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	1f9a      	subs	r2, r3, #6
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	601a      	str	r2, [r3, #0]
	return *this;
 800aef8:	687b      	ldr	r3, [r7, #4]
      }
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <_ZNKSt16reverse_iteratorIPA6_KhEdeEv>:
      operator*() const
 800af06:	b480      	push	{r7}
 800af08:	b085      	sub	sp, #20
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
	_Iterator __tmp = current;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	60fb      	str	r3, [r7, #12]
	return *--__tmp;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3b06      	subs	r3, #6
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	68fb      	ldr	r3, [r7, #12]
      }
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <_ZSt19__iterator_categoryIPKtENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <_ZSt8distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800af3c:	b5b0      	push	{r4, r5, r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800af46:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800af48:	1d3b      	adds	r3, r7, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff ffec 	bl	800af28 <_ZSt19__iterator_categoryIPKtENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 800af50:	462a      	mov	r2, r5
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	4620      	mov	r0, r4
 800af56:	f000 f82a 	bl	800afae <_ZSt10__distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800af5a:	4603      	mov	r3, r0
    }
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bdb0      	pop	{r4, r5, r7, pc}

0800af64 <_ZNSt16reverse_iteratorIPA6_KhEC1ES2_>:
      reverse_iterator(iterator_type __x) : current(__x) { }
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <_ZSteqIPA6_KhEbRKSt16reverse_iteratorIT_ES7_>:
    operator==(const reverse_iterator<_Iterator>& __x,
 800af82:	b590      	push	{r4, r7, lr}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f81e 	bl	800afce <_ZNKSt16reverse_iteratorIPA6_KhE4baseEv>
 800af92:	4604      	mov	r4, r0
 800af94:	6838      	ldr	r0, [r7, #0]
 800af96:	f000 f81a 	bl	800afce <_ZNKSt16reverse_iteratorIPA6_KhE4baseEv>
 800af9a:	4603      	mov	r3, r0
 800af9c:	429c      	cmp	r4, r3
 800af9e:	bf0c      	ite	eq
 800afa0:	2301      	moveq	r3, #1
 800afa2:	2300      	movne	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd90      	pop	{r4, r7, pc}

0800afae <_ZSt10__distanceIPKtENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	105b      	asrs	r3, r3, #1
    }
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <_ZNKSt16reverse_iteratorIPA6_KhE4baseEv>:
      base() const
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
      { return current; }
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
	...

0800afe8 <SD_CheckStatus>:
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	71fb      	strb	r3, [r7, #7]
 800aff2:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <SD_CheckStatus+0x38>)
 800aff4:	2201      	movs	r2, #1
 800aff6:	701a      	strb	r2, [r3, #0]
 800aff8:	f7fd fed8 	bl	8008dac <BSP_SD_GetCardState>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d107      	bne.n	800b012 <SD_CheckStatus+0x2a>
 800b002:	4b07      	ldr	r3, [pc, #28]	; (800b020 <SD_CheckStatus+0x38>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f023 0301 	bic.w	r3, r3, #1
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b04      	ldr	r3, [pc, #16]	; (800b020 <SD_CheckStatus+0x38>)
 800b010:	701a      	strb	r2, [r3, #0]
 800b012:	4b03      	ldr	r3, [pc, #12]	; (800b020 <SD_CheckStatus+0x38>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b2db      	uxtb	r3, r3
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000050 	.word	0x20000050

0800b024 <SD_initialize>:
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	71fb      	strb	r3, [r7, #7]
 800b02e:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <SD_initialize+0x38>)
 800b030:	2201      	movs	r2, #1
 800b032:	701a      	strb	r2, [r3, #0]
 800b034:	f7fd fe58 	bl	8008ce8 <BSP_SD_Init>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d107      	bne.n	800b04e <SD_initialize+0x2a>
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff ffd1 	bl	800afe8 <SD_CheckStatus>
 800b046:	4603      	mov	r3, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	4b04      	ldr	r3, [pc, #16]	; (800b05c <SD_initialize+0x38>)
 800b04c:	701a      	strb	r2, [r3, #0]
 800b04e:	4b03      	ldr	r3, [pc, #12]	; (800b05c <SD_initialize+0x38>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20000050 	.word	0x20000050

0800b060 <SD_status>:
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	71fb      	strb	r3, [r7, #7]
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff ffbb 	bl	800afe8 <SD_CheckStatus>
 800b072:	4603      	mov	r3, r0
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <SD_read>:
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
 800b08c:	2301      	movs	r3, #1
 800b08e:	75fb      	strb	r3, [r7, #23]
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f7fd fe4b 	bl	8008d34 <BSP_SD_ReadBlocks>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d107      	bne.n	800b0b4 <SD_read+0x38>
 800b0a4:	bf00      	nop
 800b0a6:	f7fd fe81 	bl	8008dac <BSP_SD_GetCardState>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1fa      	bne.n	800b0a6 <SD_read+0x2a>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <SD_write>:
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b086      	sub	sp, #24
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	75fb      	strb	r3, [r7, #23]
 800b0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	68b8      	ldr	r0, [r7, #8]
 800b0dc:	f7fd fe48 	bl	8008d70 <BSP_SD_WriteBlocks>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d107      	bne.n	800b0f6 <SD_write+0x38>
 800b0e6:	bf00      	nop
 800b0e8:	f7fd fe60 	bl	8008dac <BSP_SD_GetCardState>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1fa      	bne.n	800b0e8 <SD_write+0x2a>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	75fb      	strb	r3, [r7, #23]
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <SD_ioctl>:
 800b100:	b580      	push	{r7, lr}
 800b102:	b08c      	sub	sp, #48	; 0x30
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	603a      	str	r2, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
 800b10c:	460b      	mov	r3, r1
 800b10e:	71bb      	strb	r3, [r7, #6]
 800b110:	2301      	movs	r3, #1
 800b112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b116:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <SD_ioctl+0xac>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <SD_ioctl+0x28>
 800b124:	2303      	movs	r3, #3
 800b126:	e03c      	b.n	800b1a2 <SD_ioctl+0xa2>
 800b128:	79bb      	ldrb	r3, [r7, #6]
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d834      	bhi.n	800b198 <SD_ioctl+0x98>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <SD_ioctl+0x34>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b14d 	.word	0x0800b14d
 800b13c:	0800b165 	.word	0x0800b165
 800b140:	0800b17f 	.word	0x0800b17f
 800b144:	2300      	movs	r3, #0
 800b146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b14a:	e028      	b.n	800b19e <SD_ioctl+0x9e>
 800b14c:	f107 030c 	add.w	r3, r7, #12
 800b150:	4618      	mov	r0, r3
 800b152:	f7fd fe3b 	bl	8008dcc <BSP_SD_GetCardInfo>
 800b156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	2300      	movs	r3, #0
 800b15e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b162:	e01c      	b.n	800b19e <SD_ioctl+0x9e>
 800b164:	f107 030c 	add.w	r3, r7, #12
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fd fe2f 	bl	8008dcc <BSP_SD_GetCardInfo>
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	b29a      	uxth	r2, r3
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	801a      	strh	r2, [r3, #0]
 800b176:	2300      	movs	r3, #0
 800b178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b17c:	e00f      	b.n	800b19e <SD_ioctl+0x9e>
 800b17e:	f107 030c 	add.w	r3, r7, #12
 800b182:	4618      	mov	r0, r3
 800b184:	f7fd fe22 	bl	8008dcc <BSP_SD_GetCardInfo>
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	0a5a      	lsrs	r2, r3, #9
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	2300      	movs	r3, #0
 800b192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b196:	e002      	b.n	800b19e <SD_ioctl+0x9e>
 800b198:	2304      	movs	r3, #4
 800b19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b19e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3730      	adds	r7, #48	; 0x30
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000050 	.word	0x20000050

0800b1b0 <HAL_MspInit>:
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	607b      	str	r3, [r7, #4]
 800b1ba:	4b10      	ldr	r3, [pc, #64]	; (800b1fc <HAL_MspInit+0x4c>)
 800b1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1be:	4a0f      	ldr	r2, [pc, #60]	; (800b1fc <HAL_MspInit+0x4c>)
 800b1c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1c4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <HAL_MspInit+0x4c>)
 800b1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ce:	607b      	str	r3, [r7, #4]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <HAL_MspInit+0x4c>)
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	4a08      	ldr	r2, [pc, #32]	; (800b1fc <HAL_MspInit+0x4c>)
 800b1dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <HAL_MspInit+0x4c>)
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	40023800 	.word	0x40023800

0800b200 <HAL_CAN_MspInit>:
 800b200:	b580      	push	{r7, lr}
 800b202:	b08c      	sub	sp, #48	; 0x30
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	f107 031c 	add.w	r3, r7, #28
 800b20c:	2200      	movs	r2, #0
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	605a      	str	r2, [r3, #4]
 800b212:	609a      	str	r2, [r3, #8]
 800b214:	60da      	str	r2, [r3, #12]
 800b216:	611a      	str	r2, [r3, #16]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a4b      	ldr	r2, [pc, #300]	; (800b34c <HAL_CAN_MspInit+0x14c>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d13e      	bne.n	800b2a0 <HAL_CAN_MspInit+0xa0>
 800b222:	4b4b      	ldr	r3, [pc, #300]	; (800b350 <HAL_CAN_MspInit+0x150>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3301      	adds	r3, #1
 800b228:	4a49      	ldr	r2, [pc, #292]	; (800b350 <HAL_CAN_MspInit+0x150>)
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	4b48      	ldr	r3, [pc, #288]	; (800b350 <HAL_CAN_MspInit+0x150>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d10d      	bne.n	800b250 <HAL_CAN_MspInit+0x50>
 800b234:	2300      	movs	r3, #0
 800b236:	61bb      	str	r3, [r7, #24]
 800b238:	4b46      	ldr	r3, [pc, #280]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23c:	4a45      	ldr	r2, [pc, #276]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b23e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b242:	6413      	str	r3, [r2, #64]	; 0x40
 800b244:	4b43      	ldr	r3, [pc, #268]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
 800b254:	4b3f      	ldr	r3, [pc, #252]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b258:	4a3e      	ldr	r2, [pc, #248]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b25a:	f043 0301 	orr.w	r3, r3, #1
 800b25e:	6313      	str	r3, [r2, #48]	; 0x30
 800b260:	4b3c      	ldr	r3, [pc, #240]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b270:	61fb      	str	r3, [r7, #28]
 800b272:	2302      	movs	r3, #2
 800b274:	623b      	str	r3, [r7, #32]
 800b276:	2300      	movs	r3, #0
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
 800b27a:	2303      	movs	r3, #3
 800b27c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b27e:	2309      	movs	r3, #9
 800b280:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b282:	f107 031c 	add.w	r3, r7, #28
 800b286:	4619      	mov	r1, r3
 800b288:	4833      	ldr	r0, [pc, #204]	; (800b358 <HAL_CAN_MspInit+0x158>)
 800b28a:	f7f6 f935 	bl	80014f8 <HAL_GPIO_Init>
 800b28e:	2200      	movs	r2, #0
 800b290:	2100      	movs	r1, #0
 800b292:	2014      	movs	r0, #20
 800b294:	f7f6 f8f9 	bl	800148a <HAL_NVIC_SetPriority>
 800b298:	2014      	movs	r0, #20
 800b29a:	f7f6 f912 	bl	80014c2 <HAL_NVIC_EnableIRQ>
 800b29e:	e050      	b.n	800b342 <HAL_CAN_MspInit+0x142>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a2d      	ldr	r2, [pc, #180]	; (800b35c <HAL_CAN_MspInit+0x15c>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d14b      	bne.n	800b342 <HAL_CAN_MspInit+0x142>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]
 800b2ae:	4b29      	ldr	r3, [pc, #164]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	4a28      	ldr	r2, [pc, #160]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b2ba:	4b26      	ldr	r3, [pc, #152]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	4b22      	ldr	r3, [pc, #136]	; (800b350 <HAL_CAN_MspInit+0x150>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	4a20      	ldr	r2, [pc, #128]	; (800b350 <HAL_CAN_MspInit+0x150>)
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	4b1f      	ldr	r3, [pc, #124]	; (800b350 <HAL_CAN_MspInit+0x150>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d10d      	bne.n	800b2f4 <HAL_CAN_MspInit+0xf4>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	4a1c      	ldr	r2, [pc, #112]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b2e6:	6413      	str	r3, [r2, #64]	; 0x40
 800b2e8:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60bb      	str	r3, [r7, #8]
 800b2f8:	4b16      	ldr	r3, [pc, #88]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fc:	4a15      	ldr	r2, [pc, #84]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b2fe:	f043 0302 	orr.w	r3, r3, #2
 800b302:	6313      	str	r3, [r2, #48]	; 0x30
 800b304:	4b13      	ldr	r3, [pc, #76]	; (800b354 <HAL_CAN_MspInit+0x154>)
 800b306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	60bb      	str	r3, [r7, #8]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b314:	61fb      	str	r3, [r7, #28]
 800b316:	2302      	movs	r3, #2
 800b318:	623b      	str	r3, [r7, #32]
 800b31a:	2300      	movs	r3, #0
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
 800b31e:	2303      	movs	r3, #3
 800b320:	62bb      	str	r3, [r7, #40]	; 0x28
 800b322:	2309      	movs	r3, #9
 800b324:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b326:	f107 031c 	add.w	r3, r7, #28
 800b32a:	4619      	mov	r1, r3
 800b32c:	480c      	ldr	r0, [pc, #48]	; (800b360 <HAL_CAN_MspInit+0x160>)
 800b32e:	f7f6 f8e3 	bl	80014f8 <HAL_GPIO_Init>
 800b332:	2200      	movs	r2, #0
 800b334:	2100      	movs	r1, #0
 800b336:	2041      	movs	r0, #65	; 0x41
 800b338:	f7f6 f8a7 	bl	800148a <HAL_NVIC_SetPriority>
 800b33c:	2041      	movs	r0, #65	; 0x41
 800b33e:	f7f6 f8c0 	bl	80014c2 <HAL_NVIC_EnableIRQ>
 800b342:	bf00      	nop
 800b344:	3730      	adds	r7, #48	; 0x30
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	40006400 	.word	0x40006400
 800b350:	20000474 	.word	0x20000474
 800b354:	40023800 	.word	0x40023800
 800b358:	40020000 	.word	0x40020000
 800b35c:	40006800 	.word	0x40006800
 800b360:	40020400 	.word	0x40020400

0800b364 <HAL_SD_MspInit>:
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	; 0x28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	f107 0314 	add.w	r3, r7, #20
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	605a      	str	r2, [r3, #4]
 800b376:	609a      	str	r2, [r3, #8]
 800b378:	60da      	str	r2, [r3, #12]
 800b37a:	611a      	str	r2, [r3, #16]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a28      	ldr	r2, [pc, #160]	; (800b424 <HAL_SD_MspInit+0xc0>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d14a      	bne.n	800b41c <HAL_SD_MspInit+0xb8>
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	4b27      	ldr	r3, [pc, #156]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38e:	4a26      	ldr	r2, [pc, #152]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b394:	6453      	str	r3, [r2, #68]	; 0x44
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b39e:	613b      	str	r3, [r7, #16]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	4b20      	ldr	r3, [pc, #128]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	4a1f      	ldr	r2, [pc, #124]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b3ac:	f043 0304 	orr.w	r3, r3, #4
 800b3b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b3b2:	4b1d      	ldr	r3, [pc, #116]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60bb      	str	r3, [r7, #8]
 800b3c2:	4b19      	ldr	r3, [pc, #100]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b3c8:	f043 0308 	orr.w	r3, r3, #8
 800b3cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b3ce:	4b16      	ldr	r3, [pc, #88]	; (800b428 <HAL_SD_MspInit+0xc4>)
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	60bb      	str	r3, [r7, #8]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	61bb      	str	r3, [r7, #24]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61fb      	str	r3, [r7, #28]
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	623b      	str	r3, [r7, #32]
 800b3ec:	230c      	movs	r3, #12
 800b3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b3f0:	f107 0314 	add.w	r3, r7, #20
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	480d      	ldr	r0, [pc, #52]	; (800b42c <HAL_SD_MspInit+0xc8>)
 800b3f8:	f7f6 f87e 	bl	80014f8 <HAL_GPIO_Init>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	2302      	movs	r3, #2
 800b402:	61bb      	str	r3, [r7, #24]
 800b404:	2300      	movs	r3, #0
 800b406:	61fb      	str	r3, [r7, #28]
 800b408:	2303      	movs	r3, #3
 800b40a:	623b      	str	r3, [r7, #32]
 800b40c:	230c      	movs	r3, #12
 800b40e:	627b      	str	r3, [r7, #36]	; 0x24
 800b410:	f107 0314 	add.w	r3, r7, #20
 800b414:	4619      	mov	r1, r3
 800b416:	4806      	ldr	r0, [pc, #24]	; (800b430 <HAL_SD_MspInit+0xcc>)
 800b418:	f7f6 f86e 	bl	80014f8 <HAL_GPIO_Init>
 800b41c:	bf00      	nop
 800b41e:	3728      	adds	r7, #40	; 0x28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	40012c00 	.word	0x40012c00
 800b428:	40023800 	.word	0x40023800
 800b42c:	40020800 	.word	0x40020800
 800b430:	40020c00 	.word	0x40020c00

0800b434 <HAL_SPI_MspInit>:
 800b434:	b580      	push	{r7, lr}
 800b436:	b08a      	sub	sp, #40	; 0x28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	605a      	str	r2, [r3, #4]
 800b446:	609a      	str	r2, [r3, #8]
 800b448:	60da      	str	r2, [r3, #12]
 800b44a:	611a      	str	r2, [r3, #16]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a19      	ldr	r2, [pc, #100]	; (800b4b8 <HAL_SPI_MspInit+0x84>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d12b      	bne.n	800b4ae <HAL_SPI_MspInit+0x7a>
 800b456:	2300      	movs	r3, #0
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <HAL_SPI_MspInit+0x88>)
 800b45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45e:	4a17      	ldr	r2, [pc, #92]	; (800b4bc <HAL_SPI_MspInit+0x88>)
 800b460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b464:	6453      	str	r3, [r2, #68]	; 0x44
 800b466:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <HAL_SPI_MspInit+0x88>)
 800b468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b46e:	613b      	str	r3, [r7, #16]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <HAL_SPI_MspInit+0x88>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	4a10      	ldr	r2, [pc, #64]	; (800b4bc <HAL_SPI_MspInit+0x88>)
 800b47c:	f043 0302 	orr.w	r3, r3, #2
 800b480:	6313      	str	r3, [r2, #48]	; 0x30
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <HAL_SPI_MspInit+0x88>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2338      	movs	r3, #56	; 0x38
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	2302      	movs	r3, #2
 800b494:	61bb      	str	r3, [r7, #24]
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	2303      	movs	r3, #3
 800b49c:	623b      	str	r3, [r7, #32]
 800b49e:	2305      	movs	r3, #5
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a2:	f107 0314 	add.w	r3, r7, #20
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4805      	ldr	r0, [pc, #20]	; (800b4c0 <HAL_SPI_MspInit+0x8c>)
 800b4aa:	f7f6 f825 	bl	80014f8 <HAL_GPIO_Init>
 800b4ae:	bf00      	nop
 800b4b0:	3728      	adds	r7, #40	; 0x28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	40013000 	.word	0x40013000
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	40020400 	.word	0x40020400

0800b4c4 <NMI_Handler>:
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	bf00      	nop
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <HardFault_Handler>:
 800b4d2:	b480      	push	{r7}
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	e7fe      	b.n	800b4d6 <HardFault_Handler+0x4>

0800b4d8 <MemManage_Handler>:
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	e7fe      	b.n	800b4dc <MemManage_Handler+0x4>

0800b4de <BusFault_Handler>:
 800b4de:	b480      	push	{r7}
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	e7fe      	b.n	800b4e2 <BusFault_Handler+0x4>

0800b4e4 <UsageFault_Handler>:
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	e7fe      	b.n	800b4e8 <UsageFault_Handler+0x4>

0800b4ea <SVC_Handler>:
 800b4ea:	b480      	push	{r7}
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	bf00      	nop
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <DebugMon_Handler>:
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	bf00      	nop
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <PendSV_Handler>:
 800b506:	b480      	push	{r7}
 800b508:	af00      	add	r7, sp, #0
 800b50a:	bf00      	nop
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <SysTick_Handler>:
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
 800b518:	f7f5 f846 	bl	80005a8 <HAL_IncTick>
 800b51c:	bf00      	nop
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <CAN1_RX0_IRQHandler>:
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
 800b524:	4802      	ldr	r0, [pc, #8]	; (800b530 <CAN1_RX0_IRQHandler+0x10>)
 800b526:	f7f5 fcb5 	bl	8000e94 <HAL_CAN_IRQHandler>
 800b52a:	bf00      	nop
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	2000010c 	.word	0x2000010c

0800b534 <CAN2_RX1_IRQHandler>:
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
 800b538:	4802      	ldr	r0, [pc, #8]	; (800b544 <CAN2_RX1_IRQHandler+0x10>)
 800b53a:	f7f5 fcab 	bl	8000e94 <HAL_CAN_IRQHandler>
 800b53e:	bf00      	nop
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000134 	.word	0x20000134

0800b548 <_getpid>:
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	2301      	movs	r3, #1
 800b54e:	4618      	mov	r0, r3
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <_kill>:
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
 800b562:	f000 f8bf 	bl	800b6e4 <__errno>
 800b566:	4602      	mov	r2, r0
 800b568:	2316      	movs	r3, #22
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <_exit>:
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	f04f 31ff 	mov.w	r1, #4294967295
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff ffe7 	bl	800b558 <_kill>
 800b58a:	e7fe      	b.n	800b58a <_exit+0x12>

0800b58c <_sbrk>:
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <_sbrk+0x50>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <_sbrk+0x16>
 800b59c:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <_sbrk+0x50>)
 800b59e:	4a10      	ldr	r2, [pc, #64]	; (800b5e0 <_sbrk+0x54>)
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <_sbrk+0x50>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	4b0c      	ldr	r3, [pc, #48]	; (800b5dc <_sbrk+0x50>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	466a      	mov	r2, sp
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d907      	bls.n	800b5c6 <_sbrk+0x3a>
 800b5b6:	f000 f895 	bl	800b6e4 <__errno>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	230c      	movs	r3, #12
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c4:	e006      	b.n	800b5d4 <_sbrk+0x48>
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <_sbrk+0x50>)
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	4a03      	ldr	r2, [pc, #12]	; (800b5dc <_sbrk+0x50>)
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	20000478 	.word	0x20000478
 800b5e0:	200008f8 	.word	0x200008f8

0800b5e4 <SystemInit>:
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	4b16      	ldr	r3, [pc, #88]	; (800b644 <SystemInit+0x60>)
 800b5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ee:	4a15      	ldr	r2, [pc, #84]	; (800b644 <SystemInit+0x60>)
 800b5f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800b5f8:	4b13      	ldr	r3, [pc, #76]	; (800b648 <SystemInit+0x64>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a12      	ldr	r2, [pc, #72]	; (800b648 <SystemInit+0x64>)
 800b5fe:	f043 0301 	orr.w	r3, r3, #1
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	4b10      	ldr	r3, [pc, #64]	; (800b648 <SystemInit+0x64>)
 800b606:	2200      	movs	r2, #0
 800b608:	609a      	str	r2, [r3, #8]
 800b60a:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <SystemInit+0x64>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a0e      	ldr	r2, [pc, #56]	; (800b648 <SystemInit+0x64>)
 800b610:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <SystemInit+0x64>)
 800b61c:	4a0b      	ldr	r2, [pc, #44]	; (800b64c <SystemInit+0x68>)
 800b61e:	605a      	str	r2, [r3, #4]
 800b620:	4b09      	ldr	r3, [pc, #36]	; (800b648 <SystemInit+0x64>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a08      	ldr	r2, [pc, #32]	; (800b648 <SystemInit+0x64>)
 800b626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	4b06      	ldr	r3, [pc, #24]	; (800b648 <SystemInit+0x64>)
 800b62e:	2200      	movs	r2, #0
 800b630:	60da      	str	r2, [r3, #12]
 800b632:	4b04      	ldr	r3, [pc, #16]	; (800b644 <SystemInit+0x60>)
 800b634:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b638:	609a      	str	r2, [r3, #8]
 800b63a:	bf00      	nop
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	e000ed00 	.word	0xe000ed00
 800b648:	40023800 	.word	0x40023800
 800b64c:	24003010 	.word	0x24003010

0800b650 <Reset_Handler>:
 800b650:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b688 <LoopFillZerobss+0x14>
 800b654:	2100      	movs	r1, #0
 800b656:	e003      	b.n	800b660 <LoopCopyDataInit>

0800b658 <CopyDataInit>:
 800b658:	4b0c      	ldr	r3, [pc, #48]	; (800b68c <LoopFillZerobss+0x18>)
 800b65a:	585b      	ldr	r3, [r3, r1]
 800b65c:	5043      	str	r3, [r0, r1]
 800b65e:	3104      	adds	r1, #4

0800b660 <LoopCopyDataInit>:
 800b660:	480b      	ldr	r0, [pc, #44]	; (800b690 <LoopFillZerobss+0x1c>)
 800b662:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <LoopFillZerobss+0x20>)
 800b664:	1842      	adds	r2, r0, r1
 800b666:	429a      	cmp	r2, r3
 800b668:	d3f6      	bcc.n	800b658 <CopyDataInit>
 800b66a:	4a0b      	ldr	r2, [pc, #44]	; (800b698 <LoopFillZerobss+0x24>)
 800b66c:	e002      	b.n	800b674 <LoopFillZerobss>

0800b66e <FillZerobss>:
 800b66e:	2300      	movs	r3, #0
 800b670:	f842 3b04 	str.w	r3, [r2], #4

0800b674 <LoopFillZerobss>:
 800b674:	4b09      	ldr	r3, [pc, #36]	; (800b69c <LoopFillZerobss+0x28>)
 800b676:	429a      	cmp	r2, r3
 800b678:	d3f9      	bcc.n	800b66e <FillZerobss>
 800b67a:	f7ff ffb3 	bl	800b5e4 <SystemInit>
 800b67e:	f000 f837 	bl	800b6f0 <__libc_init_array>
 800b682:	f7fe fa5b 	bl	8009b3c <main>
 800b686:	4770      	bx	lr
 800b688:	20020000 	.word	0x20020000
 800b68c:	0800bc6c 	.word	0x0800bc6c
 800b690:	20000000 	.word	0x20000000
 800b694:	200000bc 	.word	0x200000bc
 800b698:	200000bc 	.word	0x200000bc
 800b69c:	200008f8 	.word	0x200008f8

0800b6a0 <ADC_IRQHandler>:
 800b6a0:	e7fe      	b.n	800b6a0 <ADC_IRQHandler>

0800b6a2 <_Znwj>:
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	bf14      	ite	ne
 800b6a8:	4604      	movne	r4, r0
 800b6aa:	2401      	moveq	r4, #1
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 f843 	bl	800b738 <malloc>
 800b6b2:	b930      	cbnz	r0, 800b6c2 <_Znwj+0x20>
 800b6b4:	f000 f806 	bl	800b6c4 <_ZSt15get_new_handlerv>
 800b6b8:	b908      	cbnz	r0, 800b6be <_Znwj+0x1c>
 800b6ba:	f000 f80b 	bl	800b6d4 <abort>
 800b6be:	4780      	blx	r0
 800b6c0:	e7f4      	b.n	800b6ac <_Znwj+0xa>
 800b6c2:	bd10      	pop	{r4, pc}

0800b6c4 <_ZSt15get_new_handlerv>:
 800b6c4:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <_ZSt15get_new_handlerv+0xc>)
 800b6c6:	6818      	ldr	r0, [r3, #0]
 800b6c8:	f3bf 8f5b 	dmb	ish
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	2000047c 	.word	0x2000047c

0800b6d4 <abort>:
 800b6d4:	b508      	push	{r3, lr}
 800b6d6:	2006      	movs	r0, #6
 800b6d8:	f000 f8d0 	bl	800b87c <raise>
 800b6dc:	2001      	movs	r0, #1
 800b6de:	f7ff ff4b 	bl	800b578 <_exit>
	...

0800b6e4 <__errno>:
 800b6e4:	4b01      	ldr	r3, [pc, #4]	; (800b6ec <__errno+0x8>)
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	20000058 	.word	0x20000058

0800b6f0 <__libc_init_array>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	4e0d      	ldr	r6, [pc, #52]	; (800b728 <__libc_init_array+0x38>)
 800b6f4:	4c0d      	ldr	r4, [pc, #52]	; (800b72c <__libc_init_array+0x3c>)
 800b6f6:	1ba4      	subs	r4, r4, r6
 800b6f8:	10a4      	asrs	r4, r4, #2
 800b6fa:	2500      	movs	r5, #0
 800b6fc:	42a5      	cmp	r5, r4
 800b6fe:	d109      	bne.n	800b714 <__libc_init_array+0x24>
 800b700:	4e0b      	ldr	r6, [pc, #44]	; (800b730 <__libc_init_array+0x40>)
 800b702:	4c0c      	ldr	r4, [pc, #48]	; (800b734 <__libc_init_array+0x44>)
 800b704:	f000 f8d8 	bl	800b8b8 <_init>
 800b708:	1ba4      	subs	r4, r4, r6
 800b70a:	10a4      	asrs	r4, r4, #2
 800b70c:	2500      	movs	r5, #0
 800b70e:	42a5      	cmp	r5, r4
 800b710:	d105      	bne.n	800b71e <__libc_init_array+0x2e>
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b718:	4798      	blx	r3
 800b71a:	3501      	adds	r5, #1
 800b71c:	e7ee      	b.n	800b6fc <__libc_init_array+0xc>
 800b71e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b722:	4798      	blx	r3
 800b724:	3501      	adds	r5, #1
 800b726:	e7f2      	b.n	800b70e <__libc_init_array+0x1e>
 800b728:	0800bc64 	.word	0x0800bc64
 800b72c:	0800bc64 	.word	0x0800bc64
 800b730:	0800bc64 	.word	0x0800bc64
 800b734:	0800bc68 	.word	0x0800bc68

0800b738 <malloc>:
 800b738:	4b02      	ldr	r3, [pc, #8]	; (800b744 <malloc+0xc>)
 800b73a:	4601      	mov	r1, r0
 800b73c:	6818      	ldr	r0, [r3, #0]
 800b73e:	f000 b80b 	b.w	800b758 <_malloc_r>
 800b742:	bf00      	nop
 800b744:	20000058 	.word	0x20000058

0800b748 <memset>:
 800b748:	4402      	add	r2, r0
 800b74a:	4603      	mov	r3, r0
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d100      	bne.n	800b752 <memset+0xa>
 800b750:	4770      	bx	lr
 800b752:	f803 1b01 	strb.w	r1, [r3], #1
 800b756:	e7f9      	b.n	800b74c <memset+0x4>

0800b758 <_malloc_r>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	1ccd      	adds	r5, r1, #3
 800b75c:	f025 0503 	bic.w	r5, r5, #3
 800b760:	3508      	adds	r5, #8
 800b762:	2d0c      	cmp	r5, #12
 800b764:	bf38      	it	cc
 800b766:	250c      	movcc	r5, #12
 800b768:	2d00      	cmp	r5, #0
 800b76a:	4606      	mov	r6, r0
 800b76c:	db01      	blt.n	800b772 <_malloc_r+0x1a>
 800b76e:	42a9      	cmp	r1, r5
 800b770:	d903      	bls.n	800b77a <_malloc_r+0x22>
 800b772:	230c      	movs	r3, #12
 800b774:	6033      	str	r3, [r6, #0]
 800b776:	2000      	movs	r0, #0
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	f000 f89b 	bl	800b8b4 <__malloc_lock>
 800b77e:	4a21      	ldr	r2, [pc, #132]	; (800b804 <_malloc_r+0xac>)
 800b780:	6814      	ldr	r4, [r2, #0]
 800b782:	4621      	mov	r1, r4
 800b784:	b991      	cbnz	r1, 800b7ac <_malloc_r+0x54>
 800b786:	4c20      	ldr	r4, [pc, #128]	; (800b808 <_malloc_r+0xb0>)
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	b91b      	cbnz	r3, 800b794 <_malloc_r+0x3c>
 800b78c:	4630      	mov	r0, r6
 800b78e:	f000 f83d 	bl	800b80c <_sbrk_r>
 800b792:	6020      	str	r0, [r4, #0]
 800b794:	4629      	mov	r1, r5
 800b796:	4630      	mov	r0, r6
 800b798:	f000 f838 	bl	800b80c <_sbrk_r>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d124      	bne.n	800b7ea <_malloc_r+0x92>
 800b7a0:	230c      	movs	r3, #12
 800b7a2:	6033      	str	r3, [r6, #0]
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f000 f886 	bl	800b8b6 <__malloc_unlock>
 800b7aa:	e7e4      	b.n	800b776 <_malloc_r+0x1e>
 800b7ac:	680b      	ldr	r3, [r1, #0]
 800b7ae:	1b5b      	subs	r3, r3, r5
 800b7b0:	d418      	bmi.n	800b7e4 <_malloc_r+0x8c>
 800b7b2:	2b0b      	cmp	r3, #11
 800b7b4:	d90f      	bls.n	800b7d6 <_malloc_r+0x7e>
 800b7b6:	600b      	str	r3, [r1, #0]
 800b7b8:	50cd      	str	r5, [r1, r3]
 800b7ba:	18cc      	adds	r4, r1, r3
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f000 f87a 	bl	800b8b6 <__malloc_unlock>
 800b7c2:	f104 000b 	add.w	r0, r4, #11
 800b7c6:	1d23      	adds	r3, r4, #4
 800b7c8:	f020 0007 	bic.w	r0, r0, #7
 800b7cc:	1ac3      	subs	r3, r0, r3
 800b7ce:	d0d3      	beq.n	800b778 <_malloc_r+0x20>
 800b7d0:	425a      	negs	r2, r3
 800b7d2:	50e2      	str	r2, [r4, r3]
 800b7d4:	e7d0      	b.n	800b778 <_malloc_r+0x20>
 800b7d6:	428c      	cmp	r4, r1
 800b7d8:	684b      	ldr	r3, [r1, #4]
 800b7da:	bf16      	itet	ne
 800b7dc:	6063      	strne	r3, [r4, #4]
 800b7de:	6013      	streq	r3, [r2, #0]
 800b7e0:	460c      	movne	r4, r1
 800b7e2:	e7eb      	b.n	800b7bc <_malloc_r+0x64>
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	6849      	ldr	r1, [r1, #4]
 800b7e8:	e7cc      	b.n	800b784 <_malloc_r+0x2c>
 800b7ea:	1cc4      	adds	r4, r0, #3
 800b7ec:	f024 0403 	bic.w	r4, r4, #3
 800b7f0:	42a0      	cmp	r0, r4
 800b7f2:	d005      	beq.n	800b800 <_malloc_r+0xa8>
 800b7f4:	1a21      	subs	r1, r4, r0
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f000 f808 	bl	800b80c <_sbrk_r>
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d0cf      	beq.n	800b7a0 <_malloc_r+0x48>
 800b800:	6025      	str	r5, [r4, #0]
 800b802:	e7db      	b.n	800b7bc <_malloc_r+0x64>
 800b804:	20000480 	.word	0x20000480
 800b808:	20000484 	.word	0x20000484

0800b80c <_sbrk_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4c06      	ldr	r4, [pc, #24]	; (800b828 <_sbrk_r+0x1c>)
 800b810:	2300      	movs	r3, #0
 800b812:	4605      	mov	r5, r0
 800b814:	4608      	mov	r0, r1
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	f7ff feb8 	bl	800b58c <_sbrk>
 800b81c:	1c43      	adds	r3, r0, #1
 800b81e:	d102      	bne.n	800b826 <_sbrk_r+0x1a>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	b103      	cbz	r3, 800b826 <_sbrk_r+0x1a>
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	bd38      	pop	{r3, r4, r5, pc}
 800b828:	200008f4 	.word	0x200008f4

0800b82c <_raise_r>:
 800b82c:	291f      	cmp	r1, #31
 800b82e:	b538      	push	{r3, r4, r5, lr}
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
 800b834:	d904      	bls.n	800b840 <_raise_r+0x14>
 800b836:	2316      	movs	r3, #22
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b842:	b112      	cbz	r2, 800b84a <_raise_r+0x1e>
 800b844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b848:	b94b      	cbnz	r3, 800b85e <_raise_r+0x32>
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f830 	bl	800b8b0 <_getpid_r>
 800b850:	462a      	mov	r2, r5
 800b852:	4601      	mov	r1, r0
 800b854:	4620      	mov	r0, r4
 800b856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b85a:	f000 b817 	b.w	800b88c <_kill_r>
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d00a      	beq.n	800b878 <_raise_r+0x4c>
 800b862:	1c59      	adds	r1, r3, #1
 800b864:	d103      	bne.n	800b86e <_raise_r+0x42>
 800b866:	2316      	movs	r3, #22
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	2001      	movs	r0, #1
 800b86c:	e7e7      	b.n	800b83e <_raise_r+0x12>
 800b86e:	2400      	movs	r4, #0
 800b870:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b874:	4628      	mov	r0, r5
 800b876:	4798      	blx	r3
 800b878:	2000      	movs	r0, #0
 800b87a:	e7e0      	b.n	800b83e <_raise_r+0x12>

0800b87c <raise>:
 800b87c:	4b02      	ldr	r3, [pc, #8]	; (800b888 <raise+0xc>)
 800b87e:	4601      	mov	r1, r0
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	f7ff bfd3 	b.w	800b82c <_raise_r>
 800b886:	bf00      	nop
 800b888:	20000058 	.word	0x20000058

0800b88c <_kill_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4c07      	ldr	r4, [pc, #28]	; (800b8ac <_kill_r+0x20>)
 800b890:	2300      	movs	r3, #0
 800b892:	4605      	mov	r5, r0
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	f7ff fe5d 	bl	800b558 <_kill>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d102      	bne.n	800b8a8 <_kill_r+0x1c>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	b103      	cbz	r3, 800b8a8 <_kill_r+0x1c>
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	bd38      	pop	{r3, r4, r5, pc}
 800b8aa:	bf00      	nop
 800b8ac:	200008f4 	.word	0x200008f4

0800b8b0 <_getpid_r>:
 800b8b0:	f7ff be4a 	b.w	800b548 <_getpid>

0800b8b4 <__malloc_lock>:
 800b8b4:	4770      	bx	lr

0800b8b6 <__malloc_unlock>:
 800b8b6:	4770      	bx	lr

0800b8b8 <_init>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr

0800b8c4 <_fini>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr

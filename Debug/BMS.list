
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b340  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800b504  0800b504  0001b504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b84c  0800b84c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b84c  0800b84c  0001b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b854  0800b854  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b854  0800b854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b858  0800b858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b85c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  2000008c  0800b8e8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800b8e8  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043ff8  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004884  00000000  00000000  000640b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  00068938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026f0  00000000  00000000  00069e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a35d  00000000  00000000  0006c530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001463f  00000000  00000000  0009688d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc5a3  00000000  00000000  000aaecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a746f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  001a74ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000058cf  00000000  00000000  001ad020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800b4ec 	.word	0x0800b4ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	0800b4ec 	.word	0x0800b4ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 ff47 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00a fbd0 	bl	800acdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ff5f 	bl	800142a <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 ff27 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000024 	.word	0x20000024
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return uwTick;
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <HAL_GetTick+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000280 	.word	0x20000280

080005c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff ffee 	bl	80005a8 <HAL_GetTick>
 80005cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d8:	d005      	beq.n	80005e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_Delay+0x40>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e6:	bf00      	nop
 80005e8:	f7ff ffde 	bl	80005a8 <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d8f7      	bhi.n	80005e8 <HAL_Delay+0x28>
  {
  }
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e0ed      	b.n	80007f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f00a fb82 	bl	800ad2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f022 0202 	bic.w	r2, r2, #2
 8000636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000638:	f7ff ffb6 	bl	80005a8 <HAL_GetTick>
 800063c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800063e:	e012      	b.n	8000666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000640:	f7ff ffb2 	bl	80005a8 <HAL_GetTick>
 8000644:	4602      	mov	r2, r0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d90b      	bls.n	8000666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2205      	movs	r2, #5
 800065e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e0c5      	b.n	80007f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1e5      	bne.n	8000640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0201 	orr.w	r2, r2, #1
 8000682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000684:	f7ff ff90 	bl	80005a8 <HAL_GetTick>
 8000688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800068a:	e012      	b.n	80006b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800068c:	f7ff ff8c 	bl	80005a8 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	2b0a      	cmp	r3, #10
 8000698:	d90b      	bls.n	80006b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2205      	movs	r2, #5
 80006aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e09f      	b.n	80007f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0e5      	beq.n	800068c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7e1b      	ldrb	r3, [r3, #24]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e007      	b.n	80006ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7e5b      	ldrb	r3, [r3, #25]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d108      	bne.n	8000704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e007      	b.n	8000714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7e9b      	ldrb	r3, [r3, #26]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d108      	bne.n	800072e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f042 0220 	orr.w	r2, r2, #32
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e007      	b.n	800073e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0220 	bic.w	r2, r2, #32
 800073c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7edb      	ldrb	r3, [r3, #27]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d108      	bne.n	8000758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f022 0210 	bic.w	r2, r2, #16
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e007      	b.n	8000768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f042 0210 	orr.w	r2, r2, #16
 8000766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7f1b      	ldrb	r3, [r3, #28]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d108      	bne.n	8000782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0208 	orr.w	r2, r2, #8
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e007      	b.n	8000792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f022 0208 	bic.w	r2, r2, #8
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7f5b      	ldrb	r3, [r3, #29]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d108      	bne.n	80007ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f042 0204 	orr.w	r2, r2, #4
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	e007      	b.n	80007bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 0204 	bic.w	r2, r2, #4
 80007ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	431a      	orrs	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	431a      	orrs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	ea42 0103 	orr.w	r1, r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000812:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000814:	7cfb      	ldrb	r3, [r7, #19]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d003      	beq.n	8000822 <HAL_CAN_ConfigFilter+0x26>
 800081a:	7cfb      	ldrb	r3, [r7, #19]
 800081c:	2b02      	cmp	r3, #2
 800081e:	f040 80be 	bne.w	800099e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000822:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000824:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800082c:	f043 0201 	orr.w	r2, r3, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800083c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	431a      	orrs	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	2201      	movs	r2, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	43db      	mvns	r3, r3
 8000874:	401a      	ands	r2, r3
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d123      	bne.n	80008cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	43db      	mvns	r3, r3
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3248      	adds	r2, #72	; 0x48
 80008ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008c2:	6979      	ldr	r1, [r7, #20]
 80008c4:	3348      	adds	r3, #72	; 0x48
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	440b      	add	r3, r1
 80008ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d122      	bne.n	800091a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	431a      	orrs	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3248      	adds	r2, #72	; 0x48
 80008fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800090e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000910:	6979      	ldr	r1, [r7, #20]
 8000912:	3348      	adds	r3, #72	; 0x48
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d109      	bne.n	8000936 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000934:	e007      	b.n	8000946 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	431a      	orrs	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d109      	bne.n	8000962 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	43db      	mvns	r3, r3
 8000958:	401a      	ands	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000960:	e007      	b.n	8000972 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d107      	bne.n	800098a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	431a      	orrs	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000990:	f023 0201 	bic.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e006      	b.n	80009ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
  }
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40006400 	.word	0x40006400

080009bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009da:	7ffb      	ldrb	r3, [r7, #31]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d003      	beq.n	80009e8 <HAL_CAN_AddTxMessage+0x2c>
 80009e0:	7ffb      	ldrb	r3, [r7, #31]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	f040 80b8 	bne.w	8000b58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10a      	bne.n	8000a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 80a0 	beq.w	8000b48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	0e1b      	lsrs	r3, r3, #24
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d907      	bls.n	8000a28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e09e      	b.n	8000b66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a28:	2201      	movs	r2, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10d      	bne.n	8000a56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a44:	68f9      	ldr	r1, [r7, #12]
 8000a46:	6809      	ldr	r1, [r1, #0]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3318      	adds	r3, #24
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	440b      	add	r3, r1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e00f      	b.n	8000a76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a66:	68f9      	ldr	r1, [r7, #12]
 8000a68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3318      	adds	r3, #24
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	440b      	add	r3, r1
 8000a74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	691a      	ldr	r2, [r3, #16]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3318      	adds	r3, #24
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	440b      	add	r3, r1
 8000a86:	3304      	adds	r3, #4
 8000a88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	7d1b      	ldrb	r3, [r3, #20]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d111      	bne.n	8000ab6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3318      	adds	r3, #24
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	6811      	ldr	r1, [r2, #0]
 8000aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3318      	adds	r3, #24
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3307      	adds	r3, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	061a      	lsls	r2, r3, #24
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3306      	adds	r3, #6
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3305      	adds	r3, #5
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	3204      	adds	r2, #4
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	4610      	mov	r0, r2
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	ea43 0200 	orr.w	r2, r3, r0
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000aec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3303      	adds	r3, #3
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	061a      	lsls	r2, r3, #24
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3302      	adds	r3, #2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3301      	adds	r3, #1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	4610      	mov	r0, r2
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6811      	ldr	r1, [r2, #0]
 8000b14:	ea43 0200 	orr.w	r2, r3, r0
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	440b      	add	r3, r1
 8000b1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3318      	adds	r3, #24
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	4413      	add	r3, r2
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	6811      	ldr	r1, [r2, #0]
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	440b      	add	r3, r1
 8000b42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e00e      	b.n	8000b66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e006      	b.n	8000b66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
  }
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b72:	b480      	push	{r7}
 8000b74:	b087      	sub	sp, #28
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d003      	beq.n	8000b96 <HAL_CAN_GetRxMessage+0x24>
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	f040 80f3 	bne.w	8000d7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10e      	bne.n	8000bba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d116      	bne.n	8000bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0e7      	b.n	8000d8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d107      	bne.n	8000bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e0d8      	b.n	8000d8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	331b      	adds	r3, #27
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0204 	and.w	r2, r3, #4
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	331b      	adds	r3, #27
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4413      	add	r3, r2
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0d5b      	lsrs	r3, r3, #21
 8000c06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	331b      	adds	r3, #27
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	331b      	adds	r3, #27
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4413      	add	r3, r2
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0202 	and.w	r2, r3, #2
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	331b      	adds	r3, #27
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 020f 	and.w	r2, r3, #15
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	331b      	adds	r3, #27
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	3304      	adds	r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	331b      	adds	r3, #27
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	4413      	add	r3, r2
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	0a1a      	lsrs	r2, r3, #8
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	0c1a      	lsrs	r2, r3, #16
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0e1a      	lsrs	r2, r3, #24
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	0a1a      	lsrs	r2, r3, #8
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3305      	adds	r3, #5
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	4413      	add	r3, r2
 8000d26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0c1a      	lsrs	r2, r3, #16
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3306      	adds	r3, #6
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4413      	add	r3, r2
 8000d40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	0e1a      	lsrs	r2, r3, #24
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d108      	bne.n	8000d68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0220 	orr.w	r2, r2, #32
 8000d76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e006      	b.n	8000d8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
  }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d002      	beq.n	8000db4 <HAL_CAN_ActivateNotification+0x1e>
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d109      	bne.n	8000dc8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6959      	ldr	r1, [r3, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e006      	b.n	8000dd6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
  }
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b08a      	sub	sp, #40	; 0x28
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d07c      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d023      	beq.n	8000e7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2201      	movs	r2, #1
 8000e38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f97d 	bl	8001144 <HAL_CAN_TxMailbox0CompleteCallback>
 8000e4a:	e016      	b.n	8000e7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e00c      	b.n	8000e7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	e002      	b.n	8000e7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f983 	bl	8001180 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d024      	beq.n	8000ece <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f95d 	bl	8001158 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e9e:	e016      	b.n	8000ece <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d004      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	e00c      	b.n	8000ece <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec6:	e002      	b.n	8000ece <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f963 	bl	8001194 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d024      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f93d 	bl	800116c <HAL_CAN_TxMailbox2CompleteCallback>
 8000ef2:	e016      	b.n	8000f22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
 8000f06:	e00c      	b.n	8000f22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	e002      	b.n	8000f22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f943 	bl	80011a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00c      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2210      	movs	r2, #16
 8000f44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2208      	movs	r2, #8
 8000f60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f92a 	bl	80011bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f009 fcb3 	bl	800a8ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00c      	beq.n	8000faa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f902 	bl	80011d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d009      	beq.n	8000fea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f009 fce1 	bl	800a9ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00b      	beq.n	800100c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2210      	movs	r2, #16
 8001004:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8ec 	bl	80011e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2208      	movs	r2, #8
 8001026:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f8e5 	bl	80011f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d075      	beq.n	8001124 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	d06c      	beq.n	800111c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d008      	beq.n	800105e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109c:	2b00      	cmp	r3, #0
 800109e:	d03d      	beq.n	800111c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d038      	beq.n	800111c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010b0:	2b30      	cmp	r3, #48	; 0x30
 80010b2:	d017      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x302>
 80010b4:	2b30      	cmp	r3, #48	; 0x30
 80010b6:	d804      	bhi.n	80010c2 <HAL_CAN_IRQHandler+0x2e0>
 80010b8:	2b10      	cmp	r3, #16
 80010ba:	d009      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x2ee>
 80010bc:	2b20      	cmp	r3, #32
 80010be:	d00c      	beq.n	80010da <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010c0:	e024      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80010c2:	2b50      	cmp	r3, #80	; 0x50
 80010c4:	d018      	beq.n	80010f8 <HAL_CAN_IRQHandler+0x316>
 80010c6:	2b60      	cmp	r3, #96	; 0x60
 80010c8:	d01b      	beq.n	8001102 <HAL_CAN_IRQHandler+0x320>
 80010ca:	2b40      	cmp	r3, #64	; 0x40
 80010cc:	d00f      	beq.n	80010ee <HAL_CAN_IRQHandler+0x30c>
            break;
 80010ce:	e01d      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010d8:	e018      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010e2:	e013      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010ec:	e00e      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010f6:	e009      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001100:	e004      	b.n	800110c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800110a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	699a      	ldr	r2, [r3, #24]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800111a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2204      	movs	r2, #4
 8001122:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f868 	bl	800120c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e165      	b.n	800172c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8154 	bne.w	8001726 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d00b      	beq.n	800149e <HAL_GPIO_Init+0x5a>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001492:	2b11      	cmp	r3, #17
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b12      	cmp	r3, #18
 800149c:	d130      	bne.n	8001500 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0xfc>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80ae 	beq.w	8001726 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_GPIO_Init+0x300>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_GPIO_Init+0x304>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d025      	beq.n	800165e <HAL_GPIO_Init+0x21a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4d      	ldr	r2, [pc, #308]	; (800174c <HAL_GPIO_Init+0x308>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01f      	beq.n	800165a <HAL_GPIO_Init+0x216>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <HAL_GPIO_Init+0x30c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x212>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x310>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4a      	ldr	r2, [pc, #296]	; (8001758 <HAL_GPIO_Init+0x314>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x20a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a49      	ldr	r2, [pc, #292]	; (800175c <HAL_GPIO_Init+0x318>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x206>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x31c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x202>
 8001642:	2306      	movs	r3, #6
 8001644:	e00c      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001646:	2307      	movs	r3, #7
 8001648:	e00a      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800164a:	2305      	movs	r3, #5
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800164e:	2304      	movs	r3, #4
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800165e:	2300      	movs	r3, #0
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4934      	ldr	r1, [pc, #208]	; (8001744 <HAL_GPIO_Init+0x300>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_GPIO_Init+0x320>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a2:	4a30      	ldr	r2, [pc, #192]	; (8001764 <HAL_GPIO_Init+0x320>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_GPIO_Init+0x320>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_GPIO_Init+0x320>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_GPIO_Init+0x320>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x320>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_GPIO_Init+0x320>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_GPIO_Init+0x320>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	f67f ae96 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001734:	bf00      	nop
 8001736:	3724      	adds	r7, #36	; 0x24
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40023800 	.word	0x40023800
 8001744:	40013800 	.word	0x40013800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020800 	.word	0x40020800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40021000 	.word	0x40021000
 800175c:	40021400 	.word	0x40021400
 8001760:	40021800 	.word	0x40021800
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e001      	b.n	800178a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	401a      	ands	r2, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0cc      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d90c      	bls.n	800183c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800185e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d044      	beq.n	8001920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e067      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 0203 	bic.w	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f0:	f7fe fe5a 	bl	80005a8 <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	e00a      	b.n	800190e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7fe fe56 	bl	80005a8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e04f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 020c 	and.w	r2, r3, #12
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	429a      	cmp	r2, r3
 800191e:	d1eb      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d20c      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001986:	f000 fb4b 	bl	8002020 <HAL_RCC_GetSysClockFreq>
 800198a:	4601      	mov	r1, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	fa21 f303 	lsr.w	r3, r1, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdce 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	0800b83c 	.word	0x0800b83c
 80019c4:	20000024 	.word	0x20000024
 80019c8:	20000000 	.word	0x20000000

080019cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a04:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a0a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a12:	496c      	ldr	r1, [pc, #432]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001a22:	2301      	movs	r3, #1
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d010      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a32:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a38:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	4960      	ldr	r1, [pc, #384]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4955      	ldr	r1, [pc, #340]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d017      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a9c:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aaa:	4946      	ldr	r1, [pc, #280]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 808a 	beq.w	8001bee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a38      	ldr	r2, [pc, #224]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b02:	f7fe fd51 	bl	80005a8 <HAL_GetTick>
 8001b06:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7fe fd4d 	bl	80005a8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e278      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b30:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02f      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d028      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d114      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe fd1b 	bl	80005a8 <HAL_GetTick>
 8001b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7fe fd17 	bl	80005a8 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e240      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ba4:	d114      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bba:	4902      	ldr	r1, [pc, #8]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]
 8001bc0:	e00c      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42470e40 	.word	0x42470e40
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bda:	6093      	str	r3, [r2, #8]
 8001bdc:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be8:	4944      	ldr	r1, [pc, #272]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001c02:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c10:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4937      	ldr	r1, [pc, #220]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c38:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	492e      	ldr	r1, [pc, #184]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d011      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	4926      	ldr	r1, [pc, #152]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c72:	d101      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	491a      	ldr	r1, [pc, #104]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d011      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb4:	4911      	ldr	r1, [pc, #68]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc4:	d101      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d005      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd8:	f040 80ff 	bne.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce2:	f7fe fc61 	bl	80005a8 <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ce8:	e00e      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cea:	f7fe fc5d 	bl	80005a8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d907      	bls.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e188      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	424711e0 	.word	0x424711e0
 8001d04:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d08:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ea      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d028      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d124      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d3c:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d4e:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d54:	0e1b      	lsrs	r3, r3, #24
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	431a      	orrs	r2, r3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	431a      	orrs	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	071b      	lsls	r3, r3, #28
 8001d7e:	4961      	ldr	r1, [pc, #388]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d9a:	d00a      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d035      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db0:	d130      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001db2:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dca:	0f1b      	lsrs	r3, r3, #28
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	071b      	lsls	r3, r3, #28
 8001df4:	4943      	ldr	r1, [pc, #268]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e02:	f023 021f 	bic.w	r2, r3, #31
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	493d      	ldr	r1, [pc, #244]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d029      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e28:	d124      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e42:	0f1b      	lsrs	r3, r3, #28
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	431a      	orrs	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	431a      	orrs	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	071b      	lsls	r3, r3, #28
 8001e6c:	4925      	ldr	r1, [pc, #148]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d016      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	071b      	lsls	r3, r3, #28
 8001ea6:	4917      	ldr	r1, [pc, #92]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fb78 	bl	80005a8 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ebc:	f7fe fb74 	bl	80005a8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e09f      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 8095 	bne.w	800200c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fb5e 	bl	80005a8 <HAL_GetTick>
 8001eec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eee:	e00f      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ef0:	f7fe fb5a 	bl	80005a8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d908      	bls.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e085      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	42470068 	.word	0x42470068
 8001f0c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1c:	d0e8      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02b      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d127      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f46:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	431a      	orrs	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	041b      	lsls	r3, r3, #16
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	4928      	ldr	r1, [pc, #160]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4922      	ldr	r1, [pc, #136]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01d      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001faa:	d118      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	0e1b      	lsrs	r3, r3, #24
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	4910      	ldr	r1, [pc, #64]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fae0 	bl	80005a8 <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fec:	f7fe fadc 	bl	80005a8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e007      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200a:	d1ef      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	42470070 	.word	0x42470070

08002020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203a:	4b9f      	ldr	r3, [pc, #636]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b0c      	cmp	r3, #12
 8002044:	f200 8130 	bhi.w	80022a8 <HAL_RCC_GetSysClockFreq+0x288>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_RCC_GetSysClockFreq+0x30>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	08002085 	.word	0x08002085
 8002054:	080022a9 	.word	0x080022a9
 8002058:	080022a9 	.word	0x080022a9
 800205c:	080022a9 	.word	0x080022a9
 8002060:	0800208b 	.word	0x0800208b
 8002064:	080022a9 	.word	0x080022a9
 8002068:	080022a9 	.word	0x080022a9
 800206c:	080022a9 	.word	0x080022a9
 8002070:	08002091 	.word	0x08002091
 8002074:	080022a9 	.word	0x080022a9
 8002078:	080022a9 	.word	0x080022a9
 800207c:	080022a9 	.word	0x080022a9
 8002080:	0800219f 	.word	0x0800219f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <HAL_RCC_GetSysClockFreq+0x29c>)
 8002086:	613b      	str	r3, [r7, #16]
       break;
 8002088:	e111      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208a:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800208c:	613b      	str	r3, [r7, #16]
      break;
 800208e:	e10e      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002090:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209a:	4b87      	ldr	r3, [pc, #540]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d023      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a6:	4b84      	ldr	r3, [pc, #528]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	f04f 0400 	mov.w	r4, #0
 80020b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	ea03 0501 	and.w	r5, r3, r1
 80020bc:	ea04 0602 	and.w	r6, r4, r2
 80020c0:	4a7f      	ldr	r2, [pc, #508]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80020c2:	fb02 f106 	mul.w	r1, r2, r6
 80020c6:	2200      	movs	r2, #0
 80020c8:	fb02 f205 	mul.w	r2, r2, r5
 80020cc:	440a      	add	r2, r1
 80020ce:	497c      	ldr	r1, [pc, #496]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80020d0:	fba5 0101 	umull	r0, r1, r5, r1
 80020d4:	1853      	adds	r3, r2, r1
 80020d6:	4619      	mov	r1, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f04f 0400 	mov.w	r4, #0
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	f7fe f88f 	bl	8000204 <__aeabi_uldivmod>
 80020e6:	4603      	mov	r3, r0
 80020e8:	460c      	mov	r4, r1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e049      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ee:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	f04f 0400 	mov.w	r4, #0
 80020f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	ea03 0501 	and.w	r5, r3, r1
 8002104:	ea04 0602 	and.w	r6, r4, r2
 8002108:	4629      	mov	r1, r5
 800210a:	4632      	mov	r2, r6
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	f04f 0400 	mov.w	r4, #0
 8002114:	0154      	lsls	r4, r2, #5
 8002116:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800211a:	014b      	lsls	r3, r1, #5
 800211c:	4619      	mov	r1, r3
 800211e:	4622      	mov	r2, r4
 8002120:	1b49      	subs	r1, r1, r5
 8002122:	eb62 0206 	sbc.w	r2, r2, r6
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f04f 0400 	mov.w	r4, #0
 800212e:	0194      	lsls	r4, r2, #6
 8002130:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002134:	018b      	lsls	r3, r1, #6
 8002136:	1a5b      	subs	r3, r3, r1
 8002138:	eb64 0402 	sbc.w	r4, r4, r2
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	00e2      	lsls	r2, r4, #3
 8002146:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800214a:	00d9      	lsls	r1, r3, #3
 800214c:	460b      	mov	r3, r1
 800214e:	4614      	mov	r4, r2
 8002150:	195b      	adds	r3, r3, r5
 8002152:	eb44 0406 	adc.w	r4, r4, r6
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	02a2      	lsls	r2, r4, #10
 8002160:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002164:	0299      	lsls	r1, r3, #10
 8002166:	460b      	mov	r3, r1
 8002168:	4614      	mov	r4, r2
 800216a:	4618      	mov	r0, r3
 800216c:	4621      	mov	r1, r4
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f04f 0400 	mov.w	r4, #0
 8002174:	461a      	mov	r2, r3
 8002176:	4623      	mov	r3, r4
 8002178:	f7fe f844 	bl	8000204 <__aeabi_uldivmod>
 800217c:	4603      	mov	r3, r0
 800217e:	460c      	mov	r4, r1
 8002180:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002182:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	3301      	adds	r3, #1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e087      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a6:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	ea03 0501 	and.w	r5, r3, r1
 80021ca:	ea04 0602 	and.w	r6, r4, r2
 80021ce:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021d0:	fb02 f106 	mul.w	r1, r2, r6
 80021d4:	2200      	movs	r2, #0
 80021d6:	fb02 f205 	mul.w	r2, r2, r5
 80021da:	440a      	add	r2, r1
 80021dc:	4938      	ldr	r1, [pc, #224]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80021de:	fba5 0101 	umull	r0, r1, r5, r1
 80021e2:	1853      	adds	r3, r2, r1
 80021e4:	4619      	mov	r1, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f04f 0400 	mov.w	r4, #0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	f7fe f808 	bl	8000204 <__aeabi_uldivmod>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e049      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	f04f 0400 	mov.w	r4, #0
 8002206:	f240 11ff 	movw	r1, #511	; 0x1ff
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	ea03 0501 	and.w	r5, r3, r1
 8002212:	ea04 0602 	and.w	r6, r4, r2
 8002216:	4629      	mov	r1, r5
 8002218:	4632      	mov	r2, r6
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	0154      	lsls	r4, r2, #5
 8002224:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002228:	014b      	lsls	r3, r1, #5
 800222a:	4619      	mov	r1, r3
 800222c:	4622      	mov	r2, r4
 800222e:	1b49      	subs	r1, r1, r5
 8002230:	eb62 0206 	sbc.w	r2, r2, r6
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f04f 0400 	mov.w	r4, #0
 800223c:	0194      	lsls	r4, r2, #6
 800223e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002242:	018b      	lsls	r3, r1, #6
 8002244:	1a5b      	subs	r3, r3, r1
 8002246:	eb64 0402 	sbc.w	r4, r4, r2
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	00e2      	lsls	r2, r4, #3
 8002254:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002258:	00d9      	lsls	r1, r3, #3
 800225a:	460b      	mov	r3, r1
 800225c:	4614      	mov	r4, r2
 800225e:	195b      	adds	r3, r3, r5
 8002260:	eb44 0406 	adc.w	r4, r4, r6
 8002264:	f04f 0100 	mov.w	r1, #0
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	02a2      	lsls	r2, r4, #10
 800226e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002272:	0299      	lsls	r1, r3, #10
 8002274:	460b      	mov	r3, r1
 8002276:	4614      	mov	r4, r2
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f04f 0400 	mov.w	r4, #0
 8002282:	461a      	mov	r2, r3
 8002284:	4623      	mov	r3, r4
 8002286:	f7fd ffbd 	bl	8000204 <__aeabi_uldivmod>
 800228a:	4603      	mov	r3, r0
 800228c:	460c      	mov	r4, r1
 800228e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x298>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	0f1b      	lsrs	r3, r3, #28
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	613b      	str	r3, [r7, #16]
      break;
 80022a6:	e002      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCC_GetSysClockFreq+0x29c>)
 80022aa:	613b      	str	r3, [r7, #16]
      break;
 80022ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ae:	693b      	ldr	r3, [r7, #16]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	017d7840 	.word	0x017d7840

080022c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8083 	beq.w	80023e4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022de:	4b95      	ldr	r3, [pc, #596]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d019      	beq.n	800231e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ea:	4b92      	ldr	r3, [pc, #584]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f6:	4b8f      	ldr	r3, [pc, #572]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d00c      	beq.n	800231e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002304:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d10b      	bne.n	8002336 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231e:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d05b      	beq.n	80023e2 <HAL_RCC_OscConfig+0x11e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d157      	bne.n	80023e2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e216      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x8a>
 8002340:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7b      	ldr	r2, [pc, #492]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e01d      	b.n	800238a <HAL_RCC_OscConfig+0xc6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0xae>
 8002358:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800235e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b73      	ldr	r3, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a72      	ldr	r2, [pc, #456]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0xc6>
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6c      	ldr	r2, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d013      	beq.n	80023ba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe f909 	bl	80005a8 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239a:	f7fe f905 	bl	80005a8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1db      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0xd6>
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe f8f5 	bl	80005a8 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c2:	f7fe f8f1 	bl	80005a8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1c7      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0xfe>
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d06f      	beq.n	80024d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d017      	beq.n	800242c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023fc:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002404:	2b08      	cmp	r3, #8
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002408:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d11c      	bne.n	800245a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d116      	bne.n	800245a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x180>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e18f      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4938      	ldr	r1, [pc, #224]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002458:	e03a      	b.n	80024d0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d020      	beq.n	80024a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002462:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCC_OscConfig+0x274>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe f89e 	bl	80005a8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe f89a 	bl	80005a8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e170      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4925      	ldr	r1, [pc, #148]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
 80024a2:	e015      	b.n	80024d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x274>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe f87d 	bl	80005a8 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe f879 	bl	80005a8 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e14f      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d037      	beq.n	800254c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d016      	beq.n	8002512 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_OscConfig+0x278>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe f85d 	bl	80005a8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe f859 	bl	80005a8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e12f      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x270>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x22e>
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_OscConfig+0x278>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe f846 	bl	80005a8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251e:	e00f      	b.n	8002540 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002520:	f7fe f842 	bl	80005a8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d908      	bls.n	8002540 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e118      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b8a      	ldr	r3, [pc, #552]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e9      	bne.n	8002520 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8097 	beq.w	8002688 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b83      	ldr	r3, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b7f      	ldr	r3, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a7e      	ldr	r2, [pc, #504]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b7c      	ldr	r3, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b79      	ldr	r3, [pc, #484]	; (8002770 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x4ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe f801 	bl	80005a8 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fd fffd 	bl	80005a8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0d3      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x31a>
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a65      	ldr	r2, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x354>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x33c>
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a60      	ldr	r2, [pc, #384]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a5d      	ldr	r2, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x354>
 8002600:	4b5a      	ldr	r3, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a59      	ldr	r2, [pc, #356]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	4b57      	ldr	r3, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fd ffc2 	bl	80005a8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fd ffbe 	bl	80005a8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e092      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	4b4b      	ldr	r3, [pc, #300]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ee      	beq.n	8002628 <HAL_RCC_OscConfig+0x364>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fd ffac 	bl	80005a8 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fd ffa8 	bl	80005a8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e07c      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	4a3a      	ldr	r2, [pc, #232]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d068      	beq.n	8002762 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d060      	beq.n	800275e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d145      	bne.n	8002730 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x4b0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fd ff7d 	bl	80005a8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fd ff79 	bl	80005a8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e04f      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	019b      	lsls	r3, r3, #6
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	071b      	lsls	r3, r3, #28
 80026fc:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_RCC_OscConfig+0x4b0>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fd ff4e 	bl	80005a8 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fd ff4a 	bl	80005a8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e020      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x44c>
 800272e:	e018      	b.n	8002762 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x4b0>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fd ff37 	bl	80005a8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fd ff33 	bl	80005a8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e009      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x4a8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x47a>
 800275c:	e001      	b.n	8002762 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060

08002778 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e022      	b.n	80027d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f008 fb77 	bl	800ae90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f814 	bl	80027d8 <HAL_SD_InitCard>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00a      	b.n	80027d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af04      	add	r7, sp, #16
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80027f4:	2376      	movs	r3, #118	; 0x76
 80027f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681d      	ldr	r5, [r3, #0]
 80027fc:	466c      	mov	r4, sp
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002810:	4628      	mov	r0, r5
 8002812:	f002 fc25 	bl	8005060 <SDIO_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800281c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e031      	b.n	800288c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_SD_InitCard+0xbc>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fc5d 	bl	80050f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_SD_InitCard+0xbc>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fefc 	bl	800363c <SD_PowerON>
 8002844:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e013      	b.n	800288c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fe1b 	bl	80034a0 <SD_InitCard>
 800286a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00b      	beq.n	800288a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bdb0      	pop	{r4, r5, r7, pc}
 8002894:	422580a0 	.word	0x422580a0

08002898 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b092      	sub	sp, #72	; 0x48
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80028a6:	f7fd fe7f 	bl	80005a8 <HAL_GetTick>
 80028aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1d7      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 81ca 	bne.w	8002c6c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	441a      	add	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d907      	bls.n	80028fc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e1be      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2203      	movs	r2, #3
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	2b01      	cmp	r3, #1
 8002912:	d002      	beq.n	800291a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	025b      	lsls	r3, r3, #9
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fc78 	bl	8005218 <SDMMC_CmdBlockLength>
 8002928:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800292a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00f      	beq.n	8002950 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a9a      	ldr	r2, [pc, #616]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e194      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	025b      	lsls	r3, r3, #9
 800295a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800295c:	2390      	movs	r3, #144	; 0x90
 800295e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002960:	2302      	movs	r3, #2
 8002962:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002968:	2301      	movs	r3, #1
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f107 0214 	add.w	r2, r7, #20
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fc22 	bl	80051c0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d90a      	bls.n	8002998 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2202      	movs	r2, #2
 8002986:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800298e:	4618      	mov	r0, r3
 8002990:	f002 fc86 	bl	80052a0 <SDMMC_CmdReadMultiBlock>
 8002994:	6478      	str	r0, [r7, #68]	; 0x44
 8002996:	e009      	b.n	80029ac <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fc59 	bl	800525c <SDMMC_CmdReadSingleBlock>
 80029aa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e150      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80029dc:	e061      	b.n	8002aa2 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <HAL_SD_ReadBlocks+0x1ce>
 80029ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d039      	beq.n	8002a66 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
 80029f6:	e033      	b.n	8002a60 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fb5a 	bl	80050b6 <SDIO_ReadFIFO>
 8002a02:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	3301      	adds	r3, #1
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a14:	3b01      	subs	r3, #1
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	3301      	adds	r3, #1
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a40:	3b01      	subs	r3, #1
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	0e1b      	lsrs	r3, r3, #24
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	3301      	adds	r3, #1
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a56:	3b01      	subs	r3, #1
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	d9c8      	bls.n	80029f8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002a66:	f7fd fd9f 	bl	80005a8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d902      	bls.n	8002a7c <HAL_SD_ReadBlocks+0x1e4>
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d112      	bne.n	8002aa2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0eb      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d096      	beq.n	80029de <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d022      	beq.n	8002b04 <HAL_SD_ReadBlocks+0x26c>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d91f      	bls.n	8002b04 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d01b      	beq.n	8002b04 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fc4b 	bl	800536c <SDMMC_CmdStopTransfer>
 8002ad6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0ba      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	f043 0208 	orr.w	r2, r3, #8
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0a0      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e086      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_SD_ReadBlocks+0x308>)
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e06c      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
 8002ba0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fa84 	bl	80050b6 <SDIO_ReadFIFO>
 8002bae:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	3301      	adds	r3, #1
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	3301      	adds	r3, #1
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	3b01      	subs	r3, #1
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	0e1b      	lsrs	r3, r3, #24
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c02:	3b01      	subs	r3, #1
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c06:	f7fd fccf 	bl	80005a8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d902      	bls.n	8002c1c <HAL_SD_ReadBlocks+0x384>
 8002c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d112      	bne.n	8002c42 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <HAL_SD_ReadBlocks+0x3ec>)
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01b      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_SD_ReadBlocks+0x3be>
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1a6      	bne.n	8002ba4 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e006      	b.n	8002c7a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3748      	adds	r7, #72	; 0x48
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	004005ff 	.word	0x004005ff

08002c88 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b092      	sub	sp, #72	; 0x48
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c96:	f7fd fc87 	bl	80005a8 <HAL_GetTick>
 8002c9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e182      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f040 8175 	bne.w	8002fb2 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d907      	bls.n	8002cec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e169      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d002      	beq.n	8002d0a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 fa80 	bl	8005218 <SDMMC_CmdBlockLength>
 8002d18:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00f      	beq.n	8002d40 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a9c      	ldr	r2, [pc, #624]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e13f      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	025b      	lsls	r3, r3, #9
 8002d4a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d4c:	2390      	movs	r3, #144	; 0x90
 8002d4e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f107 0218 	add.w	r2, r7, #24
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fa2a 	bl	80051c0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d90a      	bls.n	8002d88 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fad2 	bl	8005328 <SDMMC_CmdWriteMultiBlock>
 8002d84:	6478      	str	r0, [r7, #68]	; 0x44
 8002d86:	e009      	b.n	8002d9c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 faa5 	bl	80052e4 <SDMMC_CmdWriteSingleBlock>
 8002d9a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7c      	ldr	r2, [pc, #496]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0fb      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002dcc:	e065      	b.n	8002e9a <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d040      	beq.n	8002e5e <HAL_SD_WriteBlocks+0x1d6>
 8002ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03d      	beq.n	8002e5e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
 8002de6:	e037      	b.n	8002e58 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	3301      	adds	r3, #1
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df6:	3b01      	subs	r3, #1
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	3301      	adds	r3, #1
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	041a      	lsls	r2, r3, #16
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	3301      	adds	r3, #1
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	3b01      	subs	r3, #1
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	061a      	lsls	r2, r3, #24
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	3301      	adds	r3, #1
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f107 0214 	add.w	r2, r7, #20
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 f93f 	bl	80050d0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e54:	3301      	adds	r3, #1
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
 8002e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5a:	2b07      	cmp	r3, #7
 8002e5c:	d9c4      	bls.n	8002de8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e5e:	f7fd fba3 	bl	80005a8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d902      	bls.n	8002e74 <HAL_SD_WriteBlocks+0x1ec>
 8002e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d112      	bne.n	8002e9a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a47      	ldr	r2, [pc, #284]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e092      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d092      	beq.n	8002dce <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d022      	beq.n	8002efc <HAL_SD_WriteBlocks+0x274>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d91f      	bls.n	8002efc <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d01b      	beq.n	8002efc <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fa4f 	bl	800536c <SDMMC_CmdStopTransfer>
 8002ece:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2f      	ldr	r2, [pc, #188]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e061      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d012      	beq.n	8002f30 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	f043 0208 	orr.w	r2, r3, #8
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e047      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d012      	beq.n	8002f64 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e02d      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d014      	beq.n	8002f9c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_SD_WriteBlocks+0x310>)
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e013      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
 8002f98:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f240 523a 	movw	r2, #1338	; 0x53a
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e006      	b.n	8002fc0 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
  }
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3748      	adds	r7, #72	; 0x48
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd6:	0f9b      	lsrs	r3, r3, #30
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff4:	0e1b      	lsrs	r3, r3, #24
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2da      	uxtb	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	b2da      	uxtb	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003028:	0d1b      	lsrs	r3, r3, #20
 800302a:	b29a      	uxth	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	b2da      	uxtb	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003046:	0bdb      	lsrs	r3, r3, #15
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003058:	0b9b      	lsrs	r3, r3, #14
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306a:	0b5b      	lsrs	r3, r3, #13
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307c:	0b1b      	lsrs	r3, r3, #12
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	b2da      	uxtb	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	2b00      	cmp	r3, #0
 8003096:	d163      	bne.n	8003160 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309c:	009a      	lsls	r2, r3, #2
 800309e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030a2:	4013      	ands	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80030a8:	0f92      	lsrs	r2, r2, #30
 80030aa:	431a      	orrs	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b4:	0edb      	lsrs	r3, r3, #27
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c6:	0e1b      	lsrs	r3, r3, #24
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d8:	0d5b      	lsrs	r3, r3, #21
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	0c9b      	lsrs	r3, r3, #18
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fc:	0bdb      	lsrs	r3, r3, #15
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	b2da      	uxtb	r2, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	7e1b      	ldrb	r3, [r3, #24]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	3302      	adds	r3, #2
 8003120:	2201      	movs	r2, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800312a:	fb02 f203 	mul.w	r2, r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	7a1b      	ldrb	r3, [r3, #8]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800314c:	0a52      	lsrs	r2, r2, #9
 800314e:	fb02 f203 	mul.w	r2, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	661a      	str	r2, [r3, #96]	; 0x60
 800315e:	e031      	b.n	80031c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	2b01      	cmp	r3, #1
 8003166:	d11d      	bne.n	80031a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003176:	0c1b      	lsrs	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	3301      	adds	r3, #1
 8003184:	029a      	lsls	r2, r3, #10
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003198:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60
 80031a2:	e00f      	b.n	80031c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_SD_GetCardCSD+0x344>)
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e09d      	b.n	8003300 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c8:	0b9b      	lsrs	r3, r3, #14
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031da:	09db      	lsrs	r3, r3, #7
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	0fdb      	lsrs	r3, r3, #31
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	0f5b      	lsrs	r3, r3, #29
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	b2da      	uxtb	r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	b2da      	uxtb	r2, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	0d9b      	lsrs	r3, r3, #22
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	0d5b      	lsrs	r3, r3, #21
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	0bdb      	lsrs	r3, r3, #15
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	0b9b      	lsrs	r3, r3, #14
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	0b5b      	lsrs	r3, r3, #13
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	0b1b      	lsrs	r3, r3, #12
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	004005ff 	.word	0x004005ff

08003310 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b08e      	sub	sp, #56	; 0x38
 800336c:	af04      	add	r7, sp, #16
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	2b03      	cmp	r3, #3
 8003380:	d02e      	beq.n	80033e0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d106      	bne.n	8003398 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
 8003396:	e029      	b.n	80033ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339e:	d10a      	bne.n	80033b6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa01 	bl	80037a8 <SD_WideBus_Enable>
 80033a6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
 80033b4:	e01a      	b.n	80033ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa3e 	bl	800383e <SD_WideBus_Disable>
 80033c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
 80033d0:	e00c      	b.n	80033ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
 80033de:	e005      	b.n	80033ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e024      	b.n	8003452 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681d      	ldr	r5, [r3, #0]
 800342e:	466c      	mov	r4, sp
 8003430:	f107 0318 	add.w	r3, r7, #24
 8003434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	4628      	mov	r0, r5
 8003444:	f001 fe0c 	bl	8005060 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3728      	adds	r7, #40	; 0x28
 8003456:	46bd      	mov	sp, r7
 8003458:	bdb0      	pop	{r4, r5, r7, pc}
 800345a:	bf00      	nop
 800345c:	004005ff 	.word	0x004005ff

08003460 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f970 	bl	8003758 <SD_SendStatus>
 8003478:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0a5b      	lsrs	r3, r3, #9
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003496:	693b      	ldr	r3, [r7, #16]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b094      	sub	sp, #80	; 0x50
 80034a4:	af04      	add	r7, sp, #16
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 fe2d 	bl	8005110 <SDIO_GetPowerState>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034c0:	e0b7      	b.n	8003632 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d02f      	beq.n	800352a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 f856 	bl	8005580 <SDMMC_CmdSendCID>
 80034d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034de:	e0a8      	b.n	8003632 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fe57 	bl	800519a <SDIO_GetResponse>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2104      	movs	r1, #4
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fe4e 	bl	800519a <SDIO_GetResponse>
 80034fe:	4602      	mov	r2, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2108      	movs	r1, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fe45 	bl	800519a <SDIO_GetResponse>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	210c      	movs	r1, #12
 800351c:	4618      	mov	r0, r3
 800351e:	f001 fe3c 	bl	800519a <SDIO_GetResponse>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	2b03      	cmp	r3, #3
 8003530:	d00d      	beq.n	800354e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f107 020e 	add.w	r2, r7, #14
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f85c 	bl	80055fa <SDMMC_CmdSetRelAdd>
 8003542:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <SD_InitCard+0xae>
    {
      return errorstate;
 800354a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354c:	e071      	b.n	8003632 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	2b03      	cmp	r3, #3
 8003554:	d036      	beq.n	80035c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	041b      	lsls	r3, r3, #16
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f002 f826 	bl	80055bc <SDMMC_CmdSendCSD>
 8003570:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	e05a      	b.n	8003632 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fe09 	bl	800519a <SDIO_GetResponse>
 8003588:	4602      	mov	r2, r0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2104      	movs	r1, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fe00 	bl	800519a <SDIO_GetResponse>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2108      	movs	r1, #8
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fdf7 	bl	800519a <SDIO_GetResponse>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	210c      	movs	r1, #12
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fdee 	bl	800519a <SDIO_GetResponse>
 80035be:	4602      	mov	r2, r0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2104      	movs	r1, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fde5 	bl	800519a <SDIO_GetResponse>
 80035d0:	4603      	mov	r3, r0
 80035d2:	0d1a      	lsrs	r2, r3, #20
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fcf2 	bl	8002fc8 <HAL_SD_GetCardCSD>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035ee:	e020      	b.n	8003632 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	f04f 0400 	mov.w	r4, #0
 80035fe:	461a      	mov	r2, r3
 8003600:	4623      	mov	r3, r4
 8003602:	4608      	mov	r0, r1
 8003604:	f001 fed4 	bl	80053b0 <SDMMC_CmdSelDesel>
 8003608:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800360a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <SD_InitCard+0x174>
  {
    return errorstate;
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	e00e      	b.n	8003632 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681d      	ldr	r5, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	466c      	mov	r4, sp
 800361c:	f103 0210 	add.w	r2, r3, #16
 8003620:	ca07      	ldmia	r2, {r0, r1, r2}
 8003622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003626:	3304      	adds	r3, #4
 8003628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362a:	4628      	mov	r0, r5
 800362c:	f001 fd18 	bl	8005060 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3740      	adds	r7, #64	; 0x40
 8003636:	46bd      	mov	sp, r7
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800363c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fece 	bl	80053f6 <SDMMC_CmdGoIdleState>
 800365a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	e072      	b.n	800374c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fee1 	bl	8005432 <SDMMC_CmdOperCond>
 8003670:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 feb7 	bl	80053f6 <SDMMC_CmdGoIdleState>
 8003688:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	e05b      	b.n	800374c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d137      	bne.n	8003712 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fee1 	bl	8005470 <SDMMC_CmdAppCommand>
 80036ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02d      	beq.n	8003712 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036ba:	e047      	b.n	800374c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fed4 	bl	8005470 <SDMMC_CmdAppCommand>
 80036c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	e03b      	b.n	800374c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	491e      	ldr	r1, [pc, #120]	; (8003754 <SD_PowerON+0x118>)
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 feea 	bl	80054b4 <SDMMC_CmdAppOperCommand>
 80036e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036ec:	e02e      	b.n	800374c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fd50 	bl	800519a <SDIO_GetResponse>
 80036fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	0fdb      	lsrs	r3, r3, #31
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <SD_PowerON+0xcc>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <SD_PowerON+0xce>
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]

    count++;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3301      	adds	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003718:	4293      	cmp	r3, r2
 800371a:	d802      	bhi.n	8003722 <SD_PowerON+0xe6>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0cc      	beq.n	80036bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003728:	4293      	cmp	r3, r2
 800372a:	d902      	bls.n	8003732 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800372c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003730:	e00c      	b.n	800374c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
 8003742:	e002      	b.n	800374a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	c1100000 	.word	0xc1100000

08003758 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800376c:	e018      	b.n	80037a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f001 ff5e 	bl	800563c <SDMMC_CmdSendStatus>
 8003780:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	e009      	b.n	80037a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f001 fd01 	bl	800519a <SDIO_GetResponse>
 8003798:	4602      	mov	r2, r0
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 fceb 	bl	800519a <SDIO_GetResponse>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ce:	d102      	bne.n	80037d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80037d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037d4:	e02f      	b.n	8003836 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80037d6:	f107 030c 	add.w	r3, r7, #12
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f879 	bl	80038d4 <SD_FindSCR>
 80037e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	e023      	b.n	8003836 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01c      	beq.n	8003832 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f001 fe33 	bl	8005470 <SDMMC_CmdAppCommand>
 800380a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	e00f      	b.n	8003836 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fe6c 	bl	80054fa <SDMMC_CmdBusWidth>
 8003822:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	e003      	b.n	8003836 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800382e:	2300      	movs	r3, #0
 8003830:	e001      	b.n	8003836 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003832:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fca0 	bl	800519a <SDIO_GetResponse>
 800385a:	4603      	mov	r3, r0
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003864:	d102      	bne.n	800386c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800386a:	e02f      	b.n	80038cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f82e 	bl	80038d4 <SD_FindSCR>
 8003878:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	e023      	b.n	80038cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01c      	beq.n	80038c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f001 fde8 	bl	8005470 <SDMMC_CmdAppCommand>
 80038a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	e00f      	b.n	80038cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fe21 	bl	80054fa <SDMMC_CmdBusWidth>
 80038b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e003      	b.n	80038cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e001      	b.n	80038cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b08f      	sub	sp, #60	; 0x3c
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80038de:	f7fc fe63 	bl	80005a8 <HAL_GetTick>
 80038e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2108      	movs	r1, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fc8c 	bl	8005218 <SDMMC_CmdBlockLength>
 8003900:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	e0a9      	b.n	8003a60 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f001 fda9 	bl	8005470 <SDMMC_CmdAppCommand>
 800391e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	e09a      	b.n	8003a60 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003930:	2308      	movs	r3, #8
 8003932:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003934:	2330      	movs	r3, #48	; 0x30
 8003936:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003938:	2302      	movs	r3, #2
 800393a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800393c:	2300      	movs	r3, #0
 800393e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003940:	2301      	movs	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f107 0210 	add.w	r2, r7, #16
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fc36 	bl	80051c0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fdf0 	bl	800553e <SDMMC_CmdSendSCR>
 800395e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d022      	beq.n	80039ac <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	e07a      	b.n	8003a60 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00e      	beq.n	8003996 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f107 0208 	add.w	r2, r7, #8
 8003984:	18d4      	adds	r4, r2, r3
 8003986:	4608      	mov	r0, r1
 8003988:	f001 fb95 	bl	80050b6 <SDIO_ReadFIFO>
 800398c:	4603      	mov	r3, r0
 800398e:	6023      	str	r3, [r4, #0]
      index++;
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	3301      	adds	r3, #1
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003996:	f7fc fe07 	bl	80005a8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d102      	bne.n	80039ac <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80039a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039aa:	e059      	b.n	8003a60 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b2:	f240 432a 	movw	r3, #1066	; 0x42a
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0d6      	beq.n	800396a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2208      	movs	r2, #8
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80039d2:	2308      	movs	r3, #8
 80039d4:	e044      	b.n	8003a60 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2202      	movs	r2, #2
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039ec:	2302      	movs	r3, #2
 80039ee:	e037      	b.n	8003a60 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2220      	movs	r2, #32
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e02a      	b.n	8003a60 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	061a      	lsls	r2, r3, #24
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	0e1b      	lsrs	r3, r3, #24
 8003a30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	601a      	str	r2, [r3, #0]
    scr++;
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	3304      	adds	r3, #4
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	061a      	lsls	r2, r3, #24
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	0e1b      	lsrs	r3, r3, #24
 8003a58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	373c      	adds	r7, #60	; 0x3c
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd90      	pop	{r4, r7, pc}

08003a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e056      	b.n	8003b28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f007 fa63 	bl	800af60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	ea42 0103 	orr.w	r1, r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	f003 0104 	and.w	r1, r3, #4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * const pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_SPI_Transmit+0x22>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e11e      	b.n	8003d90 <HAL_SPI_Transmit+0x260>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5a:	f7fc fd25 	bl	80005a8 <HAL_GetTick>
 8003b5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
 8003b72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b74:	e103      	b.n	8003d7e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_SPI_Transmit+0x52>
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b86:	e0fa      	b.n	8003d7e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bce:	d107      	bne.n	8003be0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d007      	beq.n	8003bfe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c06:	d14b      	bne.n	8003ca0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_SPI_Transmit+0xe6>
 8003c10:	8afb      	ldrh	r3, [r7, #22]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d13e      	bne.n	8003c94 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c9a      	adds	r2, r3, #2
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c3a:	e02b      	b.n	8003c94 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d112      	bne.n	8003c70 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c6e:	e011      	b.n	8003c94 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c70:	f7fc fc9a 	bl	80005a8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d803      	bhi.n	8003c88 <HAL_SPI_Transmit+0x158>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d102      	bne.n	8003c8e <HAL_SPI_Transmit+0x15e>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c92:	e074      	b.n	8003d7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ce      	bne.n	8003c3c <HAL_SPI_Transmit+0x10c>
 8003c9e:	e04c      	b.n	8003d3a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_Transmit+0x17e>
 8003ca8:	8afb      	ldrh	r3, [r7, #22]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d140      	bne.n	8003d30 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cd4:	e02c      	b.n	8003d30 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d113      	bne.n	8003d0c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d0a:	e011      	b.n	8003d30 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d0c:	f7fc fc4c 	bl	80005a8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d803      	bhi.n	8003d24 <HAL_SPI_Transmit+0x1f4>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d102      	bne.n	8003d2a <HAL_SPI_Transmit+0x1fa>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d2e:	e026      	b.n	8003d7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1cd      	bne.n	8003cd6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fba4 	bl	800448c <SPI_EndRxTxTransaction>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e000      	b.n	8003d7e <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db4:	d112      	bne.n	8003ddc <HAL_SPI_Receive+0x44>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10e      	bne.n	8003ddc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f8e9 	bl	8003faa <HAL_SPI_TransmitReceive>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	e0e2      	b.n	8003fa2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_Receive+0x52>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0db      	b.n	8003fa2 <HAL_SPI_Receive+0x20a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fc fbd9 	bl	80005a8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
 8003e06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e08:	e0c2      	b.n	8003f90 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SPI_Receive+0x7e>
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e1a:	e0b9      	b.n	8003f90 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e62:	d107      	bne.n	8003e74 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d007      	beq.n	8003e92 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d162      	bne.n	8003f60 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e9a:	e02e      	b.n	8003efa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d115      	bne.n	8003ed6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f103 020c 	add.w	r2, r3, #12
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed4:	e011      	b.n	8003efa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed6:	f7fc fb67 	bl	80005a8 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d803      	bhi.n	8003eee <HAL_SPI_Receive+0x156>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d102      	bne.n	8003ef4 <HAL_SPI_Receive+0x15c>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ef8:	e04a      	b.n	8003f90 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1cb      	bne.n	8003e9c <HAL_SPI_Receive+0x104>
 8003f04:	e031      	b.n	8003f6a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d113      	bne.n	8003f3c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f3a:	e011      	b.n	8003f60 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f3c:	f7fc fb34 	bl	80005a8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d803      	bhi.n	8003f54 <HAL_SPI_Receive+0x1bc>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d102      	bne.n	8003f5a <HAL_SPI_Receive+0x1c2>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f5e:	e017      	b.n	8003f90 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1cd      	bne.n	8003f06 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fa27 	bl	80043c2 <SPI_EndRxTransaction>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
 8003f8c:	e000      	b.n	8003f90 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003f8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b08c      	sub	sp, #48	; 0x30
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x26>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e18a      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x33c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd8:	f7fc fae6 	bl	80005a8 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d00f      	beq.n	800401a <HAL_SPI_TransmitReceive+0x70>
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004000:	d107      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x68>
 800400a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800400e:	2b04      	cmp	r3, #4
 8004010:	d003      	beq.n	800401a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004018:	e15b      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_SPI_TransmitReceive+0x82>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_SPI_TransmitReceive+0x82>
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004032:	e14e      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b04      	cmp	r3, #4
 800403e:	d003      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2205      	movs	r2, #5
 8004044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b40      	cmp	r3, #64	; 0x40
 800408a:	d007      	beq.n	800409c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a4:	d178      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_TransmitReceive+0x10a>
 80040ae:	8b7b      	ldrh	r3, [r7, #26]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d166      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	881a      	ldrh	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d8:	e053      	b.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d11b      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x176>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x176>
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d113      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d119      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x1b8>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d014      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	b292      	uxth	r2, r2
 8004144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800415e:	2301      	movs	r3, #1
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004162:	f7fc fa21 	bl	80005a8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416e:	429a      	cmp	r2, r3
 8004170:	d807      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d003      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004180:	e0a7      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1a6      	bne.n	80040da <HAL_SPI_TransmitReceive+0x130>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1a1      	bne.n	80040da <HAL_SPI_TransmitReceive+0x130>
 8004196:	e07c      	b.n	8004292 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x1fc>
 80041a0:	8b7b      	ldrh	r3, [r7, #26]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d16b      	bne.n	800427e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041cc:	e057      	b.n	800427e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d11c      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x26c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d017      	beq.n	8004216 <HAL_SPI_TransmitReceive+0x26c>
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d114      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d119      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x2ae>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004254:	2301      	movs	r3, #1
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004258:	f7fc f9a6 	bl	80005a8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004264:	429a      	cmp	r2, r3
 8004266:	d803      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x2c6>
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d102      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x2cc>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800427c:	e029      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1a2      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x224>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d19d      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004294:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8f8 	bl	800448c <SPI_EndRxTxTransaction>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042ae:	e010      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e000      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3730      	adds	r7, #48	; 0x30
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fe:	e04c      	b.n	800439a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d048      	beq.n	800439a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004308:	f7fc f94e 	bl	80005a8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d902      	bls.n	800431e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d13d      	bne.n	800439a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800432c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004336:	d111      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	d004      	beq.n	800434c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d107      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004364:	d10f      	bne.n	8004386 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e00f      	b.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1a3      	bne.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d6:	d111      	bne.n	80043fc <SPI_EndRxTransaction+0x3a>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e0:	d004      	beq.n	80043ec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ea:	d107      	bne.n	80043fc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004404:	d12a      	bne.n	800445c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d012      	beq.n	8004436 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ff67 	bl	80042ee <SPI_WaitFlagStateUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02d      	beq.n	8004482 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e026      	b.n	8004484 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2200      	movs	r2, #0
 800443e:	2101      	movs	r1, #1
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff ff54 	bl	80042ee <SPI_WaitFlagStateUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01a      	beq.n	8004482 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e013      	b.n	8004484 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	2101      	movs	r1, #1
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff ff41 	bl	80042ee <SPI_WaitFlagStateUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f043 0220 	orr.w	r2, r3, #32
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e000      	b.n	8004484 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <SPI_EndRxTxTransaction+0x7c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <SPI_EndRxTxTransaction+0x80>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	0d5b      	lsrs	r3, r3, #21
 80044a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b6:	d112      	bne.n	80044de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	2180      	movs	r1, #128	; 0x80
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff ff13 	bl	80042ee <SPI_WaitFlagStateUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e00f      	b.n	80044fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d0f2      	beq.n	80044de <SPI_EndRxTxTransaction+0x52>
 80044f8:	e000      	b.n	80044fc <SPI_EndRxTxTransaction+0x70>
        break;
 80044fa:	bf00      	nop
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000024 	.word	0x20000024
 800450c:	165e9f81 	.word	0x165e9f81

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e01d      	b.n	800455e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f006 fd7a 	bl	800b030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f000 f9fa 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01d      	b.n	80045b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f815 	bl	80045bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f000 f9cf 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fc9a 	bl	8004f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_TIM_PWM_Start+0x74>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIM_PWM_Start+0x2c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <HAL_TIM_PWM_Start+0x78>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_PWM_Start+0x30>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_TIM_PWM_Start+0x32>
 8004600:	2300      	movs	r3, #0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d007      	beq.n	8004638 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40010400 	.word	0x40010400

0800464c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004662:	2302      	movs	r3, #2
 8004664:	e0b4      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	f200 809f 	bhi.w	80047bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080047bd 	.word	0x080047bd
 800468c:	080047bd 	.word	0x080047bd
 8004690:	080047bd 	.word	0x080047bd
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080047bd 	.word	0x080047bd
 800469c:	080047bd 	.word	0x080047bd
 80046a0:	080047bd 	.word	0x080047bd
 80046a4:	0800473b 	.word	0x0800473b
 80046a8:	080047bd 	.word	0x080047bd
 80046ac:	080047bd 	.word	0x080047bd
 80046b0:	080047bd 	.word	0x080047bd
 80046b4:	0800477b 	.word	0x0800477b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f9e2 	bl	8004a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
      break;
 80046f6:	e062      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fa32 	bl	8004b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]
      break;
 8004738:	e041      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa87 	bl	8004c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0208 	orr.w	r2, r2, #8
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e021      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fadb 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e000      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0a6      	b.n	800493e <HAL_TIM_ConfigClockSource+0x166>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800480e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d067      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x120>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d80b      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x6c>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d073      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x140>
 8004830:	2b10      	cmp	r3, #16
 8004832:	d802      	bhi.n	800483a <HAL_TIM_ConfigClockSource+0x62>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d06f      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004838:	e078      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800483a:	2b20      	cmp	r3, #32
 800483c:	d06c      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x140>
 800483e:	2b30      	cmp	r3, #48	; 0x30
 8004840:	d06a      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004842:	e073      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d00d      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0x8c>
 8004848:	2b70      	cmp	r3, #112	; 0x70
 800484a:	d804      	bhi.n	8004856 <HAL_TIM_ConfigClockSource+0x7e>
 800484c:	2b50      	cmp	r3, #80	; 0x50
 800484e:	d033      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0xe0>
 8004850:	2b60      	cmp	r3, #96	; 0x60
 8004852:	d041      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004854:	e06a      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	d066      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x152>
 800485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004860:	d017      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004862:	e063      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6899      	ldr	r1, [r3, #8]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f000 fb32 	bl	8004edc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004886:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	609a      	str	r2, [r3, #8]
      break;
 8004890:	e04c      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6899      	ldr	r1, [r3, #8]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f000 fb1b 	bl	8004edc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e039      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	461a      	mov	r2, r3
 80048c6:	f000 fa8f 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2150      	movs	r1, #80	; 0x50
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fae8 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 80048d6:	e029      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f000 faae 	bl	8004e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2160      	movs	r1, #96	; 0x60
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fad8 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 80048f6:	e019      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	461a      	mov	r2, r3
 8004906:	f000 fa6f 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2140      	movs	r1, #64	; 0x40
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fac8 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004916:	e009      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 fabf 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004928:	e000      	b.n	800492c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800492a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d00f      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3d      	ldr	r2, [pc, #244]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d027      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <TIM_Base_SetConfig+0x118>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d023      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_Base_SetConfig+0x11c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01f      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_Base_SetConfig+0x120>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d017      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_Base_SetConfig+0x128>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <TIM_Base_SetConfig+0x12c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <TIM_Base_SetConfig+0x130>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <TIM_Base_SetConfig+0x134>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <TIM_Base_SetConfig+0x138>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <TIM_Base_SetConfig+0x13c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <TIM_Base_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d103      	bne.n	8004a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	615a      	str	r2, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800
 8004a7c:	40001800 	.word	0x40001800
 8004a80:	40001c00 	.word	0x40001c00
 8004a84:	40002000 	.word	0x40002000

08004a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 0201 	bic.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 0302 	bic.w	r3, r3, #2
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a20      	ldr	r2, [pc, #128]	; (8004b60 <TIM_OC1_SetConfig+0xd8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC1_SetConfig+0x64>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <TIM_OC1_SetConfig+0xdc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10c      	bne.n	8004b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0308 	bic.w	r3, r3, #8
 8004af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <TIM_OC1_SetConfig+0xd8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC1_SetConfig+0x8e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <TIM_OC1_SetConfig+0xdc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d111      	bne.n	8004b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	621a      	str	r2, [r3, #32]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40010400 	.word	0x40010400

08004b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0320 	bic.w	r3, r3, #32
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <TIM_OC2_SetConfig+0xe4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC2_SetConfig+0x68>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <TIM_OC2_SetConfig+0xe8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10d      	bne.n	8004bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <TIM_OC2_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_OC2_SetConfig+0x94>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <TIM_OC2_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d113      	bne.n	8004c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40010400 	.word	0x40010400

08004c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <TIM_OC3_SetConfig+0xe0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0x66>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a20      	ldr	r2, [pc, #128]	; (8004d38 <TIM_OC3_SetConfig+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC3_SetConfig+0xe0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC3_SetConfig+0x92>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC3_SetConfig+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <TIM_OC4_SetConfig+0xa4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC4_SetConfig+0x68>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <TIM_OC4_SetConfig+0xa8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400

08004de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 030a 	bic.w	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0210 	bic.w	r2, r3, #16
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f043 0307 	orr.w	r3, r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e05a      	b.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d022      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d01d      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10c      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40001800 	.word	0x40001800

08005060 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005060:	b084      	sub	sp, #16
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	f107 001c 	add.w	r0, r7, #28
 800506e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005076:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005078:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800507a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800507e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005082:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005086:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800508a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800509a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	b004      	add	sp, #16
 80050b4:	4770      	bx	lr

080050b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2203      	movs	r2, #3
 80050fe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005100:	2002      	movs	r0, #2
 8005102:	f7fb fa5d 	bl	80005c0 <HAL_Delay>
  
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0303 	and.w	r3, r3, #3
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800514a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005150:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005156:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005166:	f023 030f 	bic.w	r3, r3, #15
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	b2db      	uxtb	r3, r3
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3314      	adds	r3, #20
 80051a8:	461a      	mov	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	4413      	add	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
}  
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80051ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80051f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800520a:	2300      	movs	r3, #0

}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005226:	2310      	movs	r3, #16
 8005228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005236:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ff74 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005244:	f241 3288 	movw	r2, #5000	; 0x1388
 8005248:	2110      	movs	r1, #16
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa40 	bl	80056d0 <SDMMC_GetCmdResp1>
 8005250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005252:	69fb      	ldr	r3, [r7, #28]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800526a:	2311      	movs	r3, #17
 800526c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800527a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ff52 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	2111      	movs	r1, #17
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa1e 	bl	80056d0 <SDMMC_GetCmdResp1>
 8005294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005296:	69fb      	ldr	r3, [r7, #28]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80052ae:	2312      	movs	r3, #18
 80052b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052c0:	f107 0308 	add.w	r3, r7, #8
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ff30 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80052cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d0:	2112      	movs	r1, #18
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9fc 	bl	80056d0 <SDMMC_GetCmdResp1>
 80052d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052da:	69fb      	ldr	r3, [r7, #28]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80052f2:	2318      	movs	r3, #24
 80052f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ff0e 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	2118      	movs	r1, #24
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9da 	bl	80056d0 <SDMMC_GetCmdResp1>
 800531c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800531e:	69fb      	ldr	r3, [r7, #28]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005336:	2319      	movs	r3, #25
 8005338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005346:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff feec 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	2119      	movs	r1, #25
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9b8 	bl	80056d0 <SDMMC_GetCmdResp1>
 8005360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005362:	69fb      	ldr	r3, [r7, #28]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005378:	230c      	movs	r3, #12
 800537a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800537c:	2340      	movs	r3, #64	; 0x40
 800537e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005388:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fecb 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <SDMMC_CmdStopTransfer+0x40>)
 8005398:	210c      	movs	r1, #12
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f998 	bl	80056d0 <SDMMC_GetCmdResp1>
 80053a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053a2:	69fb      	ldr	r3, [r7, #28]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	05f5e100 	.word	0x05f5e100

080053b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80053c0:	2307      	movs	r3, #7
 80053c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053d2:	f107 0310 	add.w	r3, r7, #16
 80053d6:	4619      	mov	r1, r3
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff fea7 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	2107      	movs	r1, #7
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f973 	bl	80056d0 <SDMMC_GetCmdResp1>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b088      	sub	sp, #32
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800540e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fe86 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f92d 	bl	8005680 <SDMMC_GetCmdError>
 8005426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005428:	69fb      	ldr	r3, [r7, #28]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b088      	sub	sp, #32
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800543a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800543e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005440:	2308      	movs	r3, #8
 8005442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800544c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005450:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005452:	f107 0308 	add.w	r3, r7, #8
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fe67 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fb16 	bl	8005a90 <SDMMC_GetCmdResp7>
 8005464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800547e:	2337      	movs	r3, #55	; 0x37
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fe48 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	2137      	movs	r1, #55	; 0x37
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f914 	bl	80056d0 <SDMMC_GetCmdResp1>
 80054a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80054ca:	2329      	movs	r3, #41	; 0x29
 80054cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054dc:	f107 0308 	add.w	r3, r7, #8
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe22 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fa23 	bl	8005934 <SDMMC_GetCmdResp3>
 80054ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f0:	69fb      	ldr	r3, [r7, #28]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005508:	2306      	movs	r3, #6
 800550a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fe03 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	2106      	movs	r1, #6
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8cf 	bl	80056d0 <SDMMC_GetCmdResp1>
 8005532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005534:	69fb      	ldr	r3, [r7, #28]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800554a:	2333      	movs	r3, #51	; 0x33
 800554c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fde2 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	2133      	movs	r1, #51	; 0x33
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8ae 	bl	80056d0 <SDMMC_GetCmdResp1>
 8005574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800558c:	2302      	movs	r3, #2
 800558e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005590:	23c0      	movs	r3, #192	; 0xc0
 8005592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800559c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fdc1 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f97c 	bl	80058a8 <SDMMC_GetCmdResp2>
 80055b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055b2:	69fb      	ldr	r3, [r7, #28]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80055ca:	2309      	movs	r3, #9
 80055cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055ce:	23c0      	movs	r3, #192	; 0xc0
 80055d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fda2 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f95d 	bl	80058a8 <SDMMC_GetCmdResp2>
 80055ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f0:	69fb      	ldr	r3, [r7, #28]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005608:	2303      	movs	r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fd83 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	2103      	movs	r1, #3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9bc 	bl	80059a8 <SDMMC_GetCmdResp6>
 8005630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005632:	69fb      	ldr	r3, [r7, #28]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800564a:	230d      	movs	r3, #13
 800564c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800565a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fd62 	bl	800512c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	210d      	movs	r1, #13
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f82e 	bl	80056d0 <SDMMC_GetCmdResp1>
 8005674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005676:	69fb      	ldr	r3, [r7, #28]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005680:	b490      	push	{r4, r7}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <SDMMC_GetCmdError+0x48>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <SDMMC_GetCmdError+0x4c>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0a5b      	lsrs	r3, r3, #9
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800569c:	4623      	mov	r3, r4
 800569e:	1e5c      	subs	r4, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056a8:	e009      	b.n	80056be <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f2      	beq.n	800569c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	22c5      	movs	r2, #197	; 0xc5
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc90      	pop	{r4, r7}
 80056c6:	4770      	bx	lr
 80056c8:	20000024 	.word	0x20000024
 80056cc:	10624dd3 	.word	0x10624dd3

080056d0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	460b      	mov	r3, r1
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80056de:	4b6f      	ldr	r3, [pc, #444]	; (800589c <SDMMC_GetCmdResp1+0x1cc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6f      	ldr	r2, [pc, #444]	; (80058a0 <SDMMC_GetCmdResp1+0x1d0>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	0a5b      	lsrs	r3, r3, #9
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056f0:	4623      	mov	r3, r4
 80056f2:	1e5c      	subs	r4, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056fc:	e0c9      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <SDMMC_GetCmdResp1+0x20>
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1eb      	bne.n	80056f0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2204      	movs	r2, #4
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800572a:	2304      	movs	r3, #4
 800572c:	e0b1      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005740:	2301      	movs	r3, #1
 8005742:	e0a6      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	22c5      	movs	r2, #197	; 0xc5
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f7ff fd18 	bl	8005180 <SDIO_GetCommandResponse>
 8005750:	4603      	mov	r3, r0
 8005752:	461a      	mov	r2, r3
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	4293      	cmp	r3, r2
 8005758:	d001      	beq.n	800575e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800575a:	2301      	movs	r3, #1
 800575c:	e099      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800575e:	2100      	movs	r1, #0
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff fd1a 	bl	800519a <SDIO_GetResponse>
 8005766:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4b4e      	ldr	r3, [pc, #312]	; (80058a4 <SDMMC_GetCmdResp1+0x1d4>)
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005772:	2300      	movs	r3, #0
 8005774:	e08d      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	da02      	bge.n	8005782 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800577c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005780:	e087      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	e080      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	e079      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80057a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ac:	e071      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80057b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057bc:	e069      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80057c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057cc:	e061      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80057d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057dc:	e059      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ec:	e051      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057fc:	e049      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005808:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800580c:	e041      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581c:	e039      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800582c:	e031      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005838:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800583c:	e029      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005848:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800584c:	e021      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005858:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800585c:	e019      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800586c:	e011      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800587c:	e009      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005888:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800588c:	e001      	b.n	8005892 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800588e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	20000024 	.word	0x20000024
 80058a0:	10624dd3 	.word	0x10624dd3
 80058a4:	fdffe008 	.word	0xfdffe008

080058a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80058a8:	b490      	push	{r4, r7}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058b0:	4b1e      	ldr	r3, [pc, #120]	; (800592c <SDMMC_GetCmdResp2+0x84>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <SDMMC_GetCmdResp2+0x88>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0a5b      	lsrs	r3, r3, #9
 80058bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80058c4:	4623      	mov	r3, r4
 80058c6:	1e5c      	subs	r4, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d0:	e026      	b.n	8005920 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f0      	beq.n	80058c4 <SDMMC_GetCmdResp2+0x1c>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1eb      	bne.n	80058c4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2204      	movs	r2, #4
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058fe:	2304      	movs	r3, #4
 8005900:	e00e      	b.n	8005920 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005914:	2301      	movs	r3, #1
 8005916:	e003      	b.n	8005920 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	22c5      	movs	r2, #197	; 0xc5
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bc90      	pop	{r4, r7}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000024 	.word	0x20000024
 8005930:	10624dd3 	.word	0x10624dd3

08005934 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005934:	b490      	push	{r4, r7}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800593c:	4b18      	ldr	r3, [pc, #96]	; (80059a0 <SDMMC_GetCmdResp3+0x6c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <SDMMC_GetCmdResp3+0x70>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	0a5b      	lsrs	r3, r3, #9
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005950:	4623      	mov	r3, r4
 8005952:	1e5c      	subs	r4, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800595c:	e01b      	b.n	8005996 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <SDMMC_GetCmdResp3+0x1c>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1eb      	bne.n	8005950 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2204      	movs	r2, #4
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800598a:	2304      	movs	r3, #4
 800598c:	e003      	b.n	8005996 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	22c5      	movs	r2, #197	; 0xc5
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bc90      	pop	{r4, r7}
 800599e:	4770      	bx	lr
 80059a0:	20000024 	.word	0x20000024
 80059a4:	10624dd3 	.word	0x10624dd3

080059a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	460b      	mov	r3, r1
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <SDMMC_GetCmdResp6+0xe0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a34      	ldr	r2, [pc, #208]	; (8005a8c <SDMMC_GetCmdResp6+0xe4>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	0a5b      	lsrs	r3, r3, #9
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80059ca:	4623      	mov	r3, r4
 80059cc:	1e5c      	subs	r4, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059d6:	e052      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <SDMMC_GetCmdResp6+0x22>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1eb      	bne.n	80059ca <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2204      	movs	r2, #4
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a04:	2304      	movs	r3, #4
 8005a06:	e03a      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e02f      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fbae 	bl	8005180 <SDIO_GetCommandResponse>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	7afb      	ldrb	r3, [r7, #11]
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d001      	beq.n	8005a32 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e025      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	22c5      	movs	r2, #197	; 0xc5
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a38:	2100      	movs	r1, #0
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7ff fbad 	bl	800519a <SDIO_GetResponse>
 8005a40:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e011      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a68:	e009      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a78:	e001      	b.n	8005a7e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd90      	pop	{r4, r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000024 	.word	0x20000024
 8005a8c:	10624dd3 	.word	0x10624dd3

08005a90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005a90:	b490      	push	{r4, r7}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a98:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <SDMMC_GetCmdResp7+0x90>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <SDMMC_GetCmdResp7+0x94>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0a5b      	lsrs	r3, r3, #9
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005aac:	4623      	mov	r3, r4
 8005aae:	1e5c      	subs	r4, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ab8:	e02c      	b.n	8005b14 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <SDMMC_GetCmdResp7+0x1c>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1eb      	bne.n	8005aac <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	e014      	b.n	8005b14 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e009      	b.n	8005b14 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2240      	movs	r2, #64	; 0x40
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b12:	2300      	movs	r3, #0
  
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc90      	pop	{r4, r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000024 	.word	0x20000024
 8005b24:	10624dd3 	.word	0x10624dd3

08005b28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <disk_status+0x30>)
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	79fa      	ldrb	r2, [r7, #7]
 8005b40:	4905      	ldr	r1, [pc, #20]	; (8005b58 <disk_status+0x30>)
 8005b42:	440a      	add	r2, r1
 8005b44:	7a12      	ldrb	r2, [r2, #8]
 8005b46:	4610      	mov	r0, r2
 8005b48:	4798      	blx	r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	200000d0 	.word	0x200000d0

08005b5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <disk_initialize+0x48>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d111      	bne.n	8005b98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	4a0b      	ldr	r2, [pc, #44]	; (8005ba4 <disk_initialize+0x48>)
 8005b78:	2101      	movs	r1, #1
 8005b7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <disk_initialize+0x48>)
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	79fa      	ldrb	r2, [r7, #7]
 8005b8a:	4906      	ldr	r1, [pc, #24]	; (8005ba4 <disk_initialize+0x48>)
 8005b8c:	440a      	add	r2, r1
 8005b8e:	7a12      	ldrb	r2, [r2, #8]
 8005b90:	4610      	mov	r0, r2
 8005b92:	4798      	blx	r3
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200000d0 	.word	0x200000d0

08005ba8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <disk_read+0x3c>)
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	689c      	ldr	r4, [r3, #8]
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	4a07      	ldr	r2, [pc, #28]	; (8005be4 <disk_read+0x3c>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	7a18      	ldrb	r0, [r3, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	47a0      	blx	r4
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd90      	pop	{r4, r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200000d0 	.word	0x200000d0

08005be8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <disk_write+0x3c>)
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68dc      	ldr	r4, [r3, #12]
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <disk_write+0x3c>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	7a18      	ldrb	r0, [r3, #8]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	47a0      	blx	r4
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd90      	pop	{r4, r7, pc}
 8005c22:	bf00      	nop
 8005c24:	200000d0 	.word	0x200000d0

08005c28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	603a      	str	r2, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
 8005c34:	460b      	mov	r3, r1
 8005c36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <disk_ioctl+0x38>)
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	79fa      	ldrb	r2, [r7, #7]
 8005c46:	4906      	ldr	r1, [pc, #24]	; (8005c60 <disk_ioctl+0x38>)
 8005c48:	440a      	add	r2, r1
 8005c4a:	7a10      	ldrb	r0, [r2, #8]
 8005c4c:	79b9      	ldrb	r1, [r7, #6]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	4798      	blx	r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200000d0 	.word	0x200000d0

08005c64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	b21a      	sxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b21b      	sxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c86:	89fb      	ldrh	r3, [r7, #14]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3303      	adds	r3, #3
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	3202      	adds	r2, #2
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	3201      	adds	r2, #1
 8005cba:	7812      	ldrb	r2, [r2, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	887a      	ldrh	r2, [r7, #2]
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	887b      	ldrh	r3, [r7, #2]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	1c53      	adds	r3, r2, #1
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	6179      	str	r1, [r7, #20]
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f1      	bne.n	8005d82 <mem_cpy+0x1a>
	}
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	617a      	str	r2, [r7, #20]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f3      	bne.n	8005dba <mem_set+0x10>
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005dde:	b480      	push	{r7}
 8005de0:	b089      	sub	sp, #36	; 0x24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	61fa      	str	r2, [r7, #28]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	61ba      	str	r2, [r7, #24]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	1acb      	subs	r3, r1, r3
 8005e0a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <mem_cmp+0x40>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0eb      	beq.n	8005df6 <mem_cmp+0x18>

	return r;
 8005e1e:	697b      	ldr	r3, [r7, #20]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3724      	adds	r7, #36	; 0x24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e36:	e002      	b.n	8005e3e <chk_chr+0x12>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <chk_chr+0x26>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d1f2      	bne.n	8005e38 <chk_chr+0xc>
	return *str;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	781b      	ldrb	r3, [r3, #0]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e029      	b.n	8005ecc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e78:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <chk_lock+0xb4>)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	4413      	add	r3, r2
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e86:	4a24      	ldr	r2, [pc, #144]	; (8005f18 <chk_lock+0xb4>)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	4413      	add	r3, r2
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d116      	bne.n	8005ec6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <chk_lock+0xb4>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d10c      	bne.n	8005ec6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <chk_lock+0xb4>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d102      	bne.n	8005ec6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ec0:	e007      	b.n	8005ed2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d9d2      	bls.n	8005e78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d109      	bne.n	8005eec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <chk_lock+0x80>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d101      	bne.n	8005ee8 <chk_lock+0x84>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e010      	b.n	8005f0a <chk_lock+0xa6>
 8005ee8:	2312      	movs	r3, #18
 8005eea:	e00e      	b.n	8005f0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <chk_lock+0xa0>
 8005ef2:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <chk_lock+0xb4>)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	4413      	add	r3, r2
 8005efa:	330c      	adds	r3, #12
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f02:	d101      	bne.n	8005f08 <chk_lock+0xa4>
 8005f04:	2310      	movs	r3, #16
 8005f06:	e000      	b.n	8005f0a <chk_lock+0xa6>
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	200000b0 	.word	0x200000b0

08005f1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	e002      	b.n	8005f2e <enq_lock+0x12>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d806      	bhi.n	8005f42 <enq_lock+0x26>
 8005f34:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <enq_lock+0x40>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	4413      	add	r3, r2
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f2      	bne.n	8005f28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	bf14      	ite	ne
 8005f48:	2301      	movne	r3, #1
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	200000b0 	.word	0x200000b0

08005f60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e01f      	b.n	8005fb0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f70:	4a41      	ldr	r2, [pc, #260]	; (8006078 <inc_lock+0x118>)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	4413      	add	r3, r2
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d113      	bne.n	8005faa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f82:	4a3d      	ldr	r2, [pc, #244]	; (8006078 <inc_lock+0x118>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d109      	bne.n	8005faa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f96:	4a38      	ldr	r2, [pc, #224]	; (8006078 <inc_lock+0x118>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d006      	beq.n	8005fb8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d9dc      	bls.n	8005f70 <inc_lock+0x10>
 8005fb6:	e000      	b.n	8005fba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d132      	bne.n	8006026 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e002      	b.n	8005fcc <inc_lock+0x6c>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d806      	bhi.n	8005fe0 <inc_lock+0x80>
 8005fd2:	4a29      	ldr	r2, [pc, #164]	; (8006078 <inc_lock+0x118>)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	4413      	add	r3, r2
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f2      	bne.n	8005fc6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d101      	bne.n	8005fea <inc_lock+0x8a>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e040      	b.n	800606c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4922      	ldr	r1, [pc, #136]	; (8006078 <inc_lock+0x118>)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	440b      	add	r3, r1
 8005ff6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	491e      	ldr	r1, [pc, #120]	; (8006078 <inc_lock+0x118>)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	440b      	add	r3, r1
 8006004:	3304      	adds	r3, #4
 8006006:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	491a      	ldr	r1, [pc, #104]	; (8006078 <inc_lock+0x118>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	440b      	add	r3, r1
 8006014:	3308      	adds	r3, #8
 8006016:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <inc_lock+0x118>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	4413      	add	r3, r2
 8006020:	330c      	adds	r3, #12
 8006022:	2200      	movs	r2, #0
 8006024:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <inc_lock+0xe0>
 800602c:	4a12      	ldr	r2, [pc, #72]	; (8006078 <inc_lock+0x118>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	4413      	add	r3, r2
 8006034:	330c      	adds	r3, #12
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <inc_lock+0xe0>
 800603c:	2300      	movs	r3, #0
 800603e:	e015      	b.n	800606c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <inc_lock+0xf8>
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <inc_lock+0x118>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	330c      	adds	r3, #12
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	e001      	b.n	800605c <inc_lock+0xfc>
 8006058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800605c:	4906      	ldr	r1, [pc, #24]	; (8006078 <inc_lock+0x118>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	440b      	add	r3, r1
 8006064:	330c      	adds	r3, #12
 8006066:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	200000b0 	.word	0x200000b0

0800607c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3b01      	subs	r3, #1
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d825      	bhi.n	80060dc <dec_lock+0x60>
		n = Files[i].ctr;
 8006090:	4a17      	ldr	r2, [pc, #92]	; (80060f0 <dec_lock+0x74>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4413      	add	r3, r2
 8006098:	330c      	adds	r3, #12
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a4:	d101      	bne.n	80060aa <dec_lock+0x2e>
 80060a6:	2300      	movs	r3, #0
 80060a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80060aa:	89fb      	ldrh	r3, [r7, #14]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <dec_lock+0x3a>
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80060b6:	4a0e      	ldr	r2, [pc, #56]	; (80060f0 <dec_lock+0x74>)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	330c      	adds	r3, #12
 80060c0:	89fa      	ldrh	r2, [r7, #14]
 80060c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <dec_lock+0x5a>
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <dec_lock+0x74>)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4413      	add	r3, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	737b      	strb	r3, [r7, #13]
 80060da:	e001      	b.n	80060e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060dc:	2302      	movs	r3, #2
 80060de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80060e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200000b0 	.word	0x200000b0

080060f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e010      	b.n	8006124 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006102:	4a0d      	ldr	r2, [pc, #52]	; (8006138 <clear_lock+0x44>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	4413      	add	r3, r2
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d105      	bne.n	800611e <clear_lock+0x2a>
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <clear_lock+0x44>)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	4413      	add	r3, r2
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d9eb      	bls.n	8006102 <clear_lock+0xe>
	}
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	200000b0 	.word	0x200000b0

0800613c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d034      	beq.n	80061ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7858      	ldrb	r0, [r3, #1]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006160:	2301      	movs	r3, #1
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	f7ff fd40 	bl	8005be8 <disk_write>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <sync_window+0x38>
			res = FR_DISK_ERR;
 800616e:	2301      	movs	r3, #1
 8006170:	73fb      	strb	r3, [r7, #15]
 8006172:	e022      	b.n	80061ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	1ad2      	subs	r2, r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	429a      	cmp	r2, r3
 8006188:	d217      	bcs.n	80061ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	789b      	ldrb	r3, [r3, #2]
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	e010      	b.n	80061b4 <sync_window+0x78>
					wsect += fs->fsize;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7858      	ldrb	r0, [r3, #1]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061a6:	2301      	movs	r3, #1
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	f7ff fd1d 	bl	8005be8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d8eb      	bhi.n	8006192 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d01b      	beq.n	8006214 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ffad 	bl	800613c <sync_window>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d113      	bne.n	8006214 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	7858      	ldrb	r0, [r3, #1]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061f6:	2301      	movs	r3, #1
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	f7ff fcd5 	bl	8005ba8 <disk_read>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800620a:	2301      	movs	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff87 	bl	800613c <sync_window>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d158      	bne.n	80062ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d148      	bne.n	80062d2 <sync_fs+0xb2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d144      	bne.n	80062d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3330      	adds	r3, #48	; 0x30
 800624c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fda9 	bl	8005daa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3330      	adds	r3, #48	; 0x30
 800625c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006260:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fd38 	bl	8005cda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3330      	adds	r3, #48	; 0x30
 800626e:	4921      	ldr	r1, [pc, #132]	; (80062f4 <sync_fs+0xd4>)
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fd4d 	bl	8005d10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3330      	adds	r3, #48	; 0x30
 800627a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800627e:	491e      	ldr	r1, [pc, #120]	; (80062f8 <sync_fs+0xd8>)
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fd45 	bl	8005d10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3330      	adds	r3, #48	; 0x30
 800628a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7ff fd3b 	bl	8005d10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3330      	adds	r3, #48	; 0x30
 800629e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7ff fd31 	bl	8005d10 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7858      	ldrb	r0, [r3, #1]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c6:	2301      	movs	r3, #1
 80062c8:	f7ff fc8e 	bl	8005be8 <disk_write>
			fs->fsi_flag = 0;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2200      	movs	r2, #0
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fca4 	bl	8005c28 <disk_ioctl>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <sync_fs+0xca>
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	41615252 	.word	0x41615252
 80062f8:	61417272 	.word	0x61417272

080062fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	3b02      	subs	r3, #2
 800630a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	3b02      	subs	r3, #2
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d301      	bcc.n	800631c <clust2sect+0x20>
 8006318:	2300      	movs	r3, #0
 800631a:	e008      	b.n	800632e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	895b      	ldrh	r3, [r3, #10]
 8006320:	461a      	mov	r2, r3
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	fb03 f202 	mul.w	r2, r3, r2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	4413      	add	r3, r2
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d904      	bls.n	800635a <get_fat+0x20>
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <get_fat+0x26>
		val = 1;	/* Internal error */
 800635a:	2301      	movs	r3, #1
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	e08c      	b.n	800647a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d045      	beq.n	80063fa <get_fat+0xc0>
 800636e:	2b03      	cmp	r3, #3
 8006370:	d05d      	beq.n	800642e <get_fat+0xf4>
 8006372:	2b01      	cmp	r3, #1
 8006374:	d177      	bne.n	8006466 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	0a5b      	lsrs	r3, r3, #9
 800638c:	4413      	add	r3, r2
 800638e:	4619      	mov	r1, r3
 8006390:	6938      	ldr	r0, [r7, #16]
 8006392:	f7ff ff17 	bl	80061c4 <move_window>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d167      	bne.n	800646c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	60fa      	str	r2, [r7, #12]
 80063a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4413      	add	r3, r2
 80063aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063ae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6a1a      	ldr	r2, [r3, #32]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	0a5b      	lsrs	r3, r3, #9
 80063b8:	4413      	add	r3, r2
 80063ba:	4619      	mov	r1, r3
 80063bc:	6938      	ldr	r0, [r7, #16]
 80063be:	f7ff ff01 	bl	80061c4 <move_window>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d153      	bne.n	8006470 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	461a      	mov	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <get_fat+0xb6>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	e002      	b.n	80063f6 <get_fat+0xbc>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f6:	617b      	str	r3, [r7, #20]
			break;
 80063f8:	e03f      	b.n	800647a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	4413      	add	r3, r2
 8006404:	4619      	mov	r1, r3
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f7ff fedc 	bl	80061c4 <move_window>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d130      	bne.n	8006474 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006420:	4413      	add	r3, r2
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fc1e 	bl	8005c64 <ld_word>
 8006428:	4603      	mov	r3, r0
 800642a:	617b      	str	r3, [r7, #20]
			break;
 800642c:	e025      	b.n	800647a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	4413      	add	r3, r2
 8006438:	4619      	mov	r1, r3
 800643a:	6938      	ldr	r0, [r7, #16]
 800643c:	f7ff fec2 	bl	80061c4 <move_window>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d118      	bne.n	8006478 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006454:	4413      	add	r3, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fc1c 	bl	8005c94 <ld_dword>
 800645c:	4603      	mov	r3, r0
 800645e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006462:	617b      	str	r3, [r7, #20]
			break;
 8006464:	e009      	b.n	800647a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e006      	b.n	800647a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800646c:	bf00      	nop
 800646e:	e004      	b.n	800647a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006470:	bf00      	nop
 8006472:	e002      	b.n	800647a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006478:	bf00      	nop
		}
	}

	return val;
 800647a:	697b      	ldr	r3, [r7, #20]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006490:	2302      	movs	r3, #2
 8006492:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b01      	cmp	r3, #1
 8006498:	f240 80d6 	bls.w	8006648 <put_fat+0x1c4>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	f080 80d0 	bcs.w	8006648 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d073      	beq.n	8006598 <put_fat+0x114>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	f000 8091 	beq.w	80065d8 <put_fat+0x154>
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	f040 80c6 	bne.w	8006648 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4413      	add	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	0a5b      	lsrs	r3, r3, #9
 80064d2:	4413      	add	r3, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fe74 	bl	80061c4 <move_window>
 80064dc:	4603      	mov	r3, r0
 80064de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064e0:	7ffb      	ldrb	r3, [r7, #31]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 80a9 	bne.w	800663a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	61b9      	str	r1, [r7, #24]
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	4413      	add	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <put_fat+0x9e>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	b25b      	sxtb	r3, r3
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	b25a      	sxtb	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	b25b      	sxtb	r3, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	b25b      	sxtb	r3, r3
 800651e:	b2db      	uxtb	r3, r3
 8006520:	e001      	b.n	8006526 <put_fat+0xa2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	0a5b      	lsrs	r3, r3, #9
 8006538:	4413      	add	r3, r2
 800653a:	4619      	mov	r1, r3
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fe41 	bl	80061c4 <move_window>
 8006542:	4603      	mov	r3, r0
 8006544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d178      	bne.n	800663e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	4413      	add	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <put_fat+0xea>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e00e      	b.n	800658c <put_fat+0x108>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b25b      	sxtb	r3, r3
 8006574:	f023 030f 	bic.w	r3, r3, #15
 8006578:	b25a      	sxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	b25b      	sxtb	r3, r3
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b25b      	sxtb	r3, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	b25b      	sxtb	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	70da      	strb	r2, [r3, #3]
			break;
 8006596:	e057      	b.n	8006648 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	4413      	add	r3, r2
 80065a2:	4619      	mov	r1, r3
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff fe0d 	bl	80061c4 <move_window>
 80065aa:	4603      	mov	r3, r0
 80065ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d146      	bne.n	8006642 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80065c2:	4413      	add	r3, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	b292      	uxth	r2, r2
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fb85 	bl	8005cda <st_word>
			fs->wflag = 1;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	70da      	strb	r2, [r3, #3]
			break;
 80065d6:	e037      	b.n	8006648 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	4413      	add	r3, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fded 	bl	80061c4 <move_window>
 80065ea:	4603      	mov	r3, r0
 80065ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065ee:	7ffb      	ldrb	r3, [r7, #31]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d128      	bne.n	8006646 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006608:	4413      	add	r3, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fb42 	bl	8005c94 <ld_dword>
 8006610:	4603      	mov	r3, r0
 8006612:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006616:	4323      	orrs	r3, r4
 8006618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006628:	4413      	add	r3, r2
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fb6f 	bl	8005d10 <st_dword>
			fs->wflag = 1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	70da      	strb	r2, [r3, #3]
			break;
 8006638:	e006      	b.n	8006648 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800663a:	bf00      	nop
 800663c:	e004      	b.n	8006648 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800663e:	bf00      	nop
 8006640:	e002      	b.n	8006648 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006642:	bf00      	nop
 8006644:	e000      	b.n	8006648 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006646:	bf00      	nop
		}
	}
	return res;
 8006648:	7ffb      	ldrb	r3, [r7, #31]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3724      	adds	r7, #36	; 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}

08006652 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b088      	sub	sp, #32
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d904      	bls.n	8006678 <remove_chain+0x26>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	d301      	bcc.n	800667c <remove_chain+0x2a>
 8006678:	2302      	movs	r3, #2
 800667a:	e04b      	b.n	8006714 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006682:	f04f 32ff 	mov.w	r2, #4294967295
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f7ff fefb 	bl	8006484 <put_fat>
 800668e:	4603      	mov	r3, r0
 8006690:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006692:	7ffb      	ldrb	r3, [r7, #31]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <remove_chain+0x4a>
 8006698:	7ffb      	ldrb	r3, [r7, #31]
 800669a:	e03b      	b.n	8006714 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff fe4b 	bl	800633a <get_fat>
 80066a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d031      	beq.n	8006710 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <remove_chain+0x64>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e02e      	b.n	8006714 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d101      	bne.n	80066c2 <remove_chain+0x70>
 80066be:	2301      	movs	r3, #1
 80066c0:	e028      	b.n	8006714 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80066c2:	2200      	movs	r2, #0
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	69b8      	ldr	r0, [r7, #24]
 80066c8:	f7ff fedc 	bl	8006484 <put_fat>
 80066cc:	4603      	mov	r3, r0
 80066ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80066d0:	7ffb      	ldrb	r3, [r7, #31]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <remove_chain+0x88>
 80066d6:	7ffb      	ldrb	r3, [r7, #31]
 80066d8:	e01c      	b.n	8006714 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	3b02      	subs	r3, #2
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d20b      	bcs.n	8006700 <remove_chain+0xae>
			fs->free_clst++;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	791b      	ldrb	r3, [r3, #4]
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d3c6      	bcc.n	800669c <remove_chain+0x4a>
 800670e:	e000      	b.n	8006712 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006710:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3720      	adds	r7, #32
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10d      	bne.n	800674e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <create_chain+0x2c>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	429a      	cmp	r2, r3
 8006746:	d31b      	bcc.n	8006780 <create_chain+0x64>
 8006748:	2301      	movs	r3, #1
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	e018      	b.n	8006780 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fdf2 	bl	800633a <get_fat>
 8006756:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d801      	bhi.n	8006762 <create_chain+0x46>
 800675e:	2301      	movs	r3, #1
 8006760:	e070      	b.n	8006844 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d101      	bne.n	800676e <create_chain+0x52>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	e06a      	b.n	8006844 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	429a      	cmp	r2, r3
 8006776:	d201      	bcs.n	800677c <create_chain+0x60>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	e063      	b.n	8006844 <create_chain+0x128>
		scl = clst;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	3301      	adds	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	429a      	cmp	r2, r3
 8006792:	d307      	bcc.n	80067a4 <create_chain+0x88>
				ncl = 2;
 8006794:	2302      	movs	r3, #2
 8006796:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	429a      	cmp	r2, r3
 800679e:	d901      	bls.n	80067a4 <create_chain+0x88>
 80067a0:	2300      	movs	r3, #0
 80067a2:	e04f      	b.n	8006844 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80067a4:	69f9      	ldr	r1, [r7, #28]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fdc7 	bl	800633a <get_fat>
 80067ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00e      	beq.n	80067d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d003      	beq.n	80067c2 <create_chain+0xa6>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d101      	bne.n	80067c6 <create_chain+0xaa>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	e03e      	b.n	8006844 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d1da      	bne.n	8006784 <create_chain+0x68>
 80067ce:	2300      	movs	r3, #0
 80067d0:	e038      	b.n	8006844 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80067d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80067d4:	f04f 32ff 	mov.w	r2, #4294967295
 80067d8:	69f9      	ldr	r1, [r7, #28]
 80067da:	6938      	ldr	r0, [r7, #16]
 80067dc:	f7ff fe52 	bl	8006484 <put_fat>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <create_chain+0xe2>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6938      	ldr	r0, [r7, #16]
 80067f6:	f7ff fe45 	bl	8006484 <put_fat>
 80067fa:	4603      	mov	r3, r0
 80067fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d116      	bne.n	8006832 <create_chain+0x116>
		fs->last_clst = ncl;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	3b02      	subs	r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d804      	bhi.n	8006822 <create_chain+0x106>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	1e5a      	subs	r2, r3, #1
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	791b      	ldrb	r3, [r3, #4]
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	b2da      	uxtb	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	711a      	strb	r2, [r3, #4]
 8006830:	e007      	b.n	8006842 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d102      	bne.n	800683e <create_chain+0x122>
 8006838:	f04f 33ff 	mov.w	r3, #4294967295
 800683c:	e000      	b.n	8006840 <create_chain+0x124>
 800683e:	2301      	movs	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006842:	69fb      	ldr	r3, [r7, #28]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	3304      	adds	r3, #4
 8006862:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	0a5b      	lsrs	r3, r3, #9
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	8952      	ldrh	r2, [r2, #10]
 800686c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006870:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1d1a      	adds	r2, r3, #4
 8006876:	613a      	str	r2, [r7, #16]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <clmt_clust+0x3a>
 8006882:	2300      	movs	r3, #0
 8006884:	e010      	b.n	80068a8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d307      	bcc.n	800689e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	3304      	adds	r3, #4
 800689a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800689c:	e7e9      	b.n	8006872 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800689e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ca:	d204      	bcs.n	80068d6 <dir_sdi+0x22>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <dir_sdi+0x26>
		return FR_INT_ERR;
 80068d6:	2302      	movs	r3, #2
 80068d8:	e063      	b.n	80069a2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <dir_sdi+0x46>
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d902      	bls.n	80068fa <dir_sdi+0x46>
		clst = fs->dirbase;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10c      	bne.n	800691a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	8912      	ldrh	r2, [r2, #8]
 8006908:	4293      	cmp	r3, r2
 800690a:	d301      	bcc.n	8006910 <dir_sdi+0x5c>
 800690c:	2302      	movs	r3, #2
 800690e:	e048      	b.n	80069a2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	61da      	str	r2, [r3, #28]
 8006918:	e029      	b.n	800696e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	895b      	ldrh	r3, [r3, #10]
 800691e:	025b      	lsls	r3, r3, #9
 8006920:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006922:	e019      	b.n	8006958 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6979      	ldr	r1, [r7, #20]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fd06 	bl	800633a <get_fat>
 800692e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d101      	bne.n	800693c <dir_sdi+0x88>
 8006938:	2301      	movs	r3, #1
 800693a:	e032      	b.n	80069a2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d904      	bls.n	800694c <dir_sdi+0x98>
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	429a      	cmp	r2, r3
 800694a:	d301      	bcc.n	8006950 <dir_sdi+0x9c>
 800694c:	2302      	movs	r3, #2
 800694e:	e028      	b.n	80069a2 <dir_sdi+0xee>
			ofs -= csz;
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d2e1      	bcs.n	8006924 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	6938      	ldr	r0, [r7, #16]
 8006964:	f7ff fcca 	bl	80062fc <clust2sect>
 8006968:	4602      	mov	r2, r0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <dir_sdi+0xcc>
 800697c:	2302      	movs	r3, #2
 800697e:	e010      	b.n	80069a2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	0a5b      	lsrs	r3, r3, #9
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699a:	441a      	add	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b086      	sub	sp, #24
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	3320      	adds	r3, #32
 80069c0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <dir_next+0x28>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d0:	d301      	bcc.n	80069d6 <dir_next+0x2c>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e0aa      	b.n	8006b2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 8098 	bne.w	8006b12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10b      	bne.n	8006a0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	8912      	ldrh	r2, [r2, #8]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	f0c0 8088 	bcc.w	8006b12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	61da      	str	r2, [r3, #28]
 8006a08:	2304      	movs	r3, #4
 8006a0a:	e08f      	b.n	8006b2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	0a5b      	lsrs	r3, r3, #9
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	8952      	ldrh	r2, [r2, #10]
 8006a14:	3a01      	subs	r2, #1
 8006a16:	4013      	ands	r3, r2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d17a      	bne.n	8006b12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7ff fc88 	bl	800633a <get_fat>
 8006a2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d801      	bhi.n	8006a36 <dir_next+0x8c>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e07a      	b.n	8006b2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d101      	bne.n	8006a42 <dir_next+0x98>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e074      	b.n	8006b2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d358      	bcc.n	8006afe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	61da      	str	r2, [r3, #28]
 8006a58:	2304      	movs	r3, #4
 8006a5a:	e067      	b.n	8006b2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7ff fe59 	bl	800671c <create_chain>
 8006a6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <dir_next+0xcc>
 8006a72:	2307      	movs	r3, #7
 8006a74:	e05a      	b.n	8006b2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <dir_next+0xd6>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e055      	b.n	8006b2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d101      	bne.n	8006a8c <dir_next+0xe2>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e04f      	b.n	8006b2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff fb55 	bl	800613c <sync_window>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <dir_next+0xf2>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e047      	b.n	8006b2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3330      	adds	r3, #48	; 0x30
 8006aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff f97f 	bl	8005daa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fc22 	bl	80062fc <clust2sect>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006abe:	e012      	b.n	8006ae6 <dir_next+0x13c>
						fs->wflag = 1;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fb38 	bl	800613c <sync_window>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <dir_next+0x12c>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e02a      	b.n	8006b2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	895b      	ldrh	r3, [r3, #10]
 8006aea:	461a      	mov	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d3e6      	bcc.n	8006ac0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fbf8 	bl	80062fc <clust2sect>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006b44:	2100      	movs	r1, #0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff feb4 	bl	80068b4 <dir_sdi>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d12b      	bne.n	8006bae <dir_alloc+0x7a>
		n = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7ff fb2f 	bl	80061c4 <move_window>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11d      	bne.n	8006bac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2be5      	cmp	r3, #229	; 0xe5
 8006b78:	d004      	beq.n	8006b84 <dir_alloc+0x50>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d107      	bne.n	8006b94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	3301      	adds	r3, #1
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d102      	bne.n	8006b98 <dir_alloc+0x64>
 8006b92:	e00c      	b.n	8006bae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b98:	2101      	movs	r1, #1
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff ff05 	bl	80069aa <dir_next>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0d7      	beq.n	8006b5a <dir_alloc+0x26>
 8006baa:	e000      	b.n	8006bae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006bac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d101      	bne.n	8006bb8 <dir_alloc+0x84>
 8006bb4:	2307      	movs	r3, #7
 8006bb6:	75fb      	strb	r3, [r7, #23]
	return res;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	331a      	adds	r3, #26
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff f847 	bl	8005c64 <ld_word>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d109      	bne.n	8006bf6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	3314      	adds	r3, #20
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f83c 	bl	8005c64 <ld_word>
 8006bec:	4603      	mov	r3, r0
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	331a      	adds	r3, #26
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	b292      	uxth	r2, r2
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff f85f 	bl	8005cda <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d109      	bne.n	8006c38 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f103 0214 	add.w	r2, r3, #20
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f7ff f851 	bl	8005cda <st_word>
	}
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006c4a:	2304      	movs	r3, #4
 8006c4c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006c54:	e03c      	b.n	8006cd0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f7ff fab1 	bl	80061c4 <move_window>
 8006c62:	4603      	mov	r3, r0
 8006c64:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d136      	bne.n	8006cda <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	75fb      	strb	r3, [r7, #23]
 8006c7e:	e031      	b.n	8006ce4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	330b      	adds	r3, #11
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c8c:	73bb      	strb	r3, [r7, #14]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7bba      	ldrb	r2, [r7, #14]
 8006c92:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2be5      	cmp	r3, #229	; 0xe5
 8006c98:	d011      	beq.n	8006cbe <dir_read+0x7e>
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c9e:	d00e      	beq.n	8006cbe <dir_read+0x7e>
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b0f      	cmp	r3, #15
 8006ca4:	d00b      	beq.n	8006cbe <dir_read+0x7e>
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	f023 0320 	bic.w	r3, r3, #32
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	bf0c      	ite	eq
 8006cb0:	2301      	moveq	r3, #1
 8006cb2:	2300      	movne	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00f      	beq.n	8006cde <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fe72 	bl	80069aa <dir_next>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d108      	bne.n	8006ce2 <dir_read+0xa2>
	while (dp->sect) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1be      	bne.n	8006c56 <dir_read+0x16>
 8006cd8:	e004      	b.n	8006ce4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006cda:	bf00      	nop
 8006cdc:	e002      	b.n	8006ce4 <dir_read+0xa4>
				break;
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006ce2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <dir_read+0xb0>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	61da      	str	r2, [r3, #28]
	return res;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff fdd2 	bl	80068b4 <dir_sdi>
 8006d10:	4603      	mov	r3, r0
 8006d12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <dir_find+0x24>
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	e03e      	b.n	8006d9c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6938      	ldr	r0, [r7, #16]
 8006d26:	f7ff fa4d 	bl	80061c4 <move_window>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d12f      	bne.n	8006d94 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <dir_find+0x4e>
 8006d42:	2304      	movs	r3, #4
 8006d44:	75fb      	strb	r3, [r7, #23]
 8006d46:	e028      	b.n	8006d9a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	330b      	adds	r3, #11
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	330b      	adds	r3, #11
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <dir_find+0x86>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a18      	ldr	r0, [r3, #32]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	220b      	movs	r2, #11
 8006d74:	4619      	mov	r1, r3
 8006d76:	f7ff f832 	bl	8005dde <mem_cmp>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fe11 	bl	80069aa <dir_next>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0c5      	beq.n	8006d1e <dir_find+0x24>
 8006d92:	e002      	b.n	8006d9a <dir_find+0xa0>
		if (res != FR_OK) break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d98:	bf00      	nop

	return res;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006db2:	2101      	movs	r1, #1
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff febd 	bl	8006b34 <dir_alloc>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d11c      	bne.n	8006dfe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	68b8      	ldr	r0, [r7, #8]
 8006dcc:	f7ff f9fa 	bl	80061c4 <move_window>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d111      	bne.n	8006dfe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	2220      	movs	r2, #32
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe ffe1 	bl	8005daa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a18      	ldr	r0, [r3, #32]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	220b      	movs	r2, #11
 8006df2:	4619      	mov	r1, r3
 8006df4:	f7fe ffb8 	bl	8005d68 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff f9d1 	bl	80061c4 <move_window>
 8006e22:	4603      	mov	r3, r0
 8006e24:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	22e5      	movs	r2, #229	; 0xe5
 8006e32:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2200      	movs	r2, #0
 8006e52:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d04e      	beq.n	8006efa <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006e64:	e021      	b.n	8006eaa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1c59      	adds	r1, r3, #1
 8006e6e:	6179      	str	r1, [r7, #20]
 8006e70:	4413      	add	r3, r2
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d100      	bne.n	8006e7e <get_fileinfo+0x3a>
 8006e7c:	e015      	b.n	8006eaa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d101      	bne.n	8006e88 <get_fileinfo+0x44>
 8006e84:	23e5      	movs	r3, #229	; 0xe5
 8006e86:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b09      	cmp	r3, #9
 8006e8c:	d106      	bne.n	8006e9c <get_fileinfo+0x58>
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	613a      	str	r2, [r7, #16]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	4413      	add	r3, r2
 8006e98:	222e      	movs	r2, #46	; 0x2e
 8006e9a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	613a      	str	r2, [r7, #16]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	7bfa      	ldrb	r2, [r7, #15]
 8006ea8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b0a      	cmp	r3, #10
 8006eae:	d9da      	bls.n	8006e66 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3309      	adds	r3, #9
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	7ada      	ldrb	r2, [r3, #11]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	331c      	adds	r3, #28
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fee1 	bl	8005c94 <ld_dword>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	3316      	adds	r3, #22
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fed8 	bl	8005c94 <ld_dword>
 8006ee4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	80da      	strh	r2, [r3, #6]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	809a      	strh	r2, [r3, #4]
 8006ef8:	e000      	b.n	8006efc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006efa:	bf00      	nop
}
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3324      	adds	r3, #36	; 0x24
 8006f18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006f1a:	220b      	movs	r2, #11
 8006f1c:	2120      	movs	r1, #32
 8006f1e:	68b8      	ldr	r0, [r7, #8]
 8006f20:	f7fe ff43 	bl	8005daa <mem_set>
	si = i = 0; ni = 8;
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	617a      	str	r2, [r7, #20]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f3e:	7ffb      	ldrb	r3, [r7, #31]
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d94e      	bls.n	8006fe2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006f44:	7ffb      	ldrb	r3, [r7, #31]
 8006f46:	2b2f      	cmp	r3, #47	; 0x2f
 8006f48:	d006      	beq.n	8006f58 <create_name+0x54>
 8006f4a:	7ffb      	ldrb	r3, [r7, #31]
 8006f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8006f4e:	d110      	bne.n	8006f72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f50:	e002      	b.n	8006f58 <create_name+0x54>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3301      	adds	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b2f      	cmp	r3, #47	; 0x2f
 8006f62:	d0f6      	beq.n	8006f52 <create_name+0x4e>
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b5c      	cmp	r3, #92	; 0x5c
 8006f6e:	d0f0      	beq.n	8006f52 <create_name+0x4e>
			break;
 8006f70:	e038      	b.n	8006fe4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006f72:	7ffb      	ldrb	r3, [r7, #31]
 8006f74:	2b2e      	cmp	r3, #46	; 0x2e
 8006f76:	d003      	beq.n	8006f80 <create_name+0x7c>
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d30c      	bcc.n	8006f9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b0b      	cmp	r3, #11
 8006f84:	d002      	beq.n	8006f8c <create_name+0x88>
 8006f86:	7ffb      	ldrb	r3, [r7, #31]
 8006f88:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8a:	d001      	beq.n	8006f90 <create_name+0x8c>
 8006f8c:	2306      	movs	r3, #6
 8006f8e:	e044      	b.n	800701a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006f90:	2308      	movs	r3, #8
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	230b      	movs	r3, #11
 8006f96:	61bb      	str	r3, [r7, #24]
			continue;
 8006f98:	e022      	b.n	8006fe0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da04      	bge.n	8006fac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006fa2:	7ffb      	ldrb	r3, [r7, #31]
 8006fa4:	3b80      	subs	r3, #128	; 0x80
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <create_name+0x120>)
 8006fa8:	5cd3      	ldrb	r3, [r2, r3]
 8006faa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006fac:	7ffb      	ldrb	r3, [r7, #31]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	481d      	ldr	r0, [pc, #116]	; (8007028 <create_name+0x124>)
 8006fb2:	f7fe ff3b 	bl	8005e2c <chk_chr>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <create_name+0xbc>
 8006fbc:	2306      	movs	r3, #6
 8006fbe:	e02c      	b.n	800701a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006fc0:	7ffb      	ldrb	r3, [r7, #31]
 8006fc2:	2b60      	cmp	r3, #96	; 0x60
 8006fc4:	d905      	bls.n	8006fd2 <create_name+0xce>
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
 8006fc8:	2b7a      	cmp	r3, #122	; 0x7a
 8006fca:	d802      	bhi.n	8006fd2 <create_name+0xce>
 8006fcc:	7ffb      	ldrb	r3, [r7, #31]
 8006fce:	3b20      	subs	r3, #32
 8006fd0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	613a      	str	r2, [r7, #16]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4413      	add	r3, r2
 8006fdc:	7ffa      	ldrb	r2, [r7, #31]
 8006fde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006fe0:	e7a6      	b.n	8006f30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006fe2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	441a      	add	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <create_name+0xf4>
 8006ff4:	2306      	movs	r3, #6
 8006ff6:	e010      	b.n	800701a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2be5      	cmp	r3, #229	; 0xe5
 8006ffe:	d102      	bne.n	8007006 <create_name+0x102>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2205      	movs	r2, #5
 8007004:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007006:	7ffb      	ldrb	r3, [r7, #31]
 8007008:	2b20      	cmp	r3, #32
 800700a:	d801      	bhi.n	8007010 <create_name+0x10c>
 800700c:	2204      	movs	r2, #4
 800700e:	e000      	b.n	8007012 <create_name+0x10e>
 8007010:	2200      	movs	r2, #0
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	330b      	adds	r3, #11
 8007016:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007018:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800b550 	.word	0x0800b550
 8007028:	0800b504 	.word	0x0800b504

0800702c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007040:	e002      	b.n	8007048 <follow_path+0x1c>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b2f      	cmp	r3, #47	; 0x2f
 800704e:	d0f8      	beq.n	8007042 <follow_path+0x16>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b5c      	cmp	r3, #92	; 0x5c
 8007056:	d0f4      	beq.n	8007042 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2200      	movs	r2, #0
 800705c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b1f      	cmp	r3, #31
 8007064:	d80a      	bhi.n	800707c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2280      	movs	r2, #128	; 0x80
 800706a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800706e:	2100      	movs	r1, #0
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fc1f 	bl	80068b4 <dir_sdi>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]
 800707a:	e043      	b.n	8007104 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800707c:	463b      	mov	r3, r7
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff ff3f 	bl	8006f04 <create_name>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d134      	bne.n	80070fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fe32 	bl	8006cfa <dir_find>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d127      	bne.n	80070fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d122      	bne.n	80070fe <follow_path+0xd2>
 80070b8:	2305      	movs	r3, #5
 80070ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80070bc:	e01f      	b.n	80070fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d11c      	bne.n	8007102 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	799b      	ldrb	r3, [r3, #6]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80070d4:	2305      	movs	r3, #5
 80070d6:	75fb      	strb	r3, [r7, #23]
 80070d8:	e014      	b.n	8007104 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e8:	4413      	add	r3, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7ff fd68 	bl	8006bc2 <ld_clust>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070f8:	e7c0      	b.n	800707c <follow_path+0x50>
			if (res != FR_OK) break;
 80070fa:	bf00      	nop
 80070fc:	e002      	b.n	8007104 <follow_path+0xd8>
				break;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007102:	bf00      	nop
			}
		}
	}

	return res;
 8007104:	7dfb      	ldrb	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007116:	f04f 33ff 	mov.w	r3, #4294967295
 800711a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d031      	beq.n	8007188 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	e002      	b.n	8007132 <get_ldnumber+0x24>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	3301      	adds	r3, #1
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b20      	cmp	r3, #32
 8007138:	d903      	bls.n	8007142 <get_ldnumber+0x34>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b3a      	cmp	r3, #58	; 0x3a
 8007140:	d1f4      	bne.n	800712c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b3a      	cmp	r3, #58	; 0x3a
 8007148:	d11c      	bne.n	8007184 <get_ldnumber+0x76>
			tp = *path;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	60fa      	str	r2, [r7, #12]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	3b30      	subs	r3, #48	; 0x30
 800715a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b09      	cmp	r3, #9
 8007160:	d80e      	bhi.n	8007180 <get_ldnumber+0x72>
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	429a      	cmp	r2, r3
 8007168:	d10a      	bne.n	8007180 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <get_ldnumber+0x72>
					vol = (int)i;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3301      	adds	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	e002      	b.n	800718a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007184:	2300      	movs	r3, #0
 8007186:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007188:	693b      	ldr	r3, [r7, #16]
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	70da      	strb	r2, [r3, #3]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff f806 	bl	80061c4 <move_window>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <check_fs+0x2a>
 80071be:	2304      	movs	r3, #4
 80071c0:	e038      	b.n	8007234 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3330      	adds	r3, #48	; 0x30
 80071c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fd4a 	bl	8005c64 <ld_word>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <check_fs+0x48>
 80071dc:	2303      	movs	r3, #3
 80071de:	e029      	b.n	8007234 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071e6:	2be9      	cmp	r3, #233	; 0xe9
 80071e8:	d009      	beq.n	80071fe <check_fs+0x66>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071f0:	2beb      	cmp	r3, #235	; 0xeb
 80071f2:	d11e      	bne.n	8007232 <check_fs+0x9a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80071fa:	2b90      	cmp	r3, #144	; 0x90
 80071fc:	d119      	bne.n	8007232 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3330      	adds	r3, #48	; 0x30
 8007202:	3336      	adds	r3, #54	; 0x36
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fd45 	bl	8005c94 <ld_dword>
 800720a:	4603      	mov	r3, r0
 800720c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007210:	4a0a      	ldr	r2, [pc, #40]	; (800723c <check_fs+0xa4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d101      	bne.n	800721a <check_fs+0x82>
 8007216:	2300      	movs	r3, #0
 8007218:	e00c      	b.n	8007234 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3330      	adds	r3, #48	; 0x30
 800721e:	3352      	adds	r3, #82	; 0x52
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe fd37 	bl	8005c94 <ld_dword>
 8007226:	4602      	mov	r2, r0
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <check_fs+0xa8>)
 800722a:	429a      	cmp	r2, r3
 800722c:	d101      	bne.n	8007232 <check_fs+0x9a>
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007232:	2302      	movs	r3, #2
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	00544146 	.word	0x00544146
 8007240:	33544146 	.word	0x33544146

08007244 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b096      	sub	sp, #88	; 0x58
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7ff ff58 	bl	800710e <get_ldnumber>
 800725e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	da01      	bge.n	800726a <find_volume+0x26>
 8007266:	230b      	movs	r3, #11
 8007268:	e22e      	b.n	80076c8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800726a:	4aa8      	ldr	r2, [pc, #672]	; (800750c <find_volume+0x2c8>)
 800726c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <find_volume+0x3a>
 800727a:	230c      	movs	r3, #12
 800727c:	e224      	b.n	80076c8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007282:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01a      	beq.n	80072ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fc45 	bl	8005b28 <disk_status>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80072a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10c      	bne.n	80072ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <find_volume+0x82>
 80072b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80072c2:	230a      	movs	r3, #10
 80072c4:	e200      	b.n	80076c8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80072c6:	2300      	movs	r3, #0
 80072c8:	e1fe      	b.n	80076c8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80072d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fc3d 	bl	8005b5c <disk_initialize>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80072e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80072f4:	2303      	movs	r3, #3
 80072f6:	e1e7      	b.n	80076c8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <find_volume+0xca>
 80072fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800730a:	230a      	movs	r3, #10
 800730c:	e1dc      	b.n	80076c8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007312:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007314:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007316:	f7ff ff3f 	bl	8007198 <check_fs>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007324:	2b02      	cmp	r3, #2
 8007326:	d14b      	bne.n	80073c0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007328:	2300      	movs	r3, #0
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
 800732c:	e01f      	b.n	800736e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800733c:	4413      	add	r3, r2
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	3304      	adds	r3, #4
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <find_volume+0x114>
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	3308      	adds	r3, #8
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fca0 	bl	8005c94 <ld_dword>
 8007354:	4602      	mov	r2, r0
 8007356:	e000      	b.n	800735a <find_volume+0x116>
 8007358:	2200      	movs	r2, #0
 800735a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007362:	440b      	add	r3, r1
 8007364:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736a:	3301      	adds	r3, #1
 800736c:	643b      	str	r3, [r7, #64]	; 0x40
 800736e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007370:	2b03      	cmp	r3, #3
 8007372:	d9dc      	bls.n	800732e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007374:	2300      	movs	r3, #0
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <find_volume+0x140>
 800737e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007380:	3b01      	subs	r3, #1
 8007382:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800738c:	4413      	add	r3, r2
 800738e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007392:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <find_volume+0x162>
 800739a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800739c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800739e:	f7ff fefb 	bl	8007198 <check_fs>
 80073a2:	4603      	mov	r3, r0
 80073a4:	e000      	b.n	80073a8 <find_volume+0x164>
 80073a6:	2303      	movs	r3, #3
 80073a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d905      	bls.n	80073c0 <find_volume+0x17c>
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	3301      	adds	r3, #1
 80073b8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d9e1      	bls.n	8007384 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d101      	bne.n	80073cc <find_volume+0x188>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e17d      	b.n	80076c8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80073cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d901      	bls.n	80073d8 <find_volume+0x194>
 80073d4:	230d      	movs	r3, #13
 80073d6:	e177      	b.n	80076c8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	3330      	adds	r3, #48	; 0x30
 80073dc:	330b      	adds	r3, #11
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fc40 	bl	8005c64 <ld_word>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ea:	d001      	beq.n	80073f0 <find_volume+0x1ac>
 80073ec:	230d      	movs	r3, #13
 80073ee:	e16b      	b.n	80076c8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	3330      	adds	r3, #48	; 0x30
 80073f4:	3316      	adds	r3, #22
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fc34 	bl	8005c64 <ld_word>
 80073fc:	4603      	mov	r3, r0
 80073fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <find_volume+0x1d0>
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	3330      	adds	r3, #48	; 0x30
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe fc41 	bl	8005c94 <ld_dword>
 8007412:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007418:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	789b      	ldrb	r3, [r3, #2]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d005      	beq.n	8007438 <find_volume+0x1f4>
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	789b      	ldrb	r3, [r3, #2]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d001      	beq.n	8007438 <find_volume+0x1f4>
 8007434:	230d      	movs	r3, #13
 8007436:	e147      	b.n	80076c8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	789b      	ldrb	r3, [r3, #2]
 800743c:	461a      	mov	r2, r3
 800743e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b29a      	uxth	r2, r3
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	895b      	ldrh	r3, [r3, #10]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <find_volume+0x228>
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	895b      	ldrh	r3, [r3, #10]
 800745e:	461a      	mov	r2, r3
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	895b      	ldrh	r3, [r3, #10]
 8007464:	3b01      	subs	r3, #1
 8007466:	4013      	ands	r3, r2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <find_volume+0x22c>
 800746c:	230d      	movs	r3, #13
 800746e:	e12b      	b.n	80076c8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	3330      	adds	r3, #48	; 0x30
 8007474:	3311      	adds	r3, #17
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fbf4 	bl	8005c64 <ld_word>
 800747c:	4603      	mov	r3, r0
 800747e:	461a      	mov	r2, r3
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	891b      	ldrh	r3, [r3, #8]
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <find_volume+0x252>
 8007492:	230d      	movs	r3, #13
 8007494:	e118      	b.n	80076c8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	3330      	adds	r3, #48	; 0x30
 800749a:	3313      	adds	r3, #19
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fbe1 	bl	8005c64 <ld_word>
 80074a2:	4603      	mov	r3, r0
 80074a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <find_volume+0x276>
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	3330      	adds	r3, #48	; 0x30
 80074b0:	3320      	adds	r3, #32
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fbee 	bl	8005c94 <ld_dword>
 80074b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	3330      	adds	r3, #48	; 0x30
 80074be:	330e      	adds	r3, #14
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fbcf 	bl	8005c64 <ld_word>
 80074c6:	4603      	mov	r3, r0
 80074c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80074ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <find_volume+0x290>
 80074d0:	230d      	movs	r3, #13
 80074d2:	e0f9      	b.n	80076c8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80074d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d8:	4413      	add	r3, r2
 80074da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074dc:	8912      	ldrh	r2, [r2, #8]
 80074de:	0912      	lsrs	r2, r2, #4
 80074e0:	b292      	uxth	r2, r2
 80074e2:	4413      	add	r3, r2
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80074e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d201      	bcs.n	80074f2 <find_volume+0x2ae>
 80074ee:	230d      	movs	r3, #13
 80074f0:	e0ea      	b.n	80076c8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80074f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fa:	8952      	ldrh	r2, [r2, #10]
 80074fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <find_volume+0x2cc>
 8007508:	230d      	movs	r3, #13
 800750a:	e0dd      	b.n	80076c8 <find_volume+0x484>
 800750c:	200000a8 	.word	0x200000a8
		fmt = FS_FAT32;
 8007510:	2303      	movs	r3, #3
 8007512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800751c:	4293      	cmp	r3, r2
 800751e:	d802      	bhi.n	8007526 <find_volume+0x2e2>
 8007520:	2302      	movs	r3, #2
 8007522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	f640 72f5 	movw	r2, #4085	; 0xff5
 800752c:	4293      	cmp	r3, r2
 800752e:	d802      	bhi.n	8007536 <find_volume+0x2f2>
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	1c9a      	adds	r2, r3, #2
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007542:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007548:	441a      	add	r2, r3
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800754e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	441a      	add	r2, r3
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800755c:	2b03      	cmp	r3, #3
 800755e:	d11e      	bne.n	800759e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	3330      	adds	r3, #48	; 0x30
 8007564:	332a      	adds	r3, #42	; 0x2a
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fb7c 	bl	8005c64 <ld_word>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <find_volume+0x332>
 8007572:	230d      	movs	r3, #13
 8007574:	e0a8      	b.n	80076c8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	891b      	ldrh	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <find_volume+0x33e>
 800757e:	230d      	movs	r3, #13
 8007580:	e0a2      	b.n	80076c8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	3330      	adds	r3, #48	; 0x30
 8007586:	332c      	adds	r3, #44	; 0x2c
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fb83 	bl	8005c94 <ld_dword>
 800758e:	4602      	mov	r2, r0
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	647b      	str	r3, [r7, #68]	; 0x44
 800759c:	e01f      	b.n	80075de <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	891b      	ldrh	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <find_volume+0x366>
 80075a6:	230d      	movs	r3, #13
 80075a8:	e08e      	b.n	80076c8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	6a1a      	ldr	r2, [r3, #32]
 80075ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b0:	441a      	add	r2, r3
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d103      	bne.n	80075c6 <find_volume+0x382>
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	e00a      	b.n	80075dc <find_volume+0x398>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	4613      	mov	r3, r2
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4413      	add	r3, r2
 80075d0:	085a      	lsrs	r2, r3, #1
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80075dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80075e8:	0a5b      	lsrs	r3, r3, #9
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d201      	bcs.n	80075f2 <find_volume+0x3ae>
 80075ee:	230d      	movs	r3, #13
 80075f0:	e06a      	b.n	80076c8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	611a      	str	r2, [r3, #16]
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	2280      	movs	r2, #128	; 0x80
 8007606:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800760c:	2b03      	cmp	r3, #3
 800760e:	d149      	bne.n	80076a4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	3330      	adds	r3, #48	; 0x30
 8007614:	3330      	adds	r3, #48	; 0x30
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fb24 	bl	8005c64 <ld_word>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d140      	bne.n	80076a4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007624:	3301      	adds	r3, #1
 8007626:	4619      	mov	r1, r3
 8007628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800762a:	f7fe fdcb 	bl	80061c4 <move_window>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d137      	bne.n	80076a4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	2200      	movs	r2, #0
 8007638:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	3330      	adds	r3, #48	; 0x30
 800763e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fb0e 	bl	8005c64 <ld_word>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007650:	429a      	cmp	r2, r3
 8007652:	d127      	bne.n	80076a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	3330      	adds	r3, #48	; 0x30
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe fb1b 	bl	8005c94 <ld_dword>
 800765e:	4602      	mov	r2, r0
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <find_volume+0x48c>)
 8007662:	429a      	cmp	r2, r3
 8007664:	d11e      	bne.n	80076a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	3330      	adds	r3, #48	; 0x30
 800766a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fb10 	bl	8005c94 <ld_dword>
 8007674:	4602      	mov	r2, r0
 8007676:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <find_volume+0x490>)
 8007678:	429a      	cmp	r2, r3
 800767a:	d113      	bne.n	80076a4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	3330      	adds	r3, #48	; 0x30
 8007680:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fb05 	bl	8005c94 <ld_dword>
 800768a:	4602      	mov	r2, r0
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	3330      	adds	r3, #48	; 0x30
 8007694:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fafb 	bl	8005c94 <ld_dword>
 800769e:	4602      	mov	r2, r0
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80076aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <find_volume+0x494>)
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <find_volume+0x494>)
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <find_volume+0x494>)
 80076ba:	881a      	ldrh	r2, [r3, #0]
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80076c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076c2:	f7fe fd17 	bl	80060f4 <clear_lock>
#endif
	return FR_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3758      	adds	r7, #88	; 0x58
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	41615252 	.word	0x41615252
 80076d4:	61417272 	.word	0x61417272
 80076d8:	200000ac 	.word	0x200000ac

080076dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80076e6:	2309      	movs	r3, #9
 80076e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01c      	beq.n	800772a <validate+0x4e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d018      	beq.n	800772a <validate+0x4e>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d013      	beq.n	800772a <validate+0x4e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	889a      	ldrh	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	88db      	ldrh	r3, [r3, #6]
 800770c:	429a      	cmp	r2, r3
 800770e:	d10c      	bne.n	800772a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fa06 	bl	8005b28 <disk_status>
 800771c:	4603      	mov	r3, r0
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <validate+0x4e>
			res = FR_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <validate+0x5a>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	e000      	b.n	8007738 <validate+0x5c>
 8007736:	2300      	movs	r3, #0
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	6013      	str	r3, [r2, #0]
	return res;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800775a:	f107 0310 	add.w	r3, r7, #16
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fcd5 	bl	800710e <get_ldnumber>
 8007764:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da01      	bge.n	8007770 <f_mount+0x28>
 800776c:	230b      	movs	r3, #11
 800776e:	e02b      	b.n	80077c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007770:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <f_mount+0x88>)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007778:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007780:	69b8      	ldr	r0, [r7, #24]
 8007782:	f7fe fcb7 	bl	80060f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	490d      	ldr	r1, [pc, #52]	; (80077d0 <f_mount+0x88>)
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <f_mount+0x66>
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d001      	beq.n	80077b2 <f_mount+0x6a>
 80077ae:	2300      	movs	r3, #0
 80077b0:	e00a      	b.n	80077c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80077b2:	f107 010c 	add.w	r1, r7, #12
 80077b6:	f107 0308 	add.w	r3, r7, #8
 80077ba:	2200      	movs	r2, #0
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff fd41 	bl	8007244 <find_volume>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	200000a8 	.word	0x200000a8

080077d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b098      	sub	sp, #96	; 0x60
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <f_open+0x18>
 80077e8:	2309      	movs	r3, #9
 80077ea:	e1ad      	b.n	8007b48 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80077f4:	79fa      	ldrb	r2, [r7, #7]
 80077f6:	f107 0110 	add.w	r1, r7, #16
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fd20 	bl	8007244 <find_volume>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800780a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 8191 	bne.w	8007b36 <f_open+0x362>
		dj.obj.fs = fs;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f107 0314 	add.w	r3, r7, #20
 800781e:	4611      	mov	r1, r2
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fc03 	bl	800702c <follow_path>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800782c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007830:	2b00      	cmp	r3, #0
 8007832:	d11a      	bne.n	800786a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007834:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007838:	b25b      	sxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	da03      	bge.n	8007846 <f_open+0x72>
				res = FR_INVALID_NAME;
 800783e:	2306      	movs	r3, #6
 8007840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007844:	e011      	b.n	800786a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	bf14      	ite	ne
 8007850:	2301      	movne	r3, #1
 8007852:	2300      	moveq	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	f107 0314 	add.w	r3, r7, #20
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fb00 	bl	8005e64 <chk_lock>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	f003 031c 	and.w	r3, r3, #28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d07f      	beq.n	8007974 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007878:	2b00      	cmp	r3, #0
 800787a:	d017      	beq.n	80078ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800787c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007880:	2b04      	cmp	r3, #4
 8007882:	d10e      	bne.n	80078a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007884:	f7fe fb4a 	bl	8005f1c <enq_lock>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <f_open+0xc8>
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff fa86 	bl	8006da4 <dir_register>
 8007898:	4603      	mov	r3, r0
 800789a:	e000      	b.n	800789e <f_open+0xca>
 800789c:	2312      	movs	r3, #18
 800789e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f043 0308 	orr.w	r3, r3, #8
 80078a8:	71fb      	strb	r3, [r7, #7]
 80078aa:	e010      	b.n	80078ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80078ac:	7ebb      	ldrb	r3, [r7, #26]
 80078ae:	f003 0311 	and.w	r3, r3, #17
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <f_open+0xea>
					res = FR_DENIED;
 80078b6:	2307      	movs	r3, #7
 80078b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078bc:	e007      	b.n	80078ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <f_open+0xfa>
 80078c8:	2308      	movs	r3, #8
 80078ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80078ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d168      	bne.n	80079a8 <f_open+0x1d4>
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d063      	beq.n	80079a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80078e0:	f001 fe3c 	bl	800955c <get_fattime>
 80078e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	330e      	adds	r3, #14
 80078ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fa0f 	bl	8005d10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	3316      	adds	r3, #22
 80078f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fa09 	bl	8005d10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	330b      	adds	r3, #11
 8007902:	2220      	movs	r2, #32
 8007904:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff f958 	bl	8006bc2 <ld_clust>
 8007912:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007918:	2200      	movs	r2, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff f970 	bl	8006c00 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007922:	331c      	adds	r3, #28
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe f9f2 	bl	8005d10 <st_dword>
					fs->wflag = 1;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2201      	movs	r2, #1
 8007930:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d037      	beq.n	80079a8 <f_open+0x1d4>
						dw = fs->winsect;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800793e:	f107 0314 	add.w	r3, r7, #20
 8007942:	2200      	movs	r2, #0
 8007944:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fe83 	bl	8006652 <remove_chain>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d126      	bne.n	80079a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fc30 	bl	80061c4 <move_window>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800796e:	3a01      	subs	r2, #1
 8007970:	60da      	str	r2, [r3, #12]
 8007972:	e019      	b.n	80079a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007978:	2b00      	cmp	r3, #0
 800797a:	d115      	bne.n	80079a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800797c:	7ebb      	ldrb	r3, [r7, #26]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007986:	2304      	movs	r3, #4
 8007988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800798c:	e00c      	b.n	80079a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <f_open+0x1d4>
 8007998:	7ebb      	ldrb	r3, [r7, #26]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <f_open+0x1d4>
						res = FR_DENIED;
 80079a2:	2307      	movs	r3, #7
 80079a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80079a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d128      	bne.n	8007a02 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80079ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bf14      	ite	ne
 80079da:	2301      	movne	r3, #1
 80079dc:	2300      	moveq	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	f107 0314 	add.w	r3, r7, #20
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fab9 	bl	8005f60 <inc_lock>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <f_open+0x22e>
 80079fc:	2302      	movs	r3, #2
 80079fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007a02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f040 8095 	bne.w	8007b36 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff f8d5 	bl	8006bc2 <ld_clust>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	331c      	adds	r3, #28
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe f936 	bl	8005c94 <ld_dword>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	88da      	ldrh	r2, [r3, #6]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	79fa      	ldrb	r2, [r7, #7]
 8007a46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3330      	adds	r3, #48	; 0x30
 8007a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a62:	2100      	movs	r1, #0
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe f9a0 	bl	8005daa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d060      	beq.n	8007b36 <f_open+0x362>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d05c      	beq.n	8007b36 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	895b      	ldrh	r3, [r3, #10]
 8007a88:	025b      	lsls	r3, r3, #9
 8007a8a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	657b      	str	r3, [r7, #84]	; 0x54
 8007a98:	e016      	b.n	8007ac8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fc4b 	bl	800633a <get_fat>
 8007aa4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d802      	bhi.n	8007ab2 <f_open+0x2de>
 8007aac:	2302      	movs	r3, #2
 8007aae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d102      	bne.n	8007ac0 <f_open+0x2ec>
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d103      	bne.n	8007ad8 <f_open+0x304>
 8007ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d8e0      	bhi.n	8007a9a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007adc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d127      	bne.n	8007b36 <f_open+0x362>
 8007ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d022      	beq.n	8007b36 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fc01 	bl	80062fc <clust2sect>
 8007afa:	6478      	str	r0, [r7, #68]	; 0x44
 8007afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <f_open+0x336>
						res = FR_INT_ERR;
 8007b02:	2302      	movs	r3, #2
 8007b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007b08:	e015      	b.n	8007b36 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0c:	0a5a      	lsrs	r2, r3, #9
 8007b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	7858      	ldrb	r0, [r3, #1]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a1a      	ldr	r2, [r3, #32]
 8007b24:	2301      	movs	r3, #1
 8007b26:	f7fe f83f 	bl	8005ba8 <disk_read>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <f_open+0x362>
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <f_open+0x370>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3760      	adds	r7, #96	; 0x60
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	; 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f107 0210 	add.w	r2, r7, #16
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fdb3 	bl	80076dc <validate>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <f_write+0x44>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	7d5b      	ldrb	r3, [r3, #21]
 8007b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <f_write+0x4a>
 8007b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b98:	e14b      	b.n	8007e32 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	7d1b      	ldrb	r3, [r3, #20]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <f_write+0x5a>
 8007ba6:	2307      	movs	r3, #7
 8007ba8:	e143      	b.n	8007e32 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	441a      	add	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	f080 812d 	bcs.w	8007e16 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007bc4:	e127      	b.n	8007e16 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 80e3 	bne.w	8007d9a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	0a5b      	lsrs	r3, r3, #9
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	8952      	ldrh	r2, [r2, #10]
 8007bde:	3a01      	subs	r2, #1
 8007be0:	4013      	ands	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d143      	bne.n	8007c72 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10c      	bne.n	8007c0c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d11a      	bne.n	8007c34 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fd8a 	bl	800671c <create_chain>
 8007c08:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c0a:	e013      	b.n	8007c34 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7fe fe16 	bl	800684c <clmt_clust>
 8007c20:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c22:	e007      	b.n	8007c34 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fe fd75 	bl	800671c <create_chain>
 8007c32:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80f2 	beq.w	8007e20 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d104      	bne.n	8007c4c <f_write+0xfc>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2202      	movs	r2, #2
 8007c46:	755a      	strb	r2, [r3, #21]
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e0f2      	b.n	8007e32 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d104      	bne.n	8007c5e <f_write+0x10e>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	755a      	strb	r2, [r3, #21]
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e0e9      	b.n	8007e32 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c62:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <f_write+0x122>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c70:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	7d1b      	ldrb	r3, [r3, #20]
 8007c76:	b25b      	sxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da18      	bge.n	8007cae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	7858      	ldrb	r0, [r3, #1]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f7fd ffac 	bl	8005be8 <disk_write>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <f_write+0x150>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	755a      	strb	r2, [r3, #21]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e0c8      	b.n	8007e32 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	7d1b      	ldrb	r3, [r3, #20]
 8007ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7fe fb20 	bl	80062fc <clust2sect>
 8007cbc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <f_write+0x17e>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	755a      	strb	r2, [r3, #21]
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e0b1      	b.n	8007e32 <f_write+0x2e2>
			sect += csect;
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0a5b      	lsrs	r3, r3, #9
 8007cda:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d03c      	beq.n	8007d5c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	8952      	ldrh	r2, [r2, #10]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d905      	bls.n	8007cfc <f_write+0x1ac>
					cc = fs->csize - csect;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	895b      	ldrh	r3, [r3, #10]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	7858      	ldrb	r0, [r3, #1]
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	69f9      	ldr	r1, [r7, #28]
 8007d06:	f7fd ff6f 	bl	8005be8 <disk_write>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <f_write+0x1ca>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	755a      	strb	r2, [r3, #21]
 8007d16:	2301      	movs	r3, #1
 8007d18:	e08b      	b.n	8007e32 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a1a      	ldr	r2, [r3, #32]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d915      	bls.n	8007d54 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	025b      	lsls	r3, r3, #9
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7fe f811 	bl	8005d68 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	7d1b      	ldrb	r3, [r3, #20]
 8007d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	025b      	lsls	r3, r3, #9
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007d5a:	e03f      	b.n	8007ddc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d016      	beq.n	8007d94 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d210      	bcs.n	8007d94 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	7858      	ldrb	r0, [r3, #1]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	f7fd ff12 	bl	8005ba8 <disk_read>
 8007d84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	755a      	strb	r2, [r3, #21]
 8007d90:	2301      	movs	r3, #1
 8007d92:	e04e      	b.n	8007e32 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d901      	bls.n	8007db4 <f_write+0x264>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	4413      	add	r3, r2
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc6:	69f9      	ldr	r1, [r7, #28]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fd ffcd 	bl	8005d68 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	7d1b      	ldrb	r3, [r3, #20]
 8007dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	4413      	add	r3, r2
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	441a      	add	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	619a      	str	r2, [r3, #24]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	bf38      	it	cc
 8007dfc:	461a      	movcc	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	60da      	str	r2, [r3, #12]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	441a      	add	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f aed4 	bne.w	8007bc6 <f_write+0x76>
 8007e1e:	e000      	b.n	8007e22 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	7d1b      	ldrb	r3, [r3, #20]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3730      	adds	r7, #48	; 0x30
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b086      	sub	sp, #24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f107 0208 	add.w	r2, r7, #8
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fc46 	bl	80076dc <validate>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d168      	bne.n	8007f2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	7d1b      	ldrb	r3, [r3, #20]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d062      	beq.n	8007f2c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7d1b      	ldrb	r3, [r3, #20]
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	da15      	bge.n	8007e9c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	7858      	ldrb	r0, [r3, #1]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1a      	ldr	r2, [r3, #32]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f7fd feb2 	bl	8005be8 <disk_write>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <f_sync+0x54>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e04f      	b.n	8007f2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7d1b      	ldrb	r3, [r3, #20]
 8007e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e9c:	f001 fb5e 	bl	800955c <get_fattime>
 8007ea0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7fe f98a 	bl	80061c4 <move_window>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d138      	bne.n	8007f2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	330b      	adds	r3, #11
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	330b      	adds	r3, #11
 8007eca:	f042 0220 	orr.w	r2, r2, #32
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	461a      	mov	r2, r3
 8007edc:	68f9      	ldr	r1, [r7, #12]
 8007ede:	f7fe fe8f 	bl	8006c00 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f103 021c 	add.w	r2, r3, #28
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f7fd ff0e 	bl	8005d10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3316      	adds	r3, #22
 8007ef8:	6939      	ldr	r1, [r7, #16]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd ff08 	bl	8005d10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3312      	adds	r3, #18
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd fee7 	bl	8005cda <st_word>
					fs->wflag = 1;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe f983 	bl	8006220 <sync_fs>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7d1b      	ldrb	r3, [r3, #20]
 8007f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff ff7b 	bl	8007e3a <f_sync>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d118      	bne.n	8007f80 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f107 0208 	add.w	r2, r7, #8
 8007f54:	4611      	mov	r1, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff fbc0 	bl	80076dc <validate>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10c      	bne.n	8007f80 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe f886 	bl	800607c <dec_lock>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d102      	bne.n	8007f80 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b090      	sub	sp, #64	; 0x40
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007f94:	f107 010c 	add.w	r1, r7, #12
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff f951 	bl	8007244 <find_volume>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007fa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11f      	bne.n	8007ff0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	f107 030c 	add.w	r3, r7, #12
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff f837 	bl	800702c <follow_path>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d111      	bne.n	8007ff0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007fcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007fd0:	b25b      	sxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da03      	bge.n	8007fde <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007fd6:	2306      	movs	r3, #6
 8007fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007fdc:	e008      	b.n	8007ff0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <f_stat+0x66>
 8007fe4:	f107 030c 	add.w	r3, r7, #12
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe ff2a 	bl	8006e44 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3740      	adds	r7, #64	; 0x40
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b09e      	sub	sp, #120	; 0x78
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008008:	f107 010c 	add.w	r1, r7, #12
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	2202      	movs	r2, #2
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff f917 	bl	8007244 <find_volume>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8008020:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008024:	2b00      	cmp	r3, #0
 8008026:	f040 808e 	bne.w	8008146 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fffa 	bl	800702c <follow_path>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800803e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008042:	2b00      	cmp	r3, #0
 8008044:	d108      	bne.n	8008058 <f_unlink+0x5c>
 8008046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800804a:	2102      	movs	r1, #2
 800804c:	4618      	mov	r0, r3
 800804e:	f7fd ff09 	bl	8005e64 <chk_lock>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008058:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800805c:	2b00      	cmp	r3, #0
 800805e:	d172      	bne.n	8008146 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008060:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008064:	b25b      	sxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	da03      	bge.n	8008072 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800806a:	2306      	movs	r3, #6
 800806c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008070:	e008      	b.n	8008084 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008072:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800807e:	2307      	movs	r3, #7
 8008080:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008084:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008088:	2b00      	cmp	r3, #0
 800808a:	d134      	bne.n	80080f6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd95 	bl	8006bc2 <ld_clust>
 8008098:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800809a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d027      	beq.n	80080f6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80080aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ac:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80080ae:	f107 0310 	add.w	r3, r7, #16
 80080b2:	2100      	movs	r1, #0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fbfd 	bl	80068b4 <dir_sdi>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80080c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d116      	bne.n	80080f6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80080c8:	f107 0310 	add.w	r3, r7, #16
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe fdb6 	bl	8006c40 <dir_read>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80080da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <f_unlink+0xec>
 80080e2:	2307      	movs	r3, #7
 80080e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80080e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d102      	bne.n	80080f6 <f_unlink+0xfa>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80080f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d123      	bne.n	8008146 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80080fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fe80 	bl	8006e08 <dir_remove>
 8008108:	4603      	mov	r3, r0
 800810a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800810e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10c      	bne.n	8008130 <f_unlink+0x134>
 8008116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800811c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008120:	2200      	movs	r2, #0
 8008122:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe fa94 	bl	8006652 <remove_chain>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008130:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <f_unlink+0x14a>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe f870 	bl	8006220 <sync_fs>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008146:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800814a:	4618      	mov	r0, r3
 800814c:	3778      	adds	r7, #120	; 0x78
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b096      	sub	sp, #88	; 0x58
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800815a:	f107 0108 	add.w	r1, r7, #8
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	2202      	movs	r2, #2
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff f86e 	bl	8007244 <find_volume>
 8008168:	4603      	mov	r3, r0
 800816a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008172:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 80ec 	bne.w	8008354 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe ff51 	bl	800702c <follow_path>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8008190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <f_mkdir+0x4c>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800819e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	f040 80d6 	bne.w	8008354 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fab4 	bl	800671c <create_chain>
 80081b4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	895b      	ldrh	r3, [r3, #10]
 80081ba:	025b      	lsls	r3, r3, #9
 80081bc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80081c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <f_mkdir+0x7e>
 80081ca:	2307      	movs	r3, #7
 80081cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80081d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d102      	bne.n	80081dc <f_mkdir+0x8a>
 80081d6:	2302      	movs	r3, #2
 80081d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e2:	d102      	bne.n	80081ea <f_mkdir+0x98>
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80081ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <f_mkdir+0xae>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fd ffa1 	bl	800613c <sync_window>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8008200:	f001 f9ac 	bl	800955c <get_fattime>
 8008204:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8008206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800820a:	2b00      	cmp	r3, #0
 800820c:	d16a      	bne.n	80082e4 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe f872 	bl	80062fc <clust2sect>
 8008218:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3330      	adds	r3, #48	; 0x30
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8008220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008224:	2100      	movs	r1, #0
 8008226:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008228:	f7fd fdbf 	bl	8005daa <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800822c:	220b      	movs	r2, #11
 800822e:	2120      	movs	r1, #32
 8008230:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008232:	f7fd fdba 	bl	8005daa <mem_set>
					dir[DIR_Name] = '.';
 8008236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008238:	222e      	movs	r2, #46	; 0x2e
 800823a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	330b      	adds	r3, #11
 8008240:	2210      	movs	r2, #16
 8008242:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8008244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008246:	3316      	adds	r3, #22
 8008248:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800824a:	4618      	mov	r0, r3
 800824c:	f7fd fd60 	bl	8005d10 <st_dword>
					st_clust(fs, dir, dcl);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fcd2 	bl	8006c00 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800825c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825e:	3320      	adds	r3, #32
 8008260:	2220      	movs	r2, #32
 8008262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008264:	4618      	mov	r0, r3
 8008266:	f7fd fd7f 	bl	8005d68 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800826a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826c:	3321      	adds	r3, #33	; 0x21
 800826e:	222e      	movs	r2, #46	; 0x2e
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b03      	cmp	r3, #3
 800827c:	d106      	bne.n	800828c <f_mkdir+0x13a>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008284:	429a      	cmp	r2, r3
 8008286:	d101      	bne.n	800828c <f_mkdir+0x13a>
 8008288:	2300      	movs	r3, #0
 800828a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008290:	3320      	adds	r3, #32
 8008292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008294:	4619      	mov	r1, r3
 8008296:	f7fe fcb3 	bl	8006c00 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	895b      	ldrh	r3, [r3, #10]
 800829e:	653b      	str	r3, [r7, #80]	; 0x50
 80082a0:	e01b      	b.n	80082da <f_mkdir+0x188>
					fs->winsect = dsc++;
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2201      	movs	r2, #1
 80082b0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fd ff41 	bl	800613c <sync_window>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80082c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10c      	bne.n	80082e2 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80082c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082cc:	2100      	movs	r1, #0
 80082ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082d0:	f7fd fd6b 	bl	8005daa <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80082d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d6:	3b01      	subs	r3, #1
 80082d8:	653b      	str	r3, [r7, #80]	; 0x50
 80082da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e0      	bne.n	80082a2 <f_mkdir+0x150>
 80082e0:	e000      	b.n	80082e4 <f_mkdir+0x192>
					if (res != FR_OK) break;
 80082e2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80082e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d107      	bne.n	80082fc <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fd57 	bl	8006da4 <dir_register>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80082fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008300:	2b00      	cmp	r3, #0
 8008302:	d120      	bne.n	8008346 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830a:	3316      	adds	r3, #22
 800830c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800830e:	4618      	mov	r0, r3
 8008310:	f7fd fcfe 	bl	8005d10 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fc70 	bl	8006c00 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008322:	330b      	adds	r3, #11
 8008324:	2210      	movs	r2, #16
 8008326:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2201      	movs	r2, #1
 800832c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800832e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10e      	bne.n	8008354 <f_mkdir+0x202>
					res = sync_fs(fs);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	4618      	mov	r0, r3
 800833a:	f7fd ff71 	bl	8006220 <sync_fs>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008344:	e006      	b.n	8008354 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	2200      	movs	r2, #0
 800834c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe f97f 	bl	8006652 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8008358:	4618      	mov	r0, r3
 800835a:	3758      	adds	r7, #88	; 0x58
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	2b0a      	cmp	r3, #10
 8008370:	d103      	bne.n	800837a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008372:	210d      	movs	r1, #13
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff fff3 	bl	8008360 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	db25      	blt.n	80083d2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	60fa      	str	r2, [r7, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b3c      	cmp	r3, #60	; 0x3c
 8008398:	dd12      	ble.n	80083c0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f103 010c 	add.w	r1, r3, #12
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f107 0308 	add.w	r3, r7, #8
 80083aa:	f7ff fbd1 	bl	8007b50 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d101      	bne.n	80083ba <putc_bfd+0x5a>
 80083b6:	2300      	movs	r3, #0
 80083b8:	e001      	b.n	80083be <putc_bfd+0x5e>
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	609a      	str	r2, [r3, #8]
 80083d0:	e000      	b.n	80083d4 <putc_bfd+0x74>
	if (i < 0) return;
 80083d2:	bf00      	nop
}
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db17      	blt.n	800841a <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f103 010c 	add.w	r1, r3, #12
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	461a      	mov	r2, r3
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	f7ff fba7 	bl	8007b50 <f_write>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d108      	bne.n	800841a <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	461a      	mov	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	429a      	cmp	r2, r3
 8008412:	d102      	bne.n	800841a <putc_flush+0x40>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	e001      	b.n	800841e <putc_flush+0x44>
	return EOF;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	605a      	str	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	609a      	str	r2, [r3, #8]
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008450:	b40e      	push	{r1, r2, r3}
 8008452:	b580      	push	{r7, lr}
 8008454:	b0a7      	sub	sp, #156	; 0x9c
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800845a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ffe0 	bl	8008426 <putc_init>

	va_start(arp, fmt);
 8008466:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800846a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800846c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800847c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 81f4 	beq.w	800886e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8008486:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800848a:	2b25      	cmp	r3, #37	; 0x25
 800848c:	d008      	beq.n	80084a0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800848e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff ff61 	bl	8008360 <putc_bfd>
			continue;
 800849e:	e1e5      	b.n	800886c <f_printf+0x41c>
		}
		w = f = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80084a6:	2300      	movs	r3, #0
 80084a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80084ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80084bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084c0:	2b30      	cmp	r3, #48	; 0x30
 80084c2:	d10b      	bne.n	80084dc <f_printf+0x8c>
			f = 1; c = *fmt++;
 80084c4:	2301      	movs	r3, #1
 80084c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80084ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80084da:	e024      	b.n	8008526 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80084dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084e0:	2b2d      	cmp	r3, #45	; 0x2d
 80084e2:	d120      	bne.n	8008526 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80084e4:	2302      	movs	r3, #2
 80084e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80084ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80084fa:	e014      	b.n	8008526 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80084fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	461a      	mov	r2, r3
 800850a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800850e:	4413      	add	r3, r2
 8008510:	3b30      	subs	r3, #48	; 0x30
 8008512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8008516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8008526:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800852a:	2b2f      	cmp	r3, #47	; 0x2f
 800852c:	d903      	bls.n	8008536 <f_printf+0xe6>
 800852e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008532:	2b39      	cmp	r3, #57	; 0x39
 8008534:	d9e2      	bls.n	80084fc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008536:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800853a:	2b6c      	cmp	r3, #108	; 0x6c
 800853c:	d003      	beq.n	8008546 <f_printf+0xf6>
 800853e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008542:	2b4c      	cmp	r3, #76	; 0x4c
 8008544:	d10d      	bne.n	8008562 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8008546:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800854a:	f043 0304 	orr.w	r3, r3, #4
 800854e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008562:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 8183 	beq.w	8008872 <f_printf+0x422>
		d = c;
 800856c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008570:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008574:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008578:	2b60      	cmp	r3, #96	; 0x60
 800857a:	d908      	bls.n	800858e <f_printf+0x13e>
 800857c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008580:	2b7a      	cmp	r3, #122	; 0x7a
 8008582:	d804      	bhi.n	800858e <f_printf+0x13e>
 8008584:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008588:	3b20      	subs	r3, #32
 800858a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800858e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008592:	3b42      	subs	r3, #66	; 0x42
 8008594:	2b16      	cmp	r3, #22
 8008596:	f200 8098 	bhi.w	80086ca <f_printf+0x27a>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <f_printf+0x150>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080086ab 	.word	0x080086ab
 80085a4:	08008693 	.word	0x08008693
 80085a8:	080086bb 	.word	0x080086bb
 80085ac:	080086cb 	.word	0x080086cb
 80085b0:	080086cb 	.word	0x080086cb
 80085b4:	080086cb 	.word	0x080086cb
 80085b8:	080086cb 	.word	0x080086cb
 80085bc:	080086cb 	.word	0x080086cb
 80085c0:	080086cb 	.word	0x080086cb
 80085c4:	080086cb 	.word	0x080086cb
 80085c8:	080086cb 	.word	0x080086cb
 80085cc:	080086cb 	.word	0x080086cb
 80085d0:	080086cb 	.word	0x080086cb
 80085d4:	080086b3 	.word	0x080086b3
 80085d8:	080086cb 	.word	0x080086cb
 80085dc:	080086cb 	.word	0x080086cb
 80085e0:	080086cb 	.word	0x080086cb
 80085e4:	080085fd 	.word	0x080085fd
 80085e8:	080086cb 	.word	0x080086cb
 80085ec:	080086bb 	.word	0x080086bb
 80085f0:	080086cb 	.word	0x080086cb
 80085f4:	080086cb 	.word	0x080086cb
 80085f8:	080086c3 	.word	0x080086c3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80085fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	67ba      	str	r2, [r7, #120]	; 0x78
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008606:	2300      	movs	r3, #0
 8008608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800860c:	e004      	b.n	8008618 <f_printf+0x1c8>
 800860e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008612:	3301      	adds	r3, #1
 8008614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008618:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800861a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800861e:	4413      	add	r3, r2
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f3      	bne.n	800860e <f_printf+0x1be>
			if (!(f & 2)) {
 8008626:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d11a      	bne.n	8008668 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008632:	e005      	b.n	8008640 <f_printf+0x1f0>
 8008634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008638:	2120      	movs	r1, #32
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fe90 	bl	8008360 <putc_bfd>
 8008640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800864a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800864e:	429a      	cmp	r2, r3
 8008650:	d8f0      	bhi.n	8008634 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008652:	e009      	b.n	8008668 <f_printf+0x218>
 8008654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	67fa      	str	r2, [r7, #124]	; 0x7c
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fe7c 	bl	8008360 <putc_bfd>
 8008668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f1      	bne.n	8008654 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008670:	e005      	b.n	800867e <f_printf+0x22e>
 8008672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008676:	2120      	movs	r1, #32
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fe71 	bl	8008360 <putc_bfd>
 800867e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008688:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800868c:	429a      	cmp	r2, r3
 800868e:	d8f0      	bhi.n	8008672 <f_printf+0x222>
			continue;
 8008690:	e0ec      	b.n	800886c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	67ba      	str	r2, [r7, #120]	; 0x78
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fe5c 	bl	8008360 <putc_bfd>
 80086a8:	e0e0      	b.n	800886c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 80086aa:	2302      	movs	r3, #2
 80086ac:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80086b0:	e014      	b.n	80086dc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80086b2:	2308      	movs	r3, #8
 80086b4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80086b8:	e010      	b.n	80086dc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80086ba:	230a      	movs	r3, #10
 80086bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80086c0:	e00c      	b.n	80086dc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80086c2:	2310      	movs	r3, #16
 80086c4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80086c8:	e008      	b.n	80086dc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80086ca:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80086ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fe43 	bl	8008360 <putc_bfd>
 80086da:	e0c7      	b.n	800886c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80086dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <f_printf+0x2a2>
 80086e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ea:	1d1a      	adds	r2, r3, #4
 80086ec:	67ba      	str	r2, [r7, #120]	; 0x78
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	e00c      	b.n	800870c <f_printf+0x2bc>
 80086f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80086f6:	2b44      	cmp	r3, #68	; 0x44
 80086f8:	d104      	bne.n	8008704 <f_printf+0x2b4>
 80086fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086fc:	1d1a      	adds	r2, r3, #4
 80086fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	e003      	b.n	800870c <f_printf+0x2bc>
 8008704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	67ba      	str	r2, [r7, #120]	; 0x78
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008710:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008714:	2b44      	cmp	r3, #68	; 0x44
 8008716:	d10e      	bne.n	8008736 <f_printf+0x2e6>
 8008718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800871c:	2b00      	cmp	r3, #0
 800871e:	da0a      	bge.n	8008736 <f_printf+0x2e6>
			v = 0 - v;
 8008720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008724:	425b      	negs	r3, r3
 8008726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800872a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800872e:	f043 0308 	orr.w	r3, r3, #8
 8008732:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800873c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008744:	fbb3 f1f2 	udiv	r1, r3, r2
 8008748:	fb02 f201 	mul.w	r2, r2, r1
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008752:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008756:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800875a:	fbb2 f3f3 	udiv	r3, r2, r3
 800875e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008762:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008766:	2b09      	cmp	r3, #9
 8008768:	d90b      	bls.n	8008782 <f_printf+0x332>
 800876a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800876e:	2b78      	cmp	r3, #120	; 0x78
 8008770:	d101      	bne.n	8008776 <f_printf+0x326>
 8008772:	2227      	movs	r2, #39	; 0x27
 8008774:	e000      	b.n	8008778 <f_printf+0x328>
 8008776:	2207      	movs	r2, #7
 8008778:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800877c:	4413      	add	r3, r2
 800877e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800878c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008790:	3230      	adds	r2, #48	; 0x30
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008798:	440b      	add	r3, r1
 800879a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800879e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <f_printf+0x35e>
 80087a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087aa:	2b1f      	cmp	r3, #31
 80087ac:	d9c6      	bls.n	800873c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80087ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <f_printf+0x380>
 80087ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80087c4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80087c8:	4413      	add	r3, r2
 80087ca:	222d      	movs	r2, #45	; 0x2d
 80087cc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80087d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <f_printf+0x398>
 80087e4:	2330      	movs	r3, #48	; 0x30
 80087e6:	e000      	b.n	80087ea <f_printf+0x39a>
 80087e8:	2320      	movs	r3, #32
 80087ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80087ee:	e007      	b.n	8008800 <f_printf+0x3b0>
 80087f0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80087f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fdb0 	bl	8008360 <putc_bfd>
 8008800:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <f_printf+0x3ce>
 800880c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008816:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800881a:	429a      	cmp	r2, r3
 800881c:	d8e8      	bhi.n	80087f0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800881e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008822:	3b01      	subs	r3, #1
 8008824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008828:	f107 020c 	add.w	r2, r7, #12
 800882c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008830:	4413      	add	r3, r2
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008838:	4611      	mov	r1, r2
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fd90 	bl	8008360 <putc_bfd>
		} while (i);
 8008840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ea      	bne.n	800881e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8008848:	e007      	b.n	800885a <f_printf+0x40a>
 800884a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800884e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fd83 	bl	8008360 <putc_bfd>
 800885a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008864:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008868:	429a      	cmp	r2, r3
 800886a:	d8ee      	bhi.n	800884a <f_printf+0x3fa>
		c = *fmt++;
 800886c:	e5fe      	b.n	800846c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800886e:	bf00      	nop
 8008870:	e000      	b.n	8008874 <f_printf+0x424>
		if (!c) break;
 8008872:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fdae 	bl	80083da <putc_flush>
 800887e:	4603      	mov	r3, r0
}
 8008880:	4618      	mov	r0, r3
 8008882:	379c      	adds	r7, #156	; 0x9c
 8008884:	46bd      	mov	sp, r7
 8008886:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800888a:	b003      	add	sp, #12
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop

08008890 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80088a6:	4b1f      	ldr	r3, [pc, #124]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088a8:	7a5b      	ldrb	r3, [r3, #9]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d131      	bne.n	8008914 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80088b0:	4b1c      	ldr	r3, [pc, #112]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088b2:	7a5b      	ldrb	r3, [r3, #9]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088ba:	2100      	movs	r1, #0
 80088bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80088be:	4b19      	ldr	r3, [pc, #100]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088c0:	7a5b      	ldrb	r3, [r3, #9]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4a17      	ldr	r2, [pc, #92]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088d0:	7a5b      	ldrb	r3, [r3, #9]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b13      	ldr	r3, [pc, #76]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088d8:	4413      	add	r3, r2
 80088da:	79fa      	ldrb	r2, [r7, #7]
 80088dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088e0:	7a5b      	ldrb	r3, [r3, #9]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	b2d1      	uxtb	r1, r2
 80088e8:	4a0e      	ldr	r2, [pc, #56]	; (8008924 <FATFS_LinkDriverEx+0x94>)
 80088ea:	7251      	strb	r1, [r2, #9]
 80088ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80088ee:	7dbb      	ldrb	r3, [r7, #22]
 80088f0:	3330      	adds	r3, #48	; 0x30
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	3301      	adds	r3, #1
 80088fc:	223a      	movs	r2, #58	; 0x3a
 80088fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	3302      	adds	r3, #2
 8008904:	222f      	movs	r2, #47	; 0x2f
 8008906:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	3303      	adds	r3, #3
 800890c:	2200      	movs	r2, #0
 800890e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
}
 8008916:	4618      	mov	r0, r3
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	200000d0 	.word	0x200000d0

08008928 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008932:	2200      	movs	r2, #0
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff ffaa 	bl	8008890 <FATFS_LinkDriverEx>
 800893c:	4603      	mov	r3, r0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <_ZNK7LTC681113WakeFromSleepEv>:
    ADSTAT[3] = static_cast<uint8_t>(PEC);

    WakeFromSleep(); // NOTE: Takes 2.2s to fall asleep so if this has to be called after this, we have problems
}

void LTC6811::WakeFromSleep() const noexcept {
 8008948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4f27      	ldr	r7, [pc, #156]	; (80089ec <_ZNK7LTC681113WakeFromSleepEv+0xa4>)
 800894e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80089f8 <_ZNK7LTC681113WakeFromSleepEv+0xb0>
    static constexpr uint16_t kMaxWakeTime{ 400 }; // Time in us

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008952:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80089fc <_ZNK7LTC681113WakeFromSleepEv+0xb4>
    void operator=(DWTWrapper const&)   = delete;

    [[nodiscard]] static const DWTWrapper& getInstance() noexcept {
        static const DWTWrapper dwtSingleton;

        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008956:	4d26      	ldr	r5, [pc, #152]	; (80089f0 <_ZNK7LTC681113WakeFromSleepEv+0xa8>)
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008958:	4c26      	ldr	r4, [pc, #152]	; (80089f4 <_ZNK7LTC681113WakeFromSleepEv+0xac>)
        return dwtSingleton;
    }

    void delay(uint32_t const microseconds) const noexcept {
        uint32_t const startTicks = DWT->CYCCNT;
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 800895a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008a00 <_ZNK7LTC681113WakeFromSleepEv+0xb8>
void LTC6811::WakeFromSleep() const noexcept {
 800895e:	260c      	movs	r6, #12
        static const DWTWrapper dwtSingleton;
 8008960:	f04f 0a01 	mov.w	sl, #1
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008964:	2200      	movs	r2, #0
 8008966:	2120      	movs	r1, #32
 8008968:	4648      	mov	r0, r9
 800896a:	f7f8 ff15 	bl	8001798 <HAL_GPIO_WritePin>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	07da      	lsls	r2, r3, #31
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008972:	68eb      	ldr	r3, [r5, #12]
        static const DWTWrapper dwtSingleton;
 8008974:	bf58      	it	pl
 8008976:	f8c7 a000 	strpl.w	sl, [r7]
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800897a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800897e:	60eb      	str	r3, [r5, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	6023      	str	r3, [r4, #0]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8008988:	f8db 2000 	ldr.w	r2, [fp]
        uint32_t const startTicks = DWT->CYCCNT;
 800898c:	6861      	ldr	r1, [r4, #4]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 800898e:	fba8 3202 	umull	r3, r2, r8, r2
 8008992:	0c93      	lsrs	r3, r2, #18
 8008994:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008998:	fb02 f203 	mul.w	r2, r2, r3

        while (DWT->CYCCNT - startTicks < delayTicks);
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	1a5b      	subs	r3, r3, r1
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d8fb      	bhi.n	800899c <_ZNK7LTC681113WakeFromSleepEv+0x54>
        DWTWrapper::getInstance().delay(kMaxWakeTime); // Guarantees the LTC6811 will be in standby
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80089a4:	2201      	movs	r2, #1
 80089a6:	2120      	movs	r1, #32
 80089a8:	4648      	mov	r0, r9
 80089aa:	f7f8 fef5 	bl	8001798 <HAL_GPIO_WritePin>
        static const DWTWrapper dwtSingleton;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	07db      	lsls	r3, r3, #31
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80089b2:	68eb      	ldr	r3, [r5, #12]
        static const DWTWrapper dwtSingleton;
 80089b4:	bf58      	it	pl
 80089b6:	f8c7 a000 	strpl.w	sl, [r7]
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80089ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089be:	60eb      	str	r3, [r5, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6023      	str	r3, [r4, #0]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 80089c8:	f8db 2000 	ldr.w	r2, [fp]
        uint32_t const startTicks = DWT->CYCCNT;
 80089cc:	6861      	ldr	r1, [r4, #4]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 80089ce:	fba8 3202 	umull	r3, r2, r8, r2
 80089d2:	0c92      	lsrs	r2, r2, #18
 80089d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80089d8:	0052      	lsls	r2, r2, #1
        while (DWT->CYCCNT - startTicks < delayTicks);
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	1a5b      	subs	r3, r3, r1
 80089de:	429a      	cmp	r2, r3
 80089e0:	d8fb      	bhi.n	80089da <_ZNK7LTC681113WakeFromSleepEv+0x92>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 80089e2:	3e01      	subs	r6, #1
 80089e4:	d1be      	bne.n	8008964 <_ZNK7LTC681113WakeFromSleepEv+0x1c>
        DWTWrapper::getInstance().delay(10);
    }
}
 80089e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	bf00      	nop
 80089ec:	200000dc 	.word	0x200000dc
 80089f0:	e000edf0 	.word	0xe000edf0
 80089f4:	e0001000 	.word	0xe0001000
 80089f8:	20000024 	.word	0x20000024
 80089fc:	40020000 	.word	0x40020000
 8008a00:	431bde83 	.word	0x431bde83

08008a04 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>:
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t md_bits = (mode & 0x02) >> 1;
 8008a08:	f3c2 0740 	ubfx	r7, r2, #1, #1
    ADAX[0]   = 0x04 | md_bits;
 8008a0c:	f047 0c04 	orr.w	ip, r7, #4
        uint16_t PEC{ 16 }, addr{ 0 };
        auto serialized = reinterpret_cast<uint8_t const *>(data.data());

        for (uint8_t i = 0; i < size; ++i) {
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
            PEC = PEC << 8 ^ crc15Table[addr];
 8008a10:	4d36      	ldr	r5, [pc, #216]	; (8008aec <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0xe8>)
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008a12:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8008a16:	f835 901c 	ldrh.w	r9, [r5, ip, lsl #1]
 8008a1a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8008a1e:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    ADAX[0]   = 0x04 | md_bits;
 8008a22:	f880 c36a 	strb.w	ip, [r0, #874]	; 0x36a
    ADCV[0]   = 0x02 | md_bits;
 8008a26:	f047 0702 	orr.w	r7, r7, #2
    md_bits   = (mode & 0x01) << 7;
 8008a2a:	01d6      	lsls	r6, r2, #7
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008a2c:	f044 0460 	orr.w	r4, r4, #96	; 0x60
    md_bits   = (mode & 0x01) << 7;
 8008a30:	b2f6      	uxtb	r6, r6
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008a32:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 8008a36:	f835 4017 	ldrh.w	r4, [r5, r7, lsl #1]
    ADCV[0]   = 0x02 | md_bits;
 8008a3a:	f880 7366 	strb.w	r7, [r0, #870]	; 0x366
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008a3e:	f489 5280 	eor.w	r2, r9, #4096	; 0x1000
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008a42:	4333      	orrs	r3, r6
    ADSTAT[1] = md_bits | 0x68 | sts;
 8008a44:	f048 0968 	orr.w	r9, r8, #104	; 0x68
    ADAX[1]   = md_bits | 0x60 | aux;
 8008a48:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 8008a4c:	ea46 0e0e 	orr.w	lr, r6, lr
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008a50:	b2db      	uxtb	r3, r3
    ADSTAT[1] = md_bits | 0x68 | sts;
 8008a52:	ea46 0609 	orr.w	r6, r6, r9
 8008a56:	ea4f 18d2 	mov.w	r8, r2, lsr #7
 8008a5a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8008a5e:	ea83 1ad4 	eor.w	sl, r3, r4, lsr #7
 8008a62:	ea88 0b0e 	eor.w	fp, r8, lr
 8008a66:	ea88 0806 	eor.w	r8, r8, r6
            PEC = PEC << 8 ^ crc15Table[addr];
 8008a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8008a6e:	fa5f f988 	uxtb.w	r9, r8
 8008a72:	fa5f fa8a 	uxtb.w	sl, sl
 8008a76:	f835 801b 	ldrh.w	r8, [r5, fp, lsl #1]
 8008a7a:	f835 9019 	ldrh.w	r9, [r5, r9, lsl #1]
 8008a7e:	f835 501a 	ldrh.w	r5, [r5, sl, lsl #1]
    ADAX[1]   = md_bits | 0x60 | aux;
 8008a82:	f880 e36b 	strb.w	lr, [r0, #875]	; 0x36b
 8008a86:	0212      	lsls	r2, r2, #8
 8008a88:	b212      	sxth	r2, r2
 8008a8a:	ea82 0808 	eor.w	r8, r2, r8
 8008a8e:	ea85 2504 	eor.w	r5, r5, r4, lsl #8
 8008a92:	ea82 0209 	eor.w	r2, r2, r9
        }

        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008a96:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008a9a:	0052      	lsls	r2, r2, #1
 8008a9c:	006d      	lsls	r5, r5, #1
 8008a9e:	b292      	uxth	r2, r2
 8008aa0:	fa1f f888 	uxth.w	r8, r8
 8008aa4:	b2ad      	uxth	r5, r5
    ADSTAT[2] = static_cast<uint8_t>(PEC >> 8);
 8008aa6:	ea4f 2922 	mov.w	r9, r2, asr #8
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008aaa:	f04f 0e00 	mov.w	lr, #0
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
 8008aae:	ea4f 2a28 	mov.w	sl, r8, asr #8
    ADCV[2] = static_cast<uint8_t>(PEC >> 8);
 8008ab2:	ea4f 2b25 	mov.w	fp, r5, asr #8
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008ab6:	4604      	mov	r4, r0
    ADAX[3] = static_cast<uint8_t>(PEC);
 8008ab8:	f880 836d 	strb.w	r8, [r0, #877]	; 0x36d
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
 8008abc:	f880 a36c 	strb.w	sl, [r0, #876]	; 0x36c
    ADSTAT[3] = static_cast<uint8_t>(PEC);
 8008ac0:	f880 2371 	strb.w	r2, [r0, #881]	; 0x371
    ADSTAT[2] = static_cast<uint8_t>(PEC >> 8);
 8008ac4:	f880 9370 	strb.w	r9, [r0, #880]	; 0x370
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008ac8:	f880 3367 	strb.w	r3, [r0, #871]	; 0x367
    ADSTAT[1] = md_bits | 0x68 | sts;
 8008acc:	f880 636f 	strb.w	r6, [r0, #879]	; 0x36f
    ADCV[3] = static_cast<uint8_t>(PEC);
 8008ad0:	f880 5369 	strb.w	r5, [r0, #873]	; 0x369
    ADCV[2] = static_cast<uint8_t>(PEC >> 8);
 8008ad4:	f880 b368 	strb.w	fp, [r0, #872]	; 0x368
    ADSTAT[0] = 0x04 | md_bits;
 8008ad8:	f880 c36e 	strb.w	ip, [r0, #878]	; 0x36e
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008adc:	6001      	str	r1, [r0, #0]
 8008ade:	f880 e004 	strb.w	lr, [r0, #4]
    WakeFromSleep(); // NOTE: Takes 2.2s to fall asleep so if this has to be called after this, we have problems
 8008ae2:	f7ff ff31 	bl	8008948 <_ZNK7LTC681113WakeFromSleepEv>
}
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	0800b5d0 	.word	0x0800b5d0

08008af0 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE>:

    return readRegisterGroup(kCommand, slave_cfg_rx);
}

/* Write to the configuration register group of an LTC6811 daisy chain. */
bool LTC6811::writeConfigRegisterGroup(RegisterGroup<uint8_t> const& cfg_register_group) noexcept {
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008af2:	4e6c      	ldr	r6, [pc, #432]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
bool LTC6811::writeConfigRegisterGroup(RegisterGroup<uint8_t> const& cfg_register_group) noexcept {
 8008af4:	4605      	mov	r5, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	240c      	movs	r4, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008afa:	2200      	movs	r2, #0
 8008afc:	2120      	movs	r1, #32
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7f8 fe4a 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8008b04:	f04f 33ff 	mov.w	r3, #4294967295
 8008b08:	2201      	movs	r2, #1
 8008b0a:	4967      	ldr	r1, [pc, #412]	; (8008ca8 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b8>)
 8008b0c:	6828      	ldr	r0, [r5, #0]
 8008b0e:	f7fb f80f 	bl	8003b30 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008b12:	2201      	movs	r2, #1
 8008b14:	2120      	movs	r1, #32
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7f8 fe3e 	bl	8001798 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8008b1c:	3c01      	subs	r4, #1
 8008b1e:	d1ec      	bne.n	8008afa <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0xa>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008b20:	4622      	mov	r2, r4
 8008b22:	2120      	movs	r1, #32
 8008b24:	485f      	ldr	r0, [pc, #380]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008b26:	f7f8 fe37 	bl	8001798 <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK &&
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	2204      	movs	r2, #4
 8008b30:	495e      	ldr	r1, [pc, #376]	; (8008cac <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1bc>)
 8008b32:	6828      	ldr	r0, [r5, #0]
 8008b34:	f7fa fffc 	bl	8003b30 <HAL_SPI_Transmit>
 8008b38:	b938      	cbnz	r0, 8008b4a <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x5a>
                HAL_SPI_Transmit(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b40:	2260      	movs	r2, #96	; 0x60
 8008b42:	6828      	ldr	r0, [r5, #0]
 8008b44:	f7fa fff4 	bl	8003b30 <HAL_SPI_Transmit>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK &&
 8008b48:	b130      	cbz	r0, 8008b58 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x68>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	2120      	movs	r1, #32
 8008b4e:	4855      	ldr	r0, [pc, #340]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008b50:	f7f8 fe22 	bl	8001798 <HAL_GPIO_WritePin>
        /* Funky place to do this, but fixing this would require substantially reworking the whole class.
         * The purpose is to read back the config register after writing to it to check that it was written to properly, apparently. */
        readConfigRegisterGroup();
        return Success;
    } else {
        return Fail;
 8008b54:	2001      	movs	r0, #1
    }
}
 8008b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008b58:	2201      	movs	r2, #1
 8008b5a:	2120      	movs	r1, #32
 8008b5c:	4851      	ldr	r0, [pc, #324]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008b5e:	f7f8 fe1b 	bl	8001798 <HAL_GPIO_WritePin>
        static const DWTWrapper dwtSingleton;
 8008b62:	4b53      	ldr	r3, [pc, #332]	; (8008cb0 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1c0>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	07d2      	lsls	r2, r2, #31
 8008b68:	f140 8098 	bpl.w	8008c9c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1ac>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008b6c:	4c51      	ldr	r4, [pc, #324]	; (8008cb4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1c4>)
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008b6e:	4a52      	ldr	r2, [pc, #328]	; (8008cb8 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1c8>)
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008b70:	68e0      	ldr	r0, [r4, #12]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8008b72:	4952      	ldr	r1, [pc, #328]	; (8008cbc <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1cc>)
 8008b74:	4b52      	ldr	r3, [pc, #328]	; (8008cc0 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1d0>)
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008b76:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8008b7a:	60e0      	str	r0, [r4, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008b7c:	6810      	ldr	r0, [r2, #0]
 8008b7e:	f040 0001 	orr.w	r0, r0, #1
 8008b82:	6010      	str	r0, [r2, #0]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8008b84:	6809      	ldr	r1, [r1, #0]
        uint32_t const startTicks = DWT->CYCCNT;
 8008b86:	6850      	ldr	r0, [r2, #4]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8008b88:	fba3 3101 	umull	r3, r1, r3, r1
 8008b8c:	0c8b      	lsrs	r3, r1, #18
 8008b8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008b92:	fb01 f103 	mul.w	r1, r1, r3
        while (DWT->CYCCNT - startTicks < delayTicks);
 8008b96:	6853      	ldr	r3, [r2, #4]
 8008b98:	1a1b      	subs	r3, r3, r0
 8008b9a:	4299      	cmp	r1, r3
 8008b9c:	d8fb      	bhi.n	8008b96 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0xa6>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008b9e:	4e41      	ldr	r6, [pc, #260]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008ba0:	240c      	movs	r4, #12
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2120      	movs	r1, #32
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7f8 fdf6 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8008bac:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	493d      	ldr	r1, [pc, #244]	; (8008ca8 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b8>)
 8008bb4:	6828      	ldr	r0, [r5, #0]
 8008bb6:	f7fa ffbb 	bl	8003b30 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008bba:	2201      	movs	r2, #1
 8008bbc:	2120      	movs	r1, #32
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f7f8 fdea 	bl	8001798 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8008bc4:	3c01      	subs	r4, #1
 8008bc6:	d1ec      	bne.n	8008ba2 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0xb2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008bc8:	4622      	mov	r2, r4
 8008bca:	2120      	movs	r1, #32
 8008bcc:	4835      	ldr	r0, [pc, #212]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008bce:	f7f8 fde3 	bl	8001798 <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	493b      	ldr	r1, [pc, #236]	; (8008cc4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1d4>)
 8008bd6:	6828      	ldr	r0, [r5, #0]
 8008bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bdc:	f7fa ffa8 	bl	8003b30 <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008be0:	2201      	movs	r2, #1
 8008be2:	2120      	movs	r1, #32
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d154      	bne.n	8008c92 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a2>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008be8:	482e      	ldr	r0, [pc, #184]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008bea:	f7f8 fdd5 	bl	8001798 <HAL_GPIO_WritePin>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8008bee:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf2:	2260      	movs	r2, #96	; 0x60
 8008bf4:	1da9      	adds	r1, r5, #6
 8008bf6:	6828      	ldr	r0, [r5, #0]
 8008bf8:	f7fb f8ce 	bl	8003d98 <HAL_SPI_Receive>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d146      	bne.n	8008c8e <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x19e>
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
      { return iterator(data() + _Nm); }
 8008c00:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8008c04:	4930      	ldr	r1, [pc, #192]	; (8008cc8 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1d8>)
 8008c06:	350e      	adds	r5, #14
 8008c08:	e002      	b.n	8008c10 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x120>
                for (auto& IC : register_group)
 8008c0a:	42a8      	cmp	r0, r5
 8008c0c:	d03f      	beq.n	8008c8e <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x19e>
 8008c0e:	4625      	mov	r5, r4
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c10:	f815 3c08 	ldrb.w	r3, [r5, #-8]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c14:	f815 6c07 	ldrb.w	r6, [r5, #-7]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c1c:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 8008c20:	f483 5780 	eor.w	r7, r3, #4096	; 0x1000
 8008c24:	ea86 16d7 	eor.w	r6, r6, r7, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c28:	b2f6      	uxtb	r6, r6
 8008c2a:	f105 0408 	add.w	r4, r5, #8
 8008c2e:	f831 3016 	ldrh.w	r3, [r1, r6, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c32:	f815 6c05 	ldrb.w	r6, [r5, #-5]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c36:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008c46:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c4a:	b293      	uxth	r3, r2
 8008c4c:	ea86 12d3 	eor.w	r2, r6, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c50:	b2d2      	uxtb	r2, r2
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c52:	f815 6c03 	ldrb.w	r6, [r5, #-3]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c56:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008c5a:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c5e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8008c62:	b292      	uxth	r2, r2
 8008c64:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008c6e:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	ea86 13d2 	eor.w	r3, r6, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008c7e:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008c82:	005b      	lsls	r3, r3, #1
                    if (IC.PEC != PEC15Calc(IC.data))
 8008c84:	f835 2c02 	ldrh.w	r2, [r5, #-2]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d0bd      	beq.n	8008c0a <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x11a>
        return Success;
 8008c8e:	2000      	movs	r0, #0
}
 8008c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008c92:	4804      	ldr	r0, [pc, #16]	; (8008ca4 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008c94:	f7f8 fd80 	bl	8001798 <HAL_GPIO_WritePin>
        return Success;
 8008c98:	4620      	mov	r0, r4
}
 8008c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        static const DWTWrapper dwtSingleton;
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e764      	b.n	8008b6c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x7c>
 8008ca2:	bf00      	nop
 8008ca4:	40020000 	.word	0x40020000
 8008ca8:	0800b7f0 	.word	0x0800b7f0
 8008cac:	0800b7ec 	.word	0x0800b7ec
 8008cb0:	200000dc 	.word	0x200000dc
 8008cb4:	e000edf0 	.word	0xe000edf0
 8008cb8:	e0001000 	.word	0xe0001000
 8008cbc:	20000024 	.word	0x20000024
 8008cc0:	431bde83 	.word	0x431bde83
 8008cc4:	0800b7d8 	.word	0x0800b7d8
 8008cc8:	0800b5d0 	.word	0x0800b5d0

08008ccc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE>:
        }
    }
    return status;
}

[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    uint16_t DCCx{ 0 };
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
    RegisterGroup<uint8_t> cfg_register_group;

    switch (discharge_mode) {
 8008cd0:	790b      	ldrb	r3, [r1, #4]
[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 8008cd2:	b089      	sub	sp, #36	; 0x24
    switch (discharge_mode) {
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b01      	cmp	r3, #1
[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 8008cd8:	9007      	str	r0, [sp, #28]
 8008cda:	9201      	str	r2, [sp, #4]
    switch (discharge_mode) {
 8008cdc:	f000 8127 	beq.w	8008f2e <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x262>
 8008ce0:	f0c0 8096 	bcc.w	8008e10 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x144>
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f040 808f 	bne.w	8008e08 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x13c>
            cfg_register_group[current_ic].PEC = PEC15Calc(cfg_register_group[current_ic].data);
        }
        break;

    case GTMeanPlusDelta: {
        size_t average_voltage{ voltage_status.sum / (4 * kDaisyChainLength * 3) };
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	4aba      	ldr	r2, [pc, #744]	; (8008fd8 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x30c>)
 8008cee:	48bb      	ldr	r0, [pc, #748]	; (8008fdc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>)
 8008cf0:	9003      	str	r0, [sp, #12]
 8008cf2:	fba2 3e03 	umull	r3, lr, r2, r3
 8008cf6:	f101 0366 	add.w	r3, r1, #102	; 0x66
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	f501 73f6 	add.w	r3, r1, #492	; 0x1ec
 8008d00:	9305      	str	r3, [sp, #20]
 8008d02:	9b07      	ldr	r3, [sp, #28]
 8008d04:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8008d08:	3308      	adds	r3, #8
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 8008d0a:	220b      	movs	r2, #11
 8008d0c:	f10e 0e64 	add.w	lr, lr, #100	; 0x64
 8008d10:	9201      	str	r2, [sp, #4]
            current_cell = 0;

            for (auto const& register_group : cell_data) { // 4 voltage register groups
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
                    if (voltage > average_voltage + kDelta)
                        DCCx |= 1 << current_cell;
 8008d12:	f04f 0a01 	mov.w	sl, #1
                    ++current_cell;
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            --current_ic;

            IC.data[0] = 0xFE;
 8008d16:	469b      	mov	fp, r3
 8008d18:	9b01      	ldr	r3, [sp, #4]
 8008d1a:	9a04      	ldr	r2, [sp, #16]
            DCCx = 0;
 8008d1c:	f8cd b008 	str.w	fp, [sp, #8]
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	f103 0c06 	add.w	ip, r3, #6
 8008d26:	f103 0902 	add.w	r9, r3, #2
 8008d2a:	eb02 0803 	add.w	r8, r2, r3
 8008d2e:	4494      	add	ip, r2
 8008d30:	4491      	add	r9, r2
 8008d32:	9a05      	ldr	r2, [sp, #20]
            current_cell = 0;
 8008d34:	2600      	movs	r6, #0
 8008d36:	18d3      	adds	r3, r2, r3
            DCCx = 0;
 8008d38:	469b      	mov	fp, r3
 8008d3a:	4632      	mov	r2, r6
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008d3c:	45e0      	cmp	r8, ip
 8008d3e:	d017      	beq.n	8008d70 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0xa4>
 8008d40:	ebac 0509 	sub.w	r5, ip, r9
 8008d44:	086f      	lsrs	r7, r5, #1
 8008d46:	f1ac 0308 	sub.w	r3, ip, #8
 8008d4a:	4445      	add	r5, r8
 8008d4c:	4631      	mov	r1, r6
                    if (voltage > average_voltage + kDelta)
 8008d4e:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 8008d52:	45a6      	cmp	lr, r4
                    ++current_cell;
 8008d54:	f101 0001 	add.w	r0, r1, #1
                    if (voltage > average_voltage + kDelta)
 8008d58:	d203      	bcs.n	8008d62 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x96>
                        DCCx |= 1 << current_cell;
 8008d5a:	fa0a f101 	lsl.w	r1, sl, r1
 8008d5e:	4311      	orrs	r1, r2
 8008d60:	b28a      	uxth	r2, r1
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008d62:	429d      	cmp	r5, r3
                    ++current_cell;
 8008d64:	b2c1      	uxtb	r1, r0
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008d66:	d1f2      	bne.n	8008d4e <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x82>
 8008d68:	3601      	adds	r6, #1
 8008d6a:	fa57 f686 	uxtab	r6, r7, r6
 8008d6e:	b2f6      	uxtb	r6, r6
 8008d70:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8008d74:	45e3      	cmp	fp, ip
 8008d76:	f108 0860 	add.w	r8, r8, #96	; 0x60
 8008d7a:	f109 0960 	add.w	r9, r9, #96	; 0x60
 8008d7e:	d1dd      	bne.n	8008d3c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x70>
 8008d80:	f8dd b008 	ldr.w	fp, [sp, #8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d84:	9d03      	ldr	r5, [sp, #12]
 8008d86:	f81b 1c07 	ldrb.w	r1, [fp, #-7]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d8a:	f81b 3c06 	ldrb.w	r3, [fp, #-6]
            IC.data[4] = DCCx & 0xFF;
 8008d8e:	f80b 2c04 	strb.w	r2, [fp, #-4]
            IC.data[0] = 0xFE;
 8008d92:	f06f 0001 	mvn.w	r0, #1
 8008d96:	f80b 0c08 	strb.w	r0, [fp, #-8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d9a:	f081 01aa 	eor.w	r1, r1, #170	; 0xaa
            --current_ic;
 8008d9e:	9801      	ldr	r0, [sp, #4]
 8008da0:	1e44      	subs	r4, r0, #1
 8008da2:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008da6:	f480 6140 	eor.w	r1, r0, #3072	; 0xc00
 8008daa:	ea83 13d1 	eor.w	r3, r3, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	b2e6      	uxtb	r6, r4
 8008db2:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008db6:	f81b 3c05 	ldrb.w	r3, [fp, #-5]
 8008dba:	9601      	str	r6, [sp, #4]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008dbc:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008dc0:	b280      	uxth	r0, r0
 8008dc2:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008dc6:	b2db      	uxtb	r3, r3
            IC.data[5] = DCCx >> 8 & 0xF;
 8008dc8:	f3c2 2103 	ubfx	r1, r2, #8, #4
 8008dcc:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8008dd0:	f80b 1c03 	strb.w	r1, [fp, #-3]
 8008dd4:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008dd8:	b298      	uxth	r0, r3
 8008dda:	ea82 12d0 	eor.w	r2, r2, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008dde:	b2d2      	uxtb	r2, r2
        for (auto& IC : cfg_register_group) {
 8008de0:	2eff      	cmp	r6, #255	; 0xff
 8008de2:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8008de6:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008df0:	b2c9      	uxtb	r1, r1
 8008df2:	f10b 0b08 	add.w	fp, fp, #8
 8008df6:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 8008dfa:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008dfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
            IC.PEC = PEC15Calc(IC.data);
 8008e02:	f82b 3c0a 	strh.w	r3, [fp, #-10]
        for (auto& IC : cfg_register_group) {
 8008e06:	d187      	bne.n	8008d18 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x4c>
    }
    break;
    }

    return cfg_register_group;
}
 8008e08:	9807      	ldr	r0, [sp, #28]
 8008e0a:	b009      	add	sp, #36	; 0x24
 8008e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	4b72      	ldr	r3, [pc, #456]	; (8008fdc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>)
 8008e12:	9303      	str	r3, [sp, #12]
 8008e14:	f101 0366 	add.w	r3, r1, #102	; 0x66
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	f501 73f6 	add.w	r3, r1, #492	; 0x1ec
 8008e1e:	9306      	str	r3, [sp, #24]
 8008e20:	9b07      	ldr	r3, [sp, #28]
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 8008e22:	220b      	movs	r2, #11
 8008e24:	3308      	adds	r3, #8
 8008e26:	9202      	str	r2, [sp, #8]
                        DCCx |= 1 << current_cell;
 8008e28:	f04f 0a01 	mov.w	sl, #1
            IC.data[0] = 0xFE;
 8008e2c:	469b      	mov	fp, r3
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	9a05      	ldr	r2, [sp, #20]
            DCCx = 0;
 8008e32:	f8cd b010 	str.w	fp, [sp, #16]
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	f103 0e06 	add.w	lr, r3, #6
 8008e3c:	f103 0902 	add.w	r9, r3, #2
 8008e40:	eb02 0803 	add.w	r8, r2, r3
 8008e44:	4496      	add	lr, r2
 8008e46:	4491      	add	r9, r2
 8008e48:	9a06      	ldr	r2, [sp, #24]
            current_cell = 0;
 8008e4a:	2700      	movs	r7, #0
 8008e4c:	18d3      	adds	r3, r2, r3
            DCCx = 0;
 8008e4e:	469b      	mov	fp, r3
 8008e50:	463a      	mov	r2, r7
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008e52:	45c6      	cmp	lr, r8
 8008e54:	d01b      	beq.n	8008e8e <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x1c2>
                    if (voltage > voltage_status.min + kDelta)
 8008e56:	9b01      	ldr	r3, [sp, #4]
 8008e58:	889e      	ldrh	r6, [r3, #4]
 8008e5a:	ebae 0509 	sub.w	r5, lr, r9
 8008e5e:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8008e62:	3664      	adds	r6, #100	; 0x64
 8008e64:	4445      	add	r5, r8
 8008e66:	f1ae 0308 	sub.w	r3, lr, #8
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 8008e70:	42a6      	cmp	r6, r4
                    ++current_cell;
 8008e72:	f101 0001 	add.w	r0, r1, #1
                    if (voltage > voltage_status.min + kDelta)
 8008e76:	da03      	bge.n	8008e80 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x1b4>
                        DCCx |= 1 << current_cell;
 8008e78:	fa0a f101 	lsl.w	r1, sl, r1
 8008e7c:	4311      	orrs	r1, r2
 8008e7e:	b28a      	uxth	r2, r1
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008e80:	42ab      	cmp	r3, r5
                    ++current_cell;
 8008e82:	b2c1      	uxtb	r1, r0
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008e84:	d1f2      	bne.n	8008e6c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x1a0>
 8008e86:	3701      	adds	r7, #1
 8008e88:	fa5c f787 	uxtab	r7, ip, r7
 8008e8c:	b2ff      	uxtb	r7, r7
 8008e8e:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8008e92:	45f3      	cmp	fp, lr
 8008e94:	f108 0860 	add.w	r8, r8, #96	; 0x60
 8008e98:	f109 0960 	add.w	r9, r9, #96	; 0x60
 8008e9c:	d1d9      	bne.n	8008e52 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x186>
 8008e9e:	f8dd b010 	ldr.w	fp, [sp, #16]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008ea2:	9d03      	ldr	r5, [sp, #12]
 8008ea4:	f81b 1c07 	ldrb.w	r1, [fp, #-7]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008ea8:	f81b 3c06 	ldrb.w	r3, [fp, #-6]
            IC.data[4] = DCCx & 0xFF;
 8008eac:	f80b 2c04 	strb.w	r2, [fp, #-4]
            IC.data[0] = 0xFE;
 8008eb0:	f06f 0001 	mvn.w	r0, #1
 8008eb4:	f80b 0c08 	strb.w	r0, [fp, #-8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008eb8:	f081 01aa 	eor.w	r1, r1, #170	; 0xaa
            --current_ic;
 8008ebc:	9802      	ldr	r0, [sp, #8]
 8008ebe:	1e44      	subs	r4, r0, #1
 8008ec0:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008ec4:	f480 6140 	eor.w	r1, r0, #3072	; 0xc00
 8008ec8:	ea83 13d1 	eor.w	r3, r3, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	b2e6      	uxtb	r6, r4
 8008ed0:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008ed4:	f81b 3c05 	ldrb.w	r3, [fp, #-5]
 8008ed8:	9602      	str	r6, [sp, #8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008eda:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008ede:	b280      	uxth	r0, r0
 8008ee0:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008ee4:	b2db      	uxtb	r3, r3
            IC.data[5] = DCCx >> 8 & 0xF;
 8008ee6:	f3c2 2103 	ubfx	r1, r2, #8, #4
 8008eea:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8008eee:	f80b 1c03 	strb.w	r1, [fp, #-3]
 8008ef2:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008ef6:	b298      	uxth	r0, r3
 8008ef8:	ea82 12d0 	eor.w	r2, r2, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008efc:	b2d2      	uxtb	r2, r2
        for (auto& IC : cfg_register_group) { // 12 register groups
 8008efe:	2eff      	cmp	r6, #255	; 0xff
 8008f00:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8008f04:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008f0e:	b2c9      	uxtb	r1, r1
 8008f10:	f10b 0b08 	add.w	fp, fp, #8
 8008f14:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 8008f18:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008f1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
            IC.PEC = PEC15Calc(IC.data);
 8008f20:	f82b 3c0a 	strh.w	r3, [fp, #-10]
        for (auto& IC : cfg_register_group) { // 12 register groups
 8008f24:	d183      	bne.n	8008e2e <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x162>
}
 8008f26:	9807      	ldr	r0, [sp, #28]
 8008f28:	b009      	add	sp, #36	; 0x24
 8008f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2e:	4610      	mov	r0, r2
        if (voltage_status.max - voltage_status.min > kDelta) {
 8008f30:	8992      	ldrh	r2, [r2, #12]
 8008f32:	8881      	ldrh	r1, [r0, #4]
 8008f34:	1a52      	subs	r2, r2, r1
 8008f36:	2a64      	cmp	r2, #100	; 0x64
 8008f38:	f77f af66 	ble.w	8008e08 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x13c>
            current_ic = voltage_status.max_id / 3 % 12;
 8008f3c:	6906      	ldr	r6, [r0, #16]
 8008f3e:	4a28      	ldr	r2, [pc, #160]	; (8008fe0 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x314>)
            PEC = PEC << 8 ^ crc15Table[addr];
 8008f40:	4c26      	ldr	r4, [pc, #152]	; (8008fdc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>)
            DCCx |= 1 << voltage_status.max_id % 11;
 8008f42:	4828      	ldr	r0, [pc, #160]	; (8008fe4 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x318>)
            current_ic = voltage_status.max_id / 3 % 12;
 8008f44:	fba2 5106 	umull	r5, r1, r2, r6
 8008f48:	0849      	lsrs	r1, r1, #1
 8008f4a:	fba2 5201 	umull	r5, r2, r2, r1
 8008f4e:	08d2      	lsrs	r2, r2, #3
 8008f50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            cfg_register_group[current_ic].data[0] = 0xFE;
 8008f54:	9d07      	ldr	r5, [sp, #28]
            current_ic = voltage_status.max_id / 3 % 12;
 8008f56:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
            cfg_register_group[current_ic].data[0] = 0xFE;
 8008f5a:	21fe      	movs	r1, #254	; 0xfe
 8008f5c:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
 8008f60:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
            DCCx |= 1 << voltage_status.max_id % 11;
 8008f64:	fba0 0106 	umull	r0, r1, r0, r6
 8008f68:	7855      	ldrb	r5, [r2, #1]
 8008f6a:	7890      	ldrb	r0, [r2, #2]
 8008f6c:	78d7      	ldrb	r7, [r2, #3]
 8008f6e:	f085 05aa 	eor.w	r5, r5, #170	; 0xaa
 8008f72:	08c9      	lsrs	r1, r1, #3
 8008f74:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8008f78:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
 8008f7c:	ea80 10d5 	eor.w	r0, r0, r5, lsr #7
 8008f80:	b2c0      	uxtb	r0, r0
 8008f82:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8008f86:	ea80 2005 	eor.w	r0, r0, r5, lsl #8
 8008f8a:	b285      	uxth	r5, r0
 8008f8c:	ea87 10d5 	eor.w	r0, r7, r5, lsr #7
 8008f90:	b2c0      	uxtb	r0, r0
 8008f92:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8008f96:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8008f9a:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8008f9e:	1a76      	subs	r6, r6, r1
 8008fa0:	ea80 2005 	eor.w	r0, r0, r5, lsl #8
 8008fa4:	40b3      	lsls	r3, r6
 8008fa6:	b280      	uxth	r0, r0
 8008fa8:	ea83 11d0 	eor.w	r1, r3, r0, lsr #7
 8008fac:	b2c9      	uxtb	r1, r1
            cfg_register_group[current_ic].data[5] = DCCx >> 8 & 0xF;
 8008fae:	121d      	asrs	r5, r3, #8
 8008fb0:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
            cfg_register_group[current_ic].data[4] = DCCx & 0xFF;
 8008fb4:	7113      	strb	r3, [r2, #4]
 8008fb6:	ea81 2300 	eor.w	r3, r1, r0, lsl #8
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	ea85 11d3 	eor.w	r1, r5, r3, lsr #7
 8008fc0:	b2c9      	uxtb	r1, r1
}
 8008fc2:	9807      	ldr	r0, [sp, #28]
 8008fc4:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
            cfg_register_group[current_ic].data[5] = DCCx >> 8 & 0xF;
 8008fc8:	7155      	strb	r5, [r2, #5]
 8008fca:	ea81 2303 	eor.w	r3, r1, r3, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008fce:	005b      	lsls	r3, r3, #1
            cfg_register_group[current_ic].PEC = PEC15Calc(cfg_register_group[current_ic].data);
 8008fd0:	80d3      	strh	r3, [r2, #6]
}
 8008fd2:	b009      	add	sp, #36	; 0x24
 8008fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd8:	38e38e39 	.word	0x38e38e39
 8008fdc:	0800b5d0 	.word	0x0800b5d0
 8008fe0:	aaaaaaab 	.word	0xaaaaaaab
 8008fe4:	ba2e8ba3 	.word	0xba2e8ba3

08008fe8 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>:


/* Start a conversion */
void LTC6811::startConversion(Command const& command) const noexcept {
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	4605      	mov	r5, r0
 8008fec:	460e      	mov	r6, r1
 8008fee:	240c      	movs	r4, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2120      	movs	r1, #32
 8008ff4:	4820      	ldr	r0, [pc, #128]	; (8009078 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x90>)
 8008ff6:	f7f8 fbcf 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	2201      	movs	r2, #1
 8009000:	491e      	ldr	r1, [pc, #120]	; (800907c <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x94>)
 8009002:	6828      	ldr	r0, [r5, #0]
 8009004:	f7fa fd94 	bl	8003b30 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009008:	2201      	movs	r2, #1
 800900a:	2120      	movs	r1, #32
 800900c:	481a      	ldr	r0, [pc, #104]	; (8009078 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x90>)
 800900e:	f7f8 fbc3 	bl	8001798 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009012:	3c01      	subs	r4, #1
 8009014:	d1ec      	bne.n	8008ff0 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x8>
    static constexpr uint16_t kMaxCycleTimeFast{ 1185 }; // Measure 12 Cells. Time in us.
    static constexpr uint16_t kMaxRefWakeupTime{ 4400 }; // Time in us.

    WakeFromIdle(); // It's possible all of these can be removed

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009016:	4622      	mov	r2, r4
 8009018:	2120      	movs	r1, #32
 800901a:	4817      	ldr	r0, [pc, #92]	; (8009078 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x90>)
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800901c:	4c18      	ldr	r4, [pc, #96]	; (8009080 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x98>)
 800901e:	f7f8 fbbb 	bl	8001798 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, command.data(), sizeof(Command), HAL_MAX_DELAY); // Start cell voltage conversion.
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	4631      	mov	r1, r6
 8009028:	2204      	movs	r2, #4
 800902a:	6828      	ldr	r0, [r5, #0]
 800902c:	f7fa fd80 	bl	8003b30 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009030:	2201      	movs	r2, #1
 8009032:	2120      	movs	r1, #32
 8009034:	4810      	ldr	r0, [pc, #64]	; (8009078 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x90>)
 8009036:	f7f8 fbaf 	bl	8001798 <HAL_GPIO_WritePin>
        static const DWTWrapper dwtSingleton;
 800903a:	4b12      	ldr	r3, [pc, #72]	; (8009084 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x9c>)
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800903c:	68e0      	ldr	r0, [r4, #12]
        static const DWTWrapper dwtSingleton;
 800903e:	681a      	ldr	r2, [r3, #0]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8009040:	4911      	ldr	r1, [pc, #68]	; (8009088 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0xa0>)
        static const DWTWrapper dwtSingleton;
 8009042:	07d2      	lsls	r2, r2, #31
 8009044:	bf5c      	itt	pl
 8009046:	2201      	movpl	r2, #1
 8009048:	601a      	strpl	r2, [r3, #0]
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800904a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800904e:	4a0f      	ldr	r2, [pc, #60]	; (800908c <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0xa4>)
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009050:	60e0      	str	r0, [r4, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009052:	6810      	ldr	r0, [r2, #0]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8009054:	4b0e      	ldr	r3, [pc, #56]	; (8009090 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0xa8>)
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009056:	f040 0001 	orr.w	r0, r0, #1
 800905a:	6010      	str	r0, [r2, #0]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 800905c:	6809      	ldr	r1, [r1, #0]
        uint32_t const startTicks = DWT->CYCCNT;
 800905e:	6850      	ldr	r0, [r2, #4]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8009060:	fba3 3101 	umull	r3, r1, r3, r1
 8009064:	0c8b      	lsrs	r3, r1, #18
 8009066:	f241 51d1 	movw	r1, #5585	; 0x15d1
 800906a:	fb01 f103 	mul.w	r1, r1, r3
        while (DWT->CYCCNT - startTicks < delayTicks);
 800906e:	6853      	ldr	r3, [r2, #4]
 8009070:	1a1b      	subs	r3, r3, r0
 8009072:	4299      	cmp	r1, r3
 8009074:	d8fb      	bhi.n	800906e <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x86>

    DWTWrapper::getInstance().delay(kMaxRefWakeupTime + kMaxCycleTimeFast); // TODO we aren't in fast conversion mode??? Also these delays aren't in the Linduino library
}
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	40020000 	.word	0x40020000
 800907c:	0800b7f0 	.word	0x0800b7f0
 8009080:	e000edf0 	.word	0xe000edf0
 8009084:	200000dc 	.word	0x200000dc
 8009088:	20000024 	.word	0x20000024
 800908c:	e0001000 	.word	0xe0001000
 8009090:	431bde83 	.word	0x431bde83

08009094 <_ZN7LTC681118checkVoltageStatusEv>:
[[nodiscard]] std::optional<LTC6811::VoltageStatus> LTC6811::checkVoltageStatus(void) noexcept {
 8009094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	4689      	mov	r9, r1
 800909a:	4606      	mov	r6, r0
    startConversion(ADCV);
 800909c:	f201 3166 	addw	r1, r1, #870	; 0x366
 80090a0:	4648      	mov	r0, r9
 80090a2:	f7ff ffa1 	bl	8008fe8 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>
 80090a6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 8009260 <_ZN7LTC681118checkVoltageStatusEv+0x1cc>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80090aa:	4f69      	ldr	r7, [pc, #420]	; (8009250 <_ZN7LTC681118checkVoltageStatusEv+0x1bc>)
 80090ac:	f109 0466 	add.w	r4, r9, #102	; 0x66
 80090b0:	f109 08c6 	add.w	r8, r9, #198	; 0xc6
 80090b4:	f209 2b46 	addw	fp, r9, #582	; 0x246
[[nodiscard]] std::optional<LTC6811::VoltageStatus> LTC6811::checkVoltageStatus(void) noexcept {
 80090b8:	250c      	movs	r5, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80090ba:	2200      	movs	r2, #0
 80090bc:	2120      	movs	r1, #32
 80090be:	4638      	mov	r0, r7
 80090c0:	f7f8 fb6a 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295
 80090c8:	2201      	movs	r2, #1
 80090ca:	4962      	ldr	r1, [pc, #392]	; (8009254 <_ZN7LTC681118checkVoltageStatusEv+0x1c0>)
 80090cc:	f8d9 0000 	ldr.w	r0, [r9]
 80090d0:	f7fa fd2e 	bl	8003b30 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80090d4:	2201      	movs	r2, #1
 80090d6:	2120      	movs	r1, #32
 80090d8:	4638      	mov	r0, r7
 80090da:	f7f8 fb5d 	bl	8001798 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 80090de:	3d01      	subs	r5, #1
 80090e0:	d1eb      	bne.n	80090ba <_ZN7LTC681118checkVoltageStatusEv+0x26>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80090e2:	462a      	mov	r2, r5
 80090e4:	2120      	movs	r1, #32
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7f8 fb56 	bl	8001798 <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 80090ec:	2204      	movs	r2, #4
 80090ee:	4651      	mov	r1, sl
 80090f0:	f04f 33ff 	mov.w	r3, #4294967295
 80090f4:	f8d9 0000 	ldr.w	r0, [r9]
 80090f8:	f7fa fd1a 	bl	8003b30 <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80090fc:	2201      	movs	r2, #1
 80090fe:	2120      	movs	r1, #32
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8009100:	2800      	cmp	r0, #0
 8009102:	f040 809d 	bne.w	8009240 <_ZN7LTC681118checkVoltageStatusEv+0x1ac>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009106:	4638      	mov	r0, r7
 8009108:	f1a8 0560 	sub.w	r5, r8, #96	; 0x60
 800910c:	f7f8 fb44 	bl	8001798 <HAL_GPIO_WritePin>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8009110:	4629      	mov	r1, r5
 8009112:	f04f 33ff 	mov.w	r3, #4294967295
 8009116:	2260      	movs	r2, #96	; 0x60
 8009118:	f8d9 0000 	ldr.w	r0, [r9]
 800911c:	f7fa fe3c 	bl	8003d98 <HAL_SPI_Receive>
 8009120:	2800      	cmp	r0, #0
 8009122:	f040 8090 	bne.w	8009246 <_ZN7LTC681118checkVoltageStatusEv+0x1b2>
                for (auto& IC : register_group)
 8009126:	45a8      	cmp	r8, r5
 8009128:	d049      	beq.n	80091be <_ZN7LTC681118checkVoltageStatusEv+0x12a>
 800912a:	494b      	ldr	r1, [pc, #300]	; (8009258 <_ZN7LTC681118checkVoltageStatusEv+0x1c4>)
 800912c:	f1a8 0358 	sub.w	r3, r8, #88	; 0x58
 8009130:	e002      	b.n	8009138 <_ZN7LTC681118checkVoltageStatusEv+0xa4>
 8009132:	4598      	cmp	r8, r3
 8009134:	d043      	beq.n	80091be <_ZN7LTC681118checkVoltageStatusEv+0x12a>
 8009136:	462b      	mov	r3, r5
            PEC = PEC << 8 ^ crc15Table[addr];
 8009138:	f813 0c08 	ldrb.w	r0, [r3, #-8]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800913c:	f813 2c07 	ldrb.w	r2, [r3, #-7]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009140:	f831 e010 	ldrh.w	lr, [r1, r0, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009144:	f813 cc06 	ldrb.w	ip, [r3, #-6]
 8009148:	f813 0c05 	ldrb.w	r0, [r3, #-5]
 800914c:	f48e 5e80 	eor.w	lr, lr, #4096	; 0x1000
 8009150:	ea82 12de 	eor.w	r2, r2, lr, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8009154:	b2d2      	uxtb	r2, r2
 8009156:	f103 0508 	add.w	r5, r3, #8
 800915a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800915e:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009162:	b292      	uxth	r2, r2
 8009164:	ea8c 1cd2 	eor.w	ip, ip, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8009168:	fa5f fc8c 	uxtb.w	ip, ip
 800916c:	f831 c01c 	ldrh.w	ip, [r1, ip, lsl #1]
 8009170:	ea8c 2202 	eor.w	r2, ip, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009174:	b292      	uxth	r2, r2
 8009176:	ea80 10d2 	eor.w	r0, r0, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 800917a:	b2c0      	uxtb	r0, r0
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800917c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009180:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8009184:	ea80 2202 	eor.w	r2, r0, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009188:	b292      	uxth	r2, r2
 800918a:	ea8c 1cd2 	eor.w	ip, ip, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 800918e:	fa5f fc8c 	uxtb.w	ip, ip
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009192:	f813 0c03 	ldrb.w	r0, [r3, #-3]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009196:	f831 c01c 	ldrh.w	ip, [r1, ip, lsl #1]
 800919a:	ea8c 2202 	eor.w	r2, ip, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800919e:	fa1f fc82 	uxth.w	ip, r2
 80091a2:	ea80 12dc 	eor.w	r2, r0, ip, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80091a6:	b2d2      	uxtb	r2, r2
                    if (IC.PEC != PEC15Calc(IC.data))
 80091a8:	f833 0c02 	ldrh.w	r0, [r3, #-2]
            PEC = PEC << 8 ^ crc15Table[addr];
 80091ac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80091b0:	ea82 220c 	eor.w	r2, r2, ip, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 80091b4:	0052      	lsls	r2, r2, #1
                    if (IC.PEC != PEC15Calc(IC.data))
 80091b6:	b292      	uxth	r2, r2
 80091b8:	4290      	cmp	r0, r2
 80091ba:	d0ba      	beq.n	8009132 <_ZN7LTC681118checkVoltageStatusEv+0x9e>
 80091bc:	e043      	b.n	8009246 <_ZN7LTC681118checkVoltageStatusEv+0x1b2>
 80091be:	f108 0860 	add.w	r8, r8, #96	; 0x60
    for (size_t group = A; group <= D; ++group)
 80091c2:	45d8      	cmp	r8, fp
 80091c4:	f10a 0a04 	add.w	sl, sl, #4
 80091c8:	f47f af76 	bne.w	80090b8 <_ZN7LTC681118checkVoltageStatusEv+0x24>
    LTC6811::VoltageStatus status;
 80091cc:	f04f 0800 	mov.w	r8, #0
 80091d0:	f509 7ef3 	add.w	lr, r9, #486	; 0x1e6
 80091d4:	4645      	mov	r5, r8
 80091d6:	46c4      	mov	ip, r8
 80091d8:	4641      	mov	r1, r8
    size_t count{ 0 };
 80091da:	4643      	mov	r3, r8
    LTC6811::VoltageStatus status;
 80091dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80091e0:	1da7      	adds	r7, r4, #6
 80091e2:	f104 0960 	add.w	r9, r4, #96	; 0x60
 80091e6:	f104 0a66 	add.w	sl, r4, #102	; 0x66
 80091ea:	f1a7 0208 	sub.w	r2, r7, #8
 80091ee:	1cdc      	adds	r4, r3, #3
 80091f0:	e006      	b.n	8009200 <_ZN7LTC681118checkVoltageStatusEv+0x16c>
                } else if (voltage > status.max) {
 80091f2:	45ab      	cmp	fp, r5
 80091f4:	d901      	bls.n	80091fa <_ZN7LTC681118checkVoltageStatusEv+0x166>
 80091f6:	465d      	mov	r5, fp
 80091f8:	4698      	mov	r8, r3
                ++count;
 80091fa:	3301      	adds	r3, #1
            for (const auto voltage : IC.data) {
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d009      	beq.n	8009214 <_ZN7LTC681118checkVoltageStatusEv+0x180>
 8009200:	f832 bf02 	ldrh.w	fp, [r2, #2]!
                if (voltage < status.min) {
 8009204:	4583      	cmp	fp, r0
                status.sum += voltage;
 8009206:	4459      	add	r1, fp
                if (voltage < status.min) {
 8009208:	d2f3      	bcs.n	80091f2 <_ZN7LTC681118checkVoltageStatusEv+0x15e>
 800920a:	469c      	mov	ip, r3
                ++count;
 800920c:	3301      	adds	r3, #1
            for (const auto voltage : IC.data) {
 800920e:	42a3      	cmp	r3, r4
                if (voltage < status.min) {
 8009210:	4658      	mov	r0, fp
            for (const auto voltage : IC.data) {
 8009212:	d1f5      	bne.n	8009200 <_ZN7LTC681118checkVoltageStatusEv+0x16c>
 8009214:	3708      	adds	r7, #8
        for (const auto& IC : register_group) {
 8009216:	45ba      	cmp	sl, r7
 8009218:	d1e7      	bne.n	80091ea <_ZN7LTC681118checkVoltageStatusEv+0x156>
    for (const auto& register_group : cell_data) {
 800921a:	45ce      	cmp	lr, r9
 800921c:	464c      	mov	r4, r9
 800921e:	d1df      	bne.n	80091e0 <_ZN7LTC681118checkVoltageStatusEv+0x14c>
    status.sum /= 10000; // Convert centiDegC to DegC (with rounding errors, but this is what the old code did...)
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <_ZN7LTC681118checkVoltageStatusEv+0x1c8>)
	: _M_empty() {}

      template<typename... _Args>
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
	: _M_payload(std::forward<_Args>(__args)...),
	  _M_engaged(true)
 8009222:	80b0      	strh	r0, [r6, #4]
 8009224:	fba3 2301 	umull	r2, r3, r3, r1
 8009228:	0b5b      	lsrs	r3, r3, #13
 800922a:	2201      	movs	r2, #1
 800922c:	f8c6 c008 	str.w	ip, [r6, #8]
 8009230:	81b5      	strh	r5, [r6, #12]
 8009232:	f8c6 8010 	str.w	r8, [r6, #16]
 8009236:	6033      	str	r3, [r6, #0]
 8009238:	7532      	strb	r2, [r6, #20]
}
 800923a:	4630      	mov	r0, r6
 800923c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009240:	4803      	ldr	r0, [pc, #12]	; (8009250 <_ZN7LTC681118checkVoltageStatusEv+0x1bc>)
 8009242:	f7f8 faa9 	bl	8001798 <HAL_GPIO_WritePin>
	: _M_empty() {}
 8009246:	2300      	movs	r3, #0
 8009248:	7533      	strb	r3, [r6, #20]
 800924a:	4630      	mov	r0, r6
 800924c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	40020000 	.word	0x40020000
 8009254:	0800b7f0 	.word	0x0800b7f0
 8009258:	0800b5d0 	.word	0x0800b5d0
 800925c:	d1b71759 	.word	0xd1b71759
 8009260:	0800b7dc 	.word	0x0800b7dc

08009264 <_ZN7LTC681122checkTemperatureStatusEv>:
[[nodiscard]] std::optional<LTC6811::TempStatus> LTC6811::checkTemperatureStatus() noexcept {
 8009264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	460e      	mov	r6, r1
 800926a:	4681      	mov	r9, r0
    startConversion(ADAX);
 800926c:	f201 316a 	addw	r1, r1, #874	; 0x36a
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff feb9 	bl	8008fe8 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>
 8009276:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80093bc <_ZN7LTC681122checkTemperatureStatusEv+0x158>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800927a:	4d4d      	ldr	r5, [pc, #308]	; (80093b0 <_ZN7LTC681122checkTemperatureStatusEv+0x14c>)
 800927c:	f206 2746 	addw	r7, r6, #582	; 0x246
 8009280:	f206 3a06 	addw	sl, r6, #774	; 0x306
[[nodiscard]] std::optional<LTC6811::TempStatus> LTC6811::checkTemperatureStatus() noexcept {
 8009284:	240c      	movs	r4, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009286:	2200      	movs	r2, #0
 8009288:	2120      	movs	r1, #32
 800928a:	4628      	mov	r0, r5
 800928c:	f7f8 fa84 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8009290:	f04f 33ff 	mov.w	r3, #4294967295
 8009294:	2201      	movs	r2, #1
 8009296:	4947      	ldr	r1, [pc, #284]	; (80093b4 <_ZN7LTC681122checkTemperatureStatusEv+0x150>)
 8009298:	6830      	ldr	r0, [r6, #0]
 800929a:	f7fa fc49 	bl	8003b30 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800929e:	2201      	movs	r2, #1
 80092a0:	2120      	movs	r1, #32
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7f8 fa78 	bl	8001798 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 80092a8:	3c01      	subs	r4, #1
 80092aa:	d1ec      	bne.n	8009286 <_ZN7LTC681122checkTemperatureStatusEv+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80092ac:	4622      	mov	r2, r4
 80092ae:	2120      	movs	r1, #32
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7f8 fa71 	bl	8001798 <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 80092b6:	2204      	movs	r2, #4
 80092b8:	4641      	mov	r1, r8
 80092ba:	f04f 33ff 	mov.w	r3, #4294967295
 80092be:	6830      	ldr	r0, [r6, #0]
 80092c0:	f7fa fc36 	bl	8003b30 <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80092c4:	2201      	movs	r2, #1
 80092c6:	2120      	movs	r1, #32
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d15c      	bne.n	8009386 <_ZN7LTC681122checkTemperatureStatusEv+0x122>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80092cc:	4628      	mov	r0, r5
 80092ce:	f1a7 0460 	sub.w	r4, r7, #96	; 0x60
 80092d2:	f7f8 fa61 	bl	8001798 <HAL_GPIO_WritePin>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 80092d6:	4621      	mov	r1, r4
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	2260      	movs	r2, #96	; 0x60
 80092de:	6830      	ldr	r0, [r6, #0]
 80092e0:	f7fa fd5a 	bl	8003d98 <HAL_SPI_Receive>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d148      	bne.n	800937a <_ZN7LTC681122checkTemperatureStatusEv+0x116>
                for (auto& IC : register_group)
 80092e8:	42a7      	cmp	r7, r4
 80092ea:	d055      	beq.n	8009398 <_ZN7LTC681122checkTemperatureStatusEv+0x134>
 80092ec:	4832      	ldr	r0, [pc, #200]	; (80093b8 <_ZN7LTC681122checkTemperatureStatusEv+0x154>)
 80092ee:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
 80092f2:	e002      	b.n	80092fa <_ZN7LTC681122checkTemperatureStatusEv+0x96>
 80092f4:	429f      	cmp	r7, r3
 80092f6:	d04f      	beq.n	8009398 <_ZN7LTC681122checkTemperatureStatusEv+0x134>
 80092f8:	4623      	mov	r3, r4
            PEC = PEC << 8 ^ crc15Table[addr];
 80092fa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80092fe:	f813 cc07 	ldrb.w	ip, [r3, #-7]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009302:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009306:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 800930a:	f482 5e80 	eor.w	lr, r2, #4096	; 0x1000
 800930e:	ea8c 1cde 	eor.w	ip, ip, lr, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8009312:	fa5f fc8c 	uxtb.w	ip, ip
 8009316:	f103 0408 	add.w	r4, r3, #8
 800931a:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800931e:	f813 cc05 	ldrb.w	ip, [r3, #-5]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009322:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009326:	b292      	uxth	r2, r2
 8009328:	ea81 11d2 	eor.w	r1, r1, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 800932c:	b2c9      	uxtb	r1, r1
 800932e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8009332:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009336:	b28a      	uxth	r2, r1
 8009338:	ea8c 11d2 	eor.w	r1, ip, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 800933c:	b2c9      	uxtb	r1, r1
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800933e:	f813 cc03 	ldrb.w	ip, [r3, #-3]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009342:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8009346:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800934a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800934e:	b289      	uxth	r1, r1
 8009350:	ea82 12d1 	eor.w	r2, r2, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8009354:	b2d2      	uxtb	r2, r2
 8009356:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800935a:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800935e:	b291      	uxth	r1, r2
 8009360:	ea8c 12d1 	eor.w	r2, ip, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800936a:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800936e:	0052      	lsls	r2, r2, #1
                    if (IC.PEC != PEC15Calc(IC.data))
 8009370:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8009374:	b292      	uxth	r2, r2
 8009376:	4291      	cmp	r1, r2
 8009378:	d0bc      	beq.n	80092f4 <_ZN7LTC681122checkTemperatureStatusEv+0x90>
 800937a:	2300      	movs	r3, #0
 800937c:	f889 3010 	strb.w	r3, [r9, #16]
}
 8009380:	4648      	mov	r0, r9
 8009382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009386:	480a      	ldr	r0, [pc, #40]	; (80093b0 <_ZN7LTC681122checkTemperatureStatusEv+0x14c>)
 8009388:	f7f8 fa06 	bl	8001798 <HAL_GPIO_WritePin>
 800938c:	2300      	movs	r3, #0
 800938e:	f889 3010 	strb.w	r3, [r9, #16]
 8009392:	4648      	mov	r0, r9
 8009394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009398:	3760      	adds	r7, #96	; 0x60
    if (group <= B)
 800939a:	45ba      	cmp	sl, r7
 800939c:	f108 0804 	add.w	r8, r8, #4
 80093a0:	f47f af70 	bne.w	8009284 <_ZN7LTC681122checkTemperatureStatusEv+0x20>
 80093a4:	2300      	movs	r3, #0
 80093a6:	f889 3010 	strb.w	r3, [r9, #16]
}
 80093aa:	4648      	mov	r0, r9
 80093ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b0:	40020000 	.word	0x40020000
 80093b4:	0800b7f0 	.word	0x0800b7f0
 80093b8:	0800b5d0 	.word	0x0800b5d0
 80093bc:	0800b7d0 	.word	0x0800b7d0

080093c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80093ca:	f000 f879 	bl	80094c0 <BSP_SD_IsDetected>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d001      	beq.n	80093d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e012      	b.n	80093fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80093d8:	480b      	ldr	r0, [pc, #44]	; (8009408 <BSP_SD_Init+0x48>)
 80093da:	f7f9 f9cd 	bl	8002778 <HAL_SD_Init>
 80093de:	4603      	mov	r3, r0
 80093e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80093e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093ec:	4806      	ldr	r0, [pc, #24]	; (8009408 <BSP_SD_Init+0x48>)
 80093ee:	f7f9 ffbb 	bl	8003368 <HAL_SD_ConfigWideBusOperation>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80093fc:	79fb      	ldrb	r3, [r7, #7]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000138 	.word	0x20000138

0800940c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af02      	add	r7, sp, #8
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	4806      	ldr	r0, [pc, #24]	; (8009444 <BSP_SD_ReadBlocks+0x38>)
 800942a:	f7f9 fa35 	bl	8002898 <HAL_SD_ReadBlocks>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009438:	7dfb      	ldrb	r3, [r7, #23]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000138 	.word	0x20000138

08009448 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af02      	add	r7, sp, #8
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	4806      	ldr	r0, [pc, #24]	; (8009480 <BSP_SD_WriteBlocks+0x38>)
 8009466:	f7f9 fc0f 	bl	8002c88 <HAL_SD_WriteBlocks>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8009474:	7dfb      	ldrb	r3, [r7, #23]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000138 	.word	0x20000138

08009484 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009488:	4805      	ldr	r0, [pc, #20]	; (80094a0 <BSP_SD_GetCardState+0x1c>)
 800948a:	f7f9 ffe9 	bl	8003460 <HAL_SD_GetCardState>
 800948e:	4603      	mov	r3, r0
 8009490:	2b04      	cmp	r3, #4
 8009492:	bf14      	ite	ne
 8009494:	2301      	movne	r3, #1
 8009496:	2300      	moveq	r3, #0
 8009498:	b2db      	uxtb	r3, r3
}
 800949a:	4618      	mov	r0, r3
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20000138 	.word	0x20000138

080094a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	4803      	ldr	r0, [pc, #12]	; (80094bc <BSP_SD_GetCardInfo+0x18>)
 80094b0:	f7f9 ff2e 	bl	8003310 <HAL_SD_GetCardInfo>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000138 	.word	0x20000138

080094c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80094c6:	2301      	movs	r3, #1
 80094c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80094ca:	f000 f84f 	bl	800956c <BSP_PlatformIsDetected>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80094d4:	2300      	movs	r3, #0
 80094d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	b2db      	uxtb	r3, r3
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FILINFO inf;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
    /*## FatFS: Link the SD driver ###########################*/
    retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80094e8:	4916      	ldr	r1, [pc, #88]	; (8009544 <MX_FATFS_Init+0x60>)
 80094ea:	4817      	ldr	r0, [pc, #92]	; (8009548 <MX_FATFS_Init+0x64>)
 80094ec:	f7ff fa1c 	bl	8008928 <FATFS_LinkDriver>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	4b15      	ldr	r3, [pc, #84]	; (800954c <MX_FATFS_Init+0x68>)
 80094f6:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN Init */
    if (retSD == FR_OK) {
 80094f8:	4b14      	ldr	r3, [pc, #80]	; (800954c <MX_FATFS_Init+0x68>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d11e      	bne.n	800953e <MX_FATFS_Init+0x5a>
        retSD = f_mount(&SDFatFS, SDPath, 1);
 8009500:	2201      	movs	r2, #1
 8009502:	4910      	ldr	r1, [pc, #64]	; (8009544 <MX_FATFS_Init+0x60>)
 8009504:	4812      	ldr	r0, [pc, #72]	; (8009550 <MX_FATFS_Init+0x6c>)
 8009506:	f7fe f91f 	bl	8007748 <f_mount>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	4b0f      	ldr	r3, [pc, #60]	; (800954c <MX_FATFS_Init+0x68>)
 8009510:	701a      	strb	r2, [r3, #0]
        if (retSD == FR_OK) {
 8009512:	4b0e      	ldr	r3, [pc, #56]	; (800954c <MX_FATFS_Init+0x68>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d111      	bne.n	800953e <MX_FATFS_Init+0x5a>
            retSD = f_stat(DIRECTORY, &inf);
 800951a:	490e      	ldr	r1, [pc, #56]	; (8009554 <MX_FATFS_Init+0x70>)
 800951c:	480e      	ldr	r0, [pc, #56]	; (8009558 <MX_FATFS_Init+0x74>)
 800951e:	f7fe fd34 	bl	8007f8a <f_stat>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <MX_FATFS_Init+0x68>)
 8009528:	701a      	strb	r2, [r3, #0]
            if (retSD == FR_NO_FILE) {
 800952a:	4b08      	ldr	r3, [pc, #32]	; (800954c <MX_FATFS_Init+0x68>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d105      	bne.n	800953e <MX_FATFS_Init+0x5a>
                f_mkdir(DIRECTORY);
 8009532:	4809      	ldr	r0, [pc, #36]	; (8009558 <MX_FATFS_Init+0x74>)
 8009534:	f7fe fe0d 	bl	8008152 <f_mkdir>
                retSD = FR_OK;
 8009538:	4b04      	ldr	r3, [pc, #16]	; (800954c <MX_FATFS_Init+0x68>)
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    /* additional user code for init */
    /* USER CODE END Init */
}
 800953e:	bf00      	nop
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000288 	.word	0x20000288
 8009548:	0800b828 	.word	0x0800b828
 800954c:	20000284 	.word	0x20000284
 8009550:	200004bc 	.word	0x200004bc
 8009554:	200006ec 	.word	0x200006ec
 8009558:	0800b548 	.word	0x0800b548

0800955c <get_fattime>:
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
DWORD get_fattime(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN get_fattime */
    return 0;
 8009560:	2300      	movs	r3, #0
    /* USER CODE END get_fattime */
}
 8009562:	4618      	mov	r0, r3
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009572:	2301      	movs	r3, #1
 8009574:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800957a:	4806      	ldr	r0, [pc, #24]	; (8009594 <BSP_PlatformIsDetected+0x28>)
 800957c:	f7f8 f8f4 	bl	8001768 <HAL_GPIO_ReadPin>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009586:	2300      	movs	r3, #0
 8009588:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800958a:	79fb      	ldrb	r3, [r7, #7]
}  
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40020000 	.word	0x40020000

08009598 <HAL_IncTick>:
uint32_t CANTxVolumeSize(uint32_t const size_of_log);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C" { void HAL_IncTick(void) {
 8009598:	b570      	push	{r4, r5, r6, lr}
    uwTick += uwTickFreq;
 800959a:	4948      	ldr	r1, [pc, #288]	; (80096bc <HAL_IncTick+0x124>)
 800959c:	4b48      	ldr	r3, [pc, #288]	; (80096c0 <HAL_IncTick+0x128>)

    if (status != nullptr) {
 800959e:	4849      	ldr	r0, [pc, #292]	; (80096c4 <HAL_IncTick+0x12c>)
    uwTick += uwTickFreq;
 80095a0:	680c      	ldr	r4, [r1, #0]
 80095a2:	781a      	ldrb	r2, [r3, #0]
    if (status != nullptr) {
 80095a4:	6803      	ldr	r3, [r0, #0]
    uwTick += uwTickFreq;
 80095a6:	4422      	add	r2, r4
extern "C" { void HAL_IncTick(void) {
 80095a8:	b084      	sub	sp, #16
    uwTick += uwTickFreq;
 80095aa:	600a      	str	r2, [r1, #0]
    if (status != nullptr) {
 80095ac:	b19b      	cbz	r3, 80095d6 <HAL_IncTick+0x3e>
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }
 80095ae:	f3bf 8f5b 	dmb	ish
 80095b2:	3328      	adds	r3, #40	; 0x28
 80095b4:	e853 2f00 	ldrex	r2, [r3]
 80095b8:	3201      	adds	r2, #1
 80095ba:	e843 2100 	strex	r1, r2, [r3]
 80095be:	2900      	cmp	r1, #0
 80095c0:	d1f8      	bne.n	80095b4 <HAL_IncTick+0x1c>
 80095c2:	f3bf 8f5b 	dmb	ish
        status->tick();

        if (nlg5 != nullptr && status->getOpMode() & Status::Charging)
 80095c6:	4b40      	ldr	r3, [pc, #256]	; (80096c8 <HAL_IncTick+0x130>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	b123      	cbz	r3, 80095d6 <HAL_IncTick+0x3e>
 80095cc:	6802      	ldr	r2, [r0, #0]
    void setOpMode(uint8_t const opMode) noexcept {
        mOpMode = opMode;
    }

    [[nodiscard]] uint8_t getOpMode() const noexcept {
        return mOpMode;
 80095ce:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80095d2:	0752      	lsls	r2, r2, #29
 80095d4:	d410      	bmi.n	80095f8 <HAL_IncTick+0x60>
            nlg5->tick();
    }

    if (ivt != nullptr)
 80095d6:	4b3d      	ldr	r3, [pc, #244]	; (80096cc <HAL_IncTick+0x134>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	b15b      	cbz	r3, 80095f4 <HAL_IncTick+0x5c>
 80095dc:	f3bf 8f5b 	dmb	ish
 80095e0:	330c      	adds	r3, #12
 80095e2:	e853 2f00 	ldrex	r2, [r3]
 80095e6:	3201      	adds	r2, #1
 80095e8:	e843 2100 	strex	r1, r2, [r3]
 80095ec:	2900      	cmp	r1, #0
 80095ee:	d1f8      	bne.n	80095e2 <HAL_IncTick+0x4a>
 80095f0:	f3bf 8f5b 	dmb	ish
        ivt->tick();
}}
 80095f4:	b004      	add	sp, #16
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	f103 0208 	add.w	r2, r3, #8
 80095fc:	f3bf 8f5b 	dmb	ish
 8009600:	e852 1f00 	ldrex	r1, [r2]
 8009604:	3101      	adds	r1, #1
 8009606:	e842 1000 	strex	r0, r1, [r2]
 800960a:	2800      	cmp	r0, #0
 800960c:	d1f8      	bne.n	8009600 <HAL_IncTick+0x68>
 800960e:	f3bf 8f5b 	dmb	ish
         * NOTE: It would be nicer if the NLG5 class had a reference to the CAN struct and sent this stuff itself when it was ready. */

#if CAN_ENABLED
        static std::atomic<uint8_t> event_counter{ 0 };

        if (++mCounter >= kChargerEventTimeout) {
 8009612:	2963      	cmp	r1, #99	; 0x63
 8009614:	d9df      	bls.n	80095d6 <HAL_IncTick+0x3e>
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8009616:	f3bf 8f5b 	dmb	ish
 800961a:	2200      	movs	r2, #0
 800961c:	609a      	str	r2, [r3, #8]
 800961e:	f3bf 8f5b 	dmb	ish
            mCounter = 0;

            /* Checks specified chargers MOB status */
            if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 8009622:	7d1a      	ldrb	r2, [r3, #20]
 8009624:	2a88      	cmp	r2, #136	; 0x88
 8009626:	d039      	beq.n	800969c <HAL_IncTick+0x104>
 8009628:	7d1a      	ldrb	r2, [r3, #20]
 800962a:	2a98      	cmp	r2, #152	; 0x98
 800962c:	d036      	beq.n	800969c <HAL_IncTick+0x104>
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }
 800962e:	f3bf 8f5b 	dmb	ish
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <HAL_IncTick+0x138>)
 8009634:	e8d2 1f4f 	ldrexb	r1, [r2]
 8009638:	3101      	adds	r1, #1
 800963a:	e8c2 1f40 	strexb	r0, r1, [r2]
 800963e:	2800      	cmp	r0, #0
 8009640:	d1f8      	bne.n	8009634 <HAL_IncTick+0x9c>
 8009642:	f3bf 8f5b 	dmb	ish
 8009646:	b2c9      	uxtb	r1, r1
                if (++event_counter >= 5) {
 8009648:	2904      	cmp	r1, #4
 800964a:	d82e      	bhi.n	80096aa <HAL_IncTick+0x112>
                    ctrl = C_C_EL;
                    event_counter = 0;
                } else {
                    ctrl = C_C_EN;
 800964c:	2280      	movs	r2, #128	; 0x80
 800964e:	731a      	strb	r2, [r3, #12]
                }
            }

            TxHeader.StdId = NLGACtrl;
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8009656:	6011      	str	r1, [r2, #0]
            TxHeader.DLC = 7;
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	2107      	movs	r1, #7
 800965c:	6111      	str	r1, [r2, #16]
            uint32_t mailbox{ 0 };
            uint8_t data[7] {
                ctrl,
 800965e:	7b1d      	ldrb	r5, [r3, #12]
                static_cast<uint8_t>(mc_limit >> 8),
 8009660:	89d8      	ldrh	r0, [r3, #14]
                static_cast<uint8_t>(mc_limit),
                static_cast<uint8_t>(ov_limit >> 8),
 8009662:	8a59      	ldrh	r1, [r3, #18]
                static_cast<uint8_t>(ov_limit),
                static_cast<uint8_t>(oc_limit >> 8),
 8009664:	8a1a      	ldrh	r2, [r3, #16]
                static_cast<uint8_t>(oc_limit)
            };
 8009666:	f88d 5008 	strb.w	r5, [sp, #8]
                static_cast<uint8_t>(oc_limit)
 800966a:	8a1c      	ldrh	r4, [r3, #16]
            };
 800966c:	f88d 000a 	strb.w	r0, [sp, #10]
                static_cast<uint8_t>(mc_limit >> 8),
 8009670:	1206      	asrs	r6, r0, #8
                static_cast<uint8_t>(ov_limit >> 8),
 8009672:	120d      	asrs	r5, r1, #8
                static_cast<uint8_t>(oc_limit >> 8),
 8009674:	0a12      	lsrs	r2, r2, #8
            uint32_t mailbox{ 0 };
 8009676:	2000      	movs	r0, #0
            };
 8009678:	f88d 200d 	strb.w	r2, [sp, #13]
 800967c:	f88d 6009 	strb.w	r6, [sp, #9]
 8009680:	f88d 100c 	strb.w	r1, [sp, #12]
 8009684:	f88d 500b 	strb.w	r5, [sp, #11]
 8009688:	f88d 400e 	strb.w	r4, [sp, #14]
            uint32_t mailbox{ 0 };
 800968c:	9001      	str	r0, [sp, #4]

            HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &mailbox);
 800968e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009692:	aa02      	add	r2, sp, #8
 8009694:	ab01      	add	r3, sp, #4
 8009696:	f7f7 f991 	bl	80009bc <HAL_CAN_AddTxMessage>
 800969a:	e79c      	b.n	80095d6 <HAL_IncTick+0x3e>
            if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 800969c:	7e1a      	ldrb	r2, [r3, #24]
 800969e:	2a88      	cmp	r2, #136	; 0x88
 80096a0:	d0d6      	beq.n	8009650 <HAL_IncTick+0xb8>
 80096a2:	7e1a      	ldrb	r2, [r3, #24]
 80096a4:	2a98      	cmp	r2, #152	; 0x98
 80096a6:	d1c2      	bne.n	800962e <HAL_IncTick+0x96>
 80096a8:	e7d2      	b.n	8009650 <HAL_IncTick+0xb8>
                    ctrl = C_C_EL;
 80096aa:	2140      	movs	r1, #64	; 0x40
 80096ac:	7319      	strb	r1, [r3, #12]
	__atomic_store_n(&_M_i, __i, __m);
 80096ae:	2100      	movs	r1, #0
 80096b0:	f3bf 8f5b 	dmb	ish
 80096b4:	7011      	strb	r1, [r2, #0]
 80096b6:	f3bf 8f5b 	dmb	ish
 80096ba:	e7c9      	b.n	8009650 <HAL_IncTick+0xb8>
 80096bc:	20000280 	.word	0x20000280
 80096c0:	20000004 	.word	0x20000004
 80096c4:	20000268 	.word	0x20000268
 80096c8:	20000260 	.word	0x20000260
 80096cc:	20000254 	.word	0x20000254
 80096d0:	200000e0 	.word	0x200000e0

080096d4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80096d4:	b530      	push	{r4, r5, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80096d6:	2400      	movs	r4, #0
{
 80096d8:	b0ad      	sub	sp, #180	; 0xb4
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80096da:	4621      	mov	r1, r4
 80096dc:	a815      	add	r0, sp, #84	; 0x54
 80096de:	225c      	movs	r2, #92	; 0x5c
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80096e0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80096e4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80096e8:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80096ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80096ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80096f2:	9407      	str	r4, [sp, #28]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80096f4:	f001 fe41 	bl	800b37a <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80096f8:	4b1f      	ldr	r3, [pc, #124]	; (8009778 <_Z18SystemClock_Configv+0xa4>)
 80096fa:	9401      	str	r4, [sp, #4]
 80096fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80096fe:	4a1f      	ldr	r2, [pc, #124]	; (800977c <_Z18SystemClock_Configv+0xa8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8009700:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8009704:	6419      	str	r1, [r3, #64]	; 0x40
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009710:	9402      	str	r4, [sp, #8]
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	6813      	ldr	r3, [r2, #0]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009720:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009722:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009726:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009728:	2010      	movs	r0, #16
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800972a:	2302      	movs	r3, #2
    RCC_OscInitStruct.PLL.PLLM = 8;
 800972c:	2108      	movs	r1, #8
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800972e:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009730:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLN = 50;
 8009732:	2232      	movs	r2, #50	; 0x32
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009734:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009736:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
    RCC_OscInitStruct.PLL.PLLR = 2;
 8009738:	9314      	str	r3, [sp, #80]	; 0x50
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800973a:	900c      	str	r0, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800973c:	2303      	movs	r3, #3
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800973e:	2501      	movs	r5, #1
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009740:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLN = 50;
 8009742:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8009746:	9313      	str	r3, [sp, #76]	; 0x4c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009748:	950b      	str	r5, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800974a:	f7f8 fdbb 	bl	80022c4 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800974e:	4621      	mov	r1, r4
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009750:	230f      	movs	r3, #15
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009752:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009754:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009756:	e9cd 4404 	strd	r4, r4, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800975a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800975e:	f7f8 f84f 	bl	8001800 <HAL_RCC_ClockConfig>
    {
        Error_Handler();
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8009762:	f44f 7340 	mov.w	r3, #768	; 0x300
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009766:	a815      	add	r0, sp, #84	; 0x54
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009768:	942a      	str	r4, [sp, #168]	; 0xa8
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800976a:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800976c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800976e:	f7f8 f92d 	bl	80019cc <HAL_RCCEx_PeriphCLKConfig>
    {
        Error_Handler();
    }
}
 8009772:	b02d      	add	sp, #180	; 0xb4
 8009774:	bd30      	pop	{r4, r5, pc}
 8009776:	bf00      	nop
 8009778:	40023800 	.word	0x40023800
 800977c:	40007000 	.word	0x40007000

08009780 <main>:
{
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	ed2d 8b06 	vpush	{d8-d10}
 8009788:	f5ad 7d6b 	sub.w	sp, sp, #940	; 0x3ac
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800978c:	2500      	movs	r5, #0
 800978e:	f50d 790a 	add.w	r9, sp, #552	; 0x228
    HAL_Init();
 8009792:	f7f6 feb7 	bl	8000504 <HAL_Init>
    SystemClock_Config();
 8009796:	f7ff ff9d 	bl	80096d4 <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800979a:	e9c9 5500 	strd	r5, r5, [r9]
 800979e:	e9c9 5502 	strd	r5, r5, [r9, #8]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097a2:	4bd4      	ldr	r3, [pc, #848]	; (8009af4 <main+0x374>)
 80097a4:	9508      	str	r5, [sp, #32]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097a6:	f8c9 5010 	str.w	r5, [r9, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 80097ac:	48d2      	ldr	r0, [pc, #840]	; (8009af8 <main+0x378>)
    hcan1.Instance = CAN1;
 80097ae:	4ed3      	ldr	r6, [pc, #844]	; (8009afc <main+0x37c>)
    hcan2.Instance = CAN2;
 80097b0:	4fd3      	ldr	r7, [pc, #844]	; (8009b00 <main+0x380>)
    hspi1.Instance = SPI1;
 80097b2:	f8df 837c 	ldr.w	r8, [pc, #892]	; 8009b30 <main+0x3b0>
    htim2.Instance = TIM2;
 80097b6:	4cd3      	ldr	r4, [pc, #844]	; (8009b04 <main+0x384>)
    : hcan{ hcan }, TxHeader{ TxHeader}, ctrl{ C_C_EN }, mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit }, a_buffer{ 0 }, b_buffer{ 0 } {};
 80097b8:	f8df b378 	ldr.w	fp, [pc, #888]	; 8009b34 <main+0x3b4>
    [[nodiscard]] State getAIRState() const noexcept {
        return mAIRState;
    }

    bool isError(Error const e, bool const error) noexcept {
        if (error) {
 80097bc:	ed9f aad2 	vldr	s20, [pc, #840]	; 8009b08 <main+0x388>
 80097c0:	eddf 9ad2 	vldr	s19, [pc, #840]	; 8009b0c <main+0x38c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097c4:	f042 0204 	orr.w	r2, r2, #4
 80097c8:	631a      	str	r2, [r3, #48]	; 0x30
 80097ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097cc:	f002 0204 	and.w	r2, r2, #4
 80097d0:	9208      	str	r2, [sp, #32]
 80097d2:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80097d4:	9509      	str	r5, [sp, #36]	; 0x24
 80097d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097dc:	631a      	str	r2, [r3, #48]	; 0x30
 80097de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097e0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80097e4:	9209      	str	r2, [sp, #36]	; 0x24
 80097e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097e8:	950a      	str	r5, [sp, #40]	; 0x28
 80097ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ec:	f042 0201 	orr.w	r2, r2, #1
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
 80097f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f4:	f002 0201 	and.w	r2, r2, #1
 80097f8:	920a      	str	r2, [sp, #40]	; 0x28
 80097fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097fc:	950b      	str	r5, [sp, #44]	; 0x2c
 80097fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009800:	f042 0202 	orr.w	r2, r2, #2
 8009804:	631a      	str	r2, [r3, #48]	; 0x30
 8009806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009808:	f002 0202 	and.w	r2, r2, #2
 800980c:	920b      	str	r2, [sp, #44]	; 0x2c
 800980e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009810:	950c      	str	r5, [sp, #48]	; 0x30
 8009812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009814:	f042 0208 	orr.w	r2, r2, #8
 8009818:	631a      	str	r2, [r3, #48]	; 0x30
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8009822:	2201      	movs	r2, #1
 8009824:	213f      	movs	r1, #63	; 0x3f
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8009828:	f7f7 ffb6 	bl	8001798 <HAL_GPIO_WritePin>
            |IO_1_Pin|IO_2_Pin, GPIO_PIN_SET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 800982c:	462a      	mov	r2, r5
 800982e:	2180      	movs	r1, #128	; 0x80
 8009830:	48b7      	ldr	r0, [pc, #732]	; (8009b10 <main+0x390>)
 8009832:	f7f7 ffb1 	bl	8001798 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 8009836:	462a      	mov	r2, r5
 8009838:	2103      	movs	r1, #3
 800983a:	48b6      	ldr	r0, [pc, #728]	; (8009b14 <main+0x394>)
 800983c:	f7f7 ffac 	bl	8001798 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8009840:	233f      	movs	r3, #63	; 0x3f
            |IO_1_Pin|IO_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009842:	4649      	mov	r1, r9
 8009844:	48ac      	ldr	r0, [pc, #688]	; (8009af8 <main+0x378>)
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8009846:	f8c9 3000 	str.w	r3, [r9]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800984a:	2301      	movs	r3, #1
 800984c:	f8c9 3004 	str.w	r3, [r9, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009850:	e9c9 5502 	strd	r5, r5, [r9, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009854:	f7f7 fdf6 	bl	8001444 <HAL_GPIO_Init>

    /*Configure GPIO pin : IO_0_Pin */
    GPIO_InitStruct.Pin = IO_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009858:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800985a:	4649      	mov	r1, r9
 800985c:	48ac      	ldr	r0, [pc, #688]	; (8009b10 <main+0x390>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800985e:	f8c9 500c 	str.w	r5, [r9, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009862:	e9c9 3501 	strd	r3, r5, [r9, #4]
    GPIO_InitStruct.Pin = IO_0_Pin;
 8009866:	2380      	movs	r3, #128	; 0x80
 8009868:	f8c9 3000 	str.w	r3, [r9]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800986c:	f7f7 fdea 	bl	8001444 <HAL_GPIO_Init>

    /*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin */
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009870:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009872:	4649      	mov	r1, r9
 8009874:	48a7      	ldr	r0, [pc, #668]	; (8009b14 <main+0x394>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009876:	f8c9 500c 	str.w	r5, [r9, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987a:	e9c9 3501 	strd	r3, r5, [r9, #4]
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 800987e:	2303      	movs	r3, #3
 8009880:	f8c9 3000 	str.w	r3, [r9]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009884:	f7f7 fdde 	bl	8001444 <HAL_GPIO_Init>
    /*Configure GPIO pin : FansPWM_Pin */
    GPIO_InitStruct.Pin = FansPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009888:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800988a:	f04f 0a02 	mov.w	sl, #2
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800988e:	4649      	mov	r1, r9
 8009890:	48a0      	ldr	r0, [pc, #640]	; (8009b14 <main+0x394>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009892:	f8c9 3010 	str.w	r3, [r9, #16]
    GPIO_InitStruct.Pin = FansPWM_Pin;
 8009896:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009898:	e9c9 3a00 	strd	r3, sl, [r9]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800989c:	e9c9 5502 	strd	r5, r5, [r9, #8]
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 80098a0:	f7f7 fdd0 	bl	8001444 <HAL_GPIO_Init>

    /*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 80098a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098a8:	4649      	mov	r1, r9
 80098aa:	4899      	ldr	r0, [pc, #612]	; (8009b10 <main+0x390>)
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 80098ac:	f8c9 3000 	str.w	r3, [r9]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098b0:	e9c9 5501 	strd	r5, r5, [r9, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098b4:	f7f7 fdc6 	bl	8001444 <HAL_GPIO_Init>

    /*Configure GPIO pin : SOS_Pin */
    GPIO_InitStruct.Pin = SOS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098b8:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 80098ba:	4649      	mov	r1, r9
 80098bc:	4895      	ldr	r0, [pc, #596]	; (8009b14 <main+0x394>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098be:	e9c9 3501 	strd	r3, r5, [r9, #4]
    GPIO_InitStruct.Pin = SOS_Pin;
 80098c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098c6:	f8c9 3000 	str.w	r3, [r9]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 80098ca:	f7f7 fdbb 	bl	8001444 <HAL_GPIO_Init>
    MX_FATFS_Init();
 80098ce:	f7ff fe09 	bl	80094e4 <MX_FATFS_Init>
    hcan1.Instance = CAN1;
 80098d2:	4b91      	ldr	r3, [pc, #580]	; (8009b18 <main+0x398>)
 80098d4:	6033      	str	r3, [r6, #0]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80098d6:	4630      	mov	r0, r6
    hcan1.Init.Prescaler = 16;
 80098d8:	2310      	movs	r3, #16
    hcan1.Init.TimeTriggeredMode = DISABLE;
 80098da:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hcan1.Init.Prescaler = 16;
 80098de:	6073      	str	r3, [r6, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 80098e0:	60b5      	str	r5, [r6, #8]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80098e2:	e9c6 5503 	strd	r5, r5, [r6, #12]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 80098e6:	7735      	strb	r5, [r6, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 80098e8:	7775      	strb	r5, [r6, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80098ea:	f7f6 fe8b 	bl	8000604 <HAL_CAN_Init>
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80098ee:	2301      	movs	r3, #1
    sFilterConfig.FilterIdHigh = Setting << 5;
 80098f0:	f64e 51c0 	movw	r1, #60864	; 0xedc0
    sFilterConfig.FilterIdLow = NLGAStat << 5;
 80098f4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
    sFilterConfig.FilterMaskIdHigh = NLGBStat << 5;
 80098f8:	f44f 4c44 	mov.w	ip, #50176	; 0xc400
    sFilterConfig.FilterMaskIdLow = LoggerReq << 5;
 80098fc:	f24f 6280 	movw	r2, #63104	; 0xf680
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // allows 4 IDs to be set to one filter with IDLIST
 8009900:	e9c9 3506 	strd	r3, r5, [r9, #24]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8009904:	f8c9 3010 	str.w	r3, [r9, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8009908:	f8c9 3020 	str.w	r3, [r9, #32]
    sFilterConfig.FilterIdHigh = Setting << 5;
 800990c:	f8c9 1000 	str.w	r1, [r9]
    sFilterConfig.SlaveStartFilterBank = 14;
 8009910:	230e      	movs	r3, #14
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8009912:	4649      	mov	r1, r9
    sFilterConfig.FilterIdLow = NLGAStat << 5;
 8009914:	f8c9 0004 	str.w	r0, [r9, #4]
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8009918:	4630      	mov	r0, r6
    sFilterConfig.FilterMaskIdLow = LoggerReq << 5;
 800991a:	e9c9 c202 	strd	ip, r2, [r9, #8]
    sFilterConfig.SlaveStartFilterBank = 14;
 800991e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
    sFilterConfig.FilterBank = 0;
 8009922:	f8c9 5014 	str.w	r5, [r9, #20]
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8009926:	f7f6 ff69 	bl	80007fc <HAL_CAN_ConfigFilter>
    hcan2.Instance = CAN2;
 800992a:	4a7c      	ldr	r2, [pc, #496]	; (8009b1c <main+0x39c>)
    hcan2.Init.TimeTriggeredMode = DISABLE;
 800992c:	61bd      	str	r5, [r7, #24]
    hcan2.Init.Prescaler = 16;
 800992e:	2310      	movs	r3, #16
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8009930:	4638      	mov	r0, r7
    hcan2.Init.Prescaler = 16;
 8009932:	607b      	str	r3, [r7, #4]
    hcan2.Instance = CAN2;
 8009934:	603a      	str	r2, [r7, #0]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009936:	e9c7 5502 	strd	r5, r5, [r7, #8]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800993a:	e9c7 5504 	strd	r5, r5, [r7, #16]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 800993e:	773d      	strb	r5, [r7, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 8009940:	777d      	strb	r5, [r7, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8009942:	f7f6 fe5f 	bl	8000604 <HAL_CAN_Init>
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8009946:	f04f 0e0e 	mov.w	lr, #14
 800994a:	2101      	movs	r1, #1
 800994c:	e9c9 e105 	strd	lr, r1, [r9, #20]
    sFilterConfig.FilterActivation = ENABLE;
 8009950:	e9c9 5107 	strd	r5, r1, [r9, #28]
    sFilterConfig.SlaveStartFilterBank = 14;
 8009954:	210e      	movs	r1, #14
    sFilterConfig.FilterIdLow = IVT_U1 << 5;
 8009956:	f24a 4240 	movw	r2, #42048	; 0xa440
    sFilterConfig.FilterMaskIdHigh = IVT_U2 << 5;
 800995a:	f24a 4c60 	movw	ip, #42080	; 0xa460
    sFilterConfig.FilterMaskIdLow = IVT_U3 << 5;
 800995e:	f24a 4380 	movw	r3, #42112	; 0xa480
    HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8009962:	4638      	mov	r0, r7
    sFilterConfig.SlaveStartFilterBank = 14;
 8009964:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
    sFilterConfig.FilterIdHigh = IVT_I << 5;
 8009968:	f24a 4720 	movw	r7, #42016	; 0xa420
    HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 800996c:	4649      	mov	r1, r9
    sFilterConfig.FilterIdLow = IVT_U1 << 5;
 800996e:	e9c9 7200 	strd	r7, r2, [r9]
    sFilterConfig.FilterMaskIdLow = IVT_U3 << 5;
 8009972:	e9c9 c302 	strd	ip, r3, [r9, #8]
    hspi1.Instance = SPI1;
 8009976:	4f6a      	ldr	r7, [pc, #424]	; (8009b20 <main+0x3a0>)
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8009978:	f8c9 5010 	str.w	r5, [r9, #16]
    HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 800997c:	f7f6 ff3e 	bl	80007fc <HAL_CAN_ConfigFilter>
    hsd.Instance = SDIO;
 8009980:	4b68      	ldr	r3, [pc, #416]	; (8009b24 <main+0x3a4>)
 8009982:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8009b38 <main+0x3b8>
 8009986:	f8c3 c000 	str.w	ip, [r3]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800998a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi1.Init.CRCPolynomial = 10;
 800998e:	f04f 0e0a 	mov.w	lr, #10
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8009992:	f44f 7182 	mov.w	r1, #260	; 0x104
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8009996:	f8c8 2018 	str.w	r2, [r8, #24]
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800999a:	4640      	mov	r0, r8
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 800999c:	2201      	movs	r2, #1
    hspi1.Init.CRCPolynomial = 10;
 800999e:	f8c8 e02c 	str.w	lr, [r8, #44]	; 0x2c
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80099a2:	e9c8 7100 	strd	r7, r1, [r8]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 80099a6:	f8c8 2014 	str.w	r2, [r8, #20]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80099aa:	e9c3 5501 	strd	r5, r5, [r3, #4]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80099ae:	e9c3 5503 	strd	r5, r5, [r3, #12]
    hsd.Init.ClockDiv = 0;
 80099b2:	e9c3 5505 	strd	r5, r5, [r3, #20]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // correct
 80099b6:	e9c8 5502 	strd	r5, r5, [r8, #8]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // correct
 80099ba:	f8c8 5010 	str.w	r5, [r8, #16]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80099be:	e9c8 5507 	strd	r5, r5, [r8, #28]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099c2:	e9c8 5509 	strd	r5, r5, [r8, #36]	; 0x24
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80099c6:	f7fa f84f 	bl	8003a68 <HAL_SPI_Init>
    htim2.Init.Period = 19999;
 80099ca:	f644 631f 	movw	r3, #19999	; 0x4e1f
    htim2.Init.Prescaler = 800;
 80099ce:	f44f 7248 	mov.w	r2, #800	; 0x320
    htim2.Init.Period = 19999;
 80099d2:	60e3      	str	r3, [r4, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80099d4:	4620      	mov	r0, r4
    htim2.Instance = TIM2;
 80099d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    htim2.Init.Prescaler = 800;
 80099da:	6062      	str	r2, [r4, #4]
    htim2.Instance = TIM2;
 80099dc:	6023      	str	r3, [r4, #0]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099de:	60a5      	str	r5, [r4, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099e0:	6125      	str	r5, [r4, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099e2:	61a5      	str	r5, [r4, #24]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80099e4:	e9c9 5500 	strd	r5, r5, [r9]
 80099e8:	e9c9 5502 	strd	r5, r5, [r9, #8]
 80099ec:	e9c9 5504 	strd	r5, r5, [r9, #16]
 80099f0:	f8c9 5018 	str.w	r5, [r9, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099f4:	9542      	str	r5, [sp, #264]	; 0x108
 80099f6:	9543      	str	r5, [sp, #268]	; 0x10c
 80099f8:	9544      	str	r5, [sp, #272]	; 0x110
 80099fa:	9545      	str	r5, [sp, #276]	; 0x114
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099fc:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009a00:	f7fa fd86 	bl	8004510 <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a08:	a942      	add	r1, sp, #264	; 0x108
 8009a0a:	4620      	mov	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a0c:	9342      	str	r3, [sp, #264]	; 0x108
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a0e:	f7fa fee3 	bl	80047d8 <HAL_TIM_ConfigClockSource>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009a12:	4620      	mov	r0, r4
 8009a14:	f7fa fda7 	bl	8004566 <HAL_TIM_PWM_Init>
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a18:	a912      	add	r1, sp, #72	; 0x48
 8009a1a:	4620      	mov	r0, r4
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a1c:	2760      	movs	r7, #96	; 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a1e:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a22:	f7fb faa1 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009a26:	220c      	movs	r2, #12
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4620      	mov	r0, r4
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a2c:	f8c9 7000 	str.w	r7, [r9]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a30:	e9c9 5501 	strd	r5, r5, [r9, #4]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a34:	f8c9 5010 	str.w	r5, [r9, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009a38:	f7fa fe08 	bl	800464c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_MspPostInit(&htim2);
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f001 fb17 	bl	800b070 <HAL_TIM_MspPostInit>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8009a42:	4620      	mov	r0, r4
 8009a44:	210c      	movs	r1, #12
 8009a46:	f7fa fdc3 	bl	80045d0 <HAL_TIM_PWM_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8009a4a:	2113      	movs	r1, #19
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7f7 f9a2 	bl	8000d96 <HAL_CAN_ActivateNotification>
    nlg5 = new NLG5(hcan1, TxHeader);
 8009a52:	201c      	movs	r0, #28
 8009a54:	f001 fc33 	bl	800b2be <_Znwj>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f640 32ae 	movw	r2, #2990	; 0xbae
 8009a5e:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 8009a62:	21a0      	movs	r1, #160	; 0xa0
 8009a64:	825a      	strh	r2, [r3, #18]
 8009a66:	243c      	movs	r4, #60	; 0x3c
 8009a68:	4a2f      	ldr	r2, [pc, #188]	; (8009b28 <main+0x3a8>)
 8009a6a:	f883 c00c 	strb.w	ip, [r3, #12]
 8009a6e:	81d9      	strh	r1, [r3, #14]
 8009a70:	821c      	strh	r4, [r3, #16]
 8009a72:	601e      	str	r6, [r3, #0]
 8009a74:	615d      	str	r5, [r3, #20]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8009a76:	609d      	str	r5, [r3, #8]
 8009a78:	619d      	str	r5, [r3, #24]
 8009a7a:	f8c3 b004 	str.w	fp, [r3, #4]
    ivt = new IVT;
 8009a7e:	2010      	movs	r0, #16
    nlg5 = new NLG5(hcan1, TxHeader);
 8009a80:	6013      	str	r3, [r2, #0]
    ivt = new IVT;
 8009a82:	f001 fc1c 	bl	800b2be <_Znwj>
 8009a86:	4603      	mov	r3, r0
 8009a88:	4a28      	ldr	r2, [pc, #160]	; (8009b2c <main+0x3ac>)
 8009a8a:	60dd      	str	r5, [r3, #12]
    status = new Status(Status::Core | Status::Logging);
 8009a8c:	4638      	mov	r0, r7
    ivt = new IVT;
 8009a8e:	6013      	str	r3, [r2, #0]
    status = new Status(Status::Core | Status::Logging);
 8009a90:	f001 fc15 	bl	800b2be <_Znwj>
    Status(uint8_t const opMode) : mOpMode { opMode } {
 8009a94:	4629      	mov	r1, r5
 8009a96:	4604      	mov	r4, r0
 8009a98:	2224      	movs	r2, #36	; 0x24
 8009a9a:	f001 fc6e 	bl	800b37a <memset>
 8009a9e:	2711      	movs	r7, #17
#ifndef COUNTER_H_
#define COUNTER_H_

class Counter {
public:
    Counter(uint16_t const limit) : limit{ limit } {}
 8009aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009aa4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8009aa8:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8009aac:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8009ab0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8009ab4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ab8:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8009abc:	65e3      	str	r3, [r4, #92]	; 0x5c
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 8009abe:	462a      	mov	r2, r5
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	4814      	ldr	r0, [pc, #80]	; (8009b14 <main+0x394>)
    Status(uint8_t const opMode) : mOpMode { opMode } {
 8009ac4:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8009ac8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8009acc:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8009ad0:	65a6      	str	r6, [r4, #88]	; 0x58
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 8009ad2:	f7f7 fe61 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 8009ad6:	462a      	mov	r2, r5
 8009ad8:	4651      	mov	r1, sl
 8009ada:	4807      	ldr	r0, [pc, #28]	; (8009af8 <main+0x378>)
 8009adc:	f7f7 fe5c 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 8009ae0:	462a      	mov	r2, r5
 8009ae2:	4651      	mov	r1, sl
 8009ae4:	480b      	ldr	r0, [pc, #44]	; (8009b14 <main+0x394>)
        mPreState = preState;
 8009ae6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 8009aea:	f7f7 fe55 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 8009aee:	462a      	mov	r2, r5
 8009af0:	2104      	movs	r1, #4
 8009af2:	e023      	b.n	8009b3c <main+0x3bc>
 8009af4:	40023800 	.word	0x40023800
 8009af8:	40020800 	.word	0x40020800
 8009afc:	200000e8 	.word	0x200000e8
 8009b00:	20000110 	.word	0x20000110
 8009b04:	20000214 	.word	0x20000214
 8009b08:	4af42400 	.word	0x4af42400
 8009b0c:	43340000 	.word	0x43340000
 8009b10:	40020000 	.word	0x40020000
 8009b14:	40020400 	.word	0x40020400
 8009b18:	40006400 	.word	0x40006400
 8009b1c:	40006800 	.word	0x40006800
 8009b20:	40013000 	.word	0x40013000
 8009b24:	20000138 	.word	0x20000138
 8009b28:	20000260 	.word	0x20000260
 8009b2c:	20000254 	.word	0x20000254
 8009b30:	200001bc 	.word	0x200001bc
 8009b34:	20000008 	.word	0x20000008
 8009b38:	40012c00 	.word	0x40012c00
 8009b3c:	48c2      	ldr	r0, [pc, #776]	; (8009e48 <main+0x6c8>)
 8009b3e:	f7f7 fe2b 	bl	8001798 <HAL_GPIO_WritePin>
 8009b42:	4bc2      	ldr	r3, [pc, #776]	; (8009e4c <main+0x6cc>)
        mAIRState = AIRState;
 8009b44:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
    ltc6811 = new LTC6811(hspi1);
 8009b48:	f44f 705d 	mov.w	r0, #884	; 0x374
    status = new Status(Status::Core | Status::Logging);
 8009b4c:	601c      	str	r4, [r3, #0]
    ltc6811 = new LTC6811(hspi1);
 8009b4e:	f001 fbb6 	bl	800b2be <_Znwj>
 8009b52:	4652      	mov	r2, sl
 8009b54:	4641      	mov	r1, r8
 8009b56:	462b      	mov	r3, r5
 8009b58:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8009b5c:	9500      	str	r5, [sp, #0]
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f7fe ff50 	bl	8008a04 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>
 8009b64:	4bba      	ldr	r3, [pc, #744]	; (8009e50 <main+0x6d0>)
    pwm_fan = new PWM_Fan;
 8009b66:	2001      	movs	r0, #1
    ltc6811 = new LTC6811(hspi1);
 8009b68:	601c      	str	r4, [r3, #0]
    pwm_fan = new PWM_Fan;
 8009b6a:	f001 fba8 	bl	800b2be <_Znwj>
#include <algorithm>
class PWM_Fan {
public:
    enum Mode { Manual, Automatic };

    PWM_Fan(uint8_t const duty_cycle = kLowDutyCycle) {
 8009b6e:	f04f 0101 	mov.w	r1, #1
 8009b72:	7001      	strb	r1, [r0, #0]

    void setDutyCycle(uint8_t const duty_cycle) const noexcept {
        /* PWM period is 20000 cycles, so the duty cycle is:
         * (duty_cycle / 100) * 20000 or, duty_cycle * 200
         * TODO: This is probably not working right! */
        TIM2->CCR4 = std::clamp(duty_cycle, kMinDutyCycle, kMaxDutyCycle) * 200;
 8009b74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009b78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009b7c:	640a      	str	r2, [r1, #64]	; 0x40
 8009b7e:	4ab5      	ldr	r2, [pc, #724]	; (8009e54 <main+0x6d4>)
 8009b80:	4603      	mov	r3, r0
    HAL_Delay(5000);
 8009b82:	f241 3088 	movw	r0, #5000	; 0x1388
    pwm_fan = new PWM_Fan;
 8009b86:	6013      	str	r3, [r2, #0]
    HAL_Delay(5000);
 8009b88:	f7f6 fd1a 	bl	80005c0 <HAL_Delay>
        HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 8009b8c:	48ae      	ldr	r0, [pc, #696]	; (8009e48 <main+0x6c8>)
 8009b8e:	2101      	movs	r1, #1
 8009b90:	f7f7 fe1b 	bl	80017ca <HAL_GPIO_TogglePin>
        auto const op_mode = status->getOpMode();
 8009b94:	4bad      	ldr	r3, [pc, #692]	; (8009e4c <main+0x6cc>)
 8009b96:	681b      	ldr	r3, [r3, #0]
        return mOpMode;
 8009b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b9c:	b2db      	uxtb	r3, r3
        if (op_mode & Status::Core) {
 8009b9e:	07d8      	lsls	r0, r3, #31
 8009ba0:	9305      	str	r3, [sp, #20]
 8009ba2:	f100 81d5 	bmi.w	8009f50 <main+0x7d0>
        if (op_mode & Status::Debug) {
 8009ba6:	071a      	lsls	r2, r3, #28
 8009ba8:	f100 80e6 	bmi.w	8009d78 <main+0x5f8>
        if (op_mode & Status::Logging) {
 8009bac:	9b05      	ldr	r3, [sp, #20]
 8009bae:	06db      	lsls	r3, r3, #27
 8009bb0:	d5ec      	bpl.n	8009b8c <main+0x40c>
            if (retSD == FR_OK) {
 8009bb2:	4ba9      	ldr	r3, [pc, #676]	; (8009e58 <main+0x6d8>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e8      	bne.n	8009b8c <main+0x40c>
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 8009bba:	4ba8      	ldr	r3, [pc, #672]	; (8009e5c <main+0x6dc>)
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 8009bc2:	d2e3      	bcs.n	8009b8c <main+0x40c>
 8009bc4:	2232      	movs	r2, #50	; 0x32
 8009bc6:	49a6      	ldr	r1, [pc, #664]	; (8009e60 <main+0x6e0>)
 8009bc8:	48a4      	ldr	r0, [pc, #656]	; (8009e5c <main+0x6dc>)
 8009bca:	f7fd fe03 	bl	80077d4 <f_open>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1db      	bne.n	8009b8c <main+0x40c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8009bd4:	4d9d      	ldr	r5, [pc, #628]	; (8009e4c <main+0x6cc>)
                    HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8009bd6:	489c      	ldr	r0, [pc, #624]	; (8009e48 <main+0x6c8>)
 8009bd8:	2104      	movs	r1, #4
 8009bda:	f7f7 fdf6 	bl	80017ca <HAL_GPIO_TogglePin>
 8009bde:	682a      	ldr	r2, [r5, #0]

    [[nodiscard]] uint32_t getUptime() const noexcept {
        /* TODO:
         * This function is returning time in deciseconds, because that's what it seemed like it was doing on the old BMS.
         * If this is wrong, remove the divisor to return milliseconds, or divide by 1000 to return seconds. */
        return mCounter / 10;
 8009be0:	4ba0      	ldr	r3, [pc, #640]	; (8009e64 <main+0x6e4>)
 8009be2:	f3bf 8f5b 	dmb	ish
 8009be6:	6a92      	ldr	r2, [r2, #40]	; 0x28
                    f_printf(&SDFile, "%u,", status->getUptime());
 8009be8:	499f      	ldr	r1, [pc, #636]	; (8009e68 <main+0x6e8>)
 8009bea:	f3bf 8f5b 	dmb	ish
 8009bee:	fba3 3202 	umull	r3, r2, r3, r2
 8009bf2:	08d2      	lsrs	r2, r2, #3
 8009bf4:	4899      	ldr	r0, [pc, #612]	; (8009e5c <main+0x6dc>)
 8009bf6:	f7fe fc2b 	bl	8008450 <f_printf>
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 8009bfa:	6828      	ldr	r0, [r5, #0]
 8009bfc:	499b      	ldr	r1, [pc, #620]	; (8009e6c <main+0x6ec>)
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 8009bfe:	6942      	ldr	r2, [r0, #20]
 8009c00:	6903      	ldr	r3, [r0, #16]
 8009c02:	68c7      	ldr	r7, [r0, #12]
 8009c04:	6885      	ldr	r5, [r0, #8]
 8009c06:	6846      	ldr	r6, [r0, #4]
 8009c08:	6800      	ldr	r0, [r0, #0]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 8009c0a:	9003      	str	r0, [sp, #12]
 8009c0c:	9700      	str	r7, [sp, #0]
 8009c0e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8009c12:	4892      	ldr	r0, [pc, #584]	; (8009e5c <main+0x6dc>)
 8009c14:	f7fe fc1c 	bl	8008450 <f_printf>
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 8009c18:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	a842      	add	r0, sp, #264	; 0x108
                    UINT number_written{ 0 };
 8009c20:	940d      	str	r4, [sp, #52]	; 0x34
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 8009c22:	f001 fbaa 	bl	800b37a <memset>
                    auto const cell_data = ltc6811->getCellData();
 8009c26:	4b8a      	ldr	r3, [pc, #552]	; (8009e50 <main+0x6d0>)
 8009c28:	6819      	ldr	r1, [r3, #0]
 8009c2a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009c2e:	3166      	adds	r1, #102	; 0x66
 8009c30:	4648      	mov	r0, r9
 8009c32:	f001 fb97 	bl	800b364 <memcpy>
 8009c36:	46ca      	mov	sl, r9
                    size_t position{ 0 };
 8009c38:	9405      	str	r4, [sp, #20]
 8009c3a:	4657      	mov	r7, sl
 8009c3c:	9e05      	ldr	r6, [sp, #20]
 8009c3e:	f10a 0806 	add.w	r8, sl, #6
 8009c42:	1cbd      	adds	r5, r7, #2
 8009c44:	f10a 0a60 	add.w	sl, sl, #96	; 0x60
 8009c48:	3762      	adds	r7, #98	; 0x62
                                buffer[position++] = voltage;
 8009c4a:	eba8 0405 	sub.w	r4, r8, r5
 8009c4e:	0864      	lsrs	r4, r4, #1
 8009c50:	3401      	adds	r4, #1
 8009c52:	ab42      	add	r3, sp, #264	; 0x108
 8009c54:	1ea9      	subs	r1, r5, #2
 8009c56:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 8009c5a:	0062      	lsls	r2, r4, #1
 8009c5c:	3508      	adds	r5, #8
 8009c5e:	f001 fb81 	bl	800b364 <memcpy>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8009c62:	42af      	cmp	r7, r5
 8009c64:	f108 0808 	add.w	r8, r8, #8
 8009c68:	4426      	add	r6, r4
 8009c6a:	d1ee      	bne.n	8009c4a <main+0x4ca>
 8009c6c:	9b05      	ldr	r3, [sp, #20]
 8009c6e:	3324      	adds	r3, #36	; 0x24
 8009c70:	9305      	str	r3, [sp, #20]
                    for (auto const& register_group : cell_data) // 4 voltage register groups
 8009c72:	abea      	add	r3, sp, #936	; 0x3a8
 8009c74:	459a      	cmp	sl, r3
 8009c76:	d1e0      	bne.n	8009c3a <main+0x4ba>
                    f_write(&SDFile, buffer, sizeof(buffer), &number_written);
 8009c78:	ab0d      	add	r3, sp, #52	; 0x34
 8009c7a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009c7e:	a942      	add	r1, sp, #264	; 0x108
 8009c80:	4876      	ldr	r0, [pc, #472]	; (8009e5c <main+0x6dc>)
 8009c82:	f7fd ff65 	bl	8007b50 <f_write>
                    auto const temp_data = ltc6811->getTempData();
 8009c86:	4b72      	ldr	r3, [pc, #456]	; (8009e50 <main+0x6d0>)
 8009c88:	6819      	ldr	r1, [r3, #0]
 8009c8a:	22c0      	movs	r2, #192	; 0xc0
 8009c8c:	f501 71f3 	add.w	r1, r1, #486	; 0x1e6
 8009c90:	a812      	add	r0, sp, #72	; 0x48
 8009c92:	f001 fb67 	bl	800b364 <memcpy>
 8009c96:	f10d 064e 	add.w	r6, sp, #78	; 0x4e
 8009c9a:	f10d 074a 	add.w	r7, sp, #74	; 0x4a
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8009c9e:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
                    position = 0;
 8009ca2:	f04f 0c00 	mov.w	ip, #0
 8009ca6:	1bf4      	subs	r4, r6, r7
 8009ca8:	0864      	lsrs	r4, r4, #1
 8009caa:	42b7      	cmp	r7, r6
 8009cac:	f104 0401 	add.w	r4, r4, #1
 8009cb0:	f000 838d 	beq.w	800a3ce <main+0xc4e>
 8009cb4:	ab42      	add	r3, sp, #264	; 0x108
 8009cb6:	eb03 014c 	add.w	r1, r3, ip, lsl #1
 8009cba:	0865      	lsrs	r5, r4, #1
 8009cbc:	4672      	mov	r2, lr
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	3301      	adds	r3, #1
                                buffer[position++] = temperature;
 8009cc2:	f852 0b04 	ldr.w	r0, [r2], #4
 8009cc6:	f841 0b04 	str.w	r0, [r1], #4
 8009cca:	42ab      	cmp	r3, r5
 8009ccc:	d3f8      	bcc.n	8009cc0 <main+0x540>
 8009cce:	f024 0101 	bic.w	r1, r4, #1
 8009cd2:	42a1      	cmp	r1, r4
 8009cd4:	eb01 020c 	add.w	r2, r1, ip
 8009cd8:	eb0e 0341 	add.w	r3, lr, r1, lsl #1
 8009cdc:	d003      	beq.n	8009ce6 <main+0x566>
 8009cde:	a942      	add	r1, sp, #264	; 0x108
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8009ce6:	3608      	adds	r6, #8
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8009ce8:	f10d 03ae 	add.w	r3, sp, #174	; 0xae
 8009cec:	42b3      	cmp	r3, r6
 8009cee:	44a4      	add	ip, r4
 8009cf0:	f10e 0e08 	add.w	lr, lr, #8
 8009cf4:	f107 0708 	add.w	r7, r7, #8
 8009cf8:	d1d5      	bne.n	8009ca6 <main+0x526>
 8009cfa:	f10d 06ae 	add.w	r6, sp, #174	; 0xae
 8009cfe:	f10d 07aa 	add.w	r7, sp, #170	; 0xaa
                                buffer[position++] = temperature;
 8009d02:	f04f 0e24 	mov.w	lr, #36	; 0x24
 8009d06:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
 8009d0a:	1bf4      	subs	r4, r6, r7
 8009d0c:	0864      	lsrs	r4, r4, #1
 8009d0e:	42b7      	cmp	r7, r6
 8009d10:	f104 0401 	add.w	r4, r4, #1
 8009d14:	f000 8358 	beq.w	800a3c8 <main+0xc48>
 8009d18:	ab42      	add	r3, sp, #264	; 0x108
 8009d1a:	eb03 014e 	add.w	r1, r3, lr, lsl #1
 8009d1e:	0865      	lsrs	r5, r4, #1
 8009d20:	4662      	mov	r2, ip
 8009d22:	2300      	movs	r3, #0
 8009d24:	3301      	adds	r3, #1
 8009d26:	f852 0b04 	ldr.w	r0, [r2], #4
 8009d2a:	f841 0b04 	str.w	r0, [r1], #4
 8009d2e:	42ab      	cmp	r3, r5
 8009d30:	d3f8      	bcc.n	8009d24 <main+0x5a4>
 8009d32:	f024 0101 	bic.w	r1, r4, #1
 8009d36:	428c      	cmp	r4, r1
 8009d38:	eb0e 0201 	add.w	r2, lr, r1
 8009d3c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8009d40:	d003      	beq.n	8009d4a <main+0x5ca>
 8009d42:	a942      	add	r1, sp, #264	; 0x108
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8009d4a:	3608      	adds	r6, #8
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8009d4c:	f50d 7387 	add.w	r3, sp, #270	; 0x10e
 8009d50:	42b3      	cmp	r3, r6
 8009d52:	44a6      	add	lr, r4
 8009d54:	f10c 0c08 	add.w	ip, ip, #8
 8009d58:	f107 0708 	add.w	r7, r7, #8
 8009d5c:	d1d5      	bne.n	8009d0a <main+0x58a>
                    f_write(&SDFile, buffer, sizeof(buffer) / 2, &number_written);
 8009d5e:	ab0d      	add	r3, sp, #52	; 0x34
 8009d60:	2290      	movs	r2, #144	; 0x90
 8009d62:	a942      	add	r1, sp, #264	; 0x108
 8009d64:	483d      	ldr	r0, [pc, #244]	; (8009e5c <main+0x6dc>)
 8009d66:	f7fd fef3 	bl	8007b50 <f_write>
                    f_sync(&SDFile);
 8009d6a:	483c      	ldr	r0, [pc, #240]	; (8009e5c <main+0x6dc>)
 8009d6c:	f7fe f865 	bl	8007e3a <f_sync>
                    f_close(&SDFile);
 8009d70:	483a      	ldr	r0, [pc, #232]	; (8009e5c <main+0x6dc>)
 8009d72:	f7fe f8e0 	bl	8007f36 <f_close>
 8009d76:	e709      	b.n	8009b8c <main+0x40c>
            CANTxVoltage(ltc6811->getCellData());
 8009d78:	4a35      	ldr	r2, [pc, #212]	; (8009e50 <main+0x6d0>)
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
                data[byte_position++] = static_cast<uint8_t>(voltage);

                if (byte_position == 8) {
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009d7a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8009e78 <main+0x6f8>
            CANTxVoltage(ltc6811->getCellData());
 8009d7e:	6812      	ldr	r2, [r2, #0]
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009d80:	4f3b      	ldr	r7, [pc, #236]	; (8009e70 <main+0x6f0>)
    uint8_t data[8]{ 0 };
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8c9 3000 	str.w	r3, [r9]
 8009d88:	469a      	mov	sl, r3
 8009d8a:	f8c9 3004 	str.w	r3, [r9, #4]
    uint8_t byte_position{ 0 };
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f102 0366 	add.w	r3, r2, #102	; 0x66
 8009d94:	9307      	str	r3, [sp, #28]
 8009d96:	f502 73f3 	add.w	r3, r2, #486	; 0x1e6
    TxHeader.StdId = Volt;
 8009d9a:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8009d9e:	9306      	str	r3, [sp, #24]
    TxHeader.DLC = 8;
 8009da0:	2308      	movs	r3, #8
    TxHeader.StdId = Volt;
 8009da2:	f8cb 1000 	str.w	r1, [fp]
    TxHeader.DLC = 8;
 8009da6:	f8cb 3010 	str.w	r3, [fp, #16]
 8009daa:	9b07      	ldr	r3, [sp, #28]
 8009dac:	eb03 060a 	add.w	r6, r3, sl
 8009db0:	1db5      	adds	r5, r6, #6
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 8009db2:	4634      	mov	r4, r6
 8009db4:	e001      	b.n	8009dba <main+0x63a>
 8009db6:	42a5      	cmp	r5, r4
 8009db8:	d01b      	beq.n	8009df2 <main+0x672>
 8009dba:	f834 2b02 	ldrh.w	r2, [r4], #2
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 8009dbe:	1211      	asrs	r1, r2, #8
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	f809 1000 	strb.w	r1, [r9, r0]
                data[byte_position++] = static_cast<uint8_t>(voltage);
 8009dc6:	3002      	adds	r0, #2
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 8009dc8:	b2db      	uxtb	r3, r3
                data[byte_position++] = static_cast<uint8_t>(voltage);
 8009dca:	b2c0      	uxtb	r0, r0
                if (byte_position == 8) {
 8009dcc:	2808      	cmp	r0, #8
                data[byte_position++] = static_cast<uint8_t>(voltage);
 8009dce:	f809 2003 	strb.w	r2, [r9, r3]
                if (byte_position == 8) {
 8009dd2:	d1f0      	bne.n	8009db6 <main+0x636>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009dd4:	4b27      	ldr	r3, [pc, #156]	; (8009e74 <main+0x6f4>)
 8009dd6:	464a      	mov	r2, r9
 8009dd8:	4641      	mov	r1, r8
 8009dda:	4638      	mov	r0, r7
 8009ddc:	f7f6 fdee 	bl	80009bc <HAL_CAN_AddTxMessage>
 8009de0:	b990      	cbnz	r0, 8009e08 <main+0x688>
                        return Fail;

                    byte_position = 0;
                    ++TxHeader.StdId;
 8009de2:	f8db 3000 	ldr.w	r3, [fp]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 8009de6:	42a5      	cmp	r5, r4
                    ++TxHeader.StdId;
 8009de8:	f103 0301 	add.w	r3, r3, #1
 8009dec:	f8cb 3000 	str.w	r3, [fp]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 8009df0:	d1e3      	bne.n	8009dba <main+0x63a>
 8009df2:	3660      	adds	r6, #96	; 0x60
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 8009df4:	9a06      	ldr	r2, [sp, #24]
 8009df6:	eba6 030a 	sub.w	r3, r6, sl
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d1d8      	bne.n	8009db0 <main+0x630>
 8009dfe:	f10a 0a08 	add.w	sl, sl, #8
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 8009e02:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8009e06:	d1d0      	bne.n	8009daa <main+0x62a>
            CANTxTemperature(ltc6811->getTempData());
 8009e08:	4a11      	ldr	r2, [pc, #68]	; (8009e50 <main+0x6d0>)
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
                data[byte_position++] = static_cast<uint8_t>(temperature);

                if (byte_position == 8) {
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009e0a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8009e78 <main+0x6f8>
            CANTxTemperature(ltc6811->getTempData());
 8009e0e:	6812      	ldr	r2, [r2, #0]
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009e10:	4f17      	ldr	r7, [pc, #92]	; (8009e70 <main+0x6f0>)
    uint8_t data[8]{ 0 };
 8009e12:	2300      	movs	r3, #0
 8009e14:	f8c9 3000 	str.w	r3, [r9]
 8009e18:	469a      	mov	sl, r3
 8009e1a:	f8c9 3004 	str.w	r3, [r9, #4]
    uint8_t byte_position{ 0 };
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f502 73f3 	add.w	r3, r2, #486	; 0x1e6
 8009e24:	9307      	str	r3, [sp, #28]
 8009e26:	f202 23a6 	addw	r3, r2, #678	; 0x2a6
    TxHeader.StdId = Temp;
 8009e2a:	f240 719c 	movw	r1, #1948	; 0x79c
 8009e2e:	9306      	str	r3, [sp, #24]
    TxHeader.DLC = 8;
 8009e30:	2308      	movs	r3, #8
    TxHeader.StdId = Temp;
 8009e32:	f8cb 1000 	str.w	r1, [fp]
    TxHeader.DLC = 8;
 8009e36:	f8cb 3010 	str.w	r3, [fp, #16]
 8009e3a:	9b07      	ldr	r3, [sp, #28]
 8009e3c:	eb03 060a 	add.w	r6, r3, sl
 8009e40:	1db5      	adds	r5, r6, #6
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 8009e42:	4634      	mov	r4, r6
 8009e44:	e01c      	b.n	8009e80 <main+0x700>
 8009e46:	bf00      	nop
 8009e48:	40020800 	.word	0x40020800
 8009e4c:	20000268 	.word	0x20000268
 8009e50:	20000258 	.word	0x20000258
 8009e54:	20000264 	.word	0x20000264
 8009e58:	20000284 	.word	0x20000284
 8009e5c:	2000028c 	.word	0x2000028c
 8009e60:	0800b7f4 	.word	0x0800b7f4
 8009e64:	cccccccd 	.word	0xcccccccd
 8009e68:	0800b804 	.word	0x0800b804
 8009e6c:	0800b808 	.word	0x0800b808
 8009e70:	200000e8 	.word	0x200000e8
 8009e74:	2000025c 	.word	0x2000025c
 8009e78:	20000008 	.word	0x20000008
 8009e7c:	42a5      	cmp	r5, r4
 8009e7e:	d01b      	beq.n	8009eb8 <main+0x738>
 8009e80:	f934 2b02 	ldrsh.w	r2, [r4], #2
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 8009e84:	1211      	asrs	r1, r2, #8
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	f809 1000 	strb.w	r1, [r9, r0]
                data[byte_position++] = static_cast<uint8_t>(temperature);
 8009e8c:	3002      	adds	r0, #2
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 8009e8e:	b2db      	uxtb	r3, r3
                data[byte_position++] = static_cast<uint8_t>(temperature);
 8009e90:	b2c0      	uxtb	r0, r0
                if (byte_position == 8) {
 8009e92:	2808      	cmp	r0, #8
                data[byte_position++] = static_cast<uint8_t>(temperature);
 8009e94:	f809 2003 	strb.w	r2, [r9, r3]
                if (byte_position == 8) {
 8009e98:	d1f0      	bne.n	8009e7c <main+0x6fc>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009e9a:	4b29      	ldr	r3, [pc, #164]	; (8009f40 <main+0x7c0>)
 8009e9c:	464a      	mov	r2, r9
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7f6 fd8b 	bl	80009bc <HAL_CAN_AddTxMessage>
 8009ea6:	b990      	cbnz	r0, 8009ece <main+0x74e>
                        return Fail;

                    byte_position = 0;
                    ++TxHeader.StdId;
 8009ea8:	f8db 3000 	ldr.w	r3, [fp]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 8009eac:	42a5      	cmp	r5, r4
                    ++TxHeader.StdId;
 8009eae:	f103 0301 	add.w	r3, r3, #1
 8009eb2:	f8cb 3000 	str.w	r3, [fp]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 8009eb6:	d1e3      	bne.n	8009e80 <main+0x700>
 8009eb8:	3660      	adds	r6, #96	; 0x60
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 8009eba:	9a06      	ldr	r2, [sp, #24]
 8009ebc:	eba6 030a 	sub.w	r3, r6, sl
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d1bd      	bne.n	8009e40 <main+0x6c0>
 8009ec4:	f10a 0a08 	add.w	sl, sl, #8
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 8009ec8:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8009ecc:	d1b5      	bne.n	8009e3a <main+0x6ba>
            CANTxDCCfg(ltc6811->getSlaveCfg());
 8009ece:	491d      	ldr	r1, [pc, #116]	; (8009f44 <main+0x7c4>)
    for (const auto& IC : slave_cfg_rx) {
        data[byte_position++] = IC.data[5];
        data[byte_position++] = IC.data[4];

        if (byte_position == 8) {
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009ed0:	4f1d      	ldr	r7, [pc, #116]	; (8009f48 <main+0x7c8>)
            CANTxDCCfg(ltc6811->getSlaveCfg());
 8009ed2:	680d      	ldr	r5, [r1, #0]
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009ed4:	4e1d      	ldr	r6, [pc, #116]	; (8009f4c <main+0x7cc>)
    uint8_t data[8]{ 0 };
 8009ed6:	2300      	movs	r3, #0
    TxHeader.DLC = 8;
 8009ed8:	2208      	movs	r2, #8
    uint8_t data[8]{ 0 };
 8009eda:	f8cd 322a 	str.w	r3, [sp, #554]	; 0x22a
 8009ede:	f8ad 322e 	strh.w	r3, [sp, #558]	; 0x22e
    TxHeader.DLC = 8;
 8009ee2:	f8cb 2010 	str.w	r2, [fp, #16]
        data[byte_position++] = IC.data[5];
 8009ee6:	7aeb      	ldrb	r3, [r5, #11]
 8009ee8:	f889 3000 	strb.w	r3, [r9]
        data[byte_position++] = IC.data[4];
 8009eec:	7aab      	ldrb	r3, [r5, #10]
 8009eee:	f889 3001 	strb.w	r3, [r9, #1]
    TxHeader.StdId = DishB;
 8009ef2:	f240 7375 	movw	r3, #1909	; 0x775
 8009ef6:	1dac      	adds	r4, r5, #6
 8009ef8:	f8cb 3000 	str.w	r3, [fp]
      { return const_iterator(data() + _Nm); }
 8009efc:	3566      	adds	r5, #102	; 0x66
        data[byte_position++] = IC.data[4];
 8009efe:	2002      	movs	r0, #2
    for (const auto& IC : slave_cfg_rx) {
 8009f00:	3408      	adds	r4, #8
        data[byte_position++] = IC.data[5];
 8009f02:	1c43      	adds	r3, r0, #1
    for (const auto& IC : slave_cfg_rx) {
 8009f04:	42a5      	cmp	r5, r4
        data[byte_position++] = IC.data[5];
 8009f06:	b2db      	uxtb	r3, r3
        data[byte_position++] = IC.data[4];
 8009f08:	f100 0202 	add.w	r2, r0, #2
    for (const auto& IC : slave_cfg_rx) {
 8009f0c:	f43f ae4e 	beq.w	8009bac <main+0x42c>
        data[byte_position++] = IC.data[5];
 8009f10:	7961      	ldrb	r1, [r4, #5]
 8009f12:	f809 1000 	strb.w	r1, [r9, r0]
        data[byte_position++] = IC.data[4];
 8009f16:	b2d0      	uxtb	r0, r2
        if (byte_position == 8) {
 8009f18:	2808      	cmp	r0, #8
        data[byte_position++] = IC.data[4];
 8009f1a:	7922      	ldrb	r2, [r4, #4]
 8009f1c:	f809 2003 	strb.w	r2, [r9, r3]
        if (byte_position == 8) {
 8009f20:	d1ee      	bne.n	8009f00 <main+0x780>
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <main+0x7c0>)
 8009f24:	464a      	mov	r2, r9
 8009f26:	4639      	mov	r1, r7
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7f6 fd47 	bl	80009bc <HAL_CAN_AddTxMessage>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f47f ae3c 	bne.w	8009bac <main+0x42c>
                return Fail;

            byte_position = 0;
            ++TxHeader.StdId;
 8009f34:	f8db 3000 	ldr.w	r3, [fp]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	f8cb 3000 	str.w	r3, [fp]
 8009f3e:	e7df      	b.n	8009f00 <main+0x780>
 8009f40:	2000025c 	.word	0x2000025c
 8009f44:	20000258 	.word	0x20000258
 8009f48:	20000008 	.word	0x20000008
 8009f4c:	200000e8 	.word	0x200000e8
            auto const voltage_status = ltc6811->checkVoltageStatus();
 8009f50:	4cd4      	ldr	r4, [pc, #848]	; (800a2a4 <main+0xb24>)
 8009f52:	a842      	add	r0, sp, #264	; 0x108
 8009f54:	6821      	ldr	r1, [r4, #0]
 8009f56:	f7ff f89d 	bl	8009094 <_ZN7LTC681118checkVoltageStatusEv>
            auto const temp_status = ltc6811->checkTemperatureStatus();
 8009f5a:	6821      	ldr	r1, [r4, #0]
 8009f5c:	a80d      	add	r0, sp, #52	; 0x34
 8009f5e:	f7ff f981 	bl	8009264 <_ZN7LTC681122checkTemperatureStatusEv>
            if (!status->isError(Status::PECError, !voltage_status) && !status->isError(Status::PECError, !temp_status)) {
 8009f62:	4bd1      	ldr	r3, [pc, #836]	; (800a2a8 <main+0xb28>)
        if (error) {
 8009f64:	f89d 211c 	ldrb.w	r2, [sp, #284]	; 0x11c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	f000 81c8 	beq.w	800a300 <main+0xb80>
        return old;
    }

    constexpr Counter& operator--() noexcept {
        // Pre-decrement operator
        --count;
 8009f70:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009f74:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8009f78:	1e50      	subs	r0, r2, #1
 8009f7a:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
 8009f7e:	2900      	cmp	r1, #0
 8009f80:	f000 81d9 	beq.w	800a336 <main+0xbb6>
 8009f84:	f8bd 410c 	ldrh.w	r4, [sp, #268]	; 0x10c
 8009f88:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8009f8a:	f248 40cf 	movw	r0, #33999	; 0x84cf
 8009f8e:	3a02      	subs	r2, #2
 8009f90:	4284      	cmp	r4, r0
 8009f92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8009f96:	f240 821d 	bls.w	800a3d4 <main+0xc54>
 8009f9a:	3901      	subs	r1, #1
 8009f9c:	8719      	strh	r1, [r3, #56]	; 0x38
                nlg5->setChargeCurrent(voltage_status->max);
 8009f9e:	4ac3      	ldr	r2, [pc, #780]	; (800a2ac <main+0xb2c>)
 8009fa0:	f8bd 3114 	ldrh.w	r3, [sp, #276]	; 0x114
 8009fa4:	6811      	ldr	r1, [r2, #0]
        if (max_voltage > kChargerDis)
 8009fa6:	f24a 3248 	movw	r2, #41800	; 0xa348
 8009faa:	4293      	cmp	r3, r2
 8009fac:	f240 81ca 	bls.w	800a344 <main+0xbc4>
            ctrl = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	730b      	strb	r3, [r1, #12]
                if (pwm_fan->getMode() == PWM_Fan::Automatic) {
 8009fb4:	4bbe      	ldr	r3, [pc, #760]	; (800a2b0 <main+0xb30>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
    void setMode(Mode const mode) noexcept {
        this->mode = mode;
    }

    [[nodiscard]] Mode getMode() const noexcept {
        return mode;
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	f000 81ce 	beq.w	800a35c <main+0xbdc>
                if (op_mode & Status::Balance) {
 8009fc0:	9b05      	ldr	r3, [sp, #20]
 8009fc2:	0799      	lsls	r1, r3, #30
 8009fc4:	f100 81f4 	bmi.w	800a3b0 <main+0xc30>
 8009fc8:	4aba      	ldr	r2, [pc, #744]	; (800a2b4 <main+0xb34>)
 8009fca:	6813      	ldr	r3, [r2, #0]
 8009fcc:	f3bf 8f5b 	dmb	ish
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	f3bf 8f5b 	dmb	ish
                if (!ivt->isLost()) { // This, if anything, will be the cause of error false positives
 8009fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009fda:	f240 83f9 	bls.w	800a7d0 <main+0x1050>
 8009fde:	6813      	ldr	r3, [r2, #0]
 8009fe0:	4ab1      	ldr	r2, [pc, #708]	; (800a2a8 <main+0xb28>)
 8009fe2:	6814      	ldr	r4, [r2, #0]
 8009fe4:	f3bf 8f5b 	dmb	ish
 8009fe8:	68de      	ldr	r6, [r3, #12]
 8009fea:	f3bf 8f5b 	dmb	ish
 8009fee:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
        ++count;
 8009ff2:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8009ff6:	f200 83b9 	bhi.w	800a76c <main+0xfec>
        --count;
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
                        !status->isError(Status::OverPower, voltage_status->sum * ivt->getCurrent() > Status::kMaxPower) &
 800a000:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800a002:	4bac      	ldr	r3, [pc, #688]	; (800a2b4 <main+0xb34>)
 800a004:	9206      	str	r2, [sp, #24]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	ed9d 7a06 	vldr	s14, [sp, #24]
        this->I = I;
        mCounter = 0;
    }

    [[nodiscard]] float getCurrent() const noexcept {
        return I;
 800a00c:	edd3 7a02 	vldr	s15, [r3, #8]
 800a010:	4aa5      	ldr	r2, [pc, #660]	; (800a2a8 <main+0xb28>)
 800a012:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800a016:	6814      	ldr	r4, [r2, #0]
 800a018:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a01c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a020:	eeb4 8aca 	vcmpe.f32	s16, s20
 800a024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a028:	f300 836a 	bgt.w	800a700 <main+0xf80>
 800a02c:	3a01      	subs	r2, #1
 800a02e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800a032:	ed93 9a02 	vldr	s18, [r3, #8]
 800a036:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 800a03a:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a042:	f300 8327 	bgt.w	800a694 <main+0xf14>
 800a046:	3a01      	subs	r2, #1
 800a048:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
        this->U2 = U2;
        mCounter = 0;
    }

    [[nodiscard]] float getVoltage2() const noexcept {
        return U2;
 800a04c:	edd3 8a01 	vldr	s17, [r3, #4]
 800a050:	eddf 7a99 	vldr	s15, [pc, #612]	; 800a2b8 <main+0xb38>
 800a054:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 800a058:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a060:	f100 82e4 	bmi.w	800a62c <main+0xeac>
 800a064:	3b01      	subs	r3, #1
 800a066:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
                        !status->isError(Status::UnderVoltage, voltage_status->min < Status::kMinVoltage) &
 800a06a:	f8bd 710c 	ldrh.w	r7, [sp, #268]	; 0x10c
 800a06e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800a070:	f647 1217 	movw	r2, #30999	; 0x7917
 800a074:	4297      	cmp	r7, r2
 800a076:	f240 8292 	bls.w	800a59e <main+0xe1e>
 800a07a:	3b01      	subs	r3, #1
 800a07c:	86a3      	strh	r3, [r4, #52]	; 0x34
                        !status->isError(Status::OverVoltage, voltage_status->max > Status::kMaxVoltage) &
 800a07e:	f8bd 5114 	ldrh.w	r5, [sp, #276]	; 0x114
 800a082:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a084:	f24a 4210 	movw	r2, #42000	; 0xa410
 800a088:	4295      	cmp	r5, r2
 800a08a:	f200 8255 	bhi.w	800a538 <main+0xdb8>
 800a08e:	3b01      	subs	r3, #1
 800a090:	8623      	strh	r3, [r4, #48]	; 0x30
                        !status->isError(Status::UnderTemp, temp_status->min < Status::kMinTemp) &
 800a092:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 800a096:	4a89      	ldr	r2, [pc, #548]	; (800a2bc <main+0xb3c>)
 800a098:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800a09c:	4592      	cmp	sl, r2
 800a09e:	f2c0 8216 	blt.w	800a4ce <main+0xd4e>
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
                        !status->isError(Status::OverTemp, temp_status->max > Status::kMaxTemp) &
 800a0a8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800a0ac:	9905      	ldr	r1, [sp, #20]
 800a0ae:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800a0b0:	f241 730c 	movw	r3, #5900	; 0x170c
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	f001 0804 	and.w	r8, r1, #4
 800a0ba:	f300 8195 	bgt.w	800a3e8 <main+0xc68>
                        !status->isError(Status::UnderTemp, temp_status->min < Status::kMinTemp) &
 800a0be:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 800a2bc <main+0xb3c>
                        !status->isError(Status::AccuUnderVoltage, ivt->getVoltage2() < Status::kAccuMinVoltage) &
 800a0c2:	eddf 7a7d 	vldr	s15, [pc, #500]	; 800a2b8 <main+0xb38>
 800a0c6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
                        !status->isError(Status::OverVoltage, voltage_status->max > Status::kMaxVoltage) &
 800a0ca:	f24a 4e10 	movw	lr, #42000	; 0xa410
 800a0ce:	4575      	cmp	r5, lr
 800a0d0:	bf8c      	ite	hi
 800a0d2:	2300      	movhi	r3, #0
 800a0d4:	2301      	movls	r3, #1
 800a0d6:	45e2      	cmp	sl, ip
                        !status->isError(Status::OverPower, voltage_status->sum * ivt->getCurrent() > Status::kMaxPower) &
 800a0d8:	eeb4 8aca 	vcmpe.f32	s16, s20
 800a0dc:	bfb8      	it	lt
 800a0de:	2300      	movlt	r3, #0
                        !status->isError(Status::UnderVoltage, voltage_status->min < Status::kMinVoltage) &
 800a0e0:	f647 1517 	movw	r5, #30999	; 0x7917
 800a0e4:	42af      	cmp	r7, r5
 800a0e6:	bf94      	ite	ls
 800a0e8:	2300      	movls	r3, #0
 800a0ea:	f003 0301 	andhi.w	r3, r3, #1
                        !status->isError(Status::OverPower, voltage_status->sum * ivt->getCurrent() > Status::kMaxPower) &
 800a0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f2:	f003 0301 	and.w	r3, r3, #1
                        !status->isError(Status::OverCurrent, ivt->getCurrent() > Status::kMaxCurrent) &
 800a0f6:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800a0fa:	bfc8      	it	gt
 800a0fc:	2300      	movgt	r3, #0
 800a0fe:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
 800a102:	bf8c      	ite	hi
 800a104:	2300      	movhi	r3, #0
 800a106:	f003 0301 	andls.w	r3, r3, #1
 800a10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        !status->isError(Status::AccuUnderVoltage, ivt->getVoltage2() < Status::kAccuMinVoltage) &
 800a10e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	f100 30ff 	add.w	r0, r0, #4294967295
 800a11a:	bfc8      	it	gt
 800a11c:	2300      	movgt	r3, #0
 800a11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	87a0      	strh	r0, [r4, #60]	; 0x3c
 800a128:	bf48      	it	mi
 800a12a:	2300      	movmi	r3, #0
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status->max > Status::kMaxChargeTemp)) &
 800a12c:	f1b8 0f00 	cmp.w	r8, #0
 800a130:	d004      	beq.n	800a13c <main+0x9bc>
 800a132:	f241 1030 	movw	r0, #4400	; 0x1130
 800a136:	4282      	cmp	r2, r0
 800a138:	f300 8195 	bgt.w	800a466 <main+0xce6>
 800a13c:	3901      	subs	r1, #1
 800a13e:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all isError() calls to happen, so do not replace & with &&.
 800a142:	b173      	cbz	r3, 800a162 <main+0x9e2>
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a144:	2201      	movs	r2, #1
 800a146:	2102      	movs	r1, #2
 800a148:	485d      	ldr	r0, [pc, #372]	; (800a2c0 <main+0xb40>)
 800a14a:	f7f7 fb25 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a14e:	2201      	movs	r2, #1
 800a150:	2104      	movs	r1, #4
 800a152:	485c      	ldr	r0, [pc, #368]	; (800a2c4 <main+0xb44>)
 800a154:	f7f7 fb20 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a158:	2301      	movs	r3, #1
 800a15a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800a15e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    uint16_t U1 = static_cast<uint16_t>(ivt->getVoltage1()); // TODO this is bad
 800a162:	4b54      	ldr	r3, [pc, #336]	; (800a2b4 <main+0xb34>)
                CANTxData(voltage_status->min, voltage_status->max, temp_status->max);
 800a164:	f8bd 410c 	ldrh.w	r4, [sp, #268]	; 0x10c
    uint16_t U1 = static_cast<uint16_t>(ivt->getVoltage1()); // TODO this is bad
 800a168:	681b      	ldr	r3, [r3, #0]
                CANTxData(voltage_status->min, voltage_status->max, temp_status->max);
 800a16a:	f8bd 5114 	ldrh.w	r5, [sp, #276]	; 0x114
        return U1;
 800a16e:	edd3 7a00 	vldr	s15, [r3]
    };
 800a172:	f889 2007 	strb.w	r2, [r9, #7]
    uint16_t U1 = static_cast<uint16_t>(ivt->getVoltage1()); // TODO this is bad
 800a176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            static_cast<uint8_t>(t_max >> 8),
 800a17a:	1212      	asrs	r2, r2, #8
    uint16_t U1 = static_cast<uint16_t>(ivt->getVoltage1()); // TODO this is bad
 800a17c:	ee17 3a90 	vmov	r3, s15
 800a180:	b29b      	uxth	r3, r3
    };
 800a182:	f889 2006 	strb.w	r2, [r9, #6]
            static_cast<uint8_t>(U1 >> 8),
 800a186:	121a      	asrs	r2, r3, #8
    };
 800a188:	f889 3001 	strb.w	r3, [r9, #1]
 800a18c:	f889 2000 	strb.w	r2, [r9]
            static_cast<uint8_t>(v_min >> 8),
 800a190:	1223      	asrs	r3, r4, #8
            static_cast<uint8_t>(v_max >> 8),
 800a192:	122a      	asrs	r2, r5, #8
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a194:	494c      	ldr	r1, [pc, #304]	; (800a2c8 <main+0xb48>)
    };
 800a196:	f889 4003 	strb.w	r4, [r9, #3]
    TxHeader.StdId = Data;
 800a19a:	260a      	movs	r6, #10
    TxHeader.DLC = 8;
 800a19c:	2408      	movs	r4, #8
    };
 800a19e:	f889 3002 	strb.w	r3, [r9, #2]
 800a1a2:	f889 2004 	strb.w	r2, [r9, #4]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a1a6:	4b49      	ldr	r3, [pc, #292]	; (800a2cc <main+0xb4c>)
 800a1a8:	4849      	ldr	r0, [pc, #292]	; (800a2d0 <main+0xb50>)
    };
 800a1aa:	f889 5005 	strb.w	r5, [r9, #5]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a1ae:	464a      	mov	r2, r9
    TxHeader.StdId = Data;
 800a1b0:	f8cb 6000 	str.w	r6, [fp]
    TxHeader.DLC = 8;
 800a1b4:	f8cb 4010 	str.w	r4, [fp, #16]
                CANTxVoltageLimpTotal(voltage_status->sum, status->isErrorOverLimit(Status::Limping));
 800a1b8:	4e3b      	ldr	r6, [pc, #236]	; (800a2a8 <main+0xb28>)
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a1ba:	f7f6 fbff 	bl	80009bc <HAL_CAN_AddTxMessage>
                CANTxVoltageLimpTotal(voltage_status->sum, status->isErrorOverLimit(Status::Limping));
 800a1be:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800a1c0:	6831      	ldr	r1, [r6, #0]
    TxHeader.DLC = 8;
 800a1c2:	f8cb 4010 	str.w	r4, [fp, #16]
    uint8_t data[8] {
 800a1c6:	2200      	movs	r2, #0
        static_cast<uint8_t>(sum_of_cells >> 24),
 800a1c8:	0e1c      	lsrs	r4, r3, #24
    };
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f364 0007 	bfi	r0, r4, #0, #8
                static_cast<uint8_t>(sum_of_cells >> 16),
 800a1d0:	0c1c      	lsrs	r4, r3, #16
                static_cast<uint8_t>(sum_of_cells >>  8),
 800a1d2:	0a1d      	lsrs	r5, r3, #8
    };
 800a1d4:	f364 200f 	bfi	r0, r4, #8, #8

        return lhs;
    }

    [[nodiscard]] bool isOverLimit() const noexcept {
        return count > limit;
 800a1d8:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 800a1da:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
    uint8_t data[8] {
 800a1dc:	f8c9 2004 	str.w	r2, [r9, #4]
    };
 800a1e0:	f365 4017 	bfi	r0, r5, #16, #8
 800a1e4:	428c      	cmp	r4, r1
 800a1e6:	f363 601f 	bfi	r0, r3, #24, #8
 800a1ea:	bf94      	ite	ls
 800a1ec:	2400      	movls	r4, #0
 800a1ee:	2401      	movhi	r4, #1
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a1f0:	4b36      	ldr	r3, [pc, #216]	; (800a2cc <main+0xb4c>)
    };
 800a1f2:	f8c9 0000 	str.w	r0, [r9]
    TxHeader.StdId = VoltTotal;
 800a1f6:	250b      	movs	r5, #11
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a1f8:	464a      	mov	r2, r9
 800a1fa:	4933      	ldr	r1, [pc, #204]	; (800a2c8 <main+0xb48>)
 800a1fc:	4834      	ldr	r0, [pc, #208]	; (800a2d0 <main+0xb50>)
    };
 800a1fe:	f889 4004 	strb.w	r4, [r9, #4]
    TxHeader.StdId = VoltTotal;
 800a202:	f8cb 5000 	str.w	r5, [fp]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a206:	f7f6 fbd9 	bl	80009bc <HAL_CAN_AddTxMessage>
 800a20a:	6833      	ldr	r3, [r6, #0]
        return mCounter / 10;
 800a20c:	4a31      	ldr	r2, [pc, #196]	; (800a2d4 <main+0xb54>)
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a20e:	492e      	ldr	r1, [pc, #184]	; (800a2c8 <main+0xb48>)
 800a210:	482f      	ldr	r0, [pc, #188]	; (800a2d0 <main+0xb50>)
    uint32_t const error_change = total_error - last_error;
 800a212:	4e31      	ldr	r6, [pc, #196]	; (800a2d8 <main+0xb58>)
    TxHeader.StdId = OpMode;
 800a214:	2408      	movs	r4, #8
 800a216:	f8cb 4000 	str.w	r4, [fp]
    TxHeader.DLC = 8;
 800a21a:	f8cb 4010 	str.w	r4, [fp, #16]
 800a21e:	f3bf 8f5b 	dmb	ish
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f3bf 8f5b 	dmb	ish
 800a228:	fba2 2303 	umull	r2, r3, r2, r3
            static_cast<uint8_t>(uptime >> 24),
 800a22c:	0edd      	lsrs	r5, r3, #27
    };
 800a22e:	2200      	movs	r2, #0
 800a230:	f365 0207 	bfi	r2, r5, #0, #8
            static_cast<uint8_t>(uptime >> 16),
 800a234:	0cdd      	lsrs	r5, r3, #19
    };
 800a236:	f365 220f 	bfi	r2, r5, #8, #8
            static_cast<uint8_t>(uptime >>  8),
 800a23a:	0add      	lsrs	r5, r3, #11
    };
 800a23c:	f365 4217 	bfi	r2, r5, #16, #8
            status->getOpMode(),
 800a240:	4d19      	ldr	r5, [pc, #100]	; (800a2a8 <main+0xb28>)
 800a242:	08db      	lsrs	r3, r3, #3
    };
 800a244:	f363 621f 	bfi	r2, r3, #24, #8
            status->getOpMode(),
 800a248:	682b      	ldr	r3, [r5, #0]
    };
 800a24a:	f8c9 2000 	str.w	r2, [r9]
        return mOpMode;
 800a24e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a252:	f889 2004 	strb.w	r2, [r9, #4]
 800a256:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800a25a:	f889 2005 	strb.w	r2, [r9, #5]
 800a25e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800a262:	f889 2006 	strb.w	r2, [r9, #6]
 800a266:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a26a:	f889 3007 	strb.w	r3, [r9, #7]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a26e:	464a      	mov	r2, r9
 800a270:	4b16      	ldr	r3, [pc, #88]	; (800a2cc <main+0xb4c>)
 800a272:	f7f6 fba3 	bl	80009bc <HAL_CAN_AddTxMessage>
        return mErrorCounters[e].getCount();
 800a276:	682a      	ldr	r2, [r5, #0]
    uint32_t const error_change = total_error - last_error;
 800a278:	6833      	ldr	r3, [r6, #0]
 800a27a:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
    last_error = total_error;
 800a27e:	6032      	str	r2, [r6, #0]
    uint32_t const error_change = total_error - last_error;
 800a280:	1ad3      	subs	r3, r2, r3
            static_cast<uint8_t>(total_error >>  8),
 800a282:	fa22 f504 	lsr.w	r5, r2, r4
    TxHeader.DLC = 8;
 800a286:	f8cb 4010 	str.w	r4, [fp, #16]
    };
 800a28a:	f889 2003 	strb.w	r2, [r9, #3]
            static_cast<uint8_t>(error_change >> 24),
 800a28e:	0e1c      	lsrs	r4, r3, #24
            static_cast<uint8_t>(error_change >>  8),
 800a290:	0a1a      	lsrs	r2, r3, #8
    };
 800a292:	f889 3007 	strb.w	r3, [r9, #7]
            static_cast<uint8_t>(error_change >> 16),
 800a296:	0c1e      	lsrs	r6, r3, #16
    };
 800a298:	f889 5002 	strb.w	r5, [r9, #2]
 800a29c:	f889 4004 	strb.w	r4, [r9, #4]
 800a2a0:	e01c      	b.n	800a2dc <main+0xb5c>
 800a2a2:	bf00      	nop
 800a2a4:	20000258 	.word	0x20000258
 800a2a8:	20000268 	.word	0x20000268
 800a2ac:	20000260 	.word	0x20000260
 800a2b0:	20000264 	.word	0x20000264
 800a2b4:	20000254 	.word	0x20000254
 800a2b8:	43f50000 	.word	0x43f50000
 800a2bc:	fffffa24 	.word	0xfffffa24
 800a2c0:	40020400 	.word	0x40020400
 800a2c4:	40020800 	.word	0x40020800
 800a2c8:	20000008 	.word	0x20000008
 800a2cc:	2000025c 	.word	0x2000025c
 800a2d0:	200000e8 	.word	0x200000e8
 800a2d4:	cccccccd 	.word	0xcccccccd
 800a2d8:	200000e4 	.word	0x200000e4
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a2dc:	4bc9      	ldr	r3, [pc, #804]	; (800a604 <main+0xe84>)
    };
 800a2de:	f889 2006 	strb.w	r2, [r9, #6]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a2e2:	49c9      	ldr	r1, [pc, #804]	; (800a608 <main+0xe88>)
 800a2e4:	48c9      	ldr	r0, [pc, #804]	; (800a60c <main+0xe8c>)
    };
 800a2e6:	f889 6005 	strb.w	r6, [r9, #5]
    TxHeader.StdId = PECError;
 800a2ea:	2509      	movs	r5, #9
    };
 800a2ec:	2400      	movs	r4, #0
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a2ee:	464a      	mov	r2, r9
    TxHeader.StdId = PECError;
 800a2f0:	f8cb 5000 	str.w	r5, [fp]
    };
 800a2f4:	f8a9 4000 	strh.w	r4, [r9]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800a2f8:	f7f6 fb60 	bl	80009bc <HAL_CAN_AddTxMessage>
 800a2fc:	9b05      	ldr	r3, [sp, #20]
 800a2fe:	e452      	b.n	8009ba6 <main+0x426>
        ++count;
 800a300:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
            if (mErrorCounters[e].isOverLimit()) {
 800a304:	f8b3 1052 	ldrh.w	r1, [r3, #82]	; 0x52
 800a308:	3201      	adds	r2, #1
 800a30a:	b292      	uxth	r2, r2
 800a30c:	4291      	cmp	r1, r2
 800a30e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800a312:	f4bf af7b 	bcs.w	800a20c <main+0xa8c>
#else
        setAIRState(Open);
        setPrechargeState(Open);
#endif
#if STOP_CORE_ON_SAFE_STATE
        mOpMode &= ~Core;
 800a316:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a31a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a31e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif
#if START_DEBUG_ON_SAFE_STATE
        mOpMode |= Debug;
 800a322:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
#endif
        mLastError = e;
 800a326:	2109      	movs	r1, #9
        mOpMode |= Debug;
 800a328:	f042 0208 	orr.w	r2, r2, #8
 800a32c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mLastError = e;
 800a330:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 800a334:	e76a      	b.n	800a20c <main+0xa8c>
            if (mErrorCounters[e].isOverLimit()) {
 800a336:	f8b3 1052 	ldrh.w	r1, [r3, #82]	; 0x52
 800a33a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800a33e:	4291      	cmp	r1, r2
 800a340:	d3e9      	bcc.n	800a316 <main+0xb96>
 800a342:	e763      	b.n	800a20c <main+0xa8c>
        else if (max_voltage < kChargerEn)
 800a344:	f24a 221b 	movw	r2, #41499	; 0xa21b
 800a348:	4293      	cmp	r3, r2
            ctrl = C_C_EN;
 800a34a:	bf9c      	itt	ls
 800a34c:	2380      	movls	r3, #128	; 0x80
 800a34e:	730b      	strbls	r3, [r1, #12]
                if (pwm_fan->getMode() == PWM_Fan::Automatic) {
 800a350:	4baf      	ldr	r3, [pc, #700]	; (800a610 <main+0xe90>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b01      	cmp	r3, #1
 800a358:	f47f ae32 	bne.w	8009fc0 <main+0x840>
                    auto const duty_cycle = PWM_Fan::calcDutyCycle(temp_status->max);
 800a35c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
        if (max_temp > kHighTemp)
 800a360:	f241 7270 	movw	r2, #6000	; 0x1770
 800a364:	4293      	cmp	r3, r2
 800a366:	f300 8298 	bgt.w	800a89a <main+0x111a>
        else if (max_temp < kLowTemp)
 800a36a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a36e:	f2c0 82a9 	blt.w	800a8c4 <main+0x1144>
            return kM * max_temp + kB;
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800a614 <main+0xe94>
 800a37a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800a618 <main+0xe98>
 800a37e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a382:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a386:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a38a:	edcd 7a06 	vstr	s15, [sp, #24]
 800a38e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a392:	2b64      	cmp	r3, #100	; 0x64
 800a394:	bf28      	it	cs
 800a396:	2364      	movcs	r3, #100	; 0x64
 800a398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a39c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a3a0:	00db      	lsls	r3, r3, #3
        TIM2->CCR4 = std::clamp(duty_cycle, kMinDutyCycle, kMaxDutyCycle) * 200;
 800a3a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a3a6:	6413      	str	r3, [r2, #64]	; 0x40
                if (op_mode & Status::Balance) {
 800a3a8:	9b05      	ldr	r3, [sp, #20]
 800a3aa:	0799      	lsls	r1, r3, #30
 800a3ac:	f57f ae0c 	bpl.w	8009fc8 <main+0x848>
                    auto const discharge_config = ltc6811->makeDischargeConfig(*voltage_status);
 800a3b0:	4b9a      	ldr	r3, [pc, #616]	; (800a61c <main+0xe9c>)
 800a3b2:	461c      	mov	r4, r3
 800a3b4:	6819      	ldr	r1, [r3, #0]
 800a3b6:	4648      	mov	r0, r9
 800a3b8:	aa42      	add	r2, sp, #264	; 0x108
 800a3ba:	f7fe fc87 	bl	8008ccc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE>
                    ltc6811->writeConfigRegisterGroup(discharge_config);
 800a3be:	4649      	mov	r1, r9
 800a3c0:	6820      	ldr	r0, [r4, #0]
 800a3c2:	f7fe fb95 	bl	8008af0 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE>
 800a3c6:	e5ff      	b.n	8009fc8 <main+0x848>
      { return _AT_Type::_S_ptr(_M_elems); }
 800a3c8:	4663      	mov	r3, ip
 800a3ca:	4672      	mov	r2, lr
 800a3cc:	e4b9      	b.n	8009d42 <main+0x5c2>
 800a3ce:	4673      	mov	r3, lr
 800a3d0:	4662      	mov	r2, ip
 800a3d2:	e484      	b.n	8009cde <main+0x55e>
 800a3d4:	1c4a      	adds	r2, r1, #1
 800a3d6:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 800a3d8:	b292      	uxth	r2, r2
 800a3da:	4290      	cmp	r0, r2
 800a3dc:	871a      	strh	r2, [r3, #56]	; 0x38
 800a3de:	f4bf adde 	bcs.w	8009f9e <main+0x81e>
        lhs.count += rhs;
 800a3e2:	310a      	adds	r1, #10
 800a3e4:	8719      	strh	r1, [r3, #56]	; 0x38
 800a3e6:	e5da      	b.n	8009f9e <main+0x81e>
        ++count;
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a3f2:	d229      	bcs.n	800a448 <main+0xcc8>
        mAIRState = AIRState;
 800a3f4:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	4889      	ldr	r0, [pc, #548]	; (800a620 <main+0xea0>)
 800a3fc:	f7f7 f9cc 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a400:	462a      	mov	r2, r5
 800a402:	2104      	movs	r1, #4
 800a404:	4887      	ldr	r0, [pc, #540]	; (800a624 <main+0xea4>)
 800a406:	f7f7 f9c7 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a40a:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a40e:	462a      	mov	r2, r5
 800a410:	2101      	movs	r1, #1
 800a412:	4883      	ldr	r0, [pc, #524]	; (800a620 <main+0xea0>)
 800a414:	f7f7 f9c0 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a418:	462a      	mov	r2, r5
 800a41a:	2102      	movs	r1, #2
 800a41c:	4881      	ldr	r0, [pc, #516]	; (800a624 <main+0xea4>)
 800a41e:	f7f7 f9bb 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a422:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a426:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a42a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a42e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a432:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a436:	f043 0308 	orr.w	r3, r3, #8
 800a43a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a43e:	4b7a      	ldr	r3, [pc, #488]	; (800a628 <main+0xea8>)
        mLastError = e;
 800a440:	2204      	movs	r2, #4
 800a442:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a446:	681c      	ldr	r4, [r3, #0]
 800a448:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status->max > Status::kMaxChargeTemp)) &
 800a44c:	f1b8 0f00 	cmp.w	r8, #0
 800a450:	f000 8226 	beq.w	800a8a0 <main+0x1120>
 800a454:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800a458:	f241 1030 	movw	r0, #4400	; 0x1130
 800a45c:	4282      	cmp	r2, r0
 800a45e:	f04f 0300 	mov.w	r3, #0
 800a462:	f77f ae6b 	ble.w	800a13c <main+0x9bc>
 800a466:	1c4b      	adds	r3, r1, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a468:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	4299      	cmp	r1, r3
 800a470:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a474:	f4bf ae75 	bcs.w	800a162 <main+0x9e2>
        mAIRState = AIRState;
 800a478:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a47a:	2200      	movs	r2, #0
 800a47c:	2102      	movs	r1, #2
 800a47e:	4868      	ldr	r0, [pc, #416]	; (800a620 <main+0xea0>)
 800a480:	f7f7 f98a 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a484:	462a      	mov	r2, r5
 800a486:	2104      	movs	r1, #4
 800a488:	4866      	ldr	r0, [pc, #408]	; (800a624 <main+0xea4>)
 800a48a:	f7f7 f985 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a48e:	462a      	mov	r2, r5
 800a490:	2101      	movs	r1, #1
 800a492:	4863      	ldr	r0, [pc, #396]	; (800a620 <main+0xea0>)
        mAIRState = AIRState;
 800a494:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a498:	f7f7 f97e 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a49c:	462a      	mov	r2, r5
 800a49e:	2102      	movs	r1, #2
 800a4a0:	4860      	ldr	r0, [pc, #384]	; (800a624 <main+0xea4>)
 800a4a2:	f7f7 f979 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a4a6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a4aa:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a4ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a4b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a4b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a4ba:	f043 0308 	orr.w	r3, r3, #8
 800a4be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mLastError = e;
 800a4c2:	230c      	movs	r3, #12
 800a4c4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800a4c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800a4cc:	e649      	b.n	800a162 <main+0x9e2>
 800a4ce:	3301      	adds	r3, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a4d0:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800a4dc:	f4bf ade4 	bcs.w	800a0a8 <main+0x928>
        mAIRState = AIRState;
 800a4e0:	f04f 0800 	mov.w	r8, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2102      	movs	r1, #2
 800a4e8:	484d      	ldr	r0, [pc, #308]	; (800a620 <main+0xea0>)
 800a4ea:	f7f7 f955 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	2104      	movs	r1, #4
 800a4f2:	484c      	ldr	r0, [pc, #304]	; (800a624 <main+0xea4>)
 800a4f4:	f7f7 f950 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a4f8:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	2101      	movs	r1, #1
 800a500:	4847      	ldr	r0, [pc, #284]	; (800a620 <main+0xea0>)
 800a502:	f7f7 f949 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a506:	4642      	mov	r2, r8
 800a508:	2102      	movs	r1, #2
 800a50a:	4846      	ldr	r0, [pc, #280]	; (800a624 <main+0xea4>)
 800a50c:	f7f7 f944 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a510:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a514:	f884 8026 	strb.w	r8, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a518:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a51c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a520:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a524:	f043 0308 	orr.w	r3, r3, #8
 800a528:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a52c:	4b3e      	ldr	r3, [pc, #248]	; (800a628 <main+0xea8>)
        mLastError = e;
 800a52e:	2205      	movs	r2, #5
 800a530:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a534:	681c      	ldr	r4, [r3, #0]
 800a536:	e5b7      	b.n	800a0a8 <main+0x928>
 800a538:	3301      	adds	r3, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a53a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	429a      	cmp	r2, r3
 800a540:	8623      	strh	r3, [r4, #48]	; 0x30
 800a542:	f4bf ada6 	bcs.w	800a092 <main+0x912>
        mAIRState = AIRState;
 800a546:	f04f 0800 	mov.w	r8, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a54a:	2200      	movs	r2, #0
 800a54c:	2102      	movs	r1, #2
 800a54e:	4834      	ldr	r0, [pc, #208]	; (800a620 <main+0xea0>)
 800a550:	f7f7 f922 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a554:	4642      	mov	r2, r8
 800a556:	2104      	movs	r1, #4
 800a558:	4832      	ldr	r0, [pc, #200]	; (800a624 <main+0xea4>)
 800a55a:	f7f7 f91d 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a55e:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a562:	4642      	mov	r2, r8
 800a564:	2101      	movs	r1, #1
 800a566:	482e      	ldr	r0, [pc, #184]	; (800a620 <main+0xea0>)
 800a568:	f7f7 f916 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a56c:	4642      	mov	r2, r8
 800a56e:	2102      	movs	r1, #2
 800a570:	482c      	ldr	r0, [pc, #176]	; (800a624 <main+0xea4>)
 800a572:	f7f7 f911 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a576:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a57a:	f884 8026 	strb.w	r8, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a57e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a582:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a586:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a58a:	f043 0308 	orr.w	r3, r3, #8
 800a58e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a592:	4b25      	ldr	r3, [pc, #148]	; (800a628 <main+0xea8>)
        mLastError = e;
 800a594:	2201      	movs	r2, #1
 800a596:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a59a:	681c      	ldr	r4, [r3, #0]
 800a59c:	e579      	b.n	800a092 <main+0x912>
 800a59e:	3301      	adds	r3, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a5a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800a5a8:	f4bf ad69 	bcs.w	800a07e <main+0x8fe>
        mAIRState = AIRState;
 800a5ac:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	481b      	ldr	r0, [pc, #108]	; (800a620 <main+0xea0>)
 800a5b4:	f7f7 f8f0 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	2104      	movs	r1, #4
 800a5bc:	4819      	ldr	r0, [pc, #100]	; (800a624 <main+0xea4>)
 800a5be:	f7f7 f8eb 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a5c2:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a5c6:	462a      	mov	r2, r5
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	4815      	ldr	r0, [pc, #84]	; (800a620 <main+0xea0>)
 800a5cc:	f7f7 f8e4 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	2102      	movs	r1, #2
 800a5d4:	4813      	ldr	r0, [pc, #76]	; (800a624 <main+0xea4>)
 800a5d6:	f7f7 f8df 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a5da:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a5de:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a5e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a5e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a5ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a5ee:	f043 0308 	orr.w	r3, r3, #8
 800a5f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <main+0xea8>)
        mLastError = e;
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a5fe:	681c      	ldr	r4, [r3, #0]
 800a600:	e53d      	b.n	800a07e <main+0x8fe>
 800a602:	bf00      	nop
 800a604:	2000025c 	.word	0x2000025c
 800a608:	20000008 	.word	0x20000008
 800a60c:	200000e8 	.word	0x200000e8
 800a610:	20000264 	.word	0x20000264
 800a614:	3cb851ec 	.word	0x3cb851ec
 800a618:	c20c0000 	.word	0xc20c0000
 800a61c:	20000258 	.word	0x20000258
 800a620:	40020400 	.word	0x40020400
 800a624:	40020800 	.word	0x40020800
 800a628:	20000268 	.word	0x20000268
 800a62c:	3301      	adds	r3, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a62e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800a632:	b29b      	uxth	r3, r3
 800a634:	429a      	cmp	r2, r3
 800a636:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a63a:	f4bf ad16 	bcs.w	800a06a <main+0x8ea>
        mAIRState = AIRState;
 800a63e:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a640:	2200      	movs	r2, #0
 800a642:	2102      	movs	r1, #2
 800a644:	48a1      	ldr	r0, [pc, #644]	; (800a8cc <main+0x114c>)
 800a646:	f7f7 f8a7 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a64a:	462a      	mov	r2, r5
 800a64c:	2104      	movs	r1, #4
 800a64e:	48a0      	ldr	r0, [pc, #640]	; (800a8d0 <main+0x1150>)
 800a650:	f7f7 f8a2 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a654:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a658:	462a      	mov	r2, r5
 800a65a:	2101      	movs	r1, #1
 800a65c:	489b      	ldr	r0, [pc, #620]	; (800a8cc <main+0x114c>)
 800a65e:	f7f7 f89b 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a662:	462a      	mov	r2, r5
 800a664:	2102      	movs	r1, #2
 800a666:	489a      	ldr	r0, [pc, #616]	; (800a8d0 <main+0x1150>)
 800a668:	f7f7 f896 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a66c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a670:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a674:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a678:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a67c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a680:	f043 0308 	orr.w	r3, r3, #8
 800a684:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a688:	4b92      	ldr	r3, [pc, #584]	; (800a8d4 <main+0x1154>)
        mLastError = e;
 800a68a:	220a      	movs	r2, #10
 800a68c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a690:	681c      	ldr	r4, [r3, #0]
 800a692:	e4ea      	b.n	800a06a <main+0x8ea>
 800a694:	3201      	adds	r2, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a696:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800a69a:	b292      	uxth	r2, r2
 800a69c:	4291      	cmp	r1, r2
 800a69e:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 800a6a2:	f4bf acd3 	bcs.w	800a04c <main+0x8cc>
        mAIRState = AIRState;
 800a6a6:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2102      	movs	r1, #2
 800a6ac:	4887      	ldr	r0, [pc, #540]	; (800a8cc <main+0x114c>)
 800a6ae:	f7f7 f873 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	2104      	movs	r1, #4
 800a6b6:	4886      	ldr	r0, [pc, #536]	; (800a8d0 <main+0x1150>)
 800a6b8:	f7f7 f86e 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a6bc:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	4881      	ldr	r0, [pc, #516]	; (800a8cc <main+0x114c>)
 800a6c6:	f7f7 f867 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	4880      	ldr	r0, [pc, #512]	; (800a8d0 <main+0x1150>)
 800a6d0:	f7f7 f862 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a6d4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a6d8:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a6dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a6e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a6e4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800a6e8:	4b7b      	ldr	r3, [pc, #492]	; (800a8d8 <main+0x1158>)
 800a6ea:	f042 0208 	orr.w	r2, r2, #8
 800a6ee:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800a6f2:	4a78      	ldr	r2, [pc, #480]	; (800a8d4 <main+0x1154>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
        mLastError = e;
 800a6f6:	2106      	movs	r1, #6
 800a6f8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 800a6fc:	6814      	ldr	r4, [r2, #0]
 800a6fe:	e4a5      	b.n	800a04c <main+0x8cc>
 800a700:	3201      	adds	r2, #1
            if (mErrorCounters[e].isOverLimit()) {
 800a702:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a706:	b292      	uxth	r2, r2
 800a708:	4291      	cmp	r1, r2
 800a70a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800a70e:	f4bf ac90 	bcs.w	800a032 <main+0x8b2>
        mAIRState = AIRState;
 800a712:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a714:	2200      	movs	r2, #0
 800a716:	2102      	movs	r1, #2
 800a718:	486c      	ldr	r0, [pc, #432]	; (800a8cc <main+0x114c>)
 800a71a:	f7f7 f83d 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a71e:	462a      	mov	r2, r5
 800a720:	2104      	movs	r1, #4
 800a722:	486b      	ldr	r0, [pc, #428]	; (800a8d0 <main+0x1150>)
 800a724:	f7f7 f838 	bl	8001798 <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a728:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a72c:	462a      	mov	r2, r5
 800a72e:	2101      	movs	r1, #1
 800a730:	4866      	ldr	r0, [pc, #408]	; (800a8cc <main+0x114c>)
 800a732:	f7f7 f831 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a736:	462a      	mov	r2, r5
 800a738:	2102      	movs	r1, #2
 800a73a:	4865      	ldr	r0, [pc, #404]	; (800a8d0 <main+0x1150>)
 800a73c:	f7f7 f82c 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a740:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a744:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a748:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a74c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a750:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800a754:	4b60      	ldr	r3, [pc, #384]	; (800a8d8 <main+0x1158>)
 800a756:	f042 0208 	orr.w	r2, r2, #8
 800a75a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800a75e:	4a5d      	ldr	r2, [pc, #372]	; (800a8d4 <main+0x1154>)
 800a760:	681b      	ldr	r3, [r3, #0]
        mLastError = e;
 800a762:	2107      	movs	r1, #7
 800a764:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 800a768:	6814      	ldr	r4, [r2, #0]
 800a76a:	e462      	b.n	800a032 <main+0x8b2>
            if (mErrorCounters[e].isOverLimit()) {
 800a76c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800a770:	3301      	adds	r3, #1
 800a772:	b29b      	uxth	r3, r3
 800a774:	429a      	cmp	r2, r3
 800a776:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800a77a:	f4bf ac41 	bcs.w	800a000 <main+0x880>
        mAIRState = AIRState;
 800a77e:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a780:	2200      	movs	r2, #0
 800a782:	2102      	movs	r1, #2
 800a784:	4851      	ldr	r0, [pc, #324]	; (800a8cc <main+0x114c>)
 800a786:	f7f7 f807 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a78a:	462a      	mov	r2, r5
 800a78c:	2104      	movs	r1, #4
 800a78e:	4850      	ldr	r0, [pc, #320]	; (800a8d0 <main+0x1150>)
 800a790:	f7f7 f802 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a794:	462a      	mov	r2, r5
 800a796:	2101      	movs	r1, #1
 800a798:	484c      	ldr	r0, [pc, #304]	; (800a8cc <main+0x114c>)
        mAIRState = AIRState;
 800a79a:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a79e:	f7f6 fffb 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	2102      	movs	r1, #2
 800a7a6:	484a      	ldr	r0, [pc, #296]	; (800a8d0 <main+0x1150>)
 800a7a8:	f7f6 fff6 	bl	8001798 <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a7ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a7b0:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a7b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a7b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mOpMode |= Debug;
 800a7bc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mLastError = e;
 800a7c0:	220b      	movs	r2, #11
        mOpMode |= Debug;
 800a7c2:	f043 0308 	orr.w	r3, r3, #8
 800a7c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mLastError = e;
 800a7ca:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a7ce:	e417      	b.n	800a000 <main+0x880>
                    switch (ivt->comparePrecharge(voltage_status->sum)) {
 800a7d0:	4b41      	ldr	r3, [pc, #260]	; (800a8d8 <main+0x1158>)
        float const match_percentage = U2 * 100 / sum_of_cells - 100;
 800a7d2:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9206      	str	r2, [sp, #24]
 800a7d8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a8dc <main+0x115c>
        float const percentage = U1 * 100 / U2;
 800a7dc:	ed93 7a00 	vldr	s14, [r3]
        float const match_percentage = U2 * 100 / sum_of_cells - 100;
 800a7e0:	eddd 6a06 	vldr	s13, [sp, #24]
        float const percentage = U1 * 100 / U2;
 800a7e4:	ed93 5a01 	vldr	s10, [r3, #4]
        float const match_percentage = U2 * 100 / sum_of_cells - 100;
 800a7e8:	edd3 5a01 	vldr	s11, [r3, #4]
 800a7ec:	4a39      	ldr	r2, [pc, #228]	; (800a8d4 <main+0x1154>)
 800a7ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a7f2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
        bool const is_voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 800a7f6:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
        float const match_percentage = U2 * 100 / sum_of_cells - 100;
 800a7fa:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800a7fe:	6814      	ldr	r4, [r2, #0]
 800a800:	ee76 6ae7 	vsub.f32	s13, s13, s15
        bool const is_voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 800a804:	eef4 6ae4 	vcmpe.f32	s13, s9
 800a808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80c:	d521      	bpl.n	800a852 <main+0x10d2>
 800a80e:	eeba 6a04 	vmov.f32	s12, #164	; 0xc1200000 -10.0
 800a812:	eef4 6ac6 	vcmpe.f32	s13, s12
 800a816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81a:	dd1a      	ble.n	800a852 <main+0x10d2>
        float const percentage = U1 * 100 / U2;
 800a81c:	ee67 7a27 	vmul.f32	s15, s14, s15
        if (percentage >= 95 && is_voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800a820:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a8e0 <main+0x1160>
        float const percentage = U1 * 100 / U2;
 800a824:	eec7 6a85 	vdiv.f32	s13, s15, s10
        if (percentage >= 95 && is_voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800a828:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a830:	db0f      	blt.n	800a852 <main+0x10d2>
 800a832:	ed93 7a00 	vldr	s14, [r3]
 800a836:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a8e4 <main+0x1164>
 800a83a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a842:	dd06      	ble.n	800a852 <main+0x10d2>
 800a844:	ed93 7a01 	vldr	s14, [r3, #4]
 800a848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a850:	dc2c      	bgt.n	800a8ac <main+0x112c>
        else if (U1 < kPrechargeMaxEndVoltage || U2 < kPrechargeMaxEndVoltage)
 800a852:	ed93 7a00 	vldr	s14, [r3]
 800a856:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a8e8 <main+0x1168>
 800a85a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a862:	d407      	bmi.n	800a874 <main+0x10f4>
 800a864:	ed93 7a01 	vldr	s14, [r3, #4]
 800a868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a870:	f57f abb8 	bpl.w	8009fe4 <main+0x864>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a874:	2200      	movs	r2, #0
 800a876:	2101      	movs	r1, #1
 800a878:	4814      	ldr	r0, [pc, #80]	; (800a8cc <main+0x114c>)
 800a87a:	f7f6 ff8d 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a87e:	2200      	movs	r2, #0
 800a880:	2102      	movs	r1, #2
 800a882:	4813      	ldr	r0, [pc, #76]	; (800a8d0 <main+0x1150>)
 800a884:	f7f6 ff88 	bl	8001798 <HAL_GPIO_WritePin>
        mPreState = preState;
 800a888:	2300      	movs	r3, #0
 800a88a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800a88e:	4a11      	ldr	r2, [pc, #68]	; (800a8d4 <main+0x1154>)
 800a890:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <main+0x1158>)
 800a892:	6814      	ldr	r4, [r2, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f7ff bba5 	b.w	8009fe4 <main+0x864>
        if (max_temp > kHighTemp)
 800a89a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a89e:	e580      	b.n	800a3a2 <main+0xc22>
        --count;
 800a8a0:	3901      	subs	r1, #1
 800a8a2:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 800a8a6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800a8aa:	e45a      	b.n	800a162 <main+0x9e2>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4806      	ldr	r0, [pc, #24]	; (800a8cc <main+0x114c>)
 800a8b2:	f7f6 ff71 	bl	8001798 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	2102      	movs	r1, #2
 800a8ba:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <main+0x1150>)
 800a8bc:	f7f6 ff6c 	bl	8001798 <HAL_GPIO_WritePin>
        mPreState = preState;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7e2      	b.n	800a88a <main+0x110a>
        else if (max_temp < kLowTemp)
 800a8c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a8c8:	e56b      	b.n	800a3a2 <main+0xc22>
 800a8ca:	bf00      	nop
 800a8cc:	40020400 	.word	0x40020400
 800a8d0:	40020800 	.word	0x40020800
 800a8d4:	20000268 	.word	0x20000268
 800a8d8:	20000254 	.word	0x20000254
 800a8dc:	42c80000 	.word	0x42c80000
 800a8e0:	42be0000 	.word	0x42be0000
 800a8e4:	43eb0000 	.word	0x43eb0000
 800a8e8:	43e10000 	.word	0x43e10000

0800a8ec <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a8ec:	b510      	push	{r4, lr}
    uint8_t data[8]{ 0 };
 800a8ee:	2400      	movs	r4, #0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a8f0:	b08a      	sub	sp, #40	; 0x28
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a8f2:	ab01      	add	r3, sp, #4
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	aa03      	add	r2, sp, #12
    uint8_t data[8]{ 0 };
 800a8f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a8fc:	f7f6 f939 	bl	8000b72 <HAL_CAN_GetRxMessage>
 800a900:	b960      	cbnz	r0, 800a91c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        switch(RxHeader.StdId) {
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	f240 5222 	movw	r2, #1314	; 0x522
 800a908:	4293      	cmp	r3, r2
 800a90a:	d009      	beq.n	800a920 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 800a90c:	f240 5223 	movw	r2, #1315	; 0x523
 800a910:	4293      	cmp	r3, r2
 800a912:	d031      	beq.n	800a978 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800a914:	f240 5221 	movw	r2, #1313	; 0x521
 800a918:	4293      	cmp	r3, r2
 800a91a:	d017      	beq.n	800a94c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
}
 800a91c:	b00a      	add	sp, #40	; 0x28
 800a91e:	bd10      	pop	{r4, pc}
 800a920:	f8dd 3006 	ldr.w	r3, [sp, #6]
            ivt->setVoltage1(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 800a924:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a9a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 800a928:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800a92a:	ba1b      	rev	r3, r3
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a934:	6813      	ldr	r3, [r2, #0]
 800a936:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        this->U1 = U1;
 800a93a:	ed83 7a00 	vstr	s14, [r3]
	__atomic_store_n(&_M_i, __i, __m);
 800a93e:	f3bf 8f5b 	dmb	ish
 800a942:	60d8      	str	r0, [r3, #12]
 800a944:	f3bf 8f5b 	dmb	ish
}
 800a948:	b00a      	add	sp, #40	; 0x28
 800a94a:	bd10      	pop	{r4, pc}
 800a94c:	f8dd 3006 	ldr.w	r3, [sp, #6]
            ivt->setCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 800a950:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a9a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 800a954:	4a14      	ldr	r2, [pc, #80]	; (800a9a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800a956:	ba1b      	rev	r3, r3
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a960:	6813      	ldr	r3, [r2, #0]
 800a962:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        this->I = I;
 800a966:	ed83 7a02 	vstr	s14, [r3, #8]
 800a96a:	f3bf 8f5b 	dmb	ish
 800a96e:	60d8      	str	r0, [r3, #12]
 800a970:	f3bf 8f5b 	dmb	ish
}
 800a974:	b00a      	add	sp, #40	; 0x28
 800a976:	bd10      	pop	{r4, pc}
 800a978:	f8dd 3006 	ldr.w	r3, [sp, #6]
            ivt->setVoltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 800a97c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a9a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 800a980:	4a09      	ldr	r2, [pc, #36]	; (800a9a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800a982:	ba1b      	rev	r3, r3
 800a984:	ee07 3a90 	vmov	s15, r3
 800a988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a98c:	6813      	ldr	r3, [r2, #0]
 800a98e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        this->U2 = U2;
 800a992:	ed83 7a01 	vstr	s14, [r3, #4]
 800a996:	f3bf 8f5b 	dmb	ish
 800a99a:	60d8      	str	r0, [r3, #12]
 800a99c:	f3bf 8f5b 	dmb	ish
}
 800a9a0:	b00a      	add	sp, #40	; 0x28
 800a9a2:	bd10      	pop	{r4, pc}
 800a9a4:	447a0000 	.word	0x447a0000
 800a9a8:	20000254 	.word	0x20000254

0800a9ac <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a9ac:	b530      	push	{r4, r5, lr}
 800a9ae:	b08b      	sub	sp, #44	; 0x2c
    uint8_t data[8]{ 0 };
 800a9b0:	2400      	movs	r4, #0
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, data) == HAL_OK) {
 800a9b2:	ab01      	add	r3, sp, #4
 800a9b4:	aa03      	add	r2, sp, #12
 800a9b6:	2101      	movs	r1, #1
    uint8_t data[8]{ 0 };
 800a9b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, data) == HAL_OK) {
 800a9bc:	f7f6 f8d9 	bl	8000b72 <HAL_CAN_GetRxMessage>
 800a9c0:	b9c0      	cbnz	r0, 800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
        switch(RxHeader.StdId) {
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800a9c8:	d03e      	beq.n	800aa48 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>
 800a9ca:	d94d      	bls.n	800aa68 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a9cc:	f240 726e 	movw	r2, #1902	; 0x76e
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d011      	beq.n	800a9f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
 800a9d4:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d10b      	bne.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
            switch (data[3]) {
 800a9dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d054      	beq.n	800aa8e <HAL_CAN_RxFifo1MsgPendingCallback+0xe2>
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d105      	bne.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
                if (retSD == FR_OK)
 800a9e8:	4b40      	ldr	r3, [pc, #256]	; (800aaec <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b913      	cbnz	r3, 800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
                    f_unlink(kFile);
 800a9ee:	4840      	ldr	r0, [pc, #256]	; (800aaf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800a9f0:	f7fd fb04 	bl	8007ffc <f_unlink>
}
 800a9f4:	b00b      	add	sp, #44	; 0x2c
 800a9f6:	bd30      	pop	{r4, r5, pc}
            status->setOpMode(data[2]);
 800a9f8:	4a3e      	ldr	r2, [pc, #248]	; (800aaf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
            ltc6811->setDischargeMode(static_cast<LTC6811::DischargeMode>(data[3]));
 800a9fa:	4b3f      	ldr	r3, [pc, #252]	; (800aaf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
            status->setOpMode(data[2]);
 800a9fc:	6811      	ldr	r1, [r2, #0]
            ltc6811->setDischargeMode(static_cast<LTC6811::DischargeMode>(data[3]));
 800a9fe:	681b      	ldr	r3, [r3, #0]
            status->setOpMode(data[2]);
 800aa00:	f89d 0006 	ldrb.w	r0, [sp, #6]
            ltc6811->setDischargeMode(static_cast<LTC6811::DischargeMode>(data[3]));
 800aa04:	f89d 2007 	ldrb.w	r2, [sp, #7]
        mOpMode = opMode;
 800aa08:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
        this->discharge_mode = discharge_mode;
 800aa0c:	711a      	strb	r2, [r3, #4]
            nlg5->oc_limit = data[6];
 800aa0e:	493b      	ldr	r1, [pc, #236]	; (800aafc <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 800aa10:	4a3b      	ldr	r2, [pc, #236]	; (800ab00 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 800aa12:	f89d 300b 	ldrb.w	r3, [sp, #11]
            nlg5->oc_limit = data[6];
 800aa16:	6809      	ldr	r1, [r1, #0]
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 800aa18:	6812      	ldr	r2, [r2, #0]
            nlg5->oc_limit = data[6];
 800aa1a:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800aa1e:	8208      	strh	r0, [r1, #16]
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 800aa20:	f003 0380 	and.w	r3, r3, #128	; 0x80
        this->mode = mode;
 800aa24:	7013      	strb	r3, [r2, #0]
        return mode;
 800aa26:	7813      	ldrb	r3, [r2, #0]
            if (pwm_fan->getMode() == PWM_Fan::Manual)
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e3      	bne.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
        TIM2->CCR4 = std::clamp(duty_cycle, kMinDutyCycle, kMaxDutyCycle) * 200;
 800aa2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800aa30:	2b64      	cmp	r3, #100	; 0x64
 800aa32:	bf28      	it	cs
 800aa34:	2364      	movcs	r3, #100	; 0x64
 800aa36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	6413      	str	r3, [r2, #64]	; 0x40
}
 800aa46:	e7d5      	b.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
            nlg5->b_buffer[0] = data[0];
 800aa48:	4b2c      	ldr	r3, [pc, #176]	; (800aafc <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 800aa4a:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
            nlg5->b_buffer[1] = data[1];
 800aa50:	f89d 0005 	ldrb.w	r0, [sp, #5]
            nlg5->b_buffer[2] = data[2];
 800aa54:	f89d 1006 	ldrb.w	r1, [sp, #6]
            nlg5->b_buffer[3] = data[3];
 800aa58:	f89d 2007 	ldrb.w	r2, [sp, #7]
            nlg5->b_buffer[0] = data[0];
 800aa5c:	761c      	strb	r4, [r3, #24]
            nlg5->b_buffer[1] = data[1];
 800aa5e:	7658      	strb	r0, [r3, #25]
            nlg5->b_buffer[2] = data[2];
 800aa60:	7699      	strb	r1, [r3, #26]
            nlg5->b_buffer[3] = data[3];
 800aa62:	76da      	strb	r2, [r3, #27]
}
 800aa64:	b00b      	add	sp, #44	; 0x2c
 800aa66:	bd30      	pop	{r4, r5, pc}
        switch(RxHeader.StdId) {
 800aa68:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800aa6c:	d1c2      	bne.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
            nlg5->a_buffer[0] = data[0];
 800aa6e:	4b23      	ldr	r3, [pc, #140]	; (800aafc <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 800aa70:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
            nlg5->a_buffer[1] = data[1];
 800aa76:	f89d 0005 	ldrb.w	r0, [sp, #5]
            nlg5->a_buffer[2] = data[2];
 800aa7a:	f89d 1006 	ldrb.w	r1, [sp, #6]
            nlg5->a_buffer[3] = data[3];
 800aa7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
            nlg5->a_buffer[0] = data[0];
 800aa82:	751c      	strb	r4, [r3, #20]
            nlg5->a_buffer[1] = data[1];
 800aa84:	7558      	strb	r0, [r3, #21]
            nlg5->a_buffer[2] = data[2];
 800aa86:	7599      	strb	r1, [r3, #22]
            nlg5->a_buffer[3] = data[3];
 800aa88:	75da      	strb	r2, [r3, #23]
}
 800aa8a:	b00b      	add	sp, #44	; 0x2c
 800aa8c:	bd30      	pop	{r4, r5, pc}
                if (retSD == FR_OK)
 800aa8e:	4b17      	ldr	r3, [pc, #92]	; (800aaec <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 800aa90:	7819      	ldrb	r1, [r3, #0]
 800aa92:	b9d9      	cbnz	r1, 800aacc <HAL_CAN_RxFifo1MsgPendingCallback+0x120>
                    CANTxVolumeSize(f_size(&SDFile));
 800aa94:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)

    return Success;
}

uint32_t CANTxVolumeSize(uint32_t const size_of_log) {
    TxHeader.StdId = LoggerResp;
 800aa96:	4d1c      	ldr	r5, [pc, #112]	; (800ab08 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
                    CANTxVolumeSize(f_size(&SDFile));
 800aa98:	68dc      	ldr	r4, [r3, #12]
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >>  8),
            static_cast<uint8_t>(size_of_log >>  0)
    };

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800aa9a:	481c      	ldr	r0, [pc, #112]	; (800ab0c <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800aa9c:	4b1c      	ldr	r3, [pc, #112]	; (800ab10 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
            static_cast<uint8_t>(size_of_log >> 24),
 800aa9e:	0e22      	lsrs	r2, r4, #24
    };
 800aaa0:	f362 0107 	bfi	r1, r2, #0, #8
            static_cast<uint8_t>(size_of_log >> 16),
 800aaa4:	0c22      	lsrs	r2, r4, #16
    };
 800aaa6:	f362 210f 	bfi	r1, r2, #8, #8
            static_cast<uint8_t>(size_of_log >>  8),
 800aaaa:	0a22      	lsrs	r2, r4, #8
    };
 800aaac:	f362 4117 	bfi	r1, r2, #16, #8
 800aab0:	aa0a      	add	r2, sp, #40	; 0x28
 800aab2:	f364 611f 	bfi	r1, r4, #24, #8
 800aab6:	f842 1d28 	str.w	r1, [r2, #-40]!
    TxHeader.StdId = LoggerResp;
 800aaba:	f240 71b5 	movw	r1, #1973	; 0x7b5
    TxHeader.DLC = 4;
 800aabe:	2404      	movs	r4, #4
    TxHeader.StdId = LoggerResp;
 800aac0:	6029      	str	r1, [r5, #0]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800aac2:	4629      	mov	r1, r5
    TxHeader.DLC = 4;
 800aac4:	612c      	str	r4, [r5, #16]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800aac6:	f7f5 ff79 	bl	80009bc <HAL_CAN_AddTxMessage>
 800aaca:	e793      	b.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
    };
 800aacc:	aa0a      	add	r2, sp, #40	; 0x28
    TxHeader.StdId = LoggerResp;
 800aace:	4c0e      	ldr	r4, [pc, #56]	; (800ab08 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
    };
 800aad0:	f842 0d28 	str.w	r0, [r2, #-40]!
    TxHeader.StdId = LoggerResp;
 800aad4:	f240 70b5 	movw	r0, #1973	; 0x7b5
    TxHeader.DLC = 4;
 800aad8:	2504      	movs	r5, #4
    TxHeader.StdId = LoggerResp;
 800aada:	6020      	str	r0, [r4, #0]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800aadc:	4621      	mov	r1, r4
 800aade:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 800aae0:	480a      	ldr	r0, [pc, #40]	; (800ab0c <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
    TxHeader.DLC = 4;
 800aae2:	6125      	str	r5, [r4, #16]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800aae4:	f7f5 ff6a 	bl	80009bc <HAL_CAN_AddTxMessage>
 800aae8:	e784      	b.n	800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>
 800aaea:	bf00      	nop
 800aaec:	20000284 	.word	0x20000284
 800aaf0:	0800b7f4 	.word	0x0800b7f4
 800aaf4:	20000268 	.word	0x20000268
 800aaf8:	20000258 	.word	0x20000258
 800aafc:	20000260 	.word	0x20000260
 800ab00:	20000264 	.word	0x20000264
 800ab04:	2000028c 	.word	0x2000028c
 800ab08:	20000008 	.word	0x20000008
 800ab0c:	200000e8 	.word	0x200000e8
 800ab10:	2000025c 	.word	0x2000025c

0800ab14 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ab1e:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <SD_CheckStatus+0x38>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ab24:	f7fe fcae 	bl	8009484 <BSP_SD_GetCardState>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d107      	bne.n	800ab3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ab2e:	4b07      	ldr	r3, [pc, #28]	; (800ab4c <SD_CheckStatus+0x38>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f023 0301 	bic.w	r3, r3, #1
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	4b04      	ldr	r3, [pc, #16]	; (800ab4c <SD_CheckStatus+0x38>)
 800ab3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ab3e:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <SD_CheckStatus+0x38>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	b2db      	uxtb	r3, r3
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20000020 	.word	0x20000020

0800ab50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <SD_initialize+0x38>)
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ab60:	f7fe fc2e 	bl	80093c0 <BSP_SD_Init>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d107      	bne.n	800ab7a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff ffd1 	bl	800ab14 <SD_CheckStatus>
 800ab72:	4603      	mov	r3, r0
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b04      	ldr	r3, [pc, #16]	; (800ab88 <SD_initialize+0x38>)
 800ab78:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ab7a:	4b03      	ldr	r3, [pc, #12]	; (800ab88 <SD_initialize+0x38>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b2db      	uxtb	r3, r3
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	20000020 	.word	0x20000020

0800ab8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ab96:	79fb      	ldrb	r3, [r7, #7]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff ffbb 	bl	800ab14 <SD_CheckStatus>
 800ab9e:	4603      	mov	r3, r0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	6879      	ldr	r1, [r7, #4]
 800abc4:	68b8      	ldr	r0, [r7, #8]
 800abc6:	f7fe fc21 	bl	800940c <BSP_SD_ReadBlocks>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d107      	bne.n	800abe0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800abd0:	bf00      	nop
 800abd2:	f7fe fc57 	bl	8009484 <BSP_SD_GetCardState>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1fa      	bne.n	800abd2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b086      	sub	sp, #24
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800abfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	68b8      	ldr	r0, [r7, #8]
 800ac08:	f7fe fc1e 	bl	8009448 <BSP_SD_WriteBlocks>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d107      	bne.n	800ac22 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ac12:	bf00      	nop
 800ac14:	f7fe fc36 	bl	8009484 <BSP_SD_GetCardState>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1fa      	bne.n	800ac14 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08c      	sub	sp, #48	; 0x30
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	603a      	str	r2, [r7, #0]
 800ac36:	71fb      	strb	r3, [r7, #7]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac42:	4b25      	ldr	r3, [pc, #148]	; (800acd8 <SD_ioctl+0xac>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <SD_ioctl+0x28>
 800ac50:	2303      	movs	r3, #3
 800ac52:	e03c      	b.n	800acce <SD_ioctl+0xa2>

  switch (cmd)
 800ac54:	79bb      	ldrb	r3, [r7, #6]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d834      	bhi.n	800acc4 <SD_ioctl+0x98>
 800ac5a:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <SD_ioctl+0x34>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ac71 	.word	0x0800ac71
 800ac64:	0800ac79 	.word	0x0800ac79
 800ac68:	0800ac91 	.word	0x0800ac91
 800ac6c:	0800acab 	.word	0x0800acab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac76:	e028      	b.n	800acca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac78:	f107 030c 	add.w	r3, r7, #12
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe fc11 	bl	80094a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac8e:	e01c      	b.n	800acca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac90:	f107 030c 	add.w	r3, r7, #12
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe fc05 	bl	80094a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aca8:	e00f      	b.n	800acca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800acaa:	f107 030c 	add.w	r3, r7, #12
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fbf8 	bl	80094a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	0a5a      	lsrs	r2, r3, #9
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800acc2:	e002      	b.n	800acca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800acc4:	2304      	movs	r3, #4
 800acc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800acca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3730      	adds	r7, #48	; 0x30
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20000020 	.word	0x20000020

0800acdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ace2:	2300      	movs	r3, #0
 800ace4:	607b      	str	r3, [r7, #4]
 800ace6:	4b10      	ldr	r3, [pc, #64]	; (800ad28 <HAL_MspInit+0x4c>)
 800ace8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acea:	4a0f      	ldr	r2, [pc, #60]	; (800ad28 <HAL_MspInit+0x4c>)
 800acec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acf0:	6453      	str	r3, [r2, #68]	; 0x44
 800acf2:	4b0d      	ldr	r3, [pc, #52]	; (800ad28 <HAL_MspInit+0x4c>)
 800acf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acfa:	607b      	str	r3, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acfe:	2300      	movs	r3, #0
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <HAL_MspInit+0x4c>)
 800ad04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad06:	4a08      	ldr	r2, [pc, #32]	; (800ad28 <HAL_MspInit+0x4c>)
 800ad08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad0c:	6413      	str	r3, [r2, #64]	; 0x40
 800ad0e:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <HAL_MspInit+0x4c>)
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad16:	603b      	str	r3, [r7, #0]
 800ad18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	40023800 	.word	0x40023800

0800ad2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b08c      	sub	sp, #48	; 0x30
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad34:	f107 031c 	add.w	r3, r7, #28
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	605a      	str	r2, [r3, #4]
 800ad3e:	609a      	str	r2, [r3, #8]
 800ad40:	60da      	str	r2, [r3, #12]
 800ad42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a4b      	ldr	r2, [pc, #300]	; (800ae78 <HAL_CAN_MspInit+0x14c>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d13e      	bne.n	800adcc <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800ad4e:	4b4b      	ldr	r3, [pc, #300]	; (800ae7c <HAL_CAN_MspInit+0x150>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3301      	adds	r3, #1
 800ad54:	4a49      	ldr	r2, [pc, #292]	; (800ae7c <HAL_CAN_MspInit+0x150>)
 800ad56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800ad58:	4b48      	ldr	r3, [pc, #288]	; (800ae7c <HAL_CAN_MspInit+0x150>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d10d      	bne.n	800ad7c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800ad60:	2300      	movs	r3, #0
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	4b46      	ldr	r3, [pc, #280]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ad66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad68:	4a45      	ldr	r2, [pc, #276]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ad6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad6e:	6413      	str	r3, [r2, #64]	; 0x40
 800ad70:	4b43      	ldr	r3, [pc, #268]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ad72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
 800ad80:	4b3f      	ldr	r3, [pc, #252]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	4a3e      	ldr	r2, [pc, #248]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ad86:	f043 0301 	orr.w	r3, r3, #1
 800ad8a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad8c:	4b3c      	ldr	r3, [pc, #240]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ad8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad98:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ada6:	2303      	movs	r3, #3
 800ada8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800adaa:	2309      	movs	r3, #9
 800adac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adae:	f107 031c 	add.w	r3, r7, #28
 800adb2:	4619      	mov	r1, r3
 800adb4:	4833      	ldr	r0, [pc, #204]	; (800ae84 <HAL_CAN_MspInit+0x158>)
 800adb6:	f7f6 fb45 	bl	8001444 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800adba:	2200      	movs	r2, #0
 800adbc:	2100      	movs	r1, #0
 800adbe:	2014      	movs	r0, #20
 800adc0:	f7f6 fb09 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800adc4:	2014      	movs	r0, #20
 800adc6:	f7f6 fb22 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800adca:	e050      	b.n	800ae6e <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a2d      	ldr	r2, [pc, #180]	; (800ae88 <HAL_CAN_MspInit+0x15c>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d14b      	bne.n	800ae6e <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800add6:	2300      	movs	r3, #0
 800add8:	613b      	str	r3, [r7, #16]
 800adda:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	4a28      	ldr	r2, [pc, #160]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ade0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ade4:	6413      	str	r3, [r2, #64]	; 0x40
 800ade6:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800adf2:	4b22      	ldr	r3, [pc, #136]	; (800ae7c <HAL_CAN_MspInit+0x150>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3301      	adds	r3, #1
 800adf8:	4a20      	ldr	r2, [pc, #128]	; (800ae7c <HAL_CAN_MspInit+0x150>)
 800adfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800adfc:	4b1f      	ldr	r3, [pc, #124]	; (800ae7c <HAL_CAN_MspInit+0x150>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d10d      	bne.n	800ae20 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	4a1c      	ldr	r2, [pc, #112]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ae0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ae12:	6413      	str	r3, [r2, #64]	; 0x40
 800ae14:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ae16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae20:	2300      	movs	r3, #0
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	4b16      	ldr	r3, [pc, #88]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ae26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae28:	4a15      	ldr	r2, [pc, #84]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ae2a:	f043 0302 	orr.w	r3, r3, #2
 800ae2e:	6313      	str	r3, [r2, #48]	; 0x30
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <HAL_CAN_MspInit+0x154>)
 800ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	60bb      	str	r3, [r7, #8]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800ae3c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ae40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae42:	2302      	movs	r3, #2
 800ae44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800ae4e:	2309      	movs	r3, #9
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae52:	f107 031c 	add.w	r3, r7, #28
 800ae56:	4619      	mov	r1, r3
 800ae58:	480c      	ldr	r0, [pc, #48]	; (800ae8c <HAL_CAN_MspInit+0x160>)
 800ae5a:	f7f6 faf3 	bl	8001444 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2100      	movs	r1, #0
 800ae62:	2041      	movs	r0, #65	; 0x41
 800ae64:	f7f6 fab7 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800ae68:	2041      	movs	r0, #65	; 0x41
 800ae6a:	f7f6 fad0 	bl	800140e <HAL_NVIC_EnableIRQ>
}
 800ae6e:	bf00      	nop
 800ae70:	3730      	adds	r7, #48	; 0x30
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	40006400 	.word	0x40006400
 800ae7c:	2000026c 	.word	0x2000026c
 800ae80:	40023800 	.word	0x40023800
 800ae84:	40020000 	.word	0x40020000
 800ae88:	40006800 	.word	0x40006800
 800ae8c:	40020400 	.word	0x40020400

0800ae90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08a      	sub	sp, #40	; 0x28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae98:	f107 0314 	add.w	r3, r7, #20
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	605a      	str	r2, [r3, #4]
 800aea2:	609a      	str	r2, [r3, #8]
 800aea4:	60da      	str	r2, [r3, #12]
 800aea6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a28      	ldr	r2, [pc, #160]	; (800af50 <HAL_SD_MspInit+0xc0>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d14a      	bne.n	800af48 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	613b      	str	r3, [r7, #16]
 800aeb6:	4b27      	ldr	r3, [pc, #156]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	4a26      	ldr	r2, [pc, #152]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aec0:	6453      	str	r3, [r2, #68]	; 0x44
 800aec2:	4b24      	ldr	r3, [pc, #144]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeca:	613b      	str	r3, [r7, #16]
 800aecc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aece:	2300      	movs	r3, #0
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	4b20      	ldr	r3, [pc, #128]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aed8:	f043 0304 	orr.w	r3, r3, #4
 800aedc:	6313      	str	r3, [r2, #48]	; 0x30
 800aede:	4b1d      	ldr	r3, [pc, #116]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aeea:	2300      	movs	r3, #0
 800aeec:	60bb      	str	r3, [r7, #8]
 800aeee:	4b19      	ldr	r3, [pc, #100]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef2:	4a18      	ldr	r2, [pc, #96]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aef4:	f043 0308 	orr.w	r3, r3, #8
 800aef8:	6313      	str	r3, [r2, #48]	; 0x30
 800aefa:	4b16      	ldr	r3, [pc, #88]	; (800af54 <HAL_SD_MspInit+0xc4>)
 800aefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	60bb      	str	r3, [r7, #8]
 800af04:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800af06:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800af0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af0c:	2302      	movs	r3, #2
 800af0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af10:	2300      	movs	r3, #0
 800af12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af14:	2303      	movs	r3, #3
 800af16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800af18:	230c      	movs	r3, #12
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af1c:	f107 0314 	add.w	r3, r7, #20
 800af20:	4619      	mov	r1, r3
 800af22:	480d      	ldr	r0, [pc, #52]	; (800af58 <HAL_SD_MspInit+0xc8>)
 800af24:	f7f6 fa8e 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800af28:	2304      	movs	r3, #4
 800af2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af2c:	2302      	movs	r3, #2
 800af2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af30:	2300      	movs	r3, #0
 800af32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af34:	2303      	movs	r3, #3
 800af36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800af38:	230c      	movs	r3, #12
 800af3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800af3c:	f107 0314 	add.w	r3, r7, #20
 800af40:	4619      	mov	r1, r3
 800af42:	4806      	ldr	r0, [pc, #24]	; (800af5c <HAL_SD_MspInit+0xcc>)
 800af44:	f7f6 fa7e 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800af48:	bf00      	nop
 800af4a:	3728      	adds	r7, #40	; 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	40012c00 	.word	0x40012c00
 800af54:	40023800 	.word	0x40023800
 800af58:	40020800 	.word	0x40020800
 800af5c:	40020c00 	.word	0x40020c00

0800af60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af68:	f107 0314 	add.w	r3, r7, #20
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	605a      	str	r2, [r3, #4]
 800af72:	609a      	str	r2, [r3, #8]
 800af74:	60da      	str	r2, [r3, #12]
 800af76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a28      	ldr	r2, [pc, #160]	; (800b020 <HAL_SPI_MspInit+0xc0>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d149      	bne.n	800b016 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800af82:	2300      	movs	r3, #0
 800af84:	613b      	str	r3, [r7, #16]
 800af86:	4b27      	ldr	r3, [pc, #156]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	4a26      	ldr	r2, [pc, #152]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800af8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af90:	6453      	str	r3, [r2, #68]	; 0x44
 800af92:	4b24      	ldr	r3, [pc, #144]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800af94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	4b20      	ldr	r3, [pc, #128]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	4a1f      	ldr	r2, [pc, #124]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800afa8:	f043 0301 	orr.w	r3, r3, #1
 800afac:	6313      	str	r3, [r2, #48]	; 0x30
 800afae:	4b1d      	ldr	r3, [pc, #116]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800afba:	2300      	movs	r3, #0
 800afbc:	60bb      	str	r3, [r7, #8]
 800afbe:	4b19      	ldr	r3, [pc, #100]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800afc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc2:	4a18      	ldr	r2, [pc, #96]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800afc4:	f043 0302 	orr.w	r3, r3, #2
 800afc8:	6313      	str	r3, [r2, #48]	; 0x30
 800afca:	4b16      	ldr	r3, [pc, #88]	; (800b024 <HAL_SPI_MspInit+0xc4>)
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	f003 0302 	and.w	r3, r3, #2
 800afd2:	60bb      	str	r3, [r7, #8]
 800afd4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800afd6:	2310      	movs	r3, #16
 800afd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afda:	2302      	movs	r3, #2
 800afdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afe2:	2303      	movs	r3, #3
 800afe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800afe6:	2305      	movs	r3, #5
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afea:	f107 0314 	add.w	r3, r7, #20
 800afee:	4619      	mov	r1, r3
 800aff0:	480d      	ldr	r0, [pc, #52]	; (800b028 <HAL_SPI_MspInit+0xc8>)
 800aff2:	f7f6 fa27 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800aff6:	2338      	movs	r3, #56	; 0x38
 800aff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800affa:	2302      	movs	r3, #2
 800affc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b002:	2303      	movs	r3, #3
 800b004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b006:	2305      	movs	r3, #5
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b00a:	f107 0314 	add.w	r3, r7, #20
 800b00e:	4619      	mov	r1, r3
 800b010:	4806      	ldr	r0, [pc, #24]	; (800b02c <HAL_SPI_MspInit+0xcc>)
 800b012:	f7f6 fa17 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b016:	bf00      	nop
 800b018:	3728      	adds	r7, #40	; 0x28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	40013000 	.word	0x40013000
 800b024:	40023800 	.word	0x40023800
 800b028:	40020000 	.word	0x40020000
 800b02c:	40020400 	.word	0x40020400

0800b030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b040:	d10d      	bne.n	800b05e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <HAL_TIM_Base_MspInit+0x3c>)
 800b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04a:	4a08      	ldr	r2, [pc, #32]	; (800b06c <HAL_TIM_Base_MspInit+0x3c>)
 800b04c:	f043 0301 	orr.w	r3, r3, #1
 800b050:	6413      	str	r3, [r2, #64]	; 0x40
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <HAL_TIM_Base_MspInit+0x3c>)
 800b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b05e:	bf00      	nop
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	40023800 	.word	0x40023800

0800b070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b078:	f107 030c 	add.w	r3, r7, #12
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	605a      	str	r2, [r3, #4]
 800b082:	609a      	str	r2, [r3, #8]
 800b084:	60da      	str	r2, [r3, #12]
 800b086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b090:	d11d      	bne.n	800b0ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b092:	2300      	movs	r3, #0
 800b094:	60bb      	str	r3, [r7, #8]
 800b096:	4b10      	ldr	r3, [pc, #64]	; (800b0d8 <HAL_TIM_MspPostInit+0x68>)
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	4a0f      	ldr	r2, [pc, #60]	; (800b0d8 <HAL_TIM_MspPostInit+0x68>)
 800b09c:	f043 0302 	orr.w	r3, r3, #2
 800b0a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <HAL_TIM_MspPostInit+0x68>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	60bb      	str	r3, [r7, #8]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = FansPWM_Pin;
 800b0ae:	2304      	movs	r3, #4
 800b0b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800b0c2:	f107 030c 	add.w	r3, r7, #12
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4804      	ldr	r0, [pc, #16]	; (800b0dc <HAL_TIM_MspPostInit+0x6c>)
 800b0ca:	f7f6 f9bb 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b0ce:	bf00      	nop
 800b0d0:	3720      	adds	r7, #32
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	40023800 	.word	0x40023800
 800b0dc:	40020400 	.word	0x40020400

0800b0e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b0e4:	bf00      	nop
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b0f2:	e7fe      	b.n	800b0f2 <HardFault_Handler+0x4>

0800b0f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b0f8:	e7fe      	b.n	800b0f8 <MemManage_Handler+0x4>

0800b0fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b0fe:	e7fe      	b.n	800b0fe <BusFault_Handler+0x4>

0800b100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b104:	e7fe      	b.n	800b104 <UsageFault_Handler+0x4>

0800b106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b106:	b480      	push	{r7}
 800b108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b10a:	bf00      	nop
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b114:	b480      	push	{r7}
 800b116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b118:	bf00      	nop
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b122:	b480      	push	{r7}
 800b124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b126:	bf00      	nop
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b134:	f7fe fa30 	bl	8009598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b138:	bf00      	nop
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800b140:	4802      	ldr	r0, [pc, #8]	; (800b14c <CAN1_RX0_IRQHandler+0x10>)
 800b142:	f7f5 fe4e 	bl	8000de2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800b146:	bf00      	nop
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	200000e8 	.word	0x200000e8

0800b150 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800b154:	4802      	ldr	r0, [pc, #8]	; (800b160 <CAN2_RX1_IRQHandler+0x10>)
 800b156:	f7f5 fe44 	bl	8000de2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800b15a:	bf00      	nop
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20000110 	.word	0x20000110

0800b164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b164:	b480      	push	{r7}
 800b166:	af00      	add	r7, sp, #0
	return 1;
 800b168:	2301      	movs	r3, #1
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <_kill>:

int _kill(int pid, int sig)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b17e:	f000 f8bf 	bl	800b300 <__errno>
 800b182:	4602      	mov	r2, r0
 800b184:	2316      	movs	r3, #22
 800b186:	6013      	str	r3, [r2, #0]
	return -1;
 800b188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <_exit>:

void _exit (int status)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b19c:	f04f 31ff 	mov.w	r1, #4294967295
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7ff ffe7 	bl	800b174 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b1a6:	e7fe      	b.n	800b1a6 <_exit+0x12>

0800b1a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b1b0:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <_sbrk+0x50>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d102      	bne.n	800b1be <_sbrk+0x16>
		heap_end = &end;
 800b1b8:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <_sbrk+0x50>)
 800b1ba:	4a10      	ldr	r2, [pc, #64]	; (800b1fc <_sbrk+0x54>)
 800b1bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b1be:	4b0e      	ldr	r3, [pc, #56]	; (800b1f8 <_sbrk+0x50>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b1c4:	4b0c      	ldr	r3, [pc, #48]	; (800b1f8 <_sbrk+0x50>)
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	466a      	mov	r2, sp
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d907      	bls.n	800b1e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b1d2:	f000 f895 	bl	800b300 <__errno>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	230c      	movs	r3, #12
 800b1da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e0:	e006      	b.n	800b1f0 <_sbrk+0x48>
	}

	heap_end += incr;
 800b1e2:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <_sbrk+0x50>)
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	4a03      	ldr	r2, [pc, #12]	; (800b1f8 <_sbrk+0x50>)
 800b1ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20000270 	.word	0x20000270
 800b1fc:	20000708 	.word	0x20000708

0800b200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b200:	b480      	push	{r7}
 800b202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b204:	4b16      	ldr	r3, [pc, #88]	; (800b260 <SystemInit+0x60>)
 800b206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20a:	4a15      	ldr	r2, [pc, #84]	; (800b260 <SystemInit+0x60>)
 800b20c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b214:	4b13      	ldr	r3, [pc, #76]	; (800b264 <SystemInit+0x64>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a12      	ldr	r2, [pc, #72]	; (800b264 <SystemInit+0x64>)
 800b21a:	f043 0301 	orr.w	r3, r3, #1
 800b21e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b220:	4b10      	ldr	r3, [pc, #64]	; (800b264 <SystemInit+0x64>)
 800b222:	2200      	movs	r2, #0
 800b224:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b226:	4b0f      	ldr	r3, [pc, #60]	; (800b264 <SystemInit+0x64>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a0e      	ldr	r2, [pc, #56]	; (800b264 <SystemInit+0x64>)
 800b22c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b234:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b236:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <SystemInit+0x64>)
 800b238:	4a0b      	ldr	r2, [pc, #44]	; (800b268 <SystemInit+0x68>)
 800b23a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b23c:	4b09      	ldr	r3, [pc, #36]	; (800b264 <SystemInit+0x64>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a08      	ldr	r2, [pc, #32]	; (800b264 <SystemInit+0x64>)
 800b242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b246:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b248:	4b06      	ldr	r3, [pc, #24]	; (800b264 <SystemInit+0x64>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b24e:	4b04      	ldr	r3, [pc, #16]	; (800b260 <SystemInit+0x60>)
 800b250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b254:	609a      	str	r2, [r3, #8]
#endif
}
 800b256:	bf00      	nop
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	e000ed00 	.word	0xe000ed00
 800b264:	40023800 	.word	0x40023800
 800b268:	24003010 	.word	0x24003010

0800b26c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b26c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b2a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b270:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b272:	e003      	b.n	800b27c <LoopCopyDataInit>

0800b274 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b274:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b276:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b278:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b27a:	3104      	adds	r1, #4

0800b27c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b27c:	480b      	ldr	r0, [pc, #44]	; (800b2ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b27e:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b280:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b282:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b284:	d3f6      	bcc.n	800b274 <CopyDataInit>
  ldr  r2, =_sbss
 800b286:	4a0b      	ldr	r2, [pc, #44]	; (800b2b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b288:	e002      	b.n	800b290 <LoopFillZerobss>

0800b28a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b28a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b28c:	f842 3b04 	str.w	r3, [r2], #4

0800b290 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b290:	4b09      	ldr	r3, [pc, #36]	; (800b2b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b292:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b294:	d3f9      	bcc.n	800b28a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b296:	f7ff ffb3 	bl	800b200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b29a:	f000 f837 	bl	800b30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b29e:	f7fe fa6f 	bl	8009780 <main>
  bx  lr    
 800b2a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b2a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b2a8:	0800b85c 	.word	0x0800b85c
  ldr  r0, =_sdata
 800b2ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b2b0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 800b2b4:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 800b2b8:	20000708 	.word	0x20000708

0800b2bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b2bc:	e7fe      	b.n	800b2bc <ADC_IRQHandler>

0800b2be <_Znwj>:
 800b2be:	b510      	push	{r4, lr}
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	bf14      	ite	ne
 800b2c4:	4604      	movne	r4, r0
 800b2c6:	2401      	moveq	r4, #1
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 f843 	bl	800b354 <malloc>
 800b2ce:	b930      	cbnz	r0, 800b2de <_Znwj+0x20>
 800b2d0:	f000 f806 	bl	800b2e0 <_ZSt15get_new_handlerv>
 800b2d4:	b908      	cbnz	r0, 800b2da <_Znwj+0x1c>
 800b2d6:	f000 f80b 	bl	800b2f0 <abort>
 800b2da:	4780      	blx	r0
 800b2dc:	e7f4      	b.n	800b2c8 <_Znwj+0xa>
 800b2de:	bd10      	pop	{r4, pc}

0800b2e0 <_ZSt15get_new_handlerv>:
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <_ZSt15get_new_handlerv+0xc>)
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	f3bf 8f5b 	dmb	ish
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	20000274 	.word	0x20000274

0800b2f0 <abort>:
 800b2f0:	b508      	push	{r3, lr}
 800b2f2:	2006      	movs	r0, #6
 800b2f4:	f000 f8dc 	bl	800b4b0 <raise>
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	f7ff ff4b 	bl	800b194 <_exit>
	...

0800b300 <__errno>:
 800b300:	4b01      	ldr	r3, [pc, #4]	; (800b308 <__errno+0x8>)
 800b302:	6818      	ldr	r0, [r3, #0]
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	20000028 	.word	0x20000028

0800b30c <__libc_init_array>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	4e0d      	ldr	r6, [pc, #52]	; (800b344 <__libc_init_array+0x38>)
 800b310:	4c0d      	ldr	r4, [pc, #52]	; (800b348 <__libc_init_array+0x3c>)
 800b312:	1ba4      	subs	r4, r4, r6
 800b314:	10a4      	asrs	r4, r4, #2
 800b316:	2500      	movs	r5, #0
 800b318:	42a5      	cmp	r5, r4
 800b31a:	d109      	bne.n	800b330 <__libc_init_array+0x24>
 800b31c:	4e0b      	ldr	r6, [pc, #44]	; (800b34c <__libc_init_array+0x40>)
 800b31e:	4c0c      	ldr	r4, [pc, #48]	; (800b350 <__libc_init_array+0x44>)
 800b320:	f000 f8e4 	bl	800b4ec <_init>
 800b324:	1ba4      	subs	r4, r4, r6
 800b326:	10a4      	asrs	r4, r4, #2
 800b328:	2500      	movs	r5, #0
 800b32a:	42a5      	cmp	r5, r4
 800b32c:	d105      	bne.n	800b33a <__libc_init_array+0x2e>
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b334:	4798      	blx	r3
 800b336:	3501      	adds	r5, #1
 800b338:	e7ee      	b.n	800b318 <__libc_init_array+0xc>
 800b33a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b33e:	4798      	blx	r3
 800b340:	3501      	adds	r5, #1
 800b342:	e7f2      	b.n	800b32a <__libc_init_array+0x1e>
 800b344:	0800b854 	.word	0x0800b854
 800b348:	0800b854 	.word	0x0800b854
 800b34c:	0800b854 	.word	0x0800b854
 800b350:	0800b858 	.word	0x0800b858

0800b354 <malloc>:
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <malloc+0xc>)
 800b356:	4601      	mov	r1, r0
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	f000 b817 	b.w	800b38c <_malloc_r>
 800b35e:	bf00      	nop
 800b360:	20000028 	.word	0x20000028

0800b364 <memcpy>:
 800b364:	b510      	push	{r4, lr}
 800b366:	1e43      	subs	r3, r0, #1
 800b368:	440a      	add	r2, r1
 800b36a:	4291      	cmp	r1, r2
 800b36c:	d100      	bne.n	800b370 <memcpy+0xc>
 800b36e:	bd10      	pop	{r4, pc}
 800b370:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b378:	e7f7      	b.n	800b36a <memcpy+0x6>

0800b37a <memset>:
 800b37a:	4402      	add	r2, r0
 800b37c:	4603      	mov	r3, r0
 800b37e:	4293      	cmp	r3, r2
 800b380:	d100      	bne.n	800b384 <memset+0xa>
 800b382:	4770      	bx	lr
 800b384:	f803 1b01 	strb.w	r1, [r3], #1
 800b388:	e7f9      	b.n	800b37e <memset+0x4>
	...

0800b38c <_malloc_r>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	1ccd      	adds	r5, r1, #3
 800b390:	f025 0503 	bic.w	r5, r5, #3
 800b394:	3508      	adds	r5, #8
 800b396:	2d0c      	cmp	r5, #12
 800b398:	bf38      	it	cc
 800b39a:	250c      	movcc	r5, #12
 800b39c:	2d00      	cmp	r5, #0
 800b39e:	4606      	mov	r6, r0
 800b3a0:	db01      	blt.n	800b3a6 <_malloc_r+0x1a>
 800b3a2:	42a9      	cmp	r1, r5
 800b3a4:	d903      	bls.n	800b3ae <_malloc_r+0x22>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	6033      	str	r3, [r6, #0]
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	f000 f89b 	bl	800b4e8 <__malloc_lock>
 800b3b2:	4a21      	ldr	r2, [pc, #132]	; (800b438 <_malloc_r+0xac>)
 800b3b4:	6814      	ldr	r4, [r2, #0]
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	b991      	cbnz	r1, 800b3e0 <_malloc_r+0x54>
 800b3ba:	4c20      	ldr	r4, [pc, #128]	; (800b43c <_malloc_r+0xb0>)
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	b91b      	cbnz	r3, 800b3c8 <_malloc_r+0x3c>
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f000 f83d 	bl	800b440 <_sbrk_r>
 800b3c6:	6020      	str	r0, [r4, #0]
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f838 	bl	800b440 <_sbrk_r>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d124      	bne.n	800b41e <_malloc_r+0x92>
 800b3d4:	230c      	movs	r3, #12
 800b3d6:	6033      	str	r3, [r6, #0]
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f000 f886 	bl	800b4ea <__malloc_unlock>
 800b3de:	e7e4      	b.n	800b3aa <_malloc_r+0x1e>
 800b3e0:	680b      	ldr	r3, [r1, #0]
 800b3e2:	1b5b      	subs	r3, r3, r5
 800b3e4:	d418      	bmi.n	800b418 <_malloc_r+0x8c>
 800b3e6:	2b0b      	cmp	r3, #11
 800b3e8:	d90f      	bls.n	800b40a <_malloc_r+0x7e>
 800b3ea:	600b      	str	r3, [r1, #0]
 800b3ec:	50cd      	str	r5, [r1, r3]
 800b3ee:	18cc      	adds	r4, r1, r3
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 f87a 	bl	800b4ea <__malloc_unlock>
 800b3f6:	f104 000b 	add.w	r0, r4, #11
 800b3fa:	1d23      	adds	r3, r4, #4
 800b3fc:	f020 0007 	bic.w	r0, r0, #7
 800b400:	1ac3      	subs	r3, r0, r3
 800b402:	d0d3      	beq.n	800b3ac <_malloc_r+0x20>
 800b404:	425a      	negs	r2, r3
 800b406:	50e2      	str	r2, [r4, r3]
 800b408:	e7d0      	b.n	800b3ac <_malloc_r+0x20>
 800b40a:	428c      	cmp	r4, r1
 800b40c:	684b      	ldr	r3, [r1, #4]
 800b40e:	bf16      	itet	ne
 800b410:	6063      	strne	r3, [r4, #4]
 800b412:	6013      	streq	r3, [r2, #0]
 800b414:	460c      	movne	r4, r1
 800b416:	e7eb      	b.n	800b3f0 <_malloc_r+0x64>
 800b418:	460c      	mov	r4, r1
 800b41a:	6849      	ldr	r1, [r1, #4]
 800b41c:	e7cc      	b.n	800b3b8 <_malloc_r+0x2c>
 800b41e:	1cc4      	adds	r4, r0, #3
 800b420:	f024 0403 	bic.w	r4, r4, #3
 800b424:	42a0      	cmp	r0, r4
 800b426:	d005      	beq.n	800b434 <_malloc_r+0xa8>
 800b428:	1a21      	subs	r1, r4, r0
 800b42a:	4630      	mov	r0, r6
 800b42c:	f000 f808 	bl	800b440 <_sbrk_r>
 800b430:	3001      	adds	r0, #1
 800b432:	d0cf      	beq.n	800b3d4 <_malloc_r+0x48>
 800b434:	6025      	str	r5, [r4, #0]
 800b436:	e7db      	b.n	800b3f0 <_malloc_r+0x64>
 800b438:	20000278 	.word	0x20000278
 800b43c:	2000027c 	.word	0x2000027c

0800b440 <_sbrk_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4c06      	ldr	r4, [pc, #24]	; (800b45c <_sbrk_r+0x1c>)
 800b444:	2300      	movs	r3, #0
 800b446:	4605      	mov	r5, r0
 800b448:	4608      	mov	r0, r1
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	f7ff feac 	bl	800b1a8 <_sbrk>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_sbrk_r+0x1a>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	b103      	cbz	r3, 800b45a <_sbrk_r+0x1a>
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20000704 	.word	0x20000704

0800b460 <_raise_r>:
 800b460:	291f      	cmp	r1, #31
 800b462:	b538      	push	{r3, r4, r5, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	d904      	bls.n	800b474 <_raise_r+0x14>
 800b46a:	2316      	movs	r3, #22
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	f04f 30ff 	mov.w	r0, #4294967295
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b476:	b112      	cbz	r2, 800b47e <_raise_r+0x1e>
 800b478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b47c:	b94b      	cbnz	r3, 800b492 <_raise_r+0x32>
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 f830 	bl	800b4e4 <_getpid_r>
 800b484:	462a      	mov	r2, r5
 800b486:	4601      	mov	r1, r0
 800b488:	4620      	mov	r0, r4
 800b48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b48e:	f000 b817 	b.w	800b4c0 <_kill_r>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d00a      	beq.n	800b4ac <_raise_r+0x4c>
 800b496:	1c59      	adds	r1, r3, #1
 800b498:	d103      	bne.n	800b4a2 <_raise_r+0x42>
 800b49a:	2316      	movs	r3, #22
 800b49c:	6003      	str	r3, [r0, #0]
 800b49e:	2001      	movs	r0, #1
 800b4a0:	e7e7      	b.n	800b472 <_raise_r+0x12>
 800b4a2:	2400      	movs	r4, #0
 800b4a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	4798      	blx	r3
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	e7e0      	b.n	800b472 <_raise_r+0x12>

0800b4b0 <raise>:
 800b4b0:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <raise+0xc>)
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f7ff bfd3 	b.w	800b460 <_raise_r>
 800b4ba:	bf00      	nop
 800b4bc:	20000028 	.word	0x20000028

0800b4c0 <_kill_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4c07      	ldr	r4, [pc, #28]	; (800b4e0 <_kill_r+0x20>)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	f7ff fe51 	bl	800b174 <_kill>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d102      	bne.n	800b4dc <_kill_r+0x1c>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	b103      	cbz	r3, 800b4dc <_kill_r+0x1c>
 800b4da:	602b      	str	r3, [r5, #0]
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000704 	.word	0x20000704

0800b4e4 <_getpid_r>:
 800b4e4:	f7ff be3e 	b.w	800b164 <_getpid>

0800b4e8 <__malloc_lock>:
 800b4e8:	4770      	bx	lr

0800b4ea <__malloc_unlock>:
 800b4ea:	4770      	bx	lr

0800b4ec <_init>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr

0800b4f8 <_fini>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	bf00      	nop
 800b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fe:	bc08      	pop	{r3}
 800b500:	469e      	mov	lr, r3
 800b502:	4770      	bx	lr

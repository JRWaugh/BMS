
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2d4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7e4  0800b7e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7e4  0800b7e4  0001b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7ec  0800b7ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f0  0800b7f0  0001b7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000070  0800b864  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800b864  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044a9c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000481d  00000000  00000000  00064b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  00069360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002a10  00000000  00000000  0006a878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a2d6  00000000  00000000  0006d288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000147ab  00000000  00000000  0009755e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc893  00000000  00000000  000abd09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a859c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b44  00000000  00000000  001a8618  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000625b  00000000  00000000  001ae15c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800b480 	.word	0x0800b480

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	0800b480 	.word	0x0800b480

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 ff21 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00a fb9a 	bl	800ac70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ff39 	bl	80013de <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 ff01 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return uwTick;
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <HAL_GetTick+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000274 	.word	0x20000274

080005c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff ffee 	bl	80005a8 <HAL_GetTick>
 80005cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d8:	d005      	beq.n	80005e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_Delay+0x40>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e6:	bf00      	nop
 80005e8:	f7ff ffde 	bl	80005a8 <HAL_GetTick>
 80005ec:	4602      	mov	r2, r0
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d8f7      	bhi.n	80005e8 <HAL_Delay+0x28>
  {
  }
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e0ed      	b.n	80007f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f00a fb4c 	bl	800acc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f022 0202 	bic.w	r2, r2, #2
 8000636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000638:	f7ff ffb6 	bl	80005a8 <HAL_GetTick>
 800063c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800063e:	e012      	b.n	8000666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000640:	f7ff ffb2 	bl	80005a8 <HAL_GetTick>
 8000644:	4602      	mov	r2, r0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	2b0a      	cmp	r3, #10
 800064c:	d90b      	bls.n	8000666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2205      	movs	r2, #5
 800065e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e0c5      	b.n	80007f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1e5      	bne.n	8000640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f042 0201 	orr.w	r2, r2, #1
 8000682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000684:	f7ff ff90 	bl	80005a8 <HAL_GetTick>
 8000688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800068a:	e012      	b.n	80006b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800068c:	f7ff ff8c 	bl	80005a8 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	2b0a      	cmp	r3, #10
 8000698:	d90b      	bls.n	80006b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2205      	movs	r2, #5
 80006aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e09f      	b.n	80007f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0e5      	beq.n	800068c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7e1b      	ldrb	r3, [r3, #24]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e007      	b.n	80006ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7e5b      	ldrb	r3, [r3, #25]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d108      	bne.n	8000704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e007      	b.n	8000714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7e9b      	ldrb	r3, [r3, #26]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d108      	bne.n	800072e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f042 0220 	orr.w	r2, r2, #32
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e007      	b.n	800073e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0220 	bic.w	r2, r2, #32
 800073c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7edb      	ldrb	r3, [r3, #27]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d108      	bne.n	8000758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f022 0210 	bic.w	r2, r2, #16
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e007      	b.n	8000768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f042 0210 	orr.w	r2, r2, #16
 8000766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7f1b      	ldrb	r3, [r3, #28]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d108      	bne.n	8000782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0208 	orr.w	r2, r2, #8
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e007      	b.n	8000792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f022 0208 	bic.w	r2, r2, #8
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7f5b      	ldrb	r3, [r3, #29]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d108      	bne.n	80007ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f042 0204 	orr.w	r2, r2, #4
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	e007      	b.n	80007bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 0204 	bic.w	r2, r2, #4
 80007ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	431a      	orrs	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	431a      	orrs	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	ea42 0103 	orr.w	r1, r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000812:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000814:	7cfb      	ldrb	r3, [r7, #19]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d003      	beq.n	8000822 <HAL_CAN_ConfigFilter+0x26>
 800081a:	7cfb      	ldrb	r3, [r7, #19]
 800081c:	2b02      	cmp	r3, #2
 800081e:	f040 80be 	bne.w	800099e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000822:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000824:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800082c:	f043 0201 	orr.w	r2, r3, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800083c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	431a      	orrs	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	2201      	movs	r2, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	43db      	mvns	r3, r3
 8000874:	401a      	ands	r2, r3
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d123      	bne.n	80008cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	43db      	mvns	r3, r3
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3248      	adds	r2, #72	; 0x48
 80008ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008c2:	6979      	ldr	r1, [r7, #20]
 80008c4:	3348      	adds	r3, #72	; 0x48
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	440b      	add	r3, r1
 80008ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d122      	bne.n	800091a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	431a      	orrs	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3248      	adds	r2, #72	; 0x48
 80008fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800090e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000910:	6979      	ldr	r1, [r7, #20]
 8000912:	3348      	adds	r3, #72	; 0x48
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d109      	bne.n	8000936 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000934:	e007      	b.n	8000946 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	431a      	orrs	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d109      	bne.n	8000962 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	43db      	mvns	r3, r3
 8000958:	401a      	ands	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000960:	e007      	b.n	8000972 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d107      	bne.n	800098a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	431a      	orrs	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000990:	f023 0201 	bic.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e006      	b.n	80009ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
  }
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40006400 	.word	0x40006400

080009bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009da:	7ffb      	ldrb	r3, [r7, #31]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d003      	beq.n	80009e8 <HAL_CAN_AddTxMessage+0x2c>
 80009e0:	7ffb      	ldrb	r3, [r7, #31]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	f040 80b8 	bne.w	8000b58 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10a      	bne.n	8000a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 80a0 	beq.w	8000b48 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	0e1b      	lsrs	r3, r3, #24
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d907      	bls.n	8000a28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e09e      	b.n	8000b66 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a28:	2201      	movs	r2, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10d      	bne.n	8000a56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a44:	68f9      	ldr	r1, [r7, #12]
 8000a46:	6809      	ldr	r1, [r1, #0]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3318      	adds	r3, #24
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	440b      	add	r3, r1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e00f      	b.n	8000a76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a66:	68f9      	ldr	r1, [r7, #12]
 8000a68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3318      	adds	r3, #24
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	440b      	add	r3, r1
 8000a74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	691a      	ldr	r2, [r3, #16]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3318      	adds	r3, #24
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	440b      	add	r3, r1
 8000a86:	3304      	adds	r3, #4
 8000a88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	7d1b      	ldrb	r3, [r3, #20]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d111      	bne.n	8000ab6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3318      	adds	r3, #24
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	6811      	ldr	r1, [r2, #0]
 8000aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3318      	adds	r3, #24
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3307      	adds	r3, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	061a      	lsls	r2, r3, #24
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3306      	adds	r3, #6
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3305      	adds	r3, #5
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	3204      	adds	r2, #4
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	4610      	mov	r0, r2
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	ea43 0200 	orr.w	r2, r3, r0
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000aec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3303      	adds	r3, #3
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	061a      	lsls	r2, r3, #24
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3302      	adds	r3, #2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3301      	adds	r3, #1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	4610      	mov	r0, r2
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6811      	ldr	r1, [r2, #0]
 8000b14:	ea43 0200 	orr.w	r2, r3, r0
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	440b      	add	r3, r1
 8000b1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3318      	adds	r3, #24
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	4413      	add	r3, r2
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	6811      	ldr	r1, [r2, #0]
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	440b      	add	r3, r1
 8000b42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e00e      	b.n	8000b66 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e006      	b.n	8000b66 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
  }
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b72:	b480      	push	{r7}
 8000b74:	b087      	sub	sp, #28
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d003      	beq.n	8000b96 <HAL_CAN_GetRxMessage+0x24>
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	f040 80f3 	bne.w	8000d7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10e      	bne.n	8000bba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d116      	bne.n	8000bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0e7      	b.n	8000d8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d107      	bne.n	8000bd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e0d8      	b.n	8000d8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	331b      	adds	r3, #27
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0204 	and.w	r2, r3, #4
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	331b      	adds	r3, #27
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4413      	add	r3, r2
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0d5b      	lsrs	r3, r3, #21
 8000c06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	331b      	adds	r3, #27
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	331b      	adds	r3, #27
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4413      	add	r3, r2
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0202 	and.w	r2, r3, #2
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	331b      	adds	r3, #27
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 020f 	and.w	r2, r3, #15
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	331b      	adds	r3, #27
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	3304      	adds	r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	331b      	adds	r3, #27
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	4413      	add	r3, r2
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	0a1a      	lsrs	r2, r3, #8
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	0c1a      	lsrs	r2, r3, #16
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0e1a      	lsrs	r2, r3, #24
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	0a1a      	lsrs	r2, r3, #8
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3305      	adds	r3, #5
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	4413      	add	r3, r2
 8000d26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0c1a      	lsrs	r2, r3, #16
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3306      	adds	r3, #6
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4413      	add	r3, r2
 8000d40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	0e1a      	lsrs	r2, r3, #24
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d108      	bne.n	8000d68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0220 	orr.w	r2, r2, #32
 8000d76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e006      	b.n	8000d8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
  }
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b08a      	sub	sp, #40	; 0x28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d07c      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d023      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2201      	movs	r2, #1
 8000dec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f97d 	bl	80010f8 <HAL_CAN_TxMailbox0CompleteCallback>
 8000dfe:	e016      	b.n	8000e2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d004      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	e00c      	b.n	8000e2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
 8000e26:	e002      	b.n	8000e2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f983 	bl	8001134 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d024      	beq.n	8000e82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f95d 	bl	800110c <HAL_CAN_TxMailbox1CompleteCallback>
 8000e52:	e016      	b.n	8000e82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
 8000e66:	e00c      	b.n	8000e82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	e002      	b.n	8000e82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f963 	bl	8001148 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d024      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f93d 	bl	8001120 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ea6:	e016      	b.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eba:	e00c      	b.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d004      	beq.n	8000ed0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e002      	b.n	8000ed6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f943 	bl	800115c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00c      	beq.n	8000efa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00b      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2208      	movs	r2, #8
 8000f14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f92a 	bl	8001170 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f009 fca3 	bl	800a880 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00c      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2208      	movs	r2, #8
 8000f78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f902 	bl	8001184 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f009 fccf 	bl	800a93c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8ec 	bl	8001198 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2208      	movs	r2, #8
 8000fda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f8e5 	bl	80011ac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d075      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d06c      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001050:	2b00      	cmp	r3, #0
 8001052:	d03d      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d038      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001064:	2b30      	cmp	r3, #48	; 0x30
 8001066:	d017      	beq.n	8001098 <HAL_CAN_IRQHandler+0x302>
 8001068:	2b30      	cmp	r3, #48	; 0x30
 800106a:	d804      	bhi.n	8001076 <HAL_CAN_IRQHandler+0x2e0>
 800106c:	2b10      	cmp	r3, #16
 800106e:	d009      	beq.n	8001084 <HAL_CAN_IRQHandler+0x2ee>
 8001070:	2b20      	cmp	r3, #32
 8001072:	d00c      	beq.n	800108e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001074:	e024      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001076:	2b50      	cmp	r3, #80	; 0x50
 8001078:	d018      	beq.n	80010ac <HAL_CAN_IRQHandler+0x316>
 800107a:	2b60      	cmp	r3, #96	; 0x60
 800107c:	d01b      	beq.n	80010b6 <HAL_CAN_IRQHandler+0x320>
 800107e:	2b40      	cmp	r3, #64	; 0x40
 8001080:	d00f      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001082:	e01d      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800108c:	e018      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001096:	e013      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010a0:	e00e      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010aa:	e009      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010b4:	e004      	b.n	80010c0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2204      	movs	r2, #4
 80010d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d008      	beq.n	80010f0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f868 	bl	80011c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e165      	b.n	80016e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8154 	bne.w	80016da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d00b      	beq.n	8001452 <HAL_GPIO_Init+0x5a>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001446:	2b11      	cmp	r3, #17
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b12      	cmp	r3, #18
 8001450:	d130      	bne.n	80014b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 0201 	and.w	r2, r3, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0xfc>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b12      	cmp	r3, #18
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80ae 	beq.w	80016da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_GPIO_Init+0x300>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4e      	ldr	r2, [pc, #312]	; (80016fc <HAL_GPIO_Init+0x304>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x21a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_GPIO_Init+0x308>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x216>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_GPIO_Init+0x30c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x212>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <HAL_GPIO_Init+0x310>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x20e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_GPIO_Init+0x314>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x20a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a49      	ldr	r2, [pc, #292]	; (8001710 <HAL_GPIO_Init+0x318>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x206>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a48      	ldr	r2, [pc, #288]	; (8001714 <HAL_GPIO_Init+0x31c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x202>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00a      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 80015fe:	2305      	movs	r3, #5
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001602:	2304      	movs	r3, #4
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4934      	ldr	r1, [pc, #208]	; (80016f8 <HAL_GPIO_Init+0x300>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_GPIO_Init+0x320>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001680:	4a25      	ldr	r2, [pc, #148]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_GPIO_Init+0x320>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_GPIO_Init+0x320>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_GPIO_Init+0x320>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f ae96 	bls.w	8001414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40020000 	.word	0x40020000
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40021000 	.word	0x40021000
 8001710:	40021400 	.word	0x40021400
 8001714:	40021800 	.word	0x40021800
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e001      	b.n	800173e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	401a      	ands	r2, r3
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	429a      	cmp	r2, r3
 8001796:	d104      	bne.n	80017a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	041a      	lsls	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7fe fe80 	bl	80005a8 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7fe fe7c 	bl	80005a8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 fb4b 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 800193e:	4601      	mov	r1, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	fa21 f303 	lsr.w	r3, r1, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdf4 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	0800b7d4 	.word	0x0800b7d4
 8001978:	20000008 	.word	0x20000008
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d010      	beq.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019b8:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019be:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	496c      	ldr	r1, [pc, #432]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	4960      	ldr	r1, [pc, #384]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d017      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a14:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4955      	ldr	r1, [pc, #340]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a32:	d101      	bne.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d017      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	4946      	ldr	r1, [pc, #280]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 808a 	beq.w	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a38      	ldr	r2, [pc, #224]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ab6:	f7fe fd77 	bl	80005a8 <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7fe fd73 	bl	80005a8 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e278      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d02f      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d028      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d114      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b22:	f7fe fd41 	bl	80005a8 <HAL_GetTick>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7fe fd3d 	bl	80005a8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e240      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ee      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b58:	d114      	bne.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b6e:	4902      	ldr	r1, [pc, #8]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e00c      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42470e40 	.word	0x42470e40
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b8e:	6093      	str	r3, [r2, #8]
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	4944      	ldr	r1, [pc, #272]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bb6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00a      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4937      	ldr	r1, [pc, #220]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001be6:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf4:	492e      	ldr	r1, [pc, #184]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d011      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	4926      	ldr	r1, [pc, #152]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c26:	d101      	bne.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	491a      	ldr	r1, [pc, #104]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d011      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c68:	4911      	ldr	r1, [pc, #68]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c78:	d101      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d005      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8c:	f040 80ff 	bne.w	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c96:	f7fe fc87 	bl	80005a8 <HAL_GetTick>
 8001c9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c9c:	e00e      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c9e:	f7fe fc83 	bl	80005a8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d907      	bls.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e188      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	424711e0 	.word	0x424711e0
 8001cb8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cbc:	4b7e      	ldr	r3, [pc, #504]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ea      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d028      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d124      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cf0:	4b71      	ldr	r3, [pc, #452]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d02:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d08:	0e1b      	lsrs	r3, r3, #24
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	431a      	orrs	r2, r3
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	071b      	lsls	r3, r3, #28
 8001d32:	4961      	ldr	r1, [pc, #388]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d035      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d64:	d130      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d66:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d78:	4b4f      	ldr	r3, [pc, #316]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d7e:	0f1b      	lsrs	r3, r3, #28
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	019b      	lsls	r3, r3, #6
 8001d90:	431a      	orrs	r2, r3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	431a      	orrs	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	071b      	lsls	r3, r3, #28
 8001da8:	4943      	ldr	r1, [pc, #268]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001db0:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db6:	f023 021f 	bic.w	r2, r3, #31
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	493d      	ldr	r1, [pc, #244]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d029      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ddc:	d124      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df6:	0f1b      	lsrs	r3, r3, #28
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	071b      	lsls	r3, r3, #28
 8001e20:	4925      	ldr	r1, [pc, #148]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d016      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	019b      	lsls	r3, r3, #6
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	071b      	lsls	r3, r3, #28
 8001e5a:	4917      	ldr	r1, [pc, #92]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e68:	f7fe fb9e 	bl	80005a8 <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e70:	f7fe fb9a 	bl	80005a8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e09f      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 8095 	bne.w	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fb84 	bl	80005a8 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ea4:	f7fe fb80 	bl	80005a8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d908      	bls.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e085      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	42470068 	.word	0x42470068
 8001ec0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ec4:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed0:	d0e8      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d02b      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d127      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	431a      	orrs	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	061b      	lsls	r3, r3, #24
 8001f28:	4928      	ldr	r1, [pc, #160]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01d      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f5e:	d118      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	0e1b      	lsrs	r3, r3, #24
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	019b      	lsls	r3, r3, #6
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	4910      	ldr	r1, [pc, #64]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fb06 	bl	80005a8 <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fa0:	f7fe fb02 	bl	80005a8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e007      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fbe:	d1ef      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	; 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470070 	.word	0x42470070

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fee:	4b9f      	ldr	r3, [pc, #636]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	f200 8130 	bhi.w	800225c <HAL_RCC_GetSysClockFreq+0x288>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <HAL_RCC_GetSysClockFreq+0x30>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002039 	.word	0x08002039
 8002008:	0800225d 	.word	0x0800225d
 800200c:	0800225d 	.word	0x0800225d
 8002010:	0800225d 	.word	0x0800225d
 8002014:	0800203f 	.word	0x0800203f
 8002018:	0800225d 	.word	0x0800225d
 800201c:	0800225d 	.word	0x0800225d
 8002020:	0800225d 	.word	0x0800225d
 8002024:	08002045 	.word	0x08002045
 8002028:	0800225d 	.word	0x0800225d
 800202c:	0800225d 	.word	0x0800225d
 8002030:	0800225d 	.word	0x0800225d
 8002034:	08002153 	.word	0x08002153
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4b8d      	ldr	r3, [pc, #564]	; (8002270 <HAL_RCC_GetSysClockFreq+0x29c>)
 800203a:	613b      	str	r3, [r7, #16]
       break;
 800203c:	e111      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800203e:	4b8d      	ldr	r3, [pc, #564]	; (8002274 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002040:	613b      	str	r3, [r7, #16]
      break;
 8002042:	e10e      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002044:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800204c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d023      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205a:	4b84      	ldr	r3, [pc, #528]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	f04f 0400 	mov.w	r4, #0
 8002064:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	ea03 0501 	and.w	r5, r3, r1
 8002070:	ea04 0602 	and.w	r6, r4, r2
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002076:	fb02 f106 	mul.w	r1, r2, r6
 800207a:	2200      	movs	r2, #0
 800207c:	fb02 f205 	mul.w	r2, r2, r5
 8002080:	440a      	add	r2, r1
 8002082:	497c      	ldr	r1, [pc, #496]	; (8002274 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002084:	fba5 0101 	umull	r0, r1, r5, r1
 8002088:	1853      	adds	r3, r2, r1
 800208a:	4619      	mov	r1, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	461a      	mov	r2, r3
 8002094:	4623      	mov	r3, r4
 8002096:	f7fe f8b5 	bl	8000204 <__aeabi_uldivmod>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e049      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b72      	ldr	r3, [pc, #456]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	f04f 0400 	mov.w	r4, #0
 80020ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	ea03 0501 	and.w	r5, r3, r1
 80020b8:	ea04 0602 	and.w	r6, r4, r2
 80020bc:	4629      	mov	r1, r5
 80020be:	4632      	mov	r2, r6
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f04f 0400 	mov.w	r4, #0
 80020c8:	0154      	lsls	r4, r2, #5
 80020ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020ce:	014b      	lsls	r3, r1, #5
 80020d0:	4619      	mov	r1, r3
 80020d2:	4622      	mov	r2, r4
 80020d4:	1b49      	subs	r1, r1, r5
 80020d6:	eb62 0206 	sbc.w	r2, r2, r6
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f04f 0400 	mov.w	r4, #0
 80020e2:	0194      	lsls	r4, r2, #6
 80020e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020e8:	018b      	lsls	r3, r1, #6
 80020ea:	1a5b      	subs	r3, r3, r1
 80020ec:	eb64 0402 	sbc.w	r4, r4, r2
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	00e2      	lsls	r2, r4, #3
 80020fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020fe:	00d9      	lsls	r1, r3, #3
 8002100:	460b      	mov	r3, r1
 8002102:	4614      	mov	r4, r2
 8002104:	195b      	adds	r3, r3, r5
 8002106:	eb44 0406 	adc.w	r4, r4, r6
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	02a2      	lsls	r2, r4, #10
 8002114:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002118:	0299      	lsls	r1, r3, #10
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	4618      	mov	r0, r3
 8002120:	4621      	mov	r1, r4
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	461a      	mov	r2, r3
 800212a:	4623      	mov	r3, r4
 800212c:	f7fe f86a 	bl	8000204 <__aeabi_uldivmod>
 8002130:	4603      	mov	r3, r0
 8002132:	460c      	mov	r4, r1
 8002134:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002136:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	3301      	adds	r3, #1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	613b      	str	r3, [r7, #16]
      break;
 8002150:	e087      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800215a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215c:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	f04f 0400 	mov.w	r4, #0
 8002172:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	ea03 0501 	and.w	r5, r3, r1
 800217e:	ea04 0602 	and.w	r6, r4, r2
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002184:	fb02 f106 	mul.w	r1, r2, r6
 8002188:	2200      	movs	r2, #0
 800218a:	fb02 f205 	mul.w	r2, r2, r5
 800218e:	440a      	add	r2, r1
 8002190:	4938      	ldr	r1, [pc, #224]	; (8002274 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002192:	fba5 0101 	umull	r0, r1, r5, r1
 8002196:	1853      	adds	r3, r2, r1
 8002198:	4619      	mov	r1, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f04f 0400 	mov.w	r4, #0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	f7fe f82e 	bl	8000204 <__aeabi_uldivmod>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e049      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	f04f 0400 	mov.w	r4, #0
 80021ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	ea03 0501 	and.w	r5, r3, r1
 80021c6:	ea04 0602 	and.w	r6, r4, r2
 80021ca:	4629      	mov	r1, r5
 80021cc:	4632      	mov	r2, r6
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	f04f 0400 	mov.w	r4, #0
 80021d6:	0154      	lsls	r4, r2, #5
 80021d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021dc:	014b      	lsls	r3, r1, #5
 80021de:	4619      	mov	r1, r3
 80021e0:	4622      	mov	r2, r4
 80021e2:	1b49      	subs	r1, r1, r5
 80021e4:	eb62 0206 	sbc.w	r2, r2, r6
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	f04f 0400 	mov.w	r4, #0
 80021f0:	0194      	lsls	r4, r2, #6
 80021f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f6:	018b      	lsls	r3, r1, #6
 80021f8:	1a5b      	subs	r3, r3, r1
 80021fa:	eb64 0402 	sbc.w	r4, r4, r2
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	00e2      	lsls	r2, r4, #3
 8002208:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800220c:	00d9      	lsls	r1, r3, #3
 800220e:	460b      	mov	r3, r1
 8002210:	4614      	mov	r4, r2
 8002212:	195b      	adds	r3, r3, r5
 8002214:	eb44 0406 	adc.w	r4, r4, r6
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	02a2      	lsls	r2, r4, #10
 8002222:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002226:	0299      	lsls	r1, r3, #10
 8002228:	460b      	mov	r3, r1
 800222a:	4614      	mov	r4, r2
 800222c:	4618      	mov	r0, r3
 800222e:	4621      	mov	r1, r4
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	461a      	mov	r2, r3
 8002238:	4623      	mov	r3, r4
 800223a:	f7fd ffe3 	bl	8000204 <__aeabi_uldivmod>
 800223e:	4603      	mov	r3, r0
 8002240:	460c      	mov	r4, r1
 8002242:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_GetSysClockFreq+0x298>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0f1b      	lsrs	r3, r3, #28
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	613b      	str	r3, [r7, #16]
      break;
 800225a:	e002      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_RCC_GetSysClockFreq+0x29c>)
 800225e:	613b      	str	r3, [r7, #16]
      break;
 8002260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002262:	693b      	ldr	r3, [r7, #16]
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	00f42400 	.word	0x00f42400
 8002274:	017d7840 	.word	0x017d7840

08002278 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8083 	beq.w	8002398 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002292:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d019      	beq.n	80022d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800229e:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022aa:	4b8f      	ldr	r3, [pc, #572]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b8:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c4:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d0:	d10b      	bne.n	80022ea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	4b85      	ldr	r3, [pc, #532]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d05b      	beq.n	8002396 <HAL_RCC_OscConfig+0x11e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d157      	bne.n	8002396 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e216      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x8a>
 80022f4:	4b7c      	ldr	r3, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7b      	ldr	r2, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e01d      	b.n	800233e <HAL_RCC_OscConfig+0xc6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0xae>
 800230c:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a75      	ldr	r2, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0xc6>
 8002326:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6f      	ldr	r2, [pc, #444]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6c      	ldr	r2, [pc, #432]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d013      	beq.n	800236e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe f92f 	bl	80005a8 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234e:	f7fe f92b 	bl	80005a8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1db      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0xd6>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe f91b 	bl	80005a8 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002376:	f7fe f917 	bl	80005a8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	; 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1c7      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0xfe>
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002396:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d06f      	beq.n	8002484 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d105      	bne.n	80023c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d11c      	bne.n	800240e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d4:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d116      	bne.n	800240e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_OscConfig+0x180>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e18f      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4938      	ldr	r1, [pc, #224]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240c:	e03a      	b.n	8002484 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d020      	beq.n	8002458 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002416:	4b35      	ldr	r3, [pc, #212]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe f8c4 	bl	80005a8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe f8c0 	bl	80005a8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e170      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4925      	ldr	r1, [pc, #148]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
 8002456:	e015      	b.n	8002484 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe f8a3 	bl	80005a8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe f89f 	bl	80005a8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e14f      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d037      	beq.n	8002500 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe f883 	bl	80005a8 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe f87f 	bl	80005a8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e12f      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_OscConfig+0x270>)
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x22e>
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe f86c 	bl	80005a8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe f868 	bl	80005a8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d908      	bls.n	80024f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e118      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470000 	.word	0x42470000
 80024f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b8a      	ldr	r3, [pc, #552]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e9      	bne.n	80024d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8097 	beq.w	800263c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b83      	ldr	r3, [pc, #524]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a7e      	ldr	r2, [pc, #504]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b7c      	ldr	r3, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b79      	ldr	r3, [pc, #484]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a75      	ldr	r2, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7fe f827 	bl	80005a8 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7fe f823 	bl	80005a8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0d3      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x31a>
 8002584:	4b66      	ldr	r3, [pc, #408]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	4a65      	ldr	r2, [pc, #404]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	; 0x70
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x354>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x33c>
 800259a:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a60      	ldr	r2, [pc, #384]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0x354>
 80025b4:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a59      	ldr	r2, [pc, #356]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a56      	ldr	r2, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fd ffe8 	bl	80005a8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fd ffe4 	bl	80005a8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e092      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ee      	beq.n	80025dc <HAL_RCC_OscConfig+0x364>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fd ffd2 	bl	80005a8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fd ffce 	bl	80005a8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e07c      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ee      	bne.n	8002608 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	4a3a      	ldr	r2, [pc, #232]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d068      	beq.n	8002716 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d060      	beq.n	8002712 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d145      	bne.n	80026e4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fd ffa3 	bl	80005a8 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002666:	f7fd ff9f 	bl	80005a8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e04f      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	019b      	lsls	r3, r3, #6
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	071b      	lsls	r3, r3, #28
 80026b0:	491b      	ldr	r1, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fd ff74 	bl	80005a8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fd ff70 	bl	80005a8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e020      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44c>
 80026e2:	e018      	b.n	8002716 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fd ff5d 	bl	80005a8 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fd ff59 	bl	80005a8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e009      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_OscConfig+0x4a8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x47a>
 8002710:	e001      	b.n	8002716 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000
 8002728:	42470060 	.word	0x42470060

0800272c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f008 fb67 	bl	800ae24 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f814 	bl	800278c <HAL_SD_InitCard>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00a      	b.n	8002784 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b08e      	sub	sp, #56	; 0x38
 8002790:	af04      	add	r7, sp, #16
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80027a8:	2376      	movs	r3, #118	; 0x76
 80027aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681d      	ldr	r5, [r3, #0]
 80027b0:	466c      	mov	r4, sp
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c4:	4628      	mov	r0, r5
 80027c6:	f002 fc25 	bl	8005014 <SDIO_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80027d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e031      	b.n	8002840 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_SD_InitCard+0xbc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 fc5d 	bl	80050a6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_SD_InitCard+0xbc>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fefc 	bl	80035f0 <SD_PowerON>
 80027f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e013      	b.n	8002840 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fe1b 	bl	8003454 <SD_InitCard>
 800281e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bdb0      	pop	{r4, r5, r7, pc}
 8002848:	422580a0 	.word	0x422580a0

0800284c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b092      	sub	sp, #72	; 0x48
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800285a:	f7fd fea5 	bl	80005a8 <HAL_GetTick>
 800285e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d107      	bne.n	800287e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1d7      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 81ca 	bne.w	8002c20 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	441a      	add	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	429a      	cmp	r2, r3
 800289e:	d907      	bls.n	80028b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e1be      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d002      	beq.n	80028ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	025b      	lsls	r3, r3, #9
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fc78 	bl	80051cc <SDMMC_CmdBlockLength>
 80028dc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00f      	beq.n	8002904 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a9a      	ldr	r2, [pc, #616]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f2:	431a      	orrs	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e194      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002910:	2390      	movs	r3, #144	; 0x90
 8002912:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f107 0214 	add.w	r2, r7, #20
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fc22 	bl	8005174 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d90a      	bls.n	800294c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002942:	4618      	mov	r0, r3
 8002944:	f002 fc86 	bl	8005254 <SDMMC_CmdReadMultiBlock>
 8002948:	6478      	str	r0, [r7, #68]	; 0x44
 800294a:	e009      	b.n	8002960 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002958:	4618      	mov	r0, r3
 800295a:	f002 fc59 	bl	8005210 <SDMMC_CmdReadSingleBlock>
 800295e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a7a      	ldr	r2, [pc, #488]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e150      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002990:	e061      	b.n	8002a56 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d03c      	beq.n	8002a1a <HAL_SD_ReadBlocks+0x1ce>
 80029a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d039      	beq.n	8002a1a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
 80029aa:	e033      	b.n	8002a14 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fb5a 	bl	800506a <SDIO_ReadFIFO>
 80029b6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	3301      	adds	r3, #1
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c8:	3b01      	subs	r3, #1
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	3301      	adds	r3, #1
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029de:	3b01      	subs	r3, #1
 80029e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ee:	3301      	adds	r3, #1
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f4:	3b01      	subs	r3, #1
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	0e1b      	lsrs	r3, r3, #24
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	3301      	adds	r3, #1
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a10:	3301      	adds	r3, #1
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40
 8002a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a16:	2b07      	cmp	r3, #7
 8002a18:	d9c8      	bls.n	80029ac <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002a1a:	f7fd fdc5 	bl	80005a8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d902      	bls.n	8002a30 <HAL_SD_ReadBlocks+0x1e4>
 8002a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d112      	bne.n	8002a56 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0eb      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d096      	beq.n	8002992 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d022      	beq.n	8002ab8 <HAL_SD_ReadBlocks+0x26c>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d91f      	bls.n	8002ab8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fc4b 	bl	8005320 <SDMMC_CmdStopTransfer>
 8002a8a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0ba      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	f043 0208 	orr.w	r2, r3, #8
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0a0      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	f043 0202 	orr.w	r2, r3, #2
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e086      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d063      	beq.n	8002bf6 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_SD_ReadBlocks+0x308>)
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e06c      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
 8002b54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fa84 	bl	800506a <SDIO_ReadFIFO>
 8002b62:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	3301      	adds	r3, #1
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	3b01      	subs	r3, #1
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	3301      	adds	r3, #1
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	0e1b      	lsrs	r3, r3, #24
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002bba:	f7fd fcf5 	bl	80005a8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d902      	bls.n	8002bd0 <HAL_SD_ReadBlocks+0x384>
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d112      	bne.n	8002bf6 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_SD_ReadBlocks+0x3ec>)
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e01b      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SD_ReadBlocks+0x3be>
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1a6      	bne.n	8002b58 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e006      	b.n	8002c2e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3748      	adds	r7, #72	; 0x48
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	004005ff 	.word	0x004005ff

08002c3c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b092      	sub	sp, #72	; 0x48
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c4a:	f7fd fcad 	bl	80005a8 <HAL_GetTick>
 8002c4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e182      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	f040 8175 	bne.w	8002f66 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d907      	bls.n	8002ca0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e169      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d002      	beq.n	8002cbe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fa80 	bl	80051cc <SDMMC_CmdBlockLength>
 8002ccc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00f      	beq.n	8002cf4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a9c      	ldr	r2, [pc, #624]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e13f      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	025b      	lsls	r3, r3, #9
 8002cfe:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d00:	2390      	movs	r3, #144	; 0x90
 8002d02:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f107 0218 	add.w	r2, r7, #24
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fa2a 	bl	8005174 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d90a      	bls.n	8002d3c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fad2 	bl	80052dc <SDMMC_CmdWriteMultiBlock>
 8002d38:	6478      	str	r0, [r7, #68]	; 0x44
 8002d3a:	e009      	b.n	8002d50 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 faa5 	bl	8005298 <SDMMC_CmdWriteSingleBlock>
 8002d4e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d012      	beq.n	8002d7c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0fb      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002d80:	e065      	b.n	8002e4e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d040      	beq.n	8002e12 <HAL_SD_WriteBlocks+0x1d6>
 8002d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03d      	beq.n	8002e12 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	e037      	b.n	8002e0c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	3301      	adds	r3, #1
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	3b01      	subs	r3, #1
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	041a      	lsls	r2, r3, #16
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	061a      	lsls	r2, r3, #24
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	3301      	adds	r3, #1
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	3b01      	subs	r3, #1
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f107 0214 	add.w	r2, r7, #20
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 f93f 	bl	8005084 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	3301      	adds	r3, #1
 8002e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0e:	2b07      	cmp	r3, #7
 8002e10:	d9c4      	bls.n	8002d9c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e12:	f7fd fbc9 	bl	80005a8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d902      	bls.n	8002e28 <HAL_SD_WriteBlocks+0x1ec>
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d112      	bne.n	8002e4e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a47      	ldr	r2, [pc, #284]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e092      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d092      	beq.n	8002d82 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d022      	beq.n	8002eb0 <HAL_SD_WriteBlocks+0x274>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d91f      	bls.n	8002eb0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d01b      	beq.n	8002eb0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 fa4f 	bl	8005320 <SDMMC_CmdStopTransfer>
 8002e82:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d012      	beq.n	8002eb0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e061      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d012      	beq.n	8002ee4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a22      	ldr	r2, [pc, #136]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	f043 0208 	orr.w	r2, r3, #8
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e047      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e02d      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d014      	beq.n	8002f50 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_SD_WriteBlocks+0x310>)
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e013      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
 8002f4c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e006      	b.n	8002f74 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3748      	adds	r7, #72	; 0x48
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8a:	0f9b      	lsrs	r3, r3, #30
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fdc:	0d1b      	lsrs	r3, r3, #20
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffa:	0bdb      	lsrs	r3, r3, #15
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300c:	0b9b      	lsrs	r3, r3, #14
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	b2da      	uxtb	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301e:	0b5b      	lsrs	r3, r3, #13
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003030:	0b1b      	lsrs	r3, r3, #12
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	2b00      	cmp	r3, #0
 800304a:	d163      	bne.n	8003114 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003050:	009a      	lsls	r2, r3, #2
 8003052:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003056:	4013      	ands	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800305c:	0f92      	lsrs	r2, r2, #30
 800305e:	431a      	orrs	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003068:	0edb      	lsrs	r3, r3, #27
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	b2da      	uxtb	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	0e1b      	lsrs	r3, r3, #24
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	b2da      	uxtb	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308c:	0d5b      	lsrs	r3, r3, #21
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b2da      	uxtb	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b0:	0bdb      	lsrs	r3, r3, #15
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	7e1b      	ldrb	r3, [r3, #24]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	3302      	adds	r3, #2
 80030d4:	2201      	movs	r2, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030de:	fb02 f203 	mul.w	r2, r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	7a1b      	ldrb	r3, [r3, #8]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003100:	0a52      	lsrs	r2, r2, #9
 8003102:	fb02 f203 	mul.w	r2, r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003110:	661a      	str	r2, [r3, #96]	; 0x60
 8003112:	e031      	b.n	8003178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	2b01      	cmp	r3, #1
 800311a:	d11d      	bne.n	8003158 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	3301      	adds	r3, #1
 8003138:	029a      	lsls	r2, r3, #10
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	661a      	str	r2, [r3, #96]	; 0x60
 8003156:	e00f      	b.n	8003178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_SD_GetCardCSD+0x344>)
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e09d      	b.n	80032b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317c:	0b9b      	lsrs	r3, r3, #14
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318e:	09db      	lsrs	r3, r3, #7
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003196:	b2da      	uxtb	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	0fdb      	lsrs	r3, r3, #31
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	0f5b      	lsrs	r3, r3, #29
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	0d9b      	lsrs	r3, r3, #22
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	0d5b      	lsrs	r3, r3, #21
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	b2da      	uxtb	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	0bdb      	lsrs	r3, r3, #15
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	0b9b      	lsrs	r3, r3, #14
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	b2da      	uxtb	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	0b5b      	lsrs	r3, r3, #13
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	0b1b      	lsrs	r3, r3, #12
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	b2da      	uxtb	r2, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	004005ff 	.word	0x004005ff

080032c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b08e      	sub	sp, #56	; 0x38
 8003320:	af04      	add	r7, sp, #16
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2203      	movs	r2, #3
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	2b03      	cmp	r3, #3
 8003334:	d02e      	beq.n	8003394 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d106      	bne.n	800334c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
 800334a:	e029      	b.n	80033a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003352:	d10a      	bne.n	800336a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa01 	bl	800375c <SD_WideBus_Enable>
 800335a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
 8003368:	e01a      	b.n	80033a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fa3e 	bl	80037f2 <SD_WideBus_Disable>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
 8003384:	e00c      	b.n	80033a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
 8003392:	e005      	b.n	80033a0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e024      	b.n	8003406 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681d      	ldr	r5, [r3, #0]
 80033e2:	466c      	mov	r4, sp
 80033e4:	f107 0318 	add.w	r3, r7, #24
 80033e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033f0:	f107 030c 	add.w	r3, r7, #12
 80033f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f6:	4628      	mov	r0, r5
 80033f8:	f001 fe0c 	bl	8005014 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3728      	adds	r7, #40	; 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bdb0      	pop	{r4, r5, r7, pc}
 800340e:	bf00      	nop
 8003410:	004005ff 	.word	0x004005ff

08003414 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f970 	bl	800370c <SD_SendStatus>
 800342c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	0a5b      	lsrs	r3, r3, #9
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800344a:	693b      	ldr	r3, [r7, #16]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b094      	sub	sp, #80	; 0x50
 8003458:	af04      	add	r7, sp, #16
 800345a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800345c:	2301      	movs	r3, #1
 800345e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f001 fe2d 	bl	80050c4 <SDIO_GetPowerState>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003470:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003474:	e0b7      	b.n	80035e6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	2b03      	cmp	r3, #3
 800347c:	d02f      	beq.n	80034de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f002 f856 	bl	8005534 <SDMMC_CmdSendCID>
 8003488:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <SD_InitCard+0x40>
    {
      return errorstate;
 8003490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003492:	e0a8      	b.n	80035e6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fe57 	bl	800514e <SDIO_GetResponse>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2104      	movs	r1, #4
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fe4e 	bl	800514e <SDIO_GetResponse>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2108      	movs	r1, #8
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fe45 	bl	800514e <SDIO_GetResponse>
 80034c4:	4602      	mov	r2, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	210c      	movs	r1, #12
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 fe3c 	bl	800514e <SDIO_GetResponse>
 80034d6:	4602      	mov	r2, r0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d00d      	beq.n	8003502 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f107 020e 	add.w	r2, r7, #14
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f002 f85c 	bl	80055ae <SDMMC_CmdSetRelAdd>
 80034f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <SD_InitCard+0xae>
    {
      return errorstate;
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	e071      	b.n	80035e6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	2b03      	cmp	r3, #3
 8003508:	d036      	beq.n	8003578 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f002 f826 	bl	8005570 <SDMMC_CmdSendCSD>
 8003524:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <SD_InitCard+0xdc>
    {
      return errorstate;
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	e05a      	b.n	80035e6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fe09 	bl	800514e <SDIO_GetResponse>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2104      	movs	r1, #4
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fe00 	bl	800514e <SDIO_GetResponse>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2108      	movs	r1, #8
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fdf7 	bl	800514e <SDIO_GetResponse>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	210c      	movs	r1, #12
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fdee 	bl	800514e <SDIO_GetResponse>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2104      	movs	r1, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fde5 	bl	800514e <SDIO_GetResponse>
 8003584:	4603      	mov	r3, r0
 8003586:	0d1a      	lsrs	r2, r3, #20
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800358c:	f107 0310 	add.w	r3, r7, #16
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fcf2 	bl	8002f7c <HAL_SD_GetCardCSD>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800359e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035a2:	e020      	b.n	80035e6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	461a      	mov	r2, r3
 80035b4:	4623      	mov	r3, r4
 80035b6:	4608      	mov	r0, r1
 80035b8:	f001 fed4 	bl	8005364 <SDMMC_CmdSelDesel>
 80035bc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SD_InitCard+0x174>
  {
    return errorstate;
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	e00e      	b.n	80035e6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681d      	ldr	r5, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	466c      	mov	r4, sp
 80035d0:	f103 0210 	add.w	r2, r3, #16
 80035d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035da:	3304      	adds	r3, #4
 80035dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035de:	4628      	mov	r0, r5
 80035e0:	f001 fd18 	bl	8005014 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3740      	adds	r7, #64	; 0x40
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080035f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fece 	bl	80053aa <SDMMC_CmdGoIdleState>
 800360e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	e072      	b.n	8003700 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fee1 	bl	80053e6 <SDMMC_CmdOperCond>
 8003624:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f001 feb7 	bl	80053aa <SDMMC_CmdGoIdleState>
 800363c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	e05b      	b.n	8003700 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003652:	2b01      	cmp	r3, #1
 8003654:	d137      	bne.n	80036c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fee1 	bl	8005424 <SDMMC_CmdAppCommand>
 8003662:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02d      	beq.n	80036c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800366a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800366e:	e047      	b.n	8003700 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fed4 	bl	8005424 <SDMMC_CmdAppCommand>
 800367c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <SD_PowerON+0x98>
    {
      return errorstate;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	e03b      	b.n	8003700 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	491e      	ldr	r1, [pc, #120]	; (8003708 <SD_PowerON+0x118>)
 800368e:	4618      	mov	r0, r3
 8003690:	f001 feea 	bl	8005468 <SDMMC_CmdAppOperCommand>
 8003694:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800369c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036a0:	e02e      	b.n	8003700 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fd50 	bl	800514e <SDIO_GetResponse>
 80036ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	0fdb      	lsrs	r3, r3, #31
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <SD_PowerON+0xcc>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <SD_PowerON+0xce>
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]

    count++;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3301      	adds	r3, #1
 80036c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d802      	bhi.n	80036d6 <SD_PowerON+0xe6>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0cc      	beq.n	8003670 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036dc:	4293      	cmp	r3, r2
 80036de:	d902      	bls.n	80036e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80036e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e4:	e00c      	b.n	8003700 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
 80036f6:	e002      	b.n	80036fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	c1100000 	.word	0xc1100000

0800370c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800371c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003720:	e018      	b.n	8003754 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f001 ff5e 	bl	80055f0 <SDMMC_CmdSendStatus>
 8003734:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <SD_SendStatus+0x34>
  {
    return errorstate;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	e009      	b.n	8003754 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fd01 	bl	800514e <SDIO_GetResponse>
 800374c:	4602      	mov	r2, r0
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	2300      	movs	r3, #0
 800376a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fceb 	bl	800514e <SDIO_GetResponse>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003782:	d102      	bne.n	800378a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003788:	e02f      	b.n	80037ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800378a:	f107 030c 	add.w	r3, r7, #12
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f879 	bl	8003888 <SD_FindSCR>
 8003796:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	e023      	b.n	80037ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01c      	beq.n	80037e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f001 fe33 	bl	8005424 <SDMMC_CmdAppCommand>
 80037be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	e00f      	b.n	80037ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fe6c 	bl	80054ae <SDMMC_CmdBusWidth>
 80037d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	e003      	b.n	80037ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e001      	b.n	80037ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fca0 	bl	800514e <SDIO_GetResponse>
 800380e:	4603      	mov	r3, r0
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003818:	d102      	bne.n	8003820 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800381a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800381e:	e02f      	b.n	8003880 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f82e 	bl	8003888 <SD_FindSCR>
 800382c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	e023      	b.n	8003880 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01c      	beq.n	800387c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f001 fde8 	bl	8005424 <SDMMC_CmdAppCommand>
 8003854:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	e00f      	b.n	8003880 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fe21 	bl	80054ae <SDMMC_CmdBusWidth>
 800386c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e003      	b.n	8003880 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003878:	2300      	movs	r3, #0
 800387a:	e001      	b.n	8003880 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800387c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b08f      	sub	sp, #60	; 0x3c
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7fc fe89 	bl	80005a8 <HAL_GetTick>
 8003896:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2108      	movs	r1, #8
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fc8c 	bl	80051cc <SDMMC_CmdBlockLength>
 80038b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	e0a9      	b.n	8003a14 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f001 fda9 	bl	8005424 <SDMMC_CmdAppCommand>
 80038d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <SD_FindSCR+0x56>
  {
    return errorstate;
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	e09a      	b.n	8003a14 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80038e4:	2308      	movs	r3, #8
 80038e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80038e8:	2330      	movs	r3, #48	; 0x30
 80038ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80038ec:	2302      	movs	r3, #2
 80038ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f107 0210 	add.w	r2, r7, #16
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fc36 	bl	8005174 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fdf0 	bl	80054f2 <SDMMC_CmdSendSCR>
 8003912:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d022      	beq.n	8003960 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	e07a      	b.n	8003a14 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	f107 0208 	add.w	r2, r7, #8
 8003938:	18d4      	adds	r4, r2, r3
 800393a:	4608      	mov	r0, r1
 800393c:	f001 fb95 	bl	800506a <SDIO_ReadFIFO>
 8003940:	4603      	mov	r3, r0
 8003942:	6023      	str	r3, [r4, #0]
      index++;
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	3301      	adds	r3, #1
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800394a:	f7fc fe2d 	bl	80005a8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d102      	bne.n	8003960 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800395a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800395e:	e059      	b.n	8003a14 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003966:	f240 432a 	movw	r3, #1066	; 0x42a
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0d6      	beq.n	800391e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003986:	2308      	movs	r3, #8
 8003988:	e044      	b.n	8003a14 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2202      	movs	r2, #2
 800399e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039a0:	2302      	movs	r3, #2
 80039a2:	e037      	b.n	8003a14 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80039ba:	2320      	movs	r3, #32
 80039bc:	e02a      	b.n	8003a14 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	061a      	lsls	r2, r3, #24
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	0e1b      	lsrs	r3, r3, #24
 80039e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	601a      	str	r2, [r3, #0]
    scr++;
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	3304      	adds	r3, #4
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	061a      	lsls	r2, r3, #24
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0e1b      	lsrs	r3, r3, #24
 8003a0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	373c      	adds	r7, #60	; 0x3c
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}

08003a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e056      	b.n	8003adc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f007 fa53 	bl	800aef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	ea42 0103 	orr.w	r1, r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	f003 0104 	and.w	r1, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * const pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_Transmit+0x22>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e11e      	b.n	8003d44 <HAL_SPI_Transmit+0x260>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b0e:	f7fc fd4b 	bl	80005a8 <HAL_GetTick>
 8003b12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b28:	e103      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0x52>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b3a:	e0fa      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d107      	bne.n	8003b94 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d007      	beq.n	8003bb2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bba:	d14b      	bne.n	8003c54 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Transmit+0xe6>
 8003bc4:	8afb      	ldrh	r3, [r7, #22]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d13e      	bne.n	8003c48 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bee:	e02b      	b.n	8003c48 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d112      	bne.n	8003c24 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c22:	e011      	b.n	8003c48 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c24:	f7fc fcc0 	bl	80005a8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d803      	bhi.n	8003c3c <HAL_SPI_Transmit+0x158>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_Transmit+0x15e>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c46:	e074      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ce      	bne.n	8003bf0 <HAL_SPI_Transmit+0x10c>
 8003c52:	e04c      	b.n	8003cee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_Transmit+0x17e>
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d140      	bne.n	8003ce4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c88:	e02c      	b.n	8003ce4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d113      	bne.n	8003cc0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cbe:	e011      	b.n	8003ce4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc0:	f7fc fc72 	bl	80005a8 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d803      	bhi.n	8003cd8 <HAL_SPI_Transmit+0x1f4>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d102      	bne.n	8003cde <HAL_SPI_Transmit+0x1fa>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce2:	e026      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1cd      	bne.n	8003c8a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fba4 	bl	8004440 <SPI_EndRxTxTransaction>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e000      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d68:	d112      	bne.n	8003d90 <HAL_SPI_Receive+0x44>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10e      	bne.n	8003d90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2204      	movs	r2, #4
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f8e9 	bl	8003f5e <HAL_SPI_TransmitReceive>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	e0e2      	b.n	8003f56 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_SPI_Receive+0x52>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0db      	b.n	8003f56 <HAL_SPI_Receive+0x20a>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da6:	f7fc fbff 	bl	80005a8 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
 8003dba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dbc:	e0c2      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Receive+0x7e>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dce:	e0b9      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e16:	d107      	bne.n	8003e28 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d007      	beq.n	8003e46 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d162      	bne.n	8003f14 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e4e:	e02e      	b.n	8003eae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d115      	bne.n	8003e8a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f103 020c 	add.w	r2, r3, #12
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e88:	e011      	b.n	8003eae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fc fb8d 	bl	80005a8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Receive+0x156>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Receive+0x15c>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eac:	e04a      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1cb      	bne.n	8003e50 <HAL_SPI_Receive+0x104>
 8003eb8:	e031      	b.n	8003f1e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d113      	bne.n	8003ef0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eee:	e011      	b.n	8003f14 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef0:	f7fc fb5a 	bl	80005a8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d803      	bhi.n	8003f08 <HAL_SPI_Receive+0x1bc>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d102      	bne.n	8003f0e <HAL_SPI_Receive+0x1c2>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f12:	e017      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1cd      	bne.n	8003eba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fa27 	bl	8004376 <SPI_EndRxTransaction>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
 8003f40:	e000      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08c      	sub	sp, #48	; 0x30
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x26>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e18a      	b.n	800429a <HAL_SPI_TransmitReceive+0x33c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8c:	f7fc fb0c 	bl	80005a8 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00f      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x70>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d107      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x68>
 8003fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d003      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fcc:	e15b      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x82>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x82>
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fe6:	e14e      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d003      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2205      	movs	r2, #5
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	887a      	ldrh	r2, [r7, #2]
 800401e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d007      	beq.n	8004050 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004058:	d178      	bne.n	800414c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x10a>
 8004062:	8b7b      	ldrh	r3, [r7, #26]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d166      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800408c:	e053      	b.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d11b      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d113      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d119      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x1b8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d014      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	b292      	uxth	r2, r2
 80040f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004112:	2301      	movs	r3, #1
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004116:	f7fc fa47 	bl	80005a8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004122:	429a      	cmp	r2, r3
 8004124:	d807      	bhi.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d003      	beq.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004134:	e0a7      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1a6      	bne.n	800408e <HAL_SPI_TransmitReceive+0x130>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1a1      	bne.n	800408e <HAL_SPI_TransmitReceive+0x130>
 800414a:	e07c      	b.n	8004246 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_SPI_TransmitReceive+0x1fc>
 8004154:	8b7b      	ldrh	r3, [r7, #26]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d16b      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	e057      	b.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d11c      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d114      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d119      	bne.n	800420c <HAL_SPI_TransmitReceive+0x2ae>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d014      	beq.n	800420c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004208:	2301      	movs	r3, #1
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800420c:	f7fc f9cc 	bl	80005a8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	429a      	cmp	r2, r3
 800421a:	d803      	bhi.n	8004224 <HAL_SPI_TransmitReceive+0x2c6>
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d102      	bne.n	800422a <HAL_SPI_TransmitReceive+0x2cc>
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004230:	e029      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1a2      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x224>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d19d      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8f8 	bl	8004440 <SPI_EndRxTxTransaction>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004262:	e010      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	e000      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004284:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800429a:	4618      	mov	r0, r3
 800429c:	3730      	adds	r7, #48	; 0x30
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042b2:	e04c      	b.n	800434e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d048      	beq.n	800434e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80042bc:	f7fc f974 	bl	80005a8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13d      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ea:	d111      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	d004      	beq.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d107      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d10f      	bne.n	800433a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00f      	b.n	800436e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	429a      	cmp	r2, r3
 800436a:	d1a3      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438a:	d111      	bne.n	80043b0 <SPI_EndRxTransaction+0x3a>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	d004      	beq.n	80043a0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d107      	bne.n	80043b0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b8:	d12a      	bne.n	8004410 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d012      	beq.n	80043ea <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff67 	bl	80042a2 <SPI_WaitFlagStateUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d02d      	beq.n	8004436 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e026      	b.n	8004438 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2101      	movs	r1, #1
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff54 	bl	80042a2 <SPI_WaitFlagStateUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01a      	beq.n	8004436 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e013      	b.n	8004438 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	2101      	movs	r1, #1
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ff41 	bl	80042a2 <SPI_WaitFlagStateUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e000      	b.n	8004438 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <SPI_EndRxTxTransaction+0x7c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <SPI_EndRxTxTransaction+0x80>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0d5b      	lsrs	r3, r3, #21
 8004458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446a:	d112      	bne.n	8004492 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff ff13 	bl	80042a2 <SPI_WaitFlagStateUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00f      	b.n	80044b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3b01      	subs	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d0f2      	beq.n	8004492 <SPI_EndRxTxTransaction+0x52>
 80044ac:	e000      	b.n	80044b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80044ae:	bf00      	nop
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000008 	.word	0x20000008
 80044c0:	165e9f81 	.word	0x165e9f81

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e01d      	b.n	8004512 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f006 fd6a 	bl	800afc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 f9fa 	bl	80048fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e01d      	b.n	8004568 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f815 	bl	8004570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 f9cf 	bl	80048fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2201      	movs	r2, #1
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fc9a 	bl	8004ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <HAL_TIM_PWM_Start+0x74>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x2c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a14      	ldr	r2, [pc, #80]	; (80045fc <HAL_TIM_PWM_Start+0x78>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <HAL_TIM_PWM_Start+0x30>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_TIM_PWM_Start+0x32>
 80045b4:	2300      	movs	r3, #0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d007      	beq.n	80045ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40010400 	.word	0x40010400

08004600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004616:	2302      	movs	r3, #2
 8004618:	e0b4      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x184>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	f200 809f 	bhi.w	8004770 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800466d 	.word	0x0800466d
 800463c:	08004771 	.word	0x08004771
 8004640:	08004771 	.word	0x08004771
 8004644:	08004771 	.word	0x08004771
 8004648:	080046ad 	.word	0x080046ad
 800464c:	08004771 	.word	0x08004771
 8004650:	08004771 	.word	0x08004771
 8004654:	08004771 	.word	0x08004771
 8004658:	080046ef 	.word	0x080046ef
 800465c:	08004771 	.word	0x08004771
 8004660:	08004771 	.word	0x08004771
 8004664:	08004771 	.word	0x08004771
 8004668:	0800472f 	.word	0x0800472f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f9e2 	bl	8004a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6999      	ldr	r1, [r3, #24]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	619a      	str	r2, [r3, #24]
      break;
 80046aa:	e062      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fa32 	bl	8004b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	619a      	str	r2, [r3, #24]
      break;
 80046ec:	e041      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa87 	bl	8004c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0208 	orr.w	r2, r2, #8
 8004708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69d9      	ldr	r1, [r3, #28]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	61da      	str	r2, [r3, #28]
      break;
 800472c:	e021      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fadb 	bl	8004cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	61da      	str	r2, [r3, #28]
      break;
 800476e:	e000      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004770:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_TIM_ConfigClockSource+0x18>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e0a6      	b.n	80048f2 <HAL_TIM_ConfigClockSource+0x166>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d067      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x120>
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d80b      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x6c>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d073      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0x140>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d802      	bhi.n	80047ee <HAL_TIM_ConfigClockSource+0x62>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d06f      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80047ec:	e078      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d06c      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0x140>
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d06a      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047f6:	e073      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	d00d      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0x8c>
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d804      	bhi.n	800480a <HAL_TIM_ConfigClockSource+0x7e>
 8004800:	2b50      	cmp	r3, #80	; 0x50
 8004802:	d033      	beq.n	800486c <HAL_TIM_ConfigClockSource+0xe0>
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d041      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004808:	e06a      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	d066      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x152>
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004814:	d017      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004816:	e063      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f000 fb32 	bl	8004e90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800483a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]
      break;
 8004844:	e04c      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6899      	ldr	r1, [r3, #8]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f000 fb1b 	bl	8004e90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004868:	609a      	str	r2, [r3, #8]
      break;
 800486a:	e039      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	f000 fa8f 	bl	8004d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2150      	movs	r1, #80	; 0x50
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fae8 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 800488a:	e029      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	461a      	mov	r2, r3
 800489a:	f000 faae 	bl	8004dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2160      	movs	r1, #96	; 0x60
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fad8 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 80048aa:	e019      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	461a      	mov	r2, r3
 80048ba:	f000 fa6f 	bl	8004d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fac8 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 80048ca:	e009      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 fabf 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 80048dc:	e000      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80048de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a40      	ldr	r2, [pc, #256]	; (8004a10 <TIM_Base_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d00f      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <TIM_Base_SetConfig+0x118>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <TIM_Base_SetConfig+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3b      	ldr	r2, [pc, #236]	; (8004a1c <TIM_Base_SetConfig+0x120>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3a      	ldr	r2, [pc, #232]	; (8004a20 <TIM_Base_SetConfig+0x124>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d108      	bne.n	800494e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <TIM_Base_SetConfig+0x114>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d02b      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d027      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <TIM_Base_SetConfig+0x118>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d023      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <TIM_Base_SetConfig+0x11c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01f      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2a      	ldr	r2, [pc, #168]	; (8004a1c <TIM_Base_SetConfig+0x120>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01b      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <TIM_Base_SetConfig+0x124>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d017      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <TIM_Base_SetConfig+0x128>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <TIM_Base_SetConfig+0x12c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00f      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <TIM_Base_SetConfig+0x130>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <TIM_Base_SetConfig+0x134>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <TIM_Base_SetConfig+0x138>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <TIM_Base_SetConfig+0x13c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <TIM_Base_SetConfig+0x114>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_Base_SetConfig+0xf8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <TIM_Base_SetConfig+0x124>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d103      	bne.n	80049fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	615a      	str	r2, [r3, #20]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	40001800 	.word	0x40001800
 8004a34:	40001c00 	.word	0x40001c00
 8004a38:	40002000 	.word	0x40002000

08004a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f023 0302 	bic.w	r3, r3, #2
 8004a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <TIM_OC1_SetConfig+0xd8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC1_SetConfig+0x64>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <TIM_OC1_SetConfig+0xdc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10c      	bne.n	8004aba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0308 	bic.w	r3, r3, #8
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <TIM_OC1_SetConfig+0xd8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_OC1_SetConfig+0x8e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <TIM_OC1_SetConfig+0xdc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0210 	bic.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <TIM_OC2_SetConfig+0xe4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x68>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <TIM_OC2_SetConfig+0xe8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <TIM_OC2_SetConfig+0xe4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC2_SetConfig+0x94>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <TIM_OC2_SetConfig+0xe8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d113      	bne.n	8004bd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40010400 	.word	0x40010400

08004c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <TIM_OC3_SetConfig+0xe0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC3_SetConfig+0x66>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <TIM_OC3_SetConfig+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10d      	bne.n	8004c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <TIM_OC3_SetConfig+0xe0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC3_SetConfig+0x92>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a15      	ldr	r2, [pc, #84]	; (8004cec <TIM_OC3_SetConfig+0xe4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d113      	bne.n	8004cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400

08004cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_OC4_SetConfig+0xa4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC4_SetConfig+0x68>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <TIM_OC4_SetConfig+0xa8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d109      	bne.n	8004d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	019b      	lsls	r3, r3, #6
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400

08004d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 030a 	bic.w	r3, r3, #10
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0210 	bic.w	r2, r3, #16
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f043 0307 	orr.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e05a      	b.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d01d      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1b      	ldr	r2, [pc, #108]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a15      	ldr	r2, [pc, #84]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40010400 	.word	0x40010400
 800500c:	40014000 	.word	0x40014000
 8005010:	40001800 	.word	0x40001800

08005014 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 001c 	add.w	r0, r7, #28
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800502a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800502c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800502e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005032:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005036:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800503a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800503e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800504e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	b004      	add	sp, #16
 8005068:	4770      	bx	lr

0800506a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2203      	movs	r2, #3
 80050b2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80050b4:	2002      	movs	r0, #2
 80050b6:	f7fb fa83 	bl	80005c0 <HAL_Delay>
  
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0303 	and.w	r3, r3, #3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005104:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800510a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800511a:	f023 030f 	bic.w	r3, r3, #15
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	b2db      	uxtb	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3314      	adds	r3, #20
 800515c:	461a      	mov	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4413      	add	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
}  
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800519a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80051a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80051a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0

}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80051da:	2310      	movs	r3, #16
 80051dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051de:	2340      	movs	r3, #64	; 0x40
 80051e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff74 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	2110      	movs	r1, #16
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa40 	bl	8005684 <SDMMC_GetCmdResp1>
 8005204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005206:	69fb      	ldr	r3, [r7, #28]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800521e:	2311      	movs	r3, #17
 8005220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005222:	2340      	movs	r3, #64	; 0x40
 8005224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800522a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff52 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	2111      	movs	r1, #17
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa1e 	bl	8005684 <SDMMC_GetCmdResp1>
 8005248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800524a:	69fb      	ldr	r3, [r7, #28]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005262:	2312      	movs	r3, #18
 8005264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800526e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff ff30 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	2112      	movs	r1, #18
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9fc 	bl	8005684 <SDMMC_GetCmdResp1>
 800528c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528e:	69fb      	ldr	r3, [r7, #28]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80052a6:	2318      	movs	r3, #24
 80052a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff0e 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	2118      	movs	r1, #24
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9da 	bl	8005684 <SDMMC_GetCmdResp1>
 80052d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d2:	69fb      	ldr	r3, [r7, #28]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80052ea:	2319      	movs	r3, #25
 80052ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ee:	2340      	movs	r3, #64	; 0x40
 80052f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052fc:	f107 0308 	add.w	r3, r7, #8
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff feec 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	2119      	movs	r1, #25
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f9b8 	bl	8005684 <SDMMC_GetCmdResp1>
 8005314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005316:	69fb      	ldr	r3, [r7, #28]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800532c:	230c      	movs	r3, #12
 800532e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fecb 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <SDMMC_CmdStopTransfer+0x40>)
 800534c:	210c      	movs	r1, #12
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f998 	bl	8005684 <SDMMC_GetCmdResp1>
 8005354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005356:	69fb      	ldr	r3, [r7, #28]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	05f5e100 	.word	0x05f5e100

08005364 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005374:	2307      	movs	r3, #7
 8005376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005378:	2340      	movs	r3, #64	; 0x40
 800537a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005384:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005386:	f107 0310 	add.w	r3, r7, #16
 800538a:	4619      	mov	r1, r3
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fea7 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005392:	f241 3288 	movw	r2, #5000	; 0x1388
 8005396:	2107      	movs	r1, #7
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f973 	bl	8005684 <SDMMC_GetCmdResp1>
 800539e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b088      	sub	sp, #32
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fe86 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f92d 	bl	8005634 <SDMMC_GetCmdError>
 80053da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053dc:	69fb      	ldr	r3, [r7, #28]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b088      	sub	sp, #32
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80053ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80053f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80053f4:	2308      	movs	r3, #8
 80053f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005404:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fe67 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb16 	bl	8005a44 <SDMMC_GetCmdResp7>
 8005418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541a:	69fb      	ldr	r3, [r7, #28]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005432:	2337      	movs	r3, #55	; 0x37
 8005434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800543e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005442:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fe48 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	2137      	movs	r1, #55	; 0x37
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f914 	bl	8005684 <SDMMC_GetCmdResp1>
 800545c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800545e:	69fb      	ldr	r3, [r7, #28]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800547e:	2329      	movs	r3, #41	; 0x29
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fe22 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fa23 	bl	80058e8 <SDMMC_GetCmdResp3>
 80054a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b088      	sub	sp, #32
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80054bc:	2306      	movs	r3, #6
 80054be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe03 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	2106      	movs	r1, #6
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f8cf 	bl	8005684 <SDMMC_GetCmdResp1>
 80054e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054e8:	69fb      	ldr	r3, [r7, #28]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b088      	sub	sp, #32
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80054fe:	2333      	movs	r3, #51	; 0x33
 8005500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800550a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fde2 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800551c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005520:	2133      	movs	r1, #51	; 0x33
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8ae 	bl	8005684 <SDMMC_GetCmdResp1>
 8005528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552a:	69fb      	ldr	r3, [r7, #28]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005540:	2302      	movs	r3, #2
 8005542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005544:	23c0      	movs	r3, #192	; 0xc0
 8005546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800554c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005550:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fdc1 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f97c 	bl	800585c <SDMMC_GetCmdResp2>
 8005564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005566:	69fb      	ldr	r3, [r7, #28]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800557e:	2309      	movs	r3, #9
 8005580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005582:	23c0      	movs	r3, #192	; 0xc0
 8005584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800558a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005590:	f107 0308 	add.w	r3, r7, #8
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fda2 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f95d 	bl	800585c <SDMMC_GetCmdResp2>
 80055a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80055bc:	2303      	movs	r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fd83 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	2103      	movs	r1, #3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f9bc 	bl	800595c <SDMMC_GetCmdResp6>
 80055e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055e6:	69fb      	ldr	r3, [r7, #28]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80055fe:	230d      	movs	r3, #13
 8005600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005602:	2340      	movs	r3, #64	; 0x40
 8005604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800560a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800560e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fd62 	bl	80050e0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	210d      	movs	r1, #13
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f82e 	bl	8005684 <SDMMC_GetCmdResp1>
 8005628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800562a:	69fb      	ldr	r3, [r7, #28]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005634:	b490      	push	{r4, r7}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <SDMMC_GetCmdError+0x48>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <SDMMC_GetCmdError+0x4c>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0a5b      	lsrs	r3, r3, #9
 8005648:	f241 3288 	movw	r2, #5000	; 0x1388
 800564c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005650:	4623      	mov	r3, r4
 8005652:	1e5c      	subs	r4, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800565c:	e009      	b.n	8005672 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f2      	beq.n	8005650 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	22c5      	movs	r2, #197	; 0xc5
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bc90      	pop	{r4, r7}
 800567a:	4770      	bx	lr
 800567c:	20000008 	.word	0x20000008
 8005680:	10624dd3 	.word	0x10624dd3

08005684 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	460b      	mov	r3, r1
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005692:	4b6f      	ldr	r3, [pc, #444]	; (8005850 <SDMMC_GetCmdResp1+0x1cc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6f      	ldr	r2, [pc, #444]	; (8005854 <SDMMC_GetCmdResp1+0x1d0>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	0a5b      	lsrs	r3, r3, #9
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056a4:	4623      	mov	r3, r4
 80056a6:	1e5c      	subs	r4, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056b0:	e0c9      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <SDMMC_GetCmdResp1+0x20>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1eb      	bne.n	80056a4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2204      	movs	r2, #4
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056de:	2304      	movs	r3, #4
 80056e0:	e0b1      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0a6      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	22c5      	movs	r2, #197	; 0xc5
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fd18 	bl	8005134 <SDIO_GetCommandResponse>
 8005704:	4603      	mov	r3, r0
 8005706:	461a      	mov	r2, r3
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	4293      	cmp	r3, r2
 800570c:	d001      	beq.n	8005712 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800570e:	2301      	movs	r3, #1
 8005710:	e099      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005712:	2100      	movs	r1, #0
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fd1a 	bl	800514e <SDIO_GetResponse>
 800571a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4b4e      	ldr	r3, [pc, #312]	; (8005858 <SDMMC_GetCmdResp1+0x1d4>)
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005726:	2300      	movs	r3, #0
 8005728:	e08d      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	da02      	bge.n	8005736 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005734:	e087      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	e080      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	e079      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800575c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005760:	e071      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800576c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005770:	e069      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800577c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005780:	e061      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800578c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005790:	e059      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800579c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a0:	e051      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057b0:	e049      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80057bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057c0:	e041      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80057cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d0:	e039      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80057dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e0:	e031      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80057ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057f0:	e029      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80057fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005800:	e021      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800580c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005810:	e019      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800581c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005820:	e011      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800582c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005830:	e009      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800583c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005840:	e001      	b.n	8005846 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	20000008 	.word	0x20000008
 8005854:	10624dd3 	.word	0x10624dd3
 8005858:	fdffe008 	.word	0xfdffe008

0800585c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800585c:	b490      	push	{r4, r7}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005864:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <SDMMC_GetCmdResp2+0x84>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <SDMMC_GetCmdResp2+0x88>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0a5b      	lsrs	r3, r3, #9
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005878:	4623      	mov	r3, r4
 800587a:	1e5c      	subs	r4, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005884:	e026      	b.n	80058d4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <SDMMC_GetCmdResp2+0x1c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1eb      	bne.n	8005878 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2204      	movs	r2, #4
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058b2:	2304      	movs	r3, #4
 80058b4:	e00e      	b.n	80058d4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d004      	beq.n	80058cc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e003      	b.n	80058d4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	22c5      	movs	r2, #197	; 0xc5
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc90      	pop	{r4, r7}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000008 	.word	0x20000008
 80058e4:	10624dd3 	.word	0x10624dd3

080058e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80058e8:	b490      	push	{r4, r7}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058f0:	4b18      	ldr	r3, [pc, #96]	; (8005954 <SDMMC_GetCmdResp3+0x6c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a18      	ldr	r2, [pc, #96]	; (8005958 <SDMMC_GetCmdResp3+0x70>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	0a5b      	lsrs	r3, r3, #9
 80058fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005904:	4623      	mov	r3, r4
 8005906:	1e5c      	subs	r4, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800590c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005910:	e01b      	b.n	800594a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005916:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <SDMMC_GetCmdResp3+0x1c>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1eb      	bne.n	8005904 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2204      	movs	r2, #4
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800593e:	2304      	movs	r3, #4
 8005940:	e003      	b.n	800594a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	22c5      	movs	r2, #197	; 0xc5
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bc90      	pop	{r4, r7}
 8005952:	4770      	bx	lr
 8005954:	20000008 	.word	0x20000008
 8005958:	10624dd3 	.word	0x10624dd3

0800595c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800595c:	b590      	push	{r4, r7, lr}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	460b      	mov	r3, r1
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800596a:	4b34      	ldr	r3, [pc, #208]	; (8005a3c <SDMMC_GetCmdResp6+0xe0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <SDMMC_GetCmdResp6+0xe4>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	0a5b      	lsrs	r3, r3, #9
 8005976:	f241 3288 	movw	r2, #5000	; 0x1388
 800597a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800597e:	4623      	mov	r3, r4
 8005980:	1e5c      	subs	r4, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005986:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800598a:	e052      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <SDMMC_GetCmdResp6+0x22>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1eb      	bne.n	800597e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2204      	movs	r2, #4
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059b8:	2304      	movs	r3, #4
 80059ba:	e03a      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e02f      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fbae 	bl	8005134 <SDIO_GetCommandResponse>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d001      	beq.n	80059e6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e025      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	22c5      	movs	r2, #197	; 0xc5
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059ec:	2100      	movs	r1, #0
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fbad 	bl	800514e <SDIO_GetResponse>
 80059f4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e011      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a1c:	e009      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2c:	e001      	b.n	8005a32 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000008 	.word	0x20000008
 8005a40:	10624dd3 	.word	0x10624dd3

08005a44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005a44:	b490      	push	{r4, r7}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a4c:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <SDMMC_GetCmdResp7+0x90>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <SDMMC_GetCmdResp7+0x94>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	0a5b      	lsrs	r3, r3, #9
 8005a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005a60:	4623      	mov	r3, r4
 8005a62:	1e5c      	subs	r4, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a6c:	e02c      	b.n	8005ac8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <SDMMC_GetCmdResp7+0x1c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1eb      	bne.n	8005a60 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d004      	beq.n	8005a9e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2204      	movs	r2, #4
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	e014      	b.n	8005ac8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e009      	b.n	8005ac8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ac6:	2300      	movs	r3, #0
  
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc90      	pop	{r4, r7}
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000008 	.word	0x20000008
 8005ad8:	10624dd3 	.word	0x10624dd3

08005adc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <disk_status+0x30>)
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	79fa      	ldrb	r2, [r7, #7]
 8005af4:	4905      	ldr	r1, [pc, #20]	; (8005b0c <disk_status+0x30>)
 8005af6:	440a      	add	r2, r1
 8005af8:	7a12      	ldrb	r2, [r2, #8]
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	200000b4 	.word	0x200000b4

08005b10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <disk_initialize+0x48>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d111      	bne.n	8005b4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <disk_initialize+0x48>)
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <disk_initialize+0x48>)
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	79fa      	ldrb	r2, [r7, #7]
 8005b3e:	4906      	ldr	r1, [pc, #24]	; (8005b58 <disk_initialize+0x48>)
 8005b40:	440a      	add	r2, r1
 8005b42:	7a12      	ldrb	r2, [r2, #8]
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	200000b4 	.word	0x200000b4

08005b5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <disk_read+0x3c>)
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	689c      	ldr	r4, [r3, #8]
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <disk_read+0x3c>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	7a18      	ldrb	r0, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	47a0      	blx	r4
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd90      	pop	{r4, r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200000b4 	.word	0x200000b4

08005b9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <disk_write+0x3c>)
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68dc      	ldr	r4, [r3, #12]
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <disk_write+0x3c>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	7a18      	ldrb	r0, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	47a0      	blx	r4
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd90      	pop	{r4, r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	200000b4 	.word	0x200000b4

08005bdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	603a      	str	r2, [r7, #0]
 8005be6:	71fb      	strb	r3, [r7, #7]
 8005be8:	460b      	mov	r3, r1
 8005bea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <disk_ioctl+0x38>)
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	79fa      	ldrb	r2, [r7, #7]
 8005bfa:	4906      	ldr	r1, [pc, #24]	; (8005c14 <disk_ioctl+0x38>)
 8005bfc:	440a      	add	r2, r1
 8005bfe:	7a10      	ldrb	r0, [r2, #8]
 8005c00:	79b9      	ldrb	r1, [r7, #6]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	4798      	blx	r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200000b4 	.word	0x200000b4

08005c18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3301      	adds	r3, #1
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	b21a      	sxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b21b      	sxth	r3, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3303      	adds	r3, #3
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	3202      	adds	r2, #2
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	3201      	adds	r2, #1
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c80:	68fb      	ldr	r3, [r7, #12]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	887a      	ldrh	r2, [r7, #2]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	887a      	ldrh	r2, [r7, #2]
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	1c53      	adds	r3, r2, #1
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	6179      	str	r1, [r7, #20]
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f1      	bne.n	8005d36 <mem_cpy+0x1a>
	}
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d5e:	b480      	push	{r7}
 8005d60:	b087      	sub	sp, #28
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	617a      	str	r2, [r7, #20]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f3      	bne.n	8005d6e <mem_set+0x10>
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d92:	b480      	push	{r7}
 8005d94:	b089      	sub	sp, #36	; 0x24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	61fa      	str	r2, [r7, #28]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	61ba      	str	r2, [r7, #24]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	1acb      	subs	r3, r1, r3
 8005dbe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <mem_cmp+0x40>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0eb      	beq.n	8005daa <mem_cmp+0x18>

	return r;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3724      	adds	r7, #36	; 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005dea:	e002      	b.n	8005df2 <chk_chr+0x12>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3301      	adds	r3, #1
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <chk_chr+0x26>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d1f2      	bne.n	8005dec <chk_chr+0xc>
	return *str;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	781b      	ldrb	r3, [r3, #0]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e029      	b.n	8005e80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e2c:	4a27      	ldr	r2, [pc, #156]	; (8005ecc <chk_lock+0xb4>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	4413      	add	r3, r2
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01d      	beq.n	8005e76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e3a:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <chk_lock+0xb4>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	4413      	add	r3, r2
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d116      	bne.n	8005e7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e4c:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <chk_lock+0xb4>)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	4413      	add	r3, r2
 8005e54:	3304      	adds	r3, #4
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d10c      	bne.n	8005e7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e60:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <chk_lock+0xb4>)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	4413      	add	r3, r2
 8005e68:	3308      	adds	r3, #8
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d102      	bne.n	8005e7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e74:	e007      	b.n	8005e86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005e76:	2301      	movs	r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d9d2      	bls.n	8005e2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d109      	bne.n	8005ea0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <chk_lock+0x80>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d101      	bne.n	8005e9c <chk_lock+0x84>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e010      	b.n	8005ebe <chk_lock+0xa6>
 8005e9c:	2312      	movs	r3, #18
 8005e9e:	e00e      	b.n	8005ebe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d108      	bne.n	8005eb8 <chk_lock+0xa0>
 8005ea6:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <chk_lock+0xb4>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	4413      	add	r3, r2
 8005eae:	330c      	adds	r3, #12
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb6:	d101      	bne.n	8005ebc <chk_lock+0xa4>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	e000      	b.n	8005ebe <chk_lock+0xa6>
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000094 	.word	0x20000094

08005ed0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	e002      	b.n	8005ee2 <enq_lock+0x12>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d806      	bhi.n	8005ef6 <enq_lock+0x26>
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <enq_lock+0x40>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	4413      	add	r3, r2
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f2      	bne.n	8005edc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	bf14      	ite	ne
 8005efc:	2301      	movne	r3, #1
 8005efe:	2300      	moveq	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000094 	.word	0x20000094

08005f14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e01f      	b.n	8005f64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f24:	4a41      	ldr	r2, [pc, #260]	; (800602c <inc_lock+0x118>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d113      	bne.n	8005f5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f36:	4a3d      	ldr	r2, [pc, #244]	; (800602c <inc_lock+0x118>)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3304      	adds	r3, #4
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d109      	bne.n	8005f5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f4a:	4a38      	ldr	r2, [pc, #224]	; (800602c <inc_lock+0x118>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	4413      	add	r3, r2
 8005f52:	3308      	adds	r3, #8
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d006      	beq.n	8005f6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d9dc      	bls.n	8005f24 <inc_lock+0x10>
 8005f6a:	e000      	b.n	8005f6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005f6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d132      	bne.n	8005fda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e002      	b.n	8005f80 <inc_lock+0x6c>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d806      	bhi.n	8005f94 <inc_lock+0x80>
 8005f86:	4a29      	ldr	r2, [pc, #164]	; (800602c <inc_lock+0x118>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	4413      	add	r3, r2
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f2      	bne.n	8005f7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d101      	bne.n	8005f9e <inc_lock+0x8a>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e040      	b.n	8006020 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4922      	ldr	r1, [pc, #136]	; (800602c <inc_lock+0x118>)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	440b      	add	r3, r1
 8005faa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	491e      	ldr	r1, [pc, #120]	; (800602c <inc_lock+0x118>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	440b      	add	r3, r1
 8005fb8:	3304      	adds	r3, #4
 8005fba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	491a      	ldr	r1, [pc, #104]	; (800602c <inc_lock+0x118>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3308      	adds	r3, #8
 8005fca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005fcc:	4a17      	ldr	r2, [pc, #92]	; (800602c <inc_lock+0x118>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <inc_lock+0xe0>
 8005fe0:	4a12      	ldr	r2, [pc, #72]	; (800602c <inc_lock+0x118>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	330c      	adds	r3, #12
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <inc_lock+0xe0>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e015      	b.n	8006020 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <inc_lock+0xf8>
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	; (800602c <inc_lock+0x118>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	330c      	adds	r3, #12
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	e001      	b.n	8006010 <inc_lock+0xfc>
 800600c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006010:	4906      	ldr	r1, [pc, #24]	; (800602c <inc_lock+0x118>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	440b      	add	r3, r1
 8006018:	330c      	adds	r3, #12
 800601a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000094 	.word	0x20000094

08006030 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d825      	bhi.n	8006090 <dec_lock+0x60>
		n = Files[i].ctr;
 8006044:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <dec_lock+0x74>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	4413      	add	r3, r2
 800604c:	330c      	adds	r3, #12
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d101      	bne.n	800605e <dec_lock+0x2e>
 800605a:	2300      	movs	r3, #0
 800605c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800605e:	89fb      	ldrh	r3, [r7, #14]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <dec_lock+0x3a>
 8006064:	89fb      	ldrh	r3, [r7, #14]
 8006066:	3b01      	subs	r3, #1
 8006068:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800606a:	4a0e      	ldr	r2, [pc, #56]	; (80060a4 <dec_lock+0x74>)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	4413      	add	r3, r2
 8006072:	330c      	adds	r3, #12
 8006074:	89fa      	ldrh	r2, [r7, #14]
 8006076:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006078:	89fb      	ldrh	r3, [r7, #14]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <dec_lock+0x5a>
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <dec_lock+0x74>)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	4413      	add	r3, r2
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	737b      	strb	r3, [r7, #13]
 800608e:	e001      	b.n	8006094 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006090:	2302      	movs	r3, #2
 8006092:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006094:	7b7b      	ldrb	r3, [r7, #13]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000094 	.word	0x20000094

080060a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e010      	b.n	80060d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060b6:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <clear_lock+0x44>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d105      	bne.n	80060d2 <clear_lock+0x2a>
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <clear_lock+0x44>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4413      	add	r3, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d9eb      	bls.n	80060b6 <clear_lock+0xe>
	}
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000094 	.word	0x20000094

080060f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	78db      	ldrb	r3, [r3, #3]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d034      	beq.n	800616e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7858      	ldrb	r0, [r3, #1]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006114:	2301      	movs	r3, #1
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	f7ff fd40 	bl	8005b9c <disk_write>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006122:	2301      	movs	r3, #1
 8006124:	73fb      	strb	r3, [r7, #15]
 8006126:	e022      	b.n	800616e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	1ad2      	subs	r2, r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	429a      	cmp	r2, r3
 800613c:	d217      	bcs.n	800616e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	789b      	ldrb	r3, [r3, #2]
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e010      	b.n	8006168 <sync_window+0x78>
					wsect += fs->fsize;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4413      	add	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7858      	ldrb	r0, [r3, #1]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800615a:	2301      	movs	r3, #1
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	f7ff fd1d 	bl	8005b9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	3b01      	subs	r3, #1
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d8eb      	bhi.n	8006146 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d01b      	beq.n	80061c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ffad 	bl	80060f0 <sync_window>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d113      	bne.n	80061c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7858      	ldrb	r0, [r3, #1]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061aa:	2301      	movs	r3, #1
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	f7ff fcd5 	bl	8005b5c <disk_read>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061be:	2301      	movs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ff87 	bl	80060f0 <sync_window>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d158      	bne.n	800629e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d148      	bne.n	8006286 <sync_fs+0xb2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d144      	bne.n	8006286 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3330      	adds	r3, #48	; 0x30
 8006200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff fda9 	bl	8005d5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3330      	adds	r3, #48	; 0x30
 8006210:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006214:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff fd38 	bl	8005c8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3330      	adds	r3, #48	; 0x30
 8006222:	4921      	ldr	r1, [pc, #132]	; (80062a8 <sync_fs+0xd4>)
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fd4d 	bl	8005cc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3330      	adds	r3, #48	; 0x30
 800622e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006232:	491e      	ldr	r1, [pc, #120]	; (80062ac <sync_fs+0xd8>)
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fd45 	bl	8005cc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3330      	adds	r3, #48	; 0x30
 800623e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7ff fd3b 	bl	8005cc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3330      	adds	r3, #48	; 0x30
 8006252:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f7ff fd31 	bl	8005cc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	7858      	ldrb	r0, [r3, #1]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	2301      	movs	r3, #1
 800627c:	f7ff fc8e 	bl	8005b9c <disk_write>
			fs->fsi_flag = 0;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2200      	movs	r2, #0
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fca4 	bl	8005bdc <disk_ioctl>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <sync_fs+0xca>
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	41615252 	.word	0x41615252
 80062ac:	61417272 	.word	0x61417272

080062b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	3b02      	subs	r3, #2
 80062be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	3b02      	subs	r3, #2
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d301      	bcc.n	80062d0 <clust2sect+0x20>
 80062cc:	2300      	movs	r3, #0
 80062ce:	e008      	b.n	80062e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	895b      	ldrh	r3, [r3, #10]
 80062d4:	461a      	mov	r2, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	fb03 f202 	mul.w	r2, r3, r2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	4413      	add	r3, r2
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d904      	bls.n	800630e <get_fat+0x20>
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <get_fat+0x26>
		val = 1;	/* Internal error */
 800630e:	2301      	movs	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e08c      	b.n	800642e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006314:	f04f 33ff 	mov.w	r3, #4294967295
 8006318:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d045      	beq.n	80063ae <get_fat+0xc0>
 8006322:	2b03      	cmp	r3, #3
 8006324:	d05d      	beq.n	80063e2 <get_fat+0xf4>
 8006326:	2b01      	cmp	r3, #1
 8006328:	d177      	bne.n	800641a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	085b      	lsrs	r3, r3, #1
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	0a5b      	lsrs	r3, r3, #9
 8006340:	4413      	add	r3, r2
 8006342:	4619      	mov	r1, r3
 8006344:	6938      	ldr	r0, [r7, #16]
 8006346:	f7ff ff17 	bl	8006178 <move_window>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d167      	bne.n	8006420 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	60fa      	str	r2, [r7, #12]
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006362:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	0a5b      	lsrs	r3, r3, #9
 800636c:	4413      	add	r3, r2
 800636e:	4619      	mov	r1, r3
 8006370:	6938      	ldr	r0, [r7, #16]
 8006372:	f7ff ff01 	bl	8006178 <move_window>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d153      	bne.n	8006424 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	461a      	mov	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <get_fat+0xb6>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	e002      	b.n	80063aa <get_fat+0xbc>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063aa:	617b      	str	r3, [r7, #20]
			break;
 80063ac:	e03f      	b.n	800642e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6a1a      	ldr	r2, [r3, #32]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	4413      	add	r3, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	f7ff fedc 	bl	8006178 <move_window>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d130      	bne.n	8006428 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80063d4:	4413      	add	r3, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fc1e 	bl	8005c18 <ld_word>
 80063dc:	4603      	mov	r3, r0
 80063de:	617b      	str	r3, [r7, #20]
			break;
 80063e0:	e025      	b.n	800642e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6a1a      	ldr	r2, [r3, #32]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	09db      	lsrs	r3, r3, #7
 80063ea:	4413      	add	r3, r2
 80063ec:	4619      	mov	r1, r3
 80063ee:	6938      	ldr	r0, [r7, #16]
 80063f0:	f7ff fec2 	bl	8006178 <move_window>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d118      	bne.n	800642c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006408:	4413      	add	r3, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fc1c 	bl	8005c48 <ld_dword>
 8006410:	4603      	mov	r3, r0
 8006412:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006416:	617b      	str	r3, [r7, #20]
			break;
 8006418:	e009      	b.n	800642e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800641a:	2301      	movs	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	e006      	b.n	800642e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006420:	bf00      	nop
 8006422:	e004      	b.n	800642e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006424:	bf00      	nop
 8006426:	e002      	b.n	800642e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800642c:	bf00      	nop
		}
	}

	return val;
 800642e:	697b      	ldr	r3, [r7, #20]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b089      	sub	sp, #36	; 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006444:	2302      	movs	r3, #2
 8006446:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b01      	cmp	r3, #1
 800644c:	f240 80d6 	bls.w	80065fc <put_fat+0x1c4>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	f080 80d0 	bcs.w	80065fc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d073      	beq.n	800654c <put_fat+0x114>
 8006464:	2b03      	cmp	r3, #3
 8006466:	f000 8091 	beq.w	800658c <put_fat+0x154>
 800646a:	2b01      	cmp	r3, #1
 800646c:	f040 80c6 	bne.w	80065fc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4413      	add	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	4413      	add	r3, r2
 8006488:	4619      	mov	r1, r3
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fe74 	bl	8006178 <move_window>
 8006490:	4603      	mov	r3, r0
 8006492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006494:	7ffb      	ldrb	r3, [r7, #31]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f040 80a9 	bne.w	80065ee <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	61b9      	str	r1, [r7, #24]
 80064a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ac:	4413      	add	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00d      	beq.n	80064d6 <put_fat+0x9e>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b25b      	sxtb	r3, r3
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	b25a      	sxtb	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b25b      	sxtb	r3, r3
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	e001      	b.n	80064da <put_fat+0xa2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	0a5b      	lsrs	r3, r3, #9
 80064ec:	4413      	add	r3, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff fe41 	bl	8006178 <move_window>
 80064f6:	4603      	mov	r3, r0
 80064f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064fa:	7ffb      	ldrb	r3, [r7, #31]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d178      	bne.n	80065f2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	4413      	add	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <put_fat+0xea>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	b2db      	uxtb	r3, r3
 8006520:	e00e      	b.n	8006540 <put_fat+0x108>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	b25b      	sxtb	r3, r3
 8006528:	f023 030f 	bic.w	r3, r3, #15
 800652c:	b25a      	sxtb	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	b25b      	sxtb	r3, r3
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	b25b      	sxtb	r3, r3
 800653a:	4313      	orrs	r3, r2
 800653c:	b25b      	sxtb	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	70da      	strb	r2, [r3, #3]
			break;
 800654a:	e057      	b.n	80065fc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	4413      	add	r3, r2
 8006556:	4619      	mov	r1, r3
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fe0d 	bl	8006178 <move_window>
 800655e:	4603      	mov	r3, r0
 8006560:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006562:	7ffb      	ldrb	r3, [r7, #31]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d146      	bne.n	80065f6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006576:	4413      	add	r3, r2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	b292      	uxth	r2, r2
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fb85 	bl	8005c8e <st_word>
			fs->wflag = 1;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	70da      	strb	r2, [r3, #3]
			break;
 800658a:	e037      	b.n	80065fc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	09db      	lsrs	r3, r3, #7
 8006594:	4413      	add	r3, r2
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fded 	bl	8006178 <move_window>
 800659e:	4603      	mov	r3, r0
 80065a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065a2:	7ffb      	ldrb	r3, [r7, #31]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d128      	bne.n	80065fa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80065bc:	4413      	add	r3, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fb42 	bl	8005c48 <ld_dword>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80065ca:	4323      	orrs	r3, r4
 80065cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80065dc:	4413      	add	r3, r2
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fb6f 	bl	8005cc4 <st_dword>
			fs->wflag = 1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	70da      	strb	r2, [r3, #3]
			break;
 80065ec:	e006      	b.n	80065fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80065ee:	bf00      	nop
 80065f0:	e004      	b.n	80065fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80065f2:	bf00      	nop
 80065f4:	e002      	b.n	80065fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80065fa:	bf00      	nop
		}
	}
	return res;
 80065fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3724      	adds	r7, #36	; 0x24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}

08006606 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b088      	sub	sp, #32
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d904      	bls.n	800662c <remove_chain+0x26>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d301      	bcc.n	8006630 <remove_chain+0x2a>
 800662c:	2302      	movs	r3, #2
 800662e:	e04b      	b.n	80066c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00c      	beq.n	8006650 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	69b8      	ldr	r0, [r7, #24]
 800663e:	f7ff fefb 	bl	8006438 <put_fat>
 8006642:	4603      	mov	r3, r0
 8006644:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006646:	7ffb      	ldrb	r3, [r7, #31]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <remove_chain+0x4a>
 800664c:	7ffb      	ldrb	r3, [r7, #31]
 800664e:	e03b      	b.n	80066c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f7ff fe4b 	bl	80062ee <get_fat>
 8006658:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d031      	beq.n	80066c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <remove_chain+0x64>
 8006666:	2302      	movs	r3, #2
 8006668:	e02e      	b.n	80066c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d101      	bne.n	8006676 <remove_chain+0x70>
 8006672:	2301      	movs	r3, #1
 8006674:	e028      	b.n	80066c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006676:	2200      	movs	r2, #0
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	69b8      	ldr	r0, [r7, #24]
 800667c:	f7ff fedc 	bl	8006438 <put_fat>
 8006680:	4603      	mov	r3, r0
 8006682:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006684:	7ffb      	ldrb	r3, [r7, #31]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <remove_chain+0x88>
 800668a:	7ffb      	ldrb	r3, [r7, #31]
 800668c:	e01c      	b.n	80066c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	3b02      	subs	r3, #2
 8006698:	429a      	cmp	r2, r3
 800669a:	d20b      	bcs.n	80066b4 <remove_chain+0xae>
			fs->free_clst++;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	791b      	ldrb	r3, [r3, #4]
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3c6      	bcc.n	8006650 <remove_chain+0x4a>
 80066c2:	e000      	b.n	80066c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80066c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d004      	beq.n	80066fc <create_chain+0x2c>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d31b      	bcc.n	8006734 <create_chain+0x64>
 80066fc:	2301      	movs	r3, #1
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	e018      	b.n	8006734 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff fdf2 	bl	80062ee <get_fat>
 800670a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d801      	bhi.n	8006716 <create_chain+0x46>
 8006712:	2301      	movs	r3, #1
 8006714:	e070      	b.n	80067f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d101      	bne.n	8006722 <create_chain+0x52>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	e06a      	b.n	80067f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	429a      	cmp	r2, r3
 800672a:	d201      	bcs.n	8006730 <create_chain+0x60>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	e063      	b.n	80067f8 <create_chain+0x128>
		scl = clst;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	429a      	cmp	r2, r3
 8006746:	d307      	bcc.n	8006758 <create_chain+0x88>
				ncl = 2;
 8006748:	2302      	movs	r3, #2
 800674a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	429a      	cmp	r2, r3
 8006752:	d901      	bls.n	8006758 <create_chain+0x88>
 8006754:	2300      	movs	r3, #0
 8006756:	e04f      	b.n	80067f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006758:	69f9      	ldr	r1, [r7, #28]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff fdc7 	bl	80062ee <get_fat>
 8006760:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d003      	beq.n	8006776 <create_chain+0xa6>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d101      	bne.n	800677a <create_chain+0xaa>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	e03e      	b.n	80067f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	429a      	cmp	r2, r3
 8006780:	d1da      	bne.n	8006738 <create_chain+0x68>
 8006782:	2300      	movs	r3, #0
 8006784:	e038      	b.n	80067f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006786:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	69f9      	ldr	r1, [r7, #28]
 800678e:	6938      	ldr	r0, [r7, #16]
 8006790:	f7ff fe52 	bl	8006438 <put_fat>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <create_chain+0xe2>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6938      	ldr	r0, [r7, #16]
 80067aa:	f7ff fe45 	bl	8006438 <put_fat>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d116      	bne.n	80067e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	3b02      	subs	r3, #2
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d804      	bhi.n	80067d6 <create_chain+0x106>
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	711a      	strb	r2, [r3, #4]
 80067e4:	e007      	b.n	80067f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d102      	bne.n	80067f2 <create_chain+0x122>
 80067ec:	f04f 33ff 	mov.w	r3, #4294967295
 80067f0:	e000      	b.n	80067f4 <create_chain+0x124>
 80067f2:	2301      	movs	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80067f6:	69fb      	ldr	r3, [r7, #28]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	3304      	adds	r3, #4
 8006816:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	0a5b      	lsrs	r3, r3, #9
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	8952      	ldrh	r2, [r2, #10]
 8006820:	fbb3 f3f2 	udiv	r3, r3, r2
 8006824:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1d1a      	adds	r2, r3, #4
 800682a:	613a      	str	r2, [r7, #16]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <clmt_clust+0x3a>
 8006836:	2300      	movs	r3, #0
 8006838:	e010      	b.n	800685c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	429a      	cmp	r2, r3
 8006840:	d307      	bcc.n	8006852 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3304      	adds	r3, #4
 800684e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006850:	e7e9      	b.n	8006826 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006852:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	4413      	add	r3, r2
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800687e:	d204      	bcs.n	800688a <dir_sdi+0x22>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <dir_sdi+0x26>
		return FR_INT_ERR;
 800688a:	2302      	movs	r3, #2
 800688c:	e063      	b.n	8006956 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <dir_sdi+0x46>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d902      	bls.n	80068ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10c      	bne.n	80068ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	8912      	ldrh	r2, [r2, #8]
 80068bc:	4293      	cmp	r3, r2
 80068be:	d301      	bcc.n	80068c4 <dir_sdi+0x5c>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e048      	b.n	8006956 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	61da      	str	r2, [r3, #28]
 80068cc:	e029      	b.n	8006922 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	895b      	ldrh	r3, [r3, #10]
 80068d2:	025b      	lsls	r3, r3, #9
 80068d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80068d6:	e019      	b.n	800690c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6979      	ldr	r1, [r7, #20]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fd06 	bl	80062ee <get_fat>
 80068e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d101      	bne.n	80068f0 <dir_sdi+0x88>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e032      	b.n	8006956 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d904      	bls.n	8006900 <dir_sdi+0x98>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d301      	bcc.n	8006904 <dir_sdi+0x9c>
 8006900:	2302      	movs	r3, #2
 8006902:	e028      	b.n	8006956 <dir_sdi+0xee>
			ofs -= csz;
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	429a      	cmp	r2, r3
 8006912:	d2e1      	bcs.n	80068d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006914:	6979      	ldr	r1, [r7, #20]
 8006916:	6938      	ldr	r0, [r7, #16]
 8006918:	f7ff fcca 	bl	80062b0 <clust2sect>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <dir_sdi+0xcc>
 8006930:	2302      	movs	r3, #2
 8006932:	e010      	b.n	8006956 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	0a5b      	lsrs	r3, r3, #9
 800693c:	441a      	add	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	3320      	adds	r3, #32
 8006974:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <dir_next+0x28>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006984:	d301      	bcc.n	800698a <dir_next+0x2c>
 8006986:	2304      	movs	r3, #4
 8006988:	e0aa      	b.n	8006ae0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 8098 	bne.w	8006ac6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10b      	bne.n	80069c0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	8912      	ldrh	r2, [r2, #8]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	f0c0 8088 	bcc.w	8006ac6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	61da      	str	r2, [r3, #28]
 80069bc:	2304      	movs	r3, #4
 80069be:	e08f      	b.n	8006ae0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	0a5b      	lsrs	r3, r3, #9
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	8952      	ldrh	r2, [r2, #10]
 80069c8:	3a01      	subs	r2, #1
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d17a      	bne.n	8006ac6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f7ff fc88 	bl	80062ee <get_fat>
 80069de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d801      	bhi.n	80069ea <dir_next+0x8c>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e07a      	b.n	8006ae0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d101      	bne.n	80069f6 <dir_next+0x98>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e074      	b.n	8006ae0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d358      	bcc.n	8006ab2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	61da      	str	r2, [r3, #28]
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	e067      	b.n	8006ae0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7ff fe59 	bl	80066d0 <create_chain>
 8006a1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <dir_next+0xcc>
 8006a26:	2307      	movs	r3, #7
 8006a28:	e05a      	b.n	8006ae0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <dir_next+0xd6>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e055      	b.n	8006ae0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3a:	d101      	bne.n	8006a40 <dir_next+0xe2>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e04f      	b.n	8006ae0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff fb55 	bl	80060f0 <sync_window>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <dir_next+0xf2>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e047      	b.n	8006ae0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3330      	adds	r3, #48	; 0x30
 8006a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff f97f 	bl	8005d5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	6979      	ldr	r1, [r7, #20]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fc22 	bl	80062b0 <clust2sect>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a72:	e012      	b.n	8006a9a <dir_next+0x13c>
						fs->wflag = 1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fb38 	bl	80060f0 <sync_window>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <dir_next+0x12c>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e02a      	b.n	8006ae0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	895b      	ldrh	r3, [r3, #10]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d3e6      	bcc.n	8006a74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad2      	subs	r2, r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff fbf8 	bl	80062b0 <clust2sect>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad8:	441a      	add	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006af8:	2100      	movs	r1, #0
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff feb4 	bl	8006868 <dir_sdi>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d12b      	bne.n	8006b62 <dir_alloc+0x7a>
		n = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fb2f 	bl	8006178 <move_window>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11d      	bne.n	8006b60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2be5      	cmp	r3, #229	; 0xe5
 8006b2c:	d004      	beq.n	8006b38 <dir_alloc+0x50>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d107      	bne.n	8006b48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d102      	bne.n	8006b4c <dir_alloc+0x64>
 8006b46:	e00c      	b.n	8006b62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff ff05 	bl	800695e <dir_next>
 8006b54:	4603      	mov	r3, r0
 8006b56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0d7      	beq.n	8006b0e <dir_alloc+0x26>
 8006b5e:	e000      	b.n	8006b62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006b60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d101      	bne.n	8006b6c <dir_alloc+0x84>
 8006b68:	2307      	movs	r3, #7
 8006b6a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	331a      	adds	r3, #26
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff f847 	bl	8005c18 <ld_word>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d109      	bne.n	8006baa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff f83c 	bl	8005c18 <ld_word>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006baa:	68fb      	ldr	r3, [r7, #12]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	331a      	adds	r3, #26
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff f85f 	bl	8005c8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d109      	bne.n	8006bec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f103 0214 	add.w	r2, r3, #20
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f7ff f851 	bl	8005c8e <st_word>
	}
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006bfe:	2304      	movs	r3, #4
 8006c00:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006c08:	e03c      	b.n	8006c84 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6938      	ldr	r0, [r7, #16]
 8006c12:	f7ff fab1 	bl	8006178 <move_window>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d136      	bne.n	8006c8e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006c2e:	2304      	movs	r3, #4
 8006c30:	75fb      	strb	r3, [r7, #23]
 8006c32:	e031      	b.n	8006c98 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	330b      	adds	r3, #11
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c40:	73bb      	strb	r3, [r7, #14]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7bba      	ldrb	r2, [r7, #14]
 8006c46:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2be5      	cmp	r3, #229	; 0xe5
 8006c4c:	d011      	beq.n	8006c72 <dir_read+0x7e>
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b2e      	cmp	r3, #46	; 0x2e
 8006c52:	d00e      	beq.n	8006c72 <dir_read+0x7e>
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b0f      	cmp	r3, #15
 8006c58:	d00b      	beq.n	8006c72 <dir_read+0x7e>
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	f023 0320 	bic.w	r3, r3, #32
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006c72:	2100      	movs	r1, #0
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fe72 	bl	800695e <dir_next>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <dir_read+0xa2>
	while (dp->sect) {
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1be      	bne.n	8006c0a <dir_read+0x16>
 8006c8c:	e004      	b.n	8006c98 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <dir_read+0xa4>
				break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006c96:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <dir_read+0xb0>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	61da      	str	r2, [r3, #28]
	return res;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fdd2 	bl	8006868 <dir_sdi>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <dir_find+0x24>
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	e03e      	b.n	8006d50 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6938      	ldr	r0, [r7, #16]
 8006cda:	f7ff fa4d 	bl	8006178 <move_window>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d12f      	bne.n	8006d48 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <dir_find+0x4e>
 8006cf6:	2304      	movs	r3, #4
 8006cf8:	75fb      	strb	r3, [r7, #23]
 8006cfa:	e028      	b.n	8006d4e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	330b      	adds	r3, #11
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	330b      	adds	r3, #11
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <dir_find+0x86>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a18      	ldr	r0, [r3, #32]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3324      	adds	r3, #36	; 0x24
 8006d26:	220b      	movs	r2, #11
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f7ff f832 	bl	8005d92 <mem_cmp>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d34:	2100      	movs	r1, #0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fe11 	bl	800695e <dir_next>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0c5      	beq.n	8006cd2 <dir_find+0x24>
 8006d46:	e002      	b.n	8006d4e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d4c:	bf00      	nop

	return res;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006d66:	2101      	movs	r1, #1
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff febd 	bl	8006ae8 <dir_alloc>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11c      	bne.n	8006db2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	68b8      	ldr	r0, [r7, #8]
 8006d80:	f7ff f9fa 	bl	8006178 <move_window>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d111      	bne.n	8006db2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	2220      	movs	r2, #32
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe ffe1 	bl	8005d5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a18      	ldr	r0, [r3, #32]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	220b      	movs	r2, #11
 8006da6:	4619      	mov	r1, r3
 8006da8:	f7fe ffb8 	bl	8005d1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2201      	movs	r2, #1
 8006db0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff f9d1 	bl	8006178 <move_window>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	22e5      	movs	r2, #229	; 0xe5
 8006de6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006dee:	7afb      	ldrb	r3, [r7, #11]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04e      	beq.n	8006eae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006e18:	e021      	b.n	8006e5e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1a      	ldr	r2, [r3, #32]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	1c59      	adds	r1, r3, #1
 8006e22:	6179      	str	r1, [r7, #20]
 8006e24:	4413      	add	r3, r2
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d100      	bne.n	8006e32 <get_fileinfo+0x3a>
 8006e30:	e015      	b.n	8006e5e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b05      	cmp	r3, #5
 8006e36:	d101      	bne.n	8006e3c <get_fileinfo+0x44>
 8006e38:	23e5      	movs	r3, #229	; 0xe5
 8006e3a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b09      	cmp	r3, #9
 8006e40:	d106      	bne.n	8006e50 <get_fileinfo+0x58>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	613a      	str	r2, [r7, #16]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	222e      	movs	r2, #46	; 0x2e
 8006e4e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	613a      	str	r2, [r7, #16]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	4413      	add	r3, r2
 8006e5a:	7bfa      	ldrb	r2, [r7, #15]
 8006e5c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b0a      	cmp	r3, #10
 8006e62:	d9da      	bls.n	8006e1a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4413      	add	r3, r2
 8006e6a:	3309      	adds	r3, #9
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	7ada      	ldrb	r2, [r3, #11]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	331c      	adds	r3, #28
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe fee1 	bl	8005c48 <ld_dword>
 8006e86:	4602      	mov	r2, r0
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	3316      	adds	r3, #22
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fed8 	bl	8005c48 <ld_dword>
 8006e98:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	80da      	strh	r2, [r3, #6]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	809a      	strh	r2, [r3, #4]
 8006eac:	e000      	b.n	8006eb0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006eae:	bf00      	nop
}
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006ece:	220b      	movs	r2, #11
 8006ed0:	2120      	movs	r1, #32
 8006ed2:	68b8      	ldr	r0, [r7, #8]
 8006ed4:	f7fe ff43 	bl	8005d5e <mem_set>
	si = i = 0; ni = 8;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	617a      	str	r2, [r7, #20]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ef2:	7ffb      	ldrb	r3, [r7, #31]
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d94e      	bls.n	8006f96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ef8:	7ffb      	ldrb	r3, [r7, #31]
 8006efa:	2b2f      	cmp	r3, #47	; 0x2f
 8006efc:	d006      	beq.n	8006f0c <create_name+0x54>
 8006efe:	7ffb      	ldrb	r3, [r7, #31]
 8006f00:	2b5c      	cmp	r3, #92	; 0x5c
 8006f02:	d110      	bne.n	8006f26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f04:	e002      	b.n	8006f0c <create_name+0x54>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b2f      	cmp	r3, #47	; 0x2f
 8006f16:	d0f6      	beq.n	8006f06 <create_name+0x4e>
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b5c      	cmp	r3, #92	; 0x5c
 8006f22:	d0f0      	beq.n	8006f06 <create_name+0x4e>
			break;
 8006f24:	e038      	b.n	8006f98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
 8006f28:	2b2e      	cmp	r3, #46	; 0x2e
 8006f2a:	d003      	beq.n	8006f34 <create_name+0x7c>
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d30c      	bcc.n	8006f4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b0b      	cmp	r3, #11
 8006f38:	d002      	beq.n	8006f40 <create_name+0x88>
 8006f3a:	7ffb      	ldrb	r3, [r7, #31]
 8006f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f3e:	d001      	beq.n	8006f44 <create_name+0x8c>
 8006f40:	2306      	movs	r3, #6
 8006f42:	e044      	b.n	8006fce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006f44:	2308      	movs	r3, #8
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	230b      	movs	r3, #11
 8006f4a:	61bb      	str	r3, [r7, #24]
			continue;
 8006f4c:	e022      	b.n	8006f94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006f4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da04      	bge.n	8006f60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006f56:	7ffb      	ldrb	r3, [r7, #31]
 8006f58:	3b80      	subs	r3, #128	; 0x80
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <create_name+0x120>)
 8006f5c:	5cd3      	ldrb	r3, [r2, r3]
 8006f5e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006f60:	7ffb      	ldrb	r3, [r7, #31]
 8006f62:	4619      	mov	r1, r3
 8006f64:	481d      	ldr	r0, [pc, #116]	; (8006fdc <create_name+0x124>)
 8006f66:	f7fe ff3b 	bl	8005de0 <chk_chr>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <create_name+0xbc>
 8006f70:	2306      	movs	r3, #6
 8006f72:	e02c      	b.n	8006fce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006f74:	7ffb      	ldrb	r3, [r7, #31]
 8006f76:	2b60      	cmp	r3, #96	; 0x60
 8006f78:	d905      	bls.n	8006f86 <create_name+0xce>
 8006f7a:	7ffb      	ldrb	r3, [r7, #31]
 8006f7c:	2b7a      	cmp	r3, #122	; 0x7a
 8006f7e:	d802      	bhi.n	8006f86 <create_name+0xce>
 8006f80:	7ffb      	ldrb	r3, [r7, #31]
 8006f82:	3b20      	subs	r3, #32
 8006f84:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	613a      	str	r2, [r7, #16]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	4413      	add	r3, r2
 8006f90:	7ffa      	ldrb	r2, [r7, #31]
 8006f92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006f94:	e7a6      	b.n	8006ee4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	441a      	add	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <create_name+0xf4>
 8006fa8:	2306      	movs	r3, #6
 8006faa:	e010      	b.n	8006fce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2be5      	cmp	r3, #229	; 0xe5
 8006fb2:	d102      	bne.n	8006fba <create_name+0x102>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006fba:	7ffb      	ldrb	r3, [r7, #31]
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d801      	bhi.n	8006fc4 <create_name+0x10c>
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	e000      	b.n	8006fc6 <create_name+0x10e>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	330b      	adds	r3, #11
 8006fca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006fcc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	0800b4dc 	.word	0x0800b4dc
 8006fdc:	0800b498 	.word	0x0800b498

08006fe0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ff4:	e002      	b.n	8006ffc <follow_path+0x1c>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b2f      	cmp	r3, #47	; 0x2f
 8007002:	d0f8      	beq.n	8006ff6 <follow_path+0x16>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b5c      	cmp	r3, #92	; 0x5c
 800700a:	d0f4      	beq.n	8006ff6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2200      	movs	r2, #0
 8007010:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b1f      	cmp	r3, #31
 8007018:	d80a      	bhi.n	8007030 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2280      	movs	r2, #128	; 0x80
 800701e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007022:	2100      	movs	r1, #0
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fc1f 	bl	8006868 <dir_sdi>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]
 800702e:	e043      	b.n	80070b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007030:	463b      	mov	r3, r7
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ff3f 	bl	8006eb8 <create_name>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d134      	bne.n	80070ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fe32 	bl	8006cae <dir_find>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007054:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b04      	cmp	r3, #4
 8007060:	d127      	bne.n	80070b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d122      	bne.n	80070b2 <follow_path+0xd2>
 800706c:	2305      	movs	r3, #5
 800706e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007070:	e01f      	b.n	80070b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11c      	bne.n	80070b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	799b      	ldrb	r3, [r3, #6]
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007088:	2305      	movs	r3, #5
 800708a:	75fb      	strb	r3, [r7, #23]
 800708c:	e014      	b.n	80070b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709c:	4413      	add	r3, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fd68 	bl	8006b76 <ld_clust>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070ac:	e7c0      	b.n	8007030 <follow_path+0x50>
			if (res != FR_OK) break;
 80070ae:	bf00      	nop
 80070b0:	e002      	b.n	80070b8 <follow_path+0xd8>
				break;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070b6:	bf00      	nop
			}
		}
	}

	return res;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d031      	beq.n	800713c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e002      	b.n	80070e6 <get_ldnumber+0x24>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3301      	adds	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d903      	bls.n	80070f6 <get_ldnumber+0x34>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b3a      	cmp	r3, #58	; 0x3a
 80070f4:	d1f4      	bne.n	80070e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b3a      	cmp	r3, #58	; 0x3a
 80070fc:	d11c      	bne.n	8007138 <get_ldnumber+0x76>
			tp = *path;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	60fa      	str	r2, [r7, #12]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	3b30      	subs	r3, #48	; 0x30
 800710e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b09      	cmp	r3, #9
 8007114:	d80e      	bhi.n	8007134 <get_ldnumber+0x72>
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	429a      	cmp	r2, r3
 800711c:	d10a      	bne.n	8007134 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d107      	bne.n	8007134 <get_ldnumber+0x72>
					vol = (int)i;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3301      	adds	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	e002      	b.n	800713e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007138:	2300      	movs	r3, #0
 800713a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800713c:	693b      	ldr	r3, [r7, #16]
}
 800713e:	4618      	mov	r0, r3
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
	...

0800714c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	70da      	strb	r2, [r3, #3]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f04f 32ff 	mov.w	r2, #4294967295
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff f806 	bl	8006178 <move_window>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <check_fs+0x2a>
 8007172:	2304      	movs	r3, #4
 8007174:	e038      	b.n	80071e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3330      	adds	r3, #48	; 0x30
 800717a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fd4a 	bl	8005c18 <ld_word>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <check_fs+0x48>
 8007190:	2303      	movs	r3, #3
 8007192:	e029      	b.n	80071e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800719a:	2be9      	cmp	r3, #233	; 0xe9
 800719c:	d009      	beq.n	80071b2 <check_fs+0x66>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071a4:	2beb      	cmp	r3, #235	; 0xeb
 80071a6:	d11e      	bne.n	80071e6 <check_fs+0x9a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80071ae:	2b90      	cmp	r3, #144	; 0x90
 80071b0:	d119      	bne.n	80071e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3330      	adds	r3, #48	; 0x30
 80071b6:	3336      	adds	r3, #54	; 0x36
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fd45 	bl	8005c48 <ld_dword>
 80071be:	4603      	mov	r3, r0
 80071c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071c4:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <check_fs+0xa4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d101      	bne.n	80071ce <check_fs+0x82>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e00c      	b.n	80071e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3330      	adds	r3, #48	; 0x30
 80071d2:	3352      	adds	r3, #82	; 0x52
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fd37 	bl	8005c48 <ld_dword>
 80071da:	4602      	mov	r2, r0
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <check_fs+0xa8>)
 80071de:	429a      	cmp	r2, r3
 80071e0:	d101      	bne.n	80071e6 <check_fs+0x9a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	e000      	b.n	80071e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80071e6:	2302      	movs	r3, #2
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	00544146 	.word	0x00544146
 80071f4:	33544146 	.word	0x33544146

080071f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b096      	sub	sp, #88	; 0x58
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff ff58 	bl	80070c2 <get_ldnumber>
 8007212:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007216:	2b00      	cmp	r3, #0
 8007218:	da01      	bge.n	800721e <find_volume+0x26>
 800721a:	230b      	movs	r3, #11
 800721c:	e22e      	b.n	800767c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800721e:	4aa8      	ldr	r2, [pc, #672]	; (80074c0 <find_volume+0x2c8>)
 8007220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007226:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <find_volume+0x3a>
 800722e:	230c      	movs	r3, #12
 8007230:	e224      	b.n	800767c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007236:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01a      	beq.n	800727e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe fc45 	bl	8005adc <disk_status>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10c      	bne.n	800727e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <find_volume+0x82>
 800726a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007276:	230a      	movs	r3, #10
 8007278:	e200      	b.n	800767c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800727a:	2300      	movs	r3, #0
 800727c:	e1fe      	b.n	800767c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	2200      	movs	r2, #0
 8007282:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	b2da      	uxtb	r2, r3
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fc3d 	bl	8005b10 <disk_initialize>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800729c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80072a8:	2303      	movs	r3, #3
 80072aa:	e1e7      	b.n	800767c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <find_volume+0xca>
 80072b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80072be:	230a      	movs	r3, #10
 80072c0:	e1dc      	b.n	800767c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80072c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072ca:	f7ff ff3f 	bl	800714c <check_fs>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80072d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d14b      	bne.n	8007374 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072dc:	2300      	movs	r3, #0
 80072de:	643b      	str	r3, [r7, #64]	; 0x40
 80072e0:	e01f      	b.n	8007322 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072f0:	4413      	add	r3, r2
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	3304      	adds	r3, #4
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <find_volume+0x114>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	3308      	adds	r3, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fca0 	bl	8005c48 <ld_dword>
 8007308:	4602      	mov	r2, r0
 800730a:	e000      	b.n	800730e <find_volume+0x116>
 800730c:	2200      	movs	r2, #0
 800730e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007316:	440b      	add	r3, r1
 8007318:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731e:	3301      	adds	r3, #1
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
 8007322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007324:	2b03      	cmp	r3, #3
 8007326:	d9dc      	bls.n	80072e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007328:	2300      	movs	r3, #0
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800732c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <find_volume+0x140>
 8007332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007334:	3b01      	subs	r3, #1
 8007336:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007340:	4413      	add	r3, r2
 8007342:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007346:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <find_volume+0x162>
 800734e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007352:	f7ff fefb 	bl	800714c <check_fs>
 8007356:	4603      	mov	r3, r0
 8007358:	e000      	b.n	800735c <find_volume+0x164>
 800735a:	2303      	movs	r3, #3
 800735c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007364:	2b01      	cmp	r3, #1
 8007366:	d905      	bls.n	8007374 <find_volume+0x17c>
 8007368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736a:	3301      	adds	r3, #1
 800736c:	643b      	str	r3, [r7, #64]	; 0x40
 800736e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007370:	2b03      	cmp	r3, #3
 8007372:	d9e1      	bls.n	8007338 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007378:	2b04      	cmp	r3, #4
 800737a:	d101      	bne.n	8007380 <find_volume+0x188>
 800737c:	2301      	movs	r3, #1
 800737e:	e17d      	b.n	800767c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007380:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007384:	2b01      	cmp	r3, #1
 8007386:	d901      	bls.n	800738c <find_volume+0x194>
 8007388:	230d      	movs	r3, #13
 800738a:	e177      	b.n	800767c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	3330      	adds	r3, #48	; 0x30
 8007390:	330b      	adds	r3, #11
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fc40 	bl	8005c18 <ld_word>
 8007398:	4603      	mov	r3, r0
 800739a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739e:	d001      	beq.n	80073a4 <find_volume+0x1ac>
 80073a0:	230d      	movs	r3, #13
 80073a2:	e16b      	b.n	800767c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	3330      	adds	r3, #48	; 0x30
 80073a8:	3316      	adds	r3, #22
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fc34 	bl	8005c18 <ld_word>
 80073b0:	4603      	mov	r3, r0
 80073b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80073b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <find_volume+0x1d0>
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	3330      	adds	r3, #48	; 0x30
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fc41 	bl	8005c48 <ld_dword>
 80073c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	789b      	ldrb	r3, [r3, #2]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d005      	beq.n	80073ec <find_volume+0x1f4>
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	789b      	ldrb	r3, [r3, #2]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d001      	beq.n	80073ec <find_volume+0x1f4>
 80073e8:	230d      	movs	r3, #13
 80073ea:	e147      	b.n	800767c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	789b      	ldrb	r3, [r3, #2]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f4:	fb02 f303 	mul.w	r3, r2, r3
 80073f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b29a      	uxth	r2, r3
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	895b      	ldrh	r3, [r3, #10]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <find_volume+0x228>
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	895b      	ldrh	r3, [r3, #10]
 8007412:	461a      	mov	r2, r3
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	895b      	ldrh	r3, [r3, #10]
 8007418:	3b01      	subs	r3, #1
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <find_volume+0x22c>
 8007420:	230d      	movs	r3, #13
 8007422:	e12b      	b.n	800767c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	3330      	adds	r3, #48	; 0x30
 8007428:	3311      	adds	r3, #17
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fbf4 	bl	8005c18 <ld_word>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	891b      	ldrh	r3, [r3, #8]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <find_volume+0x252>
 8007446:	230d      	movs	r3, #13
 8007448:	e118      	b.n	800767c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	3330      	adds	r3, #48	; 0x30
 800744e:	3313      	adds	r3, #19
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fbe1 	bl	8005c18 <ld_word>
 8007456:	4603      	mov	r3, r0
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800745a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <find_volume+0x276>
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	3330      	adds	r3, #48	; 0x30
 8007464:	3320      	adds	r3, #32
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fbee 	bl	8005c48 <ld_dword>
 800746c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	3330      	adds	r3, #48	; 0x30
 8007472:	330e      	adds	r3, #14
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fbcf 	bl	8005c18 <ld_word>
 800747a:	4603      	mov	r3, r0
 800747c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800747e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <find_volume+0x290>
 8007484:	230d      	movs	r3, #13
 8007486:	e0f9      	b.n	800767c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007488:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	4413      	add	r3, r2
 800748e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007490:	8912      	ldrh	r2, [r2, #8]
 8007492:	0912      	lsrs	r2, r2, #4
 8007494:	b292      	uxth	r2, r2
 8007496:	4413      	add	r3, r2
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800749a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	429a      	cmp	r2, r3
 80074a0:	d201      	bcs.n	80074a6 <find_volume+0x2ae>
 80074a2:	230d      	movs	r3, #13
 80074a4:	e0ea      	b.n	800767c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80074a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ae:	8952      	ldrh	r2, [r2, #10]
 80074b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <find_volume+0x2cc>
 80074bc:	230d      	movs	r3, #13
 80074be:	e0dd      	b.n	800767c <find_volume+0x484>
 80074c0:	2000008c 	.word	0x2000008c
		fmt = FS_FAT32;
 80074c4:	2303      	movs	r3, #3
 80074c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d802      	bhi.n	80074da <find_volume+0x2e2>
 80074d4:	2302      	movs	r3, #2
 80074d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d802      	bhi.n	80074ea <find_volume+0x2f2>
 80074e4:	2301      	movs	r3, #1
 80074e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	1c9a      	adds	r2, r3, #2
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80074f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074f6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80074f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074fc:	441a      	add	r2, r3
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007502:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	441a      	add	r2, r3
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800750c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007510:	2b03      	cmp	r3, #3
 8007512:	d11e      	bne.n	8007552 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	3330      	adds	r3, #48	; 0x30
 8007518:	332a      	adds	r3, #42	; 0x2a
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fb7c 	bl	8005c18 <ld_word>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <find_volume+0x332>
 8007526:	230d      	movs	r3, #13
 8007528:	e0a8      	b.n	800767c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	891b      	ldrh	r3, [r3, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <find_volume+0x33e>
 8007532:	230d      	movs	r3, #13
 8007534:	e0a2      	b.n	800767c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	3330      	adds	r3, #48	; 0x30
 800753a:	332c      	adds	r3, #44	; 0x2c
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fb83 	bl	8005c48 <ld_dword>
 8007542:	4602      	mov	r2, r0
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	647b      	str	r3, [r7, #68]	; 0x44
 8007550:	e01f      	b.n	8007592 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	891b      	ldrh	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <find_volume+0x366>
 800755a:	230d      	movs	r3, #13
 800755c:	e08e      	b.n	800767c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	6a1a      	ldr	r2, [r3, #32]
 8007562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007564:	441a      	add	r2, r3
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800756a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800756e:	2b02      	cmp	r3, #2
 8007570:	d103      	bne.n	800757a <find_volume+0x382>
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	e00a      	b.n	8007590 <find_volume+0x398>
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	695a      	ldr	r2, [r3, #20]
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	085a      	lsrs	r2, r3, #1
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007590:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007598:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800759c:	0a5b      	lsrs	r3, r3, #9
 800759e:	429a      	cmp	r2, r3
 80075a0:	d201      	bcs.n	80075a6 <find_volume+0x3ae>
 80075a2:	230d      	movs	r3, #13
 80075a4:	e06a      	b.n	800767c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ac:	611a      	str	r2, [r3, #16]
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	2280      	movs	r2, #128	; 0x80
 80075ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80075bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d149      	bne.n	8007658 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	3330      	adds	r3, #48	; 0x30
 80075c8:	3330      	adds	r3, #48	; 0x30
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fb24 	bl	8005c18 <ld_word>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d140      	bne.n	8007658 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80075d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d8:	3301      	adds	r3, #1
 80075da:	4619      	mov	r1, r3
 80075dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075de:	f7fe fdcb 	bl	8006178 <move_window>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d137      	bne.n	8007658 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	2200      	movs	r2, #0
 80075ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	3330      	adds	r3, #48	; 0x30
 80075f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fb0e 	bl	8005c18 <ld_word>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461a      	mov	r2, r3
 8007600:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007604:	429a      	cmp	r2, r3
 8007606:	d127      	bne.n	8007658 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	3330      	adds	r3, #48	; 0x30
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe fb1b 	bl	8005c48 <ld_dword>
 8007612:	4602      	mov	r2, r0
 8007614:	4b1b      	ldr	r3, [pc, #108]	; (8007684 <find_volume+0x48c>)
 8007616:	429a      	cmp	r2, r3
 8007618:	d11e      	bne.n	8007658 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	3330      	adds	r3, #48	; 0x30
 800761e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fb10 	bl	8005c48 <ld_dword>
 8007628:	4602      	mov	r2, r0
 800762a:	4b17      	ldr	r3, [pc, #92]	; (8007688 <find_volume+0x490>)
 800762c:	429a      	cmp	r2, r3
 800762e:	d113      	bne.n	8007658 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	3330      	adds	r3, #48	; 0x30
 8007634:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fb05 	bl	8005c48 <ld_dword>
 800763e:	4602      	mov	r2, r0
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	3330      	adds	r3, #48	; 0x30
 8007648:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe fafb 	bl	8005c48 <ld_dword>
 8007652:	4602      	mov	r2, r0
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800765e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <find_volume+0x494>)
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <find_volume+0x494>)
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	4b07      	ldr	r3, [pc, #28]	; (800768c <find_volume+0x494>)
 800766e:	881a      	ldrh	r2, [r3, #0]
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007674:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007676:	f7fe fd17 	bl	80060a8 <clear_lock>
#endif
	return FR_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3758      	adds	r7, #88	; 0x58
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	41615252 	.word	0x41615252
 8007688:	61417272 	.word	0x61417272
 800768c:	20000090 	.word	0x20000090

08007690 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800769a:	2309      	movs	r3, #9
 800769c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01c      	beq.n	80076de <validate+0x4e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d018      	beq.n	80076de <validate+0x4e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <validate+0x4e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	889a      	ldrh	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d10c      	bne.n	80076de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fa06 	bl	8005adc <disk_status>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <validate+0x4e>
			res = FR_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <validate+0x5a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	e000      	b.n	80076ec <validate+0x5c>
 80076ea:	2300      	movs	r3, #0
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	6013      	str	r3, [r2, #0]
	return res;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800770e:	f107 0310 	add.w	r3, r7, #16
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fcd5 	bl	80070c2 <get_ldnumber>
 8007718:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da01      	bge.n	8007724 <f_mount+0x28>
 8007720:	230b      	movs	r3, #11
 8007722:	e02b      	b.n	800777c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007724:	4a17      	ldr	r2, [pc, #92]	; (8007784 <f_mount+0x88>)
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007734:	69b8      	ldr	r0, [r7, #24]
 8007736:	f7fe fcb7 	bl	80060a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	490d      	ldr	r1, [pc, #52]	; (8007784 <f_mount+0x88>)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <f_mount+0x66>
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d001      	beq.n	8007766 <f_mount+0x6a>
 8007762:	2300      	movs	r3, #0
 8007764:	e00a      	b.n	800777c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007766:	f107 010c 	add.w	r1, r7, #12
 800776a:	f107 0308 	add.w	r3, r7, #8
 800776e:	2200      	movs	r2, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fd41 	bl	80071f8 <find_volume>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	2000008c 	.word	0x2000008c

08007788 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b098      	sub	sp, #96	; 0x60
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <f_open+0x18>
 800779c:	2309      	movs	r3, #9
 800779e:	e1ad      	b.n	8007afc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80077a8:	79fa      	ldrb	r2, [r7, #7]
 80077aa:	f107 0110 	add.w	r1, r7, #16
 80077ae:	f107 0308 	add.w	r3, r7, #8
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fd20 	bl	80071f8 <find_volume>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80077be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 8191 	bne.w	8007aea <f_open+0x362>
		dj.obj.fs = fs;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	f107 0314 	add.w	r3, r7, #20
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fc03 	bl	8006fe0 <follow_path>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80077e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11a      	bne.n	800781e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80077e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077ec:	b25b      	sxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da03      	bge.n	80077fa <f_open+0x72>
				res = FR_INVALID_NAME;
 80077f2:	2306      	movs	r3, #6
 80077f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077f8:	e011      	b.n	800781e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	461a      	mov	r2, r3
 800780c:	f107 0314 	add.w	r3, r7, #20
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fb00 	bl	8005e18 <chk_lock>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	f003 031c 	and.w	r3, r3, #28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d07f      	beq.n	8007928 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800782c:	2b00      	cmp	r3, #0
 800782e:	d017      	beq.n	8007860 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007834:	2b04      	cmp	r3, #4
 8007836:	d10e      	bne.n	8007856 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007838:	f7fe fb4a 	bl	8005ed0 <enq_lock>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d006      	beq.n	8007850 <f_open+0xc8>
 8007842:	f107 0314 	add.w	r3, r7, #20
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fa86 	bl	8006d58 <dir_register>
 800784c:	4603      	mov	r3, r0
 800784e:	e000      	b.n	8007852 <f_open+0xca>
 8007850:	2312      	movs	r3, #18
 8007852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f043 0308 	orr.w	r3, r3, #8
 800785c:	71fb      	strb	r3, [r7, #7]
 800785e:	e010      	b.n	8007882 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007860:	7ebb      	ldrb	r3, [r7, #26]
 8007862:	f003 0311 	and.w	r3, r3, #17
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <f_open+0xea>
					res = FR_DENIED;
 800786a:	2307      	movs	r3, #7
 800786c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007870:	e007      	b.n	8007882 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <f_open+0xfa>
 800787c:	2308      	movs	r3, #8
 800787e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007886:	2b00      	cmp	r3, #0
 8007888:	d168      	bne.n	800795c <f_open+0x1d4>
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d063      	beq.n	800795c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007894:	f001 fdec 	bl	8009470 <get_fattime>
 8007898:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800789a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789c:	330e      	adds	r3, #14
 800789e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fa0f 	bl	8005cc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80078a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a8:	3316      	adds	r3, #22
 80078aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fa09 	bl	8005cc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80078b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b4:	330b      	adds	r3, #11
 80078b6:	2220      	movs	r2, #32
 80078b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff f958 	bl	8006b76 <ld_clust>
 80078c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078cc:	2200      	movs	r2, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff f970 	bl	8006bb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	331c      	adds	r3, #28
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe f9f2 	bl	8005cc4 <st_dword>
					fs->wflag = 1;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2201      	movs	r2, #1
 80078e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80078e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d037      	beq.n	800795c <f_open+0x1d4>
						dw = fs->winsect;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	2200      	movs	r2, #0
 80078f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fe83 	bl	8006606 <remove_chain>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800790a:	2b00      	cmp	r3, #0
 800790c:	d126      	bne.n	800795c <f_open+0x1d4>
							res = move_window(fs, dw);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fc30 	bl	8006178 <move_window>
 8007918:	4603      	mov	r3, r0
 800791a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007922:	3a01      	subs	r2, #1
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	e019      	b.n	800795c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800792c:	2b00      	cmp	r3, #0
 800792e:	d115      	bne.n	800795c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007930:	7ebb      	ldrb	r3, [r7, #26]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <f_open+0x1ba>
					res = FR_NO_FILE;
 800793a:	2304      	movs	r3, #4
 800793c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007940:	e00c      	b.n	800795c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <f_open+0x1d4>
 800794c:	7ebb      	ldrb	r3, [r7, #26]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <f_open+0x1d4>
						res = FR_DENIED;
 8007956:	2307      	movs	r3, #7
 8007958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800795c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007960:	2b00      	cmp	r3, #0
 8007962:	d128      	bne.n	80079b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007974:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800797e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	bf14      	ite	ne
 800798e:	2301      	movne	r3, #1
 8007990:	2300      	moveq	r3, #0
 8007992:	b2db      	uxtb	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	f107 0314 	add.w	r3, r7, #20
 800799a:	4611      	mov	r1, r2
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fab9 	bl	8005f14 <inc_lock>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <f_open+0x22e>
 80079b0:	2302      	movs	r3, #2
 80079b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80079b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 8095 	bne.w	8007aea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff f8d5 	bl	8006b76 <ld_clust>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	331c      	adds	r3, #28
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe f936 	bl	8005c48 <ld_dword>
 80079dc:	4602      	mov	r2, r0
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	88da      	ldrh	r2, [r3, #6]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	79fa      	ldrb	r2, [r7, #7]
 80079fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a16:	2100      	movs	r1, #0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe f9a0 	bl	8005d5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d060      	beq.n	8007aea <f_open+0x362>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d05c      	beq.n	8007aea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	895b      	ldrh	r3, [r3, #10]
 8007a3c:	025b      	lsls	r3, r3, #9
 8007a3e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a4c:	e016      	b.n	8007a7c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fc4b 	bl	80062ee <get_fat>
 8007a58:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d802      	bhi.n	8007a66 <f_open+0x2de>
 8007a60:	2302      	movs	r3, #2
 8007a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d102      	bne.n	8007a74 <f_open+0x2ec>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <f_open+0x304>
 8007a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d8e0      	bhi.n	8007a4e <f_open+0x2c6>
				}
				fp->clust = clst;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d127      	bne.n	8007aea <f_open+0x362>
 8007a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d022      	beq.n	8007aea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe fc01 	bl	80062b0 <clust2sect>
 8007aae:	6478      	str	r0, [r7, #68]	; 0x44
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <f_open+0x336>
						res = FR_INT_ERR;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007abc:	e015      	b.n	8007aea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac0:	0a5a      	lsrs	r2, r3, #9
 8007ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac4:	441a      	add	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	7858      	ldrb	r0, [r3, #1]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a1a      	ldr	r2, [r3, #32]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f7fe f83f 	bl	8005b5c <disk_read>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <f_open+0x362>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <f_open+0x370>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3760      	adds	r7, #96	; 0x60
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08c      	sub	sp, #48	; 0x30
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f107 0210 	add.w	r2, r7, #16
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff fdb3 	bl	8007690 <validate>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d107      	bne.n	8007b48 <f_write+0x44>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	7d5b      	ldrb	r3, [r3, #21]
 8007b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <f_write+0x4a>
 8007b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b4c:	e14b      	b.n	8007de6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7d1b      	ldrb	r3, [r3, #20]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <f_write+0x5a>
 8007b5a:	2307      	movs	r3, #7
 8007b5c:	e143      	b.n	8007de6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	f080 812d 	bcs.w	8007dca <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	43db      	mvns	r3, r3
 8007b76:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007b78:	e127      	b.n	8007dca <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f040 80e3 	bne.w	8007d4e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	0a5b      	lsrs	r3, r3, #9
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	8952      	ldrh	r2, [r2, #10]
 8007b92:	3a01      	subs	r2, #1
 8007b94:	4013      	ands	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d143      	bne.n	8007c26 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10c      	bne.n	8007bc0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d11a      	bne.n	8007be8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fd8a 	bl	80066d0 <create_chain>
 8007bbc:	62b8      	str	r0, [r7, #40]	; 0x28
 8007bbe:	e013      	b.n	8007be8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7fe fe16 	bl	8006800 <clmt_clust>
 8007bd4:	62b8      	str	r0, [r7, #40]	; 0x28
 8007bd6:	e007      	b.n	8007be8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7fe fd75 	bl	80066d0 <create_chain>
 8007be6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80f2 	beq.w	8007dd4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d104      	bne.n	8007c00 <f_write+0xfc>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	755a      	strb	r2, [r3, #21]
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e0f2      	b.n	8007de6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d104      	bne.n	8007c12 <f_write+0x10e>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	755a      	strb	r2, [r3, #21]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e0e9      	b.n	8007de6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c16:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <f_write+0x122>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c24:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	7d1b      	ldrb	r3, [r3, #20]
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da18      	bge.n	8007c62 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	7858      	ldrb	r0, [r3, #1]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f7fd ffac 	bl	8005b9c <disk_write>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <f_write+0x150>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	755a      	strb	r2, [r3, #21]
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0c8      	b.n	8007de6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	7d1b      	ldrb	r3, [r3, #20]
 8007c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	f7fe fb20 	bl	80062b0 <clust2sect>
 8007c70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <f_write+0x17e>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	755a      	strb	r2, [r3, #21]
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e0b1      	b.n	8007de6 <f_write+0x2e2>
			sect += csect;
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	4413      	add	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	0a5b      	lsrs	r3, r3, #9
 8007c8e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d03c      	beq.n	8007d10 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	8952      	ldrh	r2, [r2, #10]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d905      	bls.n	8007cb0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	895b      	ldrh	r3, [r3, #10]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	7858      	ldrb	r0, [r3, #1]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	69f9      	ldr	r1, [r7, #28]
 8007cba:	f7fd ff6f 	bl	8005b9c <disk_write>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <f_write+0x1ca>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	755a      	strb	r2, [r3, #21]
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e08b      	b.n	8007de6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1a      	ldr	r2, [r3, #32]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	6a3a      	ldr	r2, [r7, #32]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d915      	bls.n	8007d08 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1a      	ldr	r2, [r3, #32]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	025b      	lsls	r3, r3, #9
 8007cec:	69fa      	ldr	r2, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f7fe f811 	bl	8005d1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	7d1b      	ldrb	r3, [r3, #20]
 8007cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	025b      	lsls	r3, r3, #9
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007d0e:	e03f      	b.n	8007d90 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d016      	beq.n	8007d48 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d210      	bcs.n	8007d48 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	7858      	ldrb	r0, [r3, #1]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d30:	2301      	movs	r3, #1
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	f7fd ff12 	bl	8005b5c <disk_read>
 8007d38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	755a      	strb	r2, [r3, #21]
 8007d44:	2301      	movs	r3, #1
 8007d46:	e04e      	b.n	8007de6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d901      	bls.n	8007d68 <f_write+0x264>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d76:	4413      	add	r3, r2
 8007d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7a:	69f9      	ldr	r1, [r7, #28]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fd ffcd 	bl	8005d1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	7d1b      	ldrb	r3, [r3, #20]
 8007d86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	4413      	add	r3, r2
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	441a      	add	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	619a      	str	r2, [r3, #24]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	bf38      	it	cc
 8007db0:	461a      	movcc	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	441a      	add	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f aed4 	bne.w	8007b7a <f_write+0x76>
 8007dd2:	e000      	b.n	8007dd6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007dd4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	7d1b      	ldrb	r3, [r3, #20]
 8007dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b086      	sub	sp, #24
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f107 0208 	add.w	r2, r7, #8
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fc46 	bl	8007690 <validate>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d168      	bne.n	8007ee0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7d1b      	ldrb	r3, [r3, #20]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d062      	beq.n	8007ee0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	7d1b      	ldrb	r3, [r3, #20]
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da15      	bge.n	8007e50 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	7858      	ldrb	r0, [r3, #1]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	2301      	movs	r3, #1
 8007e34:	f7fd feb2 	bl	8005b9c <disk_write>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <f_sync+0x54>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e04f      	b.n	8007ee2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7d1b      	ldrb	r3, [r3, #20]
 8007e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e50:	f001 fb0e 	bl	8009470 <get_fattime>
 8007e54:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe f98a 	bl	8006178 <move_window>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d138      	bne.n	8007ee0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	330b      	adds	r3, #11
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	330b      	adds	r3, #11
 8007e7e:	f042 0220 	orr.w	r2, r2, #32
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	68f9      	ldr	r1, [r7, #12]
 8007e92:	f7fe fe8f 	bl	8006bb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f103 021c 	add.w	r2, r3, #28
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fd ff0e 	bl	8005cc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3316      	adds	r3, #22
 8007eac:	6939      	ldr	r1, [r7, #16]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fd ff08 	bl	8005cc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3312      	adds	r3, #18
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fd fee7 	bl	8005c8e <st_word>
					fs->wflag = 1;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe f983 	bl	80061d4 <sync_fs>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7d1b      	ldrb	r3, [r3, #20]
 8007ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff ff7b 	bl	8007dee <f_sync>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d118      	bne.n	8007f34 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f107 0208 	add.w	r2, r7, #8
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fbc0 	bl	8007690 <validate>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10c      	bne.n	8007f34 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe f886 	bl	8006030 <dec_lock>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d102      	bne.n	8007f34 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b090      	sub	sp, #64	; 0x40
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007f48:	f107 010c 	add.w	r1, r7, #12
 8007f4c:	1d3b      	adds	r3, r7, #4
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff f951 	bl	80071f8 <find_volume>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11f      	bne.n	8007fa4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	f107 030c 	add.w	r3, r7, #12
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff f837 	bl	8006fe0 <follow_path>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d111      	bne.n	8007fa4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007f80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007f84:	b25b      	sxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da03      	bge.n	8007f92 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007f8a:	2306      	movs	r3, #6
 8007f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007f90:	e008      	b.n	8007fa4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <f_stat+0x66>
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe ff2a 	bl	8006df8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3740      	adds	r7, #64	; 0x40
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b09e      	sub	sp, #120	; 0x78
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007fbc:	f107 010c 	add.w	r1, r7, #12
 8007fc0:	1d3b      	adds	r3, r7, #4
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff f917 	bl	80071f8 <find_volume>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8007fd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 808e 	bne.w	80080fa <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fffa 	bl	8006fe0 <follow_path>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007ff2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <f_unlink+0x5c>
 8007ffa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ffe:	2102      	movs	r1, #2
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd ff09 	bl	8005e18 <chk_lock>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800800c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008010:	2b00      	cmp	r3, #0
 8008012:	d172      	bne.n	80080fa <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008014:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008018:	b25b      	sxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	da03      	bge.n	8008026 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800801e:	2306      	movs	r3, #6
 8008020:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008024:	e008      	b.n	8008038 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008026:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008032:	2307      	movs	r3, #7
 8008034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008038:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800803c:	2b00      	cmp	r3, #0
 800803e:	d134      	bne.n	80080aa <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fd95 	bl	8006b76 <ld_clust>
 800804c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800804e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	d027      	beq.n	80080aa <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800805e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008060:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008062:	f107 0310 	add.w	r3, r7, #16
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fbfd 	bl	8006868 <dir_sdi>
 800806e:	4603      	mov	r3, r0
 8008070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008074:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008078:	2b00      	cmp	r3, #0
 800807a:	d116      	bne.n	80080aa <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800807c:	f107 0310 	add.w	r3, r7, #16
 8008080:	2100      	movs	r1, #0
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fdb6 	bl	8006bf4 <dir_read>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800808e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <f_unlink+0xec>
 8008096:	2307      	movs	r3, #7
 8008098:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800809c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d102      	bne.n	80080aa <f_unlink+0xfa>
 80080a4:	2300      	movs	r3, #0
 80080a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80080aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d123      	bne.n	80080fa <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80080b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fe80 	bl	8006dbc <dir_remove>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80080c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10c      	bne.n	80080e4 <f_unlink+0x134>
 80080ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d009      	beq.n	80080e4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80080d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080d4:	2200      	movs	r2, #0
 80080d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fa94 	bl	8006606 <remove_chain>
 80080de:	4603      	mov	r3, r0
 80080e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80080e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <f_unlink+0x14a>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe f870 	bl	80061d4 <sync_fs>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80080fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3778      	adds	r7, #120	; 0x78
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b096      	sub	sp, #88	; 0x58
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800810e:	f107 0108 	add.w	r1, r7, #8
 8008112:	1d3b      	adds	r3, r7, #4
 8008114:	2202      	movs	r2, #2
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff f86e 	bl	80071f8 <find_volume>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 80ec 	bne.w	8008308 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	f107 030c 	add.w	r3, r7, #12
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe ff51 	bl	8006fe0 <follow_path>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8008144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <f_mkdir+0x4c>
 800814c:	2308      	movs	r3, #8
 800814e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8008152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008156:	2b04      	cmp	r3, #4
 8008158:	f040 80d6 	bne.w	8008308 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fab4 	bl	80066d0 <create_chain>
 8008168:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	895b      	ldrh	r3, [r3, #10]
 800816e:	025b      	lsls	r3, r3, #9
 8008170:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <f_mkdir+0x7e>
 800817e:	2307      	movs	r3, #7
 8008180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8008184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008186:	2b01      	cmp	r3, #1
 8008188:	d102      	bne.n	8008190 <f_mkdir+0x8a>
 800818a:	2302      	movs	r3, #2
 800818c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008196:	d102      	bne.n	800819e <f_mkdir+0x98>
 8008198:	2301      	movs	r3, #1
 800819a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800819e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <f_mkdir+0xae>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fd ffa1 	bl	80060f0 <sync_window>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80081b4:	f001 f95c 	bl	8009470 <get_fattime>
 80081b8:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80081ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d16a      	bne.n	8008298 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe f872 	bl	80062b0 <clust2sect>
 80081cc:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	3330      	adds	r3, #48	; 0x30
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80081d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d8:	2100      	movs	r1, #0
 80081da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081dc:	f7fd fdbf 	bl	8005d5e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80081e0:	220b      	movs	r2, #11
 80081e2:	2120      	movs	r1, #32
 80081e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081e6:	f7fd fdba 	bl	8005d5e <mem_set>
					dir[DIR_Name] = '.';
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	222e      	movs	r2, #46	; 0x2e
 80081ee:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80081f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f2:	330b      	adds	r3, #11
 80081f4:	2210      	movs	r2, #16
 80081f6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	3316      	adds	r3, #22
 80081fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd fd60 	bl	8005cc4 <st_dword>
					st_clust(fs, dir, dcl);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fcd2 	bl	8006bb4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8008210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008212:	3320      	adds	r3, #32
 8008214:	2220      	movs	r2, #32
 8008216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008218:	4618      	mov	r0, r3
 800821a:	f7fd fd7f 	bl	8005d1c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008220:	3321      	adds	r3, #33	; 0x21
 8008222:	222e      	movs	r2, #46	; 0x2e
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d106      	bne.n	8008240 <f_mkdir+0x13a>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008238:	429a      	cmp	r2, r3
 800823a:	d101      	bne.n	8008240 <f_mkdir+0x13a>
 800823c:	2300      	movs	r3, #0
 800823e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8008240:	68b8      	ldr	r0, [r7, #8]
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	3320      	adds	r3, #32
 8008246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008248:	4619      	mov	r1, r3
 800824a:	f7fe fcb3 	bl	8006bb4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	895b      	ldrh	r3, [r3, #10]
 8008252:	653b      	str	r3, [r7, #80]	; 0x50
 8008254:	e01b      	b.n	800828e <f_mkdir+0x188>
					fs->winsect = dsc++;
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2201      	movs	r2, #1
 8008264:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd ff41 	bl	80060f0 <sync_window>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8008274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10c      	bne.n	8008296 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800827c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008280:	2100      	movs	r1, #0
 8008282:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008284:	f7fd fd6b 	bl	8005d5e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	3b01      	subs	r3, #1
 800828c:	653b      	str	r3, [r7, #80]	; 0x50
 800828e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e0      	bne.n	8008256 <f_mkdir+0x150>
 8008294:	e000      	b.n	8008298 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8008296:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8008298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80082a0:	f107 030c 	add.w	r3, r7, #12
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fd57 	bl	8006d58 <dir_register>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80082b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d120      	bne.n	80082fa <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80082bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082be:	3316      	adds	r3, #22
 80082c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fd fcfe 	bl	8005cc4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fc70 	bl	8006bb4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d6:	330b      	adds	r3, #11
 80082d8:	2210      	movs	r2, #16
 80082da:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2201      	movs	r2, #1
 80082e0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80082e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10e      	bne.n	8008308 <f_mkdir+0x202>
					res = sync_fs(fs);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd ff71 	bl	80061d4 <sync_fs>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80082f8:	e006      	b.n	8008308 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80082fa:	f107 030c 	add.w	r3, r7, #12
 80082fe:	2200      	movs	r2, #0
 8008300:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe f97f 	bl	8006606 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800830c:	4618      	mov	r0, r3
 800830e:	3758      	adds	r7, #88	; 0x58
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	2b0a      	cmp	r3, #10
 8008324:	d103      	bne.n	800832e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008326:	210d      	movs	r1, #13
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff fff3 	bl	8008314 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	db25      	blt.n	8008386 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	60fa      	str	r2, [r7, #12]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4413      	add	r3, r2
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b3c      	cmp	r3, #60	; 0x3c
 800834c:	dd12      	ble.n	8008374 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f103 010c 	add.w	r1, r3, #12
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	f7ff fbd1 	bl	8007b04 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	429a      	cmp	r2, r3
 8008368:	d101      	bne.n	800836e <putc_bfd+0x5a>
 800836a:	2300      	movs	r3, #0
 800836c:	e001      	b.n	8008372 <putc_bfd+0x5e>
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
 8008372:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]
 8008384:	e000      	b.n	8008388 <putc_bfd+0x74>
	if (i < 0) return;
 8008386:	bf00      	nop
}
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db17      	blt.n	80083ce <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f103 010c 	add.w	r1, r3, #12
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	461a      	mov	r2, r3
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	f7ff fba7 	bl	8007b04 <f_write>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d108      	bne.n	80083ce <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	461a      	mov	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d102      	bne.n	80083ce <putc_flush+0x40>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	e001      	b.n	80083d2 <putc_flush+0x44>
	return EOF;
 80083ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	605a      	str	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	609a      	str	r2, [r3, #8]
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008404:	b40e      	push	{r1, r2, r3}
 8008406:	b580      	push	{r7, lr}
 8008408:	b0a7      	sub	sp, #156	; 0x9c
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800840e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff ffe0 	bl	80083da <putc_init>

	va_start(arp, fmt);
 800841a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800841e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008420:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008430:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 81f4 	beq.w	8008822 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800843a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800843e:	2b25      	cmp	r3, #37	; 0x25
 8008440:	d008      	beq.n	8008454 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008442:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff ff61 	bl	8008314 <putc_bfd>
			continue;
 8008452:	e1e5      	b.n	8008820 <f_printf+0x41c>
		}
		w = f = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800845a:	2300      	movs	r3, #0
 800845c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8008460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008470:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008474:	2b30      	cmp	r3, #48	; 0x30
 8008476:	d10b      	bne.n	8008490 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800847e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800848e:	e024      	b.n	80084da <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008490:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008494:	2b2d      	cmp	r3, #45	; 0x2d
 8008496:	d120      	bne.n	80084da <f_printf+0xd6>
				f = 2; c = *fmt++;
 8008498:	2302      	movs	r3, #2
 800849a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800849e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80084ae:	e014      	b.n	80084da <f_printf+0xd6>
			w = w * 10 + c - '0';
 80084b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	461a      	mov	r2, r3
 80084be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084c2:	4413      	add	r3, r2
 80084c4:	3b30      	subs	r3, #48	; 0x30
 80084c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80084ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80084da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084de:	2b2f      	cmp	r3, #47	; 0x2f
 80084e0:	d903      	bls.n	80084ea <f_printf+0xe6>
 80084e2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084e6:	2b39      	cmp	r3, #57	; 0x39
 80084e8:	d9e2      	bls.n	80084b0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80084ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084ee:	2b6c      	cmp	r3, #108	; 0x6c
 80084f0:	d003      	beq.n	80084fa <f_printf+0xf6>
 80084f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80084f6:	2b4c      	cmp	r3, #76	; 0x4c
 80084f8:	d10d      	bne.n	8008516 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80084fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084fe:	f043 0304 	orr.w	r3, r3, #4
 8008502:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008516:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8183 	beq.w	8008826 <f_printf+0x422>
		d = c;
 8008520:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008524:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008528:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800852c:	2b60      	cmp	r3, #96	; 0x60
 800852e:	d908      	bls.n	8008542 <f_printf+0x13e>
 8008530:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008534:	2b7a      	cmp	r3, #122	; 0x7a
 8008536:	d804      	bhi.n	8008542 <f_printf+0x13e>
 8008538:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800853c:	3b20      	subs	r3, #32
 800853e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8008542:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008546:	3b42      	subs	r3, #66	; 0x42
 8008548:	2b16      	cmp	r3, #22
 800854a:	f200 8098 	bhi.w	800867e <f_printf+0x27a>
 800854e:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <f_printf+0x150>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	0800865f 	.word	0x0800865f
 8008558:	08008647 	.word	0x08008647
 800855c:	0800866f 	.word	0x0800866f
 8008560:	0800867f 	.word	0x0800867f
 8008564:	0800867f 	.word	0x0800867f
 8008568:	0800867f 	.word	0x0800867f
 800856c:	0800867f 	.word	0x0800867f
 8008570:	0800867f 	.word	0x0800867f
 8008574:	0800867f 	.word	0x0800867f
 8008578:	0800867f 	.word	0x0800867f
 800857c:	0800867f 	.word	0x0800867f
 8008580:	0800867f 	.word	0x0800867f
 8008584:	0800867f 	.word	0x0800867f
 8008588:	08008667 	.word	0x08008667
 800858c:	0800867f 	.word	0x0800867f
 8008590:	0800867f 	.word	0x0800867f
 8008594:	0800867f 	.word	0x0800867f
 8008598:	080085b1 	.word	0x080085b1
 800859c:	0800867f 	.word	0x0800867f
 80085a0:	0800866f 	.word	0x0800866f
 80085a4:	0800867f 	.word	0x0800867f
 80085a8:	0800867f 	.word	0x0800867f
 80085ac:	08008677 	.word	0x08008677
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80085b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b2:	1d1a      	adds	r2, r3, #4
 80085b4:	67ba      	str	r2, [r7, #120]	; 0x78
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085c0:	e004      	b.n	80085cc <f_printf+0x1c8>
 80085c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c6:	3301      	adds	r3, #1
 80085c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80085ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085d2:	4413      	add	r3, r2
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f3      	bne.n	80085c2 <f_printf+0x1be>
			if (!(f & 2)) {
 80085da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d11a      	bne.n	800861c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80085e6:	e005      	b.n	80085f4 <f_printf+0x1f0>
 80085e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085ec:	2120      	movs	r1, #32
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fe90 	bl	8008314 <putc_bfd>
 80085f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008602:	429a      	cmp	r2, r3
 8008604:	d8f0      	bhi.n	80085e8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008606:	e009      	b.n	800861c <f_printf+0x218>
 8008608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800860e:	781a      	ldrb	r2, [r3, #0]
 8008610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fe7c 	bl	8008314 <putc_bfd>
 800861c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f1      	bne.n	8008608 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008624:	e005      	b.n	8008632 <f_printf+0x22e>
 8008626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800862a:	2120      	movs	r1, #32
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fe71 	bl	8008314 <putc_bfd>
 8008632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800863c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008640:	429a      	cmp	r2, r3
 8008642:	d8f0      	bhi.n	8008626 <f_printf+0x222>
			continue;
 8008644:	e0ec      	b.n	8008820 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008648:	1d1a      	adds	r2, r3, #4
 800864a:	67ba      	str	r2, [r7, #120]	; 0x78
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	b2da      	uxtb	r2, r3
 8008650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fe5c 	bl	8008314 <putc_bfd>
 800865c:	e0e0      	b.n	8008820 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800865e:	2302      	movs	r3, #2
 8008660:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008664:	e014      	b.n	8008690 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008666:	2308      	movs	r3, #8
 8008668:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800866c:	e010      	b.n	8008690 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800866e:	230a      	movs	r3, #10
 8008670:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008674:	e00c      	b.n	8008690 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8008676:	2310      	movs	r3, #16
 8008678:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800867c:	e008      	b.n	8008690 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800867e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fe43 	bl	8008314 <putc_bfd>
 800868e:	e0c7      	b.n	8008820 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008690:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <f_printf+0x2a2>
 800869c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	67ba      	str	r2, [r7, #120]	; 0x78
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	e00c      	b.n	80086c0 <f_printf+0x2bc>
 80086a6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80086aa:	2b44      	cmp	r3, #68	; 0x44
 80086ac:	d104      	bne.n	80086b8 <f_printf+0x2b4>
 80086ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	e003      	b.n	80086c0 <f_printf+0x2bc>
 80086b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	67ba      	str	r2, [r7, #120]	; 0x78
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80086c4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80086c8:	2b44      	cmp	r3, #68	; 0x44
 80086ca:	d10e      	bne.n	80086ea <f_printf+0x2e6>
 80086cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da0a      	bge.n	80086ea <f_printf+0x2e6>
			v = 0 - v;
 80086d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d8:	425b      	negs	r3, r3
 80086da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80086de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80086e2:	f043 0308 	orr.w	r3, r3, #8
 80086e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80086f0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80086f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086fc:	fb02 f201 	mul.w	r2, r2, r1
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008706:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800870a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800870e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008716:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800871a:	2b09      	cmp	r3, #9
 800871c:	d90b      	bls.n	8008736 <f_printf+0x332>
 800871e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008722:	2b78      	cmp	r3, #120	; 0x78
 8008724:	d101      	bne.n	800872a <f_printf+0x326>
 8008726:	2227      	movs	r2, #39	; 0x27
 8008728:	e000      	b.n	800872c <f_printf+0x328>
 800872a:	2207      	movs	r2, #7
 800872c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008730:	4413      	add	r3, r2
 8008732:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008740:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008744:	3230      	adds	r2, #48	; 0x30
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800874c:	440b      	add	r3, r1
 800874e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8008752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <f_printf+0x35e>
 800875a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800875e:	2b1f      	cmp	r3, #31
 8008760:	d9c6      	bls.n	80086f0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008762:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <f_printf+0x380>
 800876e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008778:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800877c:	4413      	add	r3, r2
 800877e:	222d      	movs	r2, #45	; 0x2d
 8008780:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8008784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800878c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <f_printf+0x398>
 8008798:	2330      	movs	r3, #48	; 0x30
 800879a:	e000      	b.n	800879e <f_printf+0x39a>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80087a2:	e007      	b.n	80087b4 <f_printf+0x3b0>
 80087a4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80087a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff fdb0 	bl	8008314 <putc_bfd>
 80087b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d108      	bne.n	80087d2 <f_printf+0x3ce>
 80087c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d8e8      	bhi.n	80087a4 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 80087d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087d6:	3b01      	subs	r3, #1
 80087d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087dc:	f107 020c 	add.w	r2, r7, #12
 80087e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087e4:	4413      	add	r3, r2
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fd90 	bl	8008314 <putc_bfd>
		} while (i);
 80087f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1ea      	bne.n	80087d2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80087fc:	e007      	b.n	800880e <f_printf+0x40a>
 80087fe:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fd83 	bl	8008314 <putc_bfd>
 800880e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008818:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800881c:	429a      	cmp	r2, r3
 800881e:	d8ee      	bhi.n	80087fe <f_printf+0x3fa>
		c = *fmt++;
 8008820:	e5fe      	b.n	8008420 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <f_printf+0x424>
		if (!c) break;
 8008826:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff fdae 	bl	800838e <putc_flush>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	379c      	adds	r7, #156	; 0x9c
 8008838:	46bd      	mov	sp, r7
 800883a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800883e:	b003      	add	sp, #12
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop

08008844 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008852:	2301      	movs	r3, #1
 8008854:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800885a:	4b1f      	ldr	r3, [pc, #124]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 800885c:	7a5b      	ldrb	r3, [r3, #9]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d131      	bne.n	80088c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008864:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 8008866:	7a5b      	ldrb	r3, [r3, #9]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	4b1a      	ldr	r3, [pc, #104]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 800886e:	2100      	movs	r1, #0
 8008870:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008872:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 8008874:	7a5b      	ldrb	r3, [r3, #9]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 8008884:	7a5b      	ldrb	r3, [r3, #9]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 800888c:	4413      	add	r3, r2
 800888e:	79fa      	ldrb	r2, [r7, #7]
 8008890:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008892:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 8008894:	7a5b      	ldrb	r3, [r3, #9]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	b2d1      	uxtb	r1, r2
 800889c:	4a0e      	ldr	r2, [pc, #56]	; (80088d8 <FATFS_LinkDriverEx+0x94>)
 800889e:	7251      	strb	r1, [r2, #9]
 80088a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80088a2:	7dbb      	ldrb	r3, [r7, #22]
 80088a4:	3330      	adds	r3, #48	; 0x30
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3301      	adds	r3, #1
 80088b0:	223a      	movs	r2, #58	; 0x3a
 80088b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	3302      	adds	r3, #2
 80088b8:	222f      	movs	r2, #47	; 0x2f
 80088ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	3303      	adds	r3, #3
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	200000b4 	.word	0x200000b4

080088dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80088e6:	2200      	movs	r2, #0
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ffaa 	bl	8008844 <FATFS_LinkDriverEx>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>:
 */

#include <DWTWrapper.h>
#include "LTC6811.h"

LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 80088fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t md_bits = (mode & 0x02) >> 1;
 8008900:	f3c2 0640 	ubfx	r6, r2, #1, #1
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008904:	f89d 4020 	ldrb.w	r4, [sp, #32]
        uint16_t PEC{ 16 }, addr{ 0 };
        auto serialized = reinterpret_cast<uint8_t const *>(data.data());

        for (uint8_t i = 0; i < size; ++i) {
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
            PEC = PEC << 8 ^ crc15Table[addr];
 8008908:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8008a78 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x17c>
 800890c:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
    uint16_t PEC{ 0 };

    ADCV[0]   = 0x02 | md_bits;
    ADAX[0]   = 0x04 | md_bits;
 8008910:	f046 0704 	orr.w	r7, r6, #4
    ADCV[0]   = 0x02 | md_bits;
 8008914:	f046 0602 	orr.w	r6, r6, #2
    ADSTAT[0] = 0x04 | md_bits;

    md_bits   = (mode & 0x01) << 7;
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008918:	f044 0460 	orr.w	r4, r4, #96	; 0x60
    md_bits   = (mode & 0x01) << 7;
 800891c:	01d2      	lsls	r2, r2, #7
 800891e:	b2d2      	uxtb	r2, r2
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008920:	ea44 1503 	orr.w	r5, r4, r3, lsl #4
 8008924:	f83c 8016 	ldrh.w	r8, [ip, r6, lsl #1]
 8008928:	f83c 3017 	ldrh.w	r3, [ip, r7, lsl #1]
 800892c:	4315      	orrs	r5, r2
    ADAX[1]   = md_bits | 0x60 | aux;
 800892e:	f04e 0460 	orr.w	r4, lr, #96	; 0x60
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008932:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008936:	b2ed      	uxtb	r5, r5
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008938:	f488 5880 	eor.w	r8, r8, #4096	; 0x1000
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 800893c:	4681      	mov	r9, r0
 800893e:	ea85 1ad8 	eor.w	sl, r5, r8, lsr #7
 8008942:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
    ADSTAT[1] = md_bits | 0x68 | sts;
 8008946:	f04e 0e68 	orr.w	lr, lr, #104	; 0x68
    ADAX[1]   = md_bits | 0x60 | aux;
 800894a:	4314      	orrs	r4, r2
            PEC = PEC << 8 ^ crc15Table[addr];
 800894c:	fa5f fa8a 	uxtb.w	sl, sl
    ADSTAT[1] = md_bits | 0x68 | sts;
 8008950:	ea42 020e 	orr.w	r2, r2, lr
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008954:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008958:	f8c9 1000 	str.w	r1, [r9]
 800895c:	ea8e 0104 	eor.w	r1, lr, r4
 8008960:	ea8e 0e02 	eor.w	lr, lr, r2
            PEC = PEC << 8 ^ crc15Table[addr];
 8008964:	f83c 001a 	ldrh.w	r0, [ip, sl, lsl #1]
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008968:	f889 5367 	strb.w	r5, [r9, #871]	; 0x367
 800896c:	b2c9      	uxtb	r1, r1
 800896e:	fa5f fe8e 	uxtb.w	lr, lr
 8008972:	ea80 2008 	eor.w	r0, r0, r8, lsl #8
 8008976:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
 800897a:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
    ADAX[1]   = md_bits | 0x60 | aux;
 800897e:	f889 436b 	strb.w	r4, [r9, #875]	; 0x36b
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	b21b      	sxth	r3, r3
LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008986:	2500      	movs	r5, #0
        }

        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008988:	0040      	lsls	r0, r0, #1
 800898a:	f889 5004 	strb.w	r5, [r9, #4]
            PEC = PEC << 8 ^ crc15Table[addr];
 800898e:	4059      	eors	r1, r3
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008990:	b280      	uxth	r0, r0
public:
    DWTWrapper(DWTWrapper const&)       = delete;
    void operator=(DWTWrapper const&)   = delete;

    [[nodiscard]] static DWTWrapper& getInstance() noexcept {
        static DWTWrapper dwtWrapper;
 8008992:	4d35      	ldr	r5, [pc, #212]	; (8008a68 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x16c>)

    PEC = PEC15Calc(ADCV, 2);
    ADCV[2] = static_cast<uint8_t>(PEC >> 8);
    ADCV[3] = static_cast<uint8_t>(PEC);
 8008994:	f889 0369 	strb.w	r0, [r9, #873]	; 0x369
            PEC = PEC << 8 ^ crc15Table[addr];
 8008998:	ea83 030c 	eor.w	r3, r3, ip
    ADCV[2] = static_cast<uint8_t>(PEC >> 8);
 800899c:	1200      	asrs	r0, r0, #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800899e:	0049      	lsls	r1, r1, #1
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	f889 0368 	strb.w	r0, [r9, #872]	; 0x368
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	6828      	ldr	r0, [r5, #0]
    ADSTAT[1] = md_bits | 0x68 | sts;
 80089aa:	f889 236f 	strb.w	r2, [r9, #879]	; 0x36f
 80089ae:	b289      	uxth	r1, r1

    PEC = PEC15Calc(ADAX, 2);
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
    ADAX[3] = static_cast<uint8_t>(PEC);
 80089b0:	f889 136d 	strb.w	r1, [r9, #877]	; 0x36d
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
 80089b4:	120c      	asrs	r4, r1, #8

    PEC = PEC15Calc(ADSTAT, 2);
    ADSTAT[2] = static_cast<uint8_t>(PEC >> 8);
 80089b6:	1219      	asrs	r1, r3, #8
 80089b8:	f889 1370 	strb.w	r1, [r9, #880]	; 0x370

        return dwtWrapper;
    }

    void init() const noexcept {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80089bc:	4a2b      	ldr	r2, [pc, #172]	; (8008a6c <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x170>)
    ADCV[0]   = 0x02 | md_bits;
 80089be:	f889 6366 	strb.w	r6, [r9, #870]	; 0x366
        static DWTWrapper dwtWrapper;
 80089c2:	07c1      	lsls	r1, r0, #31
    ADAX[0]   = 0x04 | md_bits;
 80089c4:	f889 736a 	strb.w	r7, [r9, #874]	; 0x36a
    ADSTAT[0] = 0x04 | md_bits;
 80089c8:	f889 736e 	strb.w	r7, [r9, #878]	; 0x36e
    ADAX[2] = static_cast<uint8_t>(PEC >> 8);
 80089cc:	f889 436c 	strb.w	r4, [r9, #876]	; 0x36c
    ADSTAT[3] = static_cast<uint8_t>(PEC);
 80089d0:	f889 3371 	strb.w	r3, [r9, #881]	; 0x371
 80089d4:	bf5c      	itt	pl
 80089d6:	2301      	movpl	r3, #1
 80089d8:	602b      	strpl	r3, [r5, #0]
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80089da:	68d3      	ldr	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80089dc:	4c24      	ldr	r4, [pc, #144]	; (8008a70 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x174>)
 80089de:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8008a7c <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x180>

void LTC6811::WakeFromSleep() const noexcept {
    static constexpr uint16_t kMaxWakeTime{ 400 }; // Time in us

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80089e2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008a80 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x184>
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    }

    void delay(uint32_t const microseconds) const noexcept {
        uint32_t startTicks = getTicks();
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 80089e6:	4f23      	ldr	r7, [pc, #140]	; (8008a74 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x178>)
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80089e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089ec:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	6063      	str	r3, [r4, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	260c      	movs	r6, #12
 80089fc:	2200      	movs	r2, #0
 80089fe:	2120      	movs	r1, #32
 8008a00:	4640      	mov	r0, r8
 8008a02:	f7f8 fea3 	bl	800174c <HAL_GPIO_WritePin>
        static DWTWrapper dwtWrapper;
 8008a06:	682b      	ldr	r3, [r5, #0]
        // Not sure why you would want to do this, but why not?
        DWT->CYCCNT = ticks;
    }

    [[nodiscard]] uint32_t getTicks() const noexcept {
        return DWT->CYCCNT;
 8008a08:	6861      	ldr	r1, [r4, #4]
        static DWTWrapper dwtWrapper;
 8008a0a:	07da      	lsls	r2, r3, #31
 8008a0c:	bf5c      	itt	pl
 8008a0e:	2301      	movpl	r3, #1
 8008a10:	602b      	strpl	r3, [r5, #0]
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008a12:	f8da 3000 	ldr.w	r3, [sl]
 8008a16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a1a:	fb02 f203 	mul.w	r2, r2, r3
 8008a1e:	fba7 3202 	umull	r3, r2, r7, r2
 8008a22:	0c92      	lsrs	r2, r2, #18
        while (DWT->CYCCNT - startTicks < delayTicks);
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	1a5b      	subs	r3, r3, r1
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d8fb      	bhi.n	8008a24 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x128>
        DWTWrapper::getInstance().delay(kMaxWakeTime); // Guarantees the LTC6811 will be in standby
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	2120      	movs	r1, #32
 8008a30:	4640      	mov	r0, r8
 8008a32:	f7f8 fe8b 	bl	800174c <HAL_GPIO_WritePin>
        static DWTWrapper dwtWrapper;
 8008a36:	682b      	ldr	r3, [r5, #0]
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008a38:	f8da 2000 	ldr.w	r2, [sl]
        return DWT->CYCCNT;
 8008a3c:	6861      	ldr	r1, [r4, #4]
        static DWTWrapper dwtWrapper;
 8008a3e:	07db      	lsls	r3, r3, #31
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008a40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        static DWTWrapper dwtWrapper;
 8008a44:	bf58      	it	pl
 8008a46:	2301      	movpl	r3, #1
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008a48:	ea4f 0242 	mov.w	r2, r2, lsl #1
        static DWTWrapper dwtWrapper;
 8008a4c:	bf58      	it	pl
 8008a4e:	602b      	strpl	r3, [r5, #0]
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008a50:	fba7 3202 	umull	r3, r2, r7, r2
 8008a54:	0c92      	lsrs	r2, r2, #18
        while (DWT->CYCCNT - startTicks < delayTicks);
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	1a5b      	subs	r3, r3, r1
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d8fb      	bhi.n	8008a56 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x15a>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8008a5e:	3e01      	subs	r6, #1
 8008a60:	d1cc      	bne.n	80089fc <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE+0x100>
}
 8008a62:	4648      	mov	r0, r9
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	200000c0 	.word	0x200000c0
 8008a6c:	e000edf0 	.word	0xe000edf0
 8008a70:	e0001000 	.word	0xe0001000
 8008a74:	431bde83 	.word	0x431bde83
 8008a78:	0800b55c 	.word	0x0800b55c
 8008a7c:	20000008 	.word	0x20000008
 8008a80:	40020000 	.word	0x40020000

08008a84 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE>:

    return readRegisterGroup(kCommand, slave_cfg_rx);
}

/* Write to the configuration register group of an LTC6811 daisy chain. */
bool LTC6811::writeConfigRegisterGroup(RegisterGroup<uint8_t> const& cfg_register_group) noexcept {
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008a86:	4e67      	ldr	r6, [pc, #412]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
bool LTC6811::writeConfigRegisterGroup(RegisterGroup<uint8_t> const& cfg_register_group) noexcept {
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460f      	mov	r7, r1
 8008a8c:	240c      	movs	r4, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2120      	movs	r1, #32
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7f8 fe5a 	bl	800174c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4962      	ldr	r1, [pc, #392]	; (8008c28 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a4>)
 8008aa0:	6828      	ldr	r0, [r5, #0]
 8008aa2:	f7fb f81f 	bl	8003ae4 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	2120      	movs	r1, #32
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7f8 fe4e 	bl	800174c <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	d1ec      	bne.n	8008a8e <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0xa>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	2120      	movs	r1, #32
 8008ab8:	485a      	ldr	r0, [pc, #360]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008aba:	f7f8 fe47 	bl	800174c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK &&
 8008abe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	4959      	ldr	r1, [pc, #356]	; (8008c2c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a8>)
 8008ac6:	6828      	ldr	r0, [r5, #0]
 8008ac8:	f7fb f80c 	bl	8003ae4 <HAL_SPI_Transmit>
 8008acc:	b938      	cbnz	r0, 8008ade <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x5a>
                HAL_SPI_Transmit(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8008ace:	4639      	mov	r1, r7
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad4:	2260      	movs	r2, #96	; 0x60
 8008ad6:	6828      	ldr	r0, [r5, #0]
 8008ad8:	f7fb f804 	bl	8003ae4 <HAL_SPI_Transmit>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK &&
 8008adc:	b130      	cbz	r0, 8008aec <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x68>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008ade:	2201      	movs	r2, #1
 8008ae0:	2120      	movs	r1, #32
 8008ae2:	4850      	ldr	r0, [pc, #320]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008ae4:	f7f8 fe32 	bl	800174c <HAL_GPIO_WritePin>
        /* Funky place to do this, but fixing this would require substantially reworking the whole class.
         * The purpose is to read back the config register after writing to it to check that it was written to properly, apparently. */
        readConfigRegisterGroup();
        return Success;
    } else {
        return Fail;
 8008ae8:	2001      	movs	r0, #1
    }
}
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008aec:	2201      	movs	r2, #1
 8008aee:	2120      	movs	r1, #32
 8008af0:	484c      	ldr	r0, [pc, #304]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008af2:	f7f8 fe2b 	bl	800174c <HAL_GPIO_WritePin>
        static DWTWrapper dwtWrapper;
 8008af6:	4b4e      	ldr	r3, [pc, #312]	; (8008c30 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1ac>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	07d2      	lsls	r2, r2, #31
 8008afc:	f140 808f 	bpl.w	8008c1e <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x19a>
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008b00:	4a4c      	ldr	r2, [pc, #304]	; (8008c34 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b0>)
 8008b02:	4b4d      	ldr	r3, [pc, #308]	; (8008c38 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b4>)
 8008b04:	6810      	ldr	r0, [r2, #0]
        return DWT->CYCCNT;
 8008b06:	494d      	ldr	r1, [pc, #308]	; (8008c3c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1b8>)
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008b08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008b0c:	fb02 f200 	mul.w	r2, r2, r0
 8008b10:	fba3 3202 	umull	r3, r2, r3, r2
        return DWT->CYCCNT;
 8008b14:	6848      	ldr	r0, [r1, #4]
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008b16:	0c92      	lsrs	r2, r2, #18
        while (DWT->CYCCNT - startTicks < delayTicks);
 8008b18:	684b      	ldr	r3, [r1, #4]
 8008b1a:	1a1b      	subs	r3, r3, r0
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d8fb      	bhi.n	8008b18 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x94>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008b20:	4e40      	ldr	r6, [pc, #256]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008b22:	240c      	movs	r4, #12
 8008b24:	2200      	movs	r2, #0
 8008b26:	2120      	movs	r1, #32
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7f8 fe0f 	bl	800174c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	2201      	movs	r2, #1
 8008b34:	493c      	ldr	r1, [pc, #240]	; (8008c28 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a4>)
 8008b36:	6828      	ldr	r0, [r5, #0]
 8008b38:	f7fa ffd4 	bl	8003ae4 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	2120      	movs	r1, #32
 8008b40:	4630      	mov	r0, r6
 8008b42:	f7f8 fe03 	bl	800174c <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8008b46:	3c01      	subs	r4, #1
 8008b48:	d1ec      	bne.n	8008b24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0xa0>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	2120      	movs	r1, #32
 8008b4e:	4835      	ldr	r0, [pc, #212]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008b50:	f7f8 fdfc 	bl	800174c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8008b54:	2204      	movs	r2, #4
 8008b56:	493a      	ldr	r1, [pc, #232]	; (8008c40 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1bc>)
 8008b58:	6828      	ldr	r0, [r5, #0]
 8008b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5e:	f7fa ffc1 	bl	8003ae4 <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008b62:	2201      	movs	r2, #1
 8008b64:	2120      	movs	r1, #32
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d154      	bne.n	8008c14 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x190>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008b6a:	482e      	ldr	r0, [pc, #184]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008b6c:	f7f8 fdee 	bl	800174c <HAL_GPIO_WritePin>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8008b70:	f04f 33ff 	mov.w	r3, #4294967295
 8008b74:	2260      	movs	r2, #96	; 0x60
 8008b76:	1da9      	adds	r1, r5, #6
 8008b78:	6828      	ldr	r0, [r5, #0]
 8008b7a:	f7fb f8e7 	bl	8003d4c <HAL_SPI_Receive>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d146      	bne.n	8008c10 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x18c>
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
      { return iterator(data() + _Nm); }
 8008b82:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8008b86:	492f      	ldr	r1, [pc, #188]	; (8008c44 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1c0>)
 8008b88:	350e      	adds	r5, #14
 8008b8a:	e002      	b.n	8008b92 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x10e>
                for (auto& IC : register_group)
 8008b8c:	42a8      	cmp	r0, r5
 8008b8e:	d03f      	beq.n	8008c10 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x18c>
 8008b90:	4625      	mov	r5, r4
            PEC = PEC << 8 ^ crc15Table[addr];
 8008b92:	f815 3c08 	ldrb.w	r3, [r5, #-8]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008b96:	f815 6c07 	ldrb.w	r6, [r5, #-7]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008b9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008b9e:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 8008ba2:	f483 5780 	eor.w	r7, r3, #4096	; 0x1000
 8008ba6:	ea86 16d7 	eor.w	r6, r6, r7, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008baa:	b2f6      	uxtb	r6, r6
 8008bac:	f105 0408 	add.w	r4, r5, #8
 8008bb0:	f831 3016 	ldrh.w	r3, [r1, r6, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008bb4:	f815 6c05 	ldrb.w	r6, [r5, #-5]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008bb8:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008bc8:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008bcc:	b293      	uxth	r3, r2
 8008bce:	ea86 12d3 	eor.w	r2, r6, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008bd2:	b2d2      	uxtb	r2, r2
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008bd4:	f815 6c03 	ldrb.w	r6, [r5, #-3]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008bd8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008bdc:	ea82 2203 	eor.w	r2, r2, r3, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008be0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8008be4:	b292      	uxth	r2, r2
 8008be6:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008bf0:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	ea86 13d2 	eor.w	r3, r6, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008c00:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008c04:	005b      	lsls	r3, r3, #1
                    if (IC.PEC != PEC15Calc(IC.data))
 8008c06:	f835 2c02 	ldrh.w	r2, [r5, #-2]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d0bd      	beq.n	8008b8c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x108>
        return Success;
 8008c10:	2000      	movs	r0, #0
}
 8008c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008c14:	4803      	ldr	r0, [pc, #12]	; (8008c24 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x1a0>)
 8008c16:	f7f8 fd99 	bl	800174c <HAL_GPIO_WritePin>
        return Success;
 8008c1a:	4620      	mov	r0, r4
}
 8008c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        static DWTWrapper dwtWrapper;
 8008c1e:	2201      	movs	r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e76d      	b.n	8008b00 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE+0x7c>
 8008c24:	40020000 	.word	0x40020000
 8008c28:	0800b77c 	.word	0x0800b77c
 8008c2c:	0800b778 	.word	0x0800b778
 8008c30:	200000c0 	.word	0x200000c0
 8008c34:	20000008 	.word	0x20000008
 8008c38:	431bde83 	.word	0x431bde83
 8008c3c:	e0001000 	.word	0xe0001000
 8008c40:	0800b764 	.word	0x0800b764
 8008c44:	0800b55c 	.word	0x0800b55c

08008c48 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE>:
        }
    }
    return status;
}

[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    uint16_t DCCx{ 0 };
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
    RegisterGroup<uint8_t> cfg_register_group;

    switch (discharge_mode) {
 8008c4c:	790b      	ldrb	r3, [r1, #4]
[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 8008c4e:	b089      	sub	sp, #36	; 0x24
    switch (discharge_mode) {
 8008c50:	2b01      	cmp	r3, #1
[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 8008c52:	9007      	str	r0, [sp, #28]
 8008c54:	9201      	str	r2, [sp, #4]
    switch (discharge_mode) {
 8008c56:	f000 8127 	beq.w	8008ea8 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x260>
 8008c5a:	f0c0 8096 	bcc.w	8008d8a <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x142>
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	f040 808f 	bne.w	8008d82 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x13a>
            cfg_register_group[current_ic].PEC = PEC15Calc(cfg_register_group[current_ic].data);
        }
        break;

    case GTMeanPlusDelta: {
        size_t average_voltage{ voltage_status.sum / (4 * kDaisyChainLength * 3) };
 8008c64:	6813      	ldr	r3, [r2, #0]
 8008c66:	4abb      	ldr	r2, [pc, #748]	; (8008f54 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x30c>)
 8008c68:	48bb      	ldr	r0, [pc, #748]	; (8008f58 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>)
 8008c6a:	9003      	str	r0, [sp, #12]
 8008c6c:	fba2 3e03 	umull	r3, lr, r2, r3
 8008c70:	f101 0366 	add.w	r3, r1, #102	; 0x66
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	f501 73f6 	add.w	r3, r1, #492	; 0x1ec
 8008c7a:	9305      	str	r3, [sp, #20]
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8008c82:	3308      	adds	r3, #8
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 8008c84:	220b      	movs	r2, #11
 8008c86:	f10e 0e64 	add.w	lr, lr, #100	; 0x64
 8008c8a:	9201      	str	r2, [sp, #4]
            current_cell = 0;

            for (auto const& register_group : cell_data) { // 4 voltage register groups
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
                    if (voltage > average_voltage + kDelta)
                        DCCx |= 1 << current_cell;
 8008c8c:	f04f 0a01 	mov.w	sl, #1
                    ++current_cell;
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            --current_ic;

            IC.data[0] = 0xFE;
 8008c90:	469b      	mov	fp, r3
 8008c92:	9b01      	ldr	r3, [sp, #4]
 8008c94:	9a04      	ldr	r2, [sp, #16]
            DCCx = 0;
 8008c96:	f8cd b008 	str.w	fp, [sp, #8]
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	f103 0c06 	add.w	ip, r3, #6
 8008ca0:	f103 0902 	add.w	r9, r3, #2
 8008ca4:	eb02 0803 	add.w	r8, r2, r3
 8008ca8:	4494      	add	ip, r2
 8008caa:	4491      	add	r9, r2
 8008cac:	9a05      	ldr	r2, [sp, #20]
            current_cell = 0;
 8008cae:	2600      	movs	r6, #0
 8008cb0:	18d3      	adds	r3, r2, r3
            DCCx = 0;
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	4632      	mov	r2, r6
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008cb6:	45e0      	cmp	r8, ip
 8008cb8:	d017      	beq.n	8008cea <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0xa2>
 8008cba:	ebac 0509 	sub.w	r5, ip, r9
 8008cbe:	086f      	lsrs	r7, r5, #1
 8008cc0:	f1ac 0308 	sub.w	r3, ip, #8
 8008cc4:	4445      	add	r5, r8
 8008cc6:	4631      	mov	r1, r6
                    if (voltage > average_voltage + kDelta)
 8008cc8:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 8008ccc:	45a6      	cmp	lr, r4
                    ++current_cell;
 8008cce:	f101 0001 	add.w	r0, r1, #1
                    if (voltage > average_voltage + kDelta)
 8008cd2:	d203      	bcs.n	8008cdc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x94>
                        DCCx |= 1 << current_cell;
 8008cd4:	fa0a f101 	lsl.w	r1, sl, r1
 8008cd8:	4311      	orrs	r1, r2
 8008cda:	b28a      	uxth	r2, r1
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008cdc:	429d      	cmp	r5, r3
                    ++current_cell;
 8008cde:	b2c1      	uxtb	r1, r0
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008ce0:	d1f2      	bne.n	8008cc8 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x80>
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	fa57 f686 	uxtab	r6, r7, r6
 8008ce8:	b2f6      	uxtb	r6, r6
 8008cea:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8008cee:	45e3      	cmp	fp, ip
 8008cf0:	f108 0860 	add.w	r8, r8, #96	; 0x60
 8008cf4:	f109 0960 	add.w	r9, r9, #96	; 0x60
 8008cf8:	d1dd      	bne.n	8008cb6 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x6e>
 8008cfa:	f8dd b008 	ldr.w	fp, [sp, #8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008cfe:	9d03      	ldr	r5, [sp, #12]
 8008d00:	f81b 1c07 	ldrb.w	r1, [fp, #-7]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d04:	f81b 3c06 	ldrb.w	r3, [fp, #-6]
            IC.data[4] = DCCx & 0xFF;
 8008d08:	f80b 2c04 	strb.w	r2, [fp, #-4]
            IC.data[0] = 0xFE;
 8008d0c:	f06f 0001 	mvn.w	r0, #1
 8008d10:	f80b 0c08 	strb.w	r0, [fp, #-8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d14:	f081 01aa 	eor.w	r1, r1, #170	; 0xaa
            --current_ic;
 8008d18:	9801      	ldr	r0, [sp, #4]
 8008d1a:	1e44      	subs	r4, r0, #1
 8008d1c:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d20:	f480 6140 	eor.w	r1, r0, #3072	; 0xc00
 8008d24:	ea83 13d1 	eor.w	r3, r3, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	b2e6      	uxtb	r6, r4
 8008d2c:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d30:	f81b 3c05 	ldrb.w	r3, [fp, #-5]
 8008d34:	9601      	str	r6, [sp, #4]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d36:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d3a:	b280      	uxth	r0, r0
 8008d3c:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d40:	b2db      	uxtb	r3, r3
            IC.data[5] = DCCx >> 8 & 0xF;
 8008d42:	f3c2 2103 	ubfx	r1, r2, #8, #4
 8008d46:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8008d4a:	f80b 1c03 	strb.w	r1, [fp, #-3]
 8008d4e:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d52:	b298      	uxth	r0, r3
 8008d54:	ea82 12d0 	eor.w	r2, r2, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d58:	b2d2      	uxtb	r2, r2
        for (auto& IC : cfg_register_group) {
 8008d5a:	2eff      	cmp	r6, #255	; 0xff
 8008d5c:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8008d60:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008d6a:	b2c9      	uxtb	r1, r1
 8008d6c:	f10b 0b08 	add.w	fp, fp, #8
 8008d70:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 8008d74:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008d78:	ea4f 0343 	mov.w	r3, r3, lsl #1
            IC.PEC = PEC15Calc(IC.data);
 8008d7c:	f82b 3c0a 	strh.w	r3, [fp, #-10]
        for (auto& IC : cfg_register_group) {
 8008d80:	d187      	bne.n	8008c92 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x4a>
    }
    break;
    }

    return cfg_register_group;
}
 8008d82:	9807      	ldr	r0, [sp, #28]
 8008d84:	b009      	add	sp, #36	; 0x24
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	4b73      	ldr	r3, [pc, #460]	; (8008f58 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>)
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	f101 0366 	add.w	r3, r1, #102	; 0x66
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	f501 73f6 	add.w	r3, r1, #492	; 0x1ec
 8008d98:	9306      	str	r3, [sp, #24]
 8008d9a:	9b07      	ldr	r3, [sp, #28]
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 8008d9c:	220b      	movs	r2, #11
 8008d9e:	3308      	adds	r3, #8
 8008da0:	9202      	str	r2, [sp, #8]
                        DCCx |= 1 << current_cell;
 8008da2:	f04f 0a01 	mov.w	sl, #1
            IC.data[0] = 0xFE;
 8008da6:	469b      	mov	fp, r3
 8008da8:	9b02      	ldr	r3, [sp, #8]
 8008daa:	9a05      	ldr	r2, [sp, #20]
            DCCx = 0;
 8008dac:	f8cd b010 	str.w	fp, [sp, #16]
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	f103 0e06 	add.w	lr, r3, #6
 8008db6:	f103 0902 	add.w	r9, r3, #2
 8008dba:	eb02 0803 	add.w	r8, r2, r3
 8008dbe:	4496      	add	lr, r2
 8008dc0:	4491      	add	r9, r2
 8008dc2:	9a06      	ldr	r2, [sp, #24]
            current_cell = 0;
 8008dc4:	2700      	movs	r7, #0
 8008dc6:	18d3      	adds	r3, r2, r3
            DCCx = 0;
 8008dc8:	469b      	mov	fp, r3
 8008dca:	463a      	mov	r2, r7
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008dcc:	45c6      	cmp	lr, r8
 8008dce:	d01b      	beq.n	8008e08 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x1c0>
                    if (voltage > voltage_status.min + kDelta)
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	889e      	ldrh	r6, [r3, #4]
 8008dd4:	ebae 0509 	sub.w	r5, lr, r9
 8008dd8:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8008ddc:	3664      	adds	r6, #100	; 0x64
 8008dde:	4445      	add	r5, r8
 8008de0:	f1ae 0308 	sub.w	r3, lr, #8
 8008de4:	4639      	mov	r1, r7
 8008de6:	f833 4f02 	ldrh.w	r4, [r3, #2]!
 8008dea:	42a6      	cmp	r6, r4
                    ++current_cell;
 8008dec:	f101 0001 	add.w	r0, r1, #1
                    if (voltage > voltage_status.min + kDelta)
 8008df0:	da03      	bge.n	8008dfa <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x1b2>
                        DCCx |= 1 << current_cell;
 8008df2:	fa0a f101 	lsl.w	r1, sl, r1
 8008df6:	4311      	orrs	r1, r2
 8008df8:	b28a      	uxth	r2, r1
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008dfa:	42ab      	cmp	r3, r5
                    ++current_cell;
 8008dfc:	b2c1      	uxtb	r1, r0
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8008dfe:	d1f2      	bne.n	8008de6 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x19e>
 8008e00:	3701      	adds	r7, #1
 8008e02:	fa5c f787 	uxtab	r7, ip, r7
 8008e06:	b2ff      	uxtb	r7, r7
 8008e08:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8008e0c:	45f3      	cmp	fp, lr
 8008e0e:	f108 0860 	add.w	r8, r8, #96	; 0x60
 8008e12:	f109 0960 	add.w	r9, r9, #96	; 0x60
 8008e16:	d1d9      	bne.n	8008dcc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x184>
 8008e18:	f8dd b010 	ldr.w	fp, [sp, #16]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e1c:	9d03      	ldr	r5, [sp, #12]
 8008e1e:	f81b 1c07 	ldrb.w	r1, [fp, #-7]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008e22:	f81b 3c06 	ldrb.w	r3, [fp, #-6]
            IC.data[4] = DCCx & 0xFF;
 8008e26:	f80b 2c04 	strb.w	r2, [fp, #-4]
            IC.data[0] = 0xFE;
 8008e2a:	f06f 0001 	mvn.w	r0, #1
 8008e2e:	f80b 0c08 	strb.w	r0, [fp, #-8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e32:	f081 01aa 	eor.w	r1, r1, #170	; 0xaa
            --current_ic;
 8008e36:	9802      	ldr	r0, [sp, #8]
 8008e38:	1e44      	subs	r4, r0, #1
 8008e3a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008e3e:	f480 6140 	eor.w	r1, r0, #3072	; 0xc00
 8008e42:	ea83 13d1 	eor.w	r3, r3, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	b2e6      	uxtb	r6, r4
 8008e4a:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008e4e:	f81b 3c05 	ldrb.w	r3, [fp, #-5]
 8008e52:	9602      	str	r6, [sp, #8]
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e54:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008e58:	b280      	uxth	r0, r0
 8008e5a:	ea83 13d0 	eor.w	r3, r3, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e5e:	b2db      	uxtb	r3, r3
            IC.data[5] = DCCx >> 8 & 0xF;
 8008e60:	f3c2 2103 	ubfx	r1, r2, #8, #4
 8008e64:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8008e68:	f80b 1c03 	strb.w	r1, [fp, #-3]
 8008e6c:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008e70:	b298      	uxth	r0, r3
 8008e72:	ea82 12d0 	eor.w	r2, r2, r0, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e76:	b2d2      	uxtb	r2, r2
        for (auto& IC : cfg_register_group) { // 12 register groups
 8008e78:	2eff      	cmp	r6, #255	; 0xff
 8008e7a:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8008e7e:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8008e88:	b2c9      	uxtb	r1, r1
 8008e8a:	f10b 0b08 	add.w	fp, fp, #8
 8008e8e:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 8008e92:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008e96:	ea4f 0343 	mov.w	r3, r3, lsl #1
            IC.PEC = PEC15Calc(IC.data);
 8008e9a:	f82b 3c0a 	strh.w	r3, [fp, #-10]
        for (auto& IC : cfg_register_group) { // 12 register groups
 8008e9e:	d183      	bne.n	8008da8 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x160>
}
 8008ea0:	9807      	ldr	r0, [sp, #28]
 8008ea2:	b009      	add	sp, #36	; 0x24
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	4610      	mov	r0, r2
        if (voltage_status.max - voltage_status.min > kDelta) {
 8008eaa:	8992      	ldrh	r2, [r2, #12]
 8008eac:	8881      	ldrh	r1, [r0, #4]
 8008eae:	1a52      	subs	r2, r2, r1
 8008eb0:	2a64      	cmp	r2, #100	; 0x64
 8008eb2:	f77f af66 	ble.w	8008d82 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x13a>
            current_ic = voltage_status.max_id / 3 % 12;
 8008eb6:	6906      	ldr	r6, [r0, #16]
 8008eb8:	4a28      	ldr	r2, [pc, #160]	; (8008f5c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x314>)
            PEC = PEC << 8 ^ crc15Table[addr];
 8008eba:	4c27      	ldr	r4, [pc, #156]	; (8008f58 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>)
            DCCx |= 1 << voltage_status.max_id % 11;
 8008ebc:	4828      	ldr	r0, [pc, #160]	; (8008f60 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x318>)
            current_ic = voltage_status.max_id / 3 % 12;
 8008ebe:	fba2 5106 	umull	r5, r1, r2, r6
 8008ec2:	0849      	lsrs	r1, r1, #1
 8008ec4:	fba2 5201 	umull	r5, r2, r2, r1
 8008ec8:	08d2      	lsrs	r2, r2, #3
 8008eca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            cfg_register_group[current_ic].data[0] = 0xFE;
 8008ece:	9d07      	ldr	r5, [sp, #28]
            current_ic = voltage_status.max_id / 3 % 12;
 8008ed0:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
            cfg_register_group[current_ic].data[0] = 0xFE;
 8008ed4:	21fe      	movs	r1, #254	; 0xfe
 8008ed6:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
 8008eda:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
            DCCx |= 1 << voltage_status.max_id % 11;
 8008ede:	fba0 0106 	umull	r0, r1, r0, r6
 8008ee2:	7855      	ldrb	r5, [r2, #1]
 8008ee4:	7890      	ldrb	r0, [r2, #2]
 8008ee6:	78d7      	ldrb	r7, [r2, #3]
 8008ee8:	f085 05aa 	eor.w	r5, r5, #170	; 0xaa
 8008eec:	08c9      	lsrs	r1, r1, #3
 8008eee:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8008ef2:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
 8008ef6:	ea80 10d5 	eor.w	r0, r0, r5, lsr #7
 8008efa:	b2c0      	uxtb	r0, r0
 8008efc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8008f00:	ea80 2005 	eor.w	r0, r0, r5, lsl #8
 8008f04:	b285      	uxth	r5, r0
 8008f06:	ea87 10d5 	eor.w	r0, r7, r5, lsr #7
 8008f0a:	b2c0      	uxtb	r0, r0
 8008f0c:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8008f10:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8008f14:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8008f18:	1a76      	subs	r6, r6, r1
 8008f1a:	ea80 2005 	eor.w	r0, r0, r5, lsl #8
 8008f1e:	40b3      	lsls	r3, r6
 8008f20:	b280      	uxth	r0, r0
 8008f22:	ea83 11d0 	eor.w	r1, r3, r0, lsr #7
 8008f26:	b2c9      	uxtb	r1, r1
            cfg_register_group[current_ic].data[5] = DCCx >> 8 & 0xF;
 8008f28:	121d      	asrs	r5, r3, #8
 8008f2a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
            cfg_register_group[current_ic].data[4] = DCCx & 0xFF;
 8008f2e:	7113      	strb	r3, [r2, #4]
 8008f30:	ea81 2300 	eor.w	r3, r1, r0, lsl #8
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	ea85 11d3 	eor.w	r1, r5, r3, lsr #7
 8008f3a:	b2c9      	uxtb	r1, r1
}
 8008f3c:	9807      	ldr	r0, [sp, #28]
 8008f3e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
            cfg_register_group[current_ic].data[5] = DCCx >> 8 & 0xF;
 8008f42:	7155      	strb	r5, [r2, #5]
 8008f44:	ea81 2303 	eor.w	r3, r1, r3, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8008f48:	005b      	lsls	r3, r3, #1
            cfg_register_group[current_ic].PEC = PEC15Calc(cfg_register_group[current_ic].data);
 8008f4a:	80d3      	strh	r3, [r2, #6]
}
 8008f4c:	b009      	add	sp, #36	; 0x24
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	bf00      	nop
 8008f54:	38e38e39 	.word	0x38e38e39
 8008f58:	0800b55c 	.word	0x0800b55c
 8008f5c:	aaaaaaab 	.word	0xaaaaaaab
 8008f60:	ba2e8ba3 	.word	0xba2e8ba3

08008f64 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>:


/* Start a conversion */
void LTC6811::startConversion(Command const& command) const noexcept {
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	4605      	mov	r5, r0
 8008f68:	460e      	mov	r6, r1
 8008f6a:	240c      	movs	r4, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2120      	movs	r1, #32
 8008f70:	481c      	ldr	r0, [pc, #112]	; (8008fe4 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x80>)
 8008f72:	f7f8 fbeb 	bl	800174c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	491a      	ldr	r1, [pc, #104]	; (8008fe8 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x84>)
 8008f7e:	6828      	ldr	r0, [r5, #0]
 8008f80:	f7fa fdb0 	bl	8003ae4 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008f84:	2201      	movs	r2, #1
 8008f86:	2120      	movs	r1, #32
 8008f88:	4816      	ldr	r0, [pc, #88]	; (8008fe4 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x80>)
 8008f8a:	f7f8 fbdf 	bl	800174c <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8008f8e:	3c01      	subs	r4, #1
 8008f90:	d1ec      	bne.n	8008f6c <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x8>
    static constexpr uint16_t kMaxCycleTimeFast{ 1185 }; // Measure 12 Cells. Time in us.
    static constexpr uint16_t kMaxRefWakeupTime{ 4400 }; // Time in us.

    WakeFromIdle(); // It's possible all of these can be removed

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8008f92:	4622      	mov	r2, r4
 8008f94:	2120      	movs	r1, #32
 8008f96:	4813      	ldr	r0, [pc, #76]	; (8008fe4 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x80>)
 8008f98:	f7f8 fbd8 	bl	800174c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, command.data(), sizeof(Command), HAL_MAX_DELAY); // Start cell voltage conversion.
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	6828      	ldr	r0, [r5, #0]
 8008fa6:	f7fa fd9d 	bl	8003ae4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8008faa:	2201      	movs	r2, #1
 8008fac:	2120      	movs	r1, #32
 8008fae:	480d      	ldr	r0, [pc, #52]	; (8008fe4 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x80>)
 8008fb0:	f7f8 fbcc 	bl	800174c <HAL_GPIO_WritePin>
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x88>)
        return DWT->CYCCNT;
 8008fb6:	490e      	ldr	r1, [pc, #56]	; (8008ff0 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x8c>)
        static DWTWrapper dwtWrapper;
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	07d2      	lsls	r2, r2, #31
 8008fbc:	bf5c      	itt	pl
 8008fbe:	2201      	movpl	r2, #1
 8008fc0:	601a      	strpl	r2, [r3, #0]
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008fc2:	4a0c      	ldr	r2, [pc, #48]	; (8008ff4 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x90>)
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	; (8008ff8 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x94>)
 8008fc6:	6810      	ldr	r0, [r2, #0]
 8008fc8:	f241 52d1 	movw	r2, #5585	; 0x15d1
 8008fcc:	fb02 f200 	mul.w	r2, r2, r0
 8008fd0:	fba3 3202 	umull	r3, r2, r3, r2
        return DWT->CYCCNT;
 8008fd4:	6848      	ldr	r0, [r1, #4]
        uint32_t delayTicks = microseconds * SystemCoreClock / 1000000;
 8008fd6:	0c92      	lsrs	r2, r2, #18
        while (DWT->CYCCNT - startTicks < delayTicks);
 8008fd8:	684b      	ldr	r3, [r1, #4]
 8008fda:	1a1b      	subs	r3, r3, r0
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d8fb      	bhi.n	8008fd8 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x74>

    DWTWrapper::getInstance().delay(kMaxRefWakeupTime + kMaxCycleTimeFast); // TODO we aren't in fast conversion mode??? Also these delays aren't in the Linduino library
}
 8008fe0:	bd70      	pop	{r4, r5, r6, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40020000 	.word	0x40020000
 8008fe8:	0800b77c 	.word	0x0800b77c
 8008fec:	200000c0 	.word	0x200000c0
 8008ff0:	e0001000 	.word	0xe0001000
 8008ff4:	20000008 	.word	0x20000008
 8008ff8:	431bde83 	.word	0x431bde83

08008ffc <_ZN7LTC681118checkVoltageStatusEv>:
[[nodiscard]] std::optional<LTC6811::VoltageStatus> LTC6811::checkVoltageStatus(void) noexcept {
 8008ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4689      	mov	r9, r1
 8009002:	4606      	mov	r6, r0
    startConversion(ADCV);
 8009004:	f201 3166 	addw	r1, r1, #870	; 0x366
 8009008:	4648      	mov	r0, r9
 800900a:	f7ff ffab 	bl	8008f64 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>
 800900e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80091c8 <_ZN7LTC681118checkVoltageStatusEv+0x1cc>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009012:	4f69      	ldr	r7, [pc, #420]	; (80091b8 <_ZN7LTC681118checkVoltageStatusEv+0x1bc>)
 8009014:	f109 0466 	add.w	r4, r9, #102	; 0x66
 8009018:	f109 08c6 	add.w	r8, r9, #198	; 0xc6
 800901c:	f209 2b46 	addw	fp, r9, #582	; 0x246
[[nodiscard]] std::optional<LTC6811::VoltageStatus> LTC6811::checkVoltageStatus(void) noexcept {
 8009020:	250c      	movs	r5, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009022:	2200      	movs	r2, #0
 8009024:	2120      	movs	r1, #32
 8009026:	4638      	mov	r0, r7
 8009028:	f7f8 fb90 	bl	800174c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	2201      	movs	r2, #1
 8009032:	4962      	ldr	r1, [pc, #392]	; (80091bc <_ZN7LTC681118checkVoltageStatusEv+0x1c0>)
 8009034:	f8d9 0000 	ldr.w	r0, [r9]
 8009038:	f7fa fd54 	bl	8003ae4 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800903c:	2201      	movs	r2, #1
 800903e:	2120      	movs	r1, #32
 8009040:	4638      	mov	r0, r7
 8009042:	f7f8 fb83 	bl	800174c <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009046:	3d01      	subs	r5, #1
 8009048:	d1eb      	bne.n	8009022 <_ZN7LTC681118checkVoltageStatusEv+0x26>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800904a:	462a      	mov	r2, r5
 800904c:	2120      	movs	r1, #32
 800904e:	4638      	mov	r0, r7
 8009050:	f7f8 fb7c 	bl	800174c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8009054:	2204      	movs	r2, #4
 8009056:	4651      	mov	r1, sl
 8009058:	f04f 33ff 	mov.w	r3, #4294967295
 800905c:	f8d9 0000 	ldr.w	r0, [r9]
 8009060:	f7fa fd40 	bl	8003ae4 <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009064:	2201      	movs	r2, #1
 8009066:	2120      	movs	r1, #32
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8009068:	2800      	cmp	r0, #0
 800906a:	f040 809d 	bne.w	80091a8 <_ZN7LTC681118checkVoltageStatusEv+0x1ac>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800906e:	4638      	mov	r0, r7
 8009070:	f1a8 0560 	sub.w	r5, r8, #96	; 0x60
 8009074:	f7f8 fb6a 	bl	800174c <HAL_GPIO_WritePin>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8009078:	4629      	mov	r1, r5
 800907a:	f04f 33ff 	mov.w	r3, #4294967295
 800907e:	2260      	movs	r2, #96	; 0x60
 8009080:	f8d9 0000 	ldr.w	r0, [r9]
 8009084:	f7fa fe62 	bl	8003d4c <HAL_SPI_Receive>
 8009088:	2800      	cmp	r0, #0
 800908a:	f040 8090 	bne.w	80091ae <_ZN7LTC681118checkVoltageStatusEv+0x1b2>
                for (auto& IC : register_group)
 800908e:	45a8      	cmp	r8, r5
 8009090:	d049      	beq.n	8009126 <_ZN7LTC681118checkVoltageStatusEv+0x12a>
 8009092:	494b      	ldr	r1, [pc, #300]	; (80091c0 <_ZN7LTC681118checkVoltageStatusEv+0x1c4>)
 8009094:	f1a8 0358 	sub.w	r3, r8, #88	; 0x58
 8009098:	e002      	b.n	80090a0 <_ZN7LTC681118checkVoltageStatusEv+0xa4>
 800909a:	4598      	cmp	r8, r3
 800909c:	d043      	beq.n	8009126 <_ZN7LTC681118checkVoltageStatusEv+0x12a>
 800909e:	462b      	mov	r3, r5
            PEC = PEC << 8 ^ crc15Table[addr];
 80090a0:	f813 0c08 	ldrb.w	r0, [r3, #-8]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090a4:	f813 2c07 	ldrb.w	r2, [r3, #-7]
            PEC = PEC << 8 ^ crc15Table[addr];
 80090a8:	f831 e010 	ldrh.w	lr, [r1, r0, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090ac:	f813 cc06 	ldrb.w	ip, [r3, #-6]
 80090b0:	f813 0c05 	ldrb.w	r0, [r3, #-5]
 80090b4:	f48e 5e80 	eor.w	lr, lr, #4096	; 0x1000
 80090b8:	ea82 12de 	eor.w	r2, r2, lr, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80090bc:	b2d2      	uxtb	r2, r2
 80090be:	f103 0508 	add.w	r5, r3, #8
 80090c2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80090c6:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090ca:	b292      	uxth	r2, r2
 80090cc:	ea8c 1cd2 	eor.w	ip, ip, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80090d0:	fa5f fc8c 	uxtb.w	ip, ip
 80090d4:	f831 c01c 	ldrh.w	ip, [r1, ip, lsl #1]
 80090d8:	ea8c 2202 	eor.w	r2, ip, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090dc:	b292      	uxth	r2, r2
 80090de:	ea80 10d2 	eor.w	r0, r0, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80090e2:	b2c0      	uxtb	r0, r0
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090e4:	f813 cc04 	ldrb.w	ip, [r3, #-4]
            PEC = PEC << 8 ^ crc15Table[addr];
 80090e8:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 80090ec:	ea80 2202 	eor.w	r2, r0, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090f0:	b292      	uxth	r2, r2
 80090f2:	ea8c 1cd2 	eor.w	ip, ip, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80090f6:	fa5f fc8c 	uxtb.w	ip, ip
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80090fa:	f813 0c03 	ldrb.w	r0, [r3, #-3]
            PEC = PEC << 8 ^ crc15Table[addr];
 80090fe:	f831 c01c 	ldrh.w	ip, [r1, ip, lsl #1]
 8009102:	ea8c 2202 	eor.w	r2, ip, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009106:	fa1f fc82 	uxth.w	ip, r2
 800910a:	ea80 12dc 	eor.w	r2, r0, ip, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 800910e:	b2d2      	uxtb	r2, r2
                    if (IC.PEC != PEC15Calc(IC.data))
 8009110:	f833 0c02 	ldrh.w	r0, [r3, #-2]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009114:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8009118:	ea82 220c 	eor.w	r2, r2, ip, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800911c:	0052      	lsls	r2, r2, #1
                    if (IC.PEC != PEC15Calc(IC.data))
 800911e:	b292      	uxth	r2, r2
 8009120:	4290      	cmp	r0, r2
 8009122:	d0ba      	beq.n	800909a <_ZN7LTC681118checkVoltageStatusEv+0x9e>
 8009124:	e043      	b.n	80091ae <_ZN7LTC681118checkVoltageStatusEv+0x1b2>
 8009126:	f108 0860 	add.w	r8, r8, #96	; 0x60
    for (size_t group = A; group <= D; ++group)
 800912a:	45d8      	cmp	r8, fp
 800912c:	f10a 0a04 	add.w	sl, sl, #4
 8009130:	f47f af76 	bne.w	8009020 <_ZN7LTC681118checkVoltageStatusEv+0x24>
    LTC6811::VoltageStatus status;
 8009134:	f04f 0800 	mov.w	r8, #0
 8009138:	f509 7ef3 	add.w	lr, r9, #486	; 0x1e6
 800913c:	4645      	mov	r5, r8
 800913e:	46c4      	mov	ip, r8
 8009140:	4641      	mov	r1, r8
    size_t count{ 0 };
 8009142:	4643      	mov	r3, r8
    LTC6811::VoltageStatus status;
 8009144:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009148:	1da7      	adds	r7, r4, #6
 800914a:	f104 0960 	add.w	r9, r4, #96	; 0x60
 800914e:	f104 0a66 	add.w	sl, r4, #102	; 0x66
 8009152:	f1a7 0208 	sub.w	r2, r7, #8
 8009156:	1cdc      	adds	r4, r3, #3
 8009158:	e006      	b.n	8009168 <_ZN7LTC681118checkVoltageStatusEv+0x16c>
                } else if (voltage > status.max) {
 800915a:	45ab      	cmp	fp, r5
 800915c:	d901      	bls.n	8009162 <_ZN7LTC681118checkVoltageStatusEv+0x166>
 800915e:	465d      	mov	r5, fp
 8009160:	4698      	mov	r8, r3
                ++count;
 8009162:	3301      	adds	r3, #1
            for (const auto voltage : IC.data) {
 8009164:	42a3      	cmp	r3, r4
 8009166:	d009      	beq.n	800917c <_ZN7LTC681118checkVoltageStatusEv+0x180>
 8009168:	f832 bf02 	ldrh.w	fp, [r2, #2]!
                if (voltage < status.min) {
 800916c:	4583      	cmp	fp, r0
                status.sum += voltage;
 800916e:	4459      	add	r1, fp
                if (voltage < status.min) {
 8009170:	d2f3      	bcs.n	800915a <_ZN7LTC681118checkVoltageStatusEv+0x15e>
 8009172:	469c      	mov	ip, r3
                ++count;
 8009174:	3301      	adds	r3, #1
            for (const auto voltage : IC.data) {
 8009176:	42a3      	cmp	r3, r4
                if (voltage < status.min) {
 8009178:	4658      	mov	r0, fp
            for (const auto voltage : IC.data) {
 800917a:	d1f5      	bne.n	8009168 <_ZN7LTC681118checkVoltageStatusEv+0x16c>
 800917c:	3708      	adds	r7, #8
        for (const auto& IC : register_group) {
 800917e:	45ba      	cmp	sl, r7
 8009180:	d1e7      	bne.n	8009152 <_ZN7LTC681118checkVoltageStatusEv+0x156>
    for (const auto& register_group : cell_data) {
 8009182:	45ce      	cmp	lr, r9
 8009184:	464c      	mov	r4, r9
 8009186:	d1df      	bne.n	8009148 <_ZN7LTC681118checkVoltageStatusEv+0x14c>
    status.sum /= 10000; // Convert centiDegC to DegC (with rounding errors, but this is what the old code did...)
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <_ZN7LTC681118checkVoltageStatusEv+0x1c8>)
	: _M_empty() {}

      template<typename... _Args>
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
	: _M_payload(std::forward<_Args>(__args)...),
	  _M_engaged(true)
 800918a:	80b0      	strh	r0, [r6, #4]
 800918c:	fba3 2301 	umull	r2, r3, r3, r1
 8009190:	0b5b      	lsrs	r3, r3, #13
 8009192:	2201      	movs	r2, #1
 8009194:	f8c6 c008 	str.w	ip, [r6, #8]
 8009198:	81b5      	strh	r5, [r6, #12]
 800919a:	f8c6 8010 	str.w	r8, [r6, #16]
 800919e:	6033      	str	r3, [r6, #0]
 80091a0:	7532      	strb	r2, [r6, #20]
}
 80091a2:	4630      	mov	r0, r6
 80091a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80091a8:	4803      	ldr	r0, [pc, #12]	; (80091b8 <_ZN7LTC681118checkVoltageStatusEv+0x1bc>)
 80091aa:	f7f8 facf 	bl	800174c <HAL_GPIO_WritePin>
	: _M_empty() {}
 80091ae:	2300      	movs	r3, #0
 80091b0:	7533      	strb	r3, [r6, #20]
 80091b2:	4630      	mov	r0, r6
 80091b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b8:	40020000 	.word	0x40020000
 80091bc:	0800b77c 	.word	0x0800b77c
 80091c0:	0800b55c 	.word	0x0800b55c
 80091c4:	d1b71759 	.word	0xd1b71759
 80091c8:	0800b768 	.word	0x0800b768

080091cc <_ZN7LTC681122checkTemperatureStatusEv>:
[[nodiscard]] std::optional<LTC6811::TempStatus> LTC6811::checkTemperatureStatus() noexcept {
 80091cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	460e      	mov	r6, r1
 80091d2:	4681      	mov	r9, r0
    startConversion(ADAX);
 80091d4:	f201 316a 	addw	r1, r1, #874	; 0x36a
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff fec3 	bl	8008f64 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>
 80091de:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8009324 <_ZN7LTC681122checkTemperatureStatusEv+0x158>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80091e2:	4d4d      	ldr	r5, [pc, #308]	; (8009318 <_ZN7LTC681122checkTemperatureStatusEv+0x14c>)
 80091e4:	f206 2746 	addw	r7, r6, #582	; 0x246
 80091e8:	f206 3a06 	addw	sl, r6, #774	; 0x306
[[nodiscard]] std::optional<LTC6811::TempStatus> LTC6811::checkTemperatureStatus() noexcept {
 80091ec:	240c      	movs	r4, #12
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80091ee:	2200      	movs	r2, #0
 80091f0:	2120      	movs	r1, #32
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7f8 faaa 	bl	800174c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi, &kData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	2201      	movs	r2, #1
 80091fe:	4947      	ldr	r1, [pc, #284]	; (800931c <_ZN7LTC681122checkTemperatureStatusEv+0x150>)
 8009200:	6830      	ldr	r0, [r6, #0]
 8009202:	f7fa fc6f 	bl	8003ae4 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009206:	2201      	movs	r2, #1
 8009208:	2120      	movs	r1, #32
 800920a:	4628      	mov	r0, r5
 800920c:	f7f8 fa9e 	bl	800174c <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009210:	3c01      	subs	r4, #1
 8009212:	d1ec      	bne.n	80091ee <_ZN7LTC681122checkTemperatureStatusEv+0x22>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8009214:	4622      	mov	r2, r4
 8009216:	2120      	movs	r1, #32
 8009218:	4628      	mov	r0, r5
 800921a:	f7f8 fa97 	bl	800174c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 800921e:	2204      	movs	r2, #4
 8009220:	4641      	mov	r1, r8
 8009222:	f04f 33ff 	mov.w	r3, #4294967295
 8009226:	6830      	ldr	r0, [r6, #0]
 8009228:	f7fa fc5c 	bl	8003ae4 <HAL_SPI_Transmit>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800922c:	2201      	movs	r2, #1
 800922e:	2120      	movs	r1, #32
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK) {
 8009230:	2800      	cmp	r0, #0
 8009232:	d15c      	bne.n	80092ee <_ZN7LTC681122checkTemperatureStatusEv+0x122>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8009234:	4628      	mov	r0, r5
 8009236:	f1a7 0460 	sub.w	r4, r7, #96	; 0x60
 800923a:	f7f8 fa87 	bl	800174c <HAL_GPIO_WritePin>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 800923e:	4621      	mov	r1, r4
 8009240:	f04f 33ff 	mov.w	r3, #4294967295
 8009244:	2260      	movs	r2, #96	; 0x60
 8009246:	6830      	ldr	r0, [r6, #0]
 8009248:	f7fa fd80 	bl	8003d4c <HAL_SPI_Receive>
 800924c:	2800      	cmp	r0, #0
 800924e:	d148      	bne.n	80092e2 <_ZN7LTC681122checkTemperatureStatusEv+0x116>
                for (auto& IC : register_group)
 8009250:	42a7      	cmp	r7, r4
 8009252:	d055      	beq.n	8009300 <_ZN7LTC681122checkTemperatureStatusEv+0x134>
 8009254:	4832      	ldr	r0, [pc, #200]	; (8009320 <_ZN7LTC681122checkTemperatureStatusEv+0x154>)
 8009256:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
 800925a:	e002      	b.n	8009262 <_ZN7LTC681122checkTemperatureStatusEv+0x96>
 800925c:	429f      	cmp	r7, r3
 800925e:	d04f      	beq.n	8009300 <_ZN7LTC681122checkTemperatureStatusEv+0x134>
 8009260:	4623      	mov	r3, r4
            PEC = PEC << 8 ^ crc15Table[addr];
 8009262:	f813 2c08 	ldrb.w	r2, [r3, #-8]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009266:	f813 cc07 	ldrb.w	ip, [r3, #-7]
            PEC = PEC << 8 ^ crc15Table[addr];
 800926a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800926e:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8009272:	f482 5e80 	eor.w	lr, r2, #4096	; 0x1000
 8009276:	ea8c 1cde 	eor.w	ip, ip, lr, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 800927a:	fa5f fc8c 	uxtb.w	ip, ip
 800927e:	f103 0408 	add.w	r4, r3, #8
 8009282:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009286:	f813 cc05 	ldrb.w	ip, [r3, #-5]
            PEC = PEC << 8 ^ crc15Table[addr];
 800928a:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800928e:	b292      	uxth	r2, r2
 8009290:	ea81 11d2 	eor.w	r1, r1, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 8009294:	b2c9      	uxtb	r1, r1
 8009296:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800929a:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800929e:	b28a      	uxth	r2, r1
 80092a0:	ea8c 11d2 	eor.w	r1, ip, r2, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80092a4:	b2c9      	uxtb	r1, r1
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80092a6:	f813 cc03 	ldrb.w	ip, [r3, #-3]
            PEC = PEC << 8 ^ crc15Table[addr];
 80092aa:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80092ae:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80092b2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80092b6:	b289      	uxth	r1, r1
 80092b8:	ea82 12d1 	eor.w	r2, r2, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80092c2:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 80092c6:	b291      	uxth	r1, r2
 80092c8:	ea8c 12d1 	eor.w	r2, ip, r1, lsr #7
            PEC = PEC << 8 ^ crc15Table[addr];
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80092d2:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
        return PEC << 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 80092d6:	0052      	lsls	r2, r2, #1
                    if (IC.PEC != PEC15Calc(IC.data))
 80092d8:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 80092dc:	b292      	uxth	r2, r2
 80092de:	4291      	cmp	r1, r2
 80092e0:	d0bc      	beq.n	800925c <_ZN7LTC681122checkTemperatureStatusEv+0x90>
 80092e2:	2300      	movs	r3, #0
 80092e4:	f889 3010 	strb.w	r3, [r9, #16]
}
 80092e8:	4648      	mov	r0, r9
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80092ee:	480a      	ldr	r0, [pc, #40]	; (8009318 <_ZN7LTC681122checkTemperatureStatusEv+0x14c>)
 80092f0:	f7f8 fa2c 	bl	800174c <HAL_GPIO_WritePin>
 80092f4:	2300      	movs	r3, #0
 80092f6:	f889 3010 	strb.w	r3, [r9, #16]
 80092fa:	4648      	mov	r0, r9
 80092fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009300:	3760      	adds	r7, #96	; 0x60
    if (group <= B)
 8009302:	45ba      	cmp	sl, r7
 8009304:	f108 0804 	add.w	r8, r8, #4
 8009308:	f47f af70 	bne.w	80091ec <_ZN7LTC681122checkTemperatureStatusEv+0x20>
 800930c:	2300      	movs	r3, #0
 800930e:	f889 3010 	strb.w	r3, [r9, #16]
}
 8009312:	4648      	mov	r0, r9
 8009314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009318:	40020000 	.word	0x40020000
 800931c:	0800b77c 	.word	0x0800b77c
 8009320:	0800b55c 	.word	0x0800b55c
 8009324:	0800b75c 	.word	0x0800b75c

08009328 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009332:	f000 f879 	bl	8009428 <BSP_SD_IsDetected>
 8009336:	4603      	mov	r3, r0
 8009338:	2b01      	cmp	r3, #1
 800933a:	d001      	beq.n	8009340 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e012      	b.n	8009366 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009340:	480b      	ldr	r0, [pc, #44]	; (8009370 <BSP_SD_Init+0x48>)
 8009342:	f7f9 f9f3 	bl	800272c <HAL_SD_Init>
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009354:	4806      	ldr	r0, [pc, #24]	; (8009370 <BSP_SD_Init+0x48>)
 8009356:	f7f9 ffe1 	bl	800331c <HAL_SD_ConfigWideBusOperation>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009364:	79fb      	ldrb	r3, [r7, #7]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000130 	.word	0x20000130

08009374 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af02      	add	r7, sp, #8
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	4806      	ldr	r0, [pc, #24]	; (80093ac <BSP_SD_ReadBlocks+0x38>)
 8009392:	f7f9 fa5b 	bl	800284c <HAL_SD_ReadBlocks>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000130 	.word	0x20000130

080093b0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	4806      	ldr	r0, [pc, #24]	; (80093e8 <BSP_SD_WriteBlocks+0x38>)
 80093ce:	f7f9 fc35 	bl	8002c3c <HAL_SD_WriteBlocks>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000130 	.word	0x20000130

080093ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80093f0:	4805      	ldr	r0, [pc, #20]	; (8009408 <BSP_SD_GetCardState+0x1c>)
 80093f2:	f7fa f80f 	bl	8003414 <HAL_SD_GetCardState>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	bf14      	ite	ne
 80093fc:	2301      	movne	r3, #1
 80093fe:	2300      	moveq	r3, #0
 8009400:	b2db      	uxtb	r3, r3
}
 8009402:	4618      	mov	r0, r3
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000130 	.word	0x20000130

0800940c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	4803      	ldr	r0, [pc, #12]	; (8009424 <BSP_SD_GetCardInfo+0x18>)
 8009418:	f7f9 ff54 	bl	80032c4 <HAL_SD_GetCardInfo>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20000130 	.word	0x20000130

08009428 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800942e:	2301      	movs	r3, #1
 8009430:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009432:	f000 f825 	bl	8009480 <BSP_PlatformIsDetected>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800943c:	2300      	movs	r3, #0
 800943e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	b2db      	uxtb	r3, r3
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009450:	4904      	ldr	r1, [pc, #16]	; (8009464 <MX_FATFS_Init+0x18>)
 8009452:	4805      	ldr	r0, [pc, #20]	; (8009468 <MX_FATFS_Init+0x1c>)
 8009454:	f7ff fa42 	bl	80088dc <FATFS_LinkDriver>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	4b03      	ldr	r3, [pc, #12]	; (800946c <MX_FATFS_Init+0x20>)
 800945e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009460:	bf00      	nop
 8009462:	bd80      	pop	{r7, pc}
 8009464:	2000027c 	.word	0x2000027c
 8009468:	0800b7c0 	.word	0x0800b7c0
 800946c:	20000278 	.word	0x20000278

08009470 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009474:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009476:	4618      	mov	r0, r3
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009486:	2301      	movs	r3, #1
 8009488:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800948a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800948e:	4806      	ldr	r0, [pc, #24]	; (80094a8 <BSP_PlatformIsDetected+0x28>)
 8009490:	f7f8 f944 	bl	800171c <HAL_GPIO_ReadPin>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800949a:	2300      	movs	r3, #0
 800949c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800949e:	79fb      	ldrb	r3, [r7, #7]
}  
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	40020000 	.word	0x40020000

080094ac <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C" { void HAL_IncTick(void) {
    uwTick += uwTickFreq;
 80094ac:	492d      	ldr	r1, [pc, #180]	; (8009564 <HAL_IncTick+0xb8>)
 80094ae:	4a2e      	ldr	r2, [pc, #184]	; (8009568 <HAL_IncTick+0xbc>)

    if (status != nullptr)
 80094b0:	4b2e      	ldr	r3, [pc, #184]	; (800956c <HAL_IncTick+0xc0>)
    uwTick += uwTickFreq;
 80094b2:	6808      	ldr	r0, [r1, #0]
 80094b4:	7812      	ldrb	r2, [r2, #0]
    if (status != nullptr)
 80094b6:	681b      	ldr	r3, [r3, #0]
    uwTick += uwTickFreq;
 80094b8:	4402      	add	r2, r0
 80094ba:	600a      	str	r2, [r1, #0]
    if (status != nullptr)
 80094bc:	b15b      	cbz	r3, 80094d6 <HAL_IncTick+0x2a>
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }
 80094be:	f3bf 8f5b 	dmb	ish
 80094c2:	3328      	adds	r3, #40	; 0x28
 80094c4:	e853 2f00 	ldrex	r2, [r3]
 80094c8:	3201      	adds	r2, #1
 80094ca:	e843 2100 	strex	r1, r2, [r3]
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d1f8      	bne.n	80094c4 <HAL_IncTick+0x18>
 80094d2:	f3bf 8f5b 	dmb	ish
        status->tick();

    if (ivt != nullptr)
 80094d6:	4b26      	ldr	r3, [pc, #152]	; (8009570 <HAL_IncTick+0xc4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	b15b      	cbz	r3, 80094f4 <HAL_IncTick+0x48>
 80094dc:	f3bf 8f5b 	dmb	ish
 80094e0:	330c      	adds	r3, #12
 80094e2:	e853 2f00 	ldrex	r2, [r3]
 80094e6:	3201      	adds	r2, #1
 80094e8:	e843 2100 	strex	r1, r2, [r3]
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d1f8      	bne.n	80094e2 <HAL_IncTick+0x36>
 80094f0:	f3bf 8f5b 	dmb	ish
        ++ivt->tick; // This isn't a function but should be.

    if (nlg5 != nullptr)
 80094f4:	4b1f      	ldr	r3, [pc, #124]	; (8009574 <HAL_IncTick+0xc8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	b33b      	cbz	r3, 800954a <HAL_IncTick+0x9e>
 80094fa:	f3bf 8f5b 	dmb	ish
 80094fe:	f103 0214 	add.w	r2, r3, #20
 8009502:	e852 1f00 	ldrex	r1, [r2]
 8009506:	3101      	adds	r1, #1
 8009508:	e842 1000 	strex	r0, r1, [r2]
 800950c:	2800      	cmp	r0, #0
 800950e:	d1f8      	bne.n	8009502 <HAL_IncTick+0x56>
 8009510:	f3bf 8f5b 	dmb	ish
    }

    void tick() noexcept {
        /* Every fifth time the timeout occurs, ctrl is set to a reset command if charger is in fault state. Otherwise it is set to a charge command.
         * NOTE: It would be nicer if the NLG5 class had a reference to the CAN struct and sent this stuff itself when it was ready. */
        if (++counter >= kChargerEventTimeout) {
 8009514:	2963      	cmp	r1, #99	; 0x63
 8009516:	d918      	bls.n	800954a <HAL_IncTick+0x9e>
            /* This code used to check the below condition and put the charger event stuff in an else if
             * I'm not sure if I inverted the condition properly, which is why this comment is here! */
#if OLDCODE
            if ((a_buffer[0] == 136 || a_buffer[0] == 152) && (b_buffer[0] == 136 || b_buffer[0] == 152))
#endif
                if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 8009518:	7a1a      	ldrb	r2, [r3, #8]
 800951a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800951e:	2a88      	cmp	r2, #136	; 0x88
 8009520:	d019      	beq.n	8009556 <HAL_IncTick+0xaa>
                    if (++event_counter >= 5) {
 8009522:	7c1a      	ldrb	r2, [r3, #16]
 8009524:	3201      	adds	r2, #1
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	2a04      	cmp	r2, #4
 800952a:	741a      	strb	r2, [r3, #16]
 800952c:	d80e      	bhi.n	800954c <HAL_IncTick+0xa0>
                        ctrl = C_C_EL;
                        event_counter = 0;
                    } else {
                        ctrl = C_C_EN;
 800952e:	2280      	movs	r2, #128	; 0x80
 8009530:	701a      	strb	r2, [r3, #0]
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8009532:	2100      	movs	r1, #0
 8009534:	f3bf 8f5b 	dmb	ish
 8009538:	2201      	movs	r2, #1
 800953a:	6159      	str	r1, [r3, #20]
 800953c:	f3bf 8f5b 	dmb	ish
 8009540:	f3bf 8f5b 	dmb	ish
 8009544:	761a      	strb	r2, [r3, #24]
 8009546:	f3bf 8f5b 	dmb	ish
        nlg5->tick();
}}
 800954a:	4770      	bx	lr
                        ctrl = C_C_EL;
 800954c:	2140      	movs	r1, #64	; 0x40
                        event_counter = 0;
 800954e:	2200      	movs	r2, #0
                        ctrl = C_C_EL;
 8009550:	7019      	strb	r1, [r3, #0]
                        event_counter = 0;
 8009552:	741a      	strb	r2, [r3, #16]
 8009554:	e7ed      	b.n	8009532 <HAL_IncTick+0x86>
                if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 8009556:	7b1a      	ldrb	r2, [r3, #12]
 8009558:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800955c:	2a88      	cmp	r2, #136	; 0x88
 800955e:	d1e0      	bne.n	8009522 <HAL_IncTick+0x76>
 8009560:	e7e7      	b.n	8009532 <HAL_IncTick+0x86>
 8009562:	bf00      	nop
 8009564:	20000274 	.word	0x20000274
 8009568:	20000004 	.word	0x20000004
 800956c:	2000025c 	.word	0x2000025c
 8009570:	2000024c 	.word	0x2000024c
 8009574:	20000254 	.word	0x20000254

08009578 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009578:	b530      	push	{r4, r5, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800957a:	2400      	movs	r4, #0
{
 800957c:	b0ad      	sub	sp, #180	; 0xb4
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800957e:	4621      	mov	r1, r4
 8009580:	a815      	add	r0, sp, #84	; 0x54
 8009582:	225c      	movs	r2, #92	; 0x5c
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009584:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8009588:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800958c:	940d      	str	r4, [sp, #52]	; 0x34
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800958e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8009592:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8009596:	9407      	str	r4, [sp, #28]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009598:	f001 feb9 	bl	800b30e <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800959c:	4b1f      	ldr	r3, [pc, #124]	; (800961c <_Z18SystemClock_Configv+0xa4>)
 800959e:	9401      	str	r4, [sp, #4]
 80095a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80095a2:	4a1f      	ldr	r2, [pc, #124]	; (8009620 <_Z18SystemClock_Configv+0xa8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80095a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80095a8:	6419      	str	r1, [r3, #64]	; 0x40
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80095b4:	9402      	str	r4, [sp, #8]
 80095b6:	6813      	ldr	r3, [r2, #0]
 80095b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80095bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	6813      	ldr	r3, [r2, #0]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80095c4:	940f      	str	r4, [sp, #60]	; 0x3c
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80095c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80095ca:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80095cc:	2010      	movs	r0, #16
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80095ce:	2302      	movs	r3, #2
    RCC_OscInitStruct.PLL.PLLM = 8;
 80095d0:	2108      	movs	r1, #8
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80095d2:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80095d4:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLN = 50;
 80095d6:	2232      	movs	r2, #50	; 0x32
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80095d8:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80095da:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
    RCC_OscInitStruct.PLL.PLLR = 2;
 80095dc:	9314      	str	r3, [sp, #80]	; 0x50
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80095de:	900c      	str	r0, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 3;
 80095e0:	2303      	movs	r3, #3
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80095e2:	2501      	movs	r5, #1
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80095e4:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLN = 50;
 80095e6:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLQ = 3;
 80095ea:	9313      	str	r3, [sp, #76]	; 0x4c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80095ec:	950b      	str	r5, [sp, #44]	; 0x2c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80095ee:	f7f8 fe43 	bl	8002278 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80095f2:	4621      	mov	r1, r4
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80095f4:	230f      	movs	r3, #15
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80095f6:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80095f8:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80095fa:	e9cd 4404 	strd	r4, r4, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80095fe:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009602:	f7f8 f8d7 	bl	80017b4 <HAL_RCC_ClockConfig>
    {
        Error_Handler();
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8009606:	f44f 7340 	mov.w	r3, #768	; 0x300
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800960a:	a815      	add	r0, sp, #84	; 0x54
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800960c:	942a      	str	r4, [sp, #168]	; 0xa8
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800960e:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8009610:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009612:	f7f8 f9b5 	bl	8001980 <HAL_RCCEx_PeriphCLKConfig>
    {
        Error_Handler();
    }
}
 8009616:	b02d      	add	sp, #180	; 0xb4
 8009618:	bd30      	pop	{r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	40023800 	.word	0x40023800
 8009620:	40007000 	.word	0x40007000

08009624 <main>:
{
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	ed2d 8b02 	vpush	{d8}
 800962c:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009630:	2400      	movs	r4, #0
 8009632:	f50d 7912 	add.w	r9, sp, #584	; 0x248
    HAL_Init();
 8009636:	f7f6 ff65 	bl	8000504 <HAL_Init>
    SystemClock_Config();
 800963a:	f7ff ff9d 	bl	8009578 <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800963e:	e9c9 4400 	strd	r4, r4, [r9]
 8009642:	e9c9 4402 	strd	r4, r4, [r9, #8]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009646:	4bd3      	ldr	r3, [pc, #844]	; (8009994 <main+0x370>)
 8009648:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800964a:	f8c9 4010 	str.w	r4, [r9, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800964e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8009650:	48d1      	ldr	r0, [pc, #836]	; (8009998 <main+0x374>)
    hcan1.Instance = CAN1;
 8009652:	f8df 8380 	ldr.w	r8, [pc, #896]	; 80099d4 <main+0x3b0>
    hspi1.Instance = SPI1;
 8009656:	4ed1      	ldr	r6, [pc, #836]	; (800999c <main+0x378>)
    htim2.Instance = TIM2;
 8009658:	4dd1      	ldr	r5, [pc, #836]	; (80099a0 <main+0x37c>)
    status = new Status(Status::Core | Status::Logging);
 800965a:	f8df b37c 	ldr.w	fp, [pc, #892]	; 80099d8 <main+0x3b4>
 800965e:	f8df a37c 	ldr.w	sl, [pc, #892]	; 80099dc <main+0x3b8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009662:	f042 0204 	orr.w	r2, r2, #4
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
 8009668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966a:	f002 0204 	and.w	r2, r2, #4
 800966e:	920a      	str	r2, [sp, #40]	; 0x28
 8009670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009672:	940b      	str	r4, [sp, #44]	; 0x2c
 8009674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800967a:	631a      	str	r2, [r3, #48]	; 0x30
 800967c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800967e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009682:	920b      	str	r2, [sp, #44]	; 0x2c
 8009684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009686:	940c      	str	r4, [sp, #48]	; 0x30
 8009688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	631a      	str	r2, [r3, #48]	; 0x30
 8009690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009692:	f002 0201 	and.w	r2, r2, #1
 8009696:	920c      	str	r2, [sp, #48]	; 0x30
 8009698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800969a:	940d      	str	r4, [sp, #52]	; 0x34
 800969c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800969e:	f042 0202 	orr.w	r2, r2, #2
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
 80096a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096a6:	f002 0202 	and.w	r2, r2, #2
 80096aa:	920d      	str	r2, [sp, #52]	; 0x34
 80096ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80096ae:	940e      	str	r4, [sp, #56]	; 0x38
 80096b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b2:	f042 0208 	orr.w	r2, r2, #8
 80096b6:	631a      	str	r2, [r3, #48]	; 0x30
 80096b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	930e      	str	r3, [sp, #56]	; 0x38
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 80096c0:	2201      	movs	r2, #1
 80096c2:	213f      	movs	r1, #63	; 0x3f
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80096c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 80096c6:	f7f8 f841 	bl	800174c <HAL_GPIO_WritePin>
            |IO_1_Pin|IO_2_Pin, GPIO_PIN_SET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 80096ca:	4622      	mov	r2, r4
 80096cc:	2180      	movs	r1, #128	; 0x80
 80096ce:	48b5      	ldr	r0, [pc, #724]	; (80099a4 <main+0x380>)
 80096d0:	f7f8 f83c 	bl	800174c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 80096d4:	4622      	mov	r2, r4
 80096d6:	2103      	movs	r1, #3
 80096d8:	48b3      	ldr	r0, [pc, #716]	; (80099a8 <main+0x384>)
 80096da:	f7f8 f837 	bl	800174c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
            |IO_1_Pin|IO_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096de:	2701      	movs	r7, #1
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 80096e0:	233f      	movs	r3, #63	; 0x3f
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096e2:	4649      	mov	r1, r9
 80096e4:	48ac      	ldr	r0, [pc, #688]	; (8009998 <main+0x374>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e6:	e9c9 4402 	strd	r4, r4, [r9, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096ea:	e9c9 3700 	strd	r3, r7, [r9]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096ee:	f7f7 fe83 	bl	80013f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : IO_0_Pin */
    GPIO_InitStruct.Pin = IO_0_Pin;
 80096f2:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 80096f4:	4649      	mov	r1, r9
 80096f6:	48ab      	ldr	r0, [pc, #684]	; (80099a4 <main+0x380>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096f8:	f8c9 400c 	str.w	r4, [r9, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096fc:	e9c9 7401 	strd	r7, r4, [r9, #4]
    GPIO_InitStruct.Pin = IO_0_Pin;
 8009700:	f8c9 3000 	str.w	r3, [r9]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 8009704:	f7f7 fe78 	bl	80013f8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin */
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 8009708:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800970a:	4649      	mov	r1, r9
 800970c:	48a6      	ldr	r0, [pc, #664]	; (80099a8 <main+0x384>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800970e:	f8c9 400c 	str.w	r4, [r9, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009712:	e9c9 7401 	strd	r7, r4, [r9, #4]
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 8009716:	f8c9 3000 	str.w	r3, [r9]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800971a:	f7f7 fe6d 	bl	80013f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : FansPWM_Pin */
    GPIO_InitStruct.Pin = FansPWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800971e:	f04f 0c04 	mov.w	ip, #4
 8009722:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 8009724:	4649      	mov	r1, r9
 8009726:	48a0      	ldr	r0, [pc, #640]	; (80099a8 <main+0x384>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009728:	f8c9 7010 	str.w	r7, [r9, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972c:	e9c9 c300 	strd	ip, r3, [r9]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009730:	e9c9 4402 	strd	r4, r4, [r9, #8]
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 8009734:	f7f7 fe60 	bl	80013f8 <HAL_GPIO_Init>

    /*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 8009738:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800973c:	4649      	mov	r1, r9
 800973e:	4899      	ldr	r0, [pc, #612]	; (80099a4 <main+0x380>)
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 8009740:	f8c9 3000 	str.w	r3, [r9]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009744:	e9c9 4401 	strd	r4, r4, [r9, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009748:	f7f7 fe56 	bl	80013f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : SOS_Pin */
    GPIO_InitStruct.Pin = SOS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800974c:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800974e:	4649      	mov	r1, r9
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009750:	e9c9 3401 	strd	r3, r4, [r9, #4]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 8009754:	4894      	ldr	r0, [pc, #592]	; (80099a8 <main+0x384>)
    GPIO_InitStruct.Pin = SOS_Pin;
 8009756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800975a:	f8c9 3000 	str.w	r3, [r9]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800975e:	f7f7 fe4b 	bl	80013f8 <HAL_GPIO_Init>
    hcan1.Instance = CAN1;
 8009762:	4b92      	ldr	r3, [pc, #584]	; (80099ac <main+0x388>)
 8009764:	f8c8 3000 	str.w	r3, [r8]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8009768:	e9c8 4405 	strd	r4, r4, [r8, #20]
    hcan1.Init.Prescaler = 16;
 800976c:	2310      	movs	r3, #16
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800976e:	4640      	mov	r0, r8
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009770:	f8c8 4008 	str.w	r4, [r8, #8]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009774:	e9c8 4403 	strd	r4, r4, [r8, #12]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009778:	f888 401c 	strb.w	r4, [r8, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 800977c:	f888 401d 	strb.w	r4, [r8, #29]
    hcan1.Init.Prescaler = 16;
 8009780:	f8c8 3004 	str.w	r3, [r8, #4]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009784:	f7f6 ff3e 	bl	8000604 <HAL_CAN_Init>
    sFilterConfig.SlaveStartFilterBank = 14;
 8009788:	230e      	movs	r3, #14
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800978e:	e9c9 4405 	strd	r4, r4, [r9, #20]
    sFilterConfig.FilterIdLow = 0x0000;
 8009792:	e9c9 4400 	strd	r4, r4, [r9]
    sFilterConfig.FilterMaskIdLow = 0x0000; // don't think anything goes here
 8009796:	e9c9 4402 	strd	r4, r4, [r9, #8]
    sFilterConfig.SlaveStartFilterBank = 14;
 800979a:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 800979e:	f8c9 701c 	str.w	r7, [r9, #28]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80097a2:	f8c9 7010 	str.w	r7, [r9, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80097a6:	f8c9 7020 	str.w	r7, [r9, #32]
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80097aa:	f7f7 f827 	bl	80007fc <HAL_CAN_ConfigFilter>
    hcan2.Instance = CAN2;
 80097ae:	4b80      	ldr	r3, [pc, #512]	; (80099b0 <main+0x38c>)
 80097b0:	4a80      	ldr	r2, [pc, #512]	; (80099b4 <main+0x390>)
    hcan2.Init.TimeTriggeredMode = DISABLE;
 80097b2:	619c      	str	r4, [r3, #24]
    hcan2.Init.Prescaler = 16;
 80097b4:	2110      	movs	r1, #16
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80097b6:	4618      	mov	r0, r3
    hcan2.Instance = CAN2;
 80097b8:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 16;
 80097ba:	6059      	str	r1, [r3, #4]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80097bc:	e9c3 4402 	strd	r4, r4, [r3, #8]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80097c0:	e9c3 4404 	strd	r4, r4, [r3, #16]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 80097c4:	771c      	strb	r4, [r3, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 80097c6:	775c      	strb	r4, [r3, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80097c8:	f7f6 ff1c 	bl	8000604 <HAL_CAN_Init>
    sFilterConfig.SlaveStartFilterBank = 14;
 80097cc:	230e      	movs	r3, #14
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80097ce:	4640      	mov	r0, r8
 80097d0:	4649      	mov	r1, r9
    sFilterConfig.SlaveStartFilterBank = 14;
 80097d2:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80097d6:	e9c9 4405 	strd	r4, r4, [r9, #20]
    sFilterConfig.FilterIdLow = 0x0000;
 80097da:	e9c9 4400 	strd	r4, r4, [r9]
    sFilterConfig.FilterMaskIdLow = 0x0000; // don't think anything goes here
 80097de:	e9c9 4402 	strd	r4, r4, [r9, #8]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80097e2:	f8c9 4010 	str.w	r4, [r9, #16]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // allows two IDs to be set to one filter with IDLIST
 80097e6:	f8c9 701c 	str.w	r7, [r9, #28]
    sFilterConfig.FilterActivation = ENABLE;
 80097ea:	f8c9 7020 	str.w	r7, [r9, #32]
    if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80097ee:	f7f7 f805 	bl	80007fc <HAL_CAN_ConfigFilter>
    hspi1.Instance = SPI1;
 80097f2:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 80099e0 <main+0x3bc>
    hsd.Instance = SDIO;
 80097f6:	4b70      	ldr	r3, [pc, #448]	; (80099b8 <main+0x394>)
 80097f8:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 80099e4 <main+0x3c0>
 80097fc:	f8c3 e000 	str.w	lr, [r3]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8009800:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8009804:	f44f 7182 	mov.w	r1, #260	; 0x104
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8009808:	61b2      	str	r2, [r6, #24]
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800980a:	4630      	mov	r0, r6
    hspi1.Init.CRCPolynomial = 10;
 800980c:	220a      	movs	r2, #10
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800980e:	e9c6 c100 	strd	ip, r1, [r6]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009812:	e9c3 4401 	strd	r4, r4, [r3, #4]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009816:	e9c3 4403 	strd	r4, r4, [r3, #12]
    hsd.Init.ClockDiv = 0;
 800981a:	e9c3 4405 	strd	r4, r4, [r3, #20]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // correct
 800981e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // I THINK this is now correct (was 0)
 8009822:	e9c6 4704 	strd	r4, r7, [r6, #16]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009826:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800982a:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
    hspi1.Init.CRCPolynomial = 10;
 800982e:	62f2      	str	r2, [r6, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009830:	f7fa f8f4 	bl	8003a1c <HAL_SPI_Init>
    htim2.Init.Period = 19999;
 8009834:	f644 631f 	movw	r3, #19999	; 0x4e1f
    htim2.Init.Prescaler = 800;
 8009838:	f44f 7248 	mov.w	r2, #800	; 0x320
    htim2.Init.Period = 19999;
 800983c:	60eb      	str	r3, [r5, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800983e:	4628      	mov	r0, r5
    htim2.Instance = TIM2;
 8009840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    htim2.Init.Prescaler = 800;
 8009844:	606a      	str	r2, [r5, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009846:	60ac      	str	r4, [r5, #8]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009848:	612c      	str	r4, [r5, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800984a:	61ac      	str	r4, [r5, #24]
    htim2.Instance = TIM2;
 800984c:	602b      	str	r3, [r5, #0]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800984e:	e9c9 4400 	strd	r4, r4, [r9]
 8009852:	e9c9 4402 	strd	r4, r4, [r9, #8]
 8009856:	e9c9 4404 	strd	r4, r4, [r9, #16]
 800985a:	f8c9 4018 	str.w	r4, [r9, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800985e:	944a      	str	r4, [sp, #296]	; 0x128
 8009860:	944b      	str	r4, [sp, #300]	; 0x12c
 8009862:	944c      	str	r4, [sp, #304]	; 0x130
 8009864:	944d      	str	r4, [sp, #308]	; 0x134
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009866:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800986a:	f7fa fe2b 	bl	80044c4 <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800986e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009872:	a94a      	add	r1, sp, #296	; 0x128
 8009874:	4628      	mov	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009876:	934a      	str	r3, [sp, #296]	; 0x128
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009878:	f7fa ff88 	bl	800478c <HAL_TIM_ConfigClockSource>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800987c:	4628      	mov	r0, r5
 800987e:	f7fa fe4c 	bl	800451a <HAL_TIM_PWM_Init>
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009882:	a91a      	add	r1, sp, #104	; 0x68
 8009884:	4628      	mov	r0, r5
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009886:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800988a:	f04f 0860 	mov.w	r8, #96	; 0x60
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800988e:	f7fb fb45 	bl	8004f1c <HAL_TIMEx_MasterConfigSynchronization>
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009892:	220c      	movs	r2, #12
 8009894:	4649      	mov	r1, r9
 8009896:	4628      	mov	r0, r5
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009898:	e9c9 4401 	strd	r4, r4, [r9, #4]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800989c:	f8c9 4010 	str.w	r4, [r9, #16]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098a0:	f8c9 8000 	str.w	r8, [r9]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80098a4:	f7fa feac 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_MspPostInit(&htim2);
 80098a8:	4628      	mov	r0, r5
 80098aa:	f001 fbab 	bl	800b004 <HAL_TIM_MspPostInit>
    MX_FATFS_Init();
 80098ae:	f7ff fdcd 	bl	800944c <MX_FATFS_Init>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80098b2:	210c      	movs	r1, #12
 80098b4:	4628      	mov	r0, r5
 80098b6:	f7fa fe65 	bl	8004584 <HAL_TIM_PWM_Start>
    nlg5 = new NLG5;
 80098ba:	201c      	movs	r0, #28
 80098bc:	f001 fcc9 	bl	800b252 <_Znwj>
 80098c0:	4603      	mov	r3, r0
    NLG5(uint16_t const mc_limit = 160, uint16_t const oc_limit = 60, uint16_t const ov_limit = 2990) : mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit } {};
 80098c2:	f640 32ae 	movw	r2, #2990	; 0xbae
 80098c6:	7404      	strb	r4, [r0, #16]
 80098c8:	493c      	ldr	r1, [pc, #240]	; (80099bc <main+0x398>)
 80098ca:	80da      	strh	r2, [r3, #6]
 80098cc:	4a3c      	ldr	r2, [pc, #240]	; (80099c0 <main+0x39c>)
 80098ce:	f8c3 1002 	str.w	r1, [r3, #2]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80098d2:	615c      	str	r4, [r3, #20]
 80098d4:	761c      	strb	r4, [r3, #24]
    ivt = new IVT;
 80098d6:	2010      	movs	r0, #16
    nlg5 = new NLG5;
 80098d8:	6013      	str	r3, [r2, #0]
    ivt = new IVT;
 80098da:	f001 fcba 	bl	800b252 <_Znwj>
 80098de:	4603      	mov	r3, r0
 80098e0:	4a38      	ldr	r2, [pc, #224]	; (80099c4 <main+0x3a0>)
 80098e2:	60dc      	str	r4, [r3, #12]
    status = new Status(Status::Core | Status::Logging);
 80098e4:	4640      	mov	r0, r8
    ivt = new IVT;
 80098e6:	6013      	str	r3, [r2, #0]
    status = new Status(Status::Core | Status::Logging);
 80098e8:	f001 fcb3 	bl	800b252 <_Znwj>
    static constexpr  int32_t kMaxPower{ 8000000 };
    static constexpr uint16_t kMinVoltage{ 31000 }, kMaxVoltage{ 42000 }, kLimpMinVoltage{ 34000 };
    static constexpr  int16_t kMinTemp{ -1500 }, kMaxTemp{ 5900 }, kMaxChargeTemp{ 4400 };
    static constexpr    float kMaxCurrent{ 180.0f }, kAccuMinVoltage{ 490.0f };

    Status(uint8_t const opMode) : mOpMode { opMode } {
 80098ec:	4621      	mov	r1, r4
 80098ee:	4605      	mov	r5, r0
 80098f0:	2224      	movs	r2, #36	; 0x24
 80098f2:	f001 fd0c 	bl	800b30e <memset>
    Counter(uint16_t const limit) : count{ 0 }, limit{ limit } {}
 80098f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098fa:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    Status(uint8_t const opMode) : mOpMode { opMode } {
 80098fe:	2011      	movs	r0, #17
    Counter(uint16_t const limit) : count{ 0 }, limit{ limit } {}
 8009900:	f8c5 c058 	str.w	ip, [r5, #88]	; 0x58
 8009904:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
 8009908:	e9c5 330e 	strd	r3, r3, [r5, #56]	; 0x38
 800990c:	e9c5 3310 	strd	r3, r3, [r5, #64]	; 0x40
 8009910:	e9c5 3312 	strd	r3, r3, [r5, #72]	; 0x48
 8009914:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
 8009918:	65eb      	str	r3, [r5, #92]	; 0x5c
        return mOpMode;
    }

    /* Energize / De-energize Pre-charge Relay. */
    void setPrechargeState(State const preState) noexcept {
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800991a:	4622      	mov	r2, r4
    Status(uint8_t const opMode) : mOpMode { opMode } {
 800991c:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 8009920:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
 8009924:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 8009928:	4639      	mov	r1, r7
 800992a:	481f      	ldr	r0, [pc, #124]	; (80099a8 <main+0x384>)
 800992c:	f7f7 ff0e 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 8009930:	4622      	mov	r2, r4
 8009932:	2102      	movs	r1, #2
 8009934:	4818      	ldr	r0, [pc, #96]	; (8009998 <main+0x374>)
 8009936:	f7f7 ff09 	bl	800174c <HAL_GPIO_WritePin>
        return mPreState;
    }

    /* Energize / De-energize AIR (Accumulator Indicator Relay). */
    void setAIRState(State const AIRState) noexcept {
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800993a:	4622      	mov	r2, r4
        mPreState = preState;
 800993c:	f885 4026 	strb.w	r4, [r5, #38]	; 0x26
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 8009940:	2102      	movs	r1, #2
 8009942:	4819      	ldr	r0, [pc, #100]	; (80099a8 <main+0x384>)
 8009944:	f7f7 ff02 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 8009948:	4622      	mov	r2, r4
 800994a:	2104      	movs	r1, #4
 800994c:	4812      	ldr	r0, [pc, #72]	; (8009998 <main+0x374>)
 800994e:	f7f7 fefd 	bl	800174c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 8009952:	f885 4027 	strb.w	r4, [r5, #39]	; 0x27
    ltc6811 = new LTC6811(hspi1);
 8009956:	f44f 705d 	mov.w	r0, #884	; 0x374
    status = new Status(Status::Core | Status::Logging);
 800995a:	f8cb 5000 	str.w	r5, [fp]
    ltc6811 = new LTC6811(hspi1);
 800995e:	f001 fc78 	bl	800b252 <_Znwj>
 8009962:	2202      	movs	r2, #2
 8009964:	4631      	mov	r1, r6
 8009966:	4623      	mov	r3, r4
 8009968:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800996c:	9400      	str	r4, [sp, #0]
 800996e:	4605      	mov	r5, r0
 8009970:	f7fe ffc4 	bl	80088fc <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>
 8009974:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <main+0x3a4>)
    pwm_fan = new PWM_Fan;
 8009976:	4638      	mov	r0, r7
    ltc6811 = new LTC6811(hspi1);
 8009978:	601d      	str	r5, [r3, #0]
    pwm_fan = new PWM_Fan;
 800997a:	f001 fc6a 	bl	800b252 <_Znwj>
 800997e:	4603      	mov	r3, r0

class PWM_Fan {
public:
    enum Mode { Manual, Automatic };

    PWM_Fan(uint8_t const duty_cycle = kLowDutyCycle) {
 8009980:	7007      	strb	r7, [r0, #0]
            duty_cycle = kMinDutyCycle;

        /* PWM period is 20000 cycles, so the duty cycle is:
         * (duty_cycle / 100) * 20000 or, duty_cycle * 200
         * TODO: This is probably not working right! */
        TIM2->CCR4 = duty_cycle * 200;
 8009982:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f_mount(&SDFatFS, "", 0);
 8009986:	4622      	mov	r2, r4
 8009988:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    pwm_fan = new PWM_Fan;
 800998c:	4c0f      	ldr	r4, [pc, #60]	; (80099cc <main+0x3a8>)
 800998e:	6401      	str	r1, [r0, #64]	; 0x40
    f_mount(&SDFatFS, "", 0);
 8009990:	490f      	ldr	r1, [pc, #60]	; (80099d0 <main+0x3ac>)
 8009992:	e029      	b.n	80099e8 <main+0x3c4>
 8009994:	40023800 	.word	0x40023800
 8009998:	40020800 	.word	0x40020800
 800999c:	200001b4 	.word	0x200001b4
 80099a0:	2000020c 	.word	0x2000020c
 80099a4:	40020000 	.word	0x40020000
 80099a8:	40020400 	.word	0x40020400
 80099ac:	40006400 	.word	0x40006400
 80099b0:	20000108 	.word	0x20000108
 80099b4:	40006800 	.word	0x40006800
 80099b8:	20000130 	.word	0x20000130
 80099bc:	003c00a0 	.word	0x003c00a0
 80099c0:	20000254 	.word	0x20000254
 80099c4:	2000024c 	.word	0x2000024c
 80099c8:	20000250 	.word	0x20000250
 80099cc:	20000258 	.word	0x20000258
 80099d0:	0800b780 	.word	0x0800b780
 80099d4:	200000e0 	.word	0x200000e0
 80099d8:	2000025c 	.word	0x2000025c
 80099dc:	200000c4 	.word	0x200000c4
 80099e0:	40013000 	.word	0x40013000
 80099e4:	40012c00 	.word	0x40012c00
 80099e8:	4854      	ldr	r0, [pc, #336]	; (8009b3c <main+0x518>)
    pwm_fan = new PWM_Fan;
 80099ea:	6023      	str	r3, [r4, #0]
    f_mount(&SDFatFS, "", 0);
 80099ec:	f7fd fe86 	bl	80076fc <f_mount>
    f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND);
 80099f0:	2232      	movs	r2, #50	; 0x32
 80099f2:	4953      	ldr	r1, [pc, #332]	; (8009b40 <main+0x51c>)
 80099f4:	4853      	ldr	r0, [pc, #332]	; (8009b44 <main+0x520>)
 80099f6:	f7fd fec7 	bl	8007788 <f_open>
    HAL_Delay(5000);
 80099fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80099fe:	f7f6 fddf 	bl	80005c0 <HAL_Delay>
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009a02:	ed9f 8a51 	vldr	s16, [pc, #324]	; 8009b48 <main+0x524>
        HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 8009a06:	4851      	ldr	r0, [pc, #324]	; (8009b4c <main+0x528>)
 8009a08:	2101      	movs	r1, #1
 8009a0a:	f7f7 feb8 	bl	800177e <HAL_GPIO_TogglePin>
        auto op_mode = status->getOpMode();
 8009a0e:	f8db 3000 	ldr.w	r3, [fp]
 8009a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a16:	9305      	str	r3, [sp, #20]
        if (op_mode & Status::Core) {
 8009a18:	07d8      	lsls	r0, r3, #31
 8009a1a:	f100 80a1 	bmi.w	8009b60 <main+0x53c>
 8009a1e:	f003 0604 	and.w	r6, r3, #4
        if (op_mode & Status::Charging) {
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	f040 82d9 	bne.w	8009fda <main+0x9b6>
        if (op_mode & Status::Debug) {
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	071a      	lsls	r2, r3, #28
 8009a2c:	f100 8335 	bmi.w	800a09a <main+0xa76>
        if (op_mode & Status::Logging) {
 8009a30:	9b05      	ldr	r3, [sp, #20]
 8009a32:	06db      	lsls	r3, r3, #27
 8009a34:	d5e7      	bpl.n	8009a06 <main+0x3e2>
            if (BSP_SD_IsDetected()) {
 8009a36:	f7ff fcf7 	bl	8009428 <BSP_SD_IsDetected>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d0e1      	beq.n	8009a02 <main+0x3de>
                HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8009a3e:	2104      	movs	r1, #4
 8009a40:	4842      	ldr	r0, [pc, #264]	; (8009b4c <main+0x528>)
 8009a42:	f7f7 fe9c 	bl	800177e <HAL_GPIO_TogglePin>
                if (f_stat(kDirectory, &inf) == FR_NO_FILE)
 8009a46:	a914      	add	r1, sp, #80	; 0x50
 8009a48:	4841      	ldr	r0, [pc, #260]	; (8009b50 <main+0x52c>)
 8009a4a:	f7fe fa78 	bl	8007f3e <f_stat>
 8009a4e:	2804      	cmp	r0, #4
 8009a50:	f000 86dd 	beq.w	800a80e <main+0x11ea>
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 8009a54:	4b3b      	ldr	r3, [pc, #236]	; (8009b44 <main+0x520>)
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 8009a5c:	d2d1      	bcs.n	8009a02 <main+0x3de>
 8009a5e:	2232      	movs	r2, #50	; 0x32
 8009a60:	4937      	ldr	r1, [pc, #220]	; (8009b40 <main+0x51c>)
 8009a62:	4838      	ldr	r0, [pc, #224]	; (8009b44 <main+0x520>)
 8009a64:	f7fd fe90 	bl	8007788 <f_open>
 8009a68:	4604      	mov	r4, r0
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d1c9      	bne.n	8009a02 <main+0x3de>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8009a6e:	f8db 2000 	ldr.w	r2, [fp]
                    f_printf(&SDFile, "%u,", status->getUptime());
 8009a72:	4938      	ldr	r1, [pc, #224]	; (8009b54 <main+0x530>)
 8009a74:	f3bf 8f5b 	dmb	ish

    [[nodiscard]] uint32_t getUptime() const noexcept {
        /* TODO:
         * This function is returning time in centiseconds, because that's what it seemed like it was doing on the old BMS.
         * If this is wrong, remove the divisor to return milliseconds, or divide by 1000 to return seconds. */
        return mCounter / 100;
 8009a78:	2364      	movs	r3, #100	; 0x64
 8009a7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009a7c:	4831      	ldr	r0, [pc, #196]	; (8009b44 <main+0x520>)
 8009a7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a82:	f3bf 8f5b 	dmb	ish
 8009a86:	f7fe fcbd 	bl	8008404 <f_printf>
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 8009a8a:	f8db 2000 	ldr.w	r2, [fp]
 8009a8e:	4932      	ldr	r1, [pc, #200]	; (8009b58 <main+0x534>)
 8009a90:	6813      	ldr	r3, [r2, #0]
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	6853      	ldr	r3, [r2, #4]
 8009a96:	9302      	str	r3, [sp, #8]
 8009a98:	6893      	ldr	r3, [r2, #8]
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	68d3      	ldr	r3, [r2, #12]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	e9d2 3204 	ldrd	r3, r2, [r2, #16]
 8009aa4:	4827      	ldr	r0, [pc, #156]	; (8009b44 <main+0x520>)
 8009aa6:	f7fe fcad 	bl	8008404 <f_printf>
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 8009aaa:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009aae:	4621      	mov	r1, r4
 8009ab0:	a84a      	add	r0, sp, #296	; 0x128
                    UINT number_written{ 0 };
 8009ab2:	940f      	str	r4, [sp, #60]	; 0x3c
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 8009ab4:	f001 fc2b 	bl	800b30e <memset>
                    auto const cell_data = ltc6811->getCellData();
 8009ab8:	4b28      	ldr	r3, [pc, #160]	; (8009b5c <main+0x538>)
 8009aba:	6819      	ldr	r1, [r3, #0]
 8009abc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009ac0:	3166      	adds	r1, #102	; 0x66
 8009ac2:	4648      	mov	r0, r9
 8009ac4:	f001 fc18 	bl	800b2f8 <memcpy>
 8009ac8:	aeaa      	add	r6, sp, #680	; 0x2a8
 8009aca:	f1a6 0560 	sub.w	r5, r6, #96	; 0x60

      _GLIBCXX17_CONSTEXPR const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }
 8009ace:	4627      	mov	r7, r4
 8009ad0:	e003      	b.n	8009ada <main+0x4b6>
 8009ad2:	f001 fc11 	bl	800b2f8 <memcpy>
 8009ad6:	4447      	add	r7, r8
 8009ad8:	3508      	adds	r5, #8
                                buffer[position++] = voltage;
 8009ada:	f04f 0803 	mov.w	r8, #3
 8009ade:	ab4a      	add	r3, sp, #296	; 0x128
                        for (const auto& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8009ae0:	42b5      	cmp	r5, r6
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	eb03 0047 	add.w	r0, r3, r7, lsl #1
 8009ae8:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8009aec:	d1f1      	bne.n	8009ad2 <main+0x4ae>
 8009aee:	f105 0660 	add.w	r6, r5, #96	; 0x60
                    for (const auto& register_group : cell_data) // 4 voltage register groups
 8009af2:	f50d 6385 	add.w	r3, sp, #1064	; 0x428
 8009af6:	42b3      	cmp	r3, r6
 8009af8:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8009afc:	d1e5      	bne.n	8009aca <main+0x4a6>
                    f_write(&SDFile, buffer, sizeof(buffer), &number_written);
 8009afe:	ab0f      	add	r3, sp, #60	; 0x3c
 8009b00:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009b04:	a94a      	add	r1, sp, #296	; 0x128
 8009b06:	480f      	ldr	r0, [pc, #60]	; (8009b44 <main+0x520>)
 8009b08:	f7fd fffc 	bl	8007b04 <f_write>
                    auto const temp_data = ltc6811->getTempData();
 8009b0c:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <main+0x538>)
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	22c0      	movs	r2, #192	; 0xc0
 8009b12:	f501 71f3 	add.w	r1, r1, #486	; 0x1e6
 8009b16:	a81a      	add	r0, sp, #104	; 0x68
 8009b18:	f001 fbee 	bl	800b2f8 <memcpy>
 8009b1c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
                    position = 0;
 8009b20:	2100      	movs	r1, #0
 8009b22:	aa4a      	add	r2, sp, #296	; 0x128
 8009b24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8009b28:	3a02      	subs	r2, #2
 8009b2a:	1f98      	subs	r0, r3, #6
                            for (const auto temperature : IC.data) // 3 temperatures in IC.data
 8009b2c:	4283      	cmp	r3, r0
 8009b2e:	f000 8673 	beq.w	800a818 <main+0x11f4>
                                buffer[position++] = temperature;
 8009b32:	f830 4b02 	ldrh.w	r4, [r0], #2
 8009b36:	f822 4f02 	strh.w	r4, [r2, #2]!
 8009b3a:	e7f7      	b.n	8009b2c <main+0x508>
 8009b3c:	200004b0 	.word	0x200004b0
 8009b40:	0800b784 	.word	0x0800b784
 8009b44:	20000280 	.word	0x20000280
 8009b48:	4af42400 	.word	0x4af42400
 8009b4c:	40020800 	.word	0x40020800
 8009b50:	0800b794 	.word	0x0800b794
 8009b54:	0800b79c 	.word	0x0800b79c
 8009b58:	0800b7a0 	.word	0x0800b7a0
 8009b5c:	20000250 	.word	0x20000250
            auto const voltage_status_opt = ltc6811->checkVoltageStatus();
 8009b60:	4cc8      	ldr	r4, [pc, #800]	; (8009e84 <main+0x860>)
 8009b62:	a84a      	add	r0, sp, #296	; 0x128
 8009b64:	6821      	ldr	r1, [r4, #0]
 8009b66:	f7ff fa49 	bl	8008ffc <_ZN7LTC681118checkVoltageStatusEv>
            auto const temp_status_opt = ltc6811->checkTemperatureStatus();
 8009b6a:	6821      	ldr	r1, [r4, #0]
 8009b6c:	a80f      	add	r0, sp, #60	; 0x3c
 8009b6e:	f7ff fb2d 	bl	80091cc <_ZN7LTC681122checkTemperatureStatusEv>
        if (error) {
 8009b72:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
            if (!status->isError(Status::PECError, !voltage_status_opt.has_value()) && !status->isError(Status::PECError, !temp_status_opt.has_value())) {
 8009b76:	f8db 7000 	ldr.w	r7, [fp]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8360 	beq.w	800a240 <main+0xc1c>
        if (amount >= count) {
 8009b80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b84:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	f240 8372 	bls.w	800a272 <main+0xc4e>
            count -= amount;
 8009b8e:	1e5a      	subs	r2, r3, #1
 8009b90:	b292      	uxth	r2, r2
 8009b92:	f8a7 2050 	strh.w	r2, [r7, #80]	; 0x50
        if (error) {
 8009b96:	2900      	cmp	r1, #0
 8009b98:	f000 8372 	beq.w	800a280 <main+0xc5c>
        if (amount >= count) {
 8009b9c:	2a01      	cmp	r2, #1
 8009b9e:	f000 836c 	beq.w	800a27a <main+0xc56>
            count -= amount;
 8009ba2:	3b02      	subs	r3, #2
 8009ba4:	b29c      	uxth	r4, r3
                auto const voltage_status = voltage_status_opt.value(); // Hopefully the compiler is clever enough to know that no exception handling is needed here.
 8009ba6:	ae4a      	add	r6, sp, #296	; 0x128
 8009ba8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009baa:	ad14      	add	r5, sp, #80	; 0x50
 8009bac:	f8a7 4050 	strh.w	r4, [r7, #80]	; 0x50
 8009bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        if (error) {
 8009bb2:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8009bb6:	6833      	ldr	r3, [r6, #0]
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	f248 41cf 	movw	r1, #33999	; 0x84cf
 8009bbe:	4288      	cmp	r0, r1
                auto const temp_status = temp_status_opt.value();
 8009bc0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8009bc4:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8009bc8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009bca:	f240 85ae 	bls.w	800a72a <main+0x1106>
        if (amount >= count) {
 8009bce:	2a01      	cmp	r2, #1
            count = 0;
 8009bd0:	bf94      	ite	ls
 8009bd2:	2200      	movls	r2, #0
            count -= amount;
 8009bd4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009bd8:	873a      	strh	r2, [r7, #56]	; 0x38
                nlg5->setChargeCurrent(voltage_status.max);
 8009bda:	49ab      	ldr	r1, [pc, #684]	; (8009e88 <main+0x864>)
 8009bdc:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8009be0:	6808      	ldr	r0, [r1, #0]
        if (max_voltage > kChargerDis)
 8009be2:	f24a 3148 	movw	r1, #41800	; 0xa348
 8009be6:	428a      	cmp	r2, r1
 8009be8:	f240 8351 	bls.w	800a28e <main+0xc6a>
            ctrl = 0;
 8009bec:	2200      	movs	r2, #0
 8009bee:	7002      	strb	r2, [r0, #0]
    void setMode(Mode const mode) noexcept {
        this->mode = mode;
    }

    [[nodiscard]] Mode getMode() const noexcept {
        return mode;
 8009bf0:	4aa6      	ldr	r2, [pc, #664]	; (8009e8c <main+0x868>)
 8009bf2:	6812      	ldr	r2, [r2, #0]
                if (pwm_fan->getMode() == PWM_Fan::Automatic)
 8009bf4:	7812      	ldrb	r2, [r2, #0]
 8009bf6:	2a01      	cmp	r2, #1
 8009bf8:	f000 8355 	beq.w	800a2a6 <main+0xc82>
                if (op_mode & Status::Balance)
 8009bfc:	9a05      	ldr	r2, [sp, #20]
 8009bfe:	0791      	lsls	r1, r2, #30
 8009c00:	f100 8379 	bmi.w	800a2f6 <main+0xcd2>
 8009c04:	4aa2      	ldr	r2, [pc, #648]	; (8009e90 <main+0x86c>)
 8009c06:	6812      	ldr	r2, [r2, #0]
 8009c08:	f3bf 8f5b 	dmb	ish
 8009c0c:	68d2      	ldr	r2, [r2, #12]
 8009c0e:	f3bf 8f5b 	dmb	ish
                if (!ivt->isLost()) { // This, if anything, will be the cause of error false positives
 8009c12:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8009c16:	f240 837c 	bls.w	800a312 <main+0xcee>
 8009c1a:	4a9d      	ldr	r2, [pc, #628]	; (8009e90 <main+0x86c>)
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 8009c1c:	f8db 7000 	ldr.w	r7, [fp]
 8009c20:	6812      	ldr	r2, [r2, #0]
 8009c22:	f3bf 8f5b 	dmb	ish
 8009c26:	68d4      	ldr	r4, [r2, #12]
 8009c28:	f3bf 8f5b 	dmb	ish
        if (error) {
 8009c2c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
        count += amount;
 8009c30:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
        if (error) {
 8009c34:	f200 8469 	bhi.w	800a50a <main+0xee6>
        if (amount >= count) {
 8009c38:	2a01      	cmp	r2, #1
            count = 0;
 8009c3a:	bf94      	ite	ls
 8009c3c:	2200      	movls	r2, #0
            count -= amount;
 8009c3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009c42:	f8a7 2058 	strh.w	r2, [r7, #88]	; 0x58
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, __m);
 8009c46:	4a92      	ldr	r2, [pc, #584]	; (8009e90 <main+0x86c>)
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009c48:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8009c4c:	6812      	ldr	r2, [r2, #0]
 8009c4e:	f8db 7000 	ldr.w	r7, [fp]
 8009c52:	f3bf 8f5b 	dmb	ish
 8009c56:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009c5a:	edd2 7a02 	vldr	s15, [r2, #8]
 8009c5e:	f3bf 8f5b 	dmb	ish
 8009c62:	ee67 7a27 	vmul.f32	s15, s14, s15
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 8009c66:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009c6a:	eef4 7ac8 	vcmpe.f32	s15, s16
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 8009c6e:	bf8c      	ite	hi
 8009c70:	2200      	movhi	r2, #0
 8009c72:	2201      	movls	r2, #1
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 8009c78:	9206      	str	r2, [sp, #24]
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009c7a:	bfcc      	ite	gt
 8009c7c:	2401      	movgt	r4, #1
 8009c7e:	2400      	movle	r4, #0
        count += amount;
 8009c80:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
        if (error) {
 8009c84:	f300 8410 	bgt.w	800a4a8 <main+0xe84>
        if (amount >= count) {
 8009c88:	2a01      	cmp	r2, #1
            count = 0;
 8009c8a:	bf94      	ite	ls
 8009c8c:	2200      	movls	r2, #0
            count -= amount;
 8009c8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009c92:	f8a7 2048 	strh.w	r2, [r7, #72]	; 0x48
 8009c96:	4a7e      	ldr	r2, [pc, #504]	; (8009e90 <main+0x86c>)
                        !status->isError(Status::OverCurrent, ivt->I > Status::kMaxCurrent) &
 8009c98:	f8db 7000 	ldr.w	r7, [fp]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	f3bf 8f5b 	dmb	ish
 8009ca2:	6892      	ldr	r2, [r2, #8]
 8009ca4:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8009e94 <main+0x870>
 8009ca8:	f3bf 8f5b 	dmb	ish
 8009cac:	ee07 2a90 	vmov	s15, r2
 8009cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009cb4:	f084 0201 	eor.w	r2, r4, #1
                        !status->isError(Status::OverCurrent, ivt->I > Status::kMaxCurrent) &
 8009cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        !status->isError(Status::OverPower, voltage_status.sum * ivt->I > Status::kMaxPower) &
 8009cbc:	9207      	str	r2, [sp, #28]
                        !status->isError(Status::OverCurrent, ivt->I > Status::kMaxCurrent) &
 8009cbe:	bfcc      	ite	gt
 8009cc0:	2401      	movgt	r4, #1
 8009cc2:	2400      	movle	r4, #0
        count += amount;
 8009cc4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
        if (error) {
 8009cc8:	f300 83be 	bgt.w	800a448 <main+0xe24>
        if (amount >= count) {
 8009ccc:	2a01      	cmp	r2, #1
            count = 0;
 8009cce:	bf94      	ite	ls
 8009cd0:	2200      	movls	r2, #0
            count -= amount;
 8009cd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009cd6:	f8a7 2044 	strh.w	r2, [r7, #68]	; 0x44
 8009cda:	4a6d      	ldr	r2, [pc, #436]	; (8009e90 <main+0x86c>)
                        !status->isError(Status::AccuUnderVoltage, ivt->U2 < Status::kAccuMinVoltage) &
 8009cdc:	f8db 6000 	ldr.w	r6, [fp]
 8009ce0:	6812      	ldr	r2, [r2, #0]
 8009ce2:	f3bf 8f5b 	dmb	ish
 8009ce6:	6852      	ldr	r2, [r2, #4]
 8009ce8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009e98 <main+0x874>
 8009cec:	f3bf 8f5b 	dmb	ish
 8009cf0:	ee07 2a90 	vmov	s15, r2
 8009cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        !status->isError(Status::OverCurrent, ivt->I > Status::kMaxCurrent) &
 8009cfc:	f084 0201 	eor.w	r2, r4, #1
 8009d00:	9208      	str	r2, [sp, #32]
                        !status->isError(Status::AccuUnderVoltage, ivt->U2 < Status::kAccuMinVoltage) &
 8009d02:	bf4c      	ite	mi
 8009d04:	2701      	movmi	r7, #1
 8009d06:	2700      	movpl	r7, #0
        count += amount;
 8009d08:	f8b6 2054 	ldrh.w	r2, [r6, #84]	; 0x54
        if (error) {
 8009d0c:	f100 836c 	bmi.w	800a3e8 <main+0xdc4>
        if (amount >= count) {
 8009d10:	2a01      	cmp	r2, #1
            count = 0;
 8009d12:	bf94      	ite	ls
 8009d14:	2200      	movls	r2, #0
            count -= amount;
 8009d16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009d1a:	f8a6 2054 	strh.w	r2, [r6, #84]	; 0x54
                        !status->isError(Status::UnderVoltage, voltage_status.min < Status::kMinVoltage) &
 8009d1e:	f8bd 6054 	ldrh.w	r6, [sp, #84]	; 0x54
 8009d22:	f8db 4000 	ldr.w	r4, [fp]
        if (error) {
 8009d26:	f647 1117 	movw	r1, #30999	; 0x7917
 8009d2a:	428e      	cmp	r6, r1
 8009d2c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
                        !status->isError(Status::AccuUnderVoltage, ivt->U2 < Status::kAccuMinVoltage) &
 8009d2e:	f087 0701 	eor.w	r7, r7, #1
 8009d32:	f240 84c8 	bls.w	800a6c6 <main+0x10a2>
        if (amount >= count) {
 8009d36:	2a01      	cmp	r2, #1
            count = 0;
 8009d38:	bf94      	ite	ls
 8009d3a:	2200      	movls	r2, #0
            count -= amount;
 8009d3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009d40:	86a2      	strh	r2, [r4, #52]	; 0x34
                        !status->isError(Status::OverVoltage, voltage_status.max > Status::kMaxVoltage) &
 8009d42:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8009d46:	8e22      	ldrh	r2, [r4, #48]	; 0x30
                        !status->isError(Status::UnderVoltage, voltage_status.min < Status::kMinVoltage) &
 8009d48:	f647 1017 	movw	r0, #30999	; 0x7917
 8009d4c:	4286      	cmp	r6, r0
        if (error) {
 8009d4e:	f24a 4110 	movw	r1, #42000	; 0xa410
 8009d52:	bf94      	ite	ls
 8009d54:	2600      	movls	r6, #0
 8009d56:	2601      	movhi	r6, #1
 8009d58:	4588      	cmp	r8, r1
 8009d5a:	f200 8480 	bhi.w	800a65e <main+0x103a>
        if (amount >= count) {
 8009d5e:	2a01      	cmp	r2, #1
            count = 0;
 8009d60:	bf94      	ite	ls
 8009d62:	2200      	movls	r2, #0
            count -= amount;
 8009d64:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009d68:	8622      	strh	r2, [r4, #48]	; 0x30
        if (error) {
 8009d6a:	4a4c      	ldr	r2, [pc, #304]	; (8009e9c <main+0x878>)
                        !status->isError(Status::OverVoltage, voltage_status.max > Status::kMaxVoltage) &
 8009d6c:	f24a 4110 	movw	r1, #42000	; 0xa410
 8009d70:	4588      	cmp	r8, r1
 8009d72:	bf8c      	ite	hi
 8009d74:	f04f 0800 	movhi.w	r8, #0
 8009d78:	f006 0801 	andls.w	r8, r6, #1
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8009d82:	f2c0 8439 	blt.w	800a5f8 <main+0xfd4>
        if (amount >= count) {
 8009d86:	2901      	cmp	r1, #1
            count = 0;
 8009d88:	bf95      	itete	ls
 8009d8a:	2200      	movls	r2, #0
            count -= amount;
 8009d8c:	f101 31ff 	addhi.w	r1, r1, #4294967295
            count = 0;
 8009d90:	f8a4 2040 	strhls.w	r2, [r4, #64]	; 0x40
            count -= amount;
 8009d94:	f8a4 1040 	strhhi.w	r1, [r4, #64]	; 0x40
                        !status->isError(Status::UnderTemp, temp_status.min < Status::kMinTemp) &
 8009d98:	4940      	ldr	r1, [pc, #256]	; (8009e9c <main+0x878>)
 8009d9a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8009d9c:	428b      	cmp	r3, r1
 8009d9e:	bfb4      	ite	lt
 8009da0:	f04f 0800 	movlt.w	r8, #0
 8009da4:	f008 0801 	andge.w	r8, r8, #1
        if (error) {
 8009da8:	f241 730c 	movw	r3, #5900	; 0x170c
 8009dac:	429d      	cmp	r5, r3
 8009dae:	f300 83dd 	bgt.w	800a56c <main+0xf48>
        if (amount >= count) {
 8009db2:	2a01      	cmp	r2, #1
            count = 0;
 8009db4:	bf95      	itete	ls
 8009db6:	2300      	movls	r3, #0
            count -= amount;
 8009db8:	f102 32ff 	addhi.w	r2, r2, #4294967295
            count = 0;
 8009dbc:	87a3      	strhls	r3, [r4, #60]	; 0x3c
            count -= amount;
 8009dbe:	87a2      	strhhi	r2, [r4, #60]	; 0x3c
                        !status->isError(Status::OverTemp, temp_status.max > Status::kMaxTemp) &
 8009dc0:	f241 730c 	movw	r3, #5900	; 0x170c
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	429d      	cmp	r5, r3
 8009dc8:	bfcc      	ite	gt
 8009dca:	2300      	movgt	r3, #0
 8009dcc:	f008 0301 	andle.w	r3, r8, #1
 8009dd0:	401a      	ands	r2, r3
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	9a07      	ldr	r2, [sp, #28]
 8009dd6:	401a      	ands	r2, r3
 8009dd8:	4613      	mov	r3, r2
 8009dda:	9a08      	ldr	r2, [sp, #32]
 8009ddc:	401a      	ands	r2, r3
 8009dde:	4017      	ands	r7, r2
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status.max > Status::kMaxChargeTemp)) &
 8009de0:	9a05      	ldr	r2, [sp, #20]
 8009de2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8009de6:	f012 0604 	ands.w	r6, r2, #4
 8009dea:	d004      	beq.n	8009df6 <main+0x7d2>
 8009dec:	f241 1230 	movw	r2, #4400	; 0x1130
 8009df0:	4295      	cmp	r5, r2
 8009df2:	f300 84ab 	bgt.w	800a74c <main+0x1128>
        if (amount >= count) {
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f240 84a2 	bls.w	800a740 <main+0x111c>
            count -= amount;
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all isError() calls to happen, so do not replace & with &&.
 8009e04:	b167      	cbz	r7, 8009e20 <main+0x7fc>
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 8009e06:	2201      	movs	r2, #1
 8009e08:	2102      	movs	r1, #2
 8009e0a:	4825      	ldr	r0, [pc, #148]	; (8009ea0 <main+0x87c>)
 8009e0c:	f7f7 fc9e 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 8009e10:	2201      	movs	r2, #1
 8009e12:	2104      	movs	r1, #4
 8009e14:	4823      	ldr	r0, [pc, #140]	; (8009ea4 <main+0x880>)
 8009e16:	f7f7 fc99 	bl	800174c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 8009e20:	4a1b      	ldr	r2, [pc, #108]	; (8009e90 <main+0x86c>)
}

uint32_t CANTxData(uint16_t const v_min, uint16_t const v_max, int16_t const t_max) {
    TxHeader.StdId = CAN1_ID::Data;
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.DLC = 8;
 8009e22:	2708      	movs	r7, #8
 8009e24:	6811      	ldr	r1, [r2, #0]
 8009e26:	f8ca 7010 	str.w	r7, [sl, #16]
    TxHeader.IDE = CAN_ID_STD;
 8009e2a:	2400      	movs	r4, #0
    TxHeader.StdId = CAN1_ID::Data;
 8009e2c:	230a      	movs	r3, #10
 8009e2e:	f8ca 3000 	str.w	r3, [sl]
    TxHeader.IDE = CAN_ID_STD;
 8009e32:	f8ca 4008 	str.w	r4, [sl, #8]
                CANTxData(voltage_status.min, voltage_status.max, temp_status.max);
 8009e36:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8009e3a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8009e3e:	f3bf 8f5b 	dmb	ish
 8009e42:	edd1 7a00 	vldr	s15, [r1]
 8009e46:	f3bf 8f5b 	dmb	ish

    uint16_t U1 = static_cast<uint16_t>(ivt->U1); // TODO this is bad
 8009e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint8_t data[] = {
            static_cast<uint8_t>(U1 >> 8),
            static_cast<uint8_t>(U1 >> 0),
            static_cast<uint8_t>(v_min >> 8),
 8009e4e:	fa42 f107 	asr.w	r1, r2, r7
    uint16_t U1 = static_cast<uint16_t>(ivt->U1); // TODO this is bad
 8009e52:	ee17 0a90 	vmov	r0, s15
            static_cast<uint8_t>(v_min >> 0),
            static_cast<uint8_t>(v_max >> 8),
            static_cast<uint8_t>(v_max >> 0),
            static_cast<uint8_t>(t_max >> 8),
            static_cast<uint8_t>(t_max >> 0)
    };
 8009e56:	f889 2003 	strb.w	r2, [r9, #3]
    uint16_t U1 = static_cast<uint16_t>(ivt->U1); // TODO this is bad
 8009e5a:	b280      	uxth	r0, r0
            static_cast<uint8_t>(v_max >> 8),
 8009e5c:	fa43 f207 	asr.w	r2, r3, r7
    };
 8009e60:	f889 1002 	strb.w	r1, [r9, #2]
            static_cast<uint8_t>(t_max >> 8),
 8009e64:	fa45 f107 	asr.w	r1, r5, r7
            static_cast<uint8_t>(U1 >> 8),
 8009e68:	fa40 fc07 	asr.w	ip, r0, r7
    };
 8009e6c:	f889 3005 	strb.w	r3, [r9, #5]
 8009e70:	f889 2004 	strb.w	r2, [r9, #4]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009e74:	2301      	movs	r3, #1
 8009e76:	464a      	mov	r2, r9
    };
 8009e78:	f889 1006 	strb.w	r1, [r9, #6]
 8009e7c:	f889 0001 	strb.w	r0, [r9, #1]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009e80:	4651      	mov	r1, sl
 8009e82:	e011      	b.n	8009ea8 <main+0x884>
 8009e84:	20000250 	.word	0x20000250
 8009e88:	20000254 	.word	0x20000254
 8009e8c:	20000258 	.word	0x20000258
 8009e90:	2000024c 	.word	0x2000024c
 8009e94:	43340000 	.word	0x43340000
 8009e98:	43f50000 	.word	0x43f50000
 8009e9c:	fffffa24 	.word	0xfffffa24
 8009ea0:	40020400 	.word	0x40020400
 8009ea4:	40020800 	.word	0x40020800
 8009ea8:	48d0      	ldr	r0, [pc, #832]	; (800a1ec <main+0xbc8>)
    };
 8009eaa:	f889 5007 	strb.w	r5, [r9, #7]
 8009eae:	f889 c000 	strb.w	ip, [r9]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009eb2:	f7f6 fd83 	bl	80009bc <HAL_CAN_AddTxMessage>
                CANTxVoltageLimpTotal(voltage_status.sum, status->isErrorOverLimit(Status::Limping));
 8009eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eb8:	f8db 2000 	ldr.w	r2, [fp]
}

uint32_t CANTxVoltageLimpTotal(uint32_t const sum_of_cells, bool const limping) {
    TxHeader.StdId = CAN1_ID::VoltTotal;
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.DLC = 8;
 8009ebc:	f8ca 7010 	str.w	r7, [sl, #16]

    uint8_t data[8]{
        // Swap endian-ness of SOC value
        static_cast<uint8_t>(sum_of_cells >> 24),
 8009ec0:	0e1d      	lsrs	r5, r3, #24
                static_cast<uint8_t>(sum_of_cells >>  0),
                limping,
                0x0,
                0x0,
                0x0
    };
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	f365 0107 	bfi	r1, r5, #0, #8
                static_cast<uint8_t>(sum_of_cells >> 16),
 8009ec8:	0c1d      	lsrs	r5, r3, #16
    };
 8009eca:	f365 210f 	bfi	r1, r5, #8, #8
                static_cast<uint8_t>(sum_of_cells >>  8),
 8009ece:	fa23 f507 	lsr.w	r5, r3, r7
    };
 8009ed2:	f365 4117 	bfi	r1, r5, #16, #8
        return count > limit;
 8009ed6:	8f15      	ldrh	r5, [r2, #56]	; 0x38
 8009ed8:	8f52      	ldrh	r2, [r2, #58]	; 0x3a

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009eda:	48c4      	ldr	r0, [pc, #784]	; (800a1ec <main+0xbc8>)
    uint8_t data[8]{
 8009edc:	f8c9 4004 	str.w	r4, [r9, #4]
 8009ee0:	4295      	cmp	r5, r2
    };
 8009ee2:	f363 611f 	bfi	r1, r3, #24, #8
 8009ee6:	bf94      	ite	ls
 8009ee8:	2500      	movls	r5, #0
 8009eea:	2501      	movhi	r5, #1
    TxHeader.StdId = CAN1_ID::VoltTotal;
 8009eec:	270b      	movs	r7, #11
    };
 8009eee:	f8c9 1000 	str.w	r1, [r9]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	464a      	mov	r2, r9
 8009ef6:	4651      	mov	r1, sl
    TxHeader.StdId = CAN1_ID::VoltTotal;
 8009ef8:	f8ca 7000 	str.w	r7, [sl]
    TxHeader.IDE = CAN_ID_STD;
 8009efc:	f8ca 4008 	str.w	r4, [sl, #8]
    };
 8009f00:	f889 5004 	strb.w	r5, [r9, #4]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009f04:	f7f6 fd5a 	bl	80009bc <HAL_CAN_AddTxMessage>
 8009f08:	f8db 7000 	ldr.w	r7, [fp]
        return mCounter / 100;
 8009f0c:	4ab8      	ldr	r2, [pc, #736]	; (800a1f0 <main+0xbcc>)
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009f0e:	48b7      	ldr	r0, [pc, #732]	; (800a1ec <main+0xbc8>)
    TxHeader.StdId = CAN1_ID::OpMode;
 8009f10:	2508      	movs	r5, #8
    TxHeader.IDE = CAN_ID_STD;
 8009f12:	2400      	movs	r4, #0
    TxHeader.StdId = CAN1_ID::OpMode;
 8009f14:	f8ca 5000 	str.w	r5, [sl]
    TxHeader.DLC = 8;
 8009f18:	f8ca 5010 	str.w	r5, [sl, #16]
    TxHeader.IDE = CAN_ID_STD;
 8009f1c:	f8ca 4008 	str.w	r4, [sl, #8]
 8009f20:	f3bf 8f5b 	dmb	ish
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f3bf 8f5b 	dmb	ish
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
            static_cast<uint8_t>(uptime >> 24),
 8009f2e:	0f59      	lsrs	r1, r3, #29
    };
 8009f30:	4622      	mov	r2, r4
 8009f32:	f361 0207 	bfi	r2, r1, #0, #8
            static_cast<uint8_t>(uptime >> 16),
 8009f36:	0d59      	lsrs	r1, r3, #21
    };
 8009f38:	f361 220f 	bfi	r2, r1, #8, #8
            static_cast<uint8_t>(uptime >>  8),
 8009f3c:	0b59      	lsrs	r1, r3, #13
    };
 8009f3e:	f361 4217 	bfi	r2, r1, #16, #8
 8009f42:	095b      	lsrs	r3, r3, #5
 8009f44:	f363 621f 	bfi	r2, r3, #24, #8
            status->getOpMode(),
 8009f48:	f8db 3000 	ldr.w	r3, [fp]
    };
 8009f4c:	f8c9 2000 	str.w	r2, [r9]
 8009f50:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009f54:	f889 2004 	strb.w	r2, [r9, #4]
 8009f58:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009f5c:	f889 2005 	strb.w	r2, [r9, #5]
 8009f60:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8009f64:	f889 2006 	strb.w	r2, [r9, #6]
 8009f68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009f6c:	f889 3007 	strb.w	r3, [r9, #7]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009f70:	464a      	mov	r2, r9
 8009f72:	2301      	movs	r3, #1
 8009f74:	4651      	mov	r1, sl
 8009f76:	f7f6 fd21 	bl	80009bc <HAL_CAN_AddTxMessage>
    uint32_t error_change = total_error - last_error;
 8009f7a:	4a9e      	ldr	r2, [pc, #632]	; (800a1f4 <main+0xbd0>)
        return mErrorCounters[e].getCount();
 8009f7c:	f8db 3000 	ldr.w	r3, [fp]
    TxHeader.DLC = 8;
 8009f80:	f8ca 5010 	str.w	r5, [sl, #16]
 8009f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    TxHeader.IDE = CAN_ID_STD;
 8009f88:	f8ca 4008 	str.w	r4, [sl, #8]
    uint32_t error_change = total_error - last_error;
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	6812      	ldr	r2, [r2, #0]
    };
 8009f90:	f8a9 4000 	strh.w	r4, [r9]
    uint32_t error_change = total_error - last_error;
 8009f94:	eba3 0c02 	sub.w	ip, r3, r2
            static_cast<uint8_t>(total_error >>  8),
 8009f98:	fa23 f205 	lsr.w	r2, r3, r5
    last_error = total_error;
 8009f9c:	600b      	str	r3, [r1, #0]
            static_cast<uint8_t>(error_change >> 24),
 8009f9e:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
            static_cast<uint8_t>(error_change >> 16),
 8009fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
            static_cast<uint8_t>(error_change >>  8),
 8009fa6:	fa2c f505 	lsr.w	r5, ip, r5
    };
 8009faa:	f889 3003 	strb.w	r3, [r9, #3]
    TxHeader.StdId = CAN1_ID::PECError;
 8009fae:	2409      	movs	r4, #9
    };
 8009fb0:	f889 2002 	strb.w	r2, [r9, #2]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009fb4:	488d      	ldr	r0, [pc, #564]	; (800a1ec <main+0xbc8>)
    };
 8009fb6:	f889 c007 	strb.w	ip, [r9, #7]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009fba:	2301      	movs	r3, #1
 8009fbc:	464a      	mov	r2, r9
 8009fbe:	4651      	mov	r1, sl
    };
 8009fc0:	f889 e004 	strb.w	lr, [r9, #4]
 8009fc4:	f889 7005 	strb.w	r7, [r9, #5]
 8009fc8:	f889 5006 	strb.w	r5, [r9, #6]
    TxHeader.StdId = CAN1_ID::PECError;
 8009fcc:	f8ca 4000 	str.w	r4, [sl]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 8009fd0:	f7f6 fcf4 	bl	80009bc <HAL_CAN_AddTxMessage>
        if (op_mode & Status::Charging) {
 8009fd4:	2e00      	cmp	r6, #0
 8009fd6:	f43f ad27 	beq.w	8009a28 <main+0x404>
 8009fda:	4b87      	ldr	r3, [pc, #540]	; (800a1f8 <main+0xbd4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, __m);
 8009fe2:	2400      	movs	r4, #0
	return __atomic_load_n(&_M_i, __m);
 8009fe4:	7e1a      	ldrb	r2, [r3, #24]
 8009fe6:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, __m);
 8009fea:	f3bf 8f5b 	dmb	ish
 8009fee:	761c      	strb	r4, [r3, #24]
 8009ff0:	f3bf 8f5b 	dmb	ish
            if (nlg5->isChargerEvent()) {
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	f43f ad17 	beq.w	8009a28 <main+0x404>
    TxHeader.StdId = CAN1_ID::NLGACtrl;
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.DLC = 7;

    uint8_t data[7]{
        nlg5->ctrl,
 8009ffa:	4e7f      	ldr	r6, [pc, #508]	; (800a1f8 <main+0xbd4>)
    TxHeader.IDE = CAN_ID_STD;
 8009ffc:	f8ca 4008 	str.w	r4, [sl, #8]
        nlg5->ctrl,
 800a000:	6833      	ldr	r3, [r6, #0]
        static_cast<uint8_t>(nlg5->ov_limit),
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
        static_cast<uint8_t>(nlg5->oc_limit)
    };

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a002:	487a      	ldr	r0, [pc, #488]	; (800a1ec <main+0xbc8>)
    TxHeader.StdId = CAN1_ID::NLGACtrl;
 800a004:	f44f 62c3 	mov.w	r2, #1560	; 0x618
    TxHeader.DLC = 7;
 800a008:	2507      	movs	r5, #7
 800a00a:	f8ca 5010 	str.w	r5, [sl, #16]
    TxHeader.StdId = CAN1_ID::NLGACtrl;
 800a00e:	f8ca 2000 	str.w	r2, [sl]
        nlg5->ctrl,
 800a012:	781a      	ldrb	r2, [r3, #0]
    };
 800a014:	f889 2000 	strb.w	r2, [r9]
        static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800a018:	885a      	ldrh	r2, [r3, #2]
    };
 800a01a:	f889 2002 	strb.w	r2, [r9, #2]
        static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800a01e:	1212      	asrs	r2, r2, #8
    };
 800a020:	f889 2001 	strb.w	r2, [r9, #1]
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800a024:	88da      	ldrh	r2, [r3, #6]
    };
 800a026:	f889 2004 	strb.w	r2, [r9, #4]
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800a02a:	1212      	asrs	r2, r2, #8
    };
 800a02c:	f889 2003 	strb.w	r2, [r9, #3]
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800a030:	889a      	ldrh	r2, [r3, #4]
 800a032:	1212      	asrs	r2, r2, #8
    };
 800a034:	f889 2005 	strb.w	r2, [r9, #5]
 800a038:	889b      	ldrh	r3, [r3, #4]
 800a03a:	f889 3006 	strb.w	r3, [r9, #6]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a03e:	464a      	mov	r2, r9
 800a040:	2301      	movs	r3, #1
 800a042:	4651      	mov	r1, sl
 800a044:	f7f6 fcba 	bl	80009bc <HAL_CAN_AddTxMessage>
    TxHeader.StdId = CAN1_ID::NLGBCtrl;
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.DLC = 7;

    uint8_t data[7]{
        nlg5->ctrl,
 800a048:	6833      	ldr	r3, [r6, #0]
    TxHeader.DLC = 7;
 800a04a:	f8ca 5010 	str.w	r5, [sl, #16]
    TxHeader.StdId = CAN1_ID::NLGBCtrl;
 800a04e:	f44f 62c5 	mov.w	r2, #1576	; 0x628
    TxHeader.IDE = CAN_ID_STD;
 800a052:	f8ca 4008 	str.w	r4, [sl, #8]
    TxHeader.StdId = CAN1_ID::NLGBCtrl;
 800a056:	f8ca 2000 	str.w	r2, [sl]
        nlg5->ctrl,
 800a05a:	781a      	ldrb	r2, [r3, #0]
        static_cast<uint8_t>(nlg5->mc_limit),
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
        static_cast<uint8_t>(nlg5->ov_limit),
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
        static_cast<uint8_t>(nlg5->oc_limit)
    };
 800a05c:	f889 2000 	strb.w	r2, [r9]
        static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800a060:	885a      	ldrh	r2, [r3, #2]
    };
 800a062:	f889 2002 	strb.w	r2, [r9, #2]
        static_cast<uint8_t>(nlg5->mc_limit >> 8),
 800a066:	1212      	asrs	r2, r2, #8
    };
 800a068:	f889 2001 	strb.w	r2, [r9, #1]
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800a06c:	88da      	ldrh	r2, [r3, #6]
    };
 800a06e:	f889 2004 	strb.w	r2, [r9, #4]
        static_cast<uint8_t>(nlg5->ov_limit >> 8),
 800a072:	1212      	asrs	r2, r2, #8
    };
 800a074:	f889 2003 	strb.w	r2, [r9, #3]
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800a078:	889a      	ldrh	r2, [r3, #4]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a07a:	485c      	ldr	r0, [pc, #368]	; (800a1ec <main+0xbc8>)
        static_cast<uint8_t>(nlg5->oc_limit >> 8),
 800a07c:	1212      	asrs	r2, r2, #8
    };
 800a07e:	f889 2005 	strb.w	r2, [r9, #5]
 800a082:	889b      	ldrh	r3, [r3, #4]
 800a084:	f889 3006 	strb.w	r3, [r9, #6]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a088:	464a      	mov	r2, r9
 800a08a:	2301      	movs	r3, #1
 800a08c:	4651      	mov	r1, sl
 800a08e:	f7f6 fc95 	bl	80009bc <HAL_CAN_AddTxMessage>
        if (op_mode & Status::Debug) {
 800a092:	9b05      	ldr	r3, [sp, #20]
 800a094:	071a      	lsls	r2, r3, #28
 800a096:	f57f accb 	bpl.w	8009a30 <main+0x40c>
            CANTxVoltage(ltc6811->getCellData());
 800a09a:	4a58      	ldr	r2, [pc, #352]	; (800a1fc <main+0xbd8>)
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a09c:	4f53      	ldr	r7, [pc, #332]	; (800a1ec <main+0xbc8>)
            CANTxVoltage(ltc6811->getCellData());
 800a09e:	6812      	ldr	r2, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8ca 3008 	str.w	r3, [sl, #8]
    uint8_t data[8]{ 0 };
 800a0a6:	4698      	mov	r8, r3
 800a0a8:	e9c9 3300 	strd	r3, r3, [r9]
    uint8_t byte_position{ 0 };
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f102 0366 	add.w	r3, r2, #102	; 0x66
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f502 73f3 	add.w	r3, r2, #486	; 0x1e6
    TxHeader.StdId = CAN1_ID::Volt;
 800a0b8:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 800a0bc:	9306      	str	r3, [sp, #24]
    TxHeader.DLC = 8;
 800a0be:	2308      	movs	r3, #8
    TxHeader.StdId = CAN1_ID::Volt;
 800a0c0:	f8ca 1000 	str.w	r1, [sl]
    TxHeader.DLC = 8;
 800a0c4:	f8ca 3010 	str.w	r3, [sl, #16]
 800a0c8:	9b07      	ldr	r3, [sp, #28]
 800a0ca:	eb03 0608 	add.w	r6, r3, r8
 800a0ce:	1db5      	adds	r5, r6, #6
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 800a0d0:	4634      	mov	r4, r6
 800a0d2:	e001      	b.n	800a0d8 <main+0xab4>
 800a0d4:	42a5      	cmp	r5, r4
 800a0d6:	d01b      	beq.n	800a110 <main+0xaec>
 800a0d8:	f834 2b02 	ldrh.w	r2, [r4], #2
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 800a0dc:	1211      	asrs	r1, r2, #8
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	f809 1000 	strb.w	r1, [r9, r0]
                data[byte_position++] = static_cast<uint8_t>(voltage);
 800a0e4:	3002      	adds	r0, #2
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 800a0e6:	b2db      	uxtb	r3, r3
                data[byte_position++] = static_cast<uint8_t>(voltage);
 800a0e8:	b2c0      	uxtb	r0, r0
                if (byte_position == 8) {
 800a0ea:	2808      	cmp	r0, #8
                data[byte_position++] = static_cast<uint8_t>(voltage);
 800a0ec:	f809 2003 	strb.w	r2, [r9, r3]
                if (byte_position == 8) {
 800a0f0:	d1f0      	bne.n	800a0d4 <main+0xab0>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	464a      	mov	r2, r9
 800a0f6:	4651      	mov	r1, sl
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	f7f6 fc5f 	bl	80009bc <HAL_CAN_AddTxMessage>
 800a0fe:	b990      	cbnz	r0, 800a126 <main+0xb02>
                    ++TxHeader.StdId;
 800a100:	f8da 3000 	ldr.w	r3, [sl]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 800a104:	42a5      	cmp	r5, r4
                    ++TxHeader.StdId;
 800a106:	f103 0301 	add.w	r3, r3, #1
 800a10a:	f8ca 3000 	str.w	r3, [sl]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 800a10e:	d1e3      	bne.n	800a0d8 <main+0xab4>
 800a110:	3660      	adds	r6, #96	; 0x60
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 800a112:	9a06      	ldr	r2, [sp, #24]
 800a114:	eba6 0308 	sub.w	r3, r6, r8
 800a118:	429a      	cmp	r2, r3
 800a11a:	d1d8      	bne.n	800a0ce <main+0xaaa>
 800a11c:	f108 0808 	add.w	r8, r8, #8
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800a120:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
 800a124:	d1d0      	bne.n	800a0c8 <main+0xaa4>
            CANTxTemperature(ltc6811->getTempData());
 800a126:	4a35      	ldr	r2, [pc, #212]	; (800a1fc <main+0xbd8>)
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a128:	4f30      	ldr	r7, [pc, #192]	; (800a1ec <main+0xbc8>)
            CANTxTemperature(ltc6811->getTempData());
 800a12a:	6812      	ldr	r2, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 800a12c:	2300      	movs	r3, #0
 800a12e:	f8ca 3008 	str.w	r3, [sl, #8]
    uint8_t data[8]{ 0 };
 800a132:	4698      	mov	r8, r3
 800a134:	e9c9 3300 	strd	r3, r3, [r9]
    uint8_t byte_position{ 0 };
 800a138:	4618      	mov	r0, r3
 800a13a:	f502 73f3 	add.w	r3, r2, #486	; 0x1e6
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	f202 23a6 	addw	r3, r2, #678	; 0x2a6
    TxHeader.StdId = CAN1_ID::Temp;
 800a144:	f240 719c 	movw	r1, #1948	; 0x79c
 800a148:	9306      	str	r3, [sp, #24]
    TxHeader.DLC = 8;
 800a14a:	2308      	movs	r3, #8
    TxHeader.StdId = CAN1_ID::Temp;
 800a14c:	f8ca 1000 	str.w	r1, [sl]
    TxHeader.DLC = 8;
 800a150:	f8ca 3010 	str.w	r3, [sl, #16]
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	eb03 0608 	add.w	r6, r3, r8
 800a15a:	1db5      	adds	r5, r6, #6
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800a15c:	4634      	mov	r4, r6
 800a15e:	e001      	b.n	800a164 <main+0xb40>
 800a160:	42a5      	cmp	r5, r4
 800a162:	d01b      	beq.n	800a19c <main+0xb78>
 800a164:	f934 2b02 	ldrsh.w	r2, [r4], #2
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 800a168:	1211      	asrs	r1, r2, #8
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	f809 1000 	strb.w	r1, [r9, r0]
                data[byte_position++] = static_cast<uint8_t>(temperature);
 800a170:	3002      	adds	r0, #2
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 800a172:	b2db      	uxtb	r3, r3
                data[byte_position++] = static_cast<uint8_t>(temperature);
 800a174:	b2c0      	uxtb	r0, r0
                if (byte_position == 8) {
 800a176:	2808      	cmp	r0, #8
                data[byte_position++] = static_cast<uint8_t>(temperature);
 800a178:	f809 2003 	strb.w	r2, [r9, r3]
                if (byte_position == 8) {
 800a17c:	d1f0      	bne.n	800a160 <main+0xb3c>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a17e:	2301      	movs	r3, #1
 800a180:	464a      	mov	r2, r9
 800a182:	4651      	mov	r1, sl
 800a184:	4638      	mov	r0, r7
 800a186:	f7f6 fc19 	bl	80009bc <HAL_CAN_AddTxMessage>
 800a18a:	b990      	cbnz	r0, 800a1b2 <main+0xb8e>
                    ++TxHeader.StdId;
 800a18c:	f8da 3000 	ldr.w	r3, [sl]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800a190:	42a5      	cmp	r5, r4
                    ++TxHeader.StdId;
 800a192:	f103 0301 	add.w	r3, r3, #1
 800a196:	f8ca 3000 	str.w	r3, [sl]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800a19a:	d1e3      	bne.n	800a164 <main+0xb40>
 800a19c:	3660      	adds	r6, #96	; 0x60
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 800a19e:	9a06      	ldr	r2, [sp, #24]
 800a1a0:	eba6 0308 	sub.w	r3, r6, r8
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d1d8      	bne.n	800a15a <main+0xb36>
 800a1a8:	f108 0808 	add.w	r8, r8, #8
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800a1ac:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
 800a1b0:	d1d0      	bne.n	800a154 <main+0xb30>
            CANTxDCCfg(ltc6811->getSlaveCfg());
 800a1b2:	4912      	ldr	r1, [pc, #72]	; (800a1fc <main+0xbd8>)
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a1b4:	4e0d      	ldr	r6, [pc, #52]	; (800a1ec <main+0xbc8>)
            CANTxDCCfg(ltc6811->getSlaveCfg());
 800a1b6:	680c      	ldr	r4, [r1, #0]
    TxHeader.IDE = CAN_ID_STD;
 800a1b8:	2300      	movs	r3, #0
    TxHeader.DLC = 8;
 800a1ba:	2208      	movs	r2, #8
    uint8_t data[8]{ 0 };
 800a1bc:	f8cd 324a 	str.w	r3, [sp, #586]	; 0x24a
 800a1c0:	f8ad 324e 	strh.w	r3, [sp, #590]	; 0x24e
    TxHeader.IDE = CAN_ID_STD;
 800a1c4:	f8ca 3008 	str.w	r3, [sl, #8]
    TxHeader.DLC = 8;
 800a1c8:	f8ca 2010 	str.w	r2, [sl, #16]
        data[byte_position++] = IC.data[5];
 800a1cc:	7ae3      	ldrb	r3, [r4, #11]
 800a1ce:	f889 3000 	strb.w	r3, [r9]
        data[byte_position++] = IC.data[4];
 800a1d2:	7aa3      	ldrb	r3, [r4, #10]
 800a1d4:	f889 3001 	strb.w	r3, [r9, #1]
    TxHeader.StdId = CAN1_ID::DishB;
 800a1d8:	f240 7375 	movw	r3, #1909	; 0x775
 800a1dc:	f104 0566 	add.w	r5, r4, #102	; 0x66
 800a1e0:	f8ca 3000 	str.w	r3, [sl]
 800a1e4:	340e      	adds	r4, #14
        data[byte_position++] = IC.data[4];
 800a1e6:	2002      	movs	r0, #2
 800a1e8:	e00b      	b.n	800a202 <main+0xbde>
 800a1ea:	bf00      	nop
 800a1ec:	200000e0 	.word	0x200000e0
 800a1f0:	51eb851f 	.word	0x51eb851f
 800a1f4:	200000dc 	.word	0x200000dc
 800a1f8:	20000254 	.word	0x20000254
 800a1fc:	20000250 	.word	0x20000250
 800a200:	3408      	adds	r4, #8
        data[byte_position++] = IC.data[5];
 800a202:	1c43      	adds	r3, r0, #1
    for (const auto& IC : slave_cfg_rx) {
 800a204:	42ac      	cmp	r4, r5
        data[byte_position++] = IC.data[5];
 800a206:	b2db      	uxtb	r3, r3
        data[byte_position++] = IC.data[4];
 800a208:	f100 0202 	add.w	r2, r0, #2
    for (const auto& IC : slave_cfg_rx) {
 800a20c:	f43f ac10 	beq.w	8009a30 <main+0x40c>
        data[byte_position++] = IC.data[5];
 800a210:	7961      	ldrb	r1, [r4, #5]
 800a212:	f809 1000 	strb.w	r1, [r9, r0]
        data[byte_position++] = IC.data[4];
 800a216:	b2d0      	uxtb	r0, r2
        if (byte_position == 8) {
 800a218:	2808      	cmp	r0, #8
        data[byte_position++] = IC.data[4];
 800a21a:	7922      	ldrb	r2, [r4, #4]
 800a21c:	f809 2003 	strb.w	r2, [r9, r3]
        if (byte_position == 8) {
 800a220:	d1ee      	bne.n	800a200 <main+0xbdc>
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800a222:	2301      	movs	r3, #1
 800a224:	464a      	mov	r2, r9
 800a226:	4651      	mov	r1, sl
 800a228:	4630      	mov	r0, r6
 800a22a:	f7f6 fbc7 	bl	80009bc <HAL_CAN_AddTxMessage>
 800a22e:	2800      	cmp	r0, #0
 800a230:	f47f abfe 	bne.w	8009a30 <main+0x40c>
            ++TxHeader.StdId;
 800a234:	f8da 3000 	ldr.w	r3, [sl]
 800a238:	3301      	adds	r3, #1
 800a23a:	f8ca 3000 	str.w	r3, [sl]
 800a23e:	e7df      	b.n	800a200 <main+0xbdc>
        count += amount;
 800a240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a244:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
        count += amount;
 800a248:	3301      	adds	r3, #1
 800a24a:	b29b      	uxth	r3, r3
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a24c:	429a      	cmp	r2, r3
        count += amount;
 800a24e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a252:	d20a      	bcs.n	800a26a <main+0xc46>
#else
        setAIRState(Open);
        setPrechargeState(Open);
#endif
#if STOP_CORE_ON_SAFE_STATE
        mOpMode &= ~Core;
 800a254:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a258:	f023 0301 	bic.w	r3, r3, #1
#endif
#if START_DEBUG_ON_SAFE_STATE
        mOpMode |= Debug;
 800a25c:	f043 0308 	orr.w	r3, r3, #8
#endif
        mLastError = e;
 800a260:	2209      	movs	r2, #9
        mOpMode |= Debug;
 800a262:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        mLastError = e;
 800a266:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	f003 0604 	and.w	r6, r3, #4
 800a270:	e64c      	b.n	8009f0c <main+0x8e8>
 800a272:	2300      	movs	r3, #0
 800a274:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        if (error) {
 800a278:	b109      	cbz	r1, 800a27e <main+0xc5a>
            count = 0;
 800a27a:	2400      	movs	r4, #0
 800a27c:	e493      	b.n	8009ba6 <main+0x582>
        if (error) {
 800a27e:	2301      	movs	r3, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a280:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
        count += amount;
 800a284:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a288:	429a      	cmp	r2, r3
 800a28a:	d3e3      	bcc.n	800a254 <main+0xc30>
 800a28c:	e7ed      	b.n	800a26a <main+0xc46>
        else if (max_voltage < kChargerEn)
 800a28e:	f24a 211b 	movw	r1, #41499	; 0xa21b
 800a292:	428a      	cmp	r2, r1
            ctrl = C_C_EN;
 800a294:	bf9c      	itt	ls
 800a296:	2280      	movls	r2, #128	; 0x80
 800a298:	7002      	strbls	r2, [r0, #0]
 800a29a:	4acc      	ldr	r2, [pc, #816]	; (800a5cc <main+0xfa8>)
 800a29c:	6812      	ldr	r2, [r2, #0]
                if (pwm_fan->getMode() == PWM_Fan::Automatic)
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	2a01      	cmp	r2, #1
 800a2a2:	f47f acab 	bne.w	8009bfc <main+0x5d8>
        if (max_temp > kHighTemp)
 800a2a6:	f241 7270 	movw	r2, #6000	; 0x1770
 800a2aa:	4295      	cmp	r5, r2
 800a2ac:	f300 824b 	bgt.w	800a746 <main+0x1122>
        else if (max_temp < kLowTemp)
 800a2b0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 800a2b4:	f2c0 8288 	blt.w	800a7c8 <main+0x11a4>
            return kM * max_temp + kB; // y = mx + b. From old BMS code, not sure if it's good.
 800a2b8:	ee07 5a90 	vmov	s15, r5
 800a2bc:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 800a5d0 <main+0xfac>
 800a2c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a2c4:	eddf 7ac3 	vldr	s15, [pc, #780]	; 800a5d4 <main+0xfb0>
 800a2c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2d0:	edcd 7a06 	vstr	s15, [sp, #24]
 800a2d4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800a2d8:	2a64      	cmp	r2, #100	; 0x64
 800a2da:	bf28      	it	cs
 800a2dc:	2264      	movcs	r2, #100	; 0x64
 800a2de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a2e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a2e6:	00d2      	lsls	r2, r2, #3
        TIM2->CCR4 = duty_cycle * 200;
 800a2e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a2ec:	640a      	str	r2, [r1, #64]	; 0x40
                if (op_mode & Status::Balance)
 800a2ee:	9a05      	ldr	r2, [sp, #20]
 800a2f0:	0791      	lsls	r1, r2, #30
 800a2f2:	f57f ac87 	bpl.w	8009c04 <main+0x5e0>
 800a2f6:	9306      	str	r3, [sp, #24]
                    ltc6811->writeConfigRegisterGroup(ltc6811->makeDischargeConfig(voltage_status));
 800a2f8:	4bb7      	ldr	r3, [pc, #732]	; (800a5d8 <main+0xfb4>)
 800a2fa:	681c      	ldr	r4, [r3, #0]
 800a2fc:	aa14      	add	r2, sp, #80	; 0x50
 800a2fe:	4621      	mov	r1, r4
 800a300:	4648      	mov	r0, r9
 800a302:	f7fe fca1 	bl	8008c48 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE>
 800a306:	4649      	mov	r1, r9
 800a308:	4620      	mov	r0, r4
 800a30a:	f7fe fbbb 	bl	8008a84 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj12EE>
 800a30e:	9b06      	ldr	r3, [sp, #24]
 800a310:	e478      	b.n	8009c04 <main+0x5e0>
                    switch (ivt->comparePrecharge(voltage_status.sum)) {
 800a312:	4ab2      	ldr	r2, [pc, #712]	; (800a5dc <main+0xfb8>)
 800a314:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
 800a318:	6812      	ldr	r2, [r2, #0]
    std::atomic<float> I;  // Current.
    std::atomic<uint32_t> tick{ 0 }; // Time in milliseconds.

    [[nodiscard]] int comparePrecharge(uint32_t const sum_of_cells) const noexcept {
        float percentage = U1 * 100 / U2;
        float match_percentage = U2 * 100 / sum_of_cells - 100;
 800a31a:	eddf 7ab1 	vldr	s15, [pc, #708]	; 800a5e0 <main+0xfbc>
 800a31e:	f3bf 8f5b 	dmb	ish
 800a322:	6810      	ldr	r0, [r2, #0]
 800a324:	f3bf 8f5b 	dmb	ish
 800a328:	f3bf 8f5b 	dmb	ish
 800a32c:	6851      	ldr	r1, [r2, #4]
 800a32e:	f3bf 8f5b 	dmb	ish
 800a332:	f3bf 8f5b 	dmb	ish
 800a336:	ed92 6a01 	vldr	s12, [r2, #4]
 800a33a:	f3bf 8f5b 	dmb	ish
 800a33e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a342:	eef8 6a66 	vcvt.f32.u32	s13, s13
        bool voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 800a346:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
        float match_percentage = U2 * 100 / sum_of_cells - 100;
 800a34a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a34e:	ee37 7a67 	vsub.f32	s14, s14, s15
        bool voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 800a352:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	d524      	bpl.n	800a3a6 <main+0xd82>
 800a35c:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800a360:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a368:	dd1d      	ble.n	800a3a6 <main+0xd82>
        float percentage = U1 * 100 / U2;
 800a36a:	ee07 0a10 	vmov	s14, r0
 800a36e:	ee06 1a90 	vmov	s13, r1
 800a372:	ee67 7a27 	vmul.f32	s15, s14, s15

        if (percentage >= 95 && voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800a376:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800a5e4 <main+0xfc0>
        float percentage = U1 * 100 / U2;
 800a37a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
        if (percentage >= 95 && voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800a37e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a386:	db0e      	blt.n	800a3a6 <main+0xd82>
 800a388:	f3bf 8f5b 	dmb	ish
 800a38c:	6811      	ldr	r1, [r2, #0]
 800a38e:	eddf 7a96 	vldr	s15, [pc, #600]	; 800a5e8 <main+0xfc4>
 800a392:	f3bf 8f5b 	dmb	ish
 800a396:	ee07 1a10 	vmov	s14, r1
 800a39a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a2:	f300 8214 	bgt.w	800a7ce <main+0x11aa>
 800a3a6:	f3bf 8f5b 	dmb	ish
 800a3aa:	6811      	ldr	r1, [r2, #0]
            return Charged;
        else if (U1 < kPrechargeMaxEndVoltage || U2 < kPrechargeMaxEndVoltage)
 800a3ac:	eddf 7a8f 	vldr	s15, [pc, #572]	; 800a5ec <main+0xfc8>
 800a3b0:	f3bf 8f5b 	dmb	ish
 800a3b4:	ee07 1a10 	vmov	s14, r1
 800a3b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c0:	f140 81f3 	bpl.w	800a7aa <main+0x1186>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	4889      	ldr	r0, [pc, #548]	; (800a5f0 <main+0xfcc>)
 800a3ca:	9306      	str	r3, [sp, #24]
                        status->setPrechargeState(Open);
 800a3cc:	f8db 4000 	ldr.w	r4, [fp]
 800a3d0:	f7f7 f9bc 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2102      	movs	r1, #2
 800a3d8:	4886      	ldr	r0, [pc, #536]	; (800a5f4 <main+0xfd0>)
 800a3da:	f7f7 f9b7 	bl	800174c <HAL_GPIO_WritePin>
        mPreState = preState;
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 800a3e4:	9b06      	ldr	r3, [sp, #24]
 800a3e6:	e418      	b.n	8009c1a <main+0x5f6>
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a3e8:	f8b6 1056 	ldrh.w	r1, [r6, #86]	; 0x56
        count += amount;
 800a3ec:	3201      	adds	r2, #1
 800a3ee:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a3f0:	4291      	cmp	r1, r2
        count += amount;
 800a3f2:	f8a6 2054 	strh.w	r2, [r6, #84]	; 0x54
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a3f6:	f4bf ac92 	bcs.w	8009d1e <main+0x6fa>
        mAIRState = AIRState;
 800a3fa:	2400      	movs	r4, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2102      	movs	r1, #2
 800a400:	487b      	ldr	r0, [pc, #492]	; (800a5f0 <main+0xfcc>)
 800a402:	9309      	str	r3, [sp, #36]	; 0x24
 800a404:	f7f7 f9a2 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a408:	4622      	mov	r2, r4
 800a40a:	2104      	movs	r1, #4
 800a40c:	4879      	ldr	r0, [pc, #484]	; (800a5f4 <main+0xfd0>)
 800a40e:	f7f7 f99d 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a412:	4622      	mov	r2, r4
 800a414:	2101      	movs	r1, #1
 800a416:	4876      	ldr	r0, [pc, #472]	; (800a5f0 <main+0xfcc>)
        mAIRState = AIRState;
 800a418:	f886 4027 	strb.w	r4, [r6, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a41c:	f7f7 f996 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a420:	4622      	mov	r2, r4
 800a422:	2102      	movs	r1, #2
 800a424:	4873      	ldr	r0, [pc, #460]	; (800a5f4 <main+0xfd0>)
 800a426:	f7f7 f991 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a42a:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
        mPreState = preState;
 800a42e:	f886 4026 	strb.w	r4, [r6, #38]	; 0x26
        mOpMode &= ~Core;
 800a432:	f022 0201 	bic.w	r2, r2, #1
        mOpMode |= Debug;
 800a436:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a43a:	210a      	movs	r1, #10
        mOpMode |= Debug;
 800a43c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
        mLastError = e;
 800a440:	f886 1025 	strb.w	r1, [r6, #37]	; 0x25
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	e46a      	b.n	8009d1e <main+0x6fa>
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a448:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
        count += amount;
 800a44c:	3201      	adds	r2, #1
 800a44e:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a450:	4291      	cmp	r1, r2
        count += amount;
 800a452:	f8a7 2044 	strh.w	r2, [r7, #68]	; 0x44
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a456:	f4bf ac40 	bcs.w	8009cda <main+0x6b6>
        mAIRState = AIRState;
 800a45a:	2600      	movs	r6, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a45c:	2200      	movs	r2, #0
 800a45e:	2102      	movs	r1, #2
 800a460:	4863      	ldr	r0, [pc, #396]	; (800a5f0 <main+0xfcc>)
 800a462:	9308      	str	r3, [sp, #32]
 800a464:	f7f7 f972 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a468:	4632      	mov	r2, r6
 800a46a:	2104      	movs	r1, #4
 800a46c:	4861      	ldr	r0, [pc, #388]	; (800a5f4 <main+0xfd0>)
 800a46e:	f7f7 f96d 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a472:	4632      	mov	r2, r6
 800a474:	2101      	movs	r1, #1
 800a476:	485e      	ldr	r0, [pc, #376]	; (800a5f0 <main+0xfcc>)
        mAIRState = AIRState;
 800a478:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a47c:	f7f7 f966 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a480:	4632      	mov	r2, r6
 800a482:	2102      	movs	r1, #2
 800a484:	485b      	ldr	r0, [pc, #364]	; (800a5f4 <main+0xfd0>)
 800a486:	f7f7 f961 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a48a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
        mPreState = preState;
 800a48e:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26
        mOpMode &= ~Core;
 800a492:	f022 0201 	bic.w	r2, r2, #1
        mOpMode |= Debug;
 800a496:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a49a:	2106      	movs	r1, #6
        mOpMode |= Debug;
 800a49c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
        mLastError = e;
 800a4a0:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800a4a4:	9b08      	ldr	r3, [sp, #32]
 800a4a6:	e418      	b.n	8009cda <main+0x6b6>
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a4a8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
        count += amount;
 800a4ac:	3201      	adds	r2, #1
 800a4ae:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a4b0:	4291      	cmp	r1, r2
        count += amount;
 800a4b2:	f8a7 2048 	strh.w	r2, [r7, #72]	; 0x48
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a4b6:	f4bf abee 	bcs.w	8009c96 <main+0x672>
        mAIRState = AIRState;
 800a4ba:	2600      	movs	r6, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2102      	movs	r1, #2
 800a4c0:	484b      	ldr	r0, [pc, #300]	; (800a5f0 <main+0xfcc>)
 800a4c2:	9307      	str	r3, [sp, #28]
 800a4c4:	f7f7 f942 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	2104      	movs	r1, #4
 800a4cc:	4849      	ldr	r0, [pc, #292]	; (800a5f4 <main+0xfd0>)
 800a4ce:	f7f7 f93d 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4846      	ldr	r0, [pc, #280]	; (800a5f0 <main+0xfcc>)
        mAIRState = AIRState;
 800a4d8:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a4dc:	f7f7 f936 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	4843      	ldr	r0, [pc, #268]	; (800a5f4 <main+0xfd0>)
 800a4e6:	f7f7 f931 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a4ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
        mPreState = preState;
 800a4ee:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26
        mOpMode &= ~Core;
 800a4f2:	f022 0201 	bic.w	r2, r2, #1
        mOpMode |= Debug;
 800a4f6:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a4fa:	2107      	movs	r1, #7
        mOpMode |= Debug;
 800a4fc:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
        mLastError = e;
 800a500:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800a504:	9b07      	ldr	r3, [sp, #28]
 800a506:	f7ff bbc6 	b.w	8009c96 <main+0x672>
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a50a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
        count += amount;
 800a50e:	3201      	adds	r2, #1
 800a510:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a512:	4291      	cmp	r1, r2
        count += amount;
 800a514:	f8a7 2058 	strh.w	r2, [r7, #88]	; 0x58
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a518:	f4bf ab95 	bcs.w	8009c46 <main+0x622>
        mAIRState = AIRState;
 800a51c:	2600      	movs	r6, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a51e:	2200      	movs	r2, #0
 800a520:	2102      	movs	r1, #2
 800a522:	4833      	ldr	r0, [pc, #204]	; (800a5f0 <main+0xfcc>)
 800a524:	9306      	str	r3, [sp, #24]
 800a526:	f7f7 f911 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a52a:	4632      	mov	r2, r6
 800a52c:	2104      	movs	r1, #4
 800a52e:	4831      	ldr	r0, [pc, #196]	; (800a5f4 <main+0xfd0>)
 800a530:	f7f7 f90c 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a534:	4632      	mov	r2, r6
 800a536:	2101      	movs	r1, #1
 800a538:	482d      	ldr	r0, [pc, #180]	; (800a5f0 <main+0xfcc>)
        mAIRState = AIRState;
 800a53a:	f887 6027 	strb.w	r6, [r7, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a53e:	f7f7 f905 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a542:	4632      	mov	r2, r6
 800a544:	2102      	movs	r1, #2
 800a546:	482b      	ldr	r0, [pc, #172]	; (800a5f4 <main+0xfd0>)
 800a548:	f7f7 f900 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a54c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
        mPreState = preState;
 800a550:	f887 6026 	strb.w	r6, [r7, #38]	; 0x26
        mOpMode &= ~Core;
 800a554:	f022 0201 	bic.w	r2, r2, #1
        mOpMode |= Debug;
 800a558:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a55c:	210b      	movs	r1, #11
        mOpMode |= Debug;
 800a55e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
        mLastError = e;
 800a562:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800a566:	9b06      	ldr	r3, [sp, #24]
 800a568:	f7ff bb6d 	b.w	8009c46 <main+0x622>
        count += amount;
 800a56c:	1c53      	adds	r3, r2, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a56e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        count += amount;
 800a570:	b29b      	uxth	r3, r3
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a572:	429a      	cmp	r2, r3
        count += amount;
 800a574:	87a3      	strh	r3, [r4, #60]	; 0x3c
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a576:	f4bf ac23 	bcs.w	8009dc0 <main+0x79c>
        mAIRState = AIRState;
 800a57a:	2600      	movs	r6, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a57c:	2200      	movs	r2, #0
 800a57e:	2102      	movs	r1, #2
 800a580:	481b      	ldr	r0, [pc, #108]	; (800a5f0 <main+0xfcc>)
 800a582:	f7f7 f8e3 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a586:	4632      	mov	r2, r6
 800a588:	2104      	movs	r1, #4
 800a58a:	481a      	ldr	r0, [pc, #104]	; (800a5f4 <main+0xfd0>)
 800a58c:	f7f7 f8de 	bl	800174c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a590:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a594:	4632      	mov	r2, r6
 800a596:	2101      	movs	r1, #1
 800a598:	4815      	ldr	r0, [pc, #84]	; (800a5f0 <main+0xfcc>)
 800a59a:	f7f7 f8d7 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a59e:	4632      	mov	r2, r6
 800a5a0:	2102      	movs	r1, #2
 800a5a2:	4814      	ldr	r0, [pc, #80]	; (800a5f4 <main+0xfd0>)
 800a5a4:	f7f7 f8d2 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a5a8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a5ac:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
        mOpMode |= Debug;
 800a5b4:	f043 0308 	orr.w	r3, r3, #8
        mLastError = e;
 800a5b8:	2204      	movs	r2, #4
        mOpMode |= Debug;
 800a5ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mLastError = e;
 800a5be:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a5c2:	f8db 4000 	ldr.w	r4, [fp]
 800a5c6:	f7ff bbfb 	b.w	8009dc0 <main+0x79c>
 800a5ca:	bf00      	nop
 800a5cc:	20000258 	.word	0x20000258
 800a5d0:	3cb851ec 	.word	0x3cb851ec
 800a5d4:	c20c0000 	.word	0xc20c0000
 800a5d8:	20000250 	.word	0x20000250
 800a5dc:	2000024c 	.word	0x2000024c
 800a5e0:	42c80000 	.word	0x42c80000
 800a5e4:	42be0000 	.word	0x42be0000
 800a5e8:	43eb0000 	.word	0x43eb0000
 800a5ec:	43e10000 	.word	0x43e10000
 800a5f0:	40020400 	.word	0x40020400
 800a5f4:	40020800 	.word	0x40020800
        count += amount;
 800a5f8:	1c4a      	adds	r2, r1, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a5fa:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
        count += amount;
 800a5fe:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a600:	4290      	cmp	r0, r2
        count += amount;
 800a602:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a606:	f4bf abc7 	bcs.w	8009d98 <main+0x774>
        mAIRState = AIRState;
 800a60a:	2600      	movs	r6, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a60c:	2200      	movs	r2, #0
 800a60e:	2102      	movs	r1, #2
 800a610:	4897      	ldr	r0, [pc, #604]	; (800a870 <main+0x124c>)
 800a612:	9309      	str	r3, [sp, #36]	; 0x24
 800a614:	f7f7 f89a 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a618:	4632      	mov	r2, r6
 800a61a:	2104      	movs	r1, #4
 800a61c:	4895      	ldr	r0, [pc, #596]	; (800a874 <main+0x1250>)
 800a61e:	f7f7 f895 	bl	800174c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a622:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a626:	4632      	mov	r2, r6
 800a628:	2101      	movs	r1, #1
 800a62a:	4891      	ldr	r0, [pc, #580]	; (800a870 <main+0x124c>)
 800a62c:	f7f7 f88e 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a630:	4632      	mov	r2, r6
 800a632:	2102      	movs	r1, #2
 800a634:	488f      	ldr	r0, [pc, #572]	; (800a874 <main+0x1250>)
 800a636:	f7f7 f889 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a63a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        mPreState = preState;
 800a63e:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a642:	f022 0201 	bic.w	r2, r2, #1
        mOpMode |= Debug;
 800a646:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a64a:	2105      	movs	r1, #5
        mOpMode |= Debug;
 800a64c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        mLastError = e;
 800a650:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 800a654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a656:	f8db 4000 	ldr.w	r4, [fp]
 800a65a:	f7ff bb9d 	b.w	8009d98 <main+0x774>
        count += amount;
 800a65e:	3201      	adds	r2, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a660:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        count += amount;
 800a662:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a664:	4291      	cmp	r1, r2
        count += amount;
 800a666:	8622      	strh	r2, [r4, #48]	; 0x30
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a668:	f4bf ab7f 	bcs.w	8009d6a <main+0x746>
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a66c:	2200      	movs	r2, #0
 800a66e:	2102      	movs	r1, #2
 800a670:	487f      	ldr	r0, [pc, #508]	; (800a870 <main+0x124c>)
 800a672:	9309      	str	r3, [sp, #36]	; 0x24
 800a674:	f7f7 f86a 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a678:	2200      	movs	r2, #0
 800a67a:	2104      	movs	r1, #4
 800a67c:	487d      	ldr	r0, [pc, #500]	; (800a874 <main+0x1250>)
 800a67e:	f7f7 f865 	bl	800174c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a68a:	2200      	movs	r2, #0
 800a68c:	2101      	movs	r1, #1
 800a68e:	4878      	ldr	r0, [pc, #480]	; (800a870 <main+0x124c>)
 800a690:	f7f7 f85c 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a694:	2200      	movs	r2, #0
 800a696:	2102      	movs	r1, #2
 800a698:	4876      	ldr	r0, [pc, #472]	; (800a874 <main+0x1250>)
 800a69a:	f7f7 f857 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a69e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
        mPreState = preState;
 800a6a6:	f04f 0300 	mov.w	r3, #0
        mOpMode |= Debug;
 800a6aa:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a6ae:	2101      	movs	r1, #1
        mPreState = preState;
 800a6b0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        mOpMode |= Debug;
 800a6b4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        mLastError = e;
 800a6b8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 800a6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6be:	f8db 4000 	ldr.w	r4, [fp]
 800a6c2:	f7ff bb52 	b.w	8009d6a <main+0x746>
        count += amount;
 800a6c6:	3201      	adds	r2, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a6c8:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        count += amount;
 800a6ca:	b292      	uxth	r2, r2
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a6cc:	4291      	cmp	r1, r2
        count += amount;
 800a6ce:	86a2      	strh	r2, [r4, #52]	; 0x34
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a6d0:	f4bf ab37 	bcs.w	8009d42 <main+0x71e>
        mAIRState = AIRState;
 800a6d4:	f04f 0800 	mov.w	r8, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2102      	movs	r1, #2
 800a6dc:	4864      	ldr	r0, [pc, #400]	; (800a870 <main+0x124c>)
 800a6de:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e0:	f7f7 f834 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	2104      	movs	r1, #4
 800a6e8:	4862      	ldr	r0, [pc, #392]	; (800a874 <main+0x1250>)
 800a6ea:	f7f7 f82f 	bl	800174c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800a6ee:	f884 8027 	strb.w	r8, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a6f2:	4642      	mov	r2, r8
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	485e      	ldr	r0, [pc, #376]	; (800a870 <main+0x124c>)
 800a6f8:	f7f7 f828 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	2102      	movs	r1, #2
 800a700:	485c      	ldr	r0, [pc, #368]	; (800a874 <main+0x1250>)
 800a702:	f7f7 f823 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a706:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        mPreState = preState;
 800a70a:	f884 8026 	strb.w	r8, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a70e:	f022 0201 	bic.w	r2, r2, #1
        mOpMode |= Debug;
 800a712:	f042 0208 	orr.w	r2, r2, #8
        mLastError = e;
 800a716:	2102      	movs	r1, #2
        mOpMode |= Debug;
 800a718:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        mLastError = e;
 800a71c:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
 800a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a722:	f8db 4000 	ldr.w	r4, [fp]
 800a726:	f7ff bb0c 	b.w	8009d42 <main+0x71e>
        count += amount;
 800a72a:	1c51      	adds	r1, r2, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a72c:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
        count += amount;
 800a72e:	b289      	uxth	r1, r1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a730:	4288      	cmp	r0, r1
        count += amount;
 800a732:	8739      	strh	r1, [r7, #56]	; 0x38
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a734:	f4bf aa51 	bcs.w	8009bda <main+0x5b6>
        count += amount;
 800a738:	320a      	adds	r2, #10
 800a73a:	873a      	strh	r2, [r7, #56]	; 0x38
 800a73c:	f7ff ba4d 	b.w	8009bda <main+0x5b6>
            count = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	f7ff bb5d 	b.w	8009e00 <main+0x7dc>
        if (max_temp > kHighTemp)
 800a746:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a74a:	e5cd      	b.n	800a2e8 <main+0xcc4>
        count += amount;
 800a74c:	3301      	adds	r3, #1
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a74e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
        count += amount;
 800a752:	b29b      	uxth	r3, r3
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a754:	429a      	cmp	r2, r3
        count += amount;
 800a756:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
            if (mErrorCounters[e].incrementBy(1).isOverLimit()) {
 800a75a:	f4bf ab61 	bcs.w	8009e20 <main+0x7fc>
        mAIRState = AIRState;
 800a75e:	2700      	movs	r7, #0
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800a760:	2200      	movs	r2, #0
 800a762:	2102      	movs	r1, #2
 800a764:	4842      	ldr	r0, [pc, #264]	; (800a870 <main+0x124c>)
 800a766:	f7f6 fff1 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800a76a:	463a      	mov	r2, r7
 800a76c:	2104      	movs	r1, #4
 800a76e:	4841      	ldr	r0, [pc, #260]	; (800a874 <main+0x1250>)
 800a770:	f7f6 ffec 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a774:	463a      	mov	r2, r7
 800a776:	2101      	movs	r1, #1
 800a778:	483d      	ldr	r0, [pc, #244]	; (800a870 <main+0x124c>)
        mAIRState = AIRState;
 800a77a:	f884 7027 	strb.w	r7, [r4, #39]	; 0x27
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a77e:	f7f6 ffe5 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a782:	463a      	mov	r2, r7
 800a784:	2102      	movs	r1, #2
 800a786:	483b      	ldr	r0, [pc, #236]	; (800a874 <main+0x1250>)
 800a788:	f7f6 ffe0 	bl	800174c <HAL_GPIO_WritePin>
        mOpMode &= ~Core;
 800a78c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        mPreState = preState;
 800a790:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
        mOpMode &= ~Core;
 800a794:	f023 0301 	bic.w	r3, r3, #1
        mOpMode |= Debug;
 800a798:	f043 0308 	orr.w	r3, r3, #8
        mLastError = e;
 800a79c:	220c      	movs	r2, #12
        mOpMode |= Debug;
 800a79e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        mLastError = e;
 800a7a2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800a7a6:	f7ff bb3b 	b.w	8009e20 <main+0x7fc>
 800a7aa:	f3bf 8f5b 	dmb	ish
 800a7ae:	6852      	ldr	r2, [r2, #4]
 800a7b0:	f3bf 8f5b 	dmb	ish
 800a7b4:	ee07 2a10 	vmov	s14, r2
 800a7b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c0:	f53f ae00 	bmi.w	800a3c4 <main+0xda0>
 800a7c4:	f7ff ba29 	b.w	8009c1a <main+0x5f6>
        else if (max_temp < kLowTemp)
 800a7c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a7cc:	e58c      	b.n	800a2e8 <main+0xcc4>
 800a7ce:	f3bf 8f5b 	dmb	ish
 800a7d2:	6851      	ldr	r1, [r2, #4]
 800a7d4:	f3bf 8f5b 	dmb	ish
        if (percentage >= 95 && voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800a7d8:	ee07 1a10 	vmov	s14, r1
 800a7dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e4:	f77f addf 	ble.w	800a3a6 <main+0xd82>
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4820      	ldr	r0, [pc, #128]	; (800a870 <main+0x124c>)
 800a7ee:	9306      	str	r3, [sp, #24]
                        status->setPrechargeState(Closed);
 800a7f0:	f8db 4000 	ldr.w	r4, [fp]
 800a7f4:	f7f6 ffaa 	bl	800174c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	2102      	movs	r1, #2
 800a7fc:	481d      	ldr	r0, [pc, #116]	; (800a874 <main+0x1250>)
 800a7fe:	f7f6 ffa5 	bl	800174c <HAL_GPIO_WritePin>
        mPreState = preState;
 800a802:	2201      	movs	r2, #1
 800a804:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	f7ff ba06 	b.w	8009c1a <main+0x5f6>
                    f_mkdir(kDirectory);
 800a80e:	481a      	ldr	r0, [pc, #104]	; (800a878 <main+0x1254>)
 800a810:	f7fd fc79 	bl	8008106 <f_mkdir>
 800a814:	f7ff b91e 	b.w	8009a54 <main+0x430>
 800a818:	3308      	adds	r3, #8
                        for (const auto& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800a81a:	f10d 02ce 	add.w	r2, sp, #206	; 0xce
 800a81e:	429a      	cmp	r2, r3
 800a820:	f101 0103 	add.w	r1, r1, #3
 800a824:	f47f a97d 	bne.w	8009b22 <main+0x4fe>
 800a828:	ab32      	add	r3, sp, #200	; 0xc8
 800a82a:	2124      	movs	r1, #36	; 0x24
 800a82c:	aa4a      	add	r2, sp, #296	; 0x128
 800a82e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800a832:	3a02      	subs	r2, #2
 800a834:	1d9c      	adds	r4, r3, #6
 800a836:	4618      	mov	r0, r3
                            for (const auto temperature : IC.data) // 3 temperatures in IC.data
 800a838:	42a0      	cmp	r0, r4
 800a83a:	d004      	beq.n	800a846 <main+0x1222>
                                buffer[position++] = temperature;
 800a83c:	f830 5b02 	ldrh.w	r5, [r0], #2
 800a840:	f822 5f02 	strh.w	r5, [r2, #2]!
 800a844:	e7f8      	b.n	800a838 <main+0x1214>
 800a846:	3308      	adds	r3, #8
                        for (const auto& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800a848:	aa4a      	add	r2, sp, #296	; 0x128
 800a84a:	429a      	cmp	r2, r3
 800a84c:	f101 0103 	add.w	r1, r1, #3
 800a850:	d1ec      	bne.n	800a82c <main+0x1208>
                    f_write(&SDFile, buffer, sizeof(buffer) / 2, &number_written);
 800a852:	ab0f      	add	r3, sp, #60	; 0x3c
 800a854:	2290      	movs	r2, #144	; 0x90
 800a856:	a94a      	add	r1, sp, #296	; 0x128
 800a858:	4808      	ldr	r0, [pc, #32]	; (800a87c <main+0x1258>)
 800a85a:	f7fd f953 	bl	8007b04 <f_write>
                    f_sync(&SDFile);
 800a85e:	4807      	ldr	r0, [pc, #28]	; (800a87c <main+0x1258>)
 800a860:	f7fd fac5 	bl	8007dee <f_sync>
                    f_close(&SDFile);
 800a864:	4805      	ldr	r0, [pc, #20]	; (800a87c <main+0x1258>)
 800a866:	f7fd fb40 	bl	8007eea <f_close>
 800a86a:	f7ff b8ca 	b.w	8009a02 <main+0x3de>
 800a86e:	bf00      	nop
 800a870:	40020400 	.word	0x40020400
 800a874:	40020800 	.word	0x40020800
 800a878:	0800b794 	.word	0x0800b794
 800a87c:	20000280 	.word	0x20000280

0800a880 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a880:	b510      	push	{r4, lr}
    uint8_t data[8]{ 0 };
 800a882:	2400      	movs	r4, #0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a884:	b08a      	sub	sp, #40	; 0x28
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a886:	ab01      	add	r3, sp, #4
 800a888:	4621      	mov	r1, r4
 800a88a:	aa03      	add	r2, sp, #12
    uint8_t data[8]{ 0 };
 800a88c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a890:	f7f6 f96f 	bl	8000b72 <HAL_CAN_GetRxMessage>
 800a894:	b968      	cbnz	r0, 800a8b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
        switch(static_cast<CAN0_ID>(RxHeader.StdId)) {
 800a896:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a89a:	f240 5222 	movw	r2, #1314	; 0x522
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d009      	beq.n	800a8b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 800a8a2:	f240 5223 	movw	r2, #1315	; 0x523
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d032      	beq.n	800a910 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 800a8aa:	f240 5221 	movw	r2, #1313	; 0x521
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d01c      	beq.n	800a8ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
}
 800a8b2:	b00a      	add	sp, #40	; 0x28
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	f8dd 3006 	ldr.w	r3, [sp, #6]
            ivt->U1 = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
 800a8ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800a934 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a8be:	4a1e      	ldr	r2, [pc, #120]	; (800a938 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800a8c0:	ba1b      	rev	r3, r3
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }
 800a8ca:	6813      	ldr	r3, [r2, #0]
 800a8cc:	f3bf 8f5b 	dmb	ish
 800a8d0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a8d4:	edc3 7a00 	vstr	s15, [r3]
 800a8d8:	f3bf 8f5b 	dmb	ish
 800a8dc:	6813      	ldr	r3, [r2, #0]
 800a8de:	f3bf 8f5b 	dmb	ish
 800a8e2:	60d8      	str	r0, [r3, #12]
 800a8e4:	f3bf 8f5b 	dmb	ish
}
 800a8e8:	b00a      	add	sp, #40	; 0x28
 800a8ea:	bd10      	pop	{r4, pc}
 800a8ec:	f8dd 3006 	ldr.w	r3, [sp, #6]
            ivt->I = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
 800a8f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a934 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a8f4:	4a10      	ldr	r2, [pc, #64]	; (800a938 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800a8f6:	ba1b      	rev	r3, r3
 800a8f8:	ee07 3a90 	vmov	s15, r3
 800a8fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a900:	6813      	ldr	r3, [r2, #0]
 800a902:	f3bf 8f5b 	dmb	ish
 800a906:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a90a:	edc3 7a02 	vstr	s15, [r3, #8]
 800a90e:	e7e3      	b.n	800a8d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 800a910:	f8dd 3006 	ldr.w	r3, [sp, #6]
            ivt->U2 = static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f;
 800a914:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a934 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a918:	4a07      	ldr	r2, [pc, #28]	; (800a938 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800a91a:	ba1b      	rev	r3, r3
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a924:	6813      	ldr	r3, [r2, #0]
 800a926:	f3bf 8f5b 	dmb	ish
 800a92a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a92e:	edc3 7a01 	vstr	s15, [r3, #4]
 800a932:	e7d1      	b.n	800a8d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 800a934:	447a0000 	.word	0x447a0000
 800a938:	2000024c 	.word	0x2000024c

0800a93c <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a93c:	b570      	push	{r4, r5, r6, lr}
    uint8_t data[8]{ 0 };
 800a93e:	2400      	movs	r4, #0
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800a940:	b08a      	sub	sp, #40	; 0x28
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a942:	ab01      	add	r3, sp, #4
 800a944:	4621      	mov	r1, r4
 800a946:	aa03      	add	r2, sp, #12
    uint8_t data[8]{ 0 };
 800a948:	e9cd 4401 	strd	r4, r4, [sp, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800a94c:	f7f6 f911 	bl	8000b72 <HAL_CAN_GetRxMessage>
 800a950:	bb18      	cbnz	r0, 800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
        switch(static_cast<CAN1_ID>(RxHeader.StdId)) {
 800a952:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a956:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800a95a:	d047      	beq.n	800a9ec <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
 800a95c:	d94c      	bls.n	800a9f8 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a95e:	f240 726e 	movw	r2, #1902	; 0x76e
 800a962:	4293      	cmp	r3, r2
 800a964:	d01b      	beq.n	800a99e <HAL_CAN_RxFifo1MsgPendingCallback+0x62>
 800a966:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d115      	bne.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
            switch (data[3]) {
 800a96e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800a972:	2d01      	cmp	r5, #1
 800a974:	4604      	mov	r4, r0
 800a976:	d048      	beq.n	800aa0a <HAL_CAN_RxFifo1MsgPendingCallback+0xce>
 800a978:	2d02      	cmp	r5, #2
 800a97a:	d10e      	bne.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
                if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800a97c:	4602      	mov	r2, r0
 800a97e:	4940      	ldr	r1, [pc, #256]	; (800aa80 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800a980:	4840      	ldr	r0, [pc, #256]	; (800aa84 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800a982:	f7fc febb 	bl	80076fc <f_mount>
 800a986:	4604      	mov	r4, r0
 800a988:	b938      	cbnz	r0, 800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
                    f_unlink(kFile);
 800a98a:	483f      	ldr	r0, [pc, #252]	; (800aa88 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 800a98c:	f7fd fb10 	bl	8007fb0 <f_unlink>
                    f_mount(NULL, "", 0); /* Unmount */
 800a990:	4622      	mov	r2, r4
 800a992:	4620      	mov	r0, r4
 800a994:	493a      	ldr	r1, [pc, #232]	; (800aa80 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800a996:	f7fc feb1 	bl	80076fc <f_mount>
}
 800a99a:	b00a      	add	sp, #40	; 0x28
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
            status->setOpMode(data[2]);
 800a99e:	4a3b      	ldr	r2, [pc, #236]	; (800aa8c <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
            ltc6811->setDischargeMode(static_cast<LTC6811::DischargeMode>(data[3]));
 800a9a0:	4b3b      	ldr	r3, [pc, #236]	; (800aa90 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
        mOpMode = opMode;
 800a9a2:	6810      	ldr	r0, [r2, #0]
        this->discharge_mode = discharge_mode;
 800a9a4:	681a      	ldr	r2, [r3, #0]
            nlg5->oc_limit = data[6];
 800a9a6:	4b3b      	ldr	r3, [pc, #236]	; (800aa94 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800a9a8:	f89d 4006 	ldrb.w	r4, [sp, #6]
 800a9ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800a9b0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	7111      	strb	r1, [r2, #4]
 800a9b8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800a9bc:	809a      	strh	r2, [r3, #4]
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 800a9be:	4a36      	ldr	r2, [pc, #216]	; (800aa98 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 800a9c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
        this->mode = mode;
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	f023 017f 	bic.w	r1, r3, #127	; 0x7f
            if (pwm_fan->getMode() == PWM_Fan::Manual)
 800a9ca:	061b      	lsls	r3, r3, #24
 800a9cc:	7011      	strb	r1, [r2, #0]
 800a9ce:	d4e4      	bmi.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
        TIM2->CCR4 = duty_cycle * 200;
 800a9d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800a9d4:	2b64      	cmp	r3, #100	; 0x64
 800a9d6:	bf28      	it	cs
 800a9d8:	2364      	movcs	r3, #100	; 0x64
 800a9da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a9ea:	e7d6      	b.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
            nlg5->b_buffer[0] = data[0];
 800a9ec:	4b29      	ldr	r3, [pc, #164]	; (800aa94 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800a9ee:	9a01      	ldr	r2, [sp, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60da      	str	r2, [r3, #12]
}
 800a9f4:	b00a      	add	sp, #40	; 0x28
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
        switch(static_cast<CAN1_ID>(RxHeader.StdId)) {
 800a9f8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800a9fc:	d1cd      	bne.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
            nlg5->a_buffer[0] = data[0];
 800a9fe:	4b25      	ldr	r3, [pc, #148]	; (800aa94 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800aa00:	9a01      	ldr	r2, [sp, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	609a      	str	r2, [r3, #8]
}
 800aa06:	b00a      	add	sp, #40	; 0x28
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
                if (f_mount(&SDFatFS, "", 0) == FR_OK) {
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	491c      	ldr	r1, [pc, #112]	; (800aa80 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800aa0e:	481d      	ldr	r0, [pc, #116]	; (800aa84 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800aa10:	f7fc fe74 	bl	80076fc <f_mount>
 800aa14:	4606      	mov	r6, r0
 800aa16:	bb10      	cbnz	r0, 800aa5e <HAL_CAN_RxFifo1MsgPendingCallback+0x122>
                    CANTxVolumeSize(f_size(&SDFile));
 800aa18:	4b20      	ldr	r3, [pc, #128]	; (800aa9c <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
    else
        return Success;
}

uint32_t CANTxVolumeSize(uint32_t const size_of_log) {
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800aa1a:	4821      	ldr	r0, [pc, #132]	; (800aaa0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
                    CANTxVolumeSize(f_size(&SDFile));
 800aa1c:	68d9      	ldr	r1, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 800aa1e:	6086      	str	r6, [r0, #8]
    TxHeader.DLC = 4;

    uint8_t data[] = {
            static_cast<uint8_t>(size_of_log >> 24),
 800aa20:	0e0a      	lsrs	r2, r1, #24
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >>  8),
            static_cast<uint8_t>(size_of_log >>  0)
    };
 800aa22:	4633      	mov	r3, r6
 800aa24:	f362 0307 	bfi	r3, r2, #0, #8
            static_cast<uint8_t>(size_of_log >> 16),
 800aa28:	0c0a      	lsrs	r2, r1, #16
    };
 800aa2a:	f362 230f 	bfi	r3, r2, #8, #8
            static_cast<uint8_t>(size_of_log >>  8),
 800aa2e:	0a0a      	lsrs	r2, r1, #8
    };
 800aa30:	f362 4317 	bfi	r3, r2, #16, #8
 800aa34:	aa0a      	add	r2, sp, #40	; 0x28
 800aa36:	f361 631f 	bfi	r3, r1, #24, #8
    TxHeader.DLC = 4;
 800aa3a:	2404      	movs	r4, #4
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800aa3c:	f240 71b5 	movw	r1, #1973	; 0x7b5
    };
 800aa40:	f842 3d28 	str.w	r3, [r2, #-40]!
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800aa44:	6001      	str	r1, [r0, #0]
    TxHeader.DLC = 4;
 800aa46:	6104      	str	r4, [r0, #16]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800aa48:	4601      	mov	r1, r0
 800aa4a:	462b      	mov	r3, r5
 800aa4c:	4815      	ldr	r0, [pc, #84]	; (800aaa4 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 800aa4e:	f7f5 ffb5 	bl	80009bc <HAL_CAN_AddTxMessage>
                    f_mount(NULL, "", 0); /* Unmount */
 800aa52:	4632      	mov	r2, r6
 800aa54:	4630      	mov	r0, r6
 800aa56:	490a      	ldr	r1, [pc, #40]	; (800aa80 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 800aa58:	f7fc fe50 	bl	80076fc <f_mount>
 800aa5c:	e79d      	b.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800aa5e:	4e10      	ldr	r6, [pc, #64]	; (800aaa0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
    };
 800aa60:	aa0a      	add	r2, sp, #40	; 0x28
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800aa62:	f240 70b5 	movw	r0, #1973	; 0x7b5
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800aa66:	462b      	mov	r3, r5
    TxHeader.StdId = CAN1_ID::LoggerResp;
 800aa68:	6030      	str	r0, [r6, #0]
    TxHeader.DLC = 4;
 800aa6a:	2504      	movs	r5, #4
    };
 800aa6c:	f842 4d28 	str.w	r4, [r2, #-40]!
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800aa70:	4631      	mov	r1, r6
 800aa72:	480c      	ldr	r0, [pc, #48]	; (800aaa4 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
    TxHeader.IDE = CAN_ID_STD;
 800aa74:	60b4      	str	r4, [r6, #8]
    TxHeader.DLC = 4;
 800aa76:	6135      	str	r5, [r6, #16]
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK)
 800aa78:	f7f5 ffa0 	bl	80009bc <HAL_CAN_AddTxMessage>
 800aa7c:	e78d      	b.n	800a99a <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
 800aa7e:	bf00      	nop
 800aa80:	0800b780 	.word	0x0800b780
 800aa84:	200004b0 	.word	0x200004b0
 800aa88:	0800b784 	.word	0x0800b784
 800aa8c:	2000025c 	.word	0x2000025c
 800aa90:	20000250 	.word	0x20000250
 800aa94:	20000254 	.word	0x20000254
 800aa98:	20000258 	.word	0x20000258
 800aa9c:	20000280 	.word	0x20000280
 800aaa0:	200000c4 	.word	0x200000c4
 800aaa4:	200000e0 	.word	0x200000e0

0800aaa8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aab2:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <SD_CheckStatus+0x38>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800aab8:	f7fe fc98 	bl	80093ec <BSP_SD_GetCardState>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d107      	bne.n	800aad2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <SD_CheckStatus+0x38>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f023 0301 	bic.w	r3, r3, #1
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <SD_CheckStatus+0x38>)
 800aad0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aad2:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <SD_CheckStatus+0x38>)
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	b2db      	uxtb	r3, r3
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000005 	.word	0x20000005

0800aae4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800aaee:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <SD_initialize+0x38>)
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aaf4:	f7fe fc18 	bl	8009328 <BSP_SD_Init>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d107      	bne.n	800ab0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff ffd1 	bl	800aaa8 <SD_CheckStatus>
 800ab06:	4603      	mov	r3, r0
 800ab08:	461a      	mov	r2, r3
 800ab0a:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <SD_initialize+0x38>)
 800ab0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ab0e:	4b03      	ldr	r3, [pc, #12]	; (800ab1c <SD_initialize+0x38>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	b2db      	uxtb	r3, r3
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20000005 	.word	0x20000005

0800ab20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff ffbb 	bl	800aaa8 <SD_CheckStatus>
 800ab32:	4603      	mov	r3, r0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ab50:	f04f 33ff 	mov.w	r3, #4294967295
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	68b8      	ldr	r0, [r7, #8]
 800ab5a:	f7fe fc0b 	bl	8009374 <BSP_SD_ReadBlocks>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d107      	bne.n	800ab74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ab64:	bf00      	nop
 800ab66:	f7fe fc41 	bl	80093ec <BSP_SD_GetCardState>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1fa      	bne.n	800ab66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b086      	sub	sp, #24
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	68b8      	ldr	r0, [r7, #8]
 800ab9c:	f7fe fc08 	bl	80093b0 <BSP_SD_WriteBlocks>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d107      	bne.n	800abb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800aba6:	bf00      	nop
 800aba8:	f7fe fc20 	bl	80093ec <BSP_SD_GetCardState>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1fa      	bne.n	800aba8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08c      	sub	sp, #48	; 0x30
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	603a      	str	r2, [r7, #0]
 800abca:	71fb      	strb	r3, [r7, #7]
 800abcc:	460b      	mov	r3, r1
 800abce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abd6:	4b25      	ldr	r3, [pc, #148]	; (800ac6c <SD_ioctl+0xac>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <SD_ioctl+0x28>
 800abe4:	2303      	movs	r3, #3
 800abe6:	e03c      	b.n	800ac62 <SD_ioctl+0xa2>

  switch (cmd)
 800abe8:	79bb      	ldrb	r3, [r7, #6]
 800abea:	2b03      	cmp	r3, #3
 800abec:	d834      	bhi.n	800ac58 <SD_ioctl+0x98>
 800abee:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <SD_ioctl+0x34>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac05 	.word	0x0800ac05
 800abf8:	0800ac0d 	.word	0x0800ac0d
 800abfc:	0800ac25 	.word	0x0800ac25
 800ac00:	0800ac3f 	.word	0x0800ac3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac0a:	e028      	b.n	800ac5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac0c:	f107 030c 	add.w	r3, r7, #12
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fe fbfb 	bl	800940c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac22:	e01c      	b.n	800ac5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe fbef 	bl	800940c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac3c:	e00f      	b.n	800ac5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ac3e:	f107 030c 	add.w	r3, r7, #12
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fbe2 	bl	800940c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	0a5a      	lsrs	r2, r3, #9
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ac56:	e002      	b.n	800ac5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ac58:	2304      	movs	r3, #4
 800ac5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ac5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3730      	adds	r7, #48	; 0x30
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000005 	.word	0x20000005

0800ac70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac76:	2300      	movs	r3, #0
 800ac78:	607b      	str	r3, [r7, #4]
 800ac7a:	4b10      	ldr	r3, [pc, #64]	; (800acbc <HAL_MspInit+0x4c>)
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7e:	4a0f      	ldr	r2, [pc, #60]	; (800acbc <HAL_MspInit+0x4c>)
 800ac80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac84:	6453      	str	r3, [r2, #68]	; 0x44
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <HAL_MspInit+0x4c>)
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac8e:	607b      	str	r3, [r7, #4]
 800ac90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac92:	2300      	movs	r3, #0
 800ac94:	603b      	str	r3, [r7, #0]
 800ac96:	4b09      	ldr	r3, [pc, #36]	; (800acbc <HAL_MspInit+0x4c>)
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	4a08      	ldr	r2, [pc, #32]	; (800acbc <HAL_MspInit+0x4c>)
 800ac9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca0:	6413      	str	r3, [r2, #64]	; 0x40
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <HAL_MspInit+0x4c>)
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acaa:	603b      	str	r3, [r7, #0]
 800acac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	40023800 	.word	0x40023800

0800acc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08c      	sub	sp, #48	; 0x30
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acc8:	f107 031c 	add.w	r3, r7, #28
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	605a      	str	r2, [r3, #4]
 800acd2:	609a      	str	r2, [r3, #8]
 800acd4:	60da      	str	r2, [r3, #12]
 800acd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a4b      	ldr	r2, [pc, #300]	; (800ae0c <HAL_CAN_MspInit+0x14c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d13e      	bne.n	800ad60 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800ace2:	4b4b      	ldr	r3, [pc, #300]	; (800ae10 <HAL_CAN_MspInit+0x150>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3301      	adds	r3, #1
 800ace8:	4a49      	ldr	r2, [pc, #292]	; (800ae10 <HAL_CAN_MspInit+0x150>)
 800acea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800acec:	4b48      	ldr	r3, [pc, #288]	; (800ae10 <HAL_CAN_MspInit+0x150>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d10d      	bne.n	800ad10 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800acf4:	2300      	movs	r3, #0
 800acf6:	61bb      	str	r3, [r7, #24]
 800acf8:	4b46      	ldr	r3, [pc, #280]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	4a45      	ldr	r2, [pc, #276]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800acfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad02:	6413      	str	r3, [r2, #64]	; 0x40
 800ad04:	4b43      	ldr	r3, [pc, #268]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
 800ad14:	4b3f      	ldr	r3, [pc, #252]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad18:	4a3e      	ldr	r2, [pc, #248]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad1a:	f043 0301 	orr.w	r3, r3, #1
 800ad1e:	6313      	str	r3, [r2, #48]	; 0x30
 800ad20:	4b3c      	ldr	r3, [pc, #240]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
 800ad2a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad32:	2302      	movs	r3, #2
 800ad34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ad3e:	2309      	movs	r3, #9
 800ad40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad42:	f107 031c 	add.w	r3, r7, #28
 800ad46:	4619      	mov	r1, r3
 800ad48:	4833      	ldr	r0, [pc, #204]	; (800ae18 <HAL_CAN_MspInit+0x158>)
 800ad4a:	f7f6 fb55 	bl	80013f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	2014      	movs	r0, #20
 800ad54:	f7f6 fb19 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ad58:	2014      	movs	r0, #20
 800ad5a:	f7f6 fb32 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800ad5e:	e050      	b.n	800ae02 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a2d      	ldr	r2, [pc, #180]	; (800ae1c <HAL_CAN_MspInit+0x15c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d14b      	bne.n	800ae02 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	4b29      	ldr	r3, [pc, #164]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad72:	4a28      	ldr	r2, [pc, #160]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad78:	6413      	str	r3, [r2, #64]	; 0x40
 800ad7a:	4b26      	ldr	r3, [pc, #152]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800ad86:	4b22      	ldr	r3, [pc, #136]	; (800ae10 <HAL_CAN_MspInit+0x150>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	4a20      	ldr	r2, [pc, #128]	; (800ae10 <HAL_CAN_MspInit+0x150>)
 800ad8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800ad90:	4b1f      	ldr	r3, [pc, #124]	; (800ae10 <HAL_CAN_MspInit+0x150>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d10d      	bne.n	800adb4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	4b1d      	ldr	r3, [pc, #116]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ad9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada0:	4a1c      	ldr	r2, [pc, #112]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800ada2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ada6:	6413      	str	r3, [r2, #64]	; 0x40
 800ada8:	4b1a      	ldr	r3, [pc, #104]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800adb4:	2300      	movs	r3, #0
 800adb6:	60bb      	str	r3, [r7, #8]
 800adb8:	4b16      	ldr	r3, [pc, #88]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800adbe:	f043 0302 	orr.w	r3, r3, #2
 800adc2:	6313      	str	r3, [r2, #48]	; 0x30
 800adc4:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <HAL_CAN_MspInit+0x154>)
 800adc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc8:	f003 0302 	and.w	r3, r3, #2
 800adcc:	60bb      	str	r3, [r7, #8]
 800adce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800add0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800add4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add6:	2302      	movs	r3, #2
 800add8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adda:	2300      	movs	r3, #0
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adde:	2303      	movs	r3, #3
 800ade0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800ade2:	2309      	movs	r3, #9
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ade6:	f107 031c 	add.w	r3, r7, #28
 800adea:	4619      	mov	r1, r3
 800adec:	480c      	ldr	r0, [pc, #48]	; (800ae20 <HAL_CAN_MspInit+0x160>)
 800adee:	f7f6 fb03 	bl	80013f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800adf2:	2200      	movs	r2, #0
 800adf4:	2100      	movs	r1, #0
 800adf6:	2041      	movs	r0, #65	; 0x41
 800adf8:	f7f6 fac7 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800adfc:	2041      	movs	r0, #65	; 0x41
 800adfe:	f7f6 fae0 	bl	80013c2 <HAL_NVIC_EnableIRQ>
}
 800ae02:	bf00      	nop
 800ae04:	3730      	adds	r7, #48	; 0x30
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	40006400 	.word	0x40006400
 800ae10:	20000260 	.word	0x20000260
 800ae14:	40023800 	.word	0x40023800
 800ae18:	40020000 	.word	0x40020000
 800ae1c:	40006800 	.word	0x40006800
 800ae20:	40020400 	.word	0x40020400

0800ae24 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	; 0x28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	2200      	movs	r2, #0
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	609a      	str	r2, [r3, #8]
 800ae38:	60da      	str	r2, [r3, #12]
 800ae3a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a28      	ldr	r2, [pc, #160]	; (800aee4 <HAL_SD_MspInit+0xc0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d14a      	bne.n	800aedc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	4b27      	ldr	r3, [pc, #156]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4e:	4a26      	ldr	r2, [pc, #152]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae54:	6453      	str	r3, [r2, #68]	; 0x44
 800ae56:	4b24      	ldr	r3, [pc, #144]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
 800ae66:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	4a1f      	ldr	r2, [pc, #124]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae6c:	f043 0304 	orr.w	r3, r3, #4
 800ae70:	6313      	str	r3, [r2, #48]	; 0x30
 800ae72:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	f003 0304 	and.w	r3, r3, #4
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	4b19      	ldr	r3, [pc, #100]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae86:	4a18      	ldr	r2, [pc, #96]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae88:	f043 0308 	orr.w	r3, r3, #8
 800ae8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae8e:	4b16      	ldr	r3, [pc, #88]	; (800aee8 <HAL_SD_MspInit+0xc4>)
 800ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae92:	f003 0308 	and.w	r3, r3, #8
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800ae9a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800ae9e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aea0:	2302      	movs	r3, #2
 800aea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea4:	2300      	movs	r3, #0
 800aea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800aeac:	230c      	movs	r3, #12
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aeb0:	f107 0314 	add.w	r3, r7, #20
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	480d      	ldr	r0, [pc, #52]	; (800aeec <HAL_SD_MspInit+0xc8>)
 800aeb8:	f7f6 fa9e 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aebc:	2304      	movs	r3, #4
 800aebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec0:	2302      	movs	r3, #2
 800aec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aec8:	2303      	movs	r3, #3
 800aeca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800aecc:	230c      	movs	r3, #12
 800aece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aed0:	f107 0314 	add.w	r3, r7, #20
 800aed4:	4619      	mov	r1, r3
 800aed6:	4806      	ldr	r0, [pc, #24]	; (800aef0 <HAL_SD_MspInit+0xcc>)
 800aed8:	f7f6 fa8e 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800aedc:	bf00      	nop
 800aede:	3728      	adds	r7, #40	; 0x28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	40012c00 	.word	0x40012c00
 800aee8:	40023800 	.word	0x40023800
 800aeec:	40020800 	.word	0x40020800
 800aef0:	40020c00 	.word	0x40020c00

0800aef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08a      	sub	sp, #40	; 0x28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aefc:	f107 0314 	add.w	r3, r7, #20
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	605a      	str	r2, [r3, #4]
 800af06:	609a      	str	r2, [r3, #8]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a28      	ldr	r2, [pc, #160]	; (800afb4 <HAL_SPI_MspInit+0xc0>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d149      	bne.n	800afaa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800af16:	2300      	movs	r3, #0
 800af18:	613b      	str	r3, [r7, #16]
 800af1a:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1e:	4a26      	ldr	r2, [pc, #152]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af24:	6453      	str	r3, [r2, #68]	; 0x44
 800af26:	4b24      	ldr	r3, [pc, #144]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af2e:	613b      	str	r3, [r7, #16]
 800af30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
 800af36:	4b20      	ldr	r3, [pc, #128]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	4a1f      	ldr	r2, [pc, #124]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	6313      	str	r3, [r2, #48]	; 0x30
 800af42:	4b1d      	ldr	r3, [pc, #116]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af4e:	2300      	movs	r3, #0
 800af50:	60bb      	str	r3, [r7, #8]
 800af52:	4b19      	ldr	r3, [pc, #100]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	4a18      	ldr	r2, [pc, #96]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af58:	f043 0302 	orr.w	r3, r3, #2
 800af5c:	6313      	str	r3, [r2, #48]	; 0x30
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <HAL_SPI_MspInit+0xc4>)
 800af60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	60bb      	str	r3, [r7, #8]
 800af68:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800af6a:	2310      	movs	r3, #16
 800af6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af6e:	2302      	movs	r3, #2
 800af70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af72:	2300      	movs	r3, #0
 800af74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af76:	2303      	movs	r3, #3
 800af78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800af7a:	2305      	movs	r3, #5
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af7e:	f107 0314 	add.w	r3, r7, #20
 800af82:	4619      	mov	r1, r3
 800af84:	480d      	ldr	r0, [pc, #52]	; (800afbc <HAL_SPI_MspInit+0xc8>)
 800af86:	f7f6 fa37 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800af8a:	2338      	movs	r3, #56	; 0x38
 800af8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af8e:	2302      	movs	r3, #2
 800af90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af92:	2300      	movs	r3, #0
 800af94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af96:	2303      	movs	r3, #3
 800af98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800af9a:	2305      	movs	r3, #5
 800af9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af9e:	f107 0314 	add.w	r3, r7, #20
 800afa2:	4619      	mov	r1, r3
 800afa4:	4806      	ldr	r0, [pc, #24]	; (800afc0 <HAL_SPI_MspInit+0xcc>)
 800afa6:	f7f6 fa27 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800afaa:	bf00      	nop
 800afac:	3728      	adds	r7, #40	; 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40013000 	.word	0x40013000
 800afb8:	40023800 	.word	0x40023800
 800afbc:	40020000 	.word	0x40020000
 800afc0:	40020400 	.word	0x40020400

0800afc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afd4:	d10d      	bne.n	800aff2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
 800afda:	4b09      	ldr	r3, [pc, #36]	; (800b000 <HAL_TIM_Base_MspInit+0x3c>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	4a08      	ldr	r2, [pc, #32]	; (800b000 <HAL_TIM_Base_MspInit+0x3c>)
 800afe0:	f043 0301 	orr.w	r3, r3, #1
 800afe4:	6413      	str	r3, [r2, #64]	; 0x40
 800afe6:	4b06      	ldr	r3, [pc, #24]	; (800b000 <HAL_TIM_Base_MspInit+0x3c>)
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	40023800 	.word	0x40023800

0800b004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	609a      	str	r2, [r3, #8]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b024:	d11d      	bne.n	800b062 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]
 800b02a:	4b10      	ldr	r3, [pc, #64]	; (800b06c <HAL_TIM_MspPostInit+0x68>)
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	4a0f      	ldr	r2, [pc, #60]	; (800b06c <HAL_TIM_MspPostInit+0x68>)
 800b030:	f043 0302 	orr.w	r3, r3, #2
 800b034:	6313      	str	r3, [r2, #48]	; 0x30
 800b036:	4b0d      	ldr	r3, [pc, #52]	; (800b06c <HAL_TIM_MspPostInit+0x68>)
 800b038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	60bb      	str	r3, [r7, #8]
 800b040:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = FansPWM_Pin;
 800b042:	2304      	movs	r3, #4
 800b044:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b046:	2302      	movs	r3, #2
 800b048:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b04e:	2300      	movs	r3, #0
 800b050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b052:	2301      	movs	r3, #1
 800b054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	4619      	mov	r1, r3
 800b05c:	4804      	ldr	r0, [pc, #16]	; (800b070 <HAL_TIM_MspPostInit+0x6c>)
 800b05e:	f7f6 f9cb 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b062:	bf00      	nop
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40023800 	.word	0x40023800
 800b070:	40020400 	.word	0x40020400

0800b074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b078:	bf00      	nop
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b082:	b480      	push	{r7}
 800b084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b086:	e7fe      	b.n	800b086 <HardFault_Handler+0x4>

0800b088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b08c:	e7fe      	b.n	800b08c <MemManage_Handler+0x4>

0800b08e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b08e:	b480      	push	{r7}
 800b090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b092:	e7fe      	b.n	800b092 <BusFault_Handler+0x4>

0800b094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b094:	b480      	push	{r7}
 800b096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b098:	e7fe      	b.n	800b098 <UsageFault_Handler+0x4>

0800b09a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b09a:	b480      	push	{r7}
 800b09c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b09e:	bf00      	nop
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b0ac:	bf00      	nop
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b0c8:	f7fe f9f0 	bl	80094ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b0cc:	bf00      	nop
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800b0d4:	4802      	ldr	r0, [pc, #8]	; (800b0e0 <CAN1_RX0_IRQHandler+0x10>)
 800b0d6:	f7f5 fe5e 	bl	8000d96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800b0da:	bf00      	nop
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	200000e0 	.word	0x200000e0

0800b0e4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800b0e8:	4802      	ldr	r0, [pc, #8]	; (800b0f4 <CAN2_RX1_IRQHandler+0x10>)
 800b0ea:	f7f5 fe54 	bl	8000d96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800b0ee:	bf00      	nop
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20000108 	.word	0x20000108

0800b0f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	af00      	add	r7, sp, #0
	return 1;
 800b0fc:	2301      	movs	r3, #1
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <_kill>:

int _kill(int pid, int sig)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b112:	f000 f8bf 	bl	800b294 <__errno>
 800b116:	4602      	mov	r2, r0
 800b118:	2316      	movs	r3, #22
 800b11a:	6013      	str	r3, [r2, #0]
	return -1;
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <_exit>:

void _exit (int status)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b130:	f04f 31ff 	mov.w	r1, #4294967295
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff ffe7 	bl	800b108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b13a:	e7fe      	b.n	800b13a <_exit+0x12>

0800b13c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b144:	4b11      	ldr	r3, [pc, #68]	; (800b18c <_sbrk+0x50>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <_sbrk+0x16>
		heap_end = &end;
 800b14c:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <_sbrk+0x50>)
 800b14e:	4a10      	ldr	r2, [pc, #64]	; (800b190 <_sbrk+0x54>)
 800b150:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b152:	4b0e      	ldr	r3, [pc, #56]	; (800b18c <_sbrk+0x50>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b158:	4b0c      	ldr	r3, [pc, #48]	; (800b18c <_sbrk+0x50>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4413      	add	r3, r2
 800b160:	466a      	mov	r2, sp
 800b162:	4293      	cmp	r3, r2
 800b164:	d907      	bls.n	800b176 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b166:	f000 f895 	bl	800b294 <__errno>
 800b16a:	4602      	mov	r2, r0
 800b16c:	230c      	movs	r3, #12
 800b16e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b170:	f04f 33ff 	mov.w	r3, #4294967295
 800b174:	e006      	b.n	800b184 <_sbrk+0x48>
	}

	heap_end += incr;
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <_sbrk+0x50>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4413      	add	r3, r2
 800b17e:	4a03      	ldr	r2, [pc, #12]	; (800b18c <_sbrk+0x50>)
 800b180:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b182:	68fb      	ldr	r3, [r7, #12]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20000264 	.word	0x20000264
 800b190:	200006e8 	.word	0x200006e8

0800b194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b194:	b480      	push	{r7}
 800b196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b198:	4b16      	ldr	r3, [pc, #88]	; (800b1f4 <SystemInit+0x60>)
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19e:	4a15      	ldr	r2, [pc, #84]	; (800b1f4 <SystemInit+0x60>)
 800b1a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b1a8:	4b13      	ldr	r3, [pc, #76]	; (800b1f8 <SystemInit+0x64>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a12      	ldr	r2, [pc, #72]	; (800b1f8 <SystemInit+0x64>)
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b1b4:	4b10      	ldr	r3, [pc, #64]	; (800b1f8 <SystemInit+0x64>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b1ba:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <SystemInit+0x64>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a0e      	ldr	r2, [pc, #56]	; (800b1f8 <SystemInit+0x64>)
 800b1c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b1c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <SystemInit+0x64>)
 800b1cc:	4a0b      	ldr	r2, [pc, #44]	; (800b1fc <SystemInit+0x68>)
 800b1ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b1d0:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <SystemInit+0x64>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a08      	ldr	r2, [pc, #32]	; (800b1f8 <SystemInit+0x64>)
 800b1d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <SystemInit+0x64>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b1e2:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <SystemInit+0x60>)
 800b1e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b1e8:	609a      	str	r2, [r3, #8]
#endif
}
 800b1ea:	bf00      	nop
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	e000ed00 	.word	0xe000ed00
 800b1f8:	40023800 	.word	0x40023800
 800b1fc:	24003010 	.word	0x24003010

0800b200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b200:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b238 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b204:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b206:	e003      	b.n	800b210 <LoopCopyDataInit>

0800b208 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b208:	4b0c      	ldr	r3, [pc, #48]	; (800b23c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b20a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b20c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b20e:	3104      	adds	r1, #4

0800b210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b210:	480b      	ldr	r0, [pc, #44]	; (800b240 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b214:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b216:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b218:	d3f6      	bcc.n	800b208 <CopyDataInit>
  ldr  r2, =_sbss
 800b21a:	4a0b      	ldr	r2, [pc, #44]	; (800b248 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b21c:	e002      	b.n	800b224 <LoopFillZerobss>

0800b21e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b21e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b220:	f842 3b04 	str.w	r3, [r2], #4

0800b224 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b224:	4b09      	ldr	r3, [pc, #36]	; (800b24c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b226:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b228:	d3f9      	bcc.n	800b21e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b22a:	f7ff ffb3 	bl	800b194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b22e:	f000 f837 	bl	800b2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b232:	f7fe f9f7 	bl	8009624 <main>
  bx  lr    
 800b236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b238:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b23c:	0800b7f4 	.word	0x0800b7f4
  ldr  r0, =_sdata
 800b240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b244:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800b248:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800b24c:	200006e4 	.word	0x200006e4

0800b250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b250:	e7fe      	b.n	800b250 <ADC_IRQHandler>

0800b252 <_Znwj>:
 800b252:	b510      	push	{r4, lr}
 800b254:	2800      	cmp	r0, #0
 800b256:	bf14      	ite	ne
 800b258:	4604      	movne	r4, r0
 800b25a:	2401      	moveq	r4, #1
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 f843 	bl	800b2e8 <malloc>
 800b262:	b930      	cbnz	r0, 800b272 <_Znwj+0x20>
 800b264:	f000 f806 	bl	800b274 <_ZSt15get_new_handlerv>
 800b268:	b908      	cbnz	r0, 800b26e <_Znwj+0x1c>
 800b26a:	f000 f80b 	bl	800b284 <abort>
 800b26e:	4780      	blx	r0
 800b270:	e7f4      	b.n	800b25c <_Znwj+0xa>
 800b272:	bd10      	pop	{r4, pc}

0800b274 <_ZSt15get_new_handlerv>:
 800b274:	4b02      	ldr	r3, [pc, #8]	; (800b280 <_ZSt15get_new_handlerv+0xc>)
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	f3bf 8f5b 	dmb	ish
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000268 	.word	0x20000268

0800b284 <abort>:
 800b284:	b508      	push	{r3, lr}
 800b286:	2006      	movs	r0, #6
 800b288:	f000 f8dc 	bl	800b444 <raise>
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7ff ff4b 	bl	800b128 <_exit>
	...

0800b294 <__errno>:
 800b294:	4b01      	ldr	r3, [pc, #4]	; (800b29c <__errno+0x8>)
 800b296:	6818      	ldr	r0, [r3, #0]
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	2000000c 	.word	0x2000000c

0800b2a0 <__libc_init_array>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	4e0d      	ldr	r6, [pc, #52]	; (800b2d8 <__libc_init_array+0x38>)
 800b2a4:	4c0d      	ldr	r4, [pc, #52]	; (800b2dc <__libc_init_array+0x3c>)
 800b2a6:	1ba4      	subs	r4, r4, r6
 800b2a8:	10a4      	asrs	r4, r4, #2
 800b2aa:	2500      	movs	r5, #0
 800b2ac:	42a5      	cmp	r5, r4
 800b2ae:	d109      	bne.n	800b2c4 <__libc_init_array+0x24>
 800b2b0:	4e0b      	ldr	r6, [pc, #44]	; (800b2e0 <__libc_init_array+0x40>)
 800b2b2:	4c0c      	ldr	r4, [pc, #48]	; (800b2e4 <__libc_init_array+0x44>)
 800b2b4:	f000 f8e4 	bl	800b480 <_init>
 800b2b8:	1ba4      	subs	r4, r4, r6
 800b2ba:	10a4      	asrs	r4, r4, #2
 800b2bc:	2500      	movs	r5, #0
 800b2be:	42a5      	cmp	r5, r4
 800b2c0:	d105      	bne.n	800b2ce <__libc_init_array+0x2e>
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2c8:	4798      	blx	r3
 800b2ca:	3501      	adds	r5, #1
 800b2cc:	e7ee      	b.n	800b2ac <__libc_init_array+0xc>
 800b2ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2d2:	4798      	blx	r3
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	e7f2      	b.n	800b2be <__libc_init_array+0x1e>
 800b2d8:	0800b7ec 	.word	0x0800b7ec
 800b2dc:	0800b7ec 	.word	0x0800b7ec
 800b2e0:	0800b7ec 	.word	0x0800b7ec
 800b2e4:	0800b7f0 	.word	0x0800b7f0

0800b2e8 <malloc>:
 800b2e8:	4b02      	ldr	r3, [pc, #8]	; (800b2f4 <malloc+0xc>)
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	6818      	ldr	r0, [r3, #0]
 800b2ee:	f000 b817 	b.w	800b320 <_malloc_r>
 800b2f2:	bf00      	nop
 800b2f4:	2000000c 	.word	0x2000000c

0800b2f8 <memcpy>:
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	1e43      	subs	r3, r0, #1
 800b2fc:	440a      	add	r2, r1
 800b2fe:	4291      	cmp	r1, r2
 800b300:	d100      	bne.n	800b304 <memcpy+0xc>
 800b302:	bd10      	pop	{r4, pc}
 800b304:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b30c:	e7f7      	b.n	800b2fe <memcpy+0x6>

0800b30e <memset>:
 800b30e:	4402      	add	r2, r0
 800b310:	4603      	mov	r3, r0
 800b312:	4293      	cmp	r3, r2
 800b314:	d100      	bne.n	800b318 <memset+0xa>
 800b316:	4770      	bx	lr
 800b318:	f803 1b01 	strb.w	r1, [r3], #1
 800b31c:	e7f9      	b.n	800b312 <memset+0x4>
	...

0800b320 <_malloc_r>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	1ccd      	adds	r5, r1, #3
 800b324:	f025 0503 	bic.w	r5, r5, #3
 800b328:	3508      	adds	r5, #8
 800b32a:	2d0c      	cmp	r5, #12
 800b32c:	bf38      	it	cc
 800b32e:	250c      	movcc	r5, #12
 800b330:	2d00      	cmp	r5, #0
 800b332:	4606      	mov	r6, r0
 800b334:	db01      	blt.n	800b33a <_malloc_r+0x1a>
 800b336:	42a9      	cmp	r1, r5
 800b338:	d903      	bls.n	800b342 <_malloc_r+0x22>
 800b33a:	230c      	movs	r3, #12
 800b33c:	6033      	str	r3, [r6, #0]
 800b33e:	2000      	movs	r0, #0
 800b340:	bd70      	pop	{r4, r5, r6, pc}
 800b342:	f000 f89b 	bl	800b47c <__malloc_lock>
 800b346:	4a21      	ldr	r2, [pc, #132]	; (800b3cc <_malloc_r+0xac>)
 800b348:	6814      	ldr	r4, [r2, #0]
 800b34a:	4621      	mov	r1, r4
 800b34c:	b991      	cbnz	r1, 800b374 <_malloc_r+0x54>
 800b34e:	4c20      	ldr	r4, [pc, #128]	; (800b3d0 <_malloc_r+0xb0>)
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	b91b      	cbnz	r3, 800b35c <_malloc_r+0x3c>
 800b354:	4630      	mov	r0, r6
 800b356:	f000 f83d 	bl	800b3d4 <_sbrk_r>
 800b35a:	6020      	str	r0, [r4, #0]
 800b35c:	4629      	mov	r1, r5
 800b35e:	4630      	mov	r0, r6
 800b360:	f000 f838 	bl	800b3d4 <_sbrk_r>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d124      	bne.n	800b3b2 <_malloc_r+0x92>
 800b368:	230c      	movs	r3, #12
 800b36a:	6033      	str	r3, [r6, #0]
 800b36c:	4630      	mov	r0, r6
 800b36e:	f000 f886 	bl	800b47e <__malloc_unlock>
 800b372:	e7e4      	b.n	800b33e <_malloc_r+0x1e>
 800b374:	680b      	ldr	r3, [r1, #0]
 800b376:	1b5b      	subs	r3, r3, r5
 800b378:	d418      	bmi.n	800b3ac <_malloc_r+0x8c>
 800b37a:	2b0b      	cmp	r3, #11
 800b37c:	d90f      	bls.n	800b39e <_malloc_r+0x7e>
 800b37e:	600b      	str	r3, [r1, #0]
 800b380:	50cd      	str	r5, [r1, r3]
 800b382:	18cc      	adds	r4, r1, r3
 800b384:	4630      	mov	r0, r6
 800b386:	f000 f87a 	bl	800b47e <__malloc_unlock>
 800b38a:	f104 000b 	add.w	r0, r4, #11
 800b38e:	1d23      	adds	r3, r4, #4
 800b390:	f020 0007 	bic.w	r0, r0, #7
 800b394:	1ac3      	subs	r3, r0, r3
 800b396:	d0d3      	beq.n	800b340 <_malloc_r+0x20>
 800b398:	425a      	negs	r2, r3
 800b39a:	50e2      	str	r2, [r4, r3]
 800b39c:	e7d0      	b.n	800b340 <_malloc_r+0x20>
 800b39e:	428c      	cmp	r4, r1
 800b3a0:	684b      	ldr	r3, [r1, #4]
 800b3a2:	bf16      	itet	ne
 800b3a4:	6063      	strne	r3, [r4, #4]
 800b3a6:	6013      	streq	r3, [r2, #0]
 800b3a8:	460c      	movne	r4, r1
 800b3aa:	e7eb      	b.n	800b384 <_malloc_r+0x64>
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	6849      	ldr	r1, [r1, #4]
 800b3b0:	e7cc      	b.n	800b34c <_malloc_r+0x2c>
 800b3b2:	1cc4      	adds	r4, r0, #3
 800b3b4:	f024 0403 	bic.w	r4, r4, #3
 800b3b8:	42a0      	cmp	r0, r4
 800b3ba:	d005      	beq.n	800b3c8 <_malloc_r+0xa8>
 800b3bc:	1a21      	subs	r1, r4, r0
 800b3be:	4630      	mov	r0, r6
 800b3c0:	f000 f808 	bl	800b3d4 <_sbrk_r>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d0cf      	beq.n	800b368 <_malloc_r+0x48>
 800b3c8:	6025      	str	r5, [r4, #0]
 800b3ca:	e7db      	b.n	800b384 <_malloc_r+0x64>
 800b3cc:	2000026c 	.word	0x2000026c
 800b3d0:	20000270 	.word	0x20000270

0800b3d4 <_sbrk_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4c06      	ldr	r4, [pc, #24]	; (800b3f0 <_sbrk_r+0x1c>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4605      	mov	r5, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	6023      	str	r3, [r4, #0]
 800b3e0:	f7ff feac 	bl	800b13c <_sbrk>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_sbrk_r+0x1a>
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_sbrk_r+0x1a>
 800b3ec:	602b      	str	r3, [r5, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	200006e0 	.word	0x200006e0

0800b3f4 <_raise_r>:
 800b3f4:	291f      	cmp	r1, #31
 800b3f6:	b538      	push	{r3, r4, r5, lr}
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	d904      	bls.n	800b408 <_raise_r+0x14>
 800b3fe:	2316      	movs	r3, #22
 800b400:	6003      	str	r3, [r0, #0]
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b40a:	b112      	cbz	r2, 800b412 <_raise_r+0x1e>
 800b40c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b410:	b94b      	cbnz	r3, 800b426 <_raise_r+0x32>
 800b412:	4620      	mov	r0, r4
 800b414:	f000 f830 	bl	800b478 <_getpid_r>
 800b418:	462a      	mov	r2, r5
 800b41a:	4601      	mov	r1, r0
 800b41c:	4620      	mov	r0, r4
 800b41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b422:	f000 b817 	b.w	800b454 <_kill_r>
 800b426:	2b01      	cmp	r3, #1
 800b428:	d00a      	beq.n	800b440 <_raise_r+0x4c>
 800b42a:	1c59      	adds	r1, r3, #1
 800b42c:	d103      	bne.n	800b436 <_raise_r+0x42>
 800b42e:	2316      	movs	r3, #22
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	2001      	movs	r0, #1
 800b434:	e7e7      	b.n	800b406 <_raise_r+0x12>
 800b436:	2400      	movs	r4, #0
 800b438:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b43c:	4628      	mov	r0, r5
 800b43e:	4798      	blx	r3
 800b440:	2000      	movs	r0, #0
 800b442:	e7e0      	b.n	800b406 <_raise_r+0x12>

0800b444 <raise>:
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <raise+0xc>)
 800b446:	4601      	mov	r1, r0
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	f7ff bfd3 	b.w	800b3f4 <_raise_r>
 800b44e:	bf00      	nop
 800b450:	2000000c 	.word	0x2000000c

0800b454 <_kill_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4c07      	ldr	r4, [pc, #28]	; (800b474 <_kill_r+0x20>)
 800b458:	2300      	movs	r3, #0
 800b45a:	4605      	mov	r5, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	f7ff fe51 	bl	800b108 <_kill>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	d102      	bne.n	800b470 <_kill_r+0x1c>
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	b103      	cbz	r3, 800b470 <_kill_r+0x1c>
 800b46e:	602b      	str	r3, [r5, #0]
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	bf00      	nop
 800b474:	200006e0 	.word	0x200006e0

0800b478 <_getpid_r>:
 800b478:	f7ff be3e 	b.w	800b0f8 <_getpid>

0800b47c <__malloc_lock>:
 800b47c:	4770      	bx	lr

0800b47e <__malloc_unlock>:
 800b47e:	4770      	bx	lr

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	bf00      	nop
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr


BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e81c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800e9ec  0800e9ec  0001e9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef34  0800ef34  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef34  0800ef34  0001ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef3c  0800ef3c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ef3c  0800ef3c  0001ef3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef44  0800ef44  0001ef44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ef48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000090  0800efd8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800efd8  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040a55  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046ba  00000000  00000000  00060b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b10  00000000  00000000  000651d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001978  00000000  00000000  00066ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a3b2  00000000  00000000  00068658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014abb  00000000  00000000  00092a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc8a3  00000000  00000000  000a74c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed8  00000000  00000000  001a3de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e9d4 	.word	0x0800e9d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800e9d4 	.word	0x0800e9d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_Init+0x40>)
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_Init+0x40>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x40>)
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 ff47 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f00c fb92 	bl	800d124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 ff5f 	bl	80018ee <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 ff27 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000024 	.word	0x20000024
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000000 	.word	0x20000000

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000298 	.word	0x20000298

08000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a8c:	f7ff ffee 	bl	8000a6c <HAL_GetTick>
 8000a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9c:	d005      	beq.n	8000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_Delay+0x40>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aaa:	bf00      	nop
 8000aac:	f7ff ffde 	bl	8000a6c <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d8f7      	bhi.n	8000aac <HAL_Delay+0x28>
  {
  }
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e0ed      	b.n	8000cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f00c fb44 	bl	800d174 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0202 	bic.w	r2, r2, #2
 8000afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000afc:	f7ff ffb6 	bl	8000a6c <HAL_GetTick>
 8000b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b02:	e012      	b.n	8000b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b04:	f7ff ffb2 	bl	8000a6c <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d90b      	bls.n	8000b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2205      	movs	r2, #5
 8000b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e0c5      	b.n	8000cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e5      	bne.n	8000b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0201 	orr.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b48:	f7ff ff90 	bl	8000a6c <HAL_GetTick>
 8000b4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b4e:	e012      	b.n	8000b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b50:	f7ff ff8c 	bl	8000a6c <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b0a      	cmp	r3, #10
 8000b5c:	d90b      	bls.n	8000b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e09f      	b.n	8000cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0e5      	beq.n	8000b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7e1b      	ldrb	r3, [r3, #24]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d108      	bne.n	8000b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7e5b      	ldrb	r3, [r3, #25]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7e9b      	ldrb	r3, [r3, #26]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d108      	bne.n	8000bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0220 	orr.w	r2, r2, #32
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0220 	bic.w	r2, r2, #32
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7edb      	ldrb	r3, [r3, #27]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d108      	bne.n	8000c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0210 	bic.w	r2, r2, #16
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0210 	orr.w	r2, r2, #16
 8000c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7f1b      	ldrb	r3, [r3, #28]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d108      	bne.n	8000c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 0208 	orr.w	r2, r2, #8
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e007      	b.n	8000c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0208 	bic.w	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7f5b      	ldrb	r3, [r3, #29]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d108      	bne.n	8000c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f042 0204 	orr.w	r2, r2, #4
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	e007      	b.n	8000c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0204 	bic.w	r2, r2, #4
 8000c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	ea42 0103 	orr.w	r1, r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd8:	7cfb      	ldrb	r3, [r7, #19]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d003      	beq.n	8000ce6 <HAL_CAN_ConfigFilter+0x26>
 8000cde:	7cfb      	ldrb	r3, [r7, #19]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	f040 80be 	bne.w	8000e62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_CAN_ConfigFilter+0x1bc>)
 8000ce8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cf0:	f043 0201 	orr.w	r2, r3, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	431a      	orrs	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	2201      	movs	r2, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d123      	bne.n	8000d90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3248      	adds	r2, #72	; 0x48
 8000d70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d86:	6979      	ldr	r1, [r7, #20]
 8000d88:	3348      	adds	r3, #72	; 0x48
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d122      	bne.n	8000dde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000db8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3248      	adds	r2, #72	; 0x48
 8000dbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dd4:	6979      	ldr	r1, [r7, #20]
 8000dd6:	3348      	adds	r3, #72	; 0x48
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
 8000ddc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d109      	bne.n	8000dfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	401a      	ands	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000df8:	e007      	b.n	8000e0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d109      	bne.n	8000e26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e24:	e007      	b.n	8000e36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d107      	bne.n	8000e4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e54:	f023 0201 	bic.w	r2, r3, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e006      	b.n	8000e70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
  }
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40006400 	.word	0x40006400

08000e80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d003      	beq.n	8000eac <HAL_CAN_AddTxMessage+0x2c>
 8000ea4:	7ffb      	ldrb	r3, [r7, #31]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	f040 80b8 	bne.w	800101c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10a      	bne.n	8000ecc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a0 	beq.w	800100c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	0e1b      	lsrs	r3, r3, #24
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d907      	bls.n	8000eec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e09e      	b.n	800102a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000eec:	2201      	movs	r2, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10d      	bne.n	8000f1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	6809      	ldr	r1, [r1, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3318      	adds	r3, #24
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	440b      	add	r3, r1
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e00f      	b.n	8000f3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2a:	68f9      	ldr	r1, [r7, #12]
 8000f2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3318      	adds	r3, #24
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	440b      	add	r3, r1
 8000f38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	691a      	ldr	r2, [r3, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3318      	adds	r3, #24
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	440b      	add	r3, r1
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	7d1b      	ldrb	r3, [r3, #20]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d111      	bne.n	8000f7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3318      	adds	r3, #24
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	3304      	adds	r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	6811      	ldr	r1, [r2, #0]
 8000f6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	440b      	add	r3, r1
 8000f76:	3304      	adds	r3, #4
 8000f78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	061a      	lsls	r2, r3, #24
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3306      	adds	r3, #6
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	4313      	orrs	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	3204      	adds	r2, #4
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	6811      	ldr	r1, [r2, #0]
 8000fa2:	ea43 0200 	orr.w	r2, r3, r0
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	440b      	add	r3, r1
 8000fac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	061a      	lsls	r2, r3, #24
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	6811      	ldr	r1, [r2, #0]
 8000fd8:	ea43 0200 	orr.w	r2, r3, r0
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	440b      	add	r3, r1
 8000fe2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000fe6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3318      	adds	r3, #24
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	4413      	add	r3, r2
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	6811      	ldr	r1, [r2, #0]
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3318      	adds	r3, #24
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	440b      	add	r3, r1
 8001006:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e00e      	b.n	800102a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e006      	b.n	800102a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
  }
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001036:	b480      	push	{r7}
 8001038:	b087      	sub	sp, #28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d003      	beq.n	800105a <HAL_CAN_GetRxMessage+0x24>
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b02      	cmp	r3, #2
 8001056:	f040 80f3 	bne.w	8001240 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10e      	bne.n	800107e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0e7      	b.n	800124e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0d8      	b.n	800124e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	331b      	adds	r3, #27
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0204 	and.w	r2, r3, #4
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	331b      	adds	r3, #27
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4413      	add	r3, r2
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0d5b      	lsrs	r3, r3, #21
 80010ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	331b      	adds	r3, #27
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	331b      	adds	r3, #27
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0202 	and.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	331b      	adds	r3, #27
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	3304      	adds	r3, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 020f 	and.w	r2, r3, #15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	331b      	adds	r3, #27
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4413      	add	r3, r2
 8001126:	3304      	adds	r3, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	331b      	adds	r3, #27
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	0c1b      	lsrs	r3, r3, #16
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0a1a      	lsrs	r2, r3, #8
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	4413      	add	r3, r2
 8001184:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0c1a      	lsrs	r2, r3, #16
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3302      	adds	r3, #2
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	4413      	add	r3, r2
 800119e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0e1a      	lsrs	r2, r3, #24
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3303      	adds	r3, #3
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3304      	adds	r3, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0a1a      	lsrs	r2, r3, #8
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3305      	adds	r3, #5
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0c1a      	lsrs	r2, r3, #16
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3306      	adds	r3, #6
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	0e1a      	lsrs	r2, r3, #24
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3307      	adds	r3, #7
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d108      	bne.n	800122c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0220 	orr.w	r2, r2, #32
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	e007      	b.n	800123c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0220 	orr.w	r2, r2, #32
 800123a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e006      	b.n	800124e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d002      	beq.n	8001278 <HAL_CAN_ActivateNotification+0x1e>
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d109      	bne.n	800128c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6959      	ldr	r1, [r3, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	e006      	b.n	800129a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
  }
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b08a      	sub	sp, #40	; 0x28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d07c      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d023      	beq.n	800133e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2201      	movs	r2, #1
 80012fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f97d 	bl	8001608 <HAL_CAN_TxMailbox0CompleteCallback>
 800130e:	e016      	b.n	800133e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e00c      	b.n	800133e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e002      	b.n	800133e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f983 	bl	8001644 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d024      	beq.n	8001392 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f95d 	bl	800161c <HAL_CAN_TxMailbox1CompleteCallback>
 8001362:	e016      	b.n	8001392 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	e00c      	b.n	8001392 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	e002      	b.n	8001392 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f963 	bl	8001658 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d024      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f93d 	bl	8001630 <HAL_CAN_TxMailbox2CompleteCallback>
 80013b6:	e016      	b.n	80013e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e00c      	b.n	80013e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	e002      	b.n	80013e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f943 	bl	800166c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2210      	movs	r2, #16
 8001408:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f92a 	bl	8001680 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f00a ffb3 	bl	800c3b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2210      	movs	r2, #16
 800146c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2208      	movs	r2, #8
 8001488:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f902 	bl	8001694 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f00a ffff 	bl	800c4ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2210      	movs	r2, #16
 80014c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f8ec 	bl	80016a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f8e5 	bl	80016bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d075      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d06c      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03d      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800156a:	2b00      	cmp	r3, #0
 800156c:	d038      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001574:	2b30      	cmp	r3, #48	; 0x30
 8001576:	d017      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x302>
 8001578:	2b30      	cmp	r3, #48	; 0x30
 800157a:	d804      	bhi.n	8001586 <HAL_CAN_IRQHandler+0x2e0>
 800157c:	2b10      	cmp	r3, #16
 800157e:	d009      	beq.n	8001594 <HAL_CAN_IRQHandler+0x2ee>
 8001580:	2b20      	cmp	r3, #32
 8001582:	d00c      	beq.n	800159e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001584:	e024      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001586:	2b50      	cmp	r3, #80	; 0x50
 8001588:	d018      	beq.n	80015bc <HAL_CAN_IRQHandler+0x316>
 800158a:	2b60      	cmp	r3, #96	; 0x60
 800158c:	d01b      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x320>
 800158e:	2b40      	cmp	r3, #64	; 0x40
 8001590:	d00f      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001592:	e01d      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800159c:	e018      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015a6:	e013      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015b0:	e00e      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ba:	e009      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015c4:	e004      	b.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2204      	movs	r2, #4
 80015e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d008      	beq.n	8001600 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f868 	bl	80016d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e165      	b.n	8001bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8154 	bne.w	8001bea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d00b      	beq.n	8001962 <HAL_GPIO_Init+0x5a>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001956:	2b11      	cmp	r3, #17
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b12      	cmp	r3, #18
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0xfc>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b12      	cmp	r3, #18
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80ae 	beq.w	8001bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_GPIO_Init+0x2fc>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_GPIO_Init+0x2fc>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_GPIO_Init+0x2fc>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_GPIO_Init+0x300>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4e      	ldr	r2, [pc, #312]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x21a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4d      	ldr	r2, [pc, #308]	; (8001c10 <HAL_GPIO_Init+0x308>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x216>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4c      	ldr	r2, [pc, #304]	; (8001c14 <HAL_GPIO_Init+0x30c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x212>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4b      	ldr	r2, [pc, #300]	; (8001c18 <HAL_GPIO_Init+0x310>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x20e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4a      	ldr	r2, [pc, #296]	; (8001c1c <HAL_GPIO_Init+0x314>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x20a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a49      	ldr	r2, [pc, #292]	; (8001c20 <HAL_GPIO_Init+0x318>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x206>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a48      	ldr	r2, [pc, #288]	; (8001c24 <HAL_GPIO_Init+0x31c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x202>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e00c      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00a      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e008      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x21c>
 8001b22:	2300      	movs	r3, #0
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b34:	4934      	ldr	r1, [pc, #208]	; (8001c08 <HAL_GPIO_Init+0x300>)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b66:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b90:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be4:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_GPIO_Init+0x320>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3301      	adds	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	f67f ae96 	bls.w	8001924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3724      	adds	r7, #36	; 0x24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d104      	bne.n	8001cb2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	041a      	lsls	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0cc      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d90c      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d044      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e067      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4934      	ldr	r1, [pc, #208]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7fe fe5a 	bl	8000a6c <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7fe fe56 	bl	8000a6c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e04f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d20c      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 fb4b 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fdce 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00
 8001e80:	40023800 	.word	0x40023800
 8001e84:	0800ee48 	.word	0x0800ee48
 8001e88:	20000024 	.word	0x20000024
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	496c      	ldr	r1, [pc, #432]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001ef6:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	4960      	ldr	r1, [pc, #384]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f24:	4b58      	ldr	r3, [pc, #352]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4955      	ldr	r1, [pc, #340]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f42:	d101      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001f50:	2301      	movs	r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f60:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	4946      	ldr	r1, [pc, #280]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 808a 	beq.w	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a38      	ldr	r2, [pc, #224]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a33      	ldr	r2, [pc, #204]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe fd51 	bl	8000a6c <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7fe fd4d 	bl	8000a6c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e278      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d02f      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002004:	6a3a      	ldr	r2, [r7, #32]
 8002006:	429a      	cmp	r2, r3
 8002008:	d028      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d114      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fd1b 	bl	8000a6c <HAL_GetTick>
 8002036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fd17 	bl	8000a6c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e240      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002068:	d114      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800207a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207e:	4902      	ldr	r1, [pc, #8]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	e00c      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000
 8002090:	42470e40 	.word	0x42470e40
 8002094:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800209a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ac:	4944      	ldr	r1, [pc, #272]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80020c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4937      	ldr	r1, [pc, #220]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	492e      	ldr	r1, [pc, #184]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d011      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	4926      	ldr	r1, [pc, #152]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002136:	d101      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002138:	2301      	movs	r3, #1
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	491a      	ldr	r1, [pc, #104]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d011      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002170:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002178:	4911      	ldr	r1, [pc, #68]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002188:	d101      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800218a:	2301      	movs	r3, #1
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d005      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800219c:	f040 80ff 	bne.w	800239e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021a6:	f7fe fc61 	bl	8000a6c <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ac:	e00e      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021ae:	f7fe fc5d 	bl	8000a6c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d907      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e188      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	424711e0 	.word	0x424711e0
 80021c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021cc:	4b7e      	ldr	r3, [pc, #504]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ea      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d028      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d124      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002200:	4b71      	ldr	r3, [pc, #452]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002206:	0c1b      	lsrs	r3, r3, #16
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	3301      	adds	r3, #1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002218:	0e1b      	lsrs	r3, r3, #24
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	431a      	orrs	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	3b01      	subs	r3, #1
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431a      	orrs	r2, r3
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	071b      	lsls	r3, r3, #28
 8002242:	4961      	ldr	r1, [pc, #388]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002268:	2b00      	cmp	r3, #0
 800226a:	d035      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002274:	d130      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002288:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800228a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228e:	0f1b      	lsrs	r3, r3, #28
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	019b      	lsls	r3, r3, #6
 80022a0:	431a      	orrs	r2, r3
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	071b      	lsls	r3, r3, #28
 80022b8:	4943      	ldr	r1, [pc, #268]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022c0:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c6:	f023 021f 	bic.w	r2, r3, #31
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	493d      	ldr	r1, [pc, #244]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d029      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ec:	d124      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022ee:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002306:	0f1b      	lsrs	r3, r3, #28
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	019b      	lsls	r3, r3, #6
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	431a      	orrs	r2, r3
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	431a      	orrs	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	071b      	lsls	r3, r3, #28
 8002330:	4925      	ldr	r1, [pc, #148]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	071b      	lsls	r3, r3, #28
 800236a:	4917      	ldr	r1, [pc, #92]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002378:	f7fe fb78 	bl	8000a6c <HAL_GetTick>
 800237c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002380:	f7fe fb74 	bl	8000a6c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e09f      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 8095 	bne.w	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fb5e 	bl	8000a6c <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023b2:	e00f      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80023b4:	f7fe fb5a 	bl	8000a6c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d908      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e085      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470068 	.word	0x42470068
 80023d0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e0:	d0e8      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d02b      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	2b00      	cmp	r3, #0
 8002408:	d127      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	431a      	orrs	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	3b01      	subs	r3, #1
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	4928      	ldr	r1, [pc, #160]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002446:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	3b01      	subs	r3, #1
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246e:	d118      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	0e1b      	lsrs	r3, r3, #24
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	3b01      	subs	r3, #1
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	4910      	ldr	r1, [pc, #64]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fae0 	bl	8000a6c <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024b0:	f7fe fadc 	bl	8000a6c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e007      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ce:	d1ef      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3730      	adds	r7, #48	; 0x30
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470070 	.word	0x42470070

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fe:	4b9f      	ldr	r3, [pc, #636]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b0c      	cmp	r3, #12
 8002508:	f200 8130 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x288>
 800250c:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_RCC_GetSysClockFreq+0x30>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002549 	.word	0x08002549
 8002518:	0800276d 	.word	0x0800276d
 800251c:	0800276d 	.word	0x0800276d
 8002520:	0800276d 	.word	0x0800276d
 8002524:	0800254f 	.word	0x0800254f
 8002528:	0800276d 	.word	0x0800276d
 800252c:	0800276d 	.word	0x0800276d
 8002530:	0800276d 	.word	0x0800276d
 8002534:	08002555 	.word	0x08002555
 8002538:	0800276d 	.word	0x0800276d
 800253c:	0800276d 	.word	0x0800276d
 8002540:	0800276d 	.word	0x0800276d
 8002544:	08002663 	.word	0x08002663
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <HAL_RCC_GetSysClockFreq+0x29c>)
 800254a:	613b      	str	r3, [r7, #16]
       break;
 800254c:	e111      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254e:	4b8d      	ldr	r3, [pc, #564]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002550:	613b      	str	r3, [r7, #16]
      break;
 8002552:	e10e      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002554:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800255c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255e:	4b87      	ldr	r3, [pc, #540]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d023      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	ea03 0501 	and.w	r5, r3, r1
 8002580:	ea04 0602 	and.w	r6, r4, r2
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002586:	fb02 f106 	mul.w	r1, r2, r6
 800258a:	2200      	movs	r2, #0
 800258c:	fb02 f205 	mul.w	r2, r2, r5
 8002590:	440a      	add	r2, r1
 8002592:	497c      	ldr	r1, [pc, #496]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002594:	fba5 0101 	umull	r0, r1, r5, r1
 8002598:	1853      	adds	r3, r2, r1
 800259a:	4619      	mov	r1, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f04f 0400 	mov.w	r4, #0
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	f7fe f88f 	bl	80006c8 <__aeabi_uldivmod>
 80025aa:	4603      	mov	r3, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e049      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b72      	ldr	r3, [pc, #456]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	f04f 0400 	mov.w	r4, #0
 80025bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	ea03 0501 	and.w	r5, r3, r1
 80025c8:	ea04 0602 	and.w	r6, r4, r2
 80025cc:	4629      	mov	r1, r5
 80025ce:	4632      	mov	r2, r6
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f04f 0400 	mov.w	r4, #0
 80025d8:	0154      	lsls	r4, r2, #5
 80025da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025de:	014b      	lsls	r3, r1, #5
 80025e0:	4619      	mov	r1, r3
 80025e2:	4622      	mov	r2, r4
 80025e4:	1b49      	subs	r1, r1, r5
 80025e6:	eb62 0206 	sbc.w	r2, r2, r6
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	f04f 0400 	mov.w	r4, #0
 80025f2:	0194      	lsls	r4, r2, #6
 80025f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025f8:	018b      	lsls	r3, r1, #6
 80025fa:	1a5b      	subs	r3, r3, r1
 80025fc:	eb64 0402 	sbc.w	r4, r4, r2
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	00e2      	lsls	r2, r4, #3
 800260a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800260e:	00d9      	lsls	r1, r3, #3
 8002610:	460b      	mov	r3, r1
 8002612:	4614      	mov	r4, r2
 8002614:	195b      	adds	r3, r3, r5
 8002616:	eb44 0406 	adc.w	r4, r4, r6
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	02a2      	lsls	r2, r4, #10
 8002624:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002628:	0299      	lsls	r1, r3, #10
 800262a:	460b      	mov	r3, r1
 800262c:	4614      	mov	r4, r2
 800262e:	4618      	mov	r0, r3
 8002630:	4621      	mov	r1, r4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f04f 0400 	mov.w	r4, #0
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	f7fe f844 	bl	80006c8 <__aeabi_uldivmod>
 8002640:	4603      	mov	r3, r0
 8002642:	460c      	mov	r4, r1
 8002644:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	3301      	adds	r3, #1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	613b      	str	r3, [r7, #16]
      break;
 8002660:	e087      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d023      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	ea03 0501 	and.w	r5, r3, r1
 800268e:	ea04 0602 	and.w	r6, r4, r2
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002694:	fb02 f106 	mul.w	r1, r2, r6
 8002698:	2200      	movs	r2, #0
 800269a:	fb02 f205 	mul.w	r2, r2, r5
 800269e:	440a      	add	r2, r1
 80026a0:	4938      	ldr	r1, [pc, #224]	; (8002784 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80026a2:	fba5 0101 	umull	r0, r1, r5, r1
 80026a6:	1853      	adds	r3, r2, r1
 80026a8:	4619      	mov	r1, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f04f 0400 	mov.w	r4, #0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	f7fe f808 	bl	80006c8 <__aeabi_uldivmod>
 80026b8:	4603      	mov	r3, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e049      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	f04f 0400 	mov.w	r4, #0
 80026ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	ea03 0501 	and.w	r5, r3, r1
 80026d6:	ea04 0602 	and.w	r6, r4, r2
 80026da:	4629      	mov	r1, r5
 80026dc:	4632      	mov	r2, r6
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f04f 0400 	mov.w	r4, #0
 80026e6:	0154      	lsls	r4, r2, #5
 80026e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ec:	014b      	lsls	r3, r1, #5
 80026ee:	4619      	mov	r1, r3
 80026f0:	4622      	mov	r2, r4
 80026f2:	1b49      	subs	r1, r1, r5
 80026f4:	eb62 0206 	sbc.w	r2, r2, r6
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	f04f 0400 	mov.w	r4, #0
 8002700:	0194      	lsls	r4, r2, #6
 8002702:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002706:	018b      	lsls	r3, r1, #6
 8002708:	1a5b      	subs	r3, r3, r1
 800270a:	eb64 0402 	sbc.w	r4, r4, r2
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800271c:	00d9      	lsls	r1, r3, #3
 800271e:	460b      	mov	r3, r1
 8002720:	4614      	mov	r4, r2
 8002722:	195b      	adds	r3, r3, r5
 8002724:	eb44 0406 	adc.w	r4, r4, r6
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	02a2      	lsls	r2, r4, #10
 8002732:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002736:	0299      	lsls	r1, r3, #10
 8002738:	460b      	mov	r3, r1
 800273a:	4614      	mov	r4, r2
 800273c:	4618      	mov	r0, r3
 800273e:	4621      	mov	r1, r4
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f04f 0400 	mov.w	r4, #0
 8002746:	461a      	mov	r2, r3
 8002748:	4623      	mov	r3, r4
 800274a:	f7fd ffbd 	bl	80006c8 <__aeabi_uldivmod>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_GetSysClockFreq+0x298>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0f1b      	lsrs	r3, r3, #28
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	613b      	str	r3, [r7, #16]
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_RCC_GetSysClockFreq+0x29c>)
 800276e:	613b      	str	r3, [r7, #16]
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	693b      	ldr	r3, [r7, #16]
}
 8002774:	4618      	mov	r0, r3
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	017d7840 	.word	0x017d7840

08002788 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8083 	beq.w	80028a8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027a2:	4b95      	ldr	r3, [pc, #596]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d019      	beq.n	80027e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027ae:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027ba:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c6:	d00c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c8:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d112      	bne.n	80027fa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d4:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b85      	ldr	r3, [pc, #532]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d05b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x11e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d157      	bne.n	80028a6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e216      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x8a>
 8002804:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a7b      	ldr	r2, [pc, #492]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e01d      	b.n	800284e <HAL_RCC_OscConfig+0xc6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0xae>
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a72      	ldr	r2, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0xc6>
 8002836:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6f      	ldr	r2, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d013      	beq.n	800287e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe f909 	bl	8000a6c <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285e:	f7fe f905 	bl	8000a6c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1db      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0xd6>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe f8f5 	bl	8000a6c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002886:	f7fe f8f1 	bl	8000a6c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1c7      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0xfe>
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d06f      	beq.n	8002994 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d017      	beq.n	80028f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028c0:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028cc:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d8:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d11c      	bne.n	800291e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e4:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_OscConfig+0x180>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e18f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4938      	ldr	r1, [pc, #224]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291c:	e03a      	b.n	8002994 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d020      	beq.n	8002968 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002926:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe f89e 	bl	8000a6c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe f89a 	bl	8000a6c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e170      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4925      	ldr	r1, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
 8002966:	e015      	b.n	8002994 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002968:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_RCC_OscConfig+0x274>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe f87d 	bl	8000a6c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe f879 	bl	8000a6c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e14f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d037      	beq.n	8002a10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d016      	beq.n	80029d6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x278>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe f85d 	bl	8000a6c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe f859 	bl	8000a6c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e12f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x22e>
 80029d4:	e01c      	b.n	8002a10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_OscConfig+0x278>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe f846 	bl	8000a6c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e2:	e00f      	b.n	8002a04 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe f842 	bl	8000a6c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d908      	bls.n	8002a04 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e118      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b8a      	ldr	r3, [pc, #552]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e9      	bne.n	80029e4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8097 	beq.w	8002b4c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b83      	ldr	r3, [pc, #524]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a75      	ldr	r2, [pc, #468]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe f801 	bl	8000a6c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fd fffd 	bl	8000a6c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0d3      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x31a>
 8002a94:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a65      	ldr	r2, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x354>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x33c>
 8002aaa:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a60      	ldr	r2, [pc, #384]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b5e      	ldr	r3, [pc, #376]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a5d      	ldr	r2, [pc, #372]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x354>
 8002ac4:	4b5a      	ldr	r3, [pc, #360]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a59      	ldr	r2, [pc, #356]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a56      	ldr	r2, [pc, #344]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fd ffc2 	bl	8000a6c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fd ffbe 	bl	8000a6c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e092      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x364>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fd ffac 	bl	8000a6c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fd ffa8 	bl	8000a6c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e07c      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	4a3a      	ldr	r2, [pc, #232]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d068      	beq.n	8002c26 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d060      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d145      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fd ff7d 	bl	8000a6c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fd ff79 	bl	8000a6c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e04f      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b88:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	019b      	lsls	r3, r3, #6
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	071b      	lsls	r3, r3, #28
 8002bc0:	491b      	ldr	r1, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fd ff4e 	bl	8000a6c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fd ff4a 	bl	8000a6c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e020      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x44c>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_OscConfig+0x4b0>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fd ff37 	bl	8000a6c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fd ff33 	bl	8000a6c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e009      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x47a>
 8002c20:	e001      	b.n	8002c26 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42470060 	.word	0x42470060

08002c3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e022      	b.n	8002c94 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f00a fb39 	bl	800d2d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f814 	bl	8002c9c <HAL_SD_InitCard>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00a      	b.n	8002c94 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b08e      	sub	sp, #56	; 0x38
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002cb8:	2376      	movs	r3, #118	; 0x76
 8002cba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681d      	ldr	r5, [r3, #0]
 8002cc0:	466c      	mov	r4, sp
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f002 fc25 	bl	8005524 <SDIO_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e031      	b.n	8002d50 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_SD_InitCard+0xbc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fc5d 	bl	80055b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_SD_InitCard+0xbc>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fefc 	bl	8003b00 <SD_PowerON>
 8002d08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e013      	b.n	8002d50 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fe1b 	bl	8003964 <SD_InitCard>
 8002d2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3728      	adds	r7, #40	; 0x28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bdb0      	pop	{r4, r5, r7, pc}
 8002d58:	422580a0 	.word	0x422580a0

08002d5c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b092      	sub	sp, #72	; 0x48
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d6a:	f7fd fe7f 	bl	8000a6c <HAL_GetTick>
 8002d6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1d7      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	f040 81ca 	bne.w	8003130 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d907      	bls.n	8002dc0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e1be      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d002      	beq.n	8002dde <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fc78 	bl	80056dc <SDMMC_CmdBlockLength>
 8002dec:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00f      	beq.n	8002e14 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a9a      	ldr	r2, [pc, #616]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e194      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	025b      	lsls	r3, r3, #9
 8002e1e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002e20:	2390      	movs	r3, #144	; 0x90
 8002e22:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e24:	2302      	movs	r3, #2
 8002e26:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f107 0214 	add.w	r2, r7, #20
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fc22 	bl	8005684 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d90a      	bls.n	8002e5c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fc86 	bl	8005764 <SDMMC_CmdReadMultiBlock>
 8002e58:	6478      	str	r0, [r7, #68]	; 0x44
 8002e5a:	e009      	b.n	8002e70 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fc59 	bl	8005720 <SDMMC_CmdReadSingleBlock>
 8002e6e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7a      	ldr	r2, [pc, #488]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e150      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002ea0:	e061      	b.n	8002f66 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03c      	beq.n	8002f2a <HAL_SD_ReadBlocks+0x1ce>
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d039      	beq.n	8002f2a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eba:	e033      	b.n	8002f24 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fb5a 	bl	800557a <SDIO_ReadFIFO>
 8002ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	3301      	adds	r3, #1
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	0c1b      	lsrs	r3, r3, #16
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	3301      	adds	r3, #1
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f04:	3b01      	subs	r3, #1
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	0e1b      	lsrs	r3, r3, #24
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	3301      	adds	r3, #1
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f20:	3301      	adds	r3, #1
 8002f22:	643b      	str	r3, [r7, #64]	; 0x40
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d9c8      	bls.n	8002ebc <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002f2a:	f7fd fd9f 	bl	8000a6c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d902      	bls.n	8002f40 <HAL_SD_ReadBlocks+0x1e4>
 8002f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d112      	bne.n	8002f66 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a47      	ldr	r2, [pc, #284]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0eb      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d096      	beq.n	8002ea2 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d022      	beq.n	8002fc8 <HAL_SD_ReadBlocks+0x26c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d91f      	bls.n	8002fc8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 fc4b 	bl	8005830 <SDMMC_CmdStopTransfer>
 8002f9a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d012      	beq.n	8002fc8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ba      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d012      	beq.n	8002ffc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	f043 0208 	orr.w	r2, r3, #8
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a0      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d012      	beq.n	8003030 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e086      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_SD_ReadBlocks+0x308>)
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e06c      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
 8003064:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fa84 	bl	800557a <SDIO_ReadFIFO>
 8003072:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	b2da      	uxtb	r2, r3
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	3301      	adds	r3, #1
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	3b01      	subs	r3, #1
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	b2da      	uxtb	r2, r3
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	3301      	adds	r3, #1
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	3b01      	subs	r3, #1
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	3301      	adds	r3, #1
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	3b01      	subs	r3, #1
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	0e1b      	lsrs	r3, r3, #24
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	3301      	adds	r3, #1
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c6:	3b01      	subs	r3, #1
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80030ca:	f7fd fccf 	bl	8000a6c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d902      	bls.n	80030e0 <HAL_SD_ReadBlocks+0x384>
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d112      	bne.n	8003106 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_SD_ReadBlocks+0x3ec>)
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01b      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SD_ReadBlocks+0x3be>
 8003114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1a6      	bne.n	8003068 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003122:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e006      	b.n	800313e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3748      	adds	r7, #72	; 0x48
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	004005ff 	.word	0x004005ff

0800314c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b092      	sub	sp, #72	; 0x48
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800315a:	f7fd fc87 	bl	8000a6c <HAL_GetTick>
 800315e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e182      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 8175 	bne.w	8003476 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	429a      	cmp	r2, r3
 800319e:	d907      	bls.n	80031b0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e169      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2203      	movs	r2, #3
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d002      	beq.n	80031ce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	025b      	lsls	r3, r3, #9
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031d6:	4618      	mov	r0, r3
 80031d8:	f002 fa80 	bl	80056dc <SDMMC_CmdBlockLength>
 80031dc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80031de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a9c      	ldr	r2, [pc, #624]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e13f      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	025b      	lsls	r3, r3, #9
 800320e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003210:	2390      	movs	r3, #144	; 0x90
 8003212:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003218:	2300      	movs	r3, #0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800321c:	2301      	movs	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f107 0218 	add.w	r2, r7, #24
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fa2a 	bl	8005684 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d90a      	bls.n	800324c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003242:	4618      	mov	r0, r3
 8003244:	f002 fad2 	bl	80057ec <SDMMC_CmdWriteMultiBlock>
 8003248:	6478      	str	r0, [r7, #68]	; 0x44
 800324a:	e009      	b.n	8003260 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2210      	movs	r2, #16
 8003250:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003258:	4618      	mov	r0, r3
 800325a:	f002 faa5 	bl	80057a8 <SDMMC_CmdWriteSingleBlock>
 800325e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003262:	2b00      	cmp	r3, #0
 8003264:	d012      	beq.n	800328c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0fb      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003290:	e065      	b.n	800335e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d040      	beq.n	8003322 <HAL_SD_WriteBlocks+0x1d6>
 80032a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03d      	beq.n	8003322 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	643b      	str	r3, [r7, #64]	; 0x40
 80032aa:	e037      	b.n	800331c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	3301      	adds	r3, #1
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ba:	3b01      	subs	r3, #1
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	021a      	lsls	r2, r3, #8
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	3301      	adds	r3, #1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	3b01      	subs	r3, #1
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	041a      	lsls	r2, r3, #16
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	3301      	adds	r3, #1
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ea:	3b01      	subs	r3, #1
 80032ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	061a      	lsls	r2, r3, #24
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	3301      	adds	r3, #1
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	3b01      	subs	r3, #1
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f107 0214 	add.w	r2, r7, #20
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f002 f93f 	bl	8005594 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003318:	3301      	adds	r3, #1
 800331a:	643b      	str	r3, [r7, #64]	; 0x40
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	2b07      	cmp	r3, #7
 8003320:	d9c4      	bls.n	80032ac <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003322:	f7fd fba3 	bl	8000a6c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800332e:	429a      	cmp	r2, r3
 8003330:	d902      	bls.n	8003338 <HAL_SD_WriteBlocks+0x1ec>
 8003332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003334:	2b00      	cmp	r3, #0
 8003336:	d112      	bne.n	800335e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a47      	ldr	r2, [pc, #284]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e092      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003368:	2b00      	cmp	r3, #0
 800336a:	d092      	beq.n	8003292 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d022      	beq.n	80033c0 <HAL_SD_WriteBlocks+0x274>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d91f      	bls.n	80033c0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	2b03      	cmp	r3, #3
 8003386:	d01b      	beq.n	80033c0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f002 fa4f 	bl	8005830 <SDMMC_CmdStopTransfer>
 8003392:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	2b00      	cmp	r3, #0
 8003398:	d012      	beq.n	80033c0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e061      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	f043 0208 	orr.w	r2, r3, #8
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e047      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e02d      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d014      	beq.n	8003460 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_SD_WriteBlocks+0x310>)
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e013      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
 800345c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f240 523a 	movw	r2, #1338	; 0x53a
 8003468:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e006      	b.n	8003484 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
  }
}
 8003484:	4618      	mov	r0, r3
 8003486:	3748      	adds	r7, #72	; 0x48
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	0f9b      	lsrs	r3, r3, #30
 800349c:	b2da      	uxtb	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	0e1b      	lsrs	r3, r3, #24
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	0d1b      	lsrs	r3, r3, #20
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350a:	0bdb      	lsrs	r3, r3, #15
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351c:	0b9b      	lsrs	r3, r3, #14
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352e:	0b5b      	lsrs	r3, r3, #13
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	b2da      	uxtb	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003540:	0b1b      	lsrs	r3, r3, #12
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	2b00      	cmp	r3, #0
 800355a:	d163      	bne.n	8003624 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	009a      	lsls	r2, r3, #2
 8003562:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003566:	4013      	ands	r3, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800356c:	0f92      	lsrs	r2, r2, #30
 800356e:	431a      	orrs	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003578:	0edb      	lsrs	r3, r3, #27
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	b2da      	uxtb	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	b2da      	uxtb	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359c:	0d5b      	lsrs	r3, r3, #21
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c0:	0bdb      	lsrs	r3, r3, #15
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	7e1b      	ldrb	r3, [r3, #24]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	3302      	adds	r3, #2
 80035e4:	2201      	movs	r2, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035ee:	fb02 f203 	mul.w	r2, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	7a1b      	ldrb	r3, [r3, #8]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	2201      	movs	r2, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003610:	0a52      	lsrs	r2, r2, #9
 8003612:	fb02 f203 	mul.w	r2, r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003620:	661a      	str	r2, [r3, #96]	; 0x60
 8003622:	e031      	b.n	8003688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2b01      	cmp	r3, #1
 800362a:	d11d      	bne.n	8003668 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	431a      	orrs	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	3301      	adds	r3, #1
 8003648:	029a      	lsls	r2, r3, #10
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
 8003666:	e00f      	b.n	8003688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_SD_GetCardCSD+0x344>)
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e09d      	b.n	80037c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368c:	0b9b      	lsrs	r3, r3, #14
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369e:	09db      	lsrs	r3, r3, #7
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	0fdb      	lsrs	r3, r3, #31
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	0f5b      	lsrs	r3, r3, #29
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	0d9b      	lsrs	r3, r3, #22
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	0d5b      	lsrs	r3, r3, #21
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	0bdb      	lsrs	r3, r3, #15
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	0b9b      	lsrs	r3, r3, #14
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	b2da      	uxtb	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	0b1b      	lsrs	r3, r3, #12
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	b2da      	uxtb	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	004005ff 	.word	0x004005ff

080037d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af04      	add	r7, sp, #16
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2203      	movs	r2, #3
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	2b03      	cmp	r3, #3
 8003844:	d02e      	beq.n	80038a4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d106      	bne.n	800385c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
 800385a:	e029      	b.n	80038b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003862:	d10a      	bne.n	800387a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa01 	bl	8003c6c <SD_WideBus_Enable>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
 8003878:	e01a      	b.n	80038b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fa3e 	bl	8003d02 <SD_WideBus_Disable>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
 8003894:	e00c      	b.n	80038b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
 80038a2:	e005      	b.n	80038b0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e024      	b.n	8003916 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	466c      	mov	r4, sp
 80038f4:	f107 0318 	add.w	r3, r7, #24
 80038f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003906:	4628      	mov	r0, r5
 8003908:	f001 fe0c 	bl	8005524 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3728      	adds	r7, #40	; 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bdb0      	pop	{r4, r5, r7, pc}
 800391e:	bf00      	nop
 8003920:	004005ff 	.word	0x004005ff

08003924 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f970 	bl	8003c1c <SD_SendStatus>
 800393c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	0a5b      	lsrs	r3, r3, #9
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800395a:	693b      	ldr	r3, [r7, #16]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003964:	b5b0      	push	{r4, r5, r7, lr}
 8003966:	b094      	sub	sp, #80	; 0x50
 8003968:	af04      	add	r7, sp, #16
 800396a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800396c:	2301      	movs	r3, #1
 800396e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fe2d 	bl	80055d4 <SDIO_GetPowerState>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003980:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003984:	e0b7      	b.n	8003af6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	2b03      	cmp	r3, #3
 800398c:	d02f      	beq.n	80039ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f002 f856 	bl	8005a44 <SDMMC_CmdSendCID>
 8003998:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800399a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80039a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a2:	e0a8      	b.n	8003af6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 fe57 	bl	800565e <SDIO_GetResponse>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2104      	movs	r1, #4
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fe4e 	bl	800565e <SDIO_GetResponse>
 80039c2:	4602      	mov	r2, r0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2108      	movs	r1, #8
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fe45 	bl	800565e <SDIO_GetResponse>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	210c      	movs	r1, #12
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fe3c 	bl	800565e <SDIO_GetResponse>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d00d      	beq.n	8003a12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f107 020e 	add.w	r2, r7, #14
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 f85c 	bl	8005abe <SDMMC_CmdSetRelAdd>
 8003a06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <SD_InitCard+0xae>
    {
      return errorstate;
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	e071      	b.n	8003af6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d036      	beq.n	8003a88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f002 f826 	bl	8005a80 <SDMMC_CmdSendCSD>
 8003a34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	e05a      	b.n	8003af6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fe09 	bl	800565e <SDIO_GetResponse>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2104      	movs	r1, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fe00 	bl	800565e <SDIO_GetResponse>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2108      	movs	r1, #8
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fdf7 	bl	800565e <SDIO_GetResponse>
 8003a70:	4602      	mov	r2, r0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	210c      	movs	r1, #12
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fdee 	bl	800565e <SDIO_GetResponse>
 8003a82:	4602      	mov	r2, r0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fde5 	bl	800565e <SDIO_GetResponse>
 8003a94:	4603      	mov	r3, r0
 8003a96:	0d1a      	lsrs	r2, r3, #20
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fcf2 	bl	800348c <HAL_SD_GetCardCSD>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ab2:	e020      	b.n	8003af6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	f001 fed4 	bl	8005874 <SDMMC_CmdSelDesel>
 8003acc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <SD_InitCard+0x174>
  {
    return errorstate;
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	e00e      	b.n	8003af6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681d      	ldr	r5, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	466c      	mov	r4, sp
 8003ae0:	f103 0210 	add.w	r2, r3, #16
 8003ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aea:	3304      	adds	r3, #4
 8003aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aee:	4628      	mov	r0, r5
 8003af0:	f001 fd18 	bl	8005524 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3740      	adds	r7, #64	; 0x40
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003b00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fece 	bl	80058ba <SDMMC_CmdGoIdleState>
 8003b1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	e072      	b.n	8003c10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fee1 	bl	80058f6 <SDMMC_CmdOperCond>
 8003b34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 feb7 	bl	80058ba <SDMMC_CmdGoIdleState>
 8003b4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	e05b      	b.n	8003c10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d137      	bne.n	8003bd6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 fee1 	bl	8005934 <SDMMC_CmdAppCommand>
 8003b72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d02d      	beq.n	8003bd6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b7e:	e047      	b.n	8003c10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fed4 	bl	8005934 <SDMMC_CmdAppCommand>
 8003b8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	e03b      	b.n	8003c10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	491e      	ldr	r1, [pc, #120]	; (8003c18 <SD_PowerON+0x118>)
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 feea 	bl	8005978 <SDMMC_CmdAppOperCommand>
 8003ba4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bb0:	e02e      	b.n	8003c10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fd50 	bl	800565e <SDIO_GetResponse>
 8003bbe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	0fdb      	lsrs	r3, r3, #31
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <SD_PowerON+0xcc>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <SD_PowerON+0xce>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]

    count++;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d802      	bhi.n	8003be6 <SD_PowerON+0xe6>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0cc      	beq.n	8003b80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d902      	bls.n	8003bf6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf4:	e00c      	b.n	8003c10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
 8003c06:	e002      	b.n	8003c0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	c1100000 	.word	0xc1100000

08003c1c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c30:	e018      	b.n	8003c64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f001 ff5e 	bl	8005b00 <SDMMC_CmdSendStatus>
 8003c44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	e009      	b.n	8003c64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fd01 	bl	800565e <SDIO_GetResponse>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fceb 	bl	800565e <SDIO_GetResponse>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c92:	d102      	bne.n	8003c9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c98:	e02f      	b.n	8003cfa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f879 	bl	8003d98 <SD_FindSCR>
 8003ca6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	e023      	b.n	8003cfa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01c      	beq.n	8003cf6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f001 fe33 	bl	8005934 <SDMMC_CmdAppCommand>
 8003cce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	e00f      	b.n	8003cfa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fe6c 	bl	80059be <SDMMC_CmdBusWidth>
 8003ce6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	e003      	b.n	8003cfa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e001      	b.n	8003cfa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fca0 	bl	800565e <SDIO_GetResponse>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d28:	d102      	bne.n	8003d30 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d2e:	e02f      	b.n	8003d90 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f82e 	bl	8003d98 <SD_FindSCR>
 8003d3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	e023      	b.n	8003d90 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01c      	beq.n	8003d8c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f001 fde8 	bl	8005934 <SDMMC_CmdAppCommand>
 8003d64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	e00f      	b.n	8003d90 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 fe21 	bl	80059be <SDMMC_CmdBusWidth>
 8003d7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	e003      	b.n	8003d90 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e001      	b.n	8003d90 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b08f      	sub	sp, #60	; 0x3c
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003da2:	f7fc fe63 	bl	8000a6c <HAL_GetTick>
 8003da6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fc8c 	bl	80056dc <SDMMC_CmdBlockLength>
 8003dc4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	e0a9      	b.n	8003f24 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f001 fda9 	bl	8005934 <SDMMC_CmdAppCommand>
 8003de2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <SD_FindSCR+0x56>
  {
    return errorstate;
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	e09a      	b.n	8003f24 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003df4:	2308      	movs	r3, #8
 8003df6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003df8:	2330      	movs	r3, #48	; 0x30
 8003dfa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f107 0210 	add.w	r2, r7, #16
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fc36 	bl	8005684 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fdf0 	bl	8005a02 <SDMMC_CmdSendSCR>
 8003e22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d022      	beq.n	8003e70 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	e07a      	b.n	8003f24 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f107 0208 	add.w	r2, r7, #8
 8003e48:	18d4      	adds	r4, r2, r3
 8003e4a:	4608      	mov	r0, r1
 8003e4c:	f001 fb95 	bl	800557a <SDIO_ReadFIFO>
 8003e50:	4603      	mov	r3, r0
 8003e52:	6023      	str	r3, [r4, #0]
      index++;
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	3301      	adds	r3, #1
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e5a:	f7fc fe07 	bl	8000a6c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d102      	bne.n	8003e70 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e6e:	e059      	b.n	8003f24 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e76:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0d6      	beq.n	8003e2e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2208      	movs	r2, #8
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e96:	2308      	movs	r3, #8
 8003e98:	e044      	b.n	8003f24 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2202      	movs	r2, #2
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e037      	b.n	8003f24 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	e02a      	b.n	8003f24 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	061a      	lsls	r2, r3, #24
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ee4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003eee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	0e1b      	lsrs	r3, r3, #24
 8003ef4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	601a      	str	r2, [r3, #0]
    scr++;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	3304      	adds	r3, #4
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	061a      	lsls	r2, r3, #24
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0e1b      	lsrs	r3, r3, #24
 8003f1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	373c      	adds	r7, #60	; 0x3c
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}

08003f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e056      	b.n	8003fec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f009 fa25 	bl	800d3a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	0c1b      	lsrs	r3, r3, #16
 8003fbc:	f003 0104 	and.w	r1, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t const * const pData, uint16_t Size, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Transmit+0x22>
 8004012:	2302      	movs	r3, #2
 8004014:	e11e      	b.n	8004254 <HAL_SPI_Transmit+0x260>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401e:	f7fc fd25 	bl	8000a6c <HAL_GetTick>
 8004022:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d002      	beq.n	800403a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004034:	2302      	movs	r3, #2
 8004036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004038:	e103      	b.n	8004242 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_SPI_Transmit+0x52>
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800404a:	e0fa      	b.n	8004242 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2203      	movs	r2, #3
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004092:	d107      	bne.n	80040a4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d007      	beq.n	80040c2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ca:	d14b      	bne.n	8004164 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Transmit+0xe6>
 80040d4:	8afb      	ldrh	r3, [r7, #22]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d13e      	bne.n	8004158 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040fe:	e02b      	b.n	8004158 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d112      	bne.n	8004134 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	1c9a      	adds	r2, r3, #2
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36
 8004132:	e011      	b.n	8004158 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004134:	f7fc fc9a 	bl	8000a6c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d803      	bhi.n	800414c <HAL_SPI_Transmit+0x158>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d102      	bne.n	8004152 <HAL_SPI_Transmit+0x15e>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004156:	e074      	b.n	8004242 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ce      	bne.n	8004100 <HAL_SPI_Transmit+0x10c>
 8004162:	e04c      	b.n	80041fe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_SPI_Transmit+0x17e>
 800416c:	8afb      	ldrh	r3, [r7, #22]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d140      	bne.n	80041f4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004198:	e02c      	b.n	80041f4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d113      	bne.n	80041d0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	7812      	ldrb	r2, [r2, #0]
 80041b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80041ce:	e011      	b.n	80041f4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d0:	f7fc fc4c 	bl	8000a6c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d803      	bhi.n	80041e8 <HAL_SPI_Transmit+0x1f4>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d102      	bne.n	80041ee <HAL_SPI_Transmit+0x1fa>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041f2:	e026      	b.n	8004242 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1cd      	bne.n	800419a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fba4 	bl	8004950 <SPI_EndRxTxTransaction>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	77fb      	strb	r3, [r7, #31]
 800423e:	e000      	b.n	8004242 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004240:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004252:	7ffb      	ldrb	r3, [r7, #31]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004278:	d112      	bne.n	80042a0 <HAL_SPI_Receive+0x44>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2204      	movs	r2, #4
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8e9 	bl	800446e <HAL_SPI_TransmitReceive>
 800429c:	4603      	mov	r3, r0
 800429e:	e0e2      	b.n	8004466 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_Receive+0x52>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0db      	b.n	8004466 <HAL_SPI_Receive+0x20a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b6:	f7fc fbd9 	bl	8000a6c <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d002      	beq.n	80042ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042cc:	e0c2      	b.n	8004454 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_Receive+0x7e>
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042de:	e0b9      	b.n	8004454 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2204      	movs	r2, #4
 80042e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d107      	bne.n	8004338 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d007      	beq.n	8004356 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d162      	bne.n	8004424 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800435e:	e02e      	b.n	80043be <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d115      	bne.n	800439a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f103 020c 	add.w	r2, r3, #12
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004398:	e011      	b.n	80043be <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439a:	f7fc fb67 	bl	8000a6c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d803      	bhi.n	80043b2 <HAL_SPI_Receive+0x156>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d102      	bne.n	80043b8 <HAL_SPI_Receive+0x15c>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043bc:	e04a      	b.n	8004454 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1cb      	bne.n	8004360 <HAL_SPI_Receive+0x104>
 80043c8:	e031      	b.n	800442e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d113      	bne.n	8004400 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	b292      	uxth	r2, r2
 80043e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043fe:	e011      	b.n	8004424 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004400:	f7fc fb34 	bl	8000a6c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d803      	bhi.n	8004418 <HAL_SPI_Receive+0x1bc>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d102      	bne.n	800441e <HAL_SPI_Receive+0x1c2>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004422:	e017      	b.n	8004454 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cd      	bne.n	80043ca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa27 	bl	8004886 <SPI_EndRxTransaction>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
 8004450:	e000      	b.n	8004454 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004452:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t const * const pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08c      	sub	sp, #48	; 0x30
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800447c:	2301      	movs	r3, #1
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x26>
 8004490:	2302      	movs	r3, #2
 8004492:	e18a      	b.n	80047aa <HAL_SPI_TransmitReceive+0x33c>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449c:	f7fc fae6 	bl	8000a6c <HAL_GetTick>
 80044a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d00f      	beq.n	80044de <HAL_SPI_TransmitReceive+0x70>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c4:	d107      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x68>
 80044ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d003      	beq.n	80044de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044dc:	e15b      	b.n	8004796 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x82>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x82>
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044f6:	e14e      	b.n	8004796 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b04      	cmp	r3, #4
 8004502:	d003      	beq.n	800450c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2205      	movs	r2, #5
 8004508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	887a      	ldrh	r2, [r7, #2]
 8004522:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	887a      	ldrh	r2, [r7, #2]
 800452e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d007      	beq.n	8004560 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004568:	d178      	bne.n	800465c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x10a>
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d166      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	881a      	ldrh	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800459c:	e053      	b.n	8004646 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d11b      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x176>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d016      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x176>
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d113      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d119      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x1b8>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d014      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	b292      	uxth	r2, r2
 8004608:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004622:	2301      	movs	r3, #1
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004626:	f7fc fa21 	bl	8000a6c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004632:	429a      	cmp	r2, r3
 8004634:	d807      	bhi.n	8004646 <HAL_SPI_TransmitReceive+0x1d8>
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d003      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004644:	e0a7      	b.n	8004796 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1a6      	bne.n	800459e <HAL_SPI_TransmitReceive+0x130>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1a1      	bne.n	800459e <HAL_SPI_TransmitReceive+0x130>
 800465a:	e07c      	b.n	8004756 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_SPI_TransmitReceive+0x1fc>
 8004664:	8b7b      	ldrh	r3, [r7, #26]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d16b      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004690:	e057      	b.n	8004742 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11c      	bne.n	80046da <HAL_SPI_TransmitReceive+0x26c>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <HAL_SPI_TransmitReceive+0x26c>
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d114      	bne.n	80046da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d119      	bne.n	800471c <HAL_SPI_TransmitReceive+0x2ae>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d014      	beq.n	800471c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004718:	2301      	movs	r3, #1
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800471c:	f7fc f9a6 	bl	8000a6c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004728:	429a      	cmp	r2, r3
 800472a:	d803      	bhi.n	8004734 <HAL_SPI_TransmitReceive+0x2c6>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d102      	bne.n	800473a <HAL_SPI_TransmitReceive+0x2cc>
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004740:	e029      	b.n	8004796 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1a2      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x224>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d19d      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004758:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f8f8 	bl	8004950 <SPI_EndRxTxTransaction>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004772:	e010      	b.n	8004796 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	e000      	b.n	8004796 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3730      	adds	r7, #48	; 0x30
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c2:	e04c      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d048      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047cc:	f7fc f94e 	bl	8000a6c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d902      	bls.n	80047e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d13d      	bne.n	800485e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fa:	d111      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d004      	beq.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d107      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d10f      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d1a3      	bne.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af02      	add	r7, sp, #8
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489a:	d111      	bne.n	80048c0 <SPI_EndRxTransaction+0x3a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a4:	d004      	beq.n	80048b0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d107      	bne.n	80048c0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c8:	d12a      	bne.n	8004920 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d2:	d012      	beq.n	80048fa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff ff67 	bl	80047b2 <SPI_WaitFlagStateUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02d      	beq.n	8004946 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e026      	b.n	8004948 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	2101      	movs	r1, #1
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff ff54 	bl	80047b2 <SPI_WaitFlagStateUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01a      	beq.n	8004946 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e013      	b.n	8004948 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	2101      	movs	r1, #1
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff ff41 	bl	80047b2 <SPI_WaitFlagStateUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	f043 0220 	orr.w	r2, r3, #32
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e000      	b.n	8004948 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <SPI_EndRxTxTransaction+0x7c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <SPI_EndRxTxTransaction+0x80>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0d5b      	lsrs	r3, r3, #21
 8004968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d112      	bne.n	80049a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff ff13 	bl	80047b2 <SPI_WaitFlagStateUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	f043 0220 	orr.w	r2, r3, #32
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e00f      	b.n	80049c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d0f2      	beq.n	80049a2 <SPI_EndRxTxTransaction+0x52>
 80049bc:	e000      	b.n	80049c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80049be:	bf00      	nop
  }

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000024 	.word	0x20000024
 80049d0:	165e9f81 	.word	0x165e9f81

080049d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e01d      	b.n	8004a22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f008 fd2c 	bl	800d458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f000 f9fa 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e01d      	b.n	8004a78 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f815 	bl	8004a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 f9cf 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fc9a 	bl	80053e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <HAL_TIM_PWM_Start+0x74>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x2c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <HAL_TIM_PWM_Start+0x78>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0x30>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40010400 	.word	0x40010400

08004b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0b4      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	f200 809f 	bhi.w	8004c80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004c81 	.word	0x08004c81
 8004b50:	08004c81 	.word	0x08004c81
 8004b54:	08004c81 	.word	0x08004c81
 8004b58:	08004bbd 	.word	0x08004bbd
 8004b5c:	08004c81 	.word	0x08004c81
 8004b60:	08004c81 	.word	0x08004c81
 8004b64:	08004c81 	.word	0x08004c81
 8004b68:	08004bff 	.word	0x08004bff
 8004b6c:	08004c81 	.word	0x08004c81
 8004b70:	08004c81 	.word	0x08004c81
 8004b74:	08004c81 	.word	0x08004c81
 8004b78:	08004c3f 	.word	0x08004c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f9e2 	bl	8004f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	619a      	str	r2, [r3, #24]
      break;
 8004bba:	e062      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa32 	bl	800502c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	619a      	str	r2, [r3, #24]
      break;
 8004bfc:	e041      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa87 	bl	8005118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0208 	orr.w	r2, r2, #8
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0204 	bic.w	r2, r2, #4
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]
      break;
 8004c3c:	e021      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fadb 	bl	8005200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69d9      	ldr	r1, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	61da      	str	r2, [r3, #28]
      break;
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_ConfigClockSource+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0a6      	b.n	8004e02 <HAL_TIM_ConfigClockSource+0x166>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d067      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0x120>
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d80b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x6c>
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d073      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0x140>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d802      	bhi.n	8004cfe <HAL_TIM_ConfigClockSource+0x62>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d06f      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004cfc:	e078      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d06c      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0x140>
 8004d02:	2b30      	cmp	r3, #48	; 0x30
 8004d04:	d06a      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004d06:	e073      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d08:	2b70      	cmp	r3, #112	; 0x70
 8004d0a:	d00d      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x8c>
 8004d0c:	2b70      	cmp	r3, #112	; 0x70
 8004d0e:	d804      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x7e>
 8004d10:	2b50      	cmp	r3, #80	; 0x50
 8004d12:	d033      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0xe0>
 8004d14:	2b60      	cmp	r3, #96	; 0x60
 8004d16:	d041      	beq.n	8004d9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004d18:	e06a      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d066      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x152>
 8004d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d24:	d017      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d26:	e063      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f000 fb32 	bl	80053a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
      break;
 8004d54:	e04c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f000 fb1b 	bl	80053a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d78:	609a      	str	r2, [r3, #8]
      break;
 8004d7a:	e039      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f000 fa8f 	bl	80052ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2150      	movs	r1, #80	; 0x50
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fae8 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004d9a:	e029      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f000 faae 	bl	800530a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2160      	movs	r1, #96	; 0x60
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fad8 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004dba:	e019      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f000 fa6f 	bl	80052ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2140      	movs	r1, #64	; 0x40
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fac8 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004dda:	e009      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fabf 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a40      	ldr	r2, [pc, #256]	; (8004f20 <TIM_Base_SetConfig+0x114>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d00f      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3d      	ldr	r2, [pc, #244]	; (8004f24 <TIM_Base_SetConfig+0x118>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3c      	ldr	r2, [pc, #240]	; (8004f28 <TIM_Base_SetConfig+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3b      	ldr	r2, [pc, #236]	; (8004f2c <TIM_Base_SetConfig+0x120>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3a      	ldr	r2, [pc, #232]	; (8004f30 <TIM_Base_SetConfig+0x124>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d108      	bne.n	8004e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <TIM_Base_SetConfig+0x114>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02b      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d027      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	; (8004f24 <TIM_Base_SetConfig+0x118>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d023      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2b      	ldr	r2, [pc, #172]	; (8004f28 <TIM_Base_SetConfig+0x11c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01f      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <TIM_Base_SetConfig+0x120>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01b      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <TIM_Base_SetConfig+0x124>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d017      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <TIM_Base_SetConfig+0x128>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <TIM_Base_SetConfig+0x12c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <TIM_Base_SetConfig+0x130>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <TIM_Base_SetConfig+0x134>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <TIM_Base_SetConfig+0x138>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <TIM_Base_SetConfig+0x13c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <TIM_Base_SetConfig+0x114>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0xf8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <TIM_Base_SetConfig+0x124>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d103      	bne.n	8004f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	615a      	str	r2, [r3, #20]
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800
 8004f40:	40001800 	.word	0x40001800
 8004f44:	40001c00 	.word	0x40001c00
 8004f48:	40002000 	.word	0x40002000

08004f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0201 	bic.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0302 	bic.w	r3, r3, #2
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a20      	ldr	r2, [pc, #128]	; (8005024 <TIM_OC1_SetConfig+0xd8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x64>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <TIM_OC1_SetConfig+0xdc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0308 	bic.w	r3, r3, #8
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a15      	ldr	r2, [pc, #84]	; (8005024 <TIM_OC1_SetConfig+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_OC1_SetConfig+0x8e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a14      	ldr	r2, [pc, #80]	; (8005028 <TIM_OC1_SetConfig+0xdc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d111      	bne.n	8004ffe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	621a      	str	r2, [r3, #32]
}
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	40010000 	.word	0x40010000
 8005028:	40010400 	.word	0x40010400

0800502c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0210 	bic.w	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0320 	bic.w	r3, r3, #32
 8005076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <TIM_OC2_SetConfig+0xe4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC2_SetConfig+0x68>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a21      	ldr	r2, [pc, #132]	; (8005114 <TIM_OC2_SetConfig+0xe8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10d      	bne.n	80050b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a17      	ldr	r2, [pc, #92]	; (8005110 <TIM_OC2_SetConfig+0xe4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC2_SetConfig+0x94>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a16      	ldr	r2, [pc, #88]	; (8005114 <TIM_OC2_SetConfig+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d113      	bne.n	80050e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <TIM_OC3_SetConfig+0xe0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC3_SetConfig+0x66>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a20      	ldr	r2, [pc, #128]	; (80051fc <TIM_OC3_SetConfig+0xe4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10d      	bne.n	800519a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <TIM_OC3_SetConfig+0xe0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_OC3_SetConfig+0x92>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a15      	ldr	r2, [pc, #84]	; (80051fc <TIM_OC3_SetConfig+0xe4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d113      	bne.n	80051d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800524a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <TIM_OC4_SetConfig+0xa4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC4_SetConfig+0x68>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <TIM_OC4_SetConfig+0xa8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d109      	bne.n	800527c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	019b      	lsls	r3, r3, #6
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010400 	.word	0x40010400

080052ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 030a 	bic.w	r3, r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0210 	bic.w	r2, r3, #16
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	f043 0307 	orr.w	r3, r3, #7
 800538c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	609a      	str	r2, [r3, #8]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2201      	movs	r2, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1a      	ldr	r2, [r3, #32]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	43db      	mvns	r3, r3
 8005402:	401a      	ands	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	431a      	orrs	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005440:	2302      	movs	r3, #2
 8005442:	e05a      	b.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a21      	ldr	r2, [pc, #132]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d01d      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1d      	ldr	r2, [pc, #116]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a17      	ldr	r2, [pc, #92]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a15      	ldr	r2, [pc, #84]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10c      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40010400 	.word	0x40010400
 800551c:	40014000 	.word	0x40014000
 8005520:	40001800 	.word	0x40001800

08005524 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005524:	b084      	sub	sp, #16
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	f107 001c 	add.w	r0, r7, #28
 8005532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800553a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800553c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800553e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005542:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005546:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800554a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800554e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800555e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	b004      	add	sp, #16
 8005578:	4770      	bx	lr

0800557a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2203      	movs	r2, #3
 80055c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80055c4:	2002      	movs	r0, #2
 80055c6:	f7fb fa5d 	bl	8000a84 <HAL_Delay>
  
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0303 	and.w	r3, r3, #3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800560e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005614:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800561a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800562a:	f023 030f 	bic.w	r3, r3, #15
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	b2db      	uxtb	r3, r3
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3314      	adds	r3, #20
 800566c:	461a      	mov	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	4413      	add	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
}  
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80056b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80056b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0

}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80056ea:	2310      	movs	r3, #16
 80056ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056ee:	2340      	movs	r3, #64	; 0x40
 80056f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056fc:	f107 0308 	add.w	r3, r7, #8
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ff74 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	2110      	movs	r1, #16
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa40 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005716:	69fb      	ldr	r3, [r7, #28]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800572e:	2311      	movs	r3, #17
 8005730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005732:	2340      	movs	r3, #64	; 0x40
 8005734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800573a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ff52 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	2111      	movs	r1, #17
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa1e 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800575a:	69fb      	ldr	r3, [r7, #28]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005772:	2312      	movs	r3, #18
 8005774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800577e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005784:	f107 0308 	add.w	r3, r7, #8
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ff30 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	2112      	movs	r1, #18
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f9fc 	bl	8005b94 <SDMMC_GetCmdResp1>
 800579c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800579e:	69fb      	ldr	r3, [r7, #28]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057b6:	2318      	movs	r3, #24
 80057b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057c8:	f107 0308 	add.w	r3, r7, #8
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff ff0e 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80057d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d8:	2118      	movs	r1, #24
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f9da 	bl	8005b94 <SDMMC_GetCmdResp1>
 80057e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80057fa:	2319      	movs	r3, #25
 80057fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057fe:	2340      	movs	r3, #64	; 0x40
 8005800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800580c:	f107 0308 	add.w	r3, r7, #8
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff feec 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	2119      	movs	r1, #25
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9b8 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005826:	69fb      	ldr	r3, [r7, #28]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800583c:	230c      	movs	r3, #12
 800583e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800584c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fecb 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <SDMMC_CmdStopTransfer+0x40>)
 800585c:	210c      	movs	r1, #12
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f998 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005866:	69fb      	ldr	r3, [r7, #28]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	05f5e100 	.word	0x05f5e100

08005874 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005884:	2307      	movs	r3, #7
 8005886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005894:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005896:	f107 0310 	add.w	r3, r7, #16
 800589a:	4619      	mov	r1, r3
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fea7 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80058a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a6:	2107      	movs	r1, #7
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f973 	bl	8005b94 <SDMMC_GetCmdResp1>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3728      	adds	r7, #40	; 0x28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b088      	sub	sp, #32
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058d8:	f107 0308 	add.w	r3, r7, #8
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe86 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f92d 	bl	8005b44 <SDMMC_GetCmdError>
 80058ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ec:	69fb      	ldr	r3, [r7, #28]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b088      	sub	sp, #32
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80058fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005904:	2308      	movs	r3, #8
 8005906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fe67 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb16 	bl	8005f54 <SDMMC_GetCmdResp7>
 8005928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800592a:	69fb      	ldr	r3, [r7, #28]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005942:	2337      	movs	r3, #55	; 0x37
 8005944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800594e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005954:	f107 0308 	add.w	r3, r7, #8
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fe48 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005960:	f241 3288 	movw	r2, #5000	; 0x1388
 8005964:	2137      	movs	r1, #55	; 0x37
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f914 	bl	8005b94 <SDMMC_GetCmdResp1>
 800596c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800596e:	69fb      	ldr	r3, [r7, #28]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800598e:	2329      	movs	r3, #41	; 0x29
 8005990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800599a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800599e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059a0:	f107 0308 	add.w	r3, r7, #8
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fe22 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa23 	bl	8005df8 <SDMMC_GetCmdResp3>
 80059b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059b4:	69fb      	ldr	r3, [r7, #28]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b088      	sub	sp, #32
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80059cc:	2306      	movs	r3, #6
 80059ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059d0:	2340      	movs	r3, #64	; 0x40
 80059d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff fe03 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80059ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ee:	2106      	movs	r1, #6
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8cf 	bl	8005b94 <SDMMC_GetCmdResp1>
 80059f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059f8:	69fb      	ldr	r3, [r7, #28]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b088      	sub	sp, #32
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005a0e:	2333      	movs	r3, #51	; 0x33
 8005a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a20:	f107 0308 	add.w	r3, r7, #8
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fde2 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	2133      	movs	r1, #51	; 0x33
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8ae 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a50:	2302      	movs	r3, #2
 8005a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a54:	23c0      	movs	r3, #192	; 0xc0
 8005a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fdc1 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f97c 	bl	8005d6c <SDMMC_GetCmdResp2>
 8005a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a76:	69fb      	ldr	r3, [r7, #28]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a8e:	2309      	movs	r3, #9
 8005a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a92:	23c0      	movs	r3, #192	; 0xc0
 8005a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aa0:	f107 0308 	add.w	r3, r7, #8
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fda2 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f95d 	bl	8005d6c <SDMMC_GetCmdResp2>
 8005ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b088      	sub	sp, #32
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005acc:	2303      	movs	r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005adc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fd83 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	2103      	movs	r1, #3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9bc 	bl	8005e6c <SDMMC_GetCmdResp6>
 8005af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005af6:	69fb      	ldr	r3, [r7, #28]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005b0e:	230d      	movs	r3, #13
 8005b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b12:	2340      	movs	r3, #64	; 0x40
 8005b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b20:	f107 0308 	add.w	r3, r7, #8
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fd62 	bl	80055f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	210d      	movs	r1, #13
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f82e 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005b44:	b490      	push	{r4, r7}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <SDMMC_GetCmdError+0x48>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0f      	ldr	r2, [pc, #60]	; (8005b90 <SDMMC_GetCmdError+0x4c>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	0a5b      	lsrs	r3, r3, #9
 8005b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b60:	4623      	mov	r3, r4
 8005b62:	1e5c      	subs	r4, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b6c:	e009      	b.n	8005b82 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f2      	beq.n	8005b60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	22c5      	movs	r2, #197	; 0xc5
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc90      	pop	{r4, r7}
 8005b8a:	4770      	bx	lr
 8005b8c:	20000024 	.word	0x20000024
 8005b90:	10624dd3 	.word	0x10624dd3

08005b94 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005ba2:	4b6f      	ldr	r3, [pc, #444]	; (8005d60 <SDMMC_GetCmdResp1+0x1cc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a6f      	ldr	r2, [pc, #444]	; (8005d64 <SDMMC_GetCmdResp1+0x1d0>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	0a5b      	lsrs	r3, r3, #9
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	1e5c      	subs	r4, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bc0:	e0c9      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <SDMMC_GetCmdResp1+0x20>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1eb      	bne.n	8005bb4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2204      	movs	r2, #4
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bee:	2304      	movs	r3, #4
 8005bf0:	e0b1      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0a6      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	22c5      	movs	r2, #197	; 0xc5
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff fd18 	bl	8005644 <SDIO_GetCommandResponse>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	7afb      	ldrb	r3, [r7, #11]
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d001      	beq.n	8005c22 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e099      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c22:	2100      	movs	r1, #0
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fd1a 	bl	800565e <SDIO_GetResponse>
 8005c2a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4b4e      	ldr	r3, [pc, #312]	; (8005d68 <SDMMC_GetCmdResp1+0x1d4>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e08d      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da02      	bge.n	8005c46 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c44:	e087      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	e080      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	e079      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c70:	e071      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c80:	e069      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c90:	e061      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ca0:	e059      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb0:	e051      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cc0:	e049      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cd0:	e041      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce0:	e039      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cf0:	e031      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005cfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d00:	e029      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d10:	e021      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005d1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d20:	e019      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d30:	e011      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005d3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d40:	e009      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d50:	e001      	b.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd90      	pop	{r4, r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000024 	.word	0x20000024
 8005d64:	10624dd3 	.word	0x10624dd3
 8005d68:	fdffe008 	.word	0xfdffe008

08005d6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005d6c:	b490      	push	{r4, r7}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <SDMMC_GetCmdResp2+0x84>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <SDMMC_GetCmdResp2+0x88>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0a5b      	lsrs	r3, r3, #9
 8005d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d88:	4623      	mov	r3, r4
 8005d8a:	1e5c      	subs	r4, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d94:	e026      	b.n	8005de4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <SDMMC_GetCmdResp2+0x1c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1eb      	bne.n	8005d88 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	e00e      	b.n	8005de4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e003      	b.n	8005de4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	22c5      	movs	r2, #197	; 0xc5
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc90      	pop	{r4, r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000024 	.word	0x20000024
 8005df4:	10624dd3 	.word	0x10624dd3

08005df8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005df8:	b490      	push	{r4, r7}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e00:	4b18      	ldr	r3, [pc, #96]	; (8005e64 <SDMMC_GetCmdResp3+0x6c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <SDMMC_GetCmdResp3+0x70>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	0a5b      	lsrs	r3, r3, #9
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e14:	4623      	mov	r3, r4
 8005e16:	1e5c      	subs	r4, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e20:	e01b      	b.n	8005e5a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <SDMMC_GetCmdResp3+0x1c>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1eb      	bne.n	8005e14 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e4e:	2304      	movs	r3, #4
 8005e50:	e003      	b.n	8005e5a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	22c5      	movs	r2, #197	; 0xc5
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc90      	pop	{r4, r7}
 8005e62:	4770      	bx	lr
 8005e64:	20000024 	.word	0x20000024
 8005e68:	10624dd3 	.word	0x10624dd3

08005e6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	460b      	mov	r3, r1
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e7a:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <SDMMC_GetCmdResp6+0xe0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <SDMMC_GetCmdResp6+0xe4>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	0a5b      	lsrs	r3, r3, #9
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005e8e:	4623      	mov	r3, r4
 8005e90:	1e5c      	subs	r4, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e9a:	e052      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <SDMMC_GetCmdResp6+0x22>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1eb      	bne.n	8005e8e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d004      	beq.n	8005ecc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ec8:	2304      	movs	r3, #4
 8005eca:	e03a      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e02f      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff fbae 	bl	8005644 <SDIO_GetCommandResponse>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d001      	beq.n	8005ef6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e025      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	22c5      	movs	r2, #197	; 0xc5
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005efc:	2100      	movs	r1, #0
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff fbad 	bl	800565e <SDIO_GetResponse>
 8005f04:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e011      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f2c:	e009      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f3c:	e001      	b.n	8005f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000024 	.word	0x20000024
 8005f50:	10624dd3 	.word	0x10624dd3

08005f54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005f54:	b490      	push	{r4, r7}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f5c:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <SDMMC_GetCmdResp7+0x90>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <SDMMC_GetCmdResp7+0x94>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	0a5b      	lsrs	r3, r3, #9
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005f70:	4623      	mov	r3, r4
 8005f72:	1e5c      	subs	r4, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f7c:	e02c      	b.n	8005fd8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <SDMMC_GetCmdResp7+0x1c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1eb      	bne.n	8005f70 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005faa:	2304      	movs	r3, #4
 8005fac:	e014      	b.n	8005fd8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e009      	b.n	8005fd8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2240      	movs	r2, #64	; 0x40
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fd6:	2300      	movs	r3, #0
  
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc90      	pop	{r4, r7}
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20000024 	.word	0x20000024
 8005fe8:	10624dd3 	.word	0x10624dd3

08005fec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	4a08      	ldr	r2, [pc, #32]	; (800601c <disk_status+0x30>)
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	79fa      	ldrb	r2, [r7, #7]
 8006004:	4905      	ldr	r1, [pc, #20]	; (800601c <disk_status+0x30>)
 8006006:	440a      	add	r2, r1
 8006008:	7a12      	ldrb	r2, [r2, #8]
 800600a:	4610      	mov	r0, r2
 800600c:	4798      	blx	r3
 800600e:	4603      	mov	r3, r0
 8006010:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	200000d4 	.word	0x200000d4

08006020 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	4a0d      	ldr	r2, [pc, #52]	; (8006068 <disk_initialize+0x48>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d111      	bne.n	800605c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	4a0b      	ldr	r2, [pc, #44]	; (8006068 <disk_initialize+0x48>)
 800603c:	2101      	movs	r1, #1
 800603e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	4a09      	ldr	r2, [pc, #36]	; (8006068 <disk_initialize+0x48>)
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	79fa      	ldrb	r2, [r7, #7]
 800604e:	4906      	ldr	r1, [pc, #24]	; (8006068 <disk_initialize+0x48>)
 8006050:	440a      	add	r2, r1
 8006052:	7a12      	ldrb	r2, [r2, #8]
 8006054:	4610      	mov	r0, r2
 8006056:	4798      	blx	r3
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	200000d4 	.word	0x200000d4

0800606c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <disk_read+0x3c>)
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	689c      	ldr	r4, [r3, #8]
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <disk_read+0x3c>)
 800608c:	4413      	add	r3, r2
 800608e:	7a18      	ldrb	r0, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	47a0      	blx	r4
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]
  return res;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd90      	pop	{r4, r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200000d4 	.word	0x200000d4

080060ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80060ac:	b590      	push	{r4, r7, lr}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <disk_write+0x3c>)
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	68dc      	ldr	r4, [r3, #12]
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	4a07      	ldr	r2, [pc, #28]	; (80060e8 <disk_write+0x3c>)
 80060cc:	4413      	add	r3, r2
 80060ce:	7a18      	ldrb	r0, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	47a0      	blx	r4
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]
  return res;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200000d4 	.word	0x200000d4

080060ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	603a      	str	r2, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
 80060f8:	460b      	mov	r3, r1
 80060fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <disk_ioctl+0x38>)
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	79fa      	ldrb	r2, [r7, #7]
 800610a:	4906      	ldr	r1, [pc, #24]	; (8006124 <disk_ioctl+0x38>)
 800610c:	440a      	add	r2, r1
 800610e:	7a10      	ldrb	r0, [r2, #8]
 8006110:	79b9      	ldrb	r1, [r7, #6]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	4798      	blx	r3
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
  return res;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	200000d4 	.word	0x200000d4

08006128 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3301      	adds	r3, #1
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006138:	89fb      	ldrh	r3, [r7, #14]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	b21a      	sxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	b21b      	sxth	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b21b      	sxth	r3, r3
 8006148:	81fb      	strh	r3, [r7, #14]
	return rv;
 800614a:	89fb      	ldrh	r3, [r7, #14]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3303      	adds	r3, #3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	3202      	adds	r2, #2
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	3201      	adds	r2, #1
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006190:	68fb      	ldr	r3, [r7, #12]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	887a      	ldrh	r2, [r7, #2]
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	887b      	ldrh	r3, [r7, #2]
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	887a      	ldrh	r2, [r7, #2]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	1c53      	adds	r3, r2, #1
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	6179      	str	r1, [r7, #20]
 8006252:	7812      	ldrb	r2, [r2, #0]
 8006254:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3b01      	subs	r3, #1
 800625a:	607b      	str	r3, [r7, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f1      	bne.n	8006246 <mem_cpy+0x1a>
	}
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800626e:	b480      	push	{r7}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	617a      	str	r2, [r7, #20]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3b01      	subs	r3, #1
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f3      	bne.n	800627e <mem_set+0x10>
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80062a2:	b480      	push	{r7}
 80062a4:	b089      	sub	sp, #36	; 0x24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	61fa      	str	r2, [r7, #28]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	61ba      	str	r2, [r7, #24]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	1acb      	subs	r3, r1, r3
 80062ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <mem_cmp+0x40>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0eb      	beq.n	80062ba <mem_cmp+0x18>

	return r;
 80062e2:	697b      	ldr	r3, [r7, #20]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3724      	adds	r7, #36	; 0x24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80062fa:	e002      	b.n	8006302 <chk_chr+0x12>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3301      	adds	r3, #1
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <chk_chr+0x26>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4293      	cmp	r3, r2
 8006314:	d1f2      	bne.n	80062fc <chk_chr+0xc>
	return *str;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	781b      	ldrb	r3, [r3, #0]
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	e029      	b.n	8006390 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800633c:	4a27      	ldr	r2, [pc, #156]	; (80063dc <chk_lock+0xb4>)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	4413      	add	r3, r2
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01d      	beq.n	8006386 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800634a:	4a24      	ldr	r2, [pc, #144]	; (80063dc <chk_lock+0xb4>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	4413      	add	r3, r2
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d116      	bne.n	800638a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800635c:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <chk_lock+0xb4>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	4413      	add	r3, r2
 8006364:	3304      	adds	r3, #4
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800636c:	429a      	cmp	r2, r3
 800636e:	d10c      	bne.n	800638a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006370:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <chk_lock+0xb4>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	4413      	add	r3, r2
 8006378:	3308      	adds	r3, #8
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006380:	429a      	cmp	r2, r3
 8006382:	d102      	bne.n	800638a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006384:	e007      	b.n	8006396 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006386:	2301      	movs	r3, #1
 8006388:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d9d2      	bls.n	800633c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d109      	bne.n	80063b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <chk_lock+0x80>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d101      	bne.n	80063ac <chk_lock+0x84>
 80063a8:	2300      	movs	r3, #0
 80063aa:	e010      	b.n	80063ce <chk_lock+0xa6>
 80063ac:	2312      	movs	r3, #18
 80063ae:	e00e      	b.n	80063ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d108      	bne.n	80063c8 <chk_lock+0xa0>
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <chk_lock+0xb4>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4413      	add	r3, r2
 80063be:	330c      	adds	r3, #12
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d101      	bne.n	80063cc <chk_lock+0xa4>
 80063c8:	2310      	movs	r3, #16
 80063ca:	e000      	b.n	80063ce <chk_lock+0xa6>
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	200000b4 	.word	0x200000b4

080063e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	e002      	b.n	80063f2 <enq_lock+0x12>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3301      	adds	r3, #1
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d806      	bhi.n	8006406 <enq_lock+0x26>
 80063f8:	4a09      	ldr	r2, [pc, #36]	; (8006420 <enq_lock+0x40>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	4413      	add	r3, r2
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f2      	bne.n	80063ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b02      	cmp	r3, #2
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	200000b4 	.word	0x200000b4

08006424 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e01f      	b.n	8006474 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006434:	4a41      	ldr	r2, [pc, #260]	; (800653c <inc_lock+0x118>)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	4413      	add	r3, r2
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d113      	bne.n	800646e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006446:	4a3d      	ldr	r2, [pc, #244]	; (800653c <inc_lock+0x118>)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	4413      	add	r3, r2
 800644e:	3304      	adds	r3, #4
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006456:	429a      	cmp	r2, r3
 8006458:	d109      	bne.n	800646e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800645a:	4a38      	ldr	r2, [pc, #224]	; (800653c <inc_lock+0x118>)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	4413      	add	r3, r2
 8006462:	3308      	adds	r3, #8
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800646a:	429a      	cmp	r2, r3
 800646c:	d006      	beq.n	800647c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d9dc      	bls.n	8006434 <inc_lock+0x10>
 800647a:	e000      	b.n	800647e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800647c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d132      	bne.n	80064ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e002      	b.n	8006490 <inc_lock+0x6c>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d806      	bhi.n	80064a4 <inc_lock+0x80>
 8006496:	4a29      	ldr	r2, [pc, #164]	; (800653c <inc_lock+0x118>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	4413      	add	r3, r2
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f2      	bne.n	800648a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d101      	bne.n	80064ae <inc_lock+0x8a>
 80064aa:	2300      	movs	r3, #0
 80064ac:	e040      	b.n	8006530 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4922      	ldr	r1, [pc, #136]	; (800653c <inc_lock+0x118>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	440b      	add	r3, r1
 80064ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	491e      	ldr	r1, [pc, #120]	; (800653c <inc_lock+0x118>)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	440b      	add	r3, r1
 80064c8:	3304      	adds	r3, #4
 80064ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	491a      	ldr	r1, [pc, #104]	; (800653c <inc_lock+0x118>)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	440b      	add	r3, r1
 80064d8:	3308      	adds	r3, #8
 80064da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80064dc:	4a17      	ldr	r2, [pc, #92]	; (800653c <inc_lock+0x118>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	4413      	add	r3, r2
 80064e4:	330c      	adds	r3, #12
 80064e6:	2200      	movs	r2, #0
 80064e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <inc_lock+0xe0>
 80064f0:	4a12      	ldr	r2, [pc, #72]	; (800653c <inc_lock+0x118>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	4413      	add	r3, r2
 80064f8:	330c      	adds	r3, #12
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <inc_lock+0xe0>
 8006500:	2300      	movs	r3, #0
 8006502:	e015      	b.n	8006530 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d108      	bne.n	800651c <inc_lock+0xf8>
 800650a:	4a0c      	ldr	r2, [pc, #48]	; (800653c <inc_lock+0x118>)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4413      	add	r3, r2
 8006512:	330c      	adds	r3, #12
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	e001      	b.n	8006520 <inc_lock+0xfc>
 800651c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006520:	4906      	ldr	r1, [pc, #24]	; (800653c <inc_lock+0x118>)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	440b      	add	r3, r1
 8006528:	330c      	adds	r3, #12
 800652a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	200000b4 	.word	0x200000b4

08006540 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3b01      	subs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d825      	bhi.n	80065a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006554:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <dec_lock+0x74>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	4413      	add	r3, r2
 800655c:	330c      	adds	r3, #12
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006562:	89fb      	ldrh	r3, [r7, #14]
 8006564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006568:	d101      	bne.n	800656e <dec_lock+0x2e>
 800656a:	2300      	movs	r3, #0
 800656c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800656e:	89fb      	ldrh	r3, [r7, #14]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <dec_lock+0x3a>
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	3b01      	subs	r3, #1
 8006578:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800657a:	4a0e      	ldr	r2, [pc, #56]	; (80065b4 <dec_lock+0x74>)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	4413      	add	r3, r2
 8006582:	330c      	adds	r3, #12
 8006584:	89fa      	ldrh	r2, [r7, #14]
 8006586:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006588:	89fb      	ldrh	r3, [r7, #14]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d105      	bne.n	800659a <dec_lock+0x5a>
 800658e:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <dec_lock+0x74>)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	4413      	add	r3, r2
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	737b      	strb	r3, [r7, #13]
 800659e:	e001      	b.n	80065a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80065a0:	2302      	movs	r3, #2
 80065a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80065a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	200000b4 	.word	0x200000b4

080065b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e010      	b.n	80065e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065c6:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <clear_lock+0x44>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4413      	add	r3, r2
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d105      	bne.n	80065e2 <clear_lock+0x2a>
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <clear_lock+0x44>)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d9eb      	bls.n	80065c6 <clear_lock+0xe>
	}
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	200000b4 	.word	0x200000b4

08006600 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	78db      	ldrb	r3, [r3, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d034      	beq.n	800667e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7858      	ldrb	r0, [r3, #1]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006624:	2301      	movs	r3, #1
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	f7ff fd40 	bl	80060ac <disk_write>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e022      	b.n	800667e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	1ad2      	subs	r2, r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	429a      	cmp	r2, r3
 800664c:	d217      	bcs.n	800667e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	789b      	ldrb	r3, [r3, #2]
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	e010      	b.n	8006678 <sync_window+0x78>
					wsect += fs->fsize;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4413      	add	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7858      	ldrb	r0, [r3, #1]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800666a:	2301      	movs	r3, #1
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	f7ff fd1d 	bl	80060ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3b01      	subs	r3, #1
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d8eb      	bhi.n	8006656 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d01b      	beq.n	80066d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ffad 	bl	8006600 <sync_window>
 80066a6:	4603      	mov	r3, r0
 80066a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d113      	bne.n	80066d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7858      	ldrb	r0, [r3, #1]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066ba:	2301      	movs	r3, #1
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	f7ff fcd5 	bl	800606c <disk_read>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff87 	bl	8006600 <sync_window>
 80066f2:	4603      	mov	r3, r0
 80066f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d158      	bne.n	80067ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d148      	bne.n	8006796 <sync_fs+0xb2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	791b      	ldrb	r3, [r3, #4]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d144      	bne.n	8006796 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3330      	adds	r3, #48	; 0x30
 8006710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fda9 	bl	800626e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3330      	adds	r3, #48	; 0x30
 8006720:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006724:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fd38 	bl	800619e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3330      	adds	r3, #48	; 0x30
 8006732:	4921      	ldr	r1, [pc, #132]	; (80067b8 <sync_fs+0xd4>)
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fd4d 	bl	80061d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3330      	adds	r3, #48	; 0x30
 800673e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006742:	491e      	ldr	r1, [pc, #120]	; (80067bc <sync_fs+0xd8>)
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fd45 	bl	80061d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3330      	adds	r3, #48	; 0x30
 800674e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f7ff fd3b 	bl	80061d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3330      	adds	r3, #48	; 0x30
 8006762:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7ff fd31 	bl	80061d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7858      	ldrb	r0, [r3, #1]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	2301      	movs	r3, #1
 800678c:	f7ff fc8e 	bl	80060ac <disk_write>
			fs->fsi_flag = 0;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fca4 	bl	80060ec <disk_ioctl>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <sync_fs+0xca>
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	41615252 	.word	0x41615252
 80067bc:	61417272 	.word	0x61417272

080067c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	3b02      	subs	r3, #2
 80067ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	3b02      	subs	r3, #2
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d301      	bcc.n	80067e0 <clust2sect+0x20>
 80067dc:	2300      	movs	r3, #0
 80067de:	e008      	b.n	80067f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	895b      	ldrh	r3, [r3, #10]
 80067e4:	461a      	mov	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	fb03 f202 	mul.w	r2, r3, r2
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	4413      	add	r3, r2
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b086      	sub	sp, #24
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d904      	bls.n	800681e <get_fat+0x20>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d302      	bcc.n	8006824 <get_fat+0x26>
		val = 1;	/* Internal error */
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e08c      	b.n	800693e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d045      	beq.n	80068be <get_fat+0xc0>
 8006832:	2b03      	cmp	r3, #3
 8006834:	d05d      	beq.n	80068f2 <get_fat+0xf4>
 8006836:	2b01      	cmp	r3, #1
 8006838:	d177      	bne.n	800692a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	0a5b      	lsrs	r3, r3, #9
 8006850:	4413      	add	r3, r2
 8006852:	4619      	mov	r1, r3
 8006854:	6938      	ldr	r0, [r7, #16]
 8006856:	f7ff ff17 	bl	8006688 <move_window>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d167      	bne.n	8006930 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	60fa      	str	r2, [r7, #12]
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4413      	add	r3, r2
 800686e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006872:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	0a5b      	lsrs	r3, r3, #9
 800687c:	4413      	add	r3, r2
 800687e:	4619      	mov	r1, r3
 8006880:	6938      	ldr	r0, [r7, #16]
 8006882:	f7ff ff01 	bl	8006688 <move_window>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d153      	bne.n	8006934 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	461a      	mov	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <get_fat+0xb6>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	091b      	lsrs	r3, r3, #4
 80068b2:	e002      	b.n	80068ba <get_fat+0xbc>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ba:	617b      	str	r3, [r7, #20]
			break;
 80068bc:	e03f      	b.n	800693e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6a1a      	ldr	r2, [r3, #32]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	4413      	add	r3, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f7ff fedc 	bl	8006688 <move_window>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d130      	bne.n	8006938 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80068e4:	4413      	add	r3, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fc1e 	bl	8006128 <ld_word>
 80068ec:	4603      	mov	r3, r0
 80068ee:	617b      	str	r3, [r7, #20]
			break;
 80068f0:	e025      	b.n	800693e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	09db      	lsrs	r3, r3, #7
 80068fa:	4413      	add	r3, r2
 80068fc:	4619      	mov	r1, r3
 80068fe:	6938      	ldr	r0, [r7, #16]
 8006900:	f7ff fec2 	bl	8006688 <move_window>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d118      	bne.n	800693c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006918:	4413      	add	r3, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fc1c 	bl	8006158 <ld_dword>
 8006920:	4603      	mov	r3, r0
 8006922:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006926:	617b      	str	r3, [r7, #20]
			break;
 8006928:	e009      	b.n	800693e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e006      	b.n	800693e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006930:	bf00      	nop
 8006932:	e004      	b.n	800693e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006934:	bf00      	nop
 8006936:	e002      	b.n	800693e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006938:	bf00      	nop
 800693a:	e000      	b.n	800693e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800693c:	bf00      	nop
		}
	}

	return val;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006954:	2302      	movs	r3, #2
 8006956:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b01      	cmp	r3, #1
 800695c:	f240 80d6 	bls.w	8006b0c <put_fat+0x1c4>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	f080 80d0 	bcs.w	8006b0c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d073      	beq.n	8006a5c <put_fat+0x114>
 8006974:	2b03      	cmp	r3, #3
 8006976:	f000 8091 	beq.w	8006a9c <put_fat+0x154>
 800697a:	2b01      	cmp	r3, #1
 800697c:	f040 80c6 	bne.w	8006b0c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	4413      	add	r3, r2
 800698c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1a      	ldr	r2, [r3, #32]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	0a5b      	lsrs	r3, r3, #9
 8006996:	4413      	add	r3, r2
 8006998:	4619      	mov	r1, r3
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff fe74 	bl	8006688 <move_window>
 80069a0:	4603      	mov	r3, r0
 80069a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069a4:	7ffb      	ldrb	r3, [r7, #31]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 80a9 	bne.w	8006afe <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	1c59      	adds	r1, r3, #1
 80069b6:	61b9      	str	r1, [r7, #24]
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	4413      	add	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <put_fat+0x9e>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	b25a      	sxtb	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	b25b      	sxtb	r3, r3
 80069de:	4313      	orrs	r3, r2
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	e001      	b.n	80069ea <put_fat+0xa2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	0a5b      	lsrs	r3, r3, #9
 80069fc:	4413      	add	r3, r2
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff fe41 	bl	8006688 <move_window>
 8006a06:	4603      	mov	r3, r0
 8006a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a0a:	7ffb      	ldrb	r3, [r7, #31]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d178      	bne.n	8006b02 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	4413      	add	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <put_fat+0xea>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e00e      	b.n	8006a50 <put_fat+0x108>
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b25b      	sxtb	r3, r3
 8006a38:	f023 030f 	bic.w	r3, r3, #15
 8006a3c:	b25a      	sxtb	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	b25b      	sxtb	r3, r3
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	b25b      	sxtb	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	70da      	strb	r2, [r3, #3]
			break;
 8006a5a:	e057      	b.n	8006b0c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	4413      	add	r3, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff fe0d 	bl	8006688 <move_window>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a72:	7ffb      	ldrb	r3, [r7, #31]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d146      	bne.n	8006b06 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006a86:	4413      	add	r3, r2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	b292      	uxth	r2, r2
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fb85 	bl	800619e <st_word>
			fs->wflag = 1;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	70da      	strb	r2, [r3, #3]
			break;
 8006a9a:	e037      	b.n	8006b0c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	09db      	lsrs	r3, r3, #7
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fded 	bl	8006688 <move_window>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ab2:	7ffb      	ldrb	r3, [r7, #31]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d128      	bne.n	8006b0a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006acc:	4413      	add	r3, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fb42 	bl	8006158 <ld_dword>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ada:	4323      	orrs	r3, r4
 8006adc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006aec:	4413      	add	r3, r2
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fb6f 	bl	80061d4 <st_dword>
			fs->wflag = 1;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	70da      	strb	r2, [r3, #3]
			break;
 8006afc:	e006      	b.n	8006b0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006afe:	bf00      	nop
 8006b00:	e004      	b.n	8006b0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006b02:	bf00      	nop
 8006b04:	e002      	b.n	8006b0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006b0a:	bf00      	nop
		}
	}
	return res;
 8006b0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3724      	adds	r7, #36	; 0x24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd90      	pop	{r4, r7, pc}

08006b16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b088      	sub	sp, #32
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d904      	bls.n	8006b3c <remove_chain+0x26>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d301      	bcc.n	8006b40 <remove_chain+0x2a>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e04b      	b.n	8006bd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006b46:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	69b8      	ldr	r0, [r7, #24]
 8006b4e:	f7ff fefb 	bl	8006948 <put_fat>
 8006b52:	4603      	mov	r3, r0
 8006b54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006b56:	7ffb      	ldrb	r3, [r7, #31]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <remove_chain+0x4a>
 8006b5c:	7ffb      	ldrb	r3, [r7, #31]
 8006b5e:	e03b      	b.n	8006bd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff fe4b 	bl	80067fe <get_fat>
 8006b68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d031      	beq.n	8006bd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <remove_chain+0x64>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e02e      	b.n	8006bd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d101      	bne.n	8006b86 <remove_chain+0x70>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e028      	b.n	8006bd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b86:	2200      	movs	r2, #0
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	69b8      	ldr	r0, [r7, #24]
 8006b8c:	f7ff fedc 	bl	8006948 <put_fat>
 8006b90:	4603      	mov	r3, r0
 8006b92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006b94:	7ffb      	ldrb	r3, [r7, #31]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <remove_chain+0x88>
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
 8006b9c:	e01c      	b.n	8006bd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	3b02      	subs	r3, #2
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d20b      	bcs.n	8006bc4 <remove_chain+0xae>
			fs->free_clst++;
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d3c6      	bcc.n	8006b60 <remove_chain+0x4a>
 8006bd2:	e000      	b.n	8006bd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006bd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10d      	bne.n	8006c12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <create_chain+0x2c>
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d31b      	bcc.n	8006c44 <create_chain+0x64>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e018      	b.n	8006c44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fdf2 	bl	80067fe <get_fat>
 8006c1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d801      	bhi.n	8006c26 <create_chain+0x46>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e070      	b.n	8006d08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2c:	d101      	bne.n	8006c32 <create_chain+0x52>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	e06a      	b.n	8006d08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d201      	bcs.n	8006c40 <create_chain+0x60>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	e063      	b.n	8006d08 <create_chain+0x128>
		scl = clst;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d307      	bcc.n	8006c68 <create_chain+0x88>
				ncl = 2;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d901      	bls.n	8006c68 <create_chain+0x88>
 8006c64:	2300      	movs	r3, #0
 8006c66:	e04f      	b.n	8006d08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fdc7 	bl	80067fe <get_fat>
 8006c70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d003      	beq.n	8006c86 <create_chain+0xa6>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d101      	bne.n	8006c8a <create_chain+0xaa>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	e03e      	b.n	8006d08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d1da      	bne.n	8006c48 <create_chain+0x68>
 8006c92:	2300      	movs	r3, #0
 8006c94:	e038      	b.n	8006d08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006c96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	69f9      	ldr	r1, [r7, #28]
 8006c9e:	6938      	ldr	r0, [r7, #16]
 8006ca0:	f7ff fe52 	bl	8006948 <put_fat>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <create_chain+0xe2>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6938      	ldr	r0, [r7, #16]
 8006cba:	f7ff fe45 	bl	8006948 <put_fat>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d116      	bne.n	8006cf6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	3b02      	subs	r3, #2
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d804      	bhi.n	8006ce6 <create_chain+0x106>
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	711a      	strb	r2, [r3, #4]
 8006cf4:	e007      	b.n	8006d06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d102      	bne.n	8006d02 <create_chain+0x122>
 8006cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006d00:	e000      	b.n	8006d04 <create_chain+0x124>
 8006d02:	2301      	movs	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d06:	69fb      	ldr	r3, [r7, #28]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	3304      	adds	r3, #4
 8006d26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	0a5b      	lsrs	r3, r3, #9
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	8952      	ldrh	r2, [r2, #10]
 8006d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1d1a      	adds	r2, r3, #4
 8006d3a:	613a      	str	r2, [r7, #16]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <clmt_clust+0x3a>
 8006d46:	2300      	movs	r3, #0
 8006d48:	e010      	b.n	8006d6c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d307      	bcc.n	8006d62 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d60:	e7e9      	b.n	8006d36 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006d62:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	4413      	add	r3, r2
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8e:	d204      	bcs.n	8006d9a <dir_sdi+0x22>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e063      	b.n	8006e66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <dir_sdi+0x46>
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d902      	bls.n	8006dbe <dir_sdi+0x46>
		clst = fs->dirbase;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	8912      	ldrh	r2, [r2, #8]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d301      	bcc.n	8006dd4 <dir_sdi+0x5c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e048      	b.n	8006e66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	61da      	str	r2, [r3, #28]
 8006ddc:	e029      	b.n	8006e32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	895b      	ldrh	r3, [r3, #10]
 8006de2:	025b      	lsls	r3, r3, #9
 8006de4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006de6:	e019      	b.n	8006e1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6979      	ldr	r1, [r7, #20]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fd06 	bl	80067fe <get_fat>
 8006df2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d101      	bne.n	8006e00 <dir_sdi+0x88>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e032      	b.n	8006e66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d904      	bls.n	8006e10 <dir_sdi+0x98>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d301      	bcc.n	8006e14 <dir_sdi+0x9c>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e028      	b.n	8006e66 <dir_sdi+0xee>
			ofs -= csz;
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d2e1      	bcs.n	8006de8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	6938      	ldr	r0, [r7, #16]
 8006e28:	f7ff fcca 	bl	80067c0 <clust2sect>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <dir_sdi+0xcc>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e010      	b.n	8006e66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	0a5b      	lsrs	r3, r3, #9
 8006e4c:	441a      	add	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	441a      	add	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	3320      	adds	r3, #32
 8006e84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <dir_next+0x28>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e94:	d301      	bcc.n	8006e9a <dir_next+0x2c>
 8006e96:	2304      	movs	r3, #4
 8006e98:	e0aa      	b.n	8006ff0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f040 8098 	bne.w	8006fd6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	8912      	ldrh	r2, [r2, #8]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	f0c0 8088 	bcc.w	8006fd6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	61da      	str	r2, [r3, #28]
 8006ecc:	2304      	movs	r3, #4
 8006ece:	e08f      	b.n	8006ff0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	0a5b      	lsrs	r3, r3, #9
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	8952      	ldrh	r2, [r2, #10]
 8006ed8:	3a01      	subs	r2, #1
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d17a      	bne.n	8006fd6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4610      	mov	r0, r2
 8006eea:	f7ff fc88 	bl	80067fe <get_fat>
 8006eee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d801      	bhi.n	8006efa <dir_next+0x8c>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e07a      	b.n	8006ff0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d101      	bne.n	8006f06 <dir_next+0x98>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e074      	b.n	8006ff0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d358      	bcc.n	8006fc2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	61da      	str	r2, [r3, #28]
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	e067      	b.n	8006ff0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	4619      	mov	r1, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f7ff fe59 	bl	8006be0 <create_chain>
 8006f2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <dir_next+0xcc>
 8006f36:	2307      	movs	r3, #7
 8006f38:	e05a      	b.n	8006ff0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <dir_next+0xd6>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e055      	b.n	8006ff0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d101      	bne.n	8006f50 <dir_next+0xe2>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e04f      	b.n	8006ff0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fb55 	bl	8006600 <sync_window>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <dir_next+0xf2>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e047      	b.n	8006ff0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3330      	adds	r3, #48	; 0x30
 8006f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f97f 	bl	800626e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	6979      	ldr	r1, [r7, #20]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff fc22 	bl	80067c0 <clust2sect>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f82:	e012      	b.n	8006faa <dir_next+0x13c>
						fs->wflag = 1;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff fb38 	bl	8006600 <sync_window>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <dir_next+0x12c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e02a      	b.n	8006ff0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	895b      	ldrh	r3, [r3, #10]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d3e6      	bcc.n	8006f84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad2      	subs	r2, r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006fc8:	6979      	ldr	r1, [r7, #20]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f7ff fbf8 	bl	80067c0 <clust2sect>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe8:	441a      	add	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007008:	2100      	movs	r1, #0
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff feb4 	bl	8006d78 <dir_sdi>
 8007010:	4603      	mov	r3, r0
 8007012:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d12b      	bne.n	8007072 <dir_alloc+0x7a>
		n = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	4619      	mov	r1, r3
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fb2f 	bl	8006688 <move_window>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d11d      	bne.n	8007070 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2be5      	cmp	r3, #229	; 0xe5
 800703c:	d004      	beq.n	8007048 <dir_alloc+0x50>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d107      	bne.n	8007058 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3301      	adds	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d102      	bne.n	800705c <dir_alloc+0x64>
 8007056:	e00c      	b.n	8007072 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800705c:	2101      	movs	r1, #1
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff ff05 	bl	8006e6e <dir_next>
 8007064:	4603      	mov	r3, r0
 8007066:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0d7      	beq.n	800701e <dir_alloc+0x26>
 800706e:	e000      	b.n	8007072 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007070:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	2b04      	cmp	r3, #4
 8007076:	d101      	bne.n	800707c <dir_alloc+0x84>
 8007078:	2307      	movs	r3, #7
 800707a:	75fb      	strb	r3, [r7, #23]
	return res;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	331a      	adds	r3, #26
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff f847 	bl	8006128 <ld_word>
 800709a:	4603      	mov	r3, r0
 800709c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d109      	bne.n	80070ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	3314      	adds	r3, #20
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff f83c 	bl	8006128 <ld_word>
 80070b0:	4603      	mov	r3, r0
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	331a      	adds	r3, #26
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	b292      	uxth	r2, r2
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f85f 	bl	800619e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d109      	bne.n	80070fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f103 0214 	add.w	r2, r3, #20
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f7ff f851 	bl	800619e <st_word>
	}
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800710e:	2304      	movs	r3, #4
 8007110:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007118:	e03c      	b.n	8007194 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	4619      	mov	r1, r3
 8007120:	6938      	ldr	r0, [r7, #16]
 8007122:	f7ff fab1 	bl	8006688 <move_window>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d136      	bne.n	800719e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800713e:	2304      	movs	r3, #4
 8007140:	75fb      	strb	r3, [r7, #23]
 8007142:	e031      	b.n	80071a8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	330b      	adds	r3, #11
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007150:	73bb      	strb	r3, [r7, #14]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7bba      	ldrb	r2, [r7, #14]
 8007156:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2be5      	cmp	r3, #229	; 0xe5
 800715c:	d011      	beq.n	8007182 <dir_read+0x7e>
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	2b2e      	cmp	r3, #46	; 0x2e
 8007162:	d00e      	beq.n	8007182 <dir_read+0x7e>
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d00b      	beq.n	8007182 <dir_read+0x7e>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	f023 0320 	bic.w	r3, r3, #32
 8007170:	2b08      	cmp	r3, #8
 8007172:	bf0c      	ite	eq
 8007174:	2301      	moveq	r3, #1
 8007176:	2300      	movne	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	4293      	cmp	r3, r2
 8007180:	d00f      	beq.n	80071a2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007182:	2100      	movs	r1, #0
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fe72 	bl	8006e6e <dir_next>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d108      	bne.n	80071a6 <dir_read+0xa2>
	while (dp->sect) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1be      	bne.n	800711a <dir_read+0x16>
 800719c:	e004      	b.n	80071a8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800719e:	bf00      	nop
 80071a0:	e002      	b.n	80071a8 <dir_read+0xa4>
				break;
 80071a2:	bf00      	nop
 80071a4:	e000      	b.n	80071a8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80071a6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <dir_read+0xb0>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	61da      	str	r2, [r3, #28]
	return res;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80071cc:	2100      	movs	r1, #0
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fdd2 	bl	8006d78 <dir_sdi>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <dir_find+0x24>
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	e03e      	b.n	8007260 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6938      	ldr	r0, [r7, #16]
 80071ea:	f7ff fa4d 	bl	8006688 <move_window>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d12f      	bne.n	8007258 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <dir_find+0x4e>
 8007206:	2304      	movs	r3, #4
 8007208:	75fb      	strb	r3, [r7, #23]
 800720a:	e028      	b.n	800725e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	330b      	adds	r3, #11
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	330b      	adds	r3, #11
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <dir_find+0x86>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a18      	ldr	r0, [r3, #32]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3324      	adds	r3, #36	; 0x24
 8007236:	220b      	movs	r2, #11
 8007238:	4619      	mov	r1, r3
 800723a:	f7ff f832 	bl	80062a2 <mem_cmp>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007244:	2100      	movs	r1, #0
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff fe11 	bl	8006e6e <dir_next>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0c5      	beq.n	80071e2 <dir_find+0x24>
 8007256:	e002      	b.n	800725e <dir_find+0xa0>
		if (res != FR_OK) break;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800725c:	bf00      	nop

	return res;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007276:	2101      	movs	r1, #1
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff febd 	bl	8006ff8 <dir_alloc>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11c      	bne.n	80072c2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	4619      	mov	r1, r3
 800728e:	68b8      	ldr	r0, [r7, #8]
 8007290:	f7ff f9fa 	bl	8006688 <move_window>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d111      	bne.n	80072c2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	2220      	movs	r2, #32
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe ffe1 	bl	800626e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a18      	ldr	r0, [r3, #32]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3324      	adds	r3, #36	; 0x24
 80072b4:	220b      	movs	r2, #11
 80072b6:	4619      	mov	r1, r3
 80072b8:	f7fe ffb8 	bl	800622c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2201      	movs	r2, #1
 80072c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff f9d1 	bl	8006688 <move_window>
 80072e6:	4603      	mov	r3, r0
 80072e8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	22e5      	movs	r2, #229	; 0xe5
 80072f6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80072fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2200      	movs	r2, #0
 8007316:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d04e      	beq.n	80073be <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007328:	e021      	b.n	800736e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	6179      	str	r1, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2b20      	cmp	r3, #32
 800733e:	d100      	bne.n	8007342 <get_fileinfo+0x3a>
 8007340:	e015      	b.n	800736e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b05      	cmp	r3, #5
 8007346:	d101      	bne.n	800734c <get_fileinfo+0x44>
 8007348:	23e5      	movs	r3, #229	; 0xe5
 800734a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b09      	cmp	r3, #9
 8007350:	d106      	bne.n	8007360 <get_fileinfo+0x58>
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	613a      	str	r2, [r7, #16]
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	222e      	movs	r2, #46	; 0x2e
 800735e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	613a      	str	r2, [r7, #16]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	4413      	add	r3, r2
 800736a:	7bfa      	ldrb	r2, [r7, #15]
 800736c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b0a      	cmp	r3, #10
 8007372:	d9da      	bls.n	800732a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4413      	add	r3, r2
 800737a:	3309      	adds	r3, #9
 800737c:	2200      	movs	r2, #0
 800737e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	7ada      	ldrb	r2, [r3, #11]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	331c      	adds	r3, #28
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fee1 	bl	8006158 <ld_dword>
 8007396:	4602      	mov	r2, r0
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	3316      	adds	r3, #22
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe fed8 	bl	8006158 <ld_dword>
 80073a8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	80da      	strh	r2, [r3, #6]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	809a      	strh	r2, [r3, #4]
 80073bc:	e000      	b.n	80073c0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80073be:	bf00      	nop
}
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3324      	adds	r3, #36	; 0x24
 80073dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80073de:	220b      	movs	r2, #11
 80073e0:	2120      	movs	r1, #32
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f7fe ff43 	bl	800626e <mem_set>
	si = i = 0; ni = 8;
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	2308      	movs	r3, #8
 80073f2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	617a      	str	r2, [r7, #20]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007402:	7ffb      	ldrb	r3, [r7, #31]
 8007404:	2b20      	cmp	r3, #32
 8007406:	d94e      	bls.n	80074a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007408:	7ffb      	ldrb	r3, [r7, #31]
 800740a:	2b2f      	cmp	r3, #47	; 0x2f
 800740c:	d006      	beq.n	800741c <create_name+0x54>
 800740e:	7ffb      	ldrb	r3, [r7, #31]
 8007410:	2b5c      	cmp	r3, #92	; 0x5c
 8007412:	d110      	bne.n	8007436 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007414:	e002      	b.n	800741c <create_name+0x54>
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	3301      	adds	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b2f      	cmp	r3, #47	; 0x2f
 8007426:	d0f6      	beq.n	8007416 <create_name+0x4e>
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b5c      	cmp	r3, #92	; 0x5c
 8007432:	d0f0      	beq.n	8007416 <create_name+0x4e>
			break;
 8007434:	e038      	b.n	80074a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007436:	7ffb      	ldrb	r3, [r7, #31]
 8007438:	2b2e      	cmp	r3, #46	; 0x2e
 800743a:	d003      	beq.n	8007444 <create_name+0x7c>
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	429a      	cmp	r2, r3
 8007442:	d30c      	bcc.n	800745e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b0b      	cmp	r3, #11
 8007448:	d002      	beq.n	8007450 <create_name+0x88>
 800744a:	7ffb      	ldrb	r3, [r7, #31]
 800744c:	2b2e      	cmp	r3, #46	; 0x2e
 800744e:	d001      	beq.n	8007454 <create_name+0x8c>
 8007450:	2306      	movs	r3, #6
 8007452:	e044      	b.n	80074de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007454:	2308      	movs	r3, #8
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	230b      	movs	r3, #11
 800745a:	61bb      	str	r3, [r7, #24]
			continue;
 800745c:	e022      	b.n	80074a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800745e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007462:	2b00      	cmp	r3, #0
 8007464:	da04      	bge.n	8007470 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007466:	7ffb      	ldrb	r3, [r7, #31]
 8007468:	3b80      	subs	r3, #128	; 0x80
 800746a:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <create_name+0x120>)
 800746c:	5cd3      	ldrb	r3, [r2, r3]
 800746e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007470:	7ffb      	ldrb	r3, [r7, #31]
 8007472:	4619      	mov	r1, r3
 8007474:	481d      	ldr	r0, [pc, #116]	; (80074ec <create_name+0x124>)
 8007476:	f7fe ff3b 	bl	80062f0 <chk_chr>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <create_name+0xbc>
 8007480:	2306      	movs	r3, #6
 8007482:	e02c      	b.n	80074de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007484:	7ffb      	ldrb	r3, [r7, #31]
 8007486:	2b60      	cmp	r3, #96	; 0x60
 8007488:	d905      	bls.n	8007496 <create_name+0xce>
 800748a:	7ffb      	ldrb	r3, [r7, #31]
 800748c:	2b7a      	cmp	r3, #122	; 0x7a
 800748e:	d802      	bhi.n	8007496 <create_name+0xce>
 8007490:	7ffb      	ldrb	r3, [r7, #31]
 8007492:	3b20      	subs	r3, #32
 8007494:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	613a      	str	r2, [r7, #16]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4413      	add	r3, r2
 80074a0:	7ffa      	ldrb	r2, [r7, #31]
 80074a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80074a4:	e7a6      	b.n	80073f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80074a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	441a      	add	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <create_name+0xf4>
 80074b8:	2306      	movs	r3, #6
 80074ba:	e010      	b.n	80074de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2be5      	cmp	r3, #229	; 0xe5
 80074c2:	d102      	bne.n	80074ca <create_name+0x102>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2205      	movs	r2, #5
 80074c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80074ca:	7ffb      	ldrb	r3, [r7, #31]
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d801      	bhi.n	80074d4 <create_name+0x10c>
 80074d0:	2204      	movs	r2, #4
 80074d2:	e000      	b.n	80074d6 <create_name+0x10e>
 80074d4:	2200      	movs	r2, #0
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	330b      	adds	r3, #11
 80074da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80074dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	0800eb20 	.word	0x0800eb20
 80074ec:	0800e9ec 	.word	0x0800e9ec

080074f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007504:	e002      	b.n	800750c <follow_path+0x1c>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b2f      	cmp	r3, #47	; 0x2f
 8007512:	d0f8      	beq.n	8007506 <follow_path+0x16>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b5c      	cmp	r3, #92	; 0x5c
 800751a:	d0f4      	beq.n	8007506 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b1f      	cmp	r3, #31
 8007528:	d80a      	bhi.n	8007540 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2280      	movs	r2, #128	; 0x80
 800752e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fc1f 	bl	8006d78 <dir_sdi>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]
 800753e:	e043      	b.n	80075c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007540:	463b      	mov	r3, r7
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ff3f 	bl	80073c8 <create_name>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d134      	bne.n	80075be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fe32 	bl	80071be <dir_find>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007564:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d127      	bne.n	80075c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d122      	bne.n	80075c2 <follow_path+0xd2>
 800757c:	2305      	movs	r3, #5
 800757e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007580:	e01f      	b.n	80075c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11c      	bne.n	80075c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	799b      	ldrb	r3, [r3, #6]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007598:	2305      	movs	r3, #5
 800759a:	75fb      	strb	r3, [r7, #23]
 800759c:	e014      	b.n	80075c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ac:	4413      	add	r3, r2
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fd68 	bl	8007086 <ld_clust>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075bc:	e7c0      	b.n	8007540 <follow_path+0x50>
			if (res != FR_OK) break;
 80075be:	bf00      	nop
 80075c0:	e002      	b.n	80075c8 <follow_path+0xd8>
				break;
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075c6:	bf00      	nop
			}
		}
	}

	return res;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b087      	sub	sp, #28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80075da:	f04f 33ff 	mov.w	r3, #4294967295
 80075de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d031      	beq.n	800764c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e002      	b.n	80075f6 <get_ldnumber+0x24>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3301      	adds	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d903      	bls.n	8007606 <get_ldnumber+0x34>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b3a      	cmp	r3, #58	; 0x3a
 8007604:	d1f4      	bne.n	80075f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b3a      	cmp	r3, #58	; 0x3a
 800760c:	d11c      	bne.n	8007648 <get_ldnumber+0x76>
			tp = *path;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	60fa      	str	r2, [r7, #12]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	3b30      	subs	r3, #48	; 0x30
 800761e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b09      	cmp	r3, #9
 8007624:	d80e      	bhi.n	8007644 <get_ldnumber+0x72>
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	429a      	cmp	r2, r3
 800762c:	d10a      	bne.n	8007644 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d107      	bne.n	8007644 <get_ldnumber+0x72>
					vol = (int)i;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3301      	adds	r3, #1
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	e002      	b.n	800764e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007648:	2300      	movs	r3, #0
 800764a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800764c:	693b      	ldr	r3, [r7, #16]
}
 800764e:	4618      	mov	r0, r3
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	70da      	strb	r2, [r3, #3]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f04f 32ff 	mov.w	r2, #4294967295
 8007672:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff f806 	bl	8006688 <move_window>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <check_fs+0x2a>
 8007682:	2304      	movs	r3, #4
 8007684:	e038      	b.n	80076f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3330      	adds	r3, #48	; 0x30
 800768a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fd4a 	bl	8006128 <ld_word>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800769c:	429a      	cmp	r2, r3
 800769e:	d001      	beq.n	80076a4 <check_fs+0x48>
 80076a0:	2303      	movs	r3, #3
 80076a2:	e029      	b.n	80076f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076aa:	2be9      	cmp	r3, #233	; 0xe9
 80076ac:	d009      	beq.n	80076c2 <check_fs+0x66>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076b4:	2beb      	cmp	r3, #235	; 0xeb
 80076b6:	d11e      	bne.n	80076f6 <check_fs+0x9a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80076be:	2b90      	cmp	r3, #144	; 0x90
 80076c0:	d119      	bne.n	80076f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3330      	adds	r3, #48	; 0x30
 80076c6:	3336      	adds	r3, #54	; 0x36
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fd45 	bl	8006158 <ld_dword>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <check_fs+0xa4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d101      	bne.n	80076de <check_fs+0x82>
 80076da:	2300      	movs	r3, #0
 80076dc:	e00c      	b.n	80076f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3330      	adds	r3, #48	; 0x30
 80076e2:	3352      	adds	r3, #82	; 0x52
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe fd37 	bl	8006158 <ld_dword>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <check_fs+0xa8>)
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d101      	bne.n	80076f6 <check_fs+0x9a>
 80076f2:	2300      	movs	r3, #0
 80076f4:	e000      	b.n	80076f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80076f6:	2302      	movs	r3, #2
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	00544146 	.word	0x00544146
 8007704:	33544146 	.word	0x33544146

08007708 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b096      	sub	sp, #88	; 0x58
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff ff58 	bl	80075d2 <get_ldnumber>
 8007722:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007726:	2b00      	cmp	r3, #0
 8007728:	da01      	bge.n	800772e <find_volume+0x26>
 800772a:	230b      	movs	r3, #11
 800772c:	e22e      	b.n	8007b8c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800772e:	4aa8      	ldr	r2, [pc, #672]	; (80079d0 <find_volume+0x2c8>)
 8007730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007736:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <find_volume+0x3a>
 800773e:	230c      	movs	r3, #12
 8007740:	e224      	b.n	8007b8c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007746:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01a      	beq.n	800778e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fc45 	bl	8005fec <disk_status>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10c      	bne.n	800778e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <find_volume+0x82>
 800777a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007786:	230a      	movs	r3, #10
 8007788:	e200      	b.n	8007b8c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800778a:	2300      	movs	r3, #0
 800778c:	e1fe      	b.n	8007b8c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007796:	b2da      	uxtb	r2, r3
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fc3d 	bl	8006020 <disk_initialize>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80077ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80077b8:	2303      	movs	r3, #3
 80077ba:	e1e7      	b.n	8007b8c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <find_volume+0xca>
 80077c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80077ce:	230a      	movs	r3, #10
 80077d0:	e1dc      	b.n	8007b8c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80077d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077da:	f7ff ff3f 	bl	800765c <check_fs>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d14b      	bne.n	8007884 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077ec:	2300      	movs	r3, #0
 80077ee:	643b      	str	r3, [r7, #64]	; 0x40
 80077f0:	e01f      	b.n	8007832 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007800:	4413      	add	r3, r2
 8007802:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	3304      	adds	r3, #4
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d006      	beq.n	800781c <find_volume+0x114>
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	3308      	adds	r3, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fca0 	bl	8006158 <ld_dword>
 8007818:	4602      	mov	r2, r0
 800781a:	e000      	b.n	800781e <find_volume+0x116>
 800781c:	2200      	movs	r2, #0
 800781e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007826:	440b      	add	r3, r1
 8007828:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	3301      	adds	r3, #1
 8007830:	643b      	str	r3, [r7, #64]	; 0x40
 8007832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007834:	2b03      	cmp	r3, #3
 8007836:	d9dc      	bls.n	80077f2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007838:	2300      	movs	r3, #0
 800783a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800783c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <find_volume+0x140>
 8007842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007844:	3b01      	subs	r3, #1
 8007846:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007850:	4413      	add	r3, r2
 8007852:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007856:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <find_volume+0x162>
 800785e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007860:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007862:	f7ff fefb 	bl	800765c <check_fs>
 8007866:	4603      	mov	r3, r0
 8007868:	e000      	b.n	800786c <find_volume+0x164>
 800786a:	2303      	movs	r3, #3
 800786c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007874:	2b01      	cmp	r3, #1
 8007876:	d905      	bls.n	8007884 <find_volume+0x17c>
 8007878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787a:	3301      	adds	r3, #1
 800787c:	643b      	str	r3, [r7, #64]	; 0x40
 800787e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007880:	2b03      	cmp	r3, #3
 8007882:	d9e1      	bls.n	8007848 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007888:	2b04      	cmp	r3, #4
 800788a:	d101      	bne.n	8007890 <find_volume+0x188>
 800788c:	2301      	movs	r3, #1
 800788e:	e17d      	b.n	8007b8c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007890:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007894:	2b01      	cmp	r3, #1
 8007896:	d901      	bls.n	800789c <find_volume+0x194>
 8007898:	230d      	movs	r3, #13
 800789a:	e177      	b.n	8007b8c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	3330      	adds	r3, #48	; 0x30
 80078a0:	330b      	adds	r3, #11
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fc40 	bl	8006128 <ld_word>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ae:	d001      	beq.n	80078b4 <find_volume+0x1ac>
 80078b0:	230d      	movs	r3, #13
 80078b2:	e16b      	b.n	8007b8c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	3330      	adds	r3, #48	; 0x30
 80078b8:	3316      	adds	r3, #22
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fc34 	bl	8006128 <ld_word>
 80078c0:	4603      	mov	r3, r0
 80078c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80078c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <find_volume+0x1d0>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	3330      	adds	r3, #48	; 0x30
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fc41 	bl	8006158 <ld_dword>
 80078d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078dc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	789b      	ldrb	r3, [r3, #2]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d005      	beq.n	80078fc <find_volume+0x1f4>
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	789b      	ldrb	r3, [r3, #2]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d001      	beq.n	80078fc <find_volume+0x1f4>
 80078f8:	230d      	movs	r3, #13
 80078fa:	e147      	b.n	8007b8c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	789b      	ldrb	r3, [r3, #2]
 8007900:	461a      	mov	r2, r3
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b29a      	uxth	r2, r3
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	895b      	ldrh	r3, [r3, #10]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <find_volume+0x228>
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	895b      	ldrh	r3, [r3, #10]
 8007922:	461a      	mov	r2, r3
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	895b      	ldrh	r3, [r3, #10]
 8007928:	3b01      	subs	r3, #1
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <find_volume+0x22c>
 8007930:	230d      	movs	r3, #13
 8007932:	e12b      	b.n	8007b8c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	3330      	adds	r3, #48	; 0x30
 8007938:	3311      	adds	r3, #17
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fbf4 	bl	8006128 <ld_word>
 8007940:	4603      	mov	r3, r0
 8007942:	461a      	mov	r2, r3
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	891b      	ldrh	r3, [r3, #8]
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <find_volume+0x252>
 8007956:	230d      	movs	r3, #13
 8007958:	e118      	b.n	8007b8c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	3330      	adds	r3, #48	; 0x30
 800795e:	3313      	adds	r3, #19
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fbe1 	bl	8006128 <ld_word>
 8007966:	4603      	mov	r3, r0
 8007968:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800796a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <find_volume+0x276>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	3330      	adds	r3, #48	; 0x30
 8007974:	3320      	adds	r3, #32
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fbee 	bl	8006158 <ld_dword>
 800797c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	3330      	adds	r3, #48	; 0x30
 8007982:	330e      	adds	r3, #14
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fbcf 	bl	8006128 <ld_word>
 800798a:	4603      	mov	r3, r0
 800798c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800798e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <find_volume+0x290>
 8007994:	230d      	movs	r3, #13
 8007996:	e0f9      	b.n	8007b8c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007998:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800799a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799c:	4413      	add	r3, r2
 800799e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a0:	8912      	ldrh	r2, [r2, #8]
 80079a2:	0912      	lsrs	r2, r2, #4
 80079a4:	b292      	uxth	r2, r2
 80079a6:	4413      	add	r3, r2
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80079aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d201      	bcs.n	80079b6 <find_volume+0x2ae>
 80079b2:	230d      	movs	r3, #13
 80079b4:	e0ea      	b.n	8007b8c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80079b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079be:	8952      	ldrh	r2, [r2, #10]
 80079c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <find_volume+0x2cc>
 80079cc:	230d      	movs	r3, #13
 80079ce:	e0dd      	b.n	8007b8c <find_volume+0x484>
 80079d0:	200000ac 	.word	0x200000ac
		fmt = FS_FAT32;
 80079d4:	2303      	movs	r3, #3
 80079d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d802      	bhi.n	80079ea <find_volume+0x2e2>
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d802      	bhi.n	80079fa <find_volume+0x2f2>
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	1c9a      	adds	r2, r3, #2
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a06:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007a08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0c:	441a      	add	r2, r3
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	441a      	add	r2, r3
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007a1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d11e      	bne.n	8007a62 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	3330      	adds	r3, #48	; 0x30
 8007a28:	332a      	adds	r3, #42	; 0x2a
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fb7c 	bl	8006128 <ld_word>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <find_volume+0x332>
 8007a36:	230d      	movs	r3, #13
 8007a38:	e0a8      	b.n	8007b8c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	891b      	ldrh	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <find_volume+0x33e>
 8007a42:	230d      	movs	r3, #13
 8007a44:	e0a2      	b.n	8007b8c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	3330      	adds	r3, #48	; 0x30
 8007a4a:	332c      	adds	r3, #44	; 0x2c
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fb83 	bl	8006158 <ld_dword>
 8007a52:	4602      	mov	r2, r0
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a60:	e01f      	b.n	8007aa2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	891b      	ldrh	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <find_volume+0x366>
 8007a6a:	230d      	movs	r3, #13
 8007a6c:	e08e      	b.n	8007b8c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	6a1a      	ldr	r2, [r3, #32]
 8007a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a74:	441a      	add	r2, r3
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d103      	bne.n	8007a8a <find_volume+0x382>
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	e00a      	b.n	8007aa0 <find_volume+0x398>
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	695a      	ldr	r2, [r3, #20]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	085a      	lsrs	r2, r3, #1
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007aa0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007aac:	0a5b      	lsrs	r3, r3, #9
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d201      	bcs.n	8007ab6 <find_volume+0x3ae>
 8007ab2:	230d      	movs	r3, #13
 8007ab4:	e06a      	b.n	8007b8c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	611a      	str	r2, [r3, #16]
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	2280      	movs	r2, #128	; 0x80
 8007aca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d149      	bne.n	8007b68 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	3330      	adds	r3, #48	; 0x30
 8007ad8:	3330      	adds	r3, #48	; 0x30
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fb24 	bl	8006128 <ld_word>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d140      	bne.n	8007b68 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae8:	3301      	adds	r3, #1
 8007aea:	4619      	mov	r1, r3
 8007aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aee:	f7fe fdcb 	bl	8006688 <move_window>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d137      	bne.n	8007b68 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	2200      	movs	r2, #0
 8007afc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	3330      	adds	r3, #48	; 0x30
 8007b02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fb0e 	bl	8006128 <ld_word>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d127      	bne.n	8007b68 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	3330      	adds	r3, #48	; 0x30
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fb1b 	bl	8006158 <ld_dword>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <find_volume+0x48c>)
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d11e      	bne.n	8007b68 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	3330      	adds	r3, #48	; 0x30
 8007b2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fb10 	bl	8006158 <ld_dword>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	4b17      	ldr	r3, [pc, #92]	; (8007b98 <find_volume+0x490>)
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d113      	bne.n	8007b68 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	3330      	adds	r3, #48	; 0x30
 8007b44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fb05 	bl	8006158 <ld_dword>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	3330      	adds	r3, #48	; 0x30
 8007b58:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe fafb 	bl	8006158 <ld_dword>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007b6e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b70:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <find_volume+0x494>)
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	3301      	adds	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <find_volume+0x494>)
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <find_volume+0x494>)
 8007b7e:	881a      	ldrh	r2, [r3, #0]
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b86:	f7fe fd17 	bl	80065b8 <clear_lock>
#endif
	return FR_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3758      	adds	r7, #88	; 0x58
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	41615252 	.word	0x41615252
 8007b98:	61417272 	.word	0x61417272
 8007b9c:	200000b0 	.word	0x200000b0

08007ba0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007baa:	2309      	movs	r3, #9
 8007bac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01c      	beq.n	8007bee <validate+0x4e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d018      	beq.n	8007bee <validate+0x4e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <validate+0x4e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	889a      	ldrh	r2, [r3, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	88db      	ldrh	r3, [r3, #6]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d10c      	bne.n	8007bee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fa06 	bl	8005fec <disk_status>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <validate+0x4e>
			res = FR_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <validate+0x5a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	e000      	b.n	8007bfc <validate+0x5c>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	6013      	str	r3, [r2, #0]
	return res;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c1e:	f107 0310 	add.w	r3, r7, #16
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fcd5 	bl	80075d2 <get_ldnumber>
 8007c28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da01      	bge.n	8007c34 <f_mount+0x28>
 8007c30:	230b      	movs	r3, #11
 8007c32:	e02b      	b.n	8007c8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c34:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <f_mount+0x88>)
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c44:	69b8      	ldr	r0, [r7, #24]
 8007c46:	f7fe fcb7 	bl	80065b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	490d      	ldr	r1, [pc, #52]	; (8007c94 <f_mount+0x88>)
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <f_mount+0x66>
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d001      	beq.n	8007c76 <f_mount+0x6a>
 8007c72:	2300      	movs	r3, #0
 8007c74:	e00a      	b.n	8007c8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c76:	f107 010c 	add.w	r1, r7, #12
 8007c7a:	f107 0308 	add.w	r3, r7, #8
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fd41 	bl	8007708 <find_volume>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	200000ac 	.word	0x200000ac

08007c98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b098      	sub	sp, #96	; 0x60
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <f_open+0x18>
 8007cac:	2309      	movs	r3, #9
 8007cae:	e1ad      	b.n	800800c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007cb8:	79fa      	ldrb	r2, [r7, #7]
 8007cba:	f107 0110 	add.w	r1, r7, #16
 8007cbe:	f107 0308 	add.w	r3, r7, #8
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff fd20 	bl	8007708 <find_volume>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007cce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 8191 	bne.w	8007ffa <f_open+0x362>
		dj.obj.fs = fs;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	f107 0314 	add.w	r3, r7, #20
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fc03 	bl	80074f0 <follow_path>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d11a      	bne.n	8007d2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cfc:	b25b      	sxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da03      	bge.n	8007d0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007d02:	2306      	movs	r3, #6
 8007d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d08:	e011      	b.n	8007d2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bf14      	ite	ne
 8007d14:	2301      	movne	r3, #1
 8007d16:	2300      	moveq	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fb00 	bl	8006328 <chk_lock>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	f003 031c 	and.w	r3, r3, #28
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d07f      	beq.n	8007e38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d017      	beq.n	8007d70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d10e      	bne.n	8007d66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d48:	f7fe fb4a 	bl	80063e0 <enq_lock>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <f_open+0xc8>
 8007d52:	f107 0314 	add.w	r3, r7, #20
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fa86 	bl	8007268 <dir_register>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	e000      	b.n	8007d62 <f_open+0xca>
 8007d60:	2312      	movs	r3, #18
 8007d62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	f043 0308 	orr.w	r3, r3, #8
 8007d6c:	71fb      	strb	r3, [r7, #7]
 8007d6e:	e010      	b.n	8007d92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d70:	7ebb      	ldrb	r3, [r7, #26]
 8007d72:	f003 0311 	and.w	r3, r3, #17
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <f_open+0xea>
					res = FR_DENIED;
 8007d7a:	2307      	movs	r3, #7
 8007d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d80:	e007      	b.n	8007d92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <f_open+0xfa>
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d168      	bne.n	8007e6c <f_open+0x1d4>
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d063      	beq.n	8007e6c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007da4:	f002 fd7a 	bl	800a89c <get_fattime>
 8007da8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dac:	330e      	adds	r3, #14
 8007dae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fa0f 	bl	80061d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	3316      	adds	r3, #22
 8007dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fa09 	bl	80061d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	330b      	adds	r3, #11
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff f958 	bl	8007086 <ld_clust>
 8007dd6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff f970 	bl	80070c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de6:	331c      	adds	r3, #28
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe f9f2 	bl	80061d4 <st_dword>
					fs->wflag = 1;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2201      	movs	r2, #1
 8007df4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d037      	beq.n	8007e6c <f_open+0x1d4>
						dw = fs->winsect;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007e02:	f107 0314 	add.w	r3, r7, #20
 8007e06:	2200      	movs	r2, #0
 8007e08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fe83 	bl	8006b16 <remove_chain>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d126      	bne.n	8007e6c <f_open+0x1d4>
							res = move_window(fs, dw);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fc30 	bl	8006688 <move_window>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e32:	3a01      	subs	r2, #1
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	e019      	b.n	8007e6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d115      	bne.n	8007e6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e40:	7ebb      	ldrb	r3, [r7, #26]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007e4a:	2304      	movs	r3, #4
 8007e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007e50:	e00c      	b.n	8007e6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <f_open+0x1d4>
 8007e5c:	7ebb      	ldrb	r3, [r7, #26]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <f_open+0x1d4>
						res = FR_DENIED;
 8007e66:	2307      	movs	r3, #7
 8007e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d128      	bne.n	8007ec6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fab9 	bl	8006424 <inc_lock>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <f_open+0x22e>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f040 8095 	bne.w	8007ffa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff f8d5 	bl	8007086 <ld_clust>
 8007edc:	4602      	mov	r2, r0
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee4:	331c      	adds	r3, #28
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe f936 	bl	8006158 <ld_dword>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	88da      	ldrh	r2, [r3, #6]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	79fa      	ldrb	r2, [r7, #7]
 8007f0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3330      	adds	r3, #48	; 0x30
 8007f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe f9a0 	bl	800626e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d060      	beq.n	8007ffa <f_open+0x362>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d05c      	beq.n	8007ffa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	895b      	ldrh	r3, [r3, #10]
 8007f4c:	025b      	lsls	r3, r3, #9
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f5c:	e016      	b.n	8007f8c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fc4b 	bl	80067fe <get_fat>
 8007f68:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d802      	bhi.n	8007f76 <f_open+0x2de>
 8007f70:	2302      	movs	r3, #2
 8007f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d102      	bne.n	8007f84 <f_open+0x2ec>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <f_open+0x304>
 8007f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d8e0      	bhi.n	8007f5e <f_open+0x2c6>
				}
				fp->clust = clst;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fa0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d127      	bne.n	8007ffa <f_open+0x362>
 8007faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d022      	beq.n	8007ffa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe fc01 	bl	80067c0 <clust2sect>
 8007fbe:	6478      	str	r0, [r7, #68]	; 0x44
 8007fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <f_open+0x336>
						res = FR_INT_ERR;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007fcc:	e015      	b.n	8007ffa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd0:	0a5a      	lsrs	r2, r3, #9
 8007fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	7858      	ldrb	r0, [r3, #1]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f7fe f83f 	bl	800606c <disk_read>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <f_open+0x362>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <f_open+0x370>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800800c:	4618      	mov	r0, r3
 800800e:	3760      	adds	r7, #96	; 0x60
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08c      	sub	sp, #48	; 0x30
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f107 0210 	add.w	r2, r7, #16
 8008032:	4611      	mov	r1, r2
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff fdb3 	bl	8007ba0 <validate>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008044:	2b00      	cmp	r3, #0
 8008046:	d107      	bne.n	8008058 <f_write+0x44>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	7d5b      	ldrb	r3, [r3, #21]
 800804c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <f_write+0x4a>
 8008058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800805c:	e14b      	b.n	80082f6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	7d1b      	ldrb	r3, [r3, #20]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <f_write+0x5a>
 800806a:	2307      	movs	r3, #7
 800806c:	e143      	b.n	80082f6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	429a      	cmp	r2, r3
 800807c:	f080 812d 	bcs.w	80082da <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	43db      	mvns	r3, r3
 8008086:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008088:	e127      	b.n	80082da <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 80e3 	bne.w	800825e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	0a5b      	lsrs	r3, r3, #9
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	8952      	ldrh	r2, [r2, #10]
 80080a2:	3a01      	subs	r2, #1
 80080a4:	4013      	ands	r3, r2
 80080a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d143      	bne.n	8008136 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d11a      	bne.n	80080f8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2100      	movs	r1, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fd8a 	bl	8006be0 <create_chain>
 80080cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80080ce:	e013      	b.n	80080f8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	4619      	mov	r1, r3
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7fe fe16 	bl	8006d10 <clmt_clust>
 80080e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80080e6:	e007      	b.n	80080f8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fe fd75 	bl	8006be0 <create_chain>
 80080f6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80f2 	beq.w	80082e4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	2b01      	cmp	r3, #1
 8008104:	d104      	bne.n	8008110 <f_write+0xfc>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2202      	movs	r2, #2
 800810a:	755a      	strb	r2, [r3, #21]
 800810c:	2302      	movs	r3, #2
 800810e:	e0f2      	b.n	80082f6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008116:	d104      	bne.n	8008122 <f_write+0x10e>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	755a      	strb	r2, [r3, #21]
 800811e:	2301      	movs	r3, #1
 8008120:	e0e9      	b.n	80082f6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008126:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <f_write+0x122>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008134:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	7d1b      	ldrb	r3, [r3, #20]
 800813a:	b25b      	sxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	da18      	bge.n	8008172 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	7858      	ldrb	r0, [r3, #1]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1a      	ldr	r2, [r3, #32]
 800814e:	2301      	movs	r3, #1
 8008150:	f7fd ffac 	bl	80060ac <disk_write>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <f_write+0x150>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	755a      	strb	r2, [r3, #21]
 8008160:	2301      	movs	r3, #1
 8008162:	e0c8      	b.n	80082f6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	7d1b      	ldrb	r3, [r3, #20]
 8008168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816c:	b2da      	uxtb	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7fe fb20 	bl	80067c0 <clust2sect>
 8008180:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <f_write+0x17e>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2202      	movs	r2, #2
 800818c:	755a      	strb	r2, [r3, #21]
 800818e:	2302      	movs	r3, #2
 8008190:	e0b1      	b.n	80082f6 <f_write+0x2e2>
			sect += csect;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	4413      	add	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0a5b      	lsrs	r3, r3, #9
 800819e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d03c      	beq.n	8008220 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	4413      	add	r3, r2
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	8952      	ldrh	r2, [r2, #10]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d905      	bls.n	80081c0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	895b      	ldrh	r3, [r3, #10]
 80081b8:	461a      	mov	r2, r3
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	7858      	ldrb	r0, [r3, #1]
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	69f9      	ldr	r1, [r7, #28]
 80081ca:	f7fd ff6f 	bl	80060ac <disk_write>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <f_write+0x1ca>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	755a      	strb	r2, [r3, #21]
 80081da:	2301      	movs	r3, #1
 80081dc:	e08b      	b.n	80082f6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a1a      	ldr	r2, [r3, #32]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	6a3a      	ldr	r2, [r7, #32]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d915      	bls.n	8008218 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	025b      	lsls	r3, r3, #9
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	4413      	add	r3, r2
 8008200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008204:	4619      	mov	r1, r3
 8008206:	f7fe f811 	bl	800622c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	7d1b      	ldrb	r3, [r3, #20]
 800820e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008212:	b2da      	uxtb	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	025b      	lsls	r3, r3, #9
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800821e:	e03f      	b.n	80082a0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	429a      	cmp	r2, r3
 8008228:	d016      	beq.n	8008258 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008232:	429a      	cmp	r2, r3
 8008234:	d210      	bcs.n	8008258 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	7858      	ldrb	r0, [r3, #1]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008240:	2301      	movs	r3, #1
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	f7fd ff12 	bl	800606c <disk_read>
 8008248:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800824a:	2b00      	cmp	r3, #0
 800824c:	d004      	beq.n	8008258 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	755a      	strb	r2, [r3, #21]
 8008254:	2301      	movs	r3, #1
 8008256:	e04e      	b.n	80082f6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008266:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d901      	bls.n	8008278 <f_write+0x264>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	4413      	add	r3, r2
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	69f9      	ldr	r1, [r7, #28]
 800828c:	4618      	mov	r0, r3
 800828e:	f7fd ffcd 	bl	800622c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	7d1b      	ldrb	r3, [r3, #20]
 8008296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800829a:	b2da      	uxtb	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	4413      	add	r3, r2
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	441a      	add	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	619a      	str	r2, [r3, #24]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	bf38      	it	cc
 80082c0:	461a      	movcc	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	441a      	add	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f47f aed4 	bne.w	800808a <f_write+0x76>
 80082e2:	e000      	b.n	80082e6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80082e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	7d1b      	ldrb	r3, [r3, #20]
 80082ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3730      	adds	r7, #48	; 0x30
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f107 0208 	add.w	r2, r7, #8
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fc46 	bl	8007ba0 <validate>
 8008314:	4603      	mov	r3, r0
 8008316:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d168      	bne.n	80083f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7d1b      	ldrb	r3, [r3, #20]
 8008322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	d062      	beq.n	80083f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7d1b      	ldrb	r3, [r3, #20]
 800832e:	b25b      	sxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	da15      	bge.n	8008360 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	7858      	ldrb	r0, [r3, #1]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1a      	ldr	r2, [r3, #32]
 8008342:	2301      	movs	r3, #1
 8008344:	f7fd feb2 	bl	80060ac <disk_write>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <f_sync+0x54>
 800834e:	2301      	movs	r3, #1
 8008350:	e04f      	b.n	80083f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7d1b      	ldrb	r3, [r3, #20]
 8008356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835a:	b2da      	uxtb	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008360:	f002 fa9c 	bl	800a89c <get_fattime>
 8008364:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f7fe f98a 	bl	8006688 <move_window>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d138      	bne.n	80083f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	330b      	adds	r3, #11
 8008388:	781a      	ldrb	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	330b      	adds	r3, #11
 800838e:	f042 0220 	orr.w	r2, r2, #32
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	461a      	mov	r2, r3
 80083a0:	68f9      	ldr	r1, [r7, #12]
 80083a2:	f7fe fe8f 	bl	80070c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f103 021c 	add.w	r2, r3, #28
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fd ff0e 	bl	80061d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3316      	adds	r3, #22
 80083bc:	6939      	ldr	r1, [r7, #16]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd ff08 	bl	80061d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3312      	adds	r3, #18
 80083c8:	2100      	movs	r1, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fd fee7 	bl	800619e <st_word>
					fs->wflag = 1;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2201      	movs	r2, #1
 80083d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe f983 	bl	80066e4 <sync_fs>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7d1b      	ldrb	r3, [r3, #20]
 80083e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff ff7b 	bl	80082fe <f_sync>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d118      	bne.n	8008444 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f107 0208 	add.w	r2, r7, #8
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fbc0 	bl	8007ba0 <validate>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10c      	bne.n	8008444 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe f886 	bl	8006540 <dec_lock>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b090      	sub	sp, #64	; 0x40
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008458:	f107 010c 	add.w	r1, r7, #12
 800845c:	1d3b      	adds	r3, r7, #4
 800845e:	2200      	movs	r2, #0
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff f951 	bl	8007708 <find_volume>
 8008466:	4603      	mov	r3, r0
 8008468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800846c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11f      	bne.n	80084b4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff f837 	bl	80074f0 <follow_path>
 8008482:	4603      	mov	r3, r0
 8008484:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008488:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800848c:	2b00      	cmp	r3, #0
 800848e:	d111      	bne.n	80084b4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008490:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008494:	b25b      	sxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	da03      	bge.n	80084a2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800849a:	2306      	movs	r3, #6
 800849c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80084a0:	e008      	b.n	80084b4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <f_stat+0x66>
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe ff2a 	bl	8007308 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80084b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3740      	adds	r7, #64	; 0x40
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b09e      	sub	sp, #120	; 0x78
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80084cc:	f107 010c 	add.w	r1, r7, #12
 80084d0:	1d3b      	adds	r3, r7, #4
 80084d2:	2202      	movs	r2, #2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff f917 	bl	8007708 <find_volume>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80084e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f040 808e 	bne.w	800860a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe fffa 	bl	80074f0 <follow_path>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008502:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008506:	2b00      	cmp	r3, #0
 8008508:	d108      	bne.n	800851c <f_unlink+0x5c>
 800850a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800850e:	2102      	movs	r1, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd ff09 	bl	8006328 <chk_lock>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800851c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008520:	2b00      	cmp	r3, #0
 8008522:	d172      	bne.n	800860a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008524:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008528:	b25b      	sxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	da03      	bge.n	8008536 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800852e:	2306      	movs	r3, #6
 8008530:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008534:	e008      	b.n	8008548 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008536:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008542:	2307      	movs	r3, #7
 8008544:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008548:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800854c:	2b00      	cmp	r3, #0
 800854e:	d134      	bne.n	80085ba <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fd95 	bl	8007086 <ld_clust>
 800855c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800855e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008562:	f003 0310 	and.w	r3, r3, #16
 8008566:	2b00      	cmp	r3, #0
 8008568:	d027      	beq.n	80085ba <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800856e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008570:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f7fe fbfd 	bl	8006d78 <dir_sdi>
 800857e:	4603      	mov	r3, r0
 8008580:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008584:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008588:	2b00      	cmp	r3, #0
 800858a:	d116      	bne.n	80085ba <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe fdb6 	bl	8007104 <dir_read>
 8008598:	4603      	mov	r3, r0
 800859a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800859e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <f_unlink+0xec>
 80085a6:	2307      	movs	r3, #7
 80085a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80085ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d102      	bne.n	80085ba <f_unlink+0xfa>
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80085ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d123      	bne.n	800860a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80085c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fe80 	bl	80072cc <dir_remove>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80085d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10c      	bne.n	80085f4 <f_unlink+0x134>
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80085e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085e4:	2200      	movs	r2, #0
 80085e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fa94 	bl	8006b16 <remove_chain>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80085f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d106      	bne.n	800860a <f_unlink+0x14a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe f870 	bl	80066e4 <sync_fs>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800860a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800860e:	4618      	mov	r0, r3
 8008610:	3778      	adds	r7, #120	; 0x78
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b096      	sub	sp, #88	; 0x58
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800861e:	f107 0108 	add.w	r1, r7, #8
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	2202      	movs	r2, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff f86e 	bl	8007708 <find_volume>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008636:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 80ec 	bne.w	8008818 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	f107 030c 	add.w	r3, r7, #12
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe ff51 	bl	80074f0 <follow_path>
 800864e:	4603      	mov	r3, r0
 8008650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8008654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <f_mkdir+0x4c>
 800865c:	2308      	movs	r3, #8
 800865e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8008662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008666:	2b04      	cmp	r3, #4
 8008668:	f040 80d6 	bne.w	8008818 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800866c:	f107 030c 	add.w	r3, r7, #12
 8008670:	2100      	movs	r1, #0
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fab4 	bl	8006be0 <create_chain>
 8008678:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	895b      	ldrh	r3, [r3, #10]
 800867e:	025b      	lsls	r3, r3, #9
 8008680:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <f_mkdir+0x7e>
 800868e:	2307      	movs	r3, #7
 8008690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8008694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008696:	2b01      	cmp	r3, #1
 8008698:	d102      	bne.n	80086a0 <f_mkdir+0x8a>
 800869a:	2302      	movs	r3, #2
 800869c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80086a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d102      	bne.n	80086ae <f_mkdir+0x98>
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80086ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <f_mkdir+0xae>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fd ffa1 	bl	8006600 <sync_window>
 80086be:	4603      	mov	r3, r0
 80086c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80086c4:	f002 f8ea 	bl	800a89c <get_fattime>
 80086c8:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80086ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d16a      	bne.n	80087a8 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe f872 	bl	80067c0 <clust2sect>
 80086dc:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	3330      	adds	r3, #48	; 0x30
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80086e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e8:	2100      	movs	r1, #0
 80086ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086ec:	f7fd fdbf 	bl	800626e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80086f0:	220b      	movs	r2, #11
 80086f2:	2120      	movs	r1, #32
 80086f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086f6:	f7fd fdba 	bl	800626e <mem_set>
					dir[DIR_Name] = '.';
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	222e      	movs	r2, #46	; 0x2e
 80086fe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8008700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008702:	330b      	adds	r3, #11
 8008704:	2210      	movs	r2, #16
 8008706:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	3316      	adds	r3, #22
 800870c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800870e:	4618      	mov	r0, r3
 8008710:	f7fd fd60 	bl	80061d4 <st_dword>
					st_clust(fs, dir, dcl);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fcd2 	bl	80070c4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8008720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008722:	3320      	adds	r3, #32
 8008724:	2220      	movs	r2, #32
 8008726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008728:	4618      	mov	r0, r3
 800872a:	f7fd fd7f 	bl	800622c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800872e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008730:	3321      	adds	r3, #33	; 0x21
 8008732:	222e      	movs	r2, #46	; 0x2e
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d106      	bne.n	8008750 <f_mkdir+0x13a>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008748:	429a      	cmp	r2, r3
 800874a:	d101      	bne.n	8008750 <f_mkdir+0x13a>
 800874c:	2300      	movs	r3, #0
 800874e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8008750:	68b8      	ldr	r0, [r7, #8]
 8008752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008754:	3320      	adds	r3, #32
 8008756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008758:	4619      	mov	r1, r3
 800875a:	f7fe fcb3 	bl	80070c4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	895b      	ldrh	r3, [r3, #10]
 8008762:	653b      	str	r3, [r7, #80]	; 0x50
 8008764:	e01b      	b.n	800879e <f_mkdir+0x188>
					fs->winsect = dsc++;
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2201      	movs	r2, #1
 8008774:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd ff41 	bl	8006600 <sync_window>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8008784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10c      	bne.n	80087a6 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800878c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008790:	2100      	movs	r1, #0
 8008792:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008794:	f7fd fd6b 	bl	800626e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8008798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879a:	3b01      	subs	r3, #1
 800879c:	653b      	str	r3, [r7, #80]	; 0x50
 800879e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e0      	bne.n	8008766 <f_mkdir+0x150>
 80087a4:	e000      	b.n	80087a8 <f_mkdir+0x192>
					if (res != FR_OK) break;
 80087a6:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80087a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d107      	bne.n	80087c0 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fd57 	bl	8007268 <dir_register>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80087c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d120      	bne.n	800880a <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80087cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ce:	3316      	adds	r3, #22
 80087d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fd fcfe 	bl	80061d4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fc70 	bl	80070c4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	330b      	adds	r3, #11
 80087e8:	2210      	movs	r2, #16
 80087ea:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2201      	movs	r2, #1
 80087f0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80087f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10e      	bne.n	8008818 <f_mkdir+0x202>
					res = sync_fs(fs);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fd ff71 	bl	80066e4 <sync_fs>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008808:	e006      	b.n	8008818 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800880a:	f107 030c 	add.w	r3, r7, #12
 800880e:	2200      	movs	r2, #0
 8008810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe f97f 	bl	8006b16 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800881c:	4618      	mov	r0, r3
 800881e:	3758      	adds	r7, #88	; 0x58
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	2b0a      	cmp	r3, #10
 8008834:	d103      	bne.n	800883e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008836:	210d      	movs	r1, #13
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fff3 	bl	8008824 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	db25      	blt.n	8008896 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	60fa      	str	r2, [r7, #12]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b3c      	cmp	r3, #60	; 0x3c
 800885c:	dd12      	ble.n	8008884 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f103 010c 	add.w	r1, r3, #12
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	f7ff fbd1 	bl	8008014 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	429a      	cmp	r2, r3
 8008878:	d101      	bne.n	800887e <putc_bfd+0x5a>
 800887a:	2300      	movs	r3, #0
 800887c:	e001      	b.n	8008882 <putc_bfd+0x5e>
 800887e:	f04f 33ff 	mov.w	r3, #4294967295
 8008882:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	e000      	b.n	8008898 <putc_bfd+0x74>
	if (i < 0) return;
 8008896:	bf00      	nop
}
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	db17      	blt.n	80088de <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f103 010c 	add.w	r1, r3, #12
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	461a      	mov	r2, r3
 80088be:	f107 030c 	add.w	r3, r7, #12
 80088c2:	f7ff fba7 	bl	8008014 <f_write>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d108      	bne.n	80088de <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	461a      	mov	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d102      	bne.n	80088de <putc_flush+0x40>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	e001      	b.n	80088e2 <putc_flush+0x44>
	return EOF;
 80088de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	605a      	str	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	609a      	str	r2, [r3, #8]
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008914:	b40e      	push	{r1, r2, r3}
 8008916:	b580      	push	{r7, lr}
 8008918:	b0a7      	sub	sp, #156	; 0x9c
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800891e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff ffe0 	bl	80088ea <putc_init>

	va_start(arp, fmt);
 800892a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800892e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008940:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 81f4 	beq.w	8008d32 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800894a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800894e:	2b25      	cmp	r3, #37	; 0x25
 8008950:	d008      	beq.n	8008964 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008952:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff ff61 	bl	8008824 <putc_bfd>
			continue;
 8008962:	e1e5      	b.n	8008d30 <f_printf+0x41c>
		}
		w = f = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800896a:	2300      	movs	r3, #0
 800896c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8008970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008980:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008984:	2b30      	cmp	r3, #48	; 0x30
 8008986:	d10b      	bne.n	80089a0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800898e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800899e:	e024      	b.n	80089ea <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80089a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80089a4:	2b2d      	cmp	r3, #45	; 0x2d
 80089a6:	d120      	bne.n	80089ea <f_printf+0xd6>
				f = 2; c = *fmt++;
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80089ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80089be:	e014      	b.n	80089ea <f_printf+0xd6>
			w = w * 10 + c - '0';
 80089c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	461a      	mov	r2, r3
 80089ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80089d2:	4413      	add	r3, r2
 80089d4:	3b30      	subs	r3, #48	; 0x30
 80089d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80089da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80089ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80089ee:	2b2f      	cmp	r3, #47	; 0x2f
 80089f0:	d903      	bls.n	80089fa <f_printf+0xe6>
 80089f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80089f6:	2b39      	cmp	r3, #57	; 0x39
 80089f8:	d9e2      	bls.n	80089c0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80089fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80089fe:	2b6c      	cmp	r3, #108	; 0x6c
 8008a00:	d003      	beq.n	8008a0a <f_printf+0xf6>
 8008a02:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008a06:	2b4c      	cmp	r3, #76	; 0x4c
 8008a08:	d10d      	bne.n	8008a26 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8008a0a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008a0e:	f043 0304 	orr.w	r3, r3, #4
 8008a12:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008a26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 8183 	beq.w	8008d36 <f_printf+0x422>
		d = c;
 8008a30:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008a34:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008a38:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008a3c:	2b60      	cmp	r3, #96	; 0x60
 8008a3e:	d908      	bls.n	8008a52 <f_printf+0x13e>
 8008a40:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008a44:	2b7a      	cmp	r3, #122	; 0x7a
 8008a46:	d804      	bhi.n	8008a52 <f_printf+0x13e>
 8008a48:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008a4c:	3b20      	subs	r3, #32
 8008a4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8008a52:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008a56:	3b42      	subs	r3, #66	; 0x42
 8008a58:	2b16      	cmp	r3, #22
 8008a5a:	f200 8098 	bhi.w	8008b8e <f_printf+0x27a>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <f_printf+0x150>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008b6f 	.word	0x08008b6f
 8008a68:	08008b57 	.word	0x08008b57
 8008a6c:	08008b7f 	.word	0x08008b7f
 8008a70:	08008b8f 	.word	0x08008b8f
 8008a74:	08008b8f 	.word	0x08008b8f
 8008a78:	08008b8f 	.word	0x08008b8f
 8008a7c:	08008b8f 	.word	0x08008b8f
 8008a80:	08008b8f 	.word	0x08008b8f
 8008a84:	08008b8f 	.word	0x08008b8f
 8008a88:	08008b8f 	.word	0x08008b8f
 8008a8c:	08008b8f 	.word	0x08008b8f
 8008a90:	08008b8f 	.word	0x08008b8f
 8008a94:	08008b8f 	.word	0x08008b8f
 8008a98:	08008b77 	.word	0x08008b77
 8008a9c:	08008b8f 	.word	0x08008b8f
 8008aa0:	08008b8f 	.word	0x08008b8f
 8008aa4:	08008b8f 	.word	0x08008b8f
 8008aa8:	08008ac1 	.word	0x08008ac1
 8008aac:	08008b8f 	.word	0x08008b8f
 8008ab0:	08008b7f 	.word	0x08008b7f
 8008ab4:	08008b8f 	.word	0x08008b8f
 8008ab8:	08008b8f 	.word	0x08008b8f
 8008abc:	08008b87 	.word	0x08008b87
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ac2:	1d1a      	adds	r2, r3, #4
 8008ac4:	67ba      	str	r2, [r7, #120]	; 0x78
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008aca:	2300      	movs	r3, #0
 8008acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ad0:	e004      	b.n	8008adc <f_printf+0x1c8>
 8008ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008adc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ae2:	4413      	add	r3, r2
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f3      	bne.n	8008ad2 <f_printf+0x1be>
			if (!(f & 2)) {
 8008aea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d11a      	bne.n	8008b2c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008af6:	e005      	b.n	8008b04 <f_printf+0x1f0>
 8008af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008afc:	2120      	movs	r1, #32
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fe90 	bl	8008824 <putc_bfd>
 8008b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d8f0      	bhi.n	8008af8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008b16:	e009      	b.n	8008b2c <f_printf+0x218>
 8008b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff fe7c 	bl	8008824 <putc_bfd>
 8008b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f1      	bne.n	8008b18 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008b34:	e005      	b.n	8008b42 <f_printf+0x22e>
 8008b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b3a:	2120      	movs	r1, #32
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fe71 	bl	8008824 <putc_bfd>
 8008b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d8f0      	bhi.n	8008b36 <f_printf+0x222>
			continue;
 8008b54:	e0ec      	b.n	8008d30 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	67ba      	str	r2, [r7, #120]	; 0x78
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fe5c 	bl	8008824 <putc_bfd>
 8008b6c:	e0e0      	b.n	8008d30 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008b74:	e014      	b.n	8008ba0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008b76:	2308      	movs	r3, #8
 8008b78:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008b7c:	e010      	b.n	8008ba0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008b7e:	230a      	movs	r3, #10
 8008b80:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008b84:	e00c      	b.n	8008ba0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8008b86:	2310      	movs	r3, #16
 8008b88:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008b8c:	e008      	b.n	8008ba0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008b8e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fe43 	bl	8008824 <putc_bfd>
 8008b9e:	e0c7      	b.n	8008d30 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008ba0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <f_printf+0x2a2>
 8008bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	67ba      	str	r2, [r7, #120]	; 0x78
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	e00c      	b.n	8008bd0 <f_printf+0x2bc>
 8008bb6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008bba:	2b44      	cmp	r3, #68	; 0x44
 8008bbc:	d104      	bne.n	8008bc8 <f_printf+0x2b4>
 8008bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bc0:	1d1a      	adds	r2, r3, #4
 8008bc2:	67ba      	str	r2, [r7, #120]	; 0x78
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	e003      	b.n	8008bd0 <f_printf+0x2bc>
 8008bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	67ba      	str	r2, [r7, #120]	; 0x78
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8008bd4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008bd8:	2b44      	cmp	r3, #68	; 0x44
 8008bda:	d10e      	bne.n	8008bfa <f_printf+0x2e6>
 8008bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da0a      	bge.n	8008bfa <f_printf+0x2e6>
			v = 0 - v;
 8008be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be8:	425b      	negs	r3, r3
 8008bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8008bee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008bf2:	f043 0308 	orr.w	r3, r3, #8
 8008bf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8008c00:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c0c:	fb02 f201 	mul.w	r2, r2, r1
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008c16:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008c1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008c26:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d90b      	bls.n	8008c46 <f_printf+0x332>
 8008c2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008c32:	2b78      	cmp	r3, #120	; 0x78
 8008c34:	d101      	bne.n	8008c3a <f_printf+0x326>
 8008c36:	2227      	movs	r2, #39	; 0x27
 8008c38:	e000      	b.n	8008c3c <f_printf+0x328>
 8008c3a:	2207      	movs	r2, #7
 8008c3c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008c40:	4413      	add	r3, r2
 8008c42:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008c50:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008c54:	3230      	adds	r2, #48	; 0x30
 8008c56:	b2d2      	uxtb	r2, r2
 8008c58:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008c5c:	440b      	add	r3, r1
 8008c5e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8008c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <f_printf+0x35e>
 8008c6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c6e:	2b1f      	cmp	r3, #31
 8008c70:	d9c6      	bls.n	8008c00 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008c72:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <f_printf+0x380>
 8008c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008c88:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008c8c:	4413      	add	r3, r2
 8008c8e:	222d      	movs	r2, #45	; 0x2d
 8008c90:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8008c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <f_printf+0x398>
 8008ca8:	2330      	movs	r3, #48	; 0x30
 8008caa:	e000      	b.n	8008cae <f_printf+0x39a>
 8008cac:	2320      	movs	r3, #32
 8008cae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008cb2:	e007      	b.n	8008cc4 <f_printf+0x3b0>
 8008cb4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fdb0 	bl	8008824 <putc_bfd>
 8008cc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d108      	bne.n	8008ce2 <f_printf+0x3ce>
 8008cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d8e8      	bhi.n	8008cb4 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8008ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cec:	f107 020c 	add.w	r2, r7, #12
 8008cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cf4:	4413      	add	r3, r2
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff fd90 	bl	8008824 <putc_bfd>
		} while (i);
 8008d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1ea      	bne.n	8008ce2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8008d0c:	e007      	b.n	8008d1e <f_printf+0x40a>
 8008d0e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff fd83 	bl	8008824 <putc_bfd>
 8008d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d28:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d8ee      	bhi.n	8008d0e <f_printf+0x3fa>
		c = *fmt++;
 8008d30:	e5fe      	b.n	8008930 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8008d32:	bf00      	nop
 8008d34:	e000      	b.n	8008d38 <f_printf+0x424>
		if (!c) break;
 8008d36:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff fdae 	bl	800889e <putc_flush>
 8008d42:	4603      	mov	r3, r0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	379c      	adds	r7, #156	; 0x9c
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d4e:	b003      	add	sp, #12
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop

08008d54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008d6a:	4b1f      	ldr	r3, [pc, #124]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d6c:	7a5b      	ldrb	r3, [r3, #9]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d131      	bne.n	8008dd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d74:	4b1c      	ldr	r3, [pc, #112]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d76:	7a5b      	ldrb	r3, [r3, #9]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d7e:	2100      	movs	r1, #0
 8008d80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d82:	4b19      	ldr	r3, [pc, #100]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d84:	7a5b      	ldrb	r3, [r3, #9]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d94:	7a5b      	ldrb	r3, [r3, #9]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008d9c:	4413      	add	r3, r2
 8008d9e:	79fa      	ldrb	r2, [r7, #7]
 8008da0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008da2:	4b11      	ldr	r3, [pc, #68]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008da4:	7a5b      	ldrb	r3, [r3, #9]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	b2d1      	uxtb	r1, r2
 8008dac:	4a0e      	ldr	r2, [pc, #56]	; (8008de8 <FATFS_LinkDriverEx+0x94>)
 8008dae:	7251      	strb	r1, [r2, #9]
 8008db0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	3330      	adds	r3, #48	; 0x30
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	223a      	movs	r2, #58	; 0x3a
 8008dc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	3302      	adds	r3, #2
 8008dc8:	222f      	movs	r2, #47	; 0x2f
 8008dca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	3303      	adds	r3, #3
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	200000d4 	.word	0x200000d4

08008dec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008df6:	2200      	movs	r2, #0
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff ffaa 	bl	8008d54 <FATFS_LinkDriverEx>
 8008e00:	4603      	mov	r3, r0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <_ZN10DWTWrapper11getInstanceEv>:
class DWTWrapper {
public:
    DWTWrapper(DWTWrapper const&)       = delete;
    void operator=(DWTWrapper const&)   = delete;

    [[nodiscard]] static const DWTWrapper& getInstance() noexcept {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
        static const DWTWrapper dwtSingleton;
 8008e10:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <_ZN10DWTWrapper11getInstanceEv+0x3c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d105      	bne.n	8008e28 <_ZN10DWTWrapper11getInstanceEv+0x1c>
 8008e1c:	480b      	ldr	r0, [pc, #44]	; (8008e4c <_ZN10DWTWrapper11getInstanceEv+0x40>)
 8008e1e:	f000 f847 	bl	8008eb0 <_ZN10DWTWrapperC1Ev>
 8008e22:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <_ZN10DWTWrapper11getInstanceEv+0x3c>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	601a      	str	r2, [r3, #0]

        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008e28:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <_ZN10DWTWrapper11getInstanceEv+0x44>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <_ZN10DWTWrapper11getInstanceEv+0x44>)
 8008e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e32:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008e34:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <_ZN10DWTWrapper11getInstanceEv+0x48>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a06      	ldr	r2, [pc, #24]	; (8008e54 <_ZN10DWTWrapper11getInstanceEv+0x48>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	6013      	str	r3, [r2, #0]

        return dwtSingleton;
 8008e40:	4b02      	ldr	r3, [pc, #8]	; (8008e4c <_ZN10DWTWrapper11getInstanceEv+0x40>)
    }
 8008e42:	4618      	mov	r0, r3
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200000e4 	.word	0x200000e4
 8008e4c:	200000e0 	.word	0x200000e0
 8008e50:	e000edf0 	.word	0xe000edf0
 8008e54:	e0001000 	.word	0xe0001000

08008e58 <_ZNK10DWTWrapper5delayEm>:

    void delay(uint32_t const microseconds) const noexcept {
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
        uint32_t const startTicks = DWT->CYCCNT;
 8008e62:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <_ZNK10DWTWrapper5delayEm+0x4c>)
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	60fb      	str	r3, [r7, #12]
        uint32_t const delayTicks = SystemCoreClock / 1000000 * microseconds;
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <_ZNK10DWTWrapper5delayEm+0x50>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a0f      	ldr	r2, [pc, #60]	; (8008eac <_ZNK10DWTWrapper5delayEm+0x54>)
 8008e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e72:	0c9a      	lsrs	r2, r3, #18
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	60bb      	str	r3, [r7, #8]

        while (DWT->CYCCNT - startTicks < delayTicks);
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <_ZNK10DWTWrapper5delayEm+0x4c>)
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	bf8c      	ite	hi
 8008e8a:	2301      	movhi	r3, #1
 8008e8c:	2300      	movls	r3, #0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d000      	beq.n	8008e96 <_ZNK10DWTWrapper5delayEm+0x3e>
 8008e94:	e7f2      	b.n	8008e7c <_ZNK10DWTWrapper5delayEm+0x24>
    }
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	e0001000 	.word	0xe0001000
 8008ea8:	20000024 	.word	0x20000024
 8008eac:	431bde83 	.word	0x431bde83

08008eb0 <_ZN10DWTWrapperC1Ev>:
    [[nodiscard]] uint32_t getTicks() const noexcept {
        return DWT->CYCCNT;
    }

private:
    constexpr DWTWrapper() {};
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <_ZNKSt5arrayIhLj4EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff ffed 	bl	8008ec6 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8008eec:	4603      	mov	r3, r0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>:
 */


#include "LTC6811.h"

LTC6811::LTC6811(SPI_HandleTypeDef& hspi, Mode mode, DCP dcp, CellCh cell, AuxCh aux, STSCh sts) : hspi{ hspi } {
 8008ef6:	b590      	push	{r4, r7, lr}
 8008ef8:	b08b      	sub	sp, #44	; 0x2c
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	4611      	mov	r1, r2
 8008f02:	461a      	mov	r2, r3
 8008f04:	460b      	mov	r3, r1
 8008f06:	71fb      	strb	r3, [r7, #7]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	71bb      	strb	r3, [r7, #6]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	711a      	strb	r2, [r3, #4]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3306      	adds	r3, #6
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	330e      	adds	r3, #14
 8008f26:	2220      	movs	r2, #32
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f004 fe3a 	bl	800dba4 <memset>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	332e      	adds	r3, #46	; 0x2e
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	609a      	str	r2, [r3, #8]
 8008f3c:	60da      	str	r2, [r3, #12]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	333e      	adds	r3, #62	; 0x3e
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	605a      	str	r2, [r3, #4]
 8008f48:	609a      	str	r2, [r3, #8]
 8008f4a:	60da      	str	r2, [r3, #12]
    uint8_t md_bits = (mode & 0x02) >> 1;
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	105b      	asrs	r3, r3, #1
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t PEC{ 0 };
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	84bb      	strh	r3, [r7, #36]	; 0x24
    RegisterGroup<uint8_t> default_config;

    default_config.fill({ { 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00 }, 0x0000 });
 8008f5e:	23fe      	movs	r3, #254	; 0xfe
 8008f60:	773b      	strb	r3, [r7, #28]
 8008f62:	2300      	movs	r3, #0
 8008f64:	777b      	strb	r3, [r7, #29]
 8008f66:	2300      	movs	r3, #0
 8008f68:	77bb      	strb	r3, [r7, #30]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	77fb      	strb	r3, [r7, #31]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 3020 	strb.w	r3, [r7, #32]
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f7e:	f107 021c 	add.w	r2, r7, #28
 8008f82:	f107 0314 	add.w	r3, r7, #20
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fd90 	bl	8009aae <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4fillERKS2_>

    ADCV[0]   = 0x02 | md_bits;
 8008f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f92:	f043 0302 	orr.w	r3, r3, #2
 8008f96:	b2dc      	uxtb	r4, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	334e      	adds	r3, #78	; 0x4e
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fd9b 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	701a      	strb	r2, [r3, #0]
    ADAX[0]   = 0x04 | md_bits;
 8008faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	b2dc      	uxtb	r4, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3352      	adds	r3, #82	; 0x52
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fd8d 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	701a      	strb	r2, [r3, #0]
    ADSTAT[0] = 0x04 | md_bits;
 8008fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fca:	f043 0304 	orr.w	r3, r3, #4
 8008fce:	b2dc      	uxtb	r4, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3356      	adds	r3, #86	; 0x56
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fd7f 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	4622      	mov	r2, r4
 8008fe0:	701a      	strb	r2, [r3, #0]

    md_bits   = (mode & 0x01) << 7;
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	01db      	lsls	r3, r3, #7
 8008fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ADCV[1]   = md_bits | 0x60 | dcp << 4 | cell;
 8008fea:	79bb      	ldrb	r3, [r7, #6]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009004:	b2dc      	uxtb	r4, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	334e      	adds	r3, #78	; 0x4e
 800900a:	2101      	movs	r1, #1
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fd64 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8009012:	4603      	mov	r3, r0
 8009014:	4622      	mov	r2, r4
 8009016:	701a      	strb	r2, [r3, #0]
    ADAX[1]   = md_bits | 0x60 | aux;
 8009018:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800901c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009020:	4313      	orrs	r3, r2
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009028:	b2dc      	uxtb	r4, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3352      	adds	r3, #82	; 0x52
 800902e:	2101      	movs	r1, #1
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fd52 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8009036:	4603      	mov	r3, r0
 8009038:	4622      	mov	r2, r4
 800903a:	701a      	strb	r2, [r3, #0]
    ADSTAT[1] = md_bits | 0x68 | sts;
 800903c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009040:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009044:	4313      	orrs	r3, r2
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800904c:	b2dc      	uxtb	r4, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3356      	adds	r3, #86	; 0x56
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fd40 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 800905a:	4603      	mov	r3, r0
 800905c:	4622      	mov	r2, r4
 800905e:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADCV, 2);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	334e      	adds	r3, #78	; 0x4e
 8009064:	2102      	movs	r1, #2
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fd46 	bl	8009af8 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 800906c:	4603      	mov	r3, r0
 800906e:	84bb      	strh	r3, [r7, #36]	; 0x24
    ADCV[2] = static_cast<uint8_t>(PEC);
 8009070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009072:	b2dc      	uxtb	r4, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	334e      	adds	r3, #78	; 0x4e
 8009078:	2102      	movs	r1, #2
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fd2d 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8009080:	4603      	mov	r3, r0
 8009082:	4622      	mov	r2, r4
 8009084:	701a      	strb	r2, [r3, #0]
    ADCV[3] = static_cast<uint8_t>(PEC >> 8);
 8009086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009088:	121b      	asrs	r3, r3, #8
 800908a:	b2dc      	uxtb	r4, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	334e      	adds	r3, #78	; 0x4e
 8009090:	2103      	movs	r1, #3
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fd21 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8009098:	4603      	mov	r3, r0
 800909a:	4622      	mov	r2, r4
 800909c:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADAX, 2);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3352      	adds	r3, #82	; 0x52
 80090a2:	2102      	movs	r1, #2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 fd27 	bl	8009af8 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 80090aa:	4603      	mov	r3, r0
 80090ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    ADAX[2] = static_cast<uint8_t>(PEC);
 80090ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090b0:	b2dc      	uxtb	r4, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3352      	adds	r3, #82	; 0x52
 80090b6:	2102      	movs	r1, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fd0e 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 80090be:	4603      	mov	r3, r0
 80090c0:	4622      	mov	r2, r4
 80090c2:	701a      	strb	r2, [r3, #0]
    ADAX[3] = static_cast<uint8_t>(PEC >> 8);
 80090c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090c6:	121b      	asrs	r3, r3, #8
 80090c8:	b2dc      	uxtb	r4, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3352      	adds	r3, #82	; 0x52
 80090ce:	2103      	movs	r1, #3
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fd02 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 80090d6:	4603      	mov	r3, r0
 80090d8:	4622      	mov	r2, r4
 80090da:	701a      	strb	r2, [r3, #0]

    PEC = PEC15Calc(ADSTAT, 2);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3356      	adds	r3, #86	; 0x56
 80090e0:	2102      	movs	r1, #2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fd08 	bl	8009af8 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>
 80090e8:	4603      	mov	r3, r0
 80090ea:	84bb      	strh	r3, [r7, #36]	; 0x24
    ADSTAT[2] = static_cast<uint8_t>(PEC);
 80090ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090ee:	b2dc      	uxtb	r4, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3356      	adds	r3, #86	; 0x56
 80090f4:	2102      	movs	r1, #2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fcef 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4622      	mov	r2, r4
 8009100:	701a      	strb	r2, [r3, #0]
    ADSTAT[3] = static_cast<uint8_t>(PEC >> 8);
 8009102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009104:	121b      	asrs	r3, r3, #8
 8009106:	b2dc      	uxtb	r4, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3356      	adds	r3, #86	; 0x56
 800910c:	2103      	movs	r1, #3
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fce3 	bl	8009ada <_ZNSt5arrayIhLj4EEixEj>
 8009114:	4603      	mov	r3, r0
 8009116:	4622      	mov	r2, r4
 8009118:	701a      	strb	r2, [r3, #0]

    WakeFromSleep(); // NOTE: Takes 2.2s to fall asleep so if this has to be called after this, we have problems
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 f80c 	bl	8009138 <_ZNK7LTC681113WakeFromSleepEv>
    writeConfigRegisterGroup(default_config);
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f8f0 	bl	800930c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj1EE>
}
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4618      	mov	r0, r3
 8009130:	372c      	adds	r7, #44	; 0x2c
 8009132:	46bd      	mov	sp, r7
 8009134:	bd90      	pop	{r4, r7, pc}
	...

08009138 <_ZNK7LTC681113WakeFromSleepEv>:

void LTC6811::WakeFromSleep() const noexcept {
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
    static constexpr uint16_t kMaxWakeTime{ 400 }; // Time in us

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d11c      	bne.n	8009184 <_ZNK7LTC681113WakeFromSleepEv+0x4c>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800914a:	2200      	movs	r2, #0
 800914c:	2140      	movs	r1, #64	; 0x40
 800914e:	480f      	ldr	r0, [pc, #60]	; (800918c <_ZNK7LTC681113WakeFromSleepEv+0x54>)
 8009150:	f7f8 fd84 	bl	8001c5c <HAL_GPIO_WritePin>
        DWTWrapper::getInstance().delay(kMaxWakeTime); // Guarantees the LTC6811 will be in standby
 8009154:	f7ff fe5a 	bl	8008e0c <_ZN10DWTWrapper11getInstanceEv>
 8009158:	4603      	mov	r3, r0
 800915a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fe7a 	bl	8008e58 <_ZNK10DWTWrapper5delayEm>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009164:	2201      	movs	r2, #1
 8009166:	2140      	movs	r1, #64	; 0x40
 8009168:	4808      	ldr	r0, [pc, #32]	; (800918c <_ZNK7LTC681113WakeFromSleepEv+0x54>)
 800916a:	f7f8 fd77 	bl	8001c5c <HAL_GPIO_WritePin>
        DWTWrapper::getInstance().delay(10);
 800916e:	f7ff fe4d 	bl	8008e0c <_ZN10DWTWrapper11getInstanceEv>
 8009172:	4603      	mov	r3, r0
 8009174:	210a      	movs	r1, #10
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fe6e 	bl	8008e58 <_ZNK10DWTWrapper5delayEm>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3301      	adds	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e7df      	b.n	8009144 <_ZNK7LTC681113WakeFromSleepEv+0xc>
    }
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	40020400 	.word	0x40020400

08009190 <_ZNK7LTC681112WakeFromIdleEv>:

void LTC6811::WakeFromIdle() const noexcept {
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af02      	add	r7, sp, #8
 8009196:	6078      	str	r0, [r7, #4]
    uint8_t kDummyData{ 0xFF };
 8009198:	23ff      	movs	r3, #255	; 0xff
 800919a:	72fb      	strb	r3, [r7, #11]

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 800919c:	2300      	movs	r3, #0
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d119      	bne.n	80091da <_ZNK7LTC681112WakeFromIdleEv+0x4a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80091a6:	2200      	movs	r2, #0
 80091a8:	2140      	movs	r1, #64	; 0x40
 80091aa:	480e      	ldr	r0, [pc, #56]	; (80091e4 <_ZNK7LTC681112WakeFromIdleEv+0x54>)
 80091ac:	f7f8 fd56 	bl	8001c5c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi, &kDummyData, &kDummyData, 1, HAL_MAX_DELAY); //Guarantees the isoSPI will be in ready mode
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	f107 020b 	add.w	r2, r7, #11
 80091b8:	f107 010b 	add.w	r1, r7, #11
 80091bc:	f04f 33ff 	mov.w	r3, #4294967295
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	2301      	movs	r3, #1
 80091c4:	f7fb f953 	bl	800446e <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80091c8:	2201      	movs	r2, #1
 80091ca:	2140      	movs	r1, #64	; 0x40
 80091cc:	4805      	ldr	r0, [pc, #20]	; (80091e4 <_ZNK7LTC681112WakeFromIdleEv+0x54>)
 80091ce:	f7f8 fd45 	bl	8001c5c <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e7e2      	b.n	80091a0 <_ZNK7LTC681112WakeFromIdleEv+0x10>
    }
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40020400 	.word	0x40020400

080091e8 <_ZNKSt5arrayIS_IhLj4EELj4EEixEj>:
      operator[](size_type __n) const noexcept
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fccf 	bl	8009b9a <_ZNSt14__array_traitsISt5arrayIhLj4EELj4EE6_S_refERA4_KS1_j>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE>:

/* Read a cell voltage register group of an LTC6811 daisy chain.
 * Returns 0 on success, 1 if either PEC or SPI error.
 */
bool LTC6811::readVoltageRegisterGroup(Group const group) noexcept {
 8009208:	b590      	push	{r4, r7, lr}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
    constexpr static std::array<Command, 4> kCommands{ Command{ 0, 4, 7, 194}, Command{ 0, 6, 154, 148 }, Command{ 0, 8, 94, 82 }, Command{ 0, 10, 195, 4 }
    };

    assert(("Invalid Voltage Register Group", group <= D));
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	2b03      	cmp	r3, #3
 8009218:	d905      	bls.n	8009226 <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE+0x1e>
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE+0x50>)
 800921c:	4a0f      	ldr	r2, [pc, #60]	; (800925c <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE+0x54>)
 800921e:	2147      	movs	r1, #71	; 0x47
 8009220:	480f      	ldr	r0, [pc, #60]	; (8009260 <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE+0x58>)
 8009222:	f004 fc5d 	bl	800dae0 <__assert_func>
    return readRegisterGroup(kCommands[group], cell_data[group]);
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	4619      	mov	r1, r3
 800922a:	480e      	ldr	r0, [pc, #56]	; (8009264 <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE+0x5c>)
 800922c:	f7ff ffdc 	bl	80091e8 <_ZNKSt5arrayIS_IhLj4EELj4EEixEj>
 8009230:	4604      	mov	r4, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	330e      	adds	r3, #14
 8009236:	78fa      	ldrb	r2, [r7, #3]
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fc9e 	bl	8009b7c <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EEixEj>
 8009240:	4603      	mov	r3, r0
 8009242:	461a      	mov	r2, r3
 8009244:	4621      	mov	r1, r4
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fcce 	bl	8009be8 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>
 800924c:	4603      	mov	r3, r0
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	bd90      	pop	{r4, r7, pc}
 8009256:	bf00      	nop
 8009258:	0800ea30 	.word	0x0800ea30
 800925c:	0800edc4 	.word	0x0800edc4
 8009260:	0800ea60 	.word	0x0800ea60
 8009264:	0800eda0 	.word	0x0800eda0

08009268 <_ZNKSt5arrayIS_IhLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fd35 	bl	8009ce6 <_ZNSt14__array_traitsISt5arrayIhLj4EELj2EE6_S_refERA2_KS1_j>
 800927c:	4603      	mov	r3, r0
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE>:

/* Read an auxiliary register group of an LTC6811 daisy chain.
 * Returns 0 on success, 1 if either PEC or SPI error.
 */
bool LTC6811::readAuxRegisterGroup(Group const group) noexcept {
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
    constexpr static std::array<Command, 2> kCommands{ Command{ 0, 12, 239, 204 }, Command{ 0, 14, 114, 154 }};

    assert(("Invalid Aux Register Group", group <= B));
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d905      	bls.n	80092a6 <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE+0x1e>
 800929a:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE+0x50>)
 800929c:	4a0f      	ldr	r2, [pc, #60]	; (80092dc <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE+0x54>)
 800929e:	2151      	movs	r1, #81	; 0x51
 80092a0:	480f      	ldr	r0, [pc, #60]	; (80092e0 <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE+0x58>)
 80092a2:	f004 fc1d 	bl	800dae0 <__assert_func>
    return readRegisterGroup(kCommands[group], temp_data[group]);
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	4619      	mov	r1, r3
 80092aa:	480e      	ldr	r0, [pc, #56]	; (80092e4 <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE+0x5c>)
 80092ac:	f7ff ffdc 	bl	8009268 <_ZNKSt5arrayIS_IhLj4EELj2EEixEj>
 80092b0:	4604      	mov	r4, r0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	332e      	adds	r3, #46	; 0x2e
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fd04 	bl	8009cc8 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEixEj>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	4621      	mov	r1, r4
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fd34 	bl	8009d34 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>
 80092cc:	4603      	mov	r3, r0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd90      	pop	{r4, r7, pc}
 80092d6:	bf00      	nop
 80092d8:	0800ea74 	.word	0x0800ea74
 80092dc:	0800edfc 	.word	0x0800edfc
 80092e0:	0800ea60 	.word	0x0800ea60
 80092e4:	0800edb0 	.word	0x0800edb0

080092e8 <_ZN7LTC681123readConfigRegisterGroupEv>:
    assert(("Invalid Stat Register Group", group <= B));
    return readRegisterGroup(kCommands[group], status_data[group]);
}

/* Read the configuration register group of an LTC6811 daisy chain */
bool LTC6811::readConfigRegisterGroup() noexcept {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    constexpr static Command kCommand{ 0x00, 0x02, 0x2B, 0x0A };

    return readRegisterGroup(kCommand, slave_cfg_rx);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3306      	adds	r3, #6
 80092f4:	461a      	mov	r2, r3
 80092f6:	4904      	ldr	r1, [pc, #16]	; (8009308 <_ZN7LTC681123readConfigRegisterGroupEv+0x20>)
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fda3 	bl	8009e44 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>
 80092fe:	4603      	mov	r3, r0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	0800edb8 	.word	0x0800edb8

0800930c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj1EE>:

/* Write to the configuration register group of an LTC6811 daisy chain. */
bool LTC6811::writeConfigRegisterGroup(RegisterGroup<uint8_t> const& cfg_register_group) noexcept {
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
    constexpr static Command kCommand{ 0x00, 0x01, 0x3D, 0x6E };

    if  (writeRegisterGroup(kCommand, cfg_register_group) == Success) {
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	490d      	ldr	r1, [pc, #52]	; (8009350 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj1EE+0x44>)
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fe1c 	bl	8009f58 <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE>
 8009320:	4603      	mov	r3, r0
 8009322:	f083 0301 	eor.w	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00c      	beq.n	8009346 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj1EE+0x3a>
        DWTWrapper::getInstance().delay(500);
 800932c:	f7ff fd6e 	bl	8008e0c <_ZN10DWTWrapper11getInstanceEv>
 8009330:	4603      	mov	r3, r0
 8009332:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fd8e 	bl	8008e58 <_ZNK10DWTWrapper5delayEm>
        /* Funky place to do this, but fixing this would require substantially reworking the whole class.
         * The purpose is to read back the config register after writing to it to check that it was written to properly, apparently. */
        readConfigRegisterGroup();
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff ffd3 	bl	80092e8 <_ZN7LTC681123readConfigRegisterGroupEv>
        return Success;
 8009342:	2300      	movs	r3, #0
 8009344:	e000      	b.n	8009348 <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj1EE+0x3c>
    } else {
        return Fail;
 8009346:	2301      	movs	r3, #1
    }
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	0800edbc 	.word	0x0800edbc

08009354 <_ZN7LTC681118checkVoltageStatusEv>:
    return clearRegisterGroup(kCommand);
}

/* Generate a status report of the cell voltage register groups.
 * Returns an LTC6811VoltageStatus on success, nullopt if error. */
[[nodiscard]] std::optional<LTC6811::VoltageStatus> LTC6811::checkVoltageStatus(void) noexcept {
 8009354:	b590      	push	{r4, r7, lr}
 8009356:	b097      	sub	sp, #92	; 0x5c
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
    LTC6811::VoltageStatus status;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009366:	823b      	strh	r3, [r7, #16]
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	2300      	movs	r3, #0
 800936e:	833b      	strh	r3, [r7, #24]
 8009370:	2300      	movs	r3, #0
 8009372:	61fb      	str	r3, [r7, #28]
    size_t count{ 0 };
 8009374:	2300      	movs	r3, #0
 8009376:	657b      	str	r3, [r7, #84]	; 0x54

    startConversion(ADCV);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	334e      	adds	r3, #78	; 0x4e
 800937c:	4619      	mov	r1, r3
 800937e:	6838      	ldr	r0, [r7, #0]
 8009380:	f000 fb52 	bl	8009a28 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>

    for (size_t group = A; group <= D; ++group)
 8009384:	2300      	movs	r3, #0
 8009386:	653b      	str	r3, [r7, #80]	; 0x50
 8009388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800938a:	2b03      	cmp	r3, #3
 800938c:	d811      	bhi.n	80093b2 <_ZN7LTC681118checkVoltageStatusEv+0x5e>
        if (readVoltageRegisterGroup(static_cast<Group>(group)) == Fail)
 800938e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009390:	b2db      	uxtb	r3, r3
 8009392:	4619      	mov	r1, r3
 8009394:	6838      	ldr	r0, [r7, #0]
 8009396:	f7ff ff37 	bl	8009208 <_ZN7LTC681124readVoltageRegisterGroupENS_5GroupE>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <_ZN7LTC681118checkVoltageStatusEv+0x56>
            return std::nullopt;
 80093a0:	4621      	mov	r1, r4
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fe14 	bl	8009fd0 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>
 80093a8:	e065      	b.n	8009476 <_ZN7LTC681118checkVoltageStatusEv+0x122>
    for (size_t group = A; group <= D; ++group)
 80093aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ac:	3301      	adds	r3, #1
 80093ae:	653b      	str	r3, [r7, #80]	; 0x50
 80093b0:	e7ea      	b.n	8009388 <_ZN7LTC681118checkVoltageStatusEv+0x34>

    for (const auto& register_group : cell_data) {
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	330e      	adds	r3, #14
 80093b6:	643b      	str	r3, [r7, #64]	; 0x40
 80093b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80093ba:	f000 fe18 	bl	8009fee <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 80093be:	64f8      	str	r0, [r7, #76]	; 0x4c
 80093c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80093c2:	f000 fe20 	bl	800a006 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 80093c6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80093c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d046      	beq.n	800945e <_ZN7LTC681118checkVoltageStatusEv+0x10a>
 80093d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d2:	63bb      	str	r3, [r7, #56]	; 0x38
        for (const auto& IC : register_group) {
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
 80093d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093da:	f000 fe21 	bl	800a020 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 80093de:	64b8      	str	r0, [r7, #72]	; 0x48
 80093e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093e2:	f000 fe29 	bl	800a038 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 80093e6:	6338      	str	r0, [r7, #48]	; 0x30
 80093e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d032      	beq.n	8009456 <_ZN7LTC681118checkVoltageStatusEv+0x102>
 80093f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (const auto voltage : IC.data) {
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fa:	f000 fe2a 	bl	800a052 <_ZNKSt5arrayItLj3EE5beginEv>
 80093fe:	6478      	str	r0, [r7, #68]	; 0x44
 8009400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009402:	f000 fe32 	bl	800a06a <_ZNKSt5arrayItLj3EE3endEv>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24
 8009408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	429a      	cmp	r2, r3
 800940e:	d01e      	beq.n	800944e <_ZN7LTC681118checkVoltageStatusEv+0xfa>
 8009410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	847b      	strh	r3, [r7, #34]	; 0x22
                status.sum += voltage;
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800941a:	4413      	add	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

                if (voltage < status.min) {
 800941e:	8a3b      	ldrh	r3, [r7, #16]
 8009420:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009422:	429a      	cmp	r2, r3
 8009424:	d204      	bcs.n	8009430 <_ZN7LTC681118checkVoltageStatusEv+0xdc>
                    status.min = voltage;
 8009426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009428:	823b      	strh	r3, [r7, #16]
                    status.min_id = count;
 800942a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	e007      	b.n	8009440 <_ZN7LTC681118checkVoltageStatusEv+0xec>
                } else if (voltage > status.max) {
 8009430:	8b3b      	ldrh	r3, [r7, #24]
 8009432:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009434:	429a      	cmp	r2, r3
 8009436:	d903      	bls.n	8009440 <_ZN7LTC681118checkVoltageStatusEv+0xec>
                    status.max = voltage;
 8009438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800943a:	833b      	strh	r3, [r7, #24]
                    status.max_id = count;
 800943c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800943e:	61fb      	str	r3, [r7, #28]
                }
                ++count;
 8009440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009442:	3301      	adds	r3, #1
 8009444:	657b      	str	r3, [r7, #84]	; 0x54
            for (const auto voltage : IC.data) {
 8009446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009448:	3302      	adds	r3, #2
 800944a:	647b      	str	r3, [r7, #68]	; 0x44
 800944c:	e7dc      	b.n	8009408 <_ZN7LTC681118checkVoltageStatusEv+0xb4>
        for (const auto& IC : register_group) {
 800944e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009450:	3308      	adds	r3, #8
 8009452:	64bb      	str	r3, [r7, #72]	; 0x48
 8009454:	e7c8      	b.n	80093e8 <_ZN7LTC681118checkVoltageStatusEv+0x94>
    for (const auto& register_group : cell_data) {
 8009456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009458:	3308      	adds	r3, #8
 800945a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800945c:	e7b4      	b.n	80093c8 <_ZN7LTC681118checkVoltageStatusEv+0x74>
            }
        }
    }
    status.sum /= 10000; // Convert centiDegC to DegC (with rounding errors, but this is what the old code did...)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	4a07      	ldr	r2, [pc, #28]	; (8009480 <_ZN7LTC681118checkVoltageStatusEv+0x12c>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0b5b      	lsrs	r3, r3, #13
 8009468:	60fb      	str	r3, [r7, #12]
    return status;
 800946a:	f107 030c 	add.w	r3, r7, #12
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fe12 	bl	800a09a <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1IRS1_Lb1EEEOT_>
}
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	375c      	adds	r7, #92	; 0x5c
 800947a:	46bd      	mov	sp, r7
 800947c:	bd90      	pop	{r4, r7, pc}
 800947e:	bf00      	nop
 8009480:	d1b71759 	.word	0xd1b71759

08009484 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs>:
/* Generate a status report of the current temperatures from aux voltage register groups.
 * Returns an LTC6811TempStatus on success, nullopt if error. */
[[nodiscard]] std::optional<LTC6811::TempStatus> LTC6811::checkTemperatureStatus() noexcept {
    LTC6811::TempStatus status;
    size_t count{ 0 };
    constexpr static auto steinharthart = [](int16_t const NTC_voltage) noexcept {
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	807b      	strh	r3, [r7, #2]
        constexpr auto Vin = 30000.0f; // 3[V], or 30000[V * 10-5]
 8009490:	4b27      	ldr	r3, [pc, #156]	; (8009530 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xac>)
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
        constexpr auto KtoC = 27315; // centiKelvin to centiDegCelsius
 8009494:	f646 23b3 	movw	r3, #27315	; 0x6ab3
 8009498:	623b      	str	r3, [r7, #32]
        constexpr auto A = 0.003354016f;
 800949a:	4b26      	ldr	r3, [pc, #152]	; (8009534 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xb0>)
 800949c:	61fb      	str	r3, [r7, #28]
        constexpr auto B = 0.000256524f;
 800949e:	4b26      	ldr	r3, [pc, #152]	; (8009538 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xb4>)
 80094a0:	61bb      	str	r3, [r7, #24]
        constexpr auto C = 0.00000260597f;
 80094a2:	4b26      	ldr	r3, [pc, #152]	; (800953c <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xb8>)
 80094a4:	617b      	str	r3, [r7, #20]
        constexpr auto D = 0.0000000632926f;
 80094a6:	4b26      	ldr	r3, [pc, #152]	; (8009540 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xbc>)
 80094a8:	613b      	str	r3, [r7, #16]
        auto log = -logf(Vin / NTC_voltage - 1);
 80094aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094b6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009544 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xc0>
 80094ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094c6:	eeb0 0a67 	vmov.f32	s0, s15
 80094ca:	f004 f993 	bl	800d7f4 <logf>
 80094ce:	eef0 7a40 	vmov.f32	s15, s0
 80094d2:	eef1 7a67 	vneg.f32	s15, s15
 80094d6:	edc7 7a03 	vstr	s15, [r7, #12]

        return static_cast<int16_t>(100.0f / (A + log * ( B + log * (C + D * log))) - KtoC);
 80094da:	edd7 7a03 	vldr	s15, [r7, #12]
 80094de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009548 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xc4>
 80094e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094e6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800954c <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xc8>
 80094ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80094f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8009550 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xcc>
 80094fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009554 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xd0>
 800950a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8009558 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xd4>
 8009512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009516:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800955c <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs+0xd8>
 800951a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800951e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009522:	ee17 3a90 	vmov	r3, s15
 8009526:	b21b      	sxth	r3, r3
    };
 8009528:	4618      	mov	r0, r3
 800952a:	3728      	adds	r7, #40	; 0x28
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	46ea6000 	.word	0x46ea6000
 8009534:	3b5bcf0d 	.word	0x3b5bcf0d
 8009538:	39867e12 	.word	0x39867e12
 800953c:	362ee239 	.word	0x362ee239
 8009540:	3387eb7a 	.word	0x3387eb7a
 8009544:	46ea6000 	.word	0x46ea6000
 8009548:	3387eb7a 	.word	0x3387eb7a
 800954c:	362ee239 	.word	0x362ee239
 8009550:	39867e12 	.word	0x39867e12
 8009554:	3b5bcf0d 	.word	0x3b5bcf0d
 8009558:	42c80000 	.word	0x42c80000
 800955c:	46d56600 	.word	0x46d56600

08009560 <_ZN7LTC681122checkTemperatureStatusEv>:
[[nodiscard]] std::optional<LTC6811::TempStatus> LTC6811::checkTemperatureStatus() noexcept {
 8009560:	b5b0      	push	{r4, r5, r7, lr}
 8009562:	b094      	sub	sp, #80	; 0x50
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
    LTC6811::TempStatus status;
 800956a:	4b46      	ldr	r3, [pc, #280]	; (8009684 <_ZN7LTC681122checkTemperatureStatusEv+0x124>)
 800956c:	f107 0408 	add.w	r4, r7, #8
 8009570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t count{ 0 };
 8009576:	2300      	movs	r3, #0
 8009578:	64fb      	str	r3, [r7, #76]	; 0x4c

    startConversion(ADAX);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	3352      	adds	r3, #82	; 0x52
 800957e:	4619      	mov	r1, r3
 8009580:	6838      	ldr	r0, [r7, #0]
 8009582:	f000 fa51 	bl	8009a28 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>

    for (size_t group = A; group <= D; ++group)
 8009586:	2300      	movs	r3, #0
 8009588:	64bb      	str	r3, [r7, #72]	; 0x48
 800958a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958c:	2b03      	cmp	r3, #3
 800958e:	d811      	bhi.n	80095b4 <_ZN7LTC681122checkTemperatureStatusEv+0x54>
        if (readAuxRegisterGroup(static_cast<Group>(group)) == Fail)
 8009590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009592:	b2db      	uxtb	r3, r3
 8009594:	4619      	mov	r1, r3
 8009596:	6838      	ldr	r0, [r7, #0]
 8009598:	f7ff fe76 	bl	8009288 <_ZN7LTC681120readAuxRegisterGroupENS_5GroupE>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <_ZN7LTC681122checkTemperatureStatusEv+0x4c>
            return std::nullopt;
 80095a2:	4629      	mov	r1, r5
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fd8c 	bl	800a0c2 <_ZNSt8optionalIN7LTC681110TempStatusEEC1ESt9nullopt_t>
 80095aa:	e067      	b.n	800967c <_ZN7LTC681122checkTemperatureStatusEv+0x11c>
    for (size_t group = A; group <= D; ++group)
 80095ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ae:	3301      	adds	r3, #1
 80095b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095b2:	e7ea      	b.n	800958a <_ZN7LTC681122checkTemperatureStatusEv+0x2a>

    for (auto const& register_group : cell_data) {
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	330e      	adds	r3, #14
 80095b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095bc:	f000 fd17 	bl	8009fee <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 80095c0:	6478      	str	r0, [r7, #68]	; 0x44
 80095c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095c4:	f000 fd1f 	bl	800a006 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 80095c8:	6378      	str	r0, [r7, #52]	; 0x34
 80095ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d04e      	beq.n	8009670 <_ZN7LTC681122checkTemperatureStatusEv+0x110>
 80095d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d4:	633b      	str	r3, [r7, #48]	; 0x30
        for (auto const& IC : register_group) {
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095dc:	f000 fd20 	bl	800a020 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 80095e0:	6438      	str	r0, [r7, #64]	; 0x40
 80095e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095e4:	f000 fd28 	bl	800a038 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 80095e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80095ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d03a      	beq.n	8009668 <_ZN7LTC681122checkTemperatureStatusEv+0x108>
 80095f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
            for (auto temperature : IC.data) {
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	623b      	str	r3, [r7, #32]
 80095fa:	6a38      	ldr	r0, [r7, #32]
 80095fc:	f000 fd29 	bl	800a052 <_ZNKSt5arrayItLj3EE5beginEv>
 8009600:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009602:	6a38      	ldr	r0, [r7, #32]
 8009604:	f000 fd31 	bl	800a06a <_ZNKSt5arrayItLj3EE3endEv>
 8009608:	61f8      	str	r0, [r7, #28]
 800960a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	429a      	cmp	r2, r3
 8009610:	d026      	beq.n	8009660 <_ZN7LTC681122checkTemperatureStatusEv+0x100>
 8009612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	837b      	strh	r3, [r7, #26]
                temperature = steinharthart(temperature);
 8009618:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800961c:	4619      	mov	r1, r3
 800961e:	481a      	ldr	r0, [pc, #104]	; (8009688 <_ZN7LTC681122checkTemperatureStatusEv+0x128>)
 8009620:	f7ff ff30 	bl	8009484 <_ZZN7LTC681122checkTemperatureStatusEvENKUlsE_clEs>
 8009624:	4603      	mov	r3, r0
 8009626:	837b      	strh	r3, [r7, #26]

                if (temperature < status.min) {
 8009628:	8b7b      	ldrh	r3, [r7, #26]
 800962a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800962e:	4293      	cmp	r3, r2
 8009630:	da05      	bge.n	800963e <_ZN7LTC681122checkTemperatureStatusEv+0xde>
                    status.min = temperature;
 8009632:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009636:	813b      	strh	r3, [r7, #8]
                    status.min_id = count;
 8009638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	e009      	b.n	8009652 <_ZN7LTC681122checkTemperatureStatusEv+0xf2>
                } else if (temperature > status.max) {
 800963e:	8b7b      	ldrh	r3, [r7, #26]
 8009640:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009644:	4293      	cmp	r3, r2
 8009646:	dd04      	ble.n	8009652 <_ZN7LTC681122checkTemperatureStatusEv+0xf2>
                    status.max = temperature;
 8009648:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800964c:	823b      	strh	r3, [r7, #16]
                    status.max_id = count;
 800964e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009650:	617b      	str	r3, [r7, #20]
                }

                ++count;
 8009652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009654:	3301      	adds	r3, #1
 8009656:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (auto temperature : IC.data) {
 8009658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965a:	3302      	adds	r3, #2
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800965e:	e7d4      	b.n	800960a <_ZN7LTC681122checkTemperatureStatusEv+0xaa>
        for (auto const& IC : register_group) {
 8009660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009662:	3308      	adds	r3, #8
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
 8009666:	e7c0      	b.n	80095ea <_ZN7LTC681122checkTemperatureStatusEv+0x8a>
    for (auto const& register_group : cell_data) {
 8009668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966a:	3308      	adds	r3, #8
 800966c:	647b      	str	r3, [r7, #68]	; 0x44
 800966e:	e7ac      	b.n	80095ca <_ZN7LTC681122checkTemperatureStatusEv+0x6a>
            }
        }
    }
    return status;
 8009670:	f107 0308 	add.w	r3, r7, #8
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fd3d 	bl	800a0f6 <_ZNSt8optionalIN7LTC681110TempStatusEEC1IRS1_Lb1EEEOT_>
}
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	3750      	adds	r7, #80	; 0x50
 8009680:	46bd      	mov	sp, r7
 8009682:	bdb0      	pop	{r4, r5, r7, pc}
 8009684:	0800eacc 	.word	0x0800eacc
 8009688:	0800edc0 	.word	0x0800edc0

0800968c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE>:

[[nodiscard]] LTC6811::RegisterGroup<uint8_t> LTC6811::makeDischargeConfig(VoltageStatus const& voltage_status) const noexcept {
 800968c:	b590      	push	{r4, r7, lr}
 800968e:	b09f      	sub	sp, #124	; 0x7c
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
    constexpr static uint8_t kDelta{ 100 };

    uint16_t DCCx{ 0 };
 8009698:	2300      	movs	r3, #0
 800969a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 800969e:	2300      	movs	r3, #0
 80096a0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80096a4:	2300      	movs	r3, #0
 80096a6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    RegisterGroup<uint8_t> cfg_register_group;

    switch (discharge_mode) {
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	791b      	ldrb	r3, [r3, #4]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f000 8098 	beq.w	80097e6 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x15a>
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	f000 8110 	beq.w	80098dc <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x250>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d000      	beq.n	80096c2 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x36>
        }
    }
    break;
    }

    return cfg_register_group;
 80096c0:	e1a9      	b.n	8009a16 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x38a>
        for (auto& IC : cfg_register_group) { // 12 register groups
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	633b      	str	r3, [r7, #48]	; 0x30
 80096c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096c8:	f000 f9da 	bl	8009a80 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 80096cc:	6738      	str	r0, [r7, #112]	; 0x70
 80096ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d0:	f000 fd25 	bl	800a11e <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 80096d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80096d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	429a      	cmp	r2, r3
 80096dc:	f000 8196 	beq.w	8009a0c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x380>
 80096e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
            DCCx = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            current_cell = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	330e      	adds	r3, #14
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
 80096f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096f8:	f000 fd1e 	bl	800a138 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 80096fc:	66f8      	str	r0, [r7, #108]	; 0x6c
 80096fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009700:	f000 fd26 	bl	800a150 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8009704:	6238      	str	r0, [r7, #32]
 8009706:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	429a      	cmp	r2, r3
 800970c:	d037      	beq.n	800977e <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0xf2>
 800970e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009710:	61fb      	str	r3, [r7, #28]
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8009712:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009716:	4619      	mov	r1, r3
 8009718:	69f8      	ldr	r0, [r7, #28]
 800971a:	f000 fd26 	bl	800a16a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 800971e:	4603      	mov	r3, r0
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	69b8      	ldr	r0, [r7, #24]
 8009724:	f000 fc95 	bl	800a052 <_ZNKSt5arrayItLj3EE5beginEv>
 8009728:	66b8      	str	r0, [r7, #104]	; 0x68
 800972a:	69b8      	ldr	r0, [r7, #24]
 800972c:	f000 fc9d 	bl	800a06a <_ZNKSt5arrayItLj3EE3endEv>
 8009730:	6178      	str	r0, [r7, #20]
 8009732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	429a      	cmp	r2, r3
 8009738:	d01d      	beq.n	8009776 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0xea>
 800973a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	827b      	strh	r3, [r7, #18]
                    if (voltage > voltage_status.min + kDelta)
 8009740:	8a7a      	ldrh	r2, [r7, #18]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	889b      	ldrh	r3, [r3, #4]
 8009746:	3364      	adds	r3, #100	; 0x64
 8009748:	429a      	cmp	r2, r3
 800974a:	dd0b      	ble.n	8009764 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0xd8>
                        DCCx |= 1 << current_cell;
 800974c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009750:	2201      	movs	r2, #1
 8009752:	fa02 f303 	lsl.w	r3, r2, r3
 8009756:	b21a      	sxth	r2, r3
 8009758:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800975c:	4313      	orrs	r3, r2
 800975e:	b21b      	sxth	r3, r3
 8009760:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                    ++current_cell;
 8009764:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009768:	3301      	adds	r3, #1
 800976a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 800976e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009770:	3302      	adds	r3, #2
 8009772:	66bb      	str	r3, [r7, #104]	; 0x68
 8009774:	e7dd      	b.n	8009732 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0xa6>
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8009776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009778:	3308      	adds	r3, #8
 800977a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800977c:	e7c3      	b.n	8009706 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x7a>
            --current_ic;
 800977e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009782:	3b01      	subs	r3, #1
 8009784:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            IC.data[0] = 0xFE;
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fcfb 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 8009792:	4603      	mov	r3, r0
 8009794:	22fe      	movs	r2, #254	; 0xfe
 8009796:	701a      	strb	r2, [r3, #0]
            IC.data[4] = DCCx >> 0 & 0xFF;
 8009798:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800979c:	b2dc      	uxtb	r4, r3
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	2104      	movs	r1, #4
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fcf0 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 80097a8:	4603      	mov	r3, r0
 80097aa:	4622      	mov	r2, r4
 80097ac:	701a      	strb	r2, [r3, #0]
            IC.data[5] = DCCx >> 8 & 0x0F;
 80097ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80097b2:	121b      	asrs	r3, r3, #8
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	f003 030f 	and.w	r3, r3, #15
 80097ba:	b2dc      	uxtb	r4, r3
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	2105      	movs	r1, #5
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fce1 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 80097c6:	4603      	mov	r3, r0
 80097c8:	4622      	mov	r2, r4
 80097ca:	701a      	strb	r2, [r3, #0]
            IC.PEC = PEC15Calc(IC.data);
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	2106      	movs	r1, #6
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fd01 	bl	800a1d8 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80097d6:	4603      	mov	r3, r0
 80097d8:	461a      	mov	r2, r3
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	80da      	strh	r2, [r3, #6]
        for (auto& IC : cfg_register_group) { // 12 register groups
 80097de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097e0:	3308      	adds	r3, #8
 80097e2:	673b      	str	r3, [r7, #112]	; 0x70
 80097e4:	e777      	b.n	80096d6 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x4a>
        if (voltage_status.max - voltage_status.min > kDelta) {
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	899b      	ldrh	r3, [r3, #12]
 80097ea:	461a      	mov	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	889b      	ldrh	r3, [r3, #4]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b64      	cmp	r3, #100	; 0x64
 80097f4:	f340 810c 	ble.w	8009a10 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x384>
            current_ic = voltage_status.max_id / 3 % 12;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	4a88      	ldr	r2, [pc, #544]	; (8009a20 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x394>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	0859      	lsrs	r1, r3, #1
 8009804:	4b86      	ldr	r3, [pc, #536]	; (8009a20 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x394>)
 8009806:	fba3 2301 	umull	r2, r3, r3, r1
 800980a:	08da      	lsrs	r2, r3, #3
 800980c:	4613      	mov	r3, r2
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	1aca      	subs	r2, r1, r3
 8009816:	4613      	mov	r3, r2
 8009818:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            DCCx |= 1 << voltage_status.max_id % 11;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6919      	ldr	r1, [r3, #16]
 8009820:	4b80      	ldr	r3, [pc, #512]	; (8009a24 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x398>)
 8009822:	fba3 2301 	umull	r2, r3, r3, r1
 8009826:	08da      	lsrs	r2, r3, #3
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	4413      	add	r3, r2
 8009832:	1aca      	subs	r2, r1, r3
 8009834:	2301      	movs	r3, #1
 8009836:	4093      	lsls	r3, r2
 8009838:	b21a      	sxth	r2, r3
 800983a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800983e:	4313      	orrs	r3, r2
 8009840:	b21b      	sxth	r3, r3
 8009842:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            cfg_register_group[current_ic].data[0] = 0xFE;
 8009846:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800984a:	4619      	mov	r1, r3
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 fd05 	bl	800a25c <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 8009852:	4603      	mov	r3, r0
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fc96 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 800985c:	4603      	mov	r3, r0
 800985e:	22fe      	movs	r2, #254	; 0xfe
 8009860:	701a      	strb	r2, [r3, #0]
            cfg_register_group[current_ic].data[4] = DCCx >> 0 & 0xFF;
 8009862:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009866:	b2dc      	uxtb	r4, r3
 8009868:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800986c:	4619      	mov	r1, r3
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 fcf4 	bl	800a25c <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 8009874:	4603      	mov	r3, r0
 8009876:	2104      	movs	r1, #4
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fc85 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 800987e:	4603      	mov	r3, r0
 8009880:	4622      	mov	r2, r4
 8009882:	701a      	strb	r2, [r3, #0]
            cfg_register_group[current_ic].data[5] = DCCx >> 8 & 0x0F;
 8009884:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009888:	121b      	asrs	r3, r3, #8
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	b2dc      	uxtb	r4, r3
 8009892:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009896:	4619      	mov	r1, r3
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 fcdf 	bl	800a25c <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 800989e:	4603      	mov	r3, r0
 80098a0:	2105      	movs	r1, #5
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fc70 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4622      	mov	r2, r4
 80098ac:	701a      	strb	r2, [r3, #0]
            cfg_register_group[current_ic].PEC = PEC15Calc(cfg_register_group[current_ic].data);
 80098ae:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80098b2:	4619      	mov	r1, r3
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 fcd1 	bl	800a25c <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2106      	movs	r1, #6
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fc8a 	bl	800a1d8 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80098c4:	4603      	mov	r3, r0
 80098c6:	461c      	mov	r4, r3
 80098c8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80098cc:	4619      	mov	r1, r3
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 fcc4 	bl	800a25c <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4622      	mov	r2, r4
 80098d8:	80da      	strh	r2, [r3, #6]
        break;
 80098da:	e099      	b.n	8009a10 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x384>
        size_t average_voltage{ voltage_status.sum / (4 * kDaisyChainLength * 3) };
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a4f      	ldr	r2, [pc, #316]	; (8009a20 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x394>)
 80098e2:	fba2 2303 	umull	r2, r3, r2, r3
 80098e6:	08db      	lsrs	r3, r3, #3
 80098e8:	65bb      	str	r3, [r7, #88]	; 0x58
        for (auto& IC : cfg_register_group) {
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	657b      	str	r3, [r7, #84]	; 0x54
 80098ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80098f0:	f000 f8c6 	bl	8009a80 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 80098f4:	6678      	str	r0, [r7, #100]	; 0x64
 80098f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80098f8:	f000 fc11 	bl	800a11e <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 80098fc:	6538      	str	r0, [r7, #80]	; 0x50
 80098fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009902:	429a      	cmp	r2, r3
 8009904:	f000 8086 	beq.w	8009a14 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x388>
 8009908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800990a:	64fb      	str	r3, [r7, #76]	; 0x4c
            DCCx = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            current_cell = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	330e      	adds	r3, #14
 800991c:	64bb      	str	r3, [r7, #72]	; 0x48
 800991e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009920:	f000 fc0a 	bl	800a138 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 8009924:	6638      	str	r0, [r7, #96]	; 0x60
 8009926:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009928:	f000 fc12 	bl	800a150 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 800992c:	6478      	str	r0, [r7, #68]	; 0x44
 800992e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009932:	429a      	cmp	r2, r3
 8009934:	d036      	beq.n	80099a4 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x318>
 8009936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009938:	643b      	str	r3, [r7, #64]	; 0x40
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 800993a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800993e:	4619      	mov	r1, r3
 8009940:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009942:	f000 fc12 	bl	800a16a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 8009946:	4603      	mov	r3, r0
 8009948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800994a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800994c:	f000 fb81 	bl	800a052 <_ZNKSt5arrayItLj3EE5beginEv>
 8009950:	65f8      	str	r0, [r7, #92]	; 0x5c
 8009952:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009954:	f000 fb89 	bl	800a06a <_ZNKSt5arrayItLj3EE3endEv>
 8009958:	63b8      	str	r0, [r7, #56]	; 0x38
 800995a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	429a      	cmp	r2, r3
 8009960:	d01c      	beq.n	800999c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x310>
 8009962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	86fb      	strh	r3, [r7, #54]	; 0x36
                    if (voltage > average_voltage + kDelta)
 8009968:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800996a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800996c:	3364      	adds	r3, #100	; 0x64
 800996e:	429a      	cmp	r2, r3
 8009970:	d90b      	bls.n	800998a <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x2fe>
                        DCCx |= 1 << current_cell;
 8009972:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009976:	2201      	movs	r2, #1
 8009978:	fa02 f303 	lsl.w	r3, r2, r3
 800997c:	b21a      	sxth	r2, r3
 800997e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8009982:	4313      	orrs	r3, r2
 8009984:	b21b      	sxth	r3, r3
 8009986:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                    ++current_cell;
 800998a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800998e:	3301      	adds	r3, #1
 8009990:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8009994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009996:	3302      	adds	r3, #2
 8009998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800999a:	e7de      	b.n	800995a <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x2ce>
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 800999c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800999e:	3308      	adds	r3, #8
 80099a0:	663b      	str	r3, [r7, #96]	; 0x60
 80099a2:	e7c4      	b.n	800992e <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x2a2>
            --current_ic;
 80099a4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80099a8:	3b01      	subs	r3, #1
 80099aa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            IC.data[0] = 0xFE;
 80099ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fbe8 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 80099b8:	4603      	mov	r3, r0
 80099ba:	22fe      	movs	r2, #254	; 0xfe
 80099bc:	701a      	strb	r2, [r3, #0]
            IC.data[4] = DCCx >> 0 & 0xFF;
 80099be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80099c2:	b2dc      	uxtb	r4, r3
 80099c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c6:	2104      	movs	r1, #4
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 fbdd 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4622      	mov	r2, r4
 80099d2:	701a      	strb	r2, [r3, #0]
            IC.data[5] = DCCx >> 8 & 0x0F;
 80099d4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80099d8:	121b      	asrs	r3, r3, #8
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	b2dc      	uxtb	r4, r3
 80099e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e4:	2105      	movs	r1, #5
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fbce 	bl	800a188 <_ZNSt5arrayIhLj6EEixEj>
 80099ec:	4603      	mov	r3, r0
 80099ee:	4622      	mov	r2, r4
 80099f0:	701a      	strb	r2, [r3, #0]
            IC.PEC = PEC15Calc(IC.data);
 80099f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f4:	2106      	movs	r1, #6
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fbee 	bl	800a1d8 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80099fc:	4603      	mov	r3, r0
 80099fe:	461a      	mov	r2, r3
 8009a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a02:	80da      	strh	r2, [r3, #6]
        for (auto& IC : cfg_register_group) {
 8009a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a06:	3308      	adds	r3, #8
 8009a08:	667b      	str	r3, [r7, #100]	; 0x64
 8009a0a:	e778      	b.n	80098fe <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x272>
        break;
 8009a0c:	bf00      	nop
 8009a0e:	e002      	b.n	8009a16 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x38a>
        break;
 8009a10:	bf00      	nop
 8009a12:	e000      	b.n	8009a16 <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE+0x38a>
    break;
 8009a14:	bf00      	nop
    return cfg_register_group;
 8009a16:	bf00      	nop
}
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	377c      	adds	r7, #124	; 0x7c
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd90      	pop	{r4, r7, pc}
 8009a20:	aaaaaaab 	.word	0xaaaaaaab
 8009a24:	ba2e8ba3 	.word	0xba2e8ba3

08009a28 <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE>:


/* Start a conversion */
void LTC6811::startConversion(Command const& command) const noexcept {
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
    static constexpr uint16_t kMaxCycleTimeFast{ 1185 }; // Measure 12 Cells. Time in us.
    static constexpr uint16_t kMaxRefWakeupTime{ 4400 }; // Time in us.

    WakeFromIdle();
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fbac 	bl	8009190 <_ZNK7LTC681112WakeFromIdleEv>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2140      	movs	r1, #64	; 0x40
 8009a3c:	480f      	ldr	r0, [pc, #60]	; (8009a7c <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x54>)
 8009a3e:	f7f8 f90d 	bl	8001c5c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, command.data(), sizeof(Command), HAL_MAX_DELAY); // Start cell voltage conversion.
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681c      	ldr	r4, [r3, #0]
 8009a46:	6838      	ldr	r0, [r7, #0]
 8009a48:	f7ff fa48 	bl	8008edc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a52:	2204      	movs	r2, #4
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7fa facd 	bl	8003ff4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	2140      	movs	r1, #64	; 0x40
 8009a5e:	4807      	ldr	r0, [pc, #28]	; (8009a7c <_ZNK7LTC681115startConversionERKSt5arrayIhLj4EE+0x54>)
 8009a60:	f7f8 f8fc 	bl	8001c5c <HAL_GPIO_WritePin>
    DWTWrapper::getInstance().delay(kMaxRefWakeupTime + kMaxCycleTimeFast); // TODO we aren't in fast conversion mode??? Also these delays aren't in the Linduino library
 8009a64:	f7ff f9d2 	bl	8008e0c <_ZN10DWTWrapper11getInstanceEv>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f241 51d1 	movw	r1, #5585	; 0x15d1
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff f9f2 	bl	8008e58 <_ZNK10DWTWrapper5delayEm>
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd90      	pop	{r4, r7, pc}
 8009a7c:	40020400 	.word	0x40020400

08009a80 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>:
      begin() noexcept
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f9c3 	bl	8009e14 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4fillERKS2_>:
      fill(const value_type& __u)
 8009aae:	b590      	push	{r4, r7, lr}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ffe1 	bl	8009a80 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff ffe9 	bl	8009a98 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4sizeEv>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	4619      	mov	r1, r3
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fbd4 	bl	800a27a <_ZSt6fill_nIPN7LTC68118RegisterIhEEjS2_ET_S4_T0_RKT1_>
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd90      	pop	{r4, r7, pc}

08009ada <_ZNSt5arrayIhLj4EEixEj>:
      operator[](size_type __n) noexcept
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fbda 	bl	800a2a2 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
 8009aee:	4603      	mov	r3, r0
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj>:
        0xa76f, 0x62f6, 0x69c4, 0xac5d, 0x7fa0, 0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
    };

    /* This has been tested against the original code and is working properly */
    template <typename T, size_t S>
    [[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 8009b02:	2310      	movs	r3, #16
 8009b04:	82fb      	strh	r3, [r7, #22]
 8009b06:	2300      	movs	r3, #0
 8009b08:	827b      	strh	r3, [r7, #18]
        auto serialized = reinterpret_cast<uint8_t const *>(data.data());
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff f9e6 	bl	8008edc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009b10:	60f8      	str	r0, [r7, #12]

        for (uint8_t i = 0; i < size; ++i) {
 8009b12:	2300      	movs	r3, #0
 8009b14:	757b      	strb	r3, [r7, #21]
 8009b16:	7d7b      	ldrb	r3, [r7, #21]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d91b      	bls.n	8009b56 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 8009b1e:	8afb      	ldrh	r3, [r7, #22]
 8009b20:	11db      	asrs	r3, r3, #7
 8009b22:	b21a      	sxth	r2, r3
 8009b24:	7d7b      	ldrb	r3, [r7, #21]
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	440b      	add	r3, r1
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	4053      	eors	r3, r2
 8009b30:	b21b      	sxth	r3, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 8009b38:	8afb      	ldrh	r3, [r7, #22]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	b21a      	sxth	r2, r3
 8009b3e:	8a7b      	ldrh	r3, [r7, #18]
 8009b40:	490d      	ldr	r1, [pc, #52]	; (8009b78 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 8009b42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009b46:	b21b      	sxth	r3, r3
 8009b48:	4053      	eors	r3, r2
 8009b4a:	b21b      	sxth	r3, r3
 8009b4c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 8009b4e:	7d7b      	ldrb	r3, [r7, #21]
 8009b50:	3301      	adds	r3, #1
 8009b52:	757b      	strb	r3, [r7, #21]
 8009b54:	e7df      	b.n	8009b16 <_ZN7LTC68119PEC15CalcIhLj4EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        }

        PEC <<= 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 8009b56:	8afb      	ldrh	r3, [r7, #22]
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	82fb      	strh	r3, [r7, #22]
        return (PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8; // Swapping byte order because the endianness of the PEC is opposite of the data itself
 8009b5c:	8afb      	ldrh	r3, [r7, #22]
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	b21a      	sxth	r2, r3
 8009b62:	8afb      	ldrh	r3, [r7, #22]
 8009b64:	0a1b      	lsrs	r3, r3, #8
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	b21b      	sxth	r3, r3
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	b29b      	uxth	r3, r3
    }
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	0800eba0 	.word	0x0800eba0

08009b7c <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fb97 	bl	800a2be <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_refERA4_KS4_j>
 8009b90:	4603      	mov	r3, r0
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <_ZNSt14__array_traitsISt5arrayIhLj4EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	4413      	add	r3, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>:
      data() noexcept
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f805 	bl	8009bd2 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>:
    bool readRegisterGroup(Command const& command, RegisterGroup<T>& register_group) noexcept {
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b08b      	sub	sp, #44	; 0x2c
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
        WakeFromIdle();
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7ff facb 	bl	8009190 <_ZNK7LTC681112WakeFromIdleEv>
        auto serialized = reinterpret_cast<uint8_t*>(register_group.data());
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff ffdc 	bl	8009bb8 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 8009c00:	6238      	str	r0, [r7, #32]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8009c02:	2200      	movs	r2, #0
 8009c04:	2140      	movs	r1, #64	; 0x40
 8009c06:	482f      	ldr	r0, [pc, #188]	; (8009cc4 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009c08:	f7f8 f828 	bl	8001c5c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(Command), HAL_MAX_DELAY) == HAL_OK) {
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681c      	ldr	r4, [r3, #0]
 8009c10:	68b8      	ldr	r0, [r7, #8]
 8009c12:	f7ff f963 	bl	8008edc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009c16:	4601      	mov	r1, r0
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7fa f9e8 	bl	8003ff4 <HAL_SPI_Transmit>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bf0c      	ite	eq
 8009c2a:	2301      	moveq	r3, #1
 8009c2c:	2300      	movne	r3, #0
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d03d      	beq.n	8009cb0 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	2208      	movs	r2, #8
 8009c3e:	6a39      	ldr	r1, [r7, #32]
 8009c40:	f7fa fb0c 	bl	800425c <HAL_SPI_Receive>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bf0c      	ite	eq
 8009c4a:	2301      	moveq	r3, #1
 8009c4c:	2300      	movne	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d02b      	beq.n	8009cac <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc4>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009c54:	2201      	movs	r2, #1
 8009c56:	2140      	movs	r1, #64	; 0x40
 8009c58:	481a      	ldr	r0, [pc, #104]	; (8009cc4 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009c5a:	f7f7 ffff 	bl	8001c5c <HAL_GPIO_WritePin>
                for (auto& IC : register_group)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	69f8      	ldr	r0, [r7, #28]
 8009c64:	f000 fb3a 	bl	800a2dc <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 8009c68:	6278      	str	r0, [r7, #36]	; 0x24
 8009c6a:	69f8      	ldr	r0, [r7, #28]
 8009c6c:	f000 fb42 	bl	800a2f4 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 8009c70:	61b8      	str	r0, [r7, #24]
 8009c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d016      	beq.n	8009ca8 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc0>
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	617b      	str	r3, [r7, #20]
                    if (IC.PEC != PEC15Calc(IC.data))
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	88dc      	ldrh	r4, [r3, #6]
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2106      	movs	r1, #6
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fb5a 	bl	800a340 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	bf14      	ite	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	2300      	moveq	r3, #0
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xb8>
                        return Fail; // PEC error
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e00d      	b.n	8009cbc <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
                for (auto& IC : register_group)
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca6:	e7e4      	b.n	8009c72 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x8a>
                return Success;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e007      	b.n	8009cbc <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
                return Fail; // SPI error
 8009cac:	2301      	movs	r3, #1
 8009cae:	e005      	b.n	8009cbc <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	2140      	movs	r1, #64	; 0x40
 8009cb4:	4803      	ldr	r0, [pc, #12]	; (8009cc4 <_ZN7LTC681117readRegisterGroupItEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009cb6:	f7f7 ffd1 	bl	8001c5c <HAL_GPIO_WritePin>
            return Fail; // SPI error
 8009cba:	2301      	movs	r3, #1
    }
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	372c      	adds	r7, #44	; 0x2c
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd90      	pop	{r4, r7, pc}
 8009cc4:	40020400 	.word	0x40020400

08009cc8 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEixEj>:
      operator[](size_type __n) noexcept
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fb74 	bl	800a3c4 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_refERA2_KS4_j>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <_ZNSt14__array_traitsISt5arrayIhLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>:
      data() noexcept
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f805 	bl	8009d1e <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>
 8009d14:	4603      	mov	r3, r0
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>:
    bool readRegisterGroup(Command const& command, RegisterGroup<T>& register_group) noexcept {
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b08b      	sub	sp, #44	; 0x2c
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
        WakeFromIdle();
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fa25 	bl	8009190 <_ZNK7LTC681112WakeFromIdleEv>
        auto serialized = reinterpret_cast<uint8_t*>(register_group.data());
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff ffdc 	bl	8009d04 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 8009d4c:	6238      	str	r0, [r7, #32]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2140      	movs	r1, #64	; 0x40
 8009d52:	482f      	ldr	r0, [pc, #188]	; (8009e10 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009d54:	f7f7 ff82 	bl	8001c5c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(Command), HAL_MAX_DELAY) == HAL_OK) {
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681c      	ldr	r4, [r3, #0]
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f7ff f8bd 	bl	8008edc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009d62:	4601      	mov	r1, r0
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	2204      	movs	r2, #4
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7fa f942 	bl	8003ff4 <HAL_SPI_Transmit>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bf0c      	ite	eq
 8009d76:	2301      	moveq	r3, #1
 8009d78:	2300      	movne	r3, #0
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d03d      	beq.n	8009dfc <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	f04f 33ff 	mov.w	r3, #4294967295
 8009d88:	2208      	movs	r2, #8
 8009d8a:	6a39      	ldr	r1, [r7, #32]
 8009d8c:	f7fa fa66 	bl	800425c <HAL_SPI_Receive>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bf0c      	ite	eq
 8009d96:	2301      	moveq	r3, #1
 8009d98:	2300      	movne	r3, #0
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d02b      	beq.n	8009df8 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc4>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009da0:	2201      	movs	r2, #1
 8009da2:	2140      	movs	r1, #64	; 0x40
 8009da4:	481a      	ldr	r0, [pc, #104]	; (8009e10 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009da6:	f7f7 ff59 	bl	8001c5c <HAL_GPIO_WritePin>
                for (auto& IC : register_group)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	69f8      	ldr	r0, [r7, #28]
 8009db0:	f000 fb17 	bl	800a3e2 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 8009db4:	6278      	str	r0, [r7, #36]	; 0x24
 8009db6:	69f8      	ldr	r0, [r7, #28]
 8009db8:	f000 fb1f 	bl	800a3fa <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8009dbc:	61b8      	str	r0, [r7, #24]
 8009dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d016      	beq.n	8009df4 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc0>
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	617b      	str	r3, [r7, #20]
                    if (IC.PEC != PEC15Calc(IC.data))
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	88dc      	ldrh	r4, [r3, #6]
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2106      	movs	r1, #6
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fb36 	bl	800a444 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	429c      	cmp	r4, r3
 8009ddc:	bf14      	ite	ne
 8009dde:	2301      	movne	r3, #1
 8009de0:	2300      	moveq	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xb8>
                        return Fail; // PEC error
 8009de8:	2301      	movs	r3, #1
 8009dea:	e00d      	b.n	8009e08 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
                for (auto& IC : register_group)
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	3308      	adds	r3, #8
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
 8009df2:	e7e4      	b.n	8009dbe <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x8a>
                return Success;
 8009df4:	2300      	movs	r3, #0
 8009df6:	e007      	b.n	8009e08 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
                return Fail; // SPI error
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e005      	b.n	8009e08 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	2140      	movs	r1, #64	; 0x40
 8009e00:	4803      	ldr	r0, [pc, #12]	; (8009e10 <_ZN7LTC681117readRegisterGroupIsEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009e02:	f7f7 ff2b 	bl	8001c5c <HAL_GPIO_WritePin>
            return Fail; // SPI error
 8009e06:	2301      	movs	r3, #1
    }
 8009e08:	4618      	mov	r0, r3
 8009e0a:	372c      	adds	r7, #44	; 0x2c
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd90      	pop	{r4, r7, pc}
 8009e10:	40020400 	.word	0x40020400

08009e14 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>:
      data() noexcept
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f805 	bl	8009e2e <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>:
    bool readRegisterGroup(Command const& command, RegisterGroup<T>& register_group) noexcept {
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b08b      	sub	sp, #44	; 0x2c
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
        WakeFromIdle();
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f7ff f99d 	bl	8009190 <_ZNK7LTC681112WakeFromIdleEv>
        auto serialized = reinterpret_cast<uint8_t*>(register_group.data());
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7ff ffdc 	bl	8009e14 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 8009e5c:	6238      	str	r0, [r7, #32]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2140      	movs	r1, #64	; 0x40
 8009e62:	482f      	ldr	r0, [pc, #188]	; (8009f20 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009e64:	f7f7 fefa 	bl	8001c5c <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi, command.data(), sizeof(Command), HAL_MAX_DELAY) == HAL_OK) {
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681c      	ldr	r4, [r3, #0]
 8009e6c:	68b8      	ldr	r0, [r7, #8]
 8009e6e:	f7ff f835 	bl	8008edc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009e72:	4601      	mov	r1, r0
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295
 8009e78:	2204      	movs	r2, #4
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f7fa f8ba 	bl	8003ff4 <HAL_SPI_Transmit>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf0c      	ite	eq
 8009e86:	2301      	moveq	r3, #1
 8009e88:	2300      	movne	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d03d      	beq.n	8009f0c <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>
            if (HAL_SPI_Receive(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY) == HAL_OK) {
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	f04f 33ff 	mov.w	r3, #4294967295
 8009e98:	2208      	movs	r2, #8
 8009e9a:	6a39      	ldr	r1, [r7, #32]
 8009e9c:	f7fa f9de 	bl	800425c <HAL_SPI_Receive>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bf0c      	ite	eq
 8009ea6:	2301      	moveq	r3, #1
 8009ea8:	2300      	movne	r3, #0
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d02b      	beq.n	8009f08 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc4>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	2140      	movs	r1, #64	; 0x40
 8009eb4:	481a      	ldr	r0, [pc, #104]	; (8009f20 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009eb6:	f7f7 fed1 	bl	8001c5c <HAL_GPIO_WritePin>
                for (auto& IC : register_group)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	61fb      	str	r3, [r7, #28]
 8009ebe:	69f8      	ldr	r0, [r7, #28]
 8009ec0:	f7ff fdde 	bl	8009a80 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 8009ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8009ec6:	69f8      	ldr	r0, [r7, #28]
 8009ec8:	f000 f929 	bl	800a11e <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 8009ecc:	61b8      	str	r0, [r7, #24]
 8009ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d016      	beq.n	8009f04 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc0>
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	617b      	str	r3, [r7, #20]
                    if (IC.PEC != PEC15Calc(IC.data))
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	88dc      	ldrh	r4, [r3, #6]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2106      	movs	r1, #6
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 f978 	bl	800a1d8 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	429c      	cmp	r4, r3
 8009eec:	bf14      	ite	ne
 8009eee:	2301      	movne	r3, #1
 8009ef0:	2300      	moveq	r3, #0
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xb8>
                        return Fail; // PEC error
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e00d      	b.n	8009f18 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
                for (auto& IC : register_group)
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	3308      	adds	r3, #8
 8009f00:	627b      	str	r3, [r7, #36]	; 0x24
 8009f02:	e7e4      	b.n	8009ece <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x8a>
                return Success;
 8009f04:	2300      	movs	r3, #0
 8009f06:	e007      	b.n	8009f18 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
                return Fail; // SPI error
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e005      	b.n	8009f18 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xd4>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2140      	movs	r1, #64	; 0x40
 8009f10:	4803      	ldr	r0, [pc, #12]	; (8009f20 <_ZN7LTC681117readRegisterGroupIhEEbRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xdc>)
 8009f12:	f7f7 fea3 	bl	8001c5c <HAL_GPIO_WritePin>
            return Fail; // SPI error
 8009f16:	2301      	movs	r3, #1
    }
 8009f18:	4618      	mov	r0, r3
 8009f1a:	372c      	adds	r7, #44	; 0x2c
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd90      	pop	{r4, r7, pc}
 8009f20:	40020400 	.word	0x40020400

08009f24 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE6cbeginEv>:
      cbegin() const noexcept
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f805 	bl	8009f3c <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 8009f32:	4603      	mov	r3, r0
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>:
      data() const noexcept
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff ff71 	bl	8009e2e <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE>:
    bool writeRegisterGroup(Command const& command, RegisterGroup<T> const& register_group) const noexcept {
 8009f58:	b590      	push	{r4, r7, lr}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
        WakeFromIdle();
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7ff f913 	bl	8009190 <_ZNK7LTC681112WakeFromIdleEv>
        auto serialized = reinterpret_cast<uint8_t const *>(register_group.cbegin());
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff ffda 	bl	8009f24 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE6cbeginEv>
 8009f70:	6178      	str	r0, [r7, #20]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8009f72:	2200      	movs	r2, #0
 8009f74:	2140      	movs	r1, #64	; 0x40
 8009f76:	4815      	ldr	r0, [pc, #84]	; (8009fcc <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x74>)
 8009f78:	f7f7 fe70 	bl	8001c5c <HAL_GPIO_WritePin>
        auto result = HAL_SPI_Transmit(&hspi, command.data(), sizeof(command), HAL_MAX_DELAY) == HAL_OK && HAL_SPI_Transmit(&hspi, serialized, sizeof(register_group), HAL_MAX_DELAY);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681c      	ldr	r4, [r3, #0]
 8009f80:	68b8      	ldr	r0, [r7, #8]
 8009f82:	f7fe ffab 	bl	8008edc <_ZNKSt5arrayIhLj4EE4dataEv>
 8009f86:	4601      	mov	r1, r0
 8009f88:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8c:	2204      	movs	r2, #4
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7fa f830 	bl	8003ff4 <HAL_SPI_Transmit>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10c      	bne.n	8009fb4 <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x5c>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	6979      	ldr	r1, [r7, #20]
 8009fa6:	f7fa f825 	bl	8003ff4 <HAL_SPI_Transmit>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x5c>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e000      	b.n	8009fb6 <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x5e>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	74fb      	strb	r3, [r7, #19]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009fb8:	2201      	movs	r2, #1
 8009fba:	2140      	movs	r1, #64	; 0x40
 8009fbc:	4803      	ldr	r0, [pc, #12]	; (8009fcc <_ZNK7LTC681118writeRegisterGroupIhEEbRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x74>)
 8009fbe:	f7f7 fe4d 	bl	8001c5c <HAL_GPIO_WritePin>
        return result;
 8009fc2:	7cfb      	ldrb	r3, [r7, #19]
    }
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd90      	pop	{r4, r7, pc}
 8009fcc:	40020400 	.word	0x40020400

08009fd0 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() = default;

      constexpr optional(nullopt_t) noexcept
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	7039      	strb	r1, [r7, #0]
	: _Base(nullopt) { }
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fa80 	bl	800a4e4 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>:
      begin() noexcept
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa82 	bl	800a500 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>:
      end() noexcept
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fa76 	bl	800a500 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 800a014:	4603      	mov	r3, r0
 800a016:	3320      	adds	r3, #32
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>:
      begin() const noexcept
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fa76 	bl	800a51a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 800a02e:	4603      	mov	r3, r0
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>:
      end() const noexcept
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fa6a 	bl	800a51a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 800a046:	4603      	mov	r3, r0
 800a048:	3308      	adds	r3, #8
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <_ZNKSt5arrayItLj3EE5beginEv>:
      begin() const noexcept
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f962 	bl	800a324 <_ZNKSt5arrayItLj3EE4dataEv>
 800a060:	4603      	mov	r3, r0
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <_ZNKSt5arrayItLj3EE3endEv>:
      end() const noexcept
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f956 	bl	800a324 <_ZNKSt5arrayItLj3EE4dataEv>
 800a078:	4603      	mov	r3, r0
 800a07a:	3306      	adds	r3, #6
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4618      	mov	r0, r3
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1IRS1_Lb1EEEOT_>:
			      __not_<is_same<optional<_Tp>, decay_t<_Up>>>,
			      __not_<is_same<in_place_t, decay_t<_Up>>>,
			      is_constructible<_Tp, _Up&&>,
			      is_convertible<_Up&&, _Tp>
			      >::value, bool> = true>
      constexpr optional(_Up&& __t)
 800a09a:	b5b0      	push	{r4, r5, r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 800a0a4:	687c      	ldr	r4, [r7, #4]
 800a0a6:	6838      	ldr	r0, [r7, #0]
 800a0a8:	f7ff ffec 	bl	800a084 <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 fa57 	bl	800a566 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bdb0      	pop	{r4, r5, r7, pc}

0800a0c2 <_ZNSt8optionalIN7LTC681110TempStatusEEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	7039      	strb	r1, [r7, #0]
	: _Base(nullopt) { }
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fa6b 	bl	800a5ac <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1ESt9nullopt_t>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <_ZNSt8optionalIN7LTC681110TempStatusEEC1IRS1_Lb1EEEOT_>:
      constexpr optional(_Up&& __t)
 800a0f6:	b5b0      	push	{r4, r5, r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
        : _Base(std::in_place, std::forward<_Up>(__t)) { }
 800a100:	687c      	ldr	r4, [r7, #4]
 800a102:	6838      	ldr	r0, [r7, #0]
 800a104:	f7ff ffec 	bl	800a0e0 <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	4629      	mov	r1, r5
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fa72 	bl	800a5f8 <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bdb0      	pop	{r4, r5, r7, pc}

0800a11e <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>:
      end() noexcept
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff fe74 	bl	8009e14 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 800a12c:	4603      	mov	r3, r0
 800a12e:	3308      	adds	r3, #8
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>:
      begin() const noexcept
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fa79 	bl	800a638 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 800a146:	4603      	mov	r3, r0
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>:
      end() const noexcept
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fa6d 	bl	800a638 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 800a15e:	4603      	mov	r3, r0
 800a160:	3320      	adds	r3, #32
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>:
      operator[](size_type __n) const noexcept
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fa6a 	bl	800a652 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_refERA1_KS2_j>
 800a17e:	4603      	mov	r3, r0
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <_ZNSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) noexcept
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fa6a 	bl	800a670 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 800a19c:	4603      	mov	r3, r0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <_ZNSt14__array_traitsIhLj6EE6_S_ptrERA6_Kh>:
      _S_ptr(const _Type& __t) noexcept
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <_ZNKSt5arrayIhLj6EE4dataEv>:
      data() const noexcept
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff ffed 	bl	800a1a6 <_ZNSt14__array_traitsIhLj6EE6_S_ptrERA6_Kh>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>:
    [[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 800a1e2:	2310      	movs	r3, #16
 800a1e4:	82fb      	strh	r3, [r7, #22]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	827b      	strh	r3, [r7, #18]
        auto serialized = reinterpret_cast<uint8_t const *>(data.data());
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff ffe6 	bl	800a1bc <_ZNKSt5arrayIhLj6EE4dataEv>
 800a1f0:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	757b      	strb	r3, [r7, #21]
 800a1f6:	7d7b      	ldrb	r3, [r7, #21]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d91b      	bls.n	800a236 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800a1fe:	8afb      	ldrh	r3, [r7, #22]
 800a200:	11db      	asrs	r3, r3, #7
 800a202:	b21a      	sxth	r2, r3
 800a204:	7d7b      	ldrb	r3, [r7, #21]
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	440b      	add	r3, r1
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	b21b      	sxth	r3, r3
 800a20e:	4053      	eors	r3, r2
 800a210:	b21b      	sxth	r3, r3
 800a212:	b29b      	uxth	r3, r3
 800a214:	b2db      	uxtb	r3, r3
 800a216:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 800a218:	8afb      	ldrh	r3, [r7, #22]
 800a21a:	021b      	lsls	r3, r3, #8
 800a21c:	b21a      	sxth	r2, r3
 800a21e:	8a7b      	ldrh	r3, [r7, #18]
 800a220:	490d      	ldr	r1, [pc, #52]	; (800a258 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 800a222:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a226:	b21b      	sxth	r3, r3
 800a228:	4053      	eors	r3, r2
 800a22a:	b21b      	sxth	r3, r3
 800a22c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 800a22e:	7d7b      	ldrb	r3, [r7, #21]
 800a230:	3301      	adds	r3, #1
 800a232:	757b      	strb	r3, [r7, #21]
 800a234:	e7df      	b.n	800a1f6 <_ZN7LTC68119PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        PEC <<= 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800a236:	8afb      	ldrh	r3, [r7, #22]
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	82fb      	strh	r3, [r7, #22]
        return (PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8; // Swapping byte order because the endianness of the PEC is opposite of the data itself
 800a23c:	8afb      	ldrh	r3, [r7, #22]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	b21a      	sxth	r2, r3
 800a242:	8afb      	ldrh	r3, [r7, #22]
 800a244:	0a1b      	lsrs	r3, r3, #8
 800a246:	b29b      	uxth	r3, r3
 800a248:	b21b      	sxth	r3, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b21b      	sxth	r3, r3
 800a24e:	b29b      	uxth	r3, r3
    }
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	0800eba0 	.word	0x0800eba0

0800a25c <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>:
      operator[](size_type __n) noexcept
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fa0e 	bl	800a68c <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_refERA1_KS2_j>
 800a270:	4603      	mov	r3, r0
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <_ZSt6fill_nIPN7LTC68118RegisterIhEEjS2_ET_S4_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	60f8      	str	r0, [r7, #12]
 800a282:	60b9      	str	r1, [r7, #8]
 800a284:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 fa0f 	bl	800a6aa <_ZSt12__niter_baseIPN7LTC68118RegisterIhEEET_S4_>
 800a28c:	4603      	mov	r3, r0
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fa14 	bl	800a6c0 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_>
 800a298:	4603      	mov	r3, r0
    }
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_refERA4_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>:
      begin() noexcept
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fc67 	bl	8009bb8 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>:
      end() noexcept
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fc5b 	bl	8009bb8 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 800a302:	4603      	mov	r3, r0
 800a304:	3308      	adds	r3, #8
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>:
      _S_ptr(const _Type& __t) noexcept
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <_ZNKSt5arrayItLj3EE4dataEv>:
      data() const noexcept
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff ffed 	bl	800a30e <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>
 800a334:	4603      	mov	r3, r0
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>:
    [[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 800a34a:	2310      	movs	r3, #16
 800a34c:	82fb      	strh	r3, [r7, #22]
 800a34e:	2300      	movs	r3, #0
 800a350:	827b      	strh	r3, [r7, #18]
        auto serialized = reinterpret_cast<uint8_t const *>(data.data());
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff ffe6 	bl	800a324 <_ZNKSt5arrayItLj3EE4dataEv>
 800a358:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 800a35a:	2300      	movs	r3, #0
 800a35c:	757b      	strb	r3, [r7, #21]
 800a35e:	7d7b      	ldrb	r3, [r7, #21]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d91b      	bls.n	800a39e <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800a366:	8afb      	ldrh	r3, [r7, #22]
 800a368:	11db      	asrs	r3, r3, #7
 800a36a:	b21a      	sxth	r2, r3
 800a36c:	7d7b      	ldrb	r3, [r7, #21]
 800a36e:	68f9      	ldr	r1, [r7, #12]
 800a370:	440b      	add	r3, r1
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	b21b      	sxth	r3, r3
 800a376:	4053      	eors	r3, r2
 800a378:	b21b      	sxth	r3, r3
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 800a380:	8afb      	ldrh	r3, [r7, #22]
 800a382:	021b      	lsls	r3, r3, #8
 800a384:	b21a      	sxth	r2, r3
 800a386:	8a7b      	ldrh	r3, [r7, #18]
 800a388:	490d      	ldr	r1, [pc, #52]	; (800a3c0 <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 800a38a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a38e:	b21b      	sxth	r3, r3
 800a390:	4053      	eors	r3, r2
 800a392:	b21b      	sxth	r3, r3
 800a394:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 800a396:	7d7b      	ldrb	r3, [r7, #21]
 800a398:	3301      	adds	r3, #1
 800a39a:	757b      	strb	r3, [r7, #21]
 800a39c:	e7df      	b.n	800a35e <_ZN7LTC68119PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        PEC <<= 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800a39e:	8afb      	ldrh	r3, [r7, #22]
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	82fb      	strh	r3, [r7, #22]
        return (PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8; // Swapping byte order because the endianness of the PEC is opposite of the data itself
 800a3a4:	8afb      	ldrh	r3, [r7, #22]
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	b21a      	sxth	r2, r3
 800a3aa:	8afb      	ldrh	r3, [r7, #22]
 800a3ac:	0a1b      	lsrs	r3, r3, #8
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	b21b      	sxth	r3, r3
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	b21b      	sxth	r3, r3
 800a3b6:	b29b      	uxth	r3, r3
    }
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0800eba0 	.word	0x0800eba0

0800a3c4 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_refERA2_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	00db      	lsls	r3, r3, #3
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>:
      begin() noexcept
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff fc8a 	bl	8009d04 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>:
      end() noexcept
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff fc7e 	bl	8009d04 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 800a408:	4603      	mov	r3, r0
 800a40a:	3308      	adds	r3, #8
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <_ZNKSt5arrayIsLj3EE4dataEv>:
      data() const noexcept
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff ffed 	bl	800a414 <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 800a43a:	4603      	mov	r3, r0
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj>:
    [[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
        uint16_t PEC{ 16 }, addr{ 0 };
 800a44e:	2310      	movs	r3, #16
 800a450:	82fb      	strh	r3, [r7, #22]
 800a452:	2300      	movs	r3, #0
 800a454:	827b      	strh	r3, [r7, #18]
        auto serialized = reinterpret_cast<uint8_t const *>(data.data());
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff ffe7 	bl	800a42a <_ZNKSt5arrayIsLj3EE4dataEv>
 800a45c:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 800a45e:	2300      	movs	r3, #0
 800a460:	757b      	strb	r3, [r7, #21]
 800a462:	7d7b      	ldrb	r3, [r7, #21]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d91b      	bls.n	800a4a2 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj+0x5e>
            addr = (PEC >> 7 ^ serialized[i]) & 0xFF;
 800a46a:	8afb      	ldrh	r3, [r7, #22]
 800a46c:	11db      	asrs	r3, r3, #7
 800a46e:	b21a      	sxth	r2, r3
 800a470:	7d7b      	ldrb	r3, [r7, #21]
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	440b      	add	r3, r1
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	b21b      	sxth	r3, r3
 800a47a:	4053      	eors	r3, r2
 800a47c:	b21b      	sxth	r3, r3
 800a47e:	b29b      	uxth	r3, r3
 800a480:	b2db      	uxtb	r3, r3
 800a482:	827b      	strh	r3, [r7, #18]
            PEC = PEC << 8 ^ crc15Table[addr];
 800a484:	8afb      	ldrh	r3, [r7, #22]
 800a486:	021b      	lsls	r3, r3, #8
 800a488:	b21a      	sxth	r2, r3
 800a48a:	8a7b      	ldrh	r3, [r7, #18]
 800a48c:	490d      	ldr	r1, [pc, #52]	; (800a4c4 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 800a48e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a492:	b21b      	sxth	r3, r3
 800a494:	4053      	eors	r3, r2
 800a496:	b21b      	sxth	r3, r3
 800a498:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 800a49a:	7d7b      	ldrb	r3, [r7, #21]
 800a49c:	3301      	adds	r3, #1
 800a49e:	757b      	strb	r3, [r7, #21]
 800a4a0:	e7df      	b.n	800a462 <_ZN7LTC68119PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj+0x1e>
        PEC <<= 1; // From documentation: The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800a4a2:	8afb      	ldrh	r3, [r7, #22]
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	82fb      	strh	r3, [r7, #22]
        return (PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8; // Swapping byte order because the endianness of the PEC is opposite of the data itself
 800a4a8:	8afb      	ldrh	r3, [r7, #22]
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	b21a      	sxth	r2, r3
 800a4ae:	8afb      	ldrh	r3, [r7, #22]
 800a4b0:	0a1b      	lsrs	r3, r3, #8
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	b21b      	sxth	r3, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b21b      	sxth	r3, r3
 800a4ba:	b29b      	uxth	r3, r3
    }
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	0800eba0 	.word	0x0800eba0

0800a4c8 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	751a      	strb	r2, [r3, #20]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>:
      constexpr _Optional_base(nullopt_t) noexcept
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	7039      	strb	r1, [r7, #0]
      { }
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff ffe9 	bl	800a4c8 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1Ev>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>:
      data() noexcept
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f889 	bl	800a622 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>
 800a510:	4603      	mov	r3, r0
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>:
      data() const noexcept
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fb54 	bl	8009bd2 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>
 800a52a:	4603      	mov	r3, r0
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 800a534:	b5b0      	push	{r4, r5, r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	7239      	strb	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fd9f 	bl	800a084 <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a546:	4602      	mov	r2, r0
	  _M_engaged(true)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	461c      	mov	r4, r3
 800a54c:	4615      	mov	r5, r2
 800a54e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a552:	682b      	ldr	r3, [r5, #0]
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	751a      	strb	r2, [r3, #20]
      {}
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bdb0      	pop	{r4, r5, r7, pc}

0800a566 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800a566:	b5b0      	push	{r4, r5, r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	7239      	strb	r1, [r7, #8]
 800a570:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800a572:	68fc      	ldr	r4, [r7, #12]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff fd85 	bl	800a084 <_ZSt7forwardIRN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a57a:	4603      	mov	r3, r0
 800a57c:	461a      	mov	r2, r3
 800a57e:	4629      	mov	r1, r5
 800a580:	4620      	mov	r0, r4
 800a582:	f7ff ffd7 	bl	800a534 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bdb0      	pop	{r4, r5, r7, pc}

0800a590 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1Ev>:
      constexpr _Optional_payload()
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
	: _M_empty() {}
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	741a      	strb	r2, [r3, #16]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1ESt9nullopt_t>:
      constexpr _Optional_base(nullopt_t) noexcept
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	7039      	strb	r1, [r7, #0]
      { }
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7ff ffe9 	bl	800a590 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1Ev>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
      constexpr _Optional_payload(in_place_t, _Args&&... __args)
 800a5c8:	b590      	push	{r4, r7, lr}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	7239      	strb	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	: _M_payload(std::forward<_Args>(__args)...),
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff fd83 	bl	800a0e0 <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5da:	4602      	mov	r2, r0
	  _M_engaged(true)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	461c      	mov	r4, r3
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a5e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	741a      	strb	r2, [r3, #16]
      {}
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd90      	pop	{r4, r7, pc}

0800a5f8 <_ZNSt14_Optional_baseIN7LTC681110TempStatusEEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800a5f8:	b5b0      	push	{r4, r5, r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	7239      	strb	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800a604:	68fc      	ldr	r4, [r7, #12]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff fd6a 	bl	800a0e0 <_ZSt7forwardIRN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	4629      	mov	r1, r5
 800a612:	4620      	mov	r0, r4
 800a614:	f7ff ffd8 	bl	800a5c8 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bdb0      	pop	{r4, r5, r7, pc}

0800a622 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>:
      _S_ptr(const _Type& __t) noexcept
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>:
      data() const noexcept
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff ffed 	bl	800a622 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>
 800a648:	4603      	mov	r3, r0
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	4413      	add	r3, r2
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	4413      	add	r3, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <_ZSt12__niter_baseIPN7LTC68118RegisterIhEEET_S4_>:
    __niter_base(_Iterator __it)
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
      for (__decltype(__n + 0) __niter = __n;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, ++__first)
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00c      	beq.n	800a6f0 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_+0x30>
	*__first = __value;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	6811      	ldr	r1, [r2, #0]
 800a6dc:	6852      	ldr	r2, [r2, #4]
 800a6de:	6019      	str	r1, [r3, #0]
 800a6e0:	605a      	str	r2, [r3, #4]
      for (__decltype(__n + 0) __niter = __n;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	e7ef      	b.n	800a6d0 <_ZSt10__fill_n_aIPN7LTC68118RegisterIhEEjS2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES9_T0_RKS7_+0x10>
      return __first;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
    }
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
	...

0800a700 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a70a:	f000 f879 	bl	800a800 <BSP_SD_IsDetected>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b01      	cmp	r3, #1
 800a712:	d001      	beq.n	800a718 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e012      	b.n	800a73e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a718:	480b      	ldr	r0, [pc, #44]	; (800a748 <BSP_SD_Init+0x48>)
 800a71a:	f7f8 fa8f 	bl	8002c3c <HAL_SD_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d109      	bne.n	800a73c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a72c:	4806      	ldr	r0, [pc, #24]	; (800a748 <BSP_SD_Init+0x48>)
 800a72e:	f7f9 f87d 	bl	800382c <HAL_SD_ConfigWideBusOperation>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a73c:	79fb      	ldrb	r3, [r7, #7]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20000148 	.word	0x20000148

0800a74c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af02      	add	r7, sp, #8
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	4806      	ldr	r0, [pc, #24]	; (800a784 <BSP_SD_ReadBlocks+0x38>)
 800a76a:	f7f8 faf7 	bl	8002d5c <HAL_SD_ReadBlocks>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800a778:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20000148 	.word	0x20000148

0800a788 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	4806      	ldr	r0, [pc, #24]	; (800a7c0 <BSP_SD_WriteBlocks+0x38>)
 800a7a6:	f7f8 fcd1 	bl	800314c <HAL_SD_WriteBlocks>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000148 	.word	0x20000148

0800a7c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7c8:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <BSP_SD_GetCardState+0x1c>)
 800a7ca:	f7f9 f8ab 	bl	8003924 <HAL_SD_GetCardState>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	bf14      	ite	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000148 	.word	0x20000148

0800a7e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	4803      	ldr	r0, [pc, #12]	; (800a7fc <BSP_SD_GetCardInfo+0x18>)
 800a7f0:	f7f8 fff0 	bl	80037d4 <HAL_SD_GetCardInfo>
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20000148 	.word	0x20000148

0800a800 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a806:	2301      	movs	r3, #1
 800a808:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a80a:	f000 f84f 	bl	800a8ac <BSP_PlatformIsDetected>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a814:	2300      	movs	r3, #0
 800a816:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	b2db      	uxtb	r3, r3
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <MX_FATFS_Init>:
#define DIRECTORY "hpf20"
FILINFO inf;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a828:	4916      	ldr	r1, [pc, #88]	; (800a884 <MX_FATFS_Init+0x60>)
 800a82a:	4817      	ldr	r0, [pc, #92]	; (800a888 <MX_FATFS_Init+0x64>)
 800a82c:	f7fe fade 	bl	8008dec <FATFS_LinkDriver>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	4b15      	ldr	r3, [pc, #84]	; (800a88c <MX_FATFS_Init+0x68>)
 800a836:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
    if (retSD == FR_OK) {
 800a838:	4b14      	ldr	r3, [pc, #80]	; (800a88c <MX_FATFS_Init+0x68>)
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d11e      	bne.n	800a87e <MX_FATFS_Init+0x5a>
        retSD = f_mount(&SDFatFS, SDPath, 1);
 800a840:	2201      	movs	r2, #1
 800a842:	4910      	ldr	r1, [pc, #64]	; (800a884 <MX_FATFS_Init+0x60>)
 800a844:	4812      	ldr	r0, [pc, #72]	; (800a890 <MX_FATFS_Init+0x6c>)
 800a846:	f7fd f9e1 	bl	8007c0c <f_mount>
 800a84a:	4603      	mov	r3, r0
 800a84c:	461a      	mov	r2, r3
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <MX_FATFS_Init+0x68>)
 800a850:	701a      	strb	r2, [r3, #0]
        if (retSD == FR_OK) {
 800a852:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <MX_FATFS_Init+0x68>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d111      	bne.n	800a87e <MX_FATFS_Init+0x5a>
            retSD = f_stat(DIRECTORY, &inf);
 800a85a:	490e      	ldr	r1, [pc, #56]	; (800a894 <MX_FATFS_Init+0x70>)
 800a85c:	480e      	ldr	r0, [pc, #56]	; (800a898 <MX_FATFS_Init+0x74>)
 800a85e:	f7fd fdf6 	bl	800844e <f_stat>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <MX_FATFS_Init+0x68>)
 800a868:	701a      	strb	r2, [r3, #0]
            if (retSD == FR_NO_FILE) {
 800a86a:	4b08      	ldr	r3, [pc, #32]	; (800a88c <MX_FATFS_Init+0x68>)
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d105      	bne.n	800a87e <MX_FATFS_Init+0x5a>
                f_mkdir(DIRECTORY);
 800a872:	4809      	ldr	r0, [pc, #36]	; (800a898 <MX_FATFS_Init+0x74>)
 800a874:	f7fd fecf 	bl	8008616 <f_mkdir>
                retSD = FR_OK;
 800a878:	4b04      	ldr	r3, [pc, #16]	; (800a88c <MX_FATFS_Init+0x68>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    /* additional user code for init */
  /* USER CODE END Init */
}
 800a87e:	bf00      	nop
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200002a0 	.word	0x200002a0
 800a888:	0800ee34 	.word	0x0800ee34
 800a88c:	2000029c 	.word	0x2000029c
 800a890:	200004d4 	.word	0x200004d4
 800a894:	20000704 	.word	0x20000704
 800a898:	0800eadc 	.word	0x0800eadc

0800a89c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
    return 0;
 800a8a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a8b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8ba:	4806      	ldr	r0, [pc, #24]	; (800a8d4 <BSP_PlatformIsDetected+0x28>)
 800a8bc:	f7f7 f9b6 	bl	8001c2c <HAL_GPIO_ReadPin>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
}  
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	40020000 	.word	0x40020000

0800a8d8 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	71fb      	strb	r3, [r7, #7]
    return memory_order(__m & int(__mod));
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	b25a      	sxtb	r2, r3
 800a8e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	b25b      	sxtb	r3, r3
 800a8f0:	b2db      	uxtb	r3, r3
  }
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <_ZNSt6atomicImEC1Em>:
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fd75 	bl	800b3fc <_ZNSt13__atomic_baseImEC2Em>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <_ZNK3IVT16comparePrechargeEm>:
public:
    enum {
        Charged, NotCharged, Hysteresis
    };

    [[nodiscard]] uint32_t comparePrecharge(uint32_t const sum_of_cells) const noexcept {
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
        static constexpr float kPrechargeMinStartVoltage{ 470.0f };
        static constexpr float kPrechargeMaxEndVoltage{ 450.0f };
        static constexpr uint8_t kHysteresis{ 10 };

        float const percentage = U1 * 100 / U2;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	edd3 7a00 	vldr	s15, [r3]
 800a92c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800aa28 <_ZNK3IVT16comparePrechargeEm+0x10c>
 800a930:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	ed93 7a01 	vldr	s14, [r3, #4]
 800a93a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a93e:	edc7 7a05 	vstr	s15, [r7, #20]
        float const match_percentage = U2 * 100 / sum_of_cells - 100;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	edd3 7a01 	vldr	s15, [r3, #4]
 800a948:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800aa28 <_ZNK3IVT16comparePrechargeEm+0x10c>
 800a94c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a95a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a95e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800aa28 <_ZNK3IVT16comparePrechargeEm+0x10c>
 800a962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a966:	edc7 7a04 	vstr	s15, [r7, #16]
        bool const is_voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 800a96a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a96e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a972:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97a:	d50a      	bpl.n	800a992 <_ZNK3IVT16comparePrechargeEm+0x76>
 800a97c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a980:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a984:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98c:	dd01      	ble.n	800a992 <_ZNK3IVT16comparePrechargeEm+0x76>
 800a98e:	2301      	movs	r3, #1
 800a990:	e000      	b.n	800a994 <_ZNK3IVT16comparePrechargeEm+0x78>
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]

        if (percentage >= 95 && is_voltage_match && U1 > kPrechargeMinStartVoltage && U2 > kPrechargeMinStartVoltage)
 800a996:	edd7 7a05 	vldr	s15, [r7, #20]
 800a99a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800aa2c <_ZNK3IVT16comparePrechargeEm+0x110>
 800a99e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a6:	db18      	blt.n	800a9da <_ZNK3IVT16comparePrechargeEm+0xbe>
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d015      	beq.n	800a9da <_ZNK3IVT16comparePrechargeEm+0xbe>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	edd3 7a00 	vldr	s15, [r3]
 800a9b4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800aa30 <_ZNK3IVT16comparePrechargeEm+0x114>
 800a9b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c0:	dd0b      	ble.n	800a9da <_ZNK3IVT16comparePrechargeEm+0xbe>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a9c8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800aa30 <_ZNK3IVT16comparePrechargeEm+0x114>
 800a9cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d4:	dd01      	ble.n	800a9da <_ZNK3IVT16comparePrechargeEm+0xbe>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e000      	b.n	800a9dc <_ZNK3IVT16comparePrechargeEm+0xc0>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <_ZNK3IVT16comparePrechargeEm+0xc8>
            return Charged;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e01b      	b.n	800aa1c <_ZNK3IVT16comparePrechargeEm+0x100>
        else if (U1 < kPrechargeMaxEndVoltage || U2 < kPrechargeMaxEndVoltage)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	edd3 7a00 	vldr	s15, [r3]
 800a9ea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800aa34 <_ZNK3IVT16comparePrechargeEm+0x118>
 800a9ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f6:	d409      	bmi.n	800aa0c <_ZNK3IVT16comparePrechargeEm+0xf0>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800a9fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800aa34 <_ZNK3IVT16comparePrechargeEm+0x118>
 800aa02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0a:	d501      	bpl.n	800aa10 <_ZNK3IVT16comparePrechargeEm+0xf4>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e000      	b.n	800aa12 <_ZNK3IVT16comparePrechargeEm+0xf6>
 800aa10:	2300      	movs	r3, #0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <_ZNK3IVT16comparePrechargeEm+0xfe>
            return NotCharged;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <_ZNK3IVT16comparePrechargeEm+0x100>
        else
            return Hysteresis;
 800aa1a:	2302      	movs	r3, #2
    }
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	371c      	adds	r7, #28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	42c80000 	.word	0x42c80000
 800aa2c:	42be0000 	.word	0x42be0000
 800aa30:	43eb0000 	.word	0x43eb0000
 800aa34:	43e10000 	.word	0x43e10000

0800aa38 <_ZN3IVT10setCurrentEf>:

    void setCurrent(float const I) noexcept {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	ed87 0a00 	vstr	s0, [r7]
        this->I = I;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	609a      	str	r2, [r3, #8]
        mCounter = 0;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 f90e 	bl	800cc72 <_ZNSt13__atomic_baseImEaSEm>
    }
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <_ZNK3IVT10getCurrentEv>:

    [[nodiscard]] float getCurrent() const noexcept {
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
        return I;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	ee07 3a90 	vmov	s15, r3
    }
 800aa6e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <_ZN3IVT11setVoltage1Ef>:

    void setVoltage1(float const U1) noexcept {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	ed87 0a00 	vstr	s0, [r7]
        this->U1 = U1;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	601a      	str	r2, [r3, #0]
        mCounter = 0;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	330c      	adds	r3, #12
 800aa92:	2100      	movs	r1, #0
 800aa94:	4618      	mov	r0, r3
 800aa96:	f002 f8ec 	bl	800cc72 <_ZNSt13__atomic_baseImEaSEm>
    }
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_ZNK3IVT11getVoltage1Ev>:

    [[nodiscard]] float getVoltage1() const noexcept {
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
        return U1;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	ee07 3a90 	vmov	s15, r3
    }
 800aab2:	eeb0 0a67 	vmov.f32	s0, s15
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <_ZN3IVT11setVoltage2Ef>:

    void setVoltage2(float const U2) noexcept {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	ed87 0a00 	vstr	s0, [r7]
        this->U2 = U2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	605a      	str	r2, [r3, #4]
        mCounter = 0;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	330c      	adds	r3, #12
 800aad6:	2100      	movs	r1, #0
 800aad8:	4618      	mov	r0, r3
 800aada:	f002 f8ca 	bl	800cc72 <_ZNSt13__atomic_baseImEaSEm>
    }
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <_ZNK3IVT11getVoltage2Ev>:

    [[nodiscard]] float getVoltage2() const noexcept {
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
        return U2;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	ee07 3a90 	vmov	s15, r3
    }
 800aaf6:	eeb0 0a67 	vmov.f32	s0, s15
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <_ZN3IVT4tickEv>:

    void tick() noexcept {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
        ++mCounter;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	330c      	adds	r3, #12
 800ab10:	4618      	mov	r0, r3
 800ab12:	f002 f8cd 	bl	800ccb0 <_ZNSt13__atomic_baseImEppEv>

        /* Put anything else you want to happen inside this class each systick.
         * Remember, anything changed inside this function MUST be either:
         * volatile, if it is being either read from or written to separately, or
         * atomic, if it is being read from and written to at the same time (such as with the increment operator). */
    }
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <_ZNK3IVT6isLostEv>:

    [[nodiscard]] uint32_t getTicks() const noexcept {
        return mCounter;
    }

    [[nodiscard]] bool isLost() const noexcept {
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b082      	sub	sp, #8
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
        static constexpr uint32_t kMaxDelay{ 500 }; // time in ms

        return mCounter > kMaxDelay;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	330c      	adds	r3, #12
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f002 f8d8 	bl	800cce0 <_ZNKSt13__atomic_baseImEcvmEv>
 800ab30:	4603      	mov	r3, r0
 800ab32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ab36:	bf8c      	ite	hi
 800ab38:	2301      	movhi	r3, #1
 800ab3a:	2300      	movls	r3, #0
 800ab3c:	b2db      	uxtb	r3, r3
    }
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <_ZN7CounterC1Et>:
#ifndef COUNTER_H_
#define COUNTER_H_

class Counter {
public:
    Counter(uint16_t const limit) : limit{ limit } {}
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	807b      	strh	r3, [r7, #2]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	801a      	strh	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	887a      	ldrh	r2, [r7, #2]
 800ab5c:	805a      	strh	r2, [r3, #2]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <_ZN7CounterppEv>:
        ++count;

        return old;
    }

    constexpr Counter& operator++() noexcept {
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
        // Pre-increment operator
        ++count;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	801a      	strh	r2, [r3, #0]
        return *this;
 800ab80:	687b      	ldr	r3, [r7, #4]
    }
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <_ZN7CountermmEv>:
        --count;

        return old;
    }

    constexpr Counter& operator--() noexcept {
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
        // Pre-decrement operator
        --count;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	801a      	strh	r2, [r3, #0]

        return *this;
 800aba2:	687b      	ldr	r3, [r7, #4]
    }
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <_ZNK7Counter11isOverLimitEv>:
            lhs.count -= rhs;

        return lhs;
    }

    [[nodiscard]] bool isOverLimit() const noexcept {
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
        return count > limit;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	881a      	ldrh	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	885b      	ldrh	r3, [r3, #2]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	bf8c      	ite	hi
 800abc4:	2301      	movhi	r3, #1
 800abc6:	2300      	movls	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
    }
 800abca:	4618      	mov	r0, r3
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <_ZNK7Counter8getCountEv>:

    [[nodiscard]] auto getCount() const noexcept {
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
        return count;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	881b      	ldrh	r3, [r3, #0]
    }
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <_ZN6StatusC1Eh>:
    static constexpr  int32_t kMaxPower{ 8000000 };
    static constexpr uint16_t kMinVoltage{ 31000 }, kMaxVoltage{ 42000 }, kLimpMinVoltage{ 34000 };
    static constexpr  int16_t kMinTemp{ -1500 }, kMaxTemp{ 5900 }, kMaxChargeTemp{ 4400 };
    static constexpr    float kMaxCurrent{ 180.0f }, kAccuMinVoltage{ 490.0f };

    Status(uint8_t const opMode) : mOpMode { opMode } {
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	2324      	movs	r3, #36	; 0x24
 800ac00:	461a      	mov	r2, r3
 800ac02:	2100      	movs	r1, #0
 800ac04:	f002 ffce 	bl	800dba4 <memset>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	78fa      	ldrb	r2, [r7, #3]
 800ac0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3328      	adds	r3, #40	; 0x28
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fe6d 	bl	800a8fe <_ZNSt6atomicImEC1Em>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	332c      	adds	r3, #44	; 0x2c
 800ac28:	2100      	movs	r1, #0
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff ff8b 	bl	800ab46 <_ZN7CounterC1Et>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3330      	adds	r3, #48	; 0x30
 800ac34:	2102      	movs	r1, #2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff ff85 	bl	800ab46 <_ZN7CounterC1Et>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3334      	adds	r3, #52	; 0x34
 800ac40:	2102      	movs	r1, #2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff ff7f 	bl	800ab46 <_ZN7CounterC1Et>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3338      	adds	r3, #56	; 0x38
 800ac4c:	2102      	movs	r1, #2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7ff ff79 	bl	800ab46 <_ZN7CounterC1Et>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	333c      	adds	r3, #60	; 0x3c
 800ac58:	2102      	movs	r1, #2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff ff73 	bl	800ab46 <_ZN7CounterC1Et>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3340      	adds	r3, #64	; 0x40
 800ac64:	2102      	movs	r1, #2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff ff6d 	bl	800ab46 <_ZN7CounterC1Et>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3344      	adds	r3, #68	; 0x44
 800ac70:	2102      	movs	r1, #2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff ff67 	bl	800ab46 <_ZN7CounterC1Et>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3348      	adds	r3, #72	; 0x48
 800ac7c:	2102      	movs	r1, #2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff ff61 	bl	800ab46 <_ZN7CounterC1Et>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	334c      	adds	r3, #76	; 0x4c
 800ac88:	2102      	movs	r1, #2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff ff5b 	bl	800ab46 <_ZN7CounterC1Et>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3350      	adds	r3, #80	; 0x50
 800ac94:	2102      	movs	r1, #2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff ff55 	bl	800ab46 <_ZN7CounterC1Et>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3354      	adds	r3, #84	; 0x54
 800aca0:	2102      	movs	r1, #2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff ff4f 	bl	800ab46 <_ZN7CounterC1Et>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3358      	adds	r3, #88	; 0x58
 800acac:	2101      	movs	r1, #1
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff ff49 	bl	800ab46 <_ZN7CounterC1Et>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	335c      	adds	r3, #92	; 0x5c
 800acb8:	2102      	movs	r1, #2
 800acba:	4618      	mov	r0, r3
 800acbc:	f7ff ff43 	bl	800ab46 <_ZN7CounterC1Et>
        setPrechargeState(Open);
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f828 	bl	800ad18 <_ZN6Status17setPrechargeStateE5State>
        setAIRState(Open);
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f850 	bl	800ad70 <_ZN6Status11setAIRStateE5State>
    };
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <_ZN6Status9setOpModeEh>:

    void setOpMode(uint8_t const opMode) noexcept {
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	460b      	mov	r3, r1
 800ace4:	70fb      	strb	r3, [r7, #3]
        mOpMode = opMode;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	78fa      	ldrb	r2, [r7, #3]
 800acea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800acee:	bf00      	nop
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <_ZNK6Status9getOpModeEv>:

    [[nodiscard]] uint8_t getOpMode() const noexcept {
 800acfa:	b480      	push	{r7}
 800acfc:	b083      	sub	sp, #12
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
        return mOpMode;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad08:	b2db      	uxtb	r3, r3
    }
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
	...

0800ad18 <_ZN6Status17setPrechargeStateE5State>:

    /* Energize / De-energize Pre-charge Relay. */
    void setPrechargeState(State const preState) noexcept {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
        HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, static_cast<GPIO_PinState>(preState));
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	461a      	mov	r2, r3
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4808      	ldr	r0, [pc, #32]	; (800ad4c <_ZN6Status17setPrechargeStateE5State+0x34>)
 800ad2c:	f7f6 ff96 	bl	8001c5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, static_cast<GPIO_PinState>(preState));
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	461a      	mov	r2, r3
 800ad34:	2102      	movs	r1, #2
 800ad36:	4806      	ldr	r0, [pc, #24]	; (800ad50 <_ZN6Status17setPrechargeStateE5State+0x38>)
 800ad38:	f7f6 ff90 	bl	8001c5c <HAL_GPIO_WritePin>
        mPreState = preState;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	40020400 	.word	0x40020400
 800ad50:	40020800 	.word	0x40020800

0800ad54 <_ZNK6Status17getPrechargeStateEv>:

    [[nodiscard]] State getPrechargeState() const noexcept {
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
        return mPreState;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <_ZN6Status11setAIRStateE5State>:

    /* Energize / De-energize AIR (Accumulator Indicator Relay). */
    void setAIRState(State const AIRState) noexcept {
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
        HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, static_cast<GPIO_PinState>(AIRState));
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	2102      	movs	r1, #2
 800ad82:	4808      	ldr	r0, [pc, #32]	; (800ada4 <_ZN6Status11setAIRStateE5State+0x34>)
 800ad84:	f7f6 ff6a 	bl	8001c5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, static_cast<GPIO_PinState>(AIRState));
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4806      	ldr	r0, [pc, #24]	; (800ada8 <_ZN6Status11setAIRStateE5State+0x38>)
 800ad90:	f7f6 ff64 	bl	8001c5c <HAL_GPIO_WritePin>
        mAIRState = AIRState;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    }
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	40020400 	.word	0x40020400
 800ada8:	40020800 	.word	0x40020800

0800adac <_ZNK6Status11getAIRStateEv>:

    [[nodiscard]] State getAIRState() const noexcept {
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
        return mAIRState;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    }
 800adba:	4618      	mov	r0, r3
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <_ZN6Status7isErrorENS_5ErrorEb>:

    bool isError(Error const e, bool const error) noexcept {
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
 800add2:	4613      	mov	r3, r2
 800add4:	70bb      	strb	r3, [r7, #2]
        if (error) {
 800add6:	78bb      	ldrb	r3, [r7, #2]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d028      	beq.n	800ae2e <_ZN6Status7isErrorENS_5ErrorEb+0x68>
            ++mErrorCounters[e];
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	330a      	adds	r3, #10
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	4413      	add	r3, r2
 800ade6:	3304      	adds	r3, #4
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff febf 	bl	800ab6c <_ZN7CounterppEv>
            if (mErrorCounters[e].isOverLimit()) {
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	330a      	adds	r3, #10
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	4413      	add	r3, r2
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fed8 	bl	800abb0 <_ZNK7Counter11isOverLimitEv>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01c      	beq.n	800ae40 <_ZN6Status7isErrorENS_5ErrorEb+0x7a>
                if (e == Limping)
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d10a      	bne.n	800ae22 <_ZN6Status7isErrorENS_5ErrorEb+0x5c>
                    mErrorCounters[e] += 9; // Add some amount to the counter when limping so that it takes some time to return to non-limping
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	330a      	adds	r3, #10
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4413      	add	r3, r2
 800ae16:	3304      	adds	r3, #4
 800ae18:	2109      	movs	r1, #9
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f001 ff7b 	bl	800cd16 <_ZpLIiLi0EER7CounterS1_T_>
 800ae20:	e00e      	b.n	800ae40 <_ZN6Status7isErrorENS_5ErrorEb+0x7a>
                else
                    goToSafeState(e); // This function call is the most glaring, ugly side-effect in the entire BMS. Should not be hidden away like this.
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f865 	bl	800aef6 <_ZN6Status13goToSafeStateENS_5ErrorE>
 800ae2c:	e008      	b.n	800ae40 <_ZN6Status7isErrorENS_5ErrorEb+0x7a>
            }
        } else {
            --mErrorCounters[e];
 800ae2e:	78fb      	ldrb	r3, [r7, #3]
 800ae30:	330a      	adds	r3, #10
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	4413      	add	r3, r2
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff fea7 	bl	800ab8e <_ZN7CountermmEv>
        }

        return error;
 800ae40:	78bb      	ldrb	r3, [r7, #2]
    }
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_ZNK6Status13getErrorCountENS_5ErrorE>:

    [[nodiscard]] uint32_t getErrorCount(Error const e) const noexcept {
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	70fb      	strb	r3, [r7, #3]
        return mErrorCounters[e].getCount();
 800ae56:	78fb      	ldrb	r3, [r7, #3]
 800ae58:	330a      	adds	r3, #10
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	4413      	add	r3, r2
 800ae60:	3304      	adds	r3, #4
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff feb7 	bl	800abd6 <_ZNK7Counter8getCountEv>
 800ae68:	4603      	mov	r3, r0
    }
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <_ZNK6Status16isErrorOverLimitENS_5ErrorE>:

    [[nodiscard]] bool isErrorOverLimit(Error const e) const noexcept {
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
        return mErrorCounters[e].isOverLimit();
 800ae7e:	78fb      	ldrb	r3, [r7, #3]
 800ae80:	330a      	adds	r3, #10
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	4413      	add	r3, r2
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff fe90 	bl	800abb0 <_ZNK7Counter11isOverLimitEv>
 800ae90:	4603      	mov	r3, r0
    }
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <_ZNK6Status12getLastErrorEv>:

    [[nodiscard]] uint8_t getLastError() const noexcept {
 800ae9a:	b480      	push	{r7}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
        return mLastError;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <_ZNK6Status9getUptimeEv>:

    [[nodiscard]] uint32_t getUptime() const noexcept {
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
        /* TODO:
         * This function is returning time in deciseconds, because that's what it seemed like it was doing on the old BMS.
         * If this is wrong, remove the divisor to return milliseconds, or divide by 1000 to return seconds. */
        return mCounter / 10;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3328      	adds	r3, #40	; 0x28
 800aec0:	4618      	mov	r0, r3
 800aec2:	f001 ff0d 	bl	800cce0 <_ZNKSt13__atomic_baseImEcvmEv>
 800aec6:	4602      	mov	r2, r0
 800aec8:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <_ZNK6Status9getUptimeEv+0x24>)
 800aeca:	fba3 2302 	umull	r2, r3, r3, r2
 800aece:	08db      	lsrs	r3, r3, #3
    }
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	cccccccd 	.word	0xcccccccd

0800aedc <_ZN6Status4tickEv>:

    void tick() noexcept {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
        ++mCounter;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3328      	adds	r3, #40	; 0x28
 800aee8:	4618      	mov	r0, r3
 800aeea:	f001 fee1 	bl	800ccb0 <_ZNSt13__atomic_baseImEppEv>

        /* Put anything else you want to happen inside this class each systick.
         * Remember, anything changed inside this function MUST be either:
         * volatile, if it is being either read from or written to separately, or
         * atomic, if it is being read from and written to at the same time (such as with the increment operator). */
    }
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <_ZN6Status13goToSafeStateENS_5ErrorE>:
                [OverTempCharging] = Counter{ 2 }
    };



    void goToSafeState(Error const e) noexcept {
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	460b      	mov	r3, r1
 800af00:	70fb      	strb	r3, [r7, #3]
#if BMS_RELAY_CTRL_BYPASS
        // Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
        if (e != PECError) {
 800af02:	78fb      	ldrb	r3, [r7, #3]
 800af04:	2b09      	cmp	r3, #9
 800af06:	d007      	beq.n	800af18 <_ZN6Status13goToSafeStateENS_5ErrorE+0x22>
            setAIRState(Open);
 800af08:	2100      	movs	r1, #0
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff ff30 	bl	800ad70 <_ZN6Status11setAIRStateE5State>
            setPrechargeState(Open);
 800af10:	2100      	movs	r1, #0
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff ff00 	bl	800ad18 <_ZN6Status17setPrechargeStateE5State>
#else
        setAIRState(Open);
        setPrechargeState(Open);
#endif
#if STOP_CORE_ON_SAFE_STATE
        mOpMode &= ~Core;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f023 0301 	bic.w	r3, r3, #1
 800af24:	b2da      	uxtb	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif
#if START_DEBUG_ON_SAFE_STATE
        mOpMode |= Debug;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f043 0308 	orr.w	r3, r3, #8
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif
        mLastError = e;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	78fa      	ldrb	r2, [r7, #3]
 800af44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <_ZN4NLG5C1ER19__CAN_HandleTypeDefR19CAN_TxHeaderTypeDefttt>:

public:
    /*** Bit definitions in NLG5 Control Bitmap (NLG5_CTLB) ***/
    enum { C_CP_V = 1 << 5, C_C_EL = 1 << 6, C_C_EN = 1 << 7 }; // From http://media3.ev-tv.me/BrusaCANbusspec201.pdf

    NLG5(CAN_HandleTypeDef& hcan, CAN_TxHeaderTypeDef& TxHeader, uint16_t const mc_limit = 160, uint16_t const oc_limit = 60, uint16_t const ov_limit = 2990)
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	807b      	strh	r3, [r7, #2]
    : hcan{ hcan }, TxHeader{ TxHeader}, ctrl{ C_C_EN }, mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit }, a_buffer{ 0 }, b_buffer{ 0 } {};
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	605a      	str	r2, [r3, #4]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3308      	adds	r3, #8
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff fcc4 	bl	800a8fe <_ZNSt6atomicImEC1Em>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2280      	movs	r2, #128	; 0x80
 800af7a:	731a      	strb	r2, [r3, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	887a      	ldrh	r2, [r7, #2]
 800af80:	81da      	strh	r2, [r3, #14]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	8b3a      	ldrh	r2, [r7, #24]
 800af86:	821a      	strh	r2, [r3, #16]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8bba      	ldrh	r2, [r7, #28]
 800af8c:	825a      	strh	r2, [r3, #18]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	615a      	str	r2, [r3, #20]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	619a      	str	r2, [r3, #24]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZN4NLG516setChargeCurrentEt>:

    void setChargeCurrent(uint16_t const max_voltage) noexcept {
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	460b      	mov	r3, r1
 800afae:	807b      	strh	r3, [r7, #2]
        if (max_voltage > kChargerDis)
 800afb0:	887b      	ldrh	r3, [r7, #2]
 800afb2:	f24a 3248 	movw	r2, #41800	; 0xa348
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d903      	bls.n	800afc2 <_ZN4NLG516setChargeCurrentEt+0x1e>
            ctrl = 0;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	731a      	strb	r2, [r3, #12]
        else if (max_voltage < kChargerEn)
            ctrl = C_C_EN;
    }
 800afc0:	e007      	b.n	800afd2 <_ZN4NLG516setChargeCurrentEt+0x2e>
        else if (max_voltage < kChargerEn)
 800afc2:	887b      	ldrh	r3, [r7, #2]
 800afc4:	f24a 221b 	movw	r2, #41499	; 0xa21b
 800afc8:	4293      	cmp	r3, r2
 800afca:	d802      	bhi.n	800afd2 <_ZN4NLG516setChargeCurrentEt+0x2e>
            ctrl = C_C_EN;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2280      	movs	r2, #128	; 0x80
 800afd0:	731a      	strb	r2, [r3, #12]
    }
 800afd2:	bf00      	nop
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
	...

0800afe0 <_ZN4NLG54tickEv>:

    void tick() noexcept {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
         * NOTE: It would be nicer if the NLG5 class had a reference to the CAN struct and sent this stuff itself when it was ready. */

#if CAN_ENABLED
        static std::atomic<uint8_t> event_counter{ 0 };

        if (++mCounter >= kChargerEventTimeout) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3308      	adds	r3, #8
 800afec:	4618      	mov	r0, r3
 800afee:	f001 fe5f 	bl	800ccb0 <_ZNSt13__atomic_baseImEppEv>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b63      	cmp	r3, #99	; 0x63
 800aff6:	bf8c      	ite	hi
 800aff8:	2301      	movhi	r3, #1
 800affa:	2300      	movls	r3, #0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d06a      	beq.n	800b0d8 <_ZN4NLG54tickEv+0xf8>
            mCounter = 0;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3308      	adds	r3, #8
 800b006:	2100      	movs	r1, #0
 800b008:	4618      	mov	r0, r3
 800b00a:	f001 fe32 	bl	800cc72 <_ZNSt13__atomic_baseImEaSEm>

            /* Checks specified chargers MOB status */
            if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	7d1b      	ldrb	r3, [r3, #20]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b88      	cmp	r3, #136	; 0x88
 800b016:	d004      	beq.n	800b022 <_ZN4NLG54tickEv+0x42>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	7d1b      	ldrb	r3, [r3, #20]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b98      	cmp	r3, #152	; 0x98
 800b020:	d109      	bne.n	800b036 <_ZN4NLG54tickEv+0x56>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7e1b      	ldrb	r3, [r3, #24]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b88      	cmp	r3, #136	; 0x88
 800b02a:	d006      	beq.n	800b03a <_ZN4NLG54tickEv+0x5a>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	7e1b      	ldrb	r3, [r3, #24]
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b98      	cmp	r3, #152	; 0x98
 800b034:	d001      	beq.n	800b03a <_ZN4NLG54tickEv+0x5a>
 800b036:	2301      	movs	r3, #1
 800b038:	e000      	b.n	800b03c <_ZN4NLG54tickEv+0x5c>
 800b03a:	2300      	movs	r3, #0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d015      	beq.n	800b06c <_ZN4NLG54tickEv+0x8c>
                if (++event_counter >= 5) {
 800b040:	4827      	ldr	r0, [pc, #156]	; (800b0e0 <_ZN4NLG54tickEv+0x100>)
 800b042:	f001 fe7c 	bl	800cd3e <_ZNSt13__atomic_baseIhEppEv>
 800b046:	4603      	mov	r3, r0
 800b048:	2b04      	cmp	r3, #4
 800b04a:	bf8c      	ite	hi
 800b04c:	2301      	movhi	r3, #1
 800b04e:	2300      	movls	r3, #0
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d007      	beq.n	800b066 <_ZN4NLG54tickEv+0x86>
                    ctrl = C_C_EL;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2240      	movs	r2, #64	; 0x40
 800b05a:	731a      	strb	r2, [r3, #12]
                    event_counter = 0;
 800b05c:	2100      	movs	r1, #0
 800b05e:	4820      	ldr	r0, [pc, #128]	; (800b0e0 <_ZN4NLG54tickEv+0x100>)
 800b060:	f001 fe85 	bl	800cd6e <_ZNSt13__atomic_baseIhEaSEh>
 800b064:	e002      	b.n	800b06c <_ZN4NLG54tickEv+0x8c>
                } else {
                    ctrl = C_C_EN;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2280      	movs	r2, #128	; 0x80
 800b06a:	731a      	strb	r2, [r3, #12]
                }
            }

            TxHeader.StdId = NLGACtrl;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800b074:	601a      	str	r2, [r3, #0]
            TxHeader.DLC = 7;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	2207      	movs	r2, #7
 800b07c:	611a      	str	r2, [r3, #16]
            uint32_t mailbox{ 0 };
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
            uint8_t data[7] {
                ctrl,
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	7b1b      	ldrb	r3, [r3, #12]
 800b086:	b2db      	uxtb	r3, r3
                static_cast<uint8_t>(mc_limit),
                static_cast<uint8_t>(ov_limit >> 8),
                static_cast<uint8_t>(ov_limit),
                static_cast<uint8_t>(oc_limit >> 8),
                static_cast<uint8_t>(oc_limit)
            };
 800b088:	733b      	strb	r3, [r7, #12]
                static_cast<uint8_t>(mc_limit >> 8),
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	89db      	ldrh	r3, [r3, #14]
 800b08e:	121b      	asrs	r3, r3, #8
            };
 800b090:	b2db      	uxtb	r3, r3
 800b092:	737b      	strb	r3, [r7, #13]
                static_cast<uint8_t>(mc_limit),
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	89db      	ldrh	r3, [r3, #14]
            };
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	73bb      	strb	r3, [r7, #14]
                static_cast<uint8_t>(ov_limit >> 8),
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8a5b      	ldrh	r3, [r3, #18]
 800b0a0:	121b      	asrs	r3, r3, #8
            };
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	73fb      	strb	r3, [r7, #15]
                static_cast<uint8_t>(ov_limit),
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	8a5b      	ldrh	r3, [r3, #18]
            };
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	743b      	strb	r3, [r7, #16]
                static_cast<uint8_t>(oc_limit >> 8),
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	8a1b      	ldrh	r3, [r3, #16]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	121b      	asrs	r3, r3, #8
            };
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	747b      	strb	r3, [r7, #17]
                static_cast<uint8_t>(oc_limit)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	8a1b      	ldrh	r3, [r3, #16]
 800b0be:	b29b      	uxth	r3, r3
            };
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	74bb      	strb	r3, [r7, #18]

            HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &mailbox);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6859      	ldr	r1, [r3, #4]
 800b0cc:	f107 0314 	add.w	r3, r7, #20
 800b0d0:	f107 020c 	add.w	r2, r7, #12
 800b0d4:	f7f5 fed4 	bl	8000e80 <HAL_CAN_AddTxMessage>

        /* Put anything else you want to happen inside this class each systick.
         * Remember, anything changed inside this function MUST be either:
         * volatile, if it is being either read from or written to separately, or
         * atomic, if it is being read from and written to at the same time (such as with the increment operator). */
    }
 800b0d8:	bf00      	nop
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	200000e8 	.word	0x200000e8

0800b0e4 <_ZN7LTC681116setDischargeModeENS_13DischargeModeE>:
    void setDischargeMode(DischargeMode const discharge_mode) noexcept {
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
        this->discharge_mode = discharge_mode;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	78fa      	ldrb	r2, [r7, #3]
 800b0f4:	711a      	strb	r2, [r3, #4]
    };
 800b0f6:	bf00      	nop
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <_ZNK7LTC681111getCellDataEv>:
    [[nodiscard]] const auto& getCellData() const noexcept { return cell_data; };
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	330e      	adds	r3, #14
 800b10e:	4618      	mov	r0, r3
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <_ZNK7LTC681111getTempDataEv>:
    [[nodiscard]] const auto& getTempData() const noexcept { return temp_data; };
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	332e      	adds	r3, #46	; 0x2e
 800b126:	4618      	mov	r0, r3
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <_ZNK7LTC681111getSlaveCfgEv>:
    [[nodiscard]] const auto& getSlaveCfg() const noexcept { return slave_cfg_rx; };
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3306      	adds	r3, #6
 800b13e:	4618      	mov	r0, r3
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <_ZN7PWM_FanC1Eh>:
#include <algorithm>
class PWM_Fan {
public:
    enum Mode { Manual, Automatic };

    PWM_Fan(uint8_t const duty_cycle = kLowDutyCycle) {
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	701a      	strb	r2, [r3, #0]
        setDutyCycle(duty_cycle);
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f823 	bl	800b1ac <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <_ZSt5clampIhERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	781a      	ldrb	r2, [r3, #0]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	429a      	cmp	r2, r3
 800b186:	d309      	bcc.n	800b19c <_ZSt5clampIhERKT_S2_S2_S2_+0x2c>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	781a      	ldrb	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d201      	bcs.n	800b198 <_ZSt5clampIhERKT_S2_S2_S2_+0x28>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	e002      	b.n	800b19e <_ZSt5clampIhERKT_S2_S2_S2_+0x2e>
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	e000      	b.n	800b19e <_ZSt5clampIhERKT_S2_S2_S2_+0x2e>
 800b19c:	68bb      	ldr	r3, [r7, #8]
    }
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
	...

0800b1ac <_ZNK7PWM_Fan12setDutyCycleEh>:

    void setDutyCycle(uint8_t const duty_cycle) const noexcept {
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	70fb      	strb	r3, [r7, #3]
        /* PWM period is 20000 cycles, so the duty cycle is:
         * (duty_cycle / 100) * 20000 or, duty_cycle * 200
         * TODO: This is probably not working right! */
        TIM2->CCR4 = std::clamp(duty_cycle, kMinDutyCycle, kMaxDutyCycle) * 200;
 800b1b8:	1cfb      	adds	r3, r7, #3
 800b1ba:	4a09      	ldr	r2, [pc, #36]	; (800b1e0 <_ZNK7PWM_Fan12setDutyCycleEh+0x34>)
 800b1bc:	4909      	ldr	r1, [pc, #36]	; (800b1e4 <_ZNK7PWM_Fan12setDutyCycleEh+0x38>)
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff ffd6 	bl	800b170 <_ZSt5clampIhERKT_S2_S2_S2_>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	23c8      	movs	r3, #200	; 0xc8
 800b1cc:	fb03 f202 	mul.w	r2, r3, r2
 800b1d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800b1d6:	bf00      	nop
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800ee30 	.word	0x0800ee30
 800b1e4:	0800ee2f 	.word	0x0800ee2f

0800b1e8 <_ZN7PWM_Fan13calcDutyCycleEs>:

    [[nodiscard]] static uint8_t calcDutyCycle(int16_t const max_temp) noexcept {
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	80fb      	strh	r3, [r7, #6]
        if (max_temp > kHighTemp)
 800b1f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1f6:	f241 7270 	movw	r2, #6000	; 0x1770
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	dd01      	ble.n	800b202 <_ZN7PWM_Fan13calcDutyCycleEs+0x1a>
            return kMaxDutyCycle;
 800b1fe:	2364      	movs	r3, #100	; 0x64
 800b200:	e01a      	b.n	800b238 <_ZN7PWM_Fan13calcDutyCycleEs+0x50>
        else if (max_temp < kLowTemp)
 800b202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b206:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b20a:	da01      	bge.n	800b210 <_ZN7PWM_Fan13calcDutyCycleEs+0x28>
            return kLowDutyCycle;
 800b20c:	230a      	movs	r3, #10
 800b20e:	e013      	b.n	800b238 <_ZN7PWM_Fan13calcDutyCycleEs+0x50>
        else
            return kM * max_temp + kB;
 800b210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b21c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800b244 <_ZN7PWM_Fan13calcDutyCycleEs+0x5c>
 800b220:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b224:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800b248 <_ZN7PWM_Fan13calcDutyCycleEs+0x60>
 800b228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b230:	edc7 7a00 	vstr	s15, [r7]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	b2db      	uxtb	r3, r3

    }
 800b238:	4618      	mov	r0, r3
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	3cb851ec 	.word	0x3cb851ec
 800b248:	420c0000 	.word	0x420c0000

0800b24c <_ZN7PWM_Fan7setModeENS_4ModeE>:

    void setMode(Mode const mode) noexcept {
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
        this->mode = mode;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	78fa      	ldrb	r2, [r7, #3]
 800b25c:	701a      	strb	r2, [r3, #0]
    }
 800b25e:	bf00      	nop
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <_ZNK7PWM_Fan7getModeEv>:

    [[nodiscard]] Mode getMode() const noexcept {
 800b26a:	b480      	push	{r7}
 800b26c:	b083      	sub	sp, #12
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
        return mode;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b2db      	uxtb	r3, r3
    }
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <_ZN7RTClock11getInstanceEv>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
class RTClock {
public:
    [[nodiscard]] static RTClock& getInstance() noexcept {
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
        static RTClock rtc;
 800b288:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <_ZN7RTClock11getInstanceEv+0x24>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <_ZN7RTClock11getInstanceEv+0x1c>
 800b294:	4805      	ldr	r0, [pc, #20]	; (800b2ac <_ZN7RTClock11getInstanceEv+0x28>)
 800b296:	f000 f84b 	bl	800b330 <_ZN7RTClockC1Ev>
 800b29a:	4b03      	ldr	r3, [pc, #12]	; (800b2a8 <_ZN7RTClock11getInstanceEv+0x24>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
        return rtc;
 800b2a0:	4b02      	ldr	r3, [pc, #8]	; (800b2ac <_ZN7RTClock11getInstanceEv+0x28>)
    }
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	200000f4 	.word	0x200000f4
 800b2ac:	200000ec 	.word	0x200000ec

0800b2b0 <_ZN7RTClock4tickEv>:
    volatile uint8_t days{ 0 };
    volatile uint8_t hours{ 0 };
    volatile uint8_t minutes{ 0 };
    volatile uint8_t seconds{ 0 };

    void tick() noexcept {
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
        if (++seconds >= 60) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	795b      	ldrb	r3, [r3, #5]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	3301      	adds	r3, #1
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	7151      	strb	r1, [r2, #5]
 800b2c8:	2b3b      	cmp	r3, #59	; 0x3b
 800b2ca:	bf8c      	ite	hi
 800b2cc:	2301      	movhi	r3, #1
 800b2ce:	2300      	movls	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d026      	beq.n	800b324 <_ZN7RTClock4tickEv+0x74>
            seconds = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	715a      	strb	r2, [r3, #5]
            if (++minutes >= 60) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	791b      	ldrb	r3, [r3, #4]
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	7111      	strb	r1, [r2, #4]
 800b2ec:	2b3b      	cmp	r3, #59	; 0x3b
 800b2ee:	bf8c      	ite	hi
 800b2f0:	2301      	movhi	r3, #1
 800b2f2:	2300      	movls	r3, #0
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d014      	beq.n	800b324 <_ZN7RTClock4tickEv+0x74>
                minutes = 0;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	711a      	strb	r2, [r3, #4]
                if (++hours >= 24) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	78db      	ldrb	r3, [r3, #3]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	3301      	adds	r3, #1
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4619      	mov	r1, r3
 800b30e:	70d1      	strb	r1, [r2, #3]
 800b310:	2b17      	cmp	r3, #23
 800b312:	bf8c      	ite	hi
 800b314:	2301      	movhi	r3, #1
 800b316:	2300      	movls	r3, #0
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <_ZN7RTClock4tickEv+0x74>
                    hours = 0;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <_ZN7RTClockC1Ev>:

    RTClock(RTClock const&)       = delete;
    void operator=(RTClock const&)   = delete;

private:
    constexpr RTClock() {};
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	701a      	strb	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	705a      	strb	r2, [r3, #1]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	709a      	strb	r2, [r3, #2]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	70da      	strb	r2, [r3, #3]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	711a      	strb	r2, [r3, #4]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	715a      	strb	r2, [r3, #5]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <HAL_IncTick>:
uint32_t CANTxVolumeSize(uint32_t const size_of_log);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C" { void HAL_IncTick(void) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 800b370:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <HAL_IncTick+0x78>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	4b1c      	ldr	r3, [pc, #112]	; (800b3e8 <HAL_IncTick+0x7c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4413      	add	r3, r2
 800b37c:	4a1a      	ldr	r2, [pc, #104]	; (800b3e8 <HAL_IncTick+0x7c>)
 800b37e:	6013      	str	r3, [r2, #0]

    if (status != nullptr) {
 800b380:	4b1a      	ldr	r3, [pc, #104]	; (800b3ec <HAL_IncTick+0x80>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01c      	beq.n	800b3c2 <HAL_IncTick+0x56>
        status->tick();
 800b388:	4b18      	ldr	r3, [pc, #96]	; (800b3ec <HAL_IncTick+0x80>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fda5 	bl	800aedc <_ZN6Status4tickEv>

        if (nlg5 != nullptr && status->getOpMode() & Status::Charging)
 800b392:	4b17      	ldr	r3, [pc, #92]	; (800b3f0 <HAL_IncTick+0x84>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00b      	beq.n	800b3b2 <HAL_IncTick+0x46>
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <HAL_IncTick+0x80>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff fcab 	bl	800acfa <_ZNK6Status9getOpModeEv>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <HAL_IncTick+0x46>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e000      	b.n	800b3b4 <HAL_IncTick+0x48>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d004      	beq.n	800b3c2 <HAL_IncTick+0x56>
            nlg5->tick();
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <HAL_IncTick+0x84>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff fe0f 	bl	800afe0 <_ZN4NLG54tickEv>
    }

    if (ivt != nullptr)
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <HAL_IncTick+0x88>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <HAL_IncTick+0x68>
        ivt->tick();
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <HAL_IncTick+0x88>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff fb98 	bl	800ab04 <_ZN3IVT4tickEv>

    rtc.tick();
 800b3d4:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <HAL_IncTick+0x8c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff ff69 	bl	800b2b0 <_ZN7RTClock4tickEv>
}}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000004 	.word	0x20000004
 800b3e8:	20000298 	.word	0x20000298
 800b3ec:	20000268 	.word	0x20000268
 800b3f0:	20000264 	.word	0x20000264
 800b3f4:	20000270 	.word	0x20000270
 800b3f8:	20000278 	.word	0x20000278

0800b3fc <_ZNSt13__atomic_baseImEC2Em>:
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4618      	mov	r0, r3
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <_ZN3IVTC1Ev>:
class IVT {
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	330c      	adds	r3, #12
 800b426:	2100      	movs	r1, #0
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fa68 	bl	800a8fe <_ZNSt6atomicImEC1Em>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f805 	bl	800b452 <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE13_M_is_engagedEv>
 800b448:	4603      	mov	r3, r0
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7d1b      	ldrb	r3, [r3, #20]
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <_ZNKSt8optionalIN7LTC681110TempStatusEEcvbEv>:
      constexpr explicit operator bool() const noexcept
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b082      	sub	sp, #8
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f805 	bl	800b484 <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE13_M_is_engagedEv>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_engaged; }
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7c1b      	ldrb	r3, [r3, #16]
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE6_M_getEv>:
      _M_get() const noexcept
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	370c      	adds	r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>:
      operator->() const
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff ffed 	bl	800b49c <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE6_M_getEv>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 f805 	bl	800b4d4 <_ZSt11__addressofIKN7LTC681113VoltageStatusEEPT_RS3_>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZSt11__addressofIKN7LTC681113VoltageStatusEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE6_M_getEv>:
      _M_get() const noexcept
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_payload; }
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>:
      operator->() const
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff ffed 	bl	800b4ea <_ZNKSt14_Optional_baseIN7LTC681110TempStatusEE6_M_getEv>
 800b510:	4603      	mov	r3, r0
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f805 	bl	800b522 <_ZSt11__addressofIKN7LTC681110TempStatusEEPT_RS3_>
 800b518:	4603      	mov	r3, r0
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <_ZSt11__addressofIKN7LTC681110TempStatusEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEEdeEv>:
      operator*() const&
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
      { return this->_M_get(); }
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff ffaa 	bl	800b49c <_ZNKSt14_Optional_baseIN7LTC681113VoltageStatusEE6_M_getEv>
 800b548:	4603      	mov	r3, r0
 800b54a:	4618      	mov	r0, r3
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
	...

0800b554 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800b554:	b5b0      	push	{r4, r5, r7, lr}
 800b556:	ed2d 8b02 	vpush	{d8}
 800b55a:	b0be      	sub	sp, #248	; 0xf8
 800b55c:	af04      	add	r7, sp, #16


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800b55e:	f7f5 fa33 	bl	80009c8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800b562:	f000 fc4b 	bl	800bdfc <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800b566:	f000 fe67 	bl	800c238 <_ZL12MX_GPIO_Initv>
    MX_FATFS_Init();
 800b56a:	f7ff f95b 	bl	800a824 <MX_FATFS_Init>
    MX_CAN1_Init();
 800b56e:	f000 fce1 	bl	800bf34 <_ZL12MX_CAN1_Initv>
    MX_CAN2_Init();
 800b572:	f000 fd39 	bl	800bfe8 <_ZL12MX_CAN2_Initv>
    //MX_SDIO_SD_Init();
    MX_SPI1_Init();
 800b576:	f000 fd93 	bl	800c0a0 <_ZL12MX_SPI1_Initv>
    MX_TIM2_Init();
 800b57a:	f000 fdcd 	bl	800c118 <_ZL12MX_TIM2_Initv>

    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800b57e:	210c      	movs	r1, #12
 800b580:	489b      	ldr	r0, [pc, #620]	; (800b7f0 <main+0x29c>)
 800b582:	f7f9 fa87 	bl	8004a94 <HAL_TIM_PWM_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 800b586:	2113      	movs	r1, #19
 800b588:	489a      	ldr	r0, [pc, #616]	; (800b7f4 <main+0x2a0>)
 800b58a:	f7f5 fe66 	bl	800125a <HAL_CAN_ActivateNotification>

    nlg5 = new NLG5(hcan1, TxHeader);
 800b58e:	201c      	movs	r0, #28
 800b590:	f002 f917 	bl	800d7c2 <_Znwj>
 800b594:	4603      	mov	r3, r0
 800b596:	461c      	mov	r4, r3
 800b598:	f640 33ae 	movw	r3, #2990	; 0xbae
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	233c      	movs	r3, #60	; 0x3c
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	23a0      	movs	r3, #160	; 0xa0
 800b5a4:	4a94      	ldr	r2, [pc, #592]	; (800b7f8 <main+0x2a4>)
 800b5a6:	4993      	ldr	r1, [pc, #588]	; (800b7f4 <main+0x2a0>)
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff fcd1 	bl	800af50 <_ZN4NLG5C1ER19__CAN_HandleTypeDefR19CAN_TxHeaderTypeDefttt>
 800b5ae:	4b93      	ldr	r3, [pc, #588]	; (800b7fc <main+0x2a8>)
 800b5b0:	601c      	str	r4, [r3, #0]
    ivt = new IVT;
 800b5b2:	2010      	movs	r0, #16
 800b5b4:	f002 f905 	bl	800d7c2 <_Znwj>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461c      	mov	r4, r3
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f7ff ff2c 	bl	800b41a <_ZN3IVTC1Ev>
 800b5c2:	4b8f      	ldr	r3, [pc, #572]	; (800b800 <main+0x2ac>)
 800b5c4:	601c      	str	r4, [r3, #0]
    status = new Status(Status::Core | Status::Logging);
 800b5c6:	2060      	movs	r0, #96	; 0x60
 800b5c8:	f002 f8fb 	bl	800d7c2 <_Znwj>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	461c      	mov	r4, r3
 800b5d0:	2111      	movs	r1, #17
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7ff fb0b 	bl	800abee <_ZN6StatusC1Eh>
 800b5d8:	4b8a      	ldr	r3, [pc, #552]	; (800b804 <main+0x2b0>)
 800b5da:	601c      	str	r4, [r3, #0]
    ltc6811 = new LTC6811(hspi1);
 800b5dc:	205c      	movs	r0, #92	; 0x5c
 800b5de:	f002 f8f0 	bl	800d7c2 <_Znwj>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	461c      	mov	r4, r3
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	4984      	ldr	r1, [pc, #528]	; (800b808 <main+0x2b4>)
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f7fd fc7c 	bl	8008ef6 <_ZN7LTC6811C1ER19__SPI_HandleTypeDefNS_4ModeENS_3DCPENS_6CellChENS_5AuxChENS_5STSChE>
 800b5fe:	4b83      	ldr	r3, [pc, #524]	; (800b80c <main+0x2b8>)
 800b600:	601c      	str	r4, [r3, #0]
    pwm_fan = new PWM_Fan;
 800b602:	2001      	movs	r0, #1
 800b604:	f002 f8dd 	bl	800d7c2 <_Znwj>
 800b608:	4603      	mov	r3, r0
 800b60a:	461c      	mov	r4, r3
 800b60c:	210a      	movs	r1, #10
 800b60e:	4620      	mov	r0, r4
 800b610:	f7ff fd9b 	bl	800b14a <_ZN7PWM_FanC1Eh>
 800b614:	4b7e      	ldr	r3, [pc, #504]	; (800b810 <main+0x2bc>)
 800b616:	601c      	str	r4, [r3, #0]
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
#if BYPASS_INITIAL_CHECK
    status->setAIRState(Closed);
 800b618:	4b7a      	ldr	r3, [pc, #488]	; (800b804 <main+0x2b0>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2101      	movs	r1, #1
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff fba6 	bl	800ad70 <_ZN6Status11setAIRStateE5State>
#endif
    //HAL_Delay(5000);
#if BYPASS_INITIAL_CHECK
    status->setPrechargeState(Closed);
 800b624:	4b77      	ldr	r3, [pc, #476]	; (800b804 <main+0x2b0>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2101      	movs	r1, #1
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff fb74 	bl	800ad18 <_ZN6Status17setPrechargeStateE5State>

    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 800b630:	2101      	movs	r1, #1
 800b632:	4878      	ldr	r0, [pc, #480]	; (800b814 <main+0x2c0>)
 800b634:	f7f6 fb2b 	bl	8001c8e <HAL_GPIO_TogglePin>

        auto const op_mode = status->getOpMode();
 800b638:	4b72      	ldr	r3, [pc, #456]	; (800b804 <main+0x2b0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fb5c 	bl	800acfa <_ZNK6Status9getOpModeEv>
 800b642:	4603      	mov	r3, r0
 800b644:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

        /*  Core routine for monitoring voltage and temperature of the cells.  */
        if (op_mode & Status::Core) {
 800b648:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 8222 	beq.w	800ba9a <main+0x546>
            auto const voltage_status = ltc6811->checkVoltageStatus();
 800b656:	4b6d      	ldr	r3, [pc, #436]	; (800b80c <main+0x2b8>)
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b65e:	4611      	mov	r1, r2
 800b660:	4618      	mov	r0, r3
 800b662:	f7fd fe77 	bl	8009354 <_ZN7LTC681118checkVoltageStatusEv>
            auto const temp_status = ltc6811->checkTemperatureStatus();
 800b666:	4b69      	ldr	r3, [pc, #420]	; (800b80c <main+0x2b8>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b66e:	4611      	mov	r1, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7fd ff75 	bl	8009560 <_ZN7LTC681122checkTemperatureStatusEv>

            if (!status->isError(Status::PECError, !voltage_status) && !status->isError(Status::PECError, !temp_status)) {
 800b676:	4b63      	ldr	r3, [pc, #396]	; (800b804 <main+0x2b0>)
 800b678:	681c      	ldr	r4, [r3, #0]
 800b67a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff feda 	bl	800b438 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEcvbEv>
 800b684:	4603      	mov	r3, r0
 800b686:	f083 0301 	eor.w	r3, r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	461a      	mov	r2, r3
 800b68e:	2109      	movs	r1, #9
 800b690:	4620      	mov	r0, r4
 800b692:	f7ff fb98 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b696:	4603      	mov	r3, r0
 800b698:	f083 0301 	eor.w	r3, r3, #1
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d017      	beq.n	800b6d2 <main+0x17e>
 800b6a2:	4b58      	ldr	r3, [pc, #352]	; (800b804 <main+0x2b0>)
 800b6a4:	681c      	ldr	r4, [r3, #0]
 800b6a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fedd 	bl	800b46a <_ZNKSt8optionalIN7LTC681110TempStatusEEcvbEv>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f083 0301 	eor.w	r3, r3, #1
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	2109      	movs	r1, #9
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f7ff fb82 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f083 0301 	eor.w	r3, r3, #1
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <main+0x17e>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <main+0x180>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 81dc 	beq.w	800ba92 <main+0x53e>
                status->isError(Status::Limping, voltage_status->min < Status::kLimpMinVoltage);
 800b6da:	4b4a      	ldr	r3, [pc, #296]	; (800b804 <main+0x2b0>)
 800b6dc:	681c      	ldr	r4, [r3, #0]
 800b6de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fee5 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	889b      	ldrh	r3, [r3, #4]
 800b6ec:	f248 42cf 	movw	r2, #33999	; 0x84cf
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	bf94      	ite	ls
 800b6f4:	2301      	movls	r3, #1
 800b6f6:	2300      	movhi	r3, #0
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	2103      	movs	r1, #3
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7ff fb61 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
                nlg5->setChargeCurrent(voltage_status->max);
 800b704:	4b3d      	ldr	r3, [pc, #244]	; (800b7fc <main+0x2a8>)
 800b706:	681c      	ldr	r4, [r3, #0]
 800b708:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fed0 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800b712:	4603      	mov	r3, r0
 800b714:	899b      	ldrh	r3, [r3, #12]
 800b716:	4619      	mov	r1, r3
 800b718:	4620      	mov	r0, r4
 800b71a:	f7ff fc43 	bl	800afa4 <_ZN4NLG516setChargeCurrentEt>

                if (pwm_fan->getMode() == PWM_Fan::Automatic)
 800b71e:	4b3c      	ldr	r3, [pc, #240]	; (800b810 <main+0x2bc>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff fda1 	bl	800b26a <_ZNK7PWM_Fan7getModeEv>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	bf0c      	ite	eq
 800b72e:	2301      	moveq	r3, #1
 800b730:	2300      	movne	r3, #0
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d011      	beq.n	800b75c <main+0x208>
                    pwm_fan->setDutyCycle(PWM_Fan::calcDutyCycle(temp_status->max));
 800b738:	4b35      	ldr	r3, [pc, #212]	; (800b810 <main+0x2bc>)
 800b73a:	681c      	ldr	r4, [r3, #0]
 800b73c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fedd 	bl	800b500 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 800b746:	4603      	mov	r3, r0
 800b748:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fd4b 	bl	800b1e8 <_ZN7PWM_Fan13calcDutyCycleEs>
 800b752:	4603      	mov	r3, r0
 800b754:	4619      	mov	r1, r3
 800b756:	4620      	mov	r0, r4
 800b758:	f7ff fd28 	bl	800b1ac <_ZNK7PWM_Fan12setDutyCycleEh>


                if (op_mode & Status::Balance)
 800b75c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800b760:	f003 0302 	and.w	r3, r3, #2
 800b764:	2b00      	cmp	r3, #0
 800b766:	d015      	beq.n	800b794 <main+0x240>
                    ltc6811->writeConfigRegisterGroup(ltc6811->makeDischargeConfig(*voltage_status));
 800b768:	4b28      	ldr	r3, [pc, #160]	; (800b80c <main+0x2b8>)
 800b76a:	681c      	ldr	r4, [r3, #0]
 800b76c:	4b27      	ldr	r3, [pc, #156]	; (800b80c <main+0x2b8>)
 800b76e:	681d      	ldr	r5, [r3, #0]
 800b770:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fedf 	bl	800b538 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEEdeEv>
 800b77a:	4602      	mov	r2, r0
 800b77c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b780:	4629      	mov	r1, r5
 800b782:	4618      	mov	r0, r3
 800b784:	f7fd ff82 	bl	800968c <_ZNK7LTC681119makeDischargeConfigERKNS_13VoltageStatusE>
 800b788:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b78c:	4619      	mov	r1, r3
 800b78e:	4620      	mov	r0, r4
 800b790:	f7fd fdbc 	bl	800930c <_ZN7LTC681124writeConfigRegisterGroupERKSt5arrayINS_8RegisterIhEELj1EE>

#if CHECK_IVT
                if (!ivt->isLost()) { // This, if anything, will be the cause of error false positives
 800b794:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <main+0x2ac>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff f9c0 	bl	800ab1e <_ZNK3IVT6isLostEv>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f083 0301 	eor.w	r3, r3, #1
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d037      	beq.n	800b81a <main+0x2c6>
                    switch (ivt->comparePrecharge(voltage_status->sum)) {
 800b7aa:	4b15      	ldr	r3, [pc, #84]	; (800b800 <main+0x2ac>)
 800b7ac:	681c      	ldr	r4, [r3, #0]
 800b7ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff fe7d 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f7ff f8ac 	bl	800a91c <_ZNK3IVT16comparePrechargeEm>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d00b      	beq.n	800b7e2 <main+0x28e>
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d302      	bcc.n	800b7d4 <main+0x280>
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d022      	beq.n	800b818 <main+0x2c4>
                    case IVT::Hysteresis:
                        // Do nothing
                        break;

                    default:
                        break;
 800b7d2:	e022      	b.n	800b81a <main+0x2c6>
                        status->setPrechargeState(Closed);
 800b7d4:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <main+0x2b0>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2101      	movs	r1, #1
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff fa9c 	bl	800ad18 <_ZN6Status17setPrechargeStateE5State>
                        break;
 800b7e0:	e01b      	b.n	800b81a <main+0x2c6>
                        status->setPrechargeState(Open);
 800b7e2:	4b08      	ldr	r3, [pc, #32]	; (800b804 <main+0x2b0>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fa95 	bl	800ad18 <_ZN6Status17setPrechargeStateE5State>
                        break;
 800b7ee:	e014      	b.n	800b81a <main+0x2c6>
 800b7f0:	20000224 	.word	0x20000224
 800b7f4:	200000f8 	.word	0x200000f8
 800b7f8:	20000008 	.word	0x20000008
 800b7fc:	20000264 	.word	0x20000264
 800b800:	20000270 	.word	0x20000270
 800b804:	20000268 	.word	0x20000268
 800b808:	200001cc 	.word	0x200001cc
 800b80c:	2000026c 	.word	0x2000026c
 800b810:	20000274 	.word	0x20000274
 800b814:	40020800 	.word	0x40020800
                        break;
 800b818:	bf00      	nop
#endif

                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all isError() calls to happen, so do not replace & with &&.
#if CHECK_IVT
#if IVT_TIMEOUT
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 800b81a:	4bbe      	ldr	r3, [pc, #760]	; (800bb14 <main+0x5c0>)
 800b81c:	681c      	ldr	r4, [r3, #0]
 800b81e:	4bbe      	ldr	r3, [pc, #760]	; (800bb18 <main+0x5c4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff f97b 	bl	800ab1e <_ZNK3IVT6isLostEv>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	210b      	movs	r1, #11
 800b82e:	4620      	mov	r0, r4
 800b830:	f7ff fac9 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b834:	4603      	mov	r3, r0
 800b836:	f083 0301 	eor.w	r3, r3, #1
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	461c      	mov	r4, r3
#endif
#if TEST_OVERPOWER
                        !status->isError(Status::OverPower, voltage_status->sum * ivt->getCurrent() > Status::kMaxPower) &
 800b83e:	4bb5      	ldr	r3, [pc, #724]	; (800bb14 <main+0x5c0>)
 800b840:	681d      	ldr	r5, [r3, #0]
 800b842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff fe33 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800b84c:	4603      	mov	r3, r0
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	ee07 3a90 	vmov	s15, r3
 800b854:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800b858:	4baf      	ldr	r3, [pc, #700]	; (800bb18 <main+0x5c4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff f8fe 	bl	800aa5e <_ZNK3IVT10getCurrentEv>
 800b862:	eef0 7a40 	vmov.f32	s15, s0
 800b866:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b86a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800bb1c <main+0x5c8>
 800b86e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b876:	bfcc      	ite	gt
 800b878:	2301      	movgt	r3, #1
 800b87a:	2300      	movle	r3, #0
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	2107      	movs	r1, #7
 800b882:	4628      	mov	r0, r5
 800b884:	f7ff fa9f 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b888:	4603      	mov	r3, r0
 800b88a:	f083 0301 	eor.w	r3, r3, #1
 800b88e:	b2db      	uxtb	r3, r3
                        !status->isError(Status::IVTLost, ivt->isLost()) &
 800b890:	401c      	ands	r4, r3
#endif
#if TEST_OVERCURRENT
                        !status->isError(Status::OverCurrent, ivt->getCurrent() > Status::kMaxCurrent) &
 800b892:	4ba0      	ldr	r3, [pc, #640]	; (800bb14 <main+0x5c0>)
 800b894:	681d      	ldr	r5, [r3, #0]
 800b896:	4ba0      	ldr	r3, [pc, #640]	; (800bb18 <main+0x5c4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff f8df 	bl	800aa5e <_ZNK3IVT10getCurrentEv>
 800b8a0:	eeb0 7a40 	vmov.f32	s14, s0
 800b8a4:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800bb20 <main+0x5cc>
 800b8a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b0:	bfcc      	ite	gt
 800b8b2:	2301      	movgt	r3, #1
 800b8b4:	2300      	movle	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	2106      	movs	r1, #6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f7ff fa82 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f083 0301 	eor.w	r3, r3, #1
 800b8c8:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverPower, voltage_status->sum * ivt->getCurrent() > Status::kMaxPower) &
 800b8ca:	401c      	ands	r4, r3
#endif
#if TEST_ACCU_UNDERVOLTAGE
                        !status->isError(Status::AccuUnderVoltage, ivt->getVoltage2() < Status::kAccuMinVoltage) &
 800b8cc:	4b91      	ldr	r3, [pc, #580]	; (800bb14 <main+0x5c0>)
 800b8ce:	681d      	ldr	r5, [r3, #0]
 800b8d0:	4b91      	ldr	r3, [pc, #580]	; (800bb18 <main+0x5c4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff f906 	bl	800aae6 <_ZNK3IVT11getVoltage2Ev>
 800b8da:	eeb0 7a40 	vmov.f32	s14, s0
 800b8de:	eddf 7a91 	vldr	s15, [pc, #580]	; 800bb24 <main+0x5d0>
 800b8e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ea:	bf4c      	ite	mi
 800b8ec:	2301      	movmi	r3, #1
 800b8ee:	2300      	movpl	r3, #0
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	210a      	movs	r1, #10
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f7ff fa65 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f083 0301 	eor.w	r3, r3, #1
 800b902:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverCurrent, ivt->getCurrent() > Status::kMaxCurrent) &
 800b904:	401c      	ands	r4, r3
#endif
#endif
#if TEST_UNDERVOLTAGE
                        !status->isError(Status::UnderVoltage, voltage_status->min < Status::kMinVoltage) &
 800b906:	4b83      	ldr	r3, [pc, #524]	; (800bb14 <main+0x5c0>)
 800b908:	681d      	ldr	r5, [r3, #0]
 800b90a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff fdcf 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800b914:	4603      	mov	r3, r0
 800b916:	889b      	ldrh	r3, [r3, #4]
 800b918:	f647 1217 	movw	r2, #30999	; 0x7917
 800b91c:	4293      	cmp	r3, r2
 800b91e:	bf94      	ite	ls
 800b920:	2301      	movls	r3, #1
 800b922:	2300      	movhi	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	2102      	movs	r1, #2
 800b92a:	4628      	mov	r0, r5
 800b92c:	f7ff fa4b 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b930:	4603      	mov	r3, r0
 800b932:	f083 0301 	eor.w	r3, r3, #1
 800b936:	b2db      	uxtb	r3, r3
                        !status->isError(Status::AccuUnderVoltage, ivt->getVoltage2() < Status::kAccuMinVoltage) &
 800b938:	401c      	ands	r4, r3
#endif
#if TEST_OVERVOLTAGE
                        !status->isError(Status::OverVoltage, voltage_status->max > Status::kMaxVoltage) &
 800b93a:	4b76      	ldr	r3, [pc, #472]	; (800bb14 <main+0x5c0>)
 800b93c:	681d      	ldr	r5, [r3, #0]
 800b93e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fdb5 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800b948:	4603      	mov	r3, r0
 800b94a:	899b      	ldrh	r3, [r3, #12]
 800b94c:	f24a 4210 	movw	r2, #42000	; 0xa410
 800b950:	4293      	cmp	r3, r2
 800b952:	bf8c      	ite	hi
 800b954:	2301      	movhi	r3, #1
 800b956:	2300      	movls	r3, #0
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	2101      	movs	r1, #1
 800b95e:	4628      	mov	r0, r5
 800b960:	f7ff fa31 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b964:	4603      	mov	r3, r0
 800b966:	f083 0301 	eor.w	r3, r3, #1
 800b96a:	b2db      	uxtb	r3, r3
                        !status->isError(Status::UnderVoltage, voltage_status->min < Status::kMinVoltage) &
 800b96c:	401c      	ands	r4, r3
#endif
#if TEST_UNDERTEMPERATURE
                        !status->isError(Status::UnderTemp, temp_status->min < Status::kMinTemp) &
 800b96e:	4b69      	ldr	r3, [pc, #420]	; (800bb14 <main+0x5c0>)
 800b970:	681d      	ldr	r5, [r3, #0]
 800b972:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff fdc2 	bl	800b500 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b982:	4a69      	ldr	r2, [pc, #420]	; (800bb28 <main+0x5d4>)
 800b984:	4293      	cmp	r3, r2
 800b986:	bfb4      	ite	lt
 800b988:	2301      	movlt	r3, #1
 800b98a:	2300      	movge	r3, #0
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	461a      	mov	r2, r3
 800b990:	2105      	movs	r1, #5
 800b992:	4628      	mov	r0, r5
 800b994:	f7ff fa17 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b998:	4603      	mov	r3, r0
 800b99a:	f083 0301 	eor.w	r3, r3, #1
 800b99e:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverVoltage, voltage_status->max > Status::kMaxVoltage) &
 800b9a0:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE
                        !status->isError(Status::OverTemp, temp_status->max > Status::kMaxTemp) &
 800b9a2:	4b5c      	ldr	r3, [pc, #368]	; (800bb14 <main+0x5c0>)
 800b9a4:	681d      	ldr	r5, [r3, #0]
 800b9a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff fda8 	bl	800b500 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9b6:	f241 720c 	movw	r2, #5900	; 0x170c
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	bfcc      	ite	gt
 800b9be:	2301      	movgt	r3, #1
 800b9c0:	2300      	movle	r3, #0
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	2104      	movs	r1, #4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f7ff f9fc 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f083 0301 	eor.w	r3, r3, #1
 800b9d4:	b2db      	uxtb	r3, r3
                        !status->isError(Status::UnderTemp, temp_status->min < Status::kMinTemp) &
 800b9d6:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE_CHARGING
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status->max > Status::kMaxChargeTemp)) &
 800b9d8:	4b4e      	ldr	r3, [pc, #312]	; (800bb14 <main+0x5c0>)
 800b9da:	681d      	ldr	r5, [r3, #0]
 800b9dc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00d      	beq.n	800ba04 <main+0x4b0>
 800b9e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff fd87 	bl	800b500 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9f8:	f241 1230 	movw	r2, #4400	; 0x1130
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	dd01      	ble.n	800ba04 <main+0x4b0>
 800ba00:	2301      	movs	r3, #1
 800ba02:	e000      	b.n	800ba06 <main+0x4b2>
 800ba04:	2300      	movs	r3, #0
 800ba06:	461a      	mov	r2, r3
 800ba08:	210c      	movs	r1, #12
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f7ff f9db 	bl	800adc6 <_ZN6Status7isErrorENS_5ErrorEb>
 800ba10:	4603      	mov	r3, r0
 800ba12:	f083 0301 	eor.w	r3, r3, #1
 800ba16:	b2db      	uxtb	r3, r3
                        !status->isError(Status::OverTemp, temp_status->max > Status::kMaxTemp) &
 800ba18:	4023      	ands	r3, r4
                        !status->isError(Status::OverTempCharging, (op_mode & Status::Charging) && (temp_status->max > Status::kMaxChargeTemp)) &
 800ba1a:	f003 0301 	and.w	r3, r3, #1
#endif
                        true
                ) {
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bf14      	ite	ne
 800ba22:	2301      	movne	r3, #1
 800ba24:	2300      	moveq	r3, #0
 800ba26:	b2db      	uxtb	r3, r3
                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all isError() calls to happen, so do not replace & with &&.
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d005      	beq.n	800ba38 <main+0x4e4>
                    status->setAIRState(Closed);
 800ba2c:	4b39      	ldr	r3, [pc, #228]	; (800bb14 <main+0x5c0>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2101      	movs	r1, #1
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff f99c 	bl	800ad70 <_ZN6Status11setAIRStateE5State>
#if !CHECK_IVT
                    status->setPrechargeState(Closed);
#endif
                }
#if CAN_ENABLED
                CANTxData(voltage_status->min, voltage_status->max, temp_status->max);
 800ba38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fd38 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800ba42:	4603      	mov	r3, r0
 800ba44:	889c      	ldrh	r4, [r3, #4]
 800ba46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff fd31 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800ba50:	4603      	mov	r3, r0
 800ba52:	899d      	ldrh	r5, [r3, #12]
 800ba54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fd51 	bl	800b500 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ba64:	461a      	mov	r2, r3
 800ba66:	4629      	mov	r1, r5
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f000 fea9 	bl	800c7c0 <_Z9CANTxDatatts>
                CANTxVoltageLimpTotal(voltage_status->sum, status->isErrorOverLimit(Status::Limping));
 800ba6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fd1d 	bl	800b4b2 <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	681c      	ldr	r4, [r3, #0]
 800ba7c:	4b25      	ldr	r3, [pc, #148]	; (800bb14 <main+0x5c0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2103      	movs	r1, #3
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff f9f5 	bl	800ae72 <_ZNK6Status16isErrorOverLimitENS_5ErrorE>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f001 f803 	bl	800ca98 <_Z21CANTxVoltageLimpTotalmb>
#endif
            }
#if CAN_ENABLED
            CANTxStatus();
 800ba92:	f000 fde7 	bl	800c664 <_Z11CANTxStatusv>
            CANTxPECError();
 800ba96:	f000 fe3d 	bl	800c714 <_Z13CANTxPECErrorv>
        }

#if CAN_DEBUG
        /*  Functions for debugging and untested code.  */
        if (op_mode & Status::Debug) {
 800ba9a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ba9e:	f003 0308 	and.w	r3, r3, #8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d01a      	beq.n	800badc <main+0x588>
            CANTxVoltage(ltc6811->getCellData());
 800baa6:	4b21      	ldr	r3, [pc, #132]	; (800bb2c <main+0x5d8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fb29 	bl	800b102 <_ZNK7LTC681111getCellDataEv>
 800bab0:	4603      	mov	r3, r0
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 feda 	bl	800c86c <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE>
            CANTxTemperature(ltc6811->getTempData());
 800bab8:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <main+0x5d8>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff fb2c 	bl	800b11a <_ZNK7LTC681111getTempDataEv>
 800bac2:	4603      	mov	r3, r0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f000 ff5b 	bl	800c980 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE>
            CANTxDCCfg(ltc6811->getSlaveCfg());
 800baca:	4b18      	ldr	r3, [pc, #96]	; (800bb2c <main+0x5d8>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff fb2f 	bl	800b132 <_ZNK7LTC681111getSlaveCfgEv>
 800bad4:	4603      	mov	r3, r0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 f81c 	bl	800cb14 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE>
        }
#endif
#endif

        /*  Log data to SD card.  */
        if (op_mode & Status::Logging) {
 800badc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800bae0:	f003 0310 	and.w	r3, r3, #16
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f43f ada3 	beq.w	800b630 <main+0xdc>
            if (retSD == FR_OK) {
 800baea:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <main+0x5dc>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f47f ad9e 	bne.w	800b630 <main+0xdc>
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 800baf4:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <main+0x5e0>)
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 800bafc:	d21e      	bcs.n	800bb3c <main+0x5e8>
 800bafe:	2232      	movs	r2, #50	; 0x32
 800bb00:	490d      	ldr	r1, [pc, #52]	; (800bb38 <main+0x5e4>)
 800bb02:	480c      	ldr	r0, [pc, #48]	; (800bb34 <main+0x5e0>)
 800bb04:	f7fc f8c8 	bl	8007c98 <f_open>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d116      	bne.n	800bb3c <main+0x5e8>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e015      	b.n	800bb3e <main+0x5ea>
 800bb12:	bf00      	nop
 800bb14:	20000268 	.word	0x20000268
 800bb18:	20000270 	.word	0x20000270
 800bb1c:	4af42400 	.word	0x4af42400
 800bb20:	43340000 	.word	0x43340000
 800bb24:	43f50000 	.word	0x43f50000
 800bb28:	fffffa24 	.word	0xfffffa24
 800bb2c:	2000026c 	.word	0x2000026c
 800bb30:	2000029c 	.word	0x2000029c
 800bb34:	200002a4 	.word	0x200002a4
 800bb38:	0800eae4 	.word	0x0800eae4
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f43f ad76 	beq.w	800b630 <main+0xdc>
                    HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800bb44:	2104      	movs	r1, #4
 800bb46:	48a7      	ldr	r0, [pc, #668]	; (800bde4 <main+0x890>)
 800bb48:	f7f6 f8a1 	bl	8001c8e <HAL_GPIO_TogglePin>

                    /* NOTE: f_printf might be pretty slow compared to f_write. */
                    f_printf(&SDFile, "%u,", status->getUptime());
 800bb4c:	4ba6      	ldr	r3, [pc, #664]	; (800bde8 <main+0x894>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff f9af 	bl	800aeb4 <_ZNK6Status9getUptimeEv>
 800bb56:	4603      	mov	r3, r0
 800bb58:	461a      	mov	r2, r3
 800bb5a:	49a4      	ldr	r1, [pc, #656]	; (800bdec <main+0x898>)
 800bb5c:	48a4      	ldr	r0, [pc, #656]	; (800bdf0 <main+0x89c>)
 800bb5e:	f7fc fed9 	bl	8008914 <f_printf>
                    /* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
                    // TODO Not implemented.
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb62:	4ba1      	ldr	r3, [pc, #644]	; (800bde8 <main+0x894>)
 800bb64:	681b      	ldr	r3, [r3, #0]
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 800bb66:	695c      	ldr	r4, [r3, #20]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb68:	4b9f      	ldr	r3, [pc, #636]	; (800bde8 <main+0x894>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 800bb6c:	691d      	ldr	r5, [r3, #16]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb6e:	4b9e      	ldr	r3, [pc, #632]	; (800bde8 <main+0x894>)
 800bb70:	681b      	ldr	r3, [r3, #0]
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 800bb72:	68db      	ldr	r3, [r3, #12]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb74:	4a9c      	ldr	r2, [pc, #624]	; (800bde8 <main+0x894>)
 800bb76:	6812      	ldr	r2, [r2, #0]
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 800bb78:	6892      	ldr	r2, [r2, #8]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb7a:	499b      	ldr	r1, [pc, #620]	; (800bde8 <main+0x894>)
 800bb7c:	6809      	ldr	r1, [r1, #0]
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 800bb7e:	6849      	ldr	r1, [r1, #4]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb80:	4899      	ldr	r0, [pc, #612]	; (800bde8 <main+0x894>)
 800bb82:	6800      	ldr	r0, [r0, #0]
                            status->rtc.tm_year, status->rtc.tm_mon, status->rtc.tm_mday, status->rtc.tm_hour, status->rtc.tm_min, status->rtc.tm_sec);
 800bb84:	6800      	ldr	r0, [r0, #0]
                    f_printf(&SDFile, "%02u-%02u-%02uT%02u:%02u:%02u,",
 800bb86:	9003      	str	r0, [sp, #12]
 800bb88:	9102      	str	r1, [sp, #8]
 800bb8a:	9201      	str	r2, [sp, #4]
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	462b      	mov	r3, r5
 800bb90:	4622      	mov	r2, r4
 800bb92:	4998      	ldr	r1, [pc, #608]	; (800bdf4 <main+0x8a0>)
 800bb94:	4896      	ldr	r0, [pc, #600]	; (800bdf0 <main+0x89c>)
 800bb96:	f7fc febd 	bl	8008914 <f_printf>

                    UINT number_written{ 0 };
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	64bb      	str	r3, [r7, #72]	; 0x48
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 800bb9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	605a      	str	r2, [r3, #4]
 800bba8:	609a      	str	r2, [r3, #8]
 800bbaa:	60da      	str	r2, [r3, #12]
 800bbac:	611a      	str	r2, [r3, #16]
 800bbae:	615a      	str	r2, [r3, #20]
                    size_t position{ 0 };
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

                    auto const cell_data = ltc6811->getCellData();
 800bbb6:	4b90      	ldr	r3, [pc, #576]	; (800bdf8 <main+0x8a4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff faa1 	bl	800b102 <_ZNK7LTC681111getCellDataEv>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	463c      	mov	r4, r7
 800bbc4:	461d      	mov	r5, r3
 800bbc6:	6828      	ldr	r0, [r5, #0]
 800bbc8:	6869      	ldr	r1, [r5, #4]
 800bbca:	68aa      	ldr	r2, [r5, #8]
 800bbcc:	68eb      	ldr	r3, [r5, #12]
 800bbce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbd0:	6928      	ldr	r0, [r5, #16]
 800bbd2:	6969      	ldr	r1, [r5, #20]
 800bbd4:	69aa      	ldr	r2, [r5, #24]
 800bbd6:	69eb      	ldr	r3, [r5, #28]
 800bbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    for (auto const& register_group : cell_data) // 4 voltage register groups
 800bbda:	463b      	mov	r3, r7
 800bbdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbe0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bbe4:	f7fe faa8 	bl	800a138 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 800bbe8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800bbec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800bbf0:	f7fe faae 	bl	800a150 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 800bbf4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800bbf8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bbfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d058      	beq.n	800bcb6 <main+0x762>
 800bc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800bc0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bc10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc14:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800bc18:	f7fe fa02 	bl	800a020 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 800bc1c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bc20:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800bc24:	f7fe fa08 	bl	800a038 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 800bc28:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 800bc2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d038      	beq.n	800bcaa <main+0x756>
 800bc38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                            for (auto const voltage : IC.data) // 3 voltages in IC.data
 800bc40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bc44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc48:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc4c:	f7fe fa01 	bl	800a052 <_ZNKSt5arrayItLj3EE5beginEv>
 800bc50:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800bc54:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800bc58:	f7fe fa07 	bl	800a06a <_ZNKSt5arrayItLj3EE3endEv>
 800bc5c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800bc60:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bc64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d018      	beq.n	800bc9e <main+0x74a>
 800bc6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
                                buffer[position++] = voltage;
 800bc76:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 800bc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800bc8a:	4413      	add	r3, r2
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	f823 2cb8 	strh.w	r2, [r3, #-184]
                            for (auto const voltage : IC.data) // 3 voltages in IC.data
 800bc92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc96:	3302      	adds	r3, #2
 800bc98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc9c:	e7e0      	b.n	800bc60 <main+0x70c>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800bc9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca2:	3308      	adds	r3, #8
 800bca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bca8:	e7c0      	b.n	800bc2c <main+0x6d8>
                    for (auto const& register_group : cell_data) // 4 voltage register groups
 800bcaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcae:	3308      	adds	r3, #8
 800bcb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcb4:	e7a0      	b.n	800bbf8 <main+0x6a4>
                    f_write(&SDFile, buffer, sizeof(buffer), &number_written);
 800bcb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bcba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800bcbe:	2218      	movs	r2, #24
 800bcc0:	484b      	ldr	r0, [pc, #300]	; (800bdf0 <main+0x89c>)
 800bcc2:	f7fc f9a7 	bl	8008014 <f_write>

                    position = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

                    auto const temp_data = ltc6811->getTempData();
 800bccc:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <main+0x8a4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff fa22 	bl	800b11a <_ZNK7LTC681111getTempDataEv>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f107 0420 	add.w	r4, r7, #32
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	6859      	ldr	r1, [r3, #4]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    for (auto const& register_group : temp_data) // 2 temperature register groups
 800bce6:	f107 0320 	add.w	r3, r7, #32
 800bcea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800bcf2:	f001 f85c 	bl	800cdae <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>
 800bcf6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 800bcfa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800bcfe:	f001 f862 	bl	800cdc6 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>
 800bd02:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800bd06:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bd0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d058      	beq.n	800bdc4 <main+0x870>
 800bd12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800bd1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd22:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800bd26:	f001 f85b 	bl	800cde0 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 800bd2a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800bd2e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800bd32:	f001 f861 	bl	800cdf8 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 800bd36:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800bd3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d038      	beq.n	800bdb8 <main+0x864>
 800bd46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bd4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            for (auto const temperature : IC.data) // 3 temperatures in IC.data
 800bd4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd56:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800bd5a:	f001 f85a 	bl	800ce12 <_ZNKSt5arrayIsLj3EE5beginEv>
 800bd5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800bd62:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800bd66:	f001 f860 	bl	800ce2a <_ZNKSt5arrayIsLj3EE3endEv>
 800bd6a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800bd6e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bd72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d018      	beq.n	800bdac <main+0x858>
 800bd7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                                buffer[position++] = temperature;
 800bd84:	f8b7 1082 	ldrh.w	r1, [r7, #130]	; 0x82
 800bd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800bd92:	005b      	lsls	r3, r3, #1
 800bd94:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800bd98:	4413      	add	r3, r2
 800bd9a:	460a      	mov	r2, r1
 800bd9c:	f823 2cb8 	strh.w	r2, [r3, #-184]
                            for (auto const temperature : IC.data) // 3 temperatures in IC.data
 800bda0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bda4:	3302      	adds	r3, #2
 800bda6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bdaa:	e7e0      	b.n	800bd6e <main+0x81a>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800bdac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdb6:	e7c0      	b.n	800bd3a <main+0x7e6>
                    for (auto const& register_group : temp_data) // 2 temperature register groups
 800bdb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bdc2:	e7a0      	b.n	800bd06 <main+0x7b2>
                    f_write(&SDFile, buffer, sizeof(buffer) / 2, &number_written);
 800bdc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bdc8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800bdcc:	220c      	movs	r2, #12
 800bdce:	4808      	ldr	r0, [pc, #32]	; (800bdf0 <main+0x89c>)
 800bdd0:	f7fc f920 	bl	8008014 <f_write>

                    f_sync(&SDFile);
 800bdd4:	4806      	ldr	r0, [pc, #24]	; (800bdf0 <main+0x89c>)
 800bdd6:	f7fc fa92 	bl	80082fe <f_sync>
                    f_close(&SDFile);
 800bdda:	4805      	ldr	r0, [pc, #20]	; (800bdf0 <main+0x89c>)
 800bddc:	f7fc fb0d 	bl	80083fa <f_close>
                }
            }
        }
    }
 800bde0:	e426      	b.n	800b630 <main+0xdc>
 800bde2:	bf00      	nop
 800bde4:	40020800 	.word	0x40020800
 800bde8:	20000268 	.word	0x20000268
 800bdec:	0800eaf4 	.word	0x0800eaf4
 800bdf0:	200002a4 	.word	0x200002a4
 800bdf4:	0800eaf8 	.word	0x0800eaf8
 800bdf8:	2000026c 	.word	0x2000026c

0800bdfc <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b0ac      	sub	sp, #176	; 0xb0
 800be00:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800be02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800be06:	2234      	movs	r2, #52	; 0x34
 800be08:	2100      	movs	r1, #0
 800be0a:	4618      	mov	r0, r3
 800be0c:	f001 feca 	bl	800dba4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800be10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	609a      	str	r2, [r3, #8]
 800be1c:	60da      	str	r2, [r3, #12]
 800be1e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800be20:	f107 030c 	add.w	r3, r7, #12
 800be24:	225c      	movs	r2, #92	; 0x5c
 800be26:	2100      	movs	r1, #0
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 febb 	bl	800dba4 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800be2e:	2300      	movs	r3, #0
 800be30:	60bb      	str	r3, [r7, #8]
 800be32:	4b3e      	ldr	r3, [pc, #248]	; (800bf2c <_Z18SystemClock_Configv+0x130>)
 800be34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be36:	4a3d      	ldr	r2, [pc, #244]	; (800bf2c <_Z18SystemClock_Configv+0x130>)
 800be38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be3c:	6413      	str	r3, [r2, #64]	; 0x40
 800be3e:	4b3b      	ldr	r3, [pc, #236]	; (800bf2c <_Z18SystemClock_Configv+0x130>)
 800be40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be46:	60bb      	str	r3, [r7, #8]
 800be48:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800be4a:	2300      	movs	r3, #0
 800be4c:	607b      	str	r3, [r7, #4]
 800be4e:	4b38      	ldr	r3, [pc, #224]	; (800bf30 <_Z18SystemClock_Configv+0x134>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800be56:	4a36      	ldr	r2, [pc, #216]	; (800bf30 <_Z18SystemClock_Configv+0x134>)
 800be58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be5c:	6013      	str	r3, [r2, #0]
 800be5e:	4b34      	ldr	r3, [pc, #208]	; (800bf30 <_Z18SystemClock_Configv+0x134>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be66:	607b      	str	r3, [r7, #4]
 800be68:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800be6a:	2302      	movs	r3, #2
 800be6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800be6e:	2301      	movs	r3, #1
 800be70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800be74:	2310      	movs	r3, #16
 800be76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800be7a:	2302      	movs	r3, #2
 800be7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800be80:	2300      	movs	r3, #0
 800be82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 8;
 800be86:	2308      	movs	r3, #8
 800be88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 50;
 800be8c:	2332      	movs	r3, #50	; 0x32
 800be8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800be92:	2302      	movs	r3, #2
 800be94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800be98:	2303      	movs	r3, #3
 800be9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = 2;
 800be9e:	2302      	movs	r3, #2
 800bea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bea4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7f6 fc6d 	bl	8002788 <HAL_RCC_OscConfig>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	bf14      	ite	ne
 800beb4:	2301      	movne	r3, #1
 800beb6:	2300      	moveq	r3, #0
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <_Z18SystemClock_Configv+0xc6>
    {
        Error_Handler();
 800bebe:	f000 fed1 	bl	800cc64 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bec2:	230f      	movs	r3, #15
 800bec4:	66bb      	str	r3, [r7, #104]	; 0x68
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800bec6:	2300      	movs	r3, #0
 800bec8:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800beca:	2300      	movs	r3, #0
 800becc:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bece:	2300      	movs	r3, #0
 800bed0:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bed2:	2300      	movs	r3, #0
 800bed4:	67bb      	str	r3, [r7, #120]	; 0x78

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800bed6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800beda:	2100      	movs	r1, #0
 800bedc:	4618      	mov	r0, r3
 800bede:	f7f5 fef1 	bl	8001cc4 <HAL_RCC_ClockConfig>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bf14      	ite	ne
 800bee8:	2301      	movne	r3, #1
 800beea:	2300      	moveq	r3, #0
 800beec:	b2db      	uxtb	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <_Z18SystemClock_Configv+0xfa>
    {
        Error_Handler();
 800bef2:	f000 feb7 	bl	800cc64 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800bef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800befa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800befc:	2300      	movs	r3, #0
 800befe:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800bf00:	2300      	movs	r3, #0
 800bf02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf04:	f107 030c 	add.w	r3, r7, #12
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7f5 ffc1 	bl	8001e90 <HAL_RCCEx_PeriphCLKConfig>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bf14      	ite	ne
 800bf14:	2301      	movne	r3, #1
 800bf16:	2300      	moveq	r3, #0
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <_Z18SystemClock_Configv+0x126>
    {
        Error_Handler();
 800bf1e:	f000 fea1 	bl	800cc64 <Error_Handler>
    }
}
 800bf22:	bf00      	nop
 800bf24:	37b0      	adds	r7, #176	; 0xb0
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	40023800 	.word	0x40023800
 800bf30:	40007000 	.word	0x40007000

0800bf34 <_ZL12MX_CAN1_Initv>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08a      	sub	sp, #40	; 0x28
 800bf38:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN CAN1_Init 1 */


    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 800bf3a:	4b29      	ldr	r3, [pc, #164]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf3c:	4a29      	ldr	r2, [pc, #164]	; (800bfe4 <_ZL12MX_CAN1_Initv+0xb0>)
 800bf3e:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 16;
 800bf40:	4b27      	ldr	r3, [pc, #156]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf42:	2210      	movs	r2, #16
 800bf44:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 800bf46:	4b26      	ldr	r3, [pc, #152]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800bf4c:	4b24      	ldr	r3, [pc, #144]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800bf52:	4b23      	ldr	r3, [pc, #140]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800bf58:	4b21      	ldr	r3, [pc, #132]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 800bf5e:	4b20      	ldr	r3, [pc, #128]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 800bf64:	4b1e      	ldr	r3, [pc, #120]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 800bf6a:	4b1d      	ldr	r3, [pc, #116]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 800bf70:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 800bf76:	4b1a      	ldr	r3, [pc, #104]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 800bf7c:	4b18      	ldr	r3, [pc, #96]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800bf82:	4817      	ldr	r0, [pc, #92]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bf84:	f7f4 fda0 	bl	8000ac8 <HAL_CAN_Init>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bf14      	ite	ne
 800bf8e:	2301      	movne	r3, #1
 800bf90:	2300      	moveq	r3, #0
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <_ZL12MX_CAN1_Initv+0x68>
        Error_Handler();
 800bf98:	f000 fe64 	bl	800cc64 <Error_Handler>
    /* USER CODE BEGIN CAN1_Init 2 */
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // allows 4 IDs to be set to one filter with IDLIST
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 800bfac:	230e      	movs	r3, #14
 800bfae:	627b      	str	r3, [r7, #36]	; 0x24

    sFilterConfig.FilterBank = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = Setting << 5;
 800bfb4:	f64e 53c0 	movw	r3, #60864	; 0xedc0
 800bfb8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = NLGAStat << 5;
 800bfba:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 800bfbe:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = NLGBStat << 5;
 800bfc0:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800bfc4:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = LoggerReq << 5;
 800bfc6:	f24f 6380 	movw	r3, #63104	; 0xf680
 800bfca:	60fb      	str	r3, [r7, #12]
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800bfcc:	463b      	mov	r3, r7
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4803      	ldr	r0, [pc, #12]	; (800bfe0 <_ZL12MX_CAN1_Initv+0xac>)
 800bfd2:	f7f4 fe75 	bl	8000cc0 <HAL_CAN_ConfigFilter>
    /* USER CODE END CAN1_Init 2 */
}
 800bfd6:	bf00      	nop
 800bfd8:	3728      	adds	r7, #40	; 0x28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200000f8 	.word	0x200000f8
 800bfe4:	40006400 	.word	0x40006400

0800bfe8 <_ZL12MX_CAN2_Initv>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af00      	add	r7, sp, #0
    /* USER CODE END CAN2_Init 0 */

    /* USER CODE BEGIN CAN2_Init 1 */

    /* USER CODE END CAN2_Init 1 */
    hcan2.Instance = CAN2;
 800bfee:	4b2a      	ldr	r3, [pc, #168]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800bff0:	4a2a      	ldr	r2, [pc, #168]	; (800c09c <_ZL12MX_CAN2_Initv+0xb4>)
 800bff2:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 16;
 800bff4:	4b28      	ldr	r3, [pc, #160]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800bff6:	2210      	movs	r2, #16
 800bff8:	605a      	str	r2, [r3, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;
 800bffa:	4b27      	ldr	r3, [pc, #156]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	609a      	str	r2, [r3, #8]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800c000:	4b25      	ldr	r3, [pc, #148]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c002:	2200      	movs	r2, #0
 800c004:	60da      	str	r2, [r3, #12]
    hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800c006:	4b24      	ldr	r3, [pc, #144]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c008:	2200      	movs	r2, #0
 800c00a:	611a      	str	r2, [r3, #16]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800c00c:	4b22      	ldr	r3, [pc, #136]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c00e:	2200      	movs	r2, #0
 800c010:	615a      	str	r2, [r3, #20]
    hcan2.Init.TimeTriggeredMode = DISABLE;
 800c012:	4b21      	ldr	r3, [pc, #132]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c014:	2200      	movs	r2, #0
 800c016:	761a      	strb	r2, [r3, #24]
    hcan2.Init.AutoBusOff = DISABLE;
 800c018:	4b1f      	ldr	r3, [pc, #124]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	765a      	strb	r2, [r3, #25]
    hcan2.Init.AutoWakeUp = DISABLE;
 800c01e:	4b1e      	ldr	r3, [pc, #120]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c020:	2200      	movs	r2, #0
 800c022:	769a      	strb	r2, [r3, #26]
    hcan2.Init.AutoRetransmission = DISABLE;
 800c024:	4b1c      	ldr	r3, [pc, #112]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c026:	2200      	movs	r2, #0
 800c028:	76da      	strb	r2, [r3, #27]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 800c02a:	4b1b      	ldr	r3, [pc, #108]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	771a      	strb	r2, [r3, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 800c030:	4b19      	ldr	r3, [pc, #100]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c032:	2200      	movs	r2, #0
 800c034:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800c036:	4818      	ldr	r0, [pc, #96]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c038:	f7f4 fd46 	bl	8000ac8 <HAL_CAN_Init>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	bf14      	ite	ne
 800c042:	2301      	movne	r3, #1
 800c044:	2300      	moveq	r3, #0
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <_ZL12MX_CAN2_Initv+0x68>
    {
        Error_Handler();
 800c04c:	f000 fe0a 	bl	800cc64 <Error_Handler>
    }
    /* USER CODE BEGIN CAN2_Init 2 */
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterBank = 14;
 800c050:	230e      	movs	r3, #14
 800c052:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800c054:	2301      	movs	r3, #1
 800c056:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // allows two IDs to be set to one filter with IDLIST
 800c058:	2300      	movs	r3, #0
 800c05a:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 800c05c:	2301      	movs	r3, #1
 800c05e:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800c060:	2300      	movs	r3, #0
 800c062:	613b      	str	r3, [r7, #16]
    sFilterConfig.SlaveStartFilterBank = 14;
 800c064:	230e      	movs	r3, #14
 800c066:	627b      	str	r3, [r7, #36]	; 0x24

    sFilterConfig.FilterBank = 14;
 800c068:	230e      	movs	r3, #14
 800c06a:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = IVT_I << 5;
 800c06c:	f24a 4320 	movw	r3, #42016	; 0xa420
 800c070:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = IVT_U1 << 5;
 800c072:	f24a 4340 	movw	r3, #42048	; 0xa440
 800c076:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = IVT_U2 << 5;
 800c078:	f24a 4360 	movw	r3, #42080	; 0xa460
 800c07c:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = IVT_U3 << 5;
 800c07e:	f24a 4380 	movw	r3, #42112	; 0xa480
 800c082:	60fb      	str	r3, [r7, #12]
    HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 800c084:	463b      	mov	r3, r7
 800c086:	4619      	mov	r1, r3
 800c088:	4803      	ldr	r0, [pc, #12]	; (800c098 <_ZL12MX_CAN2_Initv+0xb0>)
 800c08a:	f7f4 fe19 	bl	8000cc0 <HAL_CAN_ConfigFilter>
    /* USER CODE END CAN2_Init 2 */

}
 800c08e:	bf00      	nop
 800c090:	3728      	adds	r7, #40	; 0x28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20000120 	.word	0x20000120
 800c09c:	40006800 	.word	0x40006800

0800c0a0 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 800c0a4:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0a6:	4a1b      	ldr	r2, [pc, #108]	; (800c114 <_ZL12MX_SPI1_Initv+0x74>)
 800c0a8:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800c0aa:	4b19      	ldr	r3, [pc, #100]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c0b0:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c0b2:	4b17      	ldr	r3, [pc, #92]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c0b8:	4b15      	ldr	r3, [pc, #84]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0be:	4b14      	ldr	r3, [pc, #80]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c0c4:	4b12      	ldr	r3, [pc, #72]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800c0ca:	4b11      	ldr	r3, [pc, #68]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0d0:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c0d2:	4b0f      	ldr	r3, [pc, #60]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 1;
 800c0ea:	4b09      	ldr	r3, [pc, #36]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c0f0:	4807      	ldr	r0, [pc, #28]	; (800c110 <_ZL12MX_SPI1_Initv+0x70>)
 800c0f2:	f7f7 ff1b 	bl	8003f2c <HAL_SPI_Init>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	bf14      	ite	ne
 800c0fc:	2301      	movne	r3, #1
 800c0fe:	2300      	moveq	r3, #0
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <_ZL12MX_SPI1_Initv+0x6a>
    {
        Error_Handler();
 800c106:	f000 fdad 	bl	800cc64 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 800c10a:	bf00      	nop
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	200001cc 	.word	0x200001cc
 800c114:	40013000 	.word	0x40013000

0800c118 <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	; 0x38
 800c11c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c11e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	605a      	str	r2, [r3, #4]
 800c128:	609a      	str	r2, [r3, #8]
 800c12a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c12c:	f107 0320 	add.w	r3, r7, #32
 800c130:	2200      	movs	r2, #0
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800c136:	1d3b      	adds	r3, r7, #4
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	605a      	str	r2, [r3, #4]
 800c13e:	609a      	str	r2, [r3, #8]
 800c140:	60da      	str	r2, [r3, #12]
 800c142:	611a      	str	r2, [r3, #16]
 800c144:	615a      	str	r2, [r3, #20]
 800c146:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN TIM2_Init 1 */

    // In the code below, prescaler is 800 as 16MHz / 800 == 20kHz.

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 800c148:	4b3a      	ldr	r3, [pc, #232]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c14a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c14e:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 800;
 800c150:	4b38      	ldr	r3, [pc, #224]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c152:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c156:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c158:	4b36      	ldr	r3, [pc, #216]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 19999;
 800c15e:	4b35      	ldr	r3, [pc, #212]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c160:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800c164:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c166:	4b33      	ldr	r3, [pc, #204]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c168:	2200      	movs	r2, #0
 800c16a:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c16c:	4b31      	ldr	r3, [pc, #196]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c16e:	2200      	movs	r2, #0
 800c170:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c172:	4830      	ldr	r0, [pc, #192]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c174:	f7f8 fc2e 	bl	80049d4 <HAL_TIM_Base_Init>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bf14      	ite	ne
 800c17e:	2301      	movne	r3, #1
 800c180:	2300      	moveq	r3, #0
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <_ZL12MX_TIM2_Initv+0x74>
    {
        Error_Handler();
 800c188:	f000 fd6c 	bl	800cc64 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c18c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c190:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c196:	4619      	mov	r1, r3
 800c198:	4826      	ldr	r0, [pc, #152]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c19a:	f7f8 fd7f 	bl	8004c9c <HAL_TIM_ConfigClockSource>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	bf14      	ite	ne
 800c1a4:	2301      	movne	r3, #1
 800c1a6:	2300      	moveq	r3, #0
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <_ZL12MX_TIM2_Initv+0x9a>
    {
        Error_Handler();
 800c1ae:	f000 fd59 	bl	800cc64 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c1b2:	4820      	ldr	r0, [pc, #128]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c1b4:	f7f8 fc39 	bl	8004a2a <HAL_TIM_PWM_Init>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bf14      	ite	ne
 800c1be:	2301      	movne	r3, #1
 800c1c0:	2300      	moveq	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <_ZL12MX_TIM2_Initv+0xb4>
    {
        Error_Handler();
 800c1c8:	f000 fd4c 	bl	800cc64 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c1d4:	f107 0320 	add.w	r3, r7, #32
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4816      	ldr	r0, [pc, #88]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c1dc:	f7f9 f926 	bl	800542c <HAL_TIMEx_MasterConfigSynchronization>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	bf14      	ite	ne
 800c1e6:	2301      	movne	r3, #1
 800c1e8:	2300      	moveq	r3, #0
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <_ZL12MX_TIM2_Initv+0xdc>
    {
        Error_Handler();
 800c1f0:	f000 fd38 	bl	800cc64 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c1f4:	2360      	movs	r3, #96	; 0x60
 800c1f6:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c200:	2300      	movs	r3, #0
 800c202:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c204:	1d3b      	adds	r3, r7, #4
 800c206:	220c      	movs	r2, #12
 800c208:	4619      	mov	r1, r3
 800c20a:	480a      	ldr	r0, [pc, #40]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c20c:	f7f8 fc80 	bl	8004b10 <HAL_TIM_PWM_ConfigChannel>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	bf14      	ite	ne
 800c216:	2301      	movne	r3, #1
 800c218:	2300      	moveq	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <_ZL12MX_TIM2_Initv+0x10c>
    {
        Error_Handler();
 800c220:	f000 fd20 	bl	800cc64 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 800c224:	4803      	ldr	r0, [pc, #12]	; (800c234 <_ZL12MX_TIM2_Initv+0x11c>)
 800c226:	f001 f937 	bl	800d498 <HAL_TIM_MspPostInit>

}
 800c22a:	bf00      	nop
 800c22c:	3738      	adds	r7, #56	; 0x38
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000224 	.word	0x20000224

0800c238 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08a      	sub	sp, #40	; 0x28
 800c23c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c23e:	f107 0314 	add.w	r3, r7, #20
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	605a      	str	r2, [r3, #4]
 800c248:	609a      	str	r2, [r3, #8]
 800c24a:	60da      	str	r2, [r3, #12]
 800c24c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c24e:	2300      	movs	r3, #0
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	4b53      	ldr	r3, [pc, #332]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c256:	4a52      	ldr	r2, [pc, #328]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c258:	f043 0304 	orr.w	r3, r3, #4
 800c25c:	6313      	str	r3, [r2, #48]	; 0x30
 800c25e:	4b50      	ldr	r3, [pc, #320]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c262:	f003 0304 	and.w	r3, r3, #4
 800c266:	613b      	str	r3, [r7, #16]
 800c268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	4b4c      	ldr	r3, [pc, #304]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c272:	4a4b      	ldr	r2, [pc, #300]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c278:	6313      	str	r3, [r2, #48]	; 0x30
 800c27a:	4b49      	ldr	r3, [pc, #292]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c286:	2300      	movs	r3, #0
 800c288:	60bb      	str	r3, [r7, #8]
 800c28a:	4b45      	ldr	r3, [pc, #276]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28e:	4a44      	ldr	r2, [pc, #272]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c290:	f043 0301 	orr.w	r3, r3, #1
 800c294:	6313      	str	r3, [r2, #48]	; 0x30
 800c296:	4b42      	ldr	r3, [pc, #264]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	60bb      	str	r3, [r7, #8]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	607b      	str	r3, [r7, #4]
 800c2a6:	4b3e      	ldr	r3, [pc, #248]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2aa:	4a3d      	ldr	r2, [pc, #244]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c2ac:	f043 0302 	orr.w	r3, r3, #2
 800c2b0:	6313      	str	r3, [r2, #48]	; 0x30
 800c2b2:	4b3b      	ldr	r3, [pc, #236]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b6:	f003 0302 	and.w	r3, r3, #2
 800c2ba:	607b      	str	r3, [r7, #4]
 800c2bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c2be:	2300      	movs	r3, #0
 800c2c0:	603b      	str	r3, [r7, #0]
 800c2c2:	4b37      	ldr	r3, [pc, #220]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c6:	4a36      	ldr	r2, [pc, #216]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c2c8:	f043 0308 	orr.w	r3, r3, #8
 800c2cc:	6313      	str	r3, [r2, #48]	; 0x30
 800c2ce:	4b34      	ldr	r3, [pc, #208]	; (800c3a0 <_ZL12MX_GPIO_Initv+0x168>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d2:	f003 0308 	and.w	r3, r3, #8
 800c2d6:	603b      	str	r3, [r7, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800c2da:	2200      	movs	r2, #0
 800c2dc:	213f      	movs	r1, #63	; 0x3f
 800c2de:	4831      	ldr	r0, [pc, #196]	; (800c3a4 <_ZL12MX_GPIO_Initv+0x16c>)
 800c2e0:	f7f5 fcbc 	bl	8001c5c <HAL_GPIO_WritePin>
            |IO_1_Pin|IO_2_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2180      	movs	r1, #128	; 0x80
 800c2e8:	482f      	ldr	r0, [pc, #188]	; (800c3a8 <_ZL12MX_GPIO_Initv+0x170>)
 800c2ea:	f7f5 fcb7 	bl	8001c5c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin|NSS_Pin, GPIO_PIN_RESET);
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2143      	movs	r1, #67	; 0x43
 800c2f2:	482e      	ldr	r0, [pc, #184]	; (800c3ac <_ZL12MX_GPIO_Initv+0x174>)
 800c2f4:	f7f5 fcb2 	bl	8001c5c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin
                           IO_1_Pin IO_2_Pin */
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 800c2f8:	233f      	movs	r3, #63	; 0x3f
 800c2fa:	617b      	str	r3, [r7, #20]
            |IO_1_Pin|IO_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c304:	2300      	movs	r3, #0
 800c306:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c308:	f107 0314 	add.w	r3, r7, #20
 800c30c:	4619      	mov	r1, r3
 800c30e:	4825      	ldr	r0, [pc, #148]	; (800c3a4 <_ZL12MX_GPIO_Initv+0x16c>)
 800c310:	f7f5 fafa 	bl	8001908 <HAL_GPIO_Init>

    /*Configure GPIO pin : IO_0_Pin */
    GPIO_InitStruct.Pin = IO_0_Pin;
 800c314:	2380      	movs	r3, #128	; 0x80
 800c316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c318:	2301      	movs	r3, #1
 800c31a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c320:	2300      	movs	r3, #0
 800c322:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 800c324:	f107 0314 	add.w	r3, r7, #20
 800c328:	4619      	mov	r1, r3
 800c32a:	481f      	ldr	r0, [pc, #124]	; (800c3a8 <_ZL12MX_GPIO_Initv+0x170>)
 800c32c:	f7f5 faec 	bl	8001908 <HAL_GPIO_Init>

    /*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin NSS_Pin */
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin;
 800c330:	2303      	movs	r3, #3
 800c332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c334:	2301      	movs	r3, #1
 800c336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c33c:	2300      	movs	r3, #0
 800c33e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c340:	f107 0314 	add.w	r3, r7, #20
 800c344:	4619      	mov	r1, r3
 800c346:	4819      	ldr	r0, [pc, #100]	; (800c3ac <_ZL12MX_GPIO_Initv+0x174>)
 800c348:	f7f5 fade 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NSS_Pin;
 800c34c:	2340      	movs	r3, #64	; 0x40
 800c34e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c350:	2301      	movs	r3, #1
 800c352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c354:	2303      	movs	r3, #3
 800c356:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c358:	f107 0314 	add.w	r3, r7, #20
 800c35c:	4619      	mov	r1, r3
 800c35e:	4813      	ldr	r0, [pc, #76]	; (800c3ac <_ZL12MX_GPIO_Initv+0x174>)
 800c360:	f7f5 fad2 	bl	8001908 <HAL_GPIO_Init>

    /*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 800c364:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c36a:	2300      	movs	r3, #0
 800c36c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c36e:	2300      	movs	r3, #0
 800c370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c372:	f107 0314 	add.w	r3, r7, #20
 800c376:	4619      	mov	r1, r3
 800c378:	480b      	ldr	r0, [pc, #44]	; (800c3a8 <_ZL12MX_GPIO_Initv+0x170>)
 800c37a:	f7f5 fac5 	bl	8001908 <HAL_GPIO_Init>

    /*Configure GPIO pin : SOS_Pin */
    GPIO_InitStruct.Pin = SOS_Pin;
 800c37e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c384:	2303      	movs	r3, #3
 800c386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 800c38c:	f107 0314 	add.w	r3, r7, #20
 800c390:	4619      	mov	r1, r3
 800c392:	4806      	ldr	r0, [pc, #24]	; (800c3ac <_ZL12MX_GPIO_Initv+0x174>)
 800c394:	f7f5 fab8 	bl	8001908 <HAL_GPIO_Init>

}
 800c398:	bf00      	nop
 800c39a:	3728      	adds	r7, #40	; 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	40023800 	.word	0x40023800
 800c3a4:	40020800 	.word	0x40020800
 800c3a8:	40020000 	.word	0x40020000
 800c3ac:	40020400 	.word	0x40020400

0800c3b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN0 / CAN2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08c      	sub	sp, #48	; 0x30
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 800c3b8:	f107 030c 	add.w	r3, r7, #12
 800c3bc:	2200      	movs	r2, #0
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	605a      	str	r2, [r3, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 800c3c2:	f107 030c 	add.w	r3, r7, #12
 800c3c6:	f107 0214 	add.w	r2, r7, #20
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7f4 fe32 	bl	8001036 <HAL_CAN_GetRxMessage>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bf0c      	ite	eq
 800c3d8:	2301      	moveq	r3, #1
 800c3da:	2300      	movne	r3, #0
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d05b      	beq.n	800c49a <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
        switch(RxHeader.StdId) {
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f240 5222 	movw	r2, #1314	; 0x522
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d022      	beq.n	800c432 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
 800c3ec:	f240 5223 	movw	r2, #1315	; 0x523
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d038      	beq.n	800c466 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 800c3f4:	f240 5221 	movw	r2, #1313	; 0x521
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d000      	beq.n	800c3fe <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
        case IVT_U2:
            ivt->setVoltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
            break;

        default:
            break;
 800c3fc:	e04d      	b.n	800c49a <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
            ivt->setCurrent(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 800c3fe:	4b29      	ldr	r3, [pc, #164]	; (800c4a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800c400:	6819      	ldr	r1, [r3, #0]
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	061a      	lsls	r2, r3, #24
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	041b      	lsls	r3, r3, #16
 800c40a:	431a      	orrs	r2, r3
 800c40c:	7c3b      	ldrb	r3, [r7, #16]
 800c40e:	021b      	lsls	r3, r3, #8
 800c410:	4313      	orrs	r3, r2
 800c412:	7c7a      	ldrb	r2, [r7, #17]
 800c414:	4313      	orrs	r3, r2
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c41e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c4a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
 800c422:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c426:	eeb0 0a66 	vmov.f32	s0, s13
 800c42a:	4608      	mov	r0, r1
 800c42c:	f7fe fb04 	bl	800aa38 <_ZN3IVT10setCurrentEf>
            break;
 800c430:	e033      	b.n	800c49a <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
            ivt->setVoltage1(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 800c432:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800c434:	6819      	ldr	r1, [r3, #0]
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	061a      	lsls	r2, r3, #24
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	041b      	lsls	r3, r3, #16
 800c43e:	431a      	orrs	r2, r3
 800c440:	7c3b      	ldrb	r3, [r7, #16]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	4313      	orrs	r3, r2
 800c446:	7c7a      	ldrb	r2, [r7, #17]
 800c448:	4313      	orrs	r3, r2
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c452:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c4a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
 800c456:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c45a:	eeb0 0a66 	vmov.f32	s0, s13
 800c45e:	4608      	mov	r0, r1
 800c460:	f7fe fb0c 	bl	800aa7c <_ZN3IVT11setVoltage1Ef>
            break;
 800c464:	e019      	b.n	800c49a <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
            ivt->setVoltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 800c466:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800c468:	6819      	ldr	r1, [r3, #0]
 800c46a:	7bbb      	ldrb	r3, [r7, #14]
 800c46c:	061a      	lsls	r2, r3, #24
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	041b      	lsls	r3, r3, #16
 800c472:	431a      	orrs	r2, r3
 800c474:	7c3b      	ldrb	r3, [r7, #16]
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	4313      	orrs	r3, r2
 800c47a:	7c7a      	ldrb	r2, [r7, #17]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	ee07 3a90 	vmov	s15, r3
 800c482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c486:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800c4a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
 800c48a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c48e:	eeb0 0a66 	vmov.f32	s0, s13
 800c492:	4608      	mov	r0, r1
 800c494:	f7fe fb14 	bl	800aac0 <_ZN3IVT11setVoltage2Ef>
            break;
 800c498:	bf00      	nop
        }
    }
}
 800c49a:	bf00      	nop
 800c49c:	3730      	adds	r7, #48	; 0x30
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000270 	.word	0x20000270
 800c4a8:	447a0000 	.word	0x447a0000

0800c4ac <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN1
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08c      	sub	sp, #48	; 0x30
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 800c4b4:	f107 030c 	add.w	r3, r7, #12
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	601a      	str	r2, [r3, #0]
 800c4bc:	605a      	str	r2, [r3, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, data) == HAL_OK) {
 800c4be:	f107 030c 	add.w	r3, r7, #12
 800c4c2:	f107 0214 	add.w	r2, r7, #20
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7f4 fdb4 	bl	8001036 <HAL_CAN_GetRxMessage>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	bf0c      	ite	eq
 800c4d4:	2301      	moveq	r3, #1
 800c4d6:	2300      	movne	r3, #0
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 80ae 	beq.w	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
        switch(RxHeader.StdId) {
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800c4e6:	d03d      	beq.n	800c564 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
 800c4e8:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 800c4ec:	d805      	bhi.n	800c4fa <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
 800c4ee:	2b7b      	cmp	r3, #123	; 0x7b
 800c4f0:	d00c      	beq.n	800c50c <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
 800c4f2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800c4f6:	d024      	beq.n	800c542 <HAL_CAN_RxFifo1MsgPendingCallback+0x96>
                pwm_fan->setDutyCycle(data[7]);

            break;

        default:
            break;
 800c4f8:	e0a0      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
        switch(RxHeader.StdId) {
 800c4fa:	f240 726e 	movw	r2, #1902	; 0x76e
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d06a      	beq.n	800c5d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
 800c502:	f240 72b4 	movw	r2, #1972	; 0x7b4
 800c506:	4293      	cmp	r3, r2
 800c508:	d03d      	beq.n	800c586 <HAL_CAN_RxFifo1MsgPendingCallback+0xda>
            break;
 800c50a:	e097      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            rtc.year = data[0] + 2000;
 800c50c:	7b3a      	ldrb	r2, [r7, #12]
 800c50e:	4b4d      	ldr	r3, [pc, #308]	; (800c644 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3a30      	subs	r2, #48	; 0x30
 800c514:	b2d2      	uxtb	r2, r2
 800c516:	701a      	strb	r2, [r3, #0]
            rtc.month = data[1];
 800c518:	4b4a      	ldr	r3, [pc, #296]	; (800c644 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	7b7a      	ldrb	r2, [r7, #13]
 800c51e:	705a      	strb	r2, [r3, #1]
            rtc.days = data[2];
 800c520:	4b48      	ldr	r3, [pc, #288]	; (800c644 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	7bba      	ldrb	r2, [r7, #14]
 800c526:	709a      	strb	r2, [r3, #2]
            rtc.hours = data[3];
 800c528:	4b46      	ldr	r3, [pc, #280]	; (800c644 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	7bfa      	ldrb	r2, [r7, #15]
 800c52e:	70da      	strb	r2, [r3, #3]
            rtc.minutes = data[4];
 800c530:	4b44      	ldr	r3, [pc, #272]	; (800c644 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	7c3a      	ldrb	r2, [r7, #16]
 800c536:	711a      	strb	r2, [r3, #4]
            rtc.seconds = data[5];
 800c538:	4b42      	ldr	r3, [pc, #264]	; (800c644 <HAL_CAN_RxFifo1MsgPendingCallback+0x198>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	7c7a      	ldrb	r2, [r7, #17]
 800c53e:	715a      	strb	r2, [r3, #5]
            break;
 800c540:	e07c      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            nlg5->a_buffer[0] = data[0];
 800c542:	4b41      	ldr	r3, [pc, #260]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	7b3a      	ldrb	r2, [r7, #12]
 800c548:	751a      	strb	r2, [r3, #20]
            nlg5->a_buffer[1] = data[1];
 800c54a:	4b3f      	ldr	r3, [pc, #252]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	7b7a      	ldrb	r2, [r7, #13]
 800c550:	755a      	strb	r2, [r3, #21]
            nlg5->a_buffer[2] = data[2];
 800c552:	4b3d      	ldr	r3, [pc, #244]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	7bba      	ldrb	r2, [r7, #14]
 800c558:	759a      	strb	r2, [r3, #22]
            nlg5->a_buffer[3] = data[3];
 800c55a:	4b3b      	ldr	r3, [pc, #236]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	7bfa      	ldrb	r2, [r7, #15]
 800c560:	75da      	strb	r2, [r3, #23]
            break;
 800c562:	e06b      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            nlg5->b_buffer[0] = data[0];
 800c564:	4b38      	ldr	r3, [pc, #224]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	7b3a      	ldrb	r2, [r7, #12]
 800c56a:	761a      	strb	r2, [r3, #24]
            nlg5->b_buffer[1] = data[1];
 800c56c:	4b36      	ldr	r3, [pc, #216]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	7b7a      	ldrb	r2, [r7, #13]
 800c572:	765a      	strb	r2, [r3, #25]
            nlg5->b_buffer[2] = data[2];
 800c574:	4b34      	ldr	r3, [pc, #208]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	7bba      	ldrb	r2, [r7, #14]
 800c57a:	769a      	strb	r2, [r3, #26]
            nlg5->b_buffer[3] = data[3];
 800c57c:	4b32      	ldr	r3, [pc, #200]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	7bfa      	ldrb	r2, [r7, #15]
 800c582:	76da      	strb	r2, [r3, #27]
            break;
 800c584:	e05a      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            switch (data[3]) {
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d821      	bhi.n	800c5d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>
 800c58c:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>)
 800c58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c592:	bf00      	nop
 800c594:	0800c5d1 	.word	0x0800c5d1
 800c598:	0800c5a5 	.word	0x0800c5a5
 800c59c:	0800c5c1 	.word	0x0800c5c1
 800c5a0:	0800c5d1 	.word	0x0800c5d1
                if (retSD == FR_OK)
 800c5a4:	4b29      	ldr	r3, [pc, #164]	; (800c64c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d105      	bne.n	800c5b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>
                    CANTxVolumeSize(f_size(&SDFile));
 800c5ac:	4b28      	ldr	r3, [pc, #160]	; (800c650 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fb21 	bl	800cbf8 <_Z15CANTxVolumeSizem>
                break;
 800c5b6:	e00e      	b.n	800c5d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
                    CANTxVolumeSize(0);
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	f000 fb1d 	bl	800cbf8 <_Z15CANTxVolumeSizem>
                break;
 800c5be:	e00a      	b.n	800c5d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
                if (retSD == FR_OK)
 800c5c0:	4b22      	ldr	r3, [pc, #136]	; (800c64c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d105      	bne.n	800c5d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
                    f_unlink(kFile);
 800c5c8:	4822      	ldr	r0, [pc, #136]	; (800c654 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 800c5ca:	f7fb ff79 	bl	80084c0 <f_unlink>
                break;
 800c5ce:	e001      	b.n	800c5d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
                break;
 800c5d0:	bf00      	nop
 800c5d2:	e033      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
                break;
 800c5d4:	bf00      	nop
            break;
 800c5d6:	e031      	b.n	800c63c <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            status->setOpMode(data[2]);
 800c5d8:	4b1f      	ldr	r3, [pc, #124]	; (800c658 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	7bba      	ldrb	r2, [r7, #14]
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fb7a 	bl	800acda <_ZN6Status9setOpModeEh>
            ltc6811->setDischargeMode(static_cast<LTC6811::DischargeMode>(data[3]));
 800c5e6:	4b1d      	ldr	r3, [pc, #116]	; (800c65c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	7bfa      	ldrb	r2, [r7, #15]
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe fd78 	bl	800b0e4 <_ZN7LTC681116setDischargeModeENS_13DischargeModeE>
            nlg5->oc_limit = data[6];
 800c5f4:	7cba      	ldrb	r2, [r7, #18]
 800c5f6:	4b14      	ldr	r3, [pc, #80]	; (800c648 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	b292      	uxth	r2, r2
 800c5fc:	821a      	strh	r2, [r3, #16]
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 800c5fe:	4b18      	ldr	r3, [pc, #96]	; (800c660 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	7cfb      	ldrb	r3, [r7, #19]
 800c604:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	4619      	mov	r1, r3
 800c60c:	4610      	mov	r0, r2
 800c60e:	f7fe fe1d 	bl	800b24c <_ZN7PWM_Fan7setModeENS_4ModeE>
            if (pwm_fan->getMode() == PWM_Fan::Manual)
 800c612:	4b13      	ldr	r3, [pc, #76]	; (800c660 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fe27 	bl	800b26a <_ZNK7PWM_Fan7getModeEv>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bf0c      	ite	eq
 800c622:	2301      	moveq	r3, #1
 800c624:	2300      	movne	r3, #0
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d006      	beq.n	800c63a <HAL_CAN_RxFifo1MsgPendingCallback+0x18e>
                pwm_fan->setDutyCycle(data[7]);
 800c62c:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	7cfa      	ldrb	r2, [r7, #19]
 800c632:	4611      	mov	r1, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fdb9 	bl	800b1ac <_ZNK7PWM_Fan12setDutyCycleEh>
            break;
 800c63a:	bf00      	nop
        }
    }
}
 800c63c:	bf00      	nop
 800c63e:	3730      	adds	r7, #48	; 0x30
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	20000278 	.word	0x20000278
 800c648:	20000264 	.word	0x20000264
 800c64c:	2000029c 	.word	0x2000029c
 800c650:	200002a4 	.word	0x200002a4
 800c654:	0800eae4 	.word	0x0800eae4
 800c658:	20000268 	.word	0x20000268
 800c65c:	2000026c 	.word	0x2000026c
 800c660:	20000274 	.word	0x20000274

0800c664 <_Z11CANTxStatusv>:
        return Success;
    else
        return Fail;
}

uint32_t CANTxStatus(void) {
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
    TxHeader.StdId = OpMode;
 800c66a:	4b26      	ldr	r3, [pc, #152]	; (800c704 <_Z11CANTxStatusv+0xa0>)
 800c66c:	2208      	movs	r2, #8
 800c66e:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800c670:	4b24      	ldr	r3, [pc, #144]	; (800c704 <_Z11CANTxStatusv+0xa0>)
 800c672:	2208      	movs	r2, #8
 800c674:	611a      	str	r2, [r3, #16]

    uint32_t const uptime = status->getUptime();
 800c676:	4b24      	ldr	r3, [pc, #144]	; (800c708 <_Z11CANTxStatusv+0xa4>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fe fc1a 	bl	800aeb4 <_ZNK6Status9getUptimeEv>
 800c680:	60f8      	str	r0, [r7, #12]

    uint8_t data[] = {
            static_cast<uint8_t>(uptime >> 24),
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(uptime >>  0),
            status->getOpMode(),
            status->getLastError(),
            status->getPrechargeState(),
            status->getAIRState()
    };
 800c686:	b2db      	uxtb	r3, r3
 800c688:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(uptime >> 16),
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	0c1b      	lsrs	r3, r3, #16
    };
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(uptime >>  8),
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	0a1b      	lsrs	r3, r3, #8
    };
 800c696:	b2db      	uxtb	r3, r3
 800c698:	71bb      	strb	r3, [r7, #6]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	71fb      	strb	r3, [r7, #7]
            status->getOpMode(),
 800c6a0:	4b19      	ldr	r3, [pc, #100]	; (800c708 <_Z11CANTxStatusv+0xa4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fb28 	bl	800acfa <_ZNK6Status9getOpModeEv>
 800c6aa:	4603      	mov	r3, r0
    };
 800c6ac:	723b      	strb	r3, [r7, #8]
            status->getLastError(),
 800c6ae:	4b16      	ldr	r3, [pc, #88]	; (800c708 <_Z11CANTxStatusv+0xa4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe fbf1 	bl	800ae9a <_ZNK6Status12getLastErrorEv>
 800c6b8:	4603      	mov	r3, r0
    };
 800c6ba:	727b      	strb	r3, [r7, #9]
            status->getPrechargeState(),
 800c6bc:	4b12      	ldr	r3, [pc, #72]	; (800c708 <_Z11CANTxStatusv+0xa4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe fb47 	bl	800ad54 <_ZNK6Status17getPrechargeStateEv>
 800c6c6:	4603      	mov	r3, r0
    };
 800c6c8:	72bb      	strb	r3, [r7, #10]
            status->getAIRState()
 800c6ca:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <_Z11CANTxStatusv+0xa4>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe fb6c 	bl	800adac <_ZNK6Status11getAIRStateEv>
 800c6d4:	4603      	mov	r3, r0
    };
 800c6d6:	72fb      	strb	r3, [r7, #11]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800c6d8:	1d3a      	adds	r2, r7, #4
 800c6da:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <_Z11CANTxStatusv+0xa8>)
 800c6dc:	4909      	ldr	r1, [pc, #36]	; (800c704 <_Z11CANTxStatusv+0xa0>)
 800c6de:	480c      	ldr	r0, [pc, #48]	; (800c710 <_Z11CANTxStatusv+0xac>)
 800c6e0:	f7f4 fbce 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	bf0c      	ite	eq
 800c6ea:	2301      	moveq	r3, #1
 800c6ec:	2300      	movne	r3, #0
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <_Z11CANTxStatusv+0x94>
        return Success;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e000      	b.n	800c6fa <_Z11CANTxStatusv+0x96>
    else
        return Fail;
 800c6f8:	2301      	movs	r3, #1
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20000008 	.word	0x20000008
 800c708:	20000268 	.word	0x20000268
 800c70c:	2000027c 	.word	0x2000027c
 800c710:	200000f8 	.word	0x200000f8

0800c714 <_Z13CANTxPECErrorv>:

uint32_t CANTxPECError(void) {
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
    TxHeader.StdId = PECError;
 800c71a:	4b24      	ldr	r3, [pc, #144]	; (800c7ac <_Z13CANTxPECErrorv+0x98>)
 800c71c:	2209      	movs	r2, #9
 800c71e:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800c720:	4b22      	ldr	r3, [pc, #136]	; (800c7ac <_Z13CANTxPECErrorv+0x98>)
 800c722:	2208      	movs	r2, #8
 800c724:	611a      	str	r2, [r3, #16]

    static uint32_t last_error;

    uint32_t const total_error{ status->getErrorCount(Status::PECError) };
 800c726:	4b22      	ldr	r3, [pc, #136]	; (800c7b0 <_Z13CANTxPECErrorv+0x9c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2109      	movs	r1, #9
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fe fb8c 	bl	800ae4a <_ZNK6Status13getErrorCountENS_5ErrorE>
 800c732:	60f8      	str	r0, [r7, #12]
    uint32_t const error_change = total_error - last_error;
 800c734:	4b1f      	ldr	r3, [pc, #124]	; (800c7b4 <_Z13CANTxPECErrorv+0xa0>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	60bb      	str	r3, [r7, #8]
    uint8_t data[] = {
            static_cast<uint8_t>(total_error >> 24),
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(total_error >>  0),
            static_cast<uint8_t>(error_change >> 24),
            static_cast<uint8_t>(error_change >> 16),
            static_cast<uint8_t>(error_change >>  8),
            static_cast<uint8_t>(error_change >>  0),
    };
 800c742:	b2db      	uxtb	r3, r3
 800c744:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(total_error >> 16),
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	0c1b      	lsrs	r3, r3, #16
    };
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(total_error >>  8),
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	0a1b      	lsrs	r3, r3, #8
    };
 800c752:	b2db      	uxtb	r3, r3
 800c754:	70bb      	strb	r3, [r7, #2]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(error_change >> 24),
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	0e1b      	lsrs	r3, r3, #24
    };
 800c760:	b2db      	uxtb	r3, r3
 800c762:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(error_change >> 16),
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	0c1b      	lsrs	r3, r3, #16
    };
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(error_change >>  8),
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	0a1b      	lsrs	r3, r3, #8
    };
 800c770:	b2db      	uxtb	r3, r3
 800c772:	71bb      	strb	r3, [r7, #6]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	71fb      	strb	r3, [r7, #7]

    last_error = total_error;
 800c77a:	4a0e      	ldr	r2, [pc, #56]	; (800c7b4 <_Z13CANTxPECErrorv+0xa0>)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6013      	str	r3, [r2, #0]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800c780:	463a      	mov	r2, r7
 800c782:	4b0d      	ldr	r3, [pc, #52]	; (800c7b8 <_Z13CANTxPECErrorv+0xa4>)
 800c784:	4909      	ldr	r1, [pc, #36]	; (800c7ac <_Z13CANTxPECErrorv+0x98>)
 800c786:	480d      	ldr	r0, [pc, #52]	; (800c7bc <_Z13CANTxPECErrorv+0xa8>)
 800c788:	f7f4 fb7a 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	bf0c      	ite	eq
 800c792:	2301      	moveq	r3, #1
 800c794:	2300      	movne	r3, #0
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <_Z13CANTxPECErrorv+0x8c>
        return Success;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e000      	b.n	800c7a2 <_Z13CANTxPECErrorv+0x8e>
    else
        return Fail;
 800c7a0:	2301      	movs	r3, #1
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000008 	.word	0x20000008
 800c7b0:	20000268 	.word	0x20000268
 800c7b4:	20000280 	.word	0x20000280
 800c7b8:	2000027c 	.word	0x2000027c
 800c7bc:	200000f8 	.word	0x200000f8

0800c7c0 <_Z9CANTxDatatts>:

uint32_t CANTxData(uint16_t const v_min, uint16_t const v_max, int16_t const t_max) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	80fb      	strh	r3, [r7, #6]
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	80bb      	strh	r3, [r7, #4]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	807b      	strh	r3, [r7, #2]
    TxHeader.StdId = Data;
 800c7d2:	4b22      	ldr	r3, [pc, #136]	; (800c85c <_Z9CANTxDatatts+0x9c>)
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800c7d8:	4b20      	ldr	r3, [pc, #128]	; (800c85c <_Z9CANTxDatatts+0x9c>)
 800c7da:	2208      	movs	r2, #8
 800c7dc:	611a      	str	r2, [r3, #16]

    uint16_t U1 = static_cast<uint16_t>(ivt->getVoltage1()); // TODO this is bad
 800c7de:	4b20      	ldr	r3, [pc, #128]	; (800c860 <_Z9CANTxDatatts+0xa0>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe f95d 	bl	800aaa2 <_ZNK3IVT11getVoltage1Ev>
 800c7e8:	eef0 7a40 	vmov.f32	s15, s0
 800c7ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7f0:	ee17 3a90 	vmov	r3, s15
 800c7f4:	82fb      	strh	r3, [r7, #22]
    uint8_t data[] = {
            static_cast<uint8_t>(U1 >> 8),
 800c7f6:	8afb      	ldrh	r3, [r7, #22]
 800c7f8:	121b      	asrs	r3, r3, #8
            static_cast<uint8_t>(v_min >> 0),
            static_cast<uint8_t>(v_max >> 8),
            static_cast<uint8_t>(v_max >> 0),
            static_cast<uint8_t>(t_max >> 8),
            static_cast<uint8_t>(t_max >> 0)
    };
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	733b      	strb	r3, [r7, #12]
 800c7fe:	8afb      	ldrh	r3, [r7, #22]
 800c800:	b2db      	uxtb	r3, r3
 800c802:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(v_min >> 8),
 800c804:	88fb      	ldrh	r3, [r7, #6]
 800c806:	121b      	asrs	r3, r3, #8
    };
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	73bb      	strb	r3, [r7, #14]
 800c80c:	88fb      	ldrh	r3, [r7, #6]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	73fb      	strb	r3, [r7, #15]
            static_cast<uint8_t>(v_max >> 8),
 800c812:	88bb      	ldrh	r3, [r7, #4]
 800c814:	121b      	asrs	r3, r3, #8
    };
 800c816:	b2db      	uxtb	r3, r3
 800c818:	743b      	strb	r3, [r7, #16]
 800c81a:	88bb      	ldrh	r3, [r7, #4]
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	747b      	strb	r3, [r7, #17]
            static_cast<uint8_t>(t_max >> 8),
 800c820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c824:	121b      	asrs	r3, r3, #8
    };
 800c826:	b2db      	uxtb	r3, r3
 800c828:	74bb      	strb	r3, [r7, #18]
 800c82a:	887b      	ldrh	r3, [r7, #2]
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	74fb      	strb	r3, [r7, #19]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800c830:	f107 020c 	add.w	r2, r7, #12
 800c834:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <_Z9CANTxDatatts+0xa4>)
 800c836:	4909      	ldr	r1, [pc, #36]	; (800c85c <_Z9CANTxDatatts+0x9c>)
 800c838:	480b      	ldr	r0, [pc, #44]	; (800c868 <_Z9CANTxDatatts+0xa8>)
 800c83a:	f7f4 fb21 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	bf0c      	ite	eq
 800c844:	2301      	moveq	r3, #1
 800c846:	2300      	movne	r3, #0
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <_Z9CANTxDatatts+0x92>
        return Success;
 800c84e:	2300      	movs	r3, #0
 800c850:	e000      	b.n	800c854 <_Z9CANTxDatatts+0x94>
    else
        return Fail;
 800c852:	2301      	movs	r3, #1

}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	20000008 	.word	0x20000008
 800c860:	20000270 	.word	0x20000270
 800c864:	2000027c 	.word	0x2000027c
 800c868:	200000f8 	.word	0x200000f8

0800c86c <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE>:

uint32_t CANTxVoltage(std::array<LTC6811::RegisterGroup<uint16_t>, 4> const& cell_data) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08e      	sub	sp, #56	; 0x38
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = Volt;
 800c874:	4b3f      	ldr	r3, [pc, #252]	; (800c974 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x108>)
 800c876:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800c87a:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800c87c:	4b3d      	ldr	r3, [pc, #244]	; (800c974 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x108>)
 800c87e:	2208      	movs	r2, #8
 800c880:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800c882:	f107 0308 	add.w	r3, r7, #8
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	605a      	str	r2, [r3, #4]
    uint8_t byte_position{ 0 };
 800c88c:	2300      	movs	r3, #0
 800c88e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c892:	2300      	movs	r3, #0
 800c894:	633b      	str	r3, [r7, #48]	; 0x30
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d166      	bne.n	800c96a <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xfe>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
 800c8a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8a2:	f7fd fc49 	bl	800a138 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 800c8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c8a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8aa:	f7fd fc51 	bl	800a150 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 800c8ae:	6238      	str	r0, [r7, #32]
 800c8b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d054      	beq.n	800c962 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xf6>
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	61fb      	str	r3, [r7, #28]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 800c8bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8be:	69f8      	ldr	r0, [r7, #28]
 800c8c0:	f7fd fc53 	bl	800a16a <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	61bb      	str	r3, [r7, #24]
 800c8c8:	69b8      	ldr	r0, [r7, #24]
 800c8ca:	f7fd fbc2 	bl	800a052 <_ZNKSt5arrayItLj3EE5beginEv>
 800c8ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800c8d0:	69b8      	ldr	r0, [r7, #24]
 800c8d2:	f7fd fbca 	bl	800a06a <_ZNKSt5arrayItLj3EE3endEv>
 800c8d6:	6178      	str	r0, [r7, #20]
 800c8d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d03c      	beq.n	800c95a <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xee>
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	827b      	strh	r3, [r7, #18]
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 800c8e6:	8a7b      	ldrh	r3, [r7, #18]
 800c8e8:	121b      	asrs	r3, r3, #8
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8f0:	1c59      	adds	r1, r3, #1
 800c8f2:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800c8f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c8fa:	440b      	add	r3, r1
 800c8fc:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(voltage);
 800c900:	8a7b      	ldrh	r3, [r7, #18]
 800c902:	b2da      	uxtb	r2, r3
 800c904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c908:	1c59      	adds	r1, r3, #1
 800c90a:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800c90e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c912:	440b      	add	r3, r1
 800c914:	f803 2c30 	strb.w	r2, [r3, #-48]

                if (byte_position == 8) {
 800c918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c91c:	2b08      	cmp	r3, #8
 800c91e:	d118      	bne.n	800c952 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xe6>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 800c920:	f107 0208 	add.w	r2, r7, #8
 800c924:	4b14      	ldr	r3, [pc, #80]	; (800c978 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x10c>)
 800c926:	4913      	ldr	r1, [pc, #76]	; (800c974 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x108>)
 800c928:	4814      	ldr	r0, [pc, #80]	; (800c97c <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x110>)
 800c92a:	f7f4 faa9 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	bf14      	ite	ne
 800c934:	2301      	movne	r3, #1
 800c936:	2300      	moveq	r3, #0
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0xd6>
                        return Fail;
 800c93e:	2301      	movs	r3, #1
 800c940:	e014      	b.n	800c96c <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x100>

                    byte_position = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    ++TxHeader.StdId;
 800c948:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x108>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	3301      	adds	r3, #1
 800c94e:	4a09      	ldr	r2, [pc, #36]	; (800c974 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x108>)
 800c950:	6013      	str	r3, [r2, #0]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	3302      	adds	r3, #2
 800c956:	62bb      	str	r3, [r7, #40]	; 0x28
 800c958:	e7be      	b.n	800c8d8 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x6c>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 800c95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95c:	3308      	adds	r3, #8
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c960:	e7a6      	b.n	800c8b0 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x44>
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	3301      	adds	r3, #1
 800c966:	633b      	str	r3, [r7, #48]	; 0x30
 800c968:	e795      	b.n	800c896 <_Z12CANTxVoltageRKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE+0x2a>
                }
            } // 4 * 3 == 12 voltages associated with each LTC6811 in the daisy chain
        }
    } // 4 * 3 * kDaisyChainLength == all voltages associated with the daisy chain
    return Success;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3738      	adds	r7, #56	; 0x38
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20000008 	.word	0x20000008
 800c978:	2000027c 	.word	0x2000027c
 800c97c:	200000f8 	.word	0x200000f8

0800c980 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE>:

uint32_t CANTxTemperature(std::array<LTC6811::RegisterGroup<int16_t>, 2> const& temp_data) {
 800c980:	b580      	push	{r7, lr}
 800c982:	b08e      	sub	sp, #56	; 0x38
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = Temp;
 800c988:	4b40      	ldr	r3, [pc, #256]	; (800ca8c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x10c>)
 800c98a:	f240 729c 	movw	r2, #1948	; 0x79c
 800c98e:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800c990:	4b3e      	ldr	r3, [pc, #248]	; (800ca8c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x10c>)
 800c992:	2208      	movs	r2, #8
 800c994:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	605a      	str	r2, [r3, #4]
    uint8_t byte_position{ 0 };
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	633b      	str	r3, [r7, #48]	; 0x30
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d167      	bne.n	800ca80 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x100>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9b6:	f000 f9fa 	bl	800cdae <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>
 800c9ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c9bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9be:	f000 fa02 	bl	800cdc6 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>
 800c9c2:	6238      	str	r0, [r7, #32]
 800c9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d055      	beq.n	800ca78 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xf8>
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	61fb      	str	r3, [r7, #28]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800c9d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9d2:	69f8      	ldr	r0, [r7, #28]
 800c9d4:	f000 fa36 	bl	800ce44 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EEixEj>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	61bb      	str	r3, [r7, #24]
 800c9dc:	69b8      	ldr	r0, [r7, #24]
 800c9de:	f000 fa18 	bl	800ce12 <_ZNKSt5arrayIsLj3EE5beginEv>
 800c9e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800c9e4:	69b8      	ldr	r0, [r7, #24]
 800c9e6:	f000 fa20 	bl	800ce2a <_ZNKSt5arrayIsLj3EE3endEv>
 800c9ea:	6178      	str	r0, [r7, #20]
 800c9ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d03d      	beq.n	800ca70 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xf0>
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	827b      	strh	r3, [r7, #18]
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 800c9fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9fe:	121b      	asrs	r3, r3, #8
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca06:	1c59      	adds	r1, r3, #1
 800ca08:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800ca0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ca10:	440b      	add	r3, r1
 800ca12:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(temperature);
 800ca16:	8a7b      	ldrh	r3, [r7, #18]
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca1e:	1c59      	adds	r1, r3, #1
 800ca20:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800ca24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ca28:	440b      	add	r3, r1
 800ca2a:	f803 2c30 	strb.w	r2, [r3, #-48]

                if (byte_position == 8) {
 800ca2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca32:	2b08      	cmp	r3, #8
 800ca34:	d118      	bne.n	800ca68 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xe8>
                    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 800ca36:	f107 0208 	add.w	r2, r7, #8
 800ca3a:	4b15      	ldr	r3, [pc, #84]	; (800ca90 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x110>)
 800ca3c:	4913      	ldr	r1, [pc, #76]	; (800ca8c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x10c>)
 800ca3e:	4815      	ldr	r0, [pc, #84]	; (800ca94 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x114>)
 800ca40:	f7f4 fa1e 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	bf14      	ite	ne
 800ca4a:	2301      	movne	r3, #1
 800ca4c:	2300      	moveq	r3, #0
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0xd8>
                        return Fail;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e014      	b.n	800ca82 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x102>

                    byte_position = 0;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    ++TxHeader.StdId;
 800ca5e:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x10c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3301      	adds	r3, #1
 800ca64:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x10c>)
 800ca66:	6013      	str	r3, [r2, #0]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca6e:	e7bd      	b.n	800c9ec <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x6c>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 800ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca72:	3308      	adds	r3, #8
 800ca74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca76:	e7a5      	b.n	800c9c4 <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x44>
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ca7e:	e794      	b.n	800c9aa <_Z16CANTxTemperatureRKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE+0x2a>
                }
            } // 2 * 3 == 6 temperatures associated with each LTC6811 in the daisy chain
        }
    } // 2 * 3 * kDaisyChainLength == all temperatures associated with the daisy chain

    return Success;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3738      	adds	r7, #56	; 0x38
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000008 	.word	0x20000008
 800ca90:	2000027c 	.word	0x2000027c
 800ca94:	200000f8 	.word	0x200000f8

0800ca98 <_Z21CANTxVoltageLimpTotalmb>:

uint32_t CANTxVoltageLimpTotal(uint32_t const sum_of_cells, bool const limping) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	70fb      	strb	r3, [r7, #3]
    TxHeader.StdId = VoltTotal;
 800caa4:	4b18      	ldr	r3, [pc, #96]	; (800cb08 <_Z21CANTxVoltageLimpTotalmb+0x70>)
 800caa6:	220b      	movs	r2, #11
 800caa8:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800caaa:	4b17      	ldr	r3, [pc, #92]	; (800cb08 <_Z21CANTxVoltageLimpTotalmb+0x70>)
 800caac:	2208      	movs	r2, #8
 800caae:	611a      	str	r2, [r3, #16]

    uint8_t data[8] {
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	2200      	movs	r2, #0
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	605a      	str	r2, [r3, #4]
        static_cast<uint8_t>(sum_of_cells >> 24),
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	0e1b      	lsrs	r3, r3, #24
                static_cast<uint8_t>(sum_of_cells >>  0),
                limping,
                0x0,
                0x0,
                0x0
    };
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	723b      	strb	r3, [r7, #8]
                static_cast<uint8_t>(sum_of_cells >> 16),
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	0c1b      	lsrs	r3, r3, #16
    };
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	727b      	strb	r3, [r7, #9]
                static_cast<uint8_t>(sum_of_cells >>  8),
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	0a1b      	lsrs	r3, r3, #8
    };
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	72bb      	strb	r3, [r7, #10]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	72fb      	strb	r3, [r7, #11]
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	733b      	strb	r3, [r7, #12]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800cadc:	f107 0208 	add.w	r2, r7, #8
 800cae0:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <_Z21CANTxVoltageLimpTotalmb+0x74>)
 800cae2:	4909      	ldr	r1, [pc, #36]	; (800cb08 <_Z21CANTxVoltageLimpTotalmb+0x70>)
 800cae4:	480a      	ldr	r0, [pc, #40]	; (800cb10 <_Z21CANTxVoltageLimpTotalmb+0x78>)
 800cae6:	f7f4 f9cb 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	bf0c      	ite	eq
 800caf0:	2301      	moveq	r3, #1
 800caf2:	2300      	movne	r3, #0
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <_Z21CANTxVoltageLimpTotalmb+0x66>
        return Success;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e000      	b.n	800cb00 <_Z21CANTxVoltageLimpTotalmb+0x68>
    else
        return Fail;
 800cafe:	2301      	movs	r3, #1
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	20000008 	.word	0x20000008
 800cb0c:	2000027c 	.word	0x2000027c
 800cb10:	200000f8 	.word	0x200000f8

0800cb14 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE>:

/* Put discharge flag data on CAN bus. */
uint32_t CANTxDCCfg(LTC6811::RegisterGroup<uint8_t> const& slave_cfg_rx) {
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b08a      	sub	sp, #40	; 0x28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = DishB;
 800cb1c:	4b33      	ldr	r3, [pc, #204]	; (800cbec <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xd8>)
 800cb1e:	f240 7275 	movw	r2, #1909	; 0x775
 800cb22:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800cb24:	4b31      	ldr	r3, [pc, #196]	; (800cbec <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xd8>)
 800cb26:	2208      	movs	r2, #8
 800cb28:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 800cb2a:	f107 030c 	add.w	r3, r7, #12
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	605a      	str	r2, [r3, #4]
    uint8_t byte_position{ 0 };
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (const auto& IC : slave_cfg_rx) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	61fb      	str	r3, [r7, #28]
 800cb3e:	69f8      	ldr	r0, [r7, #28]
 800cb40:	f000 f98f 	bl	800ce62 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 800cb44:	6238      	str	r0, [r7, #32]
 800cb46:	69f8      	ldr	r0, [r7, #28]
 800cb48:	f000 f997 	bl	800ce7a <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 800cb4c:	61b8      	str	r0, [r7, #24]
 800cb4e:	6a3a      	ldr	r2, [r7, #32]
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d044      	beq.n	800cbe0 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xcc>
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	617b      	str	r3, [r7, #20]
        data[byte_position++] = IC.data[5];
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2105      	movs	r1, #5
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 f998 	bl	800ce94 <_ZNKSt5arrayIhLj6EEixEj>
 800cb64:	4603      	mov	r3, r0
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb6c:	1c59      	adds	r1, r3, #1
 800cb6e:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800cb72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cb76:	440b      	add	r3, r1
 800cb78:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[byte_position++] = IC.data[4];
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2104      	movs	r1, #4
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 f987 	bl	800ce94 <_ZNKSt5arrayIhLj6EEixEj>
 800cb86:	4603      	mov	r3, r0
 800cb88:	781a      	ldrb	r2, [r3, #0]
 800cb8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb8e:	1c59      	adds	r1, r3, #1
 800cb90:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800cb94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cb98:	440b      	add	r3, r1
 800cb9a:	f803 2c1c 	strb.w	r2, [r3, #-28]

        if (byte_position == 8) {
 800cb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba2:	2b08      	cmp	r3, #8
 800cba4:	d118      	bne.n	800cbd8 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xc4>
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) != HAL_OK)
 800cba6:	f107 020c 	add.w	r2, r7, #12
 800cbaa:	4b11      	ldr	r3, [pc, #68]	; (800cbf0 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xdc>)
 800cbac:	490f      	ldr	r1, [pc, #60]	; (800cbec <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xd8>)
 800cbae:	4811      	ldr	r0, [pc, #68]	; (800cbf4 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xe0>)
 800cbb0:	f7f4 f966 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	bf14      	ite	ne
 800cbba:	2301      	movne	r3, #1
 800cbbc:	2300      	moveq	r3, #0
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xb4>
                return Fail;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e00c      	b.n	800cbe2 <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xce>

            byte_position = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            ++TxHeader.StdId;
 800cbce:	4b07      	ldr	r3, [pc, #28]	; (800cbec <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xd8>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	4a05      	ldr	r2, [pc, #20]	; (800cbec <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0xd8>)
 800cbd6:	6013      	str	r3, [r2, #0]
    for (const auto& IC : slave_cfg_rx) {
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	3308      	adds	r3, #8
 800cbdc:	623b      	str	r3, [r7, #32]
 800cbde:	e7b6      	b.n	800cb4e <_Z10CANTxDCCfgRKSt5arrayIN7LTC68118RegisterIhEELj1EE+0x3a>
        }
    }

    return Success;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3728      	adds	r7, #40	; 0x28
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	20000008 	.word	0x20000008
 800cbf0:	2000027c 	.word	0x2000027c
 800cbf4:	200000f8 	.word	0x200000f8

0800cbf8 <_Z15CANTxVolumeSizem>:

uint32_t CANTxVolumeSize(uint32_t const size_of_log) {
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = LoggerResp;
 800cc00:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <_Z15CANTxVolumeSizem+0x60>)
 800cc02:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800cc06:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 4;
 800cc08:	4b13      	ldr	r3, [pc, #76]	; (800cc58 <_Z15CANTxVolumeSizem+0x60>)
 800cc0a:	2204      	movs	r2, #4
 800cc0c:	611a      	str	r2, [r3, #16]

    uint8_t data[] = {
            static_cast<uint8_t>(size_of_log >> 24),
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >>  8),
            static_cast<uint8_t>(size_of_log >>  0)
    };
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(size_of_log >> 16),
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	0c1b      	lsrs	r3, r3, #16
    };
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(size_of_log >>  8),
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	0a1b      	lsrs	r3, r3, #8
    };
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	73bb      	strb	r3, [r7, #14]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox) == HAL_OK)
 800cc2c:	f107 020c 	add.w	r2, r7, #12
 800cc30:	4b0a      	ldr	r3, [pc, #40]	; (800cc5c <_Z15CANTxVolumeSizem+0x64>)
 800cc32:	4909      	ldr	r1, [pc, #36]	; (800cc58 <_Z15CANTxVolumeSizem+0x60>)
 800cc34:	480a      	ldr	r0, [pc, #40]	; (800cc60 <_Z15CANTxVolumeSizem+0x68>)
 800cc36:	f7f4 f923 	bl	8000e80 <HAL_CAN_AddTxMessage>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	bf0c      	ite	eq
 800cc40:	2301      	moveq	r3, #1
 800cc42:	2300      	movne	r3, #0
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <_Z15CANTxVolumeSizem+0x56>
        return Success;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e000      	b.n	800cc50 <_Z15CANTxVolumeSizem+0x58>
    else
        return Fail;
 800cc4e:	2301      	movs	r3, #1
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20000008 	.word	0x20000008
 800cc5c:	2000027c 	.word	0x2000027c
 800cc60:	200000f8 	.word	0x200000f8

0800cc64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800cc64:	b480      	push	{r7}
 800cc66:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 800cc68:	bf00      	nop
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <_ZNSt13__atomic_baseImEaSEm>:

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b086      	sub	sp, #24
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	6039      	str	r1, [r7, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	613b      	str	r3, [r7, #16]
 800cc84:	2305      	movs	r3, #5
 800cc86:	73fb      	strb	r3, [r7, #15]
      }

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fd fe22 	bl	800a8d8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800cc94:	4603      	mov	r3, r0
 800cc96:	73bb      	strb	r3, [r7, #14]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f3bf 8f5b 	dmb	ish
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	f3bf 8f5b 	dmb	ish
	return __i;
 800cca6:	683b      	ldr	r3, [r7, #0]
      }
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3718      	adds	r7, #24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <_ZNSt13__atomic_baseImEppEv>:
      operator++() noexcept
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f3bf 8f5b 	dmb	ish
 800ccbe:	e853 2f00 	ldrex	r2, [r3]
 800ccc2:	f102 0201 	add.w	r2, r2, #1
 800ccc6:	e843 2100 	strex	r1, r2, [r3]
 800ccca:	2900      	cmp	r1, #0
 800cccc:	d1f7      	bne.n	800ccbe <_ZNSt13__atomic_baseImEppEv+0xe>
 800ccce:	f3bf 8f5b 	dmb	ish
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <_ZNKSt13__atomic_baseImEcvmEv>:
      operator __int_type() const noexcept
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	2305      	movs	r3, #5
 800ccee:	72fb      	strb	r3, [r7, #11]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fd fdee 	bl	800a8d8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f3bf 8f5b 	dmb	ish
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f3bf 8f5b 	dmb	ish
      { return load(); }
 800cd0c:	bf00      	nop
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <_ZpLIiLi0EER7CounterS1_T_>:
    friend constexpr Counter& operator+=(Counter& lhs, Integer const rhs) noexcept {
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
        lhs.count += rhs;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	881a      	ldrh	r2, [r3, #0]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	4413      	add	r3, r2
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	801a      	strh	r2, [r3, #0]
        return lhs;
 800cd30:	687b      	ldr	r3, [r7, #4]
    }
 800cd32:	4618      	mov	r0, r3
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <_ZNSt13__atomic_baseIhEppEv>:
      operator++() noexcept
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f3bf 8f5b 	dmb	ish
 800cd4c:	e8d3 2f4f 	ldrexb	r2, [r3]
 800cd50:	f102 0201 	add.w	r2, r2, #1
 800cd54:	e8c3 2f41 	strexb	r1, r2, [r3]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d1f7      	bne.n	800cd4c <_ZNSt13__atomic_baseIhEppEv+0xe>
 800cd5c:	f3bf 8f5b 	dmb	ish
 800cd60:	b2d3      	uxtb	r3, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <_ZNSt13__atomic_baseIhEaSEh>:
      operator=(__int_type __i) noexcept
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70fb      	strb	r3, [r7, #3]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	78fb      	ldrb	r3, [r7, #3]
 800cd80:	72fb      	strb	r3, [r7, #11]
 800cd82:	2305      	movs	r3, #5
 800cd84:	72bb      	strb	r3, [r7, #10]
	memory_order __b = __m & __memory_order_mask;
 800cd86:	7abb      	ldrb	r3, [r7, #10]
 800cd88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fd fda3 	bl	800a8d8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800cd92:	4603      	mov	r3, r0
 800cd94:	727b      	strb	r3, [r7, #9]
	__atomic_store_n(&_M_i, __i, __m);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f3bf 8f5b 	dmb	ish
 800cd9c:	7afa      	ldrb	r2, [r7, #11]
 800cd9e:	701a      	strb	r2, [r3, #0]
 800cda0:	f3bf 8f5b 	dmb	ish
	return __i;
 800cda4:	78fb      	ldrb	r3, [r7, #3]
      }
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>:
      begin() const noexcept
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f886 	bl	800cec8 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>:
      end() const noexcept
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f87a 	bl	800cec8 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	3310      	adds	r3, #16
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>:
      begin() const noexcept
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f87a 	bl	800cee2 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>:
      end() const noexcept
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f86e 	bl	800cee2 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 800ce06:	4603      	mov	r3, r0
 800ce08:	3308      	adds	r3, #8
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <_ZNKSt5arrayIsLj3EE5beginEv>:
      begin() const noexcept
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7fd fb05 	bl	800a42a <_ZNKSt5arrayIsLj3EE4dataEv>
 800ce20:	4603      	mov	r3, r0
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <_ZNKSt5arrayIsLj3EE3endEv>:
      end() const noexcept
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7fd faf9 	bl	800a42a <_ZNKSt5arrayIsLj3EE4dataEv>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	3306      	adds	r3, #6
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EEixEj>:
      operator[](size_type __n) const noexcept
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 f852 	bl	800cefc <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_refERA1_KS2_j>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>:
      begin() const noexcept
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7fd f866 	bl	8009f3c <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 800ce70:	4603      	mov	r3, r0
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>:
      end() const noexcept
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7fd f85a 	bl	8009f3c <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <_ZNKSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fd fbe4 	bl	800a670 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>:
      _S_ptr(const _Type& __t) noexcept
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>:
      data() const noexcept
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff ffed 	bl	800ceb2 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>
 800ced8:	4603      	mov	r3, r0
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>:
      data() const noexcept
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b082      	sub	sp, #8
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fc ff16 	bl	8009d1e <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>
 800cef2:	4603      	mov	r3, r0
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	4618      	mov	r0, r3
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
	...

0800cf1c <_Z41__static_initialization_and_destruction_0ii>:
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d109      	bne.n	800cf40 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d104      	bne.n	800cf40 <_Z41__static_initialization_and_destruction_0ii+0x24>
RTClock& rtc = RTClock::getInstance();
 800cf36:	f7fe f9a5 	bl	800b284 <_ZN7RTClock11getInstanceEv>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	4b02      	ldr	r3, [pc, #8]	; (800cf48 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800cf3e:	601a      	str	r2, [r3, #0]
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	20000278 	.word	0x20000278

0800cf4c <_GLOBAL__sub_I_hcan1>:
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cf54:	2001      	movs	r0, #1
 800cf56:	f7ff ffe1 	bl	800cf1c <_Z41__static_initialization_and_destruction_0ii>
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	4603      	mov	r3, r0
 800cf64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cf66:	4b0b      	ldr	r3, [pc, #44]	; (800cf94 <SD_CheckStatus+0x38>)
 800cf68:	2201      	movs	r2, #1
 800cf6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cf6c:	f7fd fc2a 	bl	800a7c4 <BSP_SD_GetCardState>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d107      	bne.n	800cf86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cf76:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <SD_CheckStatus+0x38>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	f023 0301 	bic.w	r3, r3, #1
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	4b04      	ldr	r3, [pc, #16]	; (800cf94 <SD_CheckStatus+0x38>)
 800cf84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cf86:	4b03      	ldr	r3, [pc, #12]	; (800cf94 <SD_CheckStatus+0x38>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	b2db      	uxtb	r3, r3
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	20000020 	.word	0x20000020

0800cf98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800cfa2:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <SD_initialize+0x38>)
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cfa8:	f7fd fbaa 	bl	800a700 <BSP_SD_Init>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d107      	bne.n	800cfc2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff ffd1 	bl	800cf5c <SD_CheckStatus>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <SD_initialize+0x38>)
 800cfc0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cfc2:	4b03      	ldr	r3, [pc, #12]	; (800cfd0 <SD_initialize+0x38>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	b2db      	uxtb	r3, r3
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20000020 	.word	0x20000020

0800cfd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cfde:	79fb      	ldrb	r3, [r7, #7]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff ffbb 	bl	800cf5c <SD_CheckStatus>
 800cfe6:	4603      	mov	r3, r0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
 800cffa:	603b      	str	r3, [r7, #0]
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d004:	f04f 33ff 	mov.w	r3, #4294967295
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	6879      	ldr	r1, [r7, #4]
 800d00c:	68b8      	ldr	r0, [r7, #8]
 800d00e:	f7fd fb9d 	bl	800a74c <BSP_SD_ReadBlocks>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d107      	bne.n	800d028 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d018:	bf00      	nop
 800d01a:	f7fd fbd3 	bl	800a7c4 <BSP_SD_GetCardState>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1fa      	bne.n	800d01a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d028:	7dfb      	ldrb	r3, [r7, #23]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b086      	sub	sp, #24
 800d036:	af00      	add	r7, sp, #0
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
 800d03c:	603b      	str	r3, [r7, #0]
 800d03e:	4603      	mov	r3, r0
 800d040:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	683a      	ldr	r2, [r7, #0]
 800d04c:	6879      	ldr	r1, [r7, #4]
 800d04e:	68b8      	ldr	r0, [r7, #8]
 800d050:	f7fd fb9a 	bl	800a788 <BSP_SD_WriteBlocks>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d107      	bne.n	800d06a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d05a:	bf00      	nop
 800d05c:	f7fd fbb2 	bl	800a7c4 <BSP_SD_GetCardState>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1fa      	bne.n	800d05c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3718      	adds	r7, #24
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	; 0x30
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	603a      	str	r2, [r7, #0]
 800d07e:	71fb      	strb	r3, [r7, #7]
 800d080:	460b      	mov	r3, r1
 800d082:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d08a:	4b25      	ldr	r3, [pc, #148]	; (800d120 <SD_ioctl+0xac>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <SD_ioctl+0x28>
 800d098:	2303      	movs	r3, #3
 800d09a:	e03c      	b.n	800d116 <SD_ioctl+0xa2>

  switch (cmd)
 800d09c:	79bb      	ldrb	r3, [r7, #6]
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d834      	bhi.n	800d10c <SD_ioctl+0x98>
 800d0a2:	a201      	add	r2, pc, #4	; (adr r2, 800d0a8 <SD_ioctl+0x34>)
 800d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a8:	0800d0b9 	.word	0x0800d0b9
 800d0ac:	0800d0c1 	.word	0x0800d0c1
 800d0b0:	0800d0d9 	.word	0x0800d0d9
 800d0b4:	0800d0f3 	.word	0x0800d0f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0be:	e028      	b.n	800d112 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0c0:	f107 030c 	add.w	r3, r7, #12
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fd fb8d 	bl	800a7e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0d6:	e01c      	b.n	800d112 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0d8:	f107 030c 	add.w	r3, r7, #12
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fd fb81 	bl	800a7e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0f0:	e00f      	b.n	800d112 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0f2:	f107 030c 	add.w	r3, r7, #12
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fd fb74 	bl	800a7e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	0a5a      	lsrs	r2, r3, #9
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d10a:	e002      	b.n	800d112 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d10c:	2304      	movs	r3, #4
 800d10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d116:	4618      	mov	r0, r3
 800d118:	3730      	adds	r7, #48	; 0x30
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	20000020 	.word	0x20000020

0800d124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d12a:	2300      	movs	r3, #0
 800d12c:	607b      	str	r3, [r7, #4]
 800d12e:	4b10      	ldr	r3, [pc, #64]	; (800d170 <HAL_MspInit+0x4c>)
 800d130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d132:	4a0f      	ldr	r2, [pc, #60]	; (800d170 <HAL_MspInit+0x4c>)
 800d134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d138:	6453      	str	r3, [r2, #68]	; 0x44
 800d13a:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <HAL_MspInit+0x4c>)
 800d13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d13e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d142:	607b      	str	r3, [r7, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800d146:	2300      	movs	r3, #0
 800d148:	603b      	str	r3, [r7, #0]
 800d14a:	4b09      	ldr	r3, [pc, #36]	; (800d170 <HAL_MspInit+0x4c>)
 800d14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14e:	4a08      	ldr	r2, [pc, #32]	; (800d170 <HAL_MspInit+0x4c>)
 800d150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d154:	6413      	str	r3, [r2, #64]	; 0x40
 800d156:	4b06      	ldr	r3, [pc, #24]	; (800d170 <HAL_MspInit+0x4c>)
 800d158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d15e:	603b      	str	r3, [r7, #0]
 800d160:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800d162:	bf00      	nop
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	40023800 	.word	0x40023800

0800d174 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08c      	sub	sp, #48	; 0x30
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d17c:	f107 031c 	add.w	r3, r7, #28
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	605a      	str	r2, [r3, #4]
 800d186:	609a      	str	r2, [r3, #8]
 800d188:	60da      	str	r2, [r3, #12]
 800d18a:	611a      	str	r2, [r3, #16]
    if(hcan->Instance==CAN1)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a4b      	ldr	r2, [pc, #300]	; (800d2c0 <HAL_CAN_MspInit+0x14c>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d13e      	bne.n	800d214 <HAL_CAN_MspInit+0xa0>
    {
        /* USER CODE BEGIN CAN1_MspInit 0 */

        /* USER CODE END CAN1_MspInit 0 */
        /* Peripheral clock enable */
        HAL_RCC_CAN1_CLK_ENABLED++;
 800d196:	4b4b      	ldr	r3, [pc, #300]	; (800d2c4 <HAL_CAN_MspInit+0x150>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	4a49      	ldr	r2, [pc, #292]	; (800d2c4 <HAL_CAN_MspInit+0x150>)
 800d19e:	6013      	str	r3, [r2, #0]
        if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800d1a0:	4b48      	ldr	r3, [pc, #288]	; (800d2c4 <HAL_CAN_MspInit+0x150>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d10d      	bne.n	800d1c4 <HAL_CAN_MspInit+0x50>
            __HAL_RCC_CAN1_CLK_ENABLE();
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	61bb      	str	r3, [r7, #24]
 800d1ac:	4b46      	ldr	r3, [pc, #280]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b0:	4a45      	ldr	r2, [pc, #276]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d1b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d1b6:	6413      	str	r3, [r2, #64]	; 0x40
 800d1b8:	4b43      	ldr	r3, [pc, #268]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1c0:	61bb      	str	r3, [r7, #24]
 800d1c2:	69bb      	ldr	r3, [r7, #24]
        }

        __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	617b      	str	r3, [r7, #20]
 800d1c8:	4b3f      	ldr	r3, [pc, #252]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1cc:	4a3e      	ldr	r2, [pc, #248]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d1ce:	f043 0301 	orr.w	r3, r3, #1
 800d1d2:	6313      	str	r3, [r2, #48]	; 0x30
 800d1d4:	4b3c      	ldr	r3, [pc, #240]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d8:	f003 0301 	and.w	r3, r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	697b      	ldr	r3, [r7, #20]
        /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d1e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d1e4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800d1f2:	2309      	movs	r3, #9
 800d1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1f6:	f107 031c 	add.w	r3, r7, #28
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4833      	ldr	r0, [pc, #204]	; (800d2cc <HAL_CAN_MspInit+0x158>)
 800d1fe:	f7f4 fb83 	bl	8001908 <HAL_GPIO_Init>

        /* CAN1 interrupt Init */
        HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800d202:	2200      	movs	r2, #0
 800d204:	2100      	movs	r1, #0
 800d206:	2014      	movs	r0, #20
 800d208:	f7f4 fb47 	bl	800189a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800d20c:	2014      	movs	r0, #20
 800d20e:	f7f4 fb60 	bl	80018d2 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN CAN2_MspInit 1 */

        /* USER CODE END CAN2_MspInit 1 */
    }

}
 800d212:	e050      	b.n	800d2b6 <HAL_CAN_MspInit+0x142>
    else if(hcan->Instance==CAN2)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a2d      	ldr	r2, [pc, #180]	; (800d2d0 <HAL_CAN_MspInit+0x15c>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d14b      	bne.n	800d2b6 <HAL_CAN_MspInit+0x142>
        __HAL_RCC_CAN2_CLK_ENABLE();
 800d21e:	2300      	movs	r3, #0
 800d220:	613b      	str	r3, [r7, #16]
 800d222:	4b29      	ldr	r3, [pc, #164]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d226:	4a28      	ldr	r2, [pc, #160]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d22c:	6413      	str	r3, [r2, #64]	; 0x40
 800d22e:	4b26      	ldr	r3, [pc, #152]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d236:	613b      	str	r3, [r7, #16]
 800d238:	693b      	ldr	r3, [r7, #16]
        HAL_RCC_CAN1_CLK_ENABLED++;
 800d23a:	4b22      	ldr	r3, [pc, #136]	; (800d2c4 <HAL_CAN_MspInit+0x150>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3301      	adds	r3, #1
 800d240:	4a20      	ldr	r2, [pc, #128]	; (800d2c4 <HAL_CAN_MspInit+0x150>)
 800d242:	6013      	str	r3, [r2, #0]
        if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800d244:	4b1f      	ldr	r3, [pc, #124]	; (800d2c4 <HAL_CAN_MspInit+0x150>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d10d      	bne.n	800d268 <HAL_CAN_MspInit+0xf4>
            __HAL_RCC_CAN1_CLK_ENABLE();
 800d24c:	2300      	movs	r3, #0
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	4b1d      	ldr	r3, [pc, #116]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d254:	4a1c      	ldr	r2, [pc, #112]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d25a:	6413      	str	r3, [r2, #64]	; 0x40
 800d25c:	4b1a      	ldr	r3, [pc, #104]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800d268:	2300      	movs	r3, #0
 800d26a:	60bb      	str	r3, [r7, #8]
 800d26c:	4b16      	ldr	r3, [pc, #88]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d270:	4a15      	ldr	r2, [pc, #84]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d272:	f043 0302 	orr.w	r3, r3, #2
 800d276:	6313      	str	r3, [r2, #48]	; 0x30
 800d278:	4b13      	ldr	r3, [pc, #76]	; (800d2c8 <HAL_CAN_MspInit+0x154>)
 800d27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d27c:	f003 0302 	and.w	r3, r3, #2
 800d280:	60bb      	str	r3, [r7, #8]
 800d282:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800d284:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800d288:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d28a:	2302      	movs	r3, #2
 800d28c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d292:	2303      	movs	r3, #3
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800d296:	2309      	movs	r3, #9
 800d298:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d29a:	f107 031c 	add.w	r3, r7, #28
 800d29e:	4619      	mov	r1, r3
 800d2a0:	480c      	ldr	r0, [pc, #48]	; (800d2d4 <HAL_CAN_MspInit+0x160>)
 800d2a2:	f7f4 fb31 	bl	8001908 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	2041      	movs	r0, #65	; 0x41
 800d2ac:	f7f4 faf5 	bl	800189a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800d2b0:	2041      	movs	r0, #65	; 0x41
 800d2b2:	f7f4 fb0e 	bl	80018d2 <HAL_NVIC_EnableIRQ>
}
 800d2b6:	bf00      	nop
 800d2b8:	3730      	adds	r7, #48	; 0x30
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	40006400 	.word	0x40006400
 800d2c4:	20000284 	.word	0x20000284
 800d2c8:	40023800 	.word	0x40023800
 800d2cc:	40020000 	.word	0x40020000
 800d2d0:	40006800 	.word	0x40006800
 800d2d4:	40020400 	.word	0x40020400

0800d2d8 <HAL_SD_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hsd: SD handle pointer
 * @retval None
 */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08a      	sub	sp, #40	; 0x28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2e0:	f107 0314 	add.w	r3, r7, #20
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
 800d2e8:	605a      	str	r2, [r3, #4]
 800d2ea:	609a      	str	r2, [r3, #8]
 800d2ec:	60da      	str	r2, [r3, #12]
 800d2ee:	611a      	str	r2, [r3, #16]
    if(hsd->Instance==SDIO)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a28      	ldr	r2, [pc, #160]	; (800d398 <HAL_SD_MspInit+0xc0>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d14a      	bne.n	800d390 <HAL_SD_MspInit+0xb8>
    {
        /* USER CODE BEGIN SDIO_MspInit 0 */

        /* USER CODE END SDIO_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SDIO_CLK_ENABLE();
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	613b      	str	r3, [r7, #16]
 800d2fe:	4b27      	ldr	r3, [pc, #156]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d302:	4a26      	ldr	r2, [pc, #152]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d304:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d308:	6453      	str	r3, [r2, #68]	; 0x44
 800d30a:	4b24      	ldr	r3, [pc, #144]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d30e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d312:	613b      	str	r3, [r7, #16]
 800d314:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOC_CLK_ENABLE();
 800d316:	2300      	movs	r3, #0
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	4b20      	ldr	r3, [pc, #128]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31e:	4a1f      	ldr	r2, [pc, #124]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d320:	f043 0304 	orr.w	r3, r3, #4
 800d324:	6313      	str	r3, [r2, #48]	; 0x30
 800d326:	4b1d      	ldr	r3, [pc, #116]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32a:	f003 0304 	and.w	r3, r3, #4
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800d332:	2300      	movs	r3, #0
 800d334:	60bb      	str	r3, [r7, #8]
 800d336:	4b19      	ldr	r3, [pc, #100]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33a:	4a18      	ldr	r2, [pc, #96]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d33c:	f043 0308 	orr.w	r3, r3, #8
 800d340:	6313      	str	r3, [r2, #48]	; 0x30
 800d342:	4b16      	ldr	r3, [pc, #88]	; (800d39c <HAL_SD_MspInit+0xc4>)
 800d344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d346:	f003 0308 	and.w	r3, r3, #8
 800d34a:	60bb      	str	r3, [r7, #8]
 800d34c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800d34e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800d352:	617b      	str	r3, [r7, #20]
                |GPIO_PIN_12;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d354:	2302      	movs	r3, #2
 800d356:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d35c:	2303      	movs	r3, #3
 800d35e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d360:	230c      	movs	r3, #12
 800d362:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d364:	f107 0314 	add.w	r3, r7, #20
 800d368:	4619      	mov	r1, r3
 800d36a:	480d      	ldr	r0, [pc, #52]	; (800d3a0 <HAL_SD_MspInit+0xc8>)
 800d36c:	f7f4 facc 	bl	8001908 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d370:	2304      	movs	r3, #4
 800d372:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d374:	2302      	movs	r3, #2
 800d376:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d378:	2300      	movs	r3, #0
 800d37a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d37c:	2303      	movs	r3, #3
 800d37e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d380:	230c      	movs	r3, #12
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d384:	f107 0314 	add.w	r3, r7, #20
 800d388:	4619      	mov	r1, r3
 800d38a:	4806      	ldr	r0, [pc, #24]	; (800d3a4 <HAL_SD_MspInit+0xcc>)
 800d38c:	f7f4 fabc 	bl	8001908 <HAL_GPIO_Init>
        /* USER CODE BEGIN SDIO_MspInit 1 */

        /* USER CODE END SDIO_MspInit 1 */
    }

}
 800d390:	bf00      	nop
 800d392:	3728      	adds	r7, #40	; 0x28
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	40012c00 	.word	0x40012c00
 800d39c:	40023800 	.word	0x40023800
 800d3a0:	40020800 	.word	0x40020800
 800d3a4:	40020c00 	.word	0x40020c00

0800d3a8 <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08a      	sub	sp, #40	; 0x28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3b0:	f107 0314 	add.w	r3, r7, #20
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	605a      	str	r2, [r3, #4]
 800d3ba:	609a      	str	r2, [r3, #8]
 800d3bc:	60da      	str	r2, [r3, #12]
 800d3be:	611a      	str	r2, [r3, #16]
    if(hspi->Instance==SPI1)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a21      	ldr	r2, [pc, #132]	; (800d44c <HAL_SPI_MspInit+0xa4>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d13b      	bne.n	800d442 <HAL_SPI_MspInit+0x9a>
    {
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	613b      	str	r3, [r7, #16]
 800d3ce:	4b20      	ldr	r3, [pc, #128]	; (800d450 <HAL_SPI_MspInit+0xa8>)
 800d3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d2:	4a1f      	ldr	r2, [pc, #124]	; (800d450 <HAL_SPI_MspInit+0xa8>)
 800d3d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3d8:	6453      	str	r3, [r2, #68]	; 0x44
 800d3da:	4b1d      	ldr	r3, [pc, #116]	; (800d450 <HAL_SPI_MspInit+0xa8>)
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d3e2:	613b      	str	r3, [r7, #16]
 800d3e4:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	4b19      	ldr	r3, [pc, #100]	; (800d450 <HAL_SPI_MspInit+0xa8>)
 800d3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ee:	4a18      	ldr	r2, [pc, #96]	; (800d450 <HAL_SPI_MspInit+0xa8>)
 800d3f0:	f043 0302 	orr.w	r3, r3, #2
 800d3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800d3f6:	4b16      	ldr	r3, [pc, #88]	; (800d450 <HAL_SPI_MspInit+0xa8>)
 800d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fa:	f003 0302 	and.w	r3, r3, #2
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800d402:	2338      	movs	r3, #56	; 0x38
 800d404:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d406:	2302      	movs	r3, #2
 800d408:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d40e:	2303      	movs	r3, #3
 800d410:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d412:	2305      	movs	r3, #5
 800d414:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d416:	f107 0314 	add.w	r3, r7, #20
 800d41a:	4619      	mov	r1, r3
 800d41c:	480d      	ldr	r0, [pc, #52]	; (800d454 <HAL_SPI_MspInit+0xac>)
 800d41e:	f7f4 fa73 	bl	8001908 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d422:	2310      	movs	r3, #16
 800d424:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d426:	2302      	movs	r3, #2
 800d428:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d42a:	2301      	movs	r3, #1
 800d42c:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d42e:	2303      	movs	r3, #3
 800d430:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d432:	2305      	movs	r3, #5
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d436:	f107 0314 	add.w	r3, r7, #20
 800d43a:	4619      	mov	r1, r3
 800d43c:	4805      	ldr	r0, [pc, #20]	; (800d454 <HAL_SPI_MspInit+0xac>)
 800d43e:	f7f4 fa63 	bl	8001908 <HAL_GPIO_Init>
        /* USER CODE BEGIN SPI1_MspInit 1 */

        /* USER CODE END SPI1_MspInit 1 */
    }

}
 800d442:	bf00      	nop
 800d444:	3728      	adds	r7, #40	; 0x28
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	40013000 	.word	0x40013000
 800d450:	40023800 	.word	0x40023800
 800d454:	40020400 	.word	0x40020400

0800d458 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance==TIM2)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d468:	d10d      	bne.n	800d486 <HAL_TIM_Base_MspInit+0x2e>
    {
        /* USER CODE BEGIN TIM2_MspInit 0 */

        /* USER CODE END TIM2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	4b09      	ldr	r3, [pc, #36]	; (800d494 <HAL_TIM_Base_MspInit+0x3c>)
 800d470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d472:	4a08      	ldr	r2, [pc, #32]	; (800d494 <HAL_TIM_Base_MspInit+0x3c>)
 800d474:	f043 0301 	orr.w	r3, r3, #1
 800d478:	6413      	str	r3, [r2, #64]	; 0x40
 800d47a:	4b06      	ldr	r3, [pc, #24]	; (800d494 <HAL_TIM_Base_MspInit+0x3c>)
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM2_MspInit 1 */

        /* USER CODE END TIM2_MspInit 1 */
    }

}
 800d486:	bf00      	nop
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	40023800 	.word	0x40023800

0800d498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4a0:	f107 030c 	add.w	r3, r7, #12
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	601a      	str	r2, [r3, #0]
 800d4a8:	605a      	str	r2, [r3, #4]
 800d4aa:	609a      	str	r2, [r3, #8]
 800d4ac:	60da      	str	r2, [r3, #12]
 800d4ae:	611a      	str	r2, [r3, #16]
    if(htim->Instance==TIM2)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4b8:	d11d      	bne.n	800d4f6 <HAL_TIM_MspPostInit+0x5e>
    {
        /* USER CODE BEGIN TIM2_MspPostInit 0 */

        /* USER CODE END TIM2_MspPostInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60bb      	str	r3, [r7, #8]
 800d4be:	4b10      	ldr	r3, [pc, #64]	; (800d500 <HAL_TIM_MspPostInit+0x68>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c2:	4a0f      	ldr	r2, [pc, #60]	; (800d500 <HAL_TIM_MspPostInit+0x68>)
 800d4c4:	f043 0302 	orr.w	r3, r3, #2
 800d4c8:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ca:	4b0d      	ldr	r3, [pc, #52]	; (800d500 <HAL_TIM_MspPostInit+0x68>)
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ce:	f003 0302 	and.w	r3, r3, #2
 800d4d2:	60bb      	str	r3, [r7, #8]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
        /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4 
         */
        GPIO_InitStruct.Pin = FansPWM_Pin;
 800d4d6:	2304      	movs	r3, #4
 800d4d8:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4da:	2302      	movs	r3, #2
 800d4dc:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 800d4ea:	f107 030c 	add.w	r3, r7, #12
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4804      	ldr	r0, [pc, #16]	; (800d504 <HAL_TIM_MspPostInit+0x6c>)
 800d4f2:	f7f4 fa09 	bl	8001908 <HAL_GPIO_Init>
        /* USER CODE BEGIN TIM2_MspPostInit 1 */

        /* USER CODE END TIM2_MspPostInit 1 */
    }

}
 800d4f6:	bf00      	nop
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	40023800 	.word	0x40023800
 800d504:	40020400 	.word	0x40020400

0800d508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d508:	b480      	push	{r7}
 800d50a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d50c:	bf00      	nop
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d516:	b480      	push	{r7}
 800d518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d51a:	e7fe      	b.n	800d51a <HardFault_Handler+0x4>

0800d51c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d520:	e7fe      	b.n	800d520 <MemManage_Handler+0x4>

0800d522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d522:	b480      	push	{r7}
 800d524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d526:	e7fe      	b.n	800d526 <BusFault_Handler+0x4>

0800d528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d528:	b480      	push	{r7}
 800d52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d52c:	e7fe      	b.n	800d52c <UsageFault_Handler+0x4>

0800d52e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d52e:	b480      	push	{r7}
 800d530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d532:	bf00      	nop
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d53c:	b480      	push	{r7}
 800d53e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d540:	bf00      	nop
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d54a:	b480      	push	{r7}
 800d54c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d54e:	bf00      	nop
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d55c:	f7fd ff06 	bl	800b36c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d560:	bf00      	nop
 800d562:	bd80      	pop	{r7, pc}

0800d564 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d568:	4802      	ldr	r0, [pc, #8]	; (800d574 <CAN1_RX0_IRQHandler+0x10>)
 800d56a:	f7f3 fe9c 	bl	80012a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800d56e:	bf00      	nop
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	200000f8 	.word	0x200000f8

0800d578 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800d57c:	4802      	ldr	r0, [pc, #8]	; (800d588 <CAN2_RX1_IRQHandler+0x10>)
 800d57e:	f7f3 fe92 	bl	80012a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800d582:	bf00      	nop
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20000120 	.word	0x20000120

0800d58c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d58c:	b480      	push	{r7}
 800d58e:	af00      	add	r7, sp, #0
	return 1;
 800d590:	2301      	movs	r3, #1
}
 800d592:	4618      	mov	r0, r3
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <_kill>:

int _kill(int pid, int sig)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d5a6:	f000 fab9 	bl	800db1c <__errno>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	2316      	movs	r3, #22
 800d5ae:	6013      	str	r3, [r2, #0]
	return -1;
 800d5b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <_exit>:

void _exit (int status)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d5c4:	f04f 31ff 	mov.w	r1, #4294967295
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff ffe7 	bl	800d59c <_kill>
	while (1) {}		/* Make sure we hang here */
 800d5ce:	e7fe      	b.n	800d5ce <_exit+0x12>

0800d5d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d5dc:	2300      	movs	r3, #0
 800d5de:	617b      	str	r3, [r7, #20]
 800d5e0:	e00a      	b.n	800d5f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d5e2:	f3af 8000 	nop.w
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	60ba      	str	r2, [r7, #8]
 800d5ee:	b2ca      	uxtb	r2, r1
 800d5f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	dbf0      	blt.n	800d5e2 <_read+0x12>
	}

return len;
 800d600:	687b      	ldr	r3, [r7, #4]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b086      	sub	sp, #24
 800d60e:	af00      	add	r7, sp, #0
 800d610:	60f8      	str	r0, [r7, #12]
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d616:	2300      	movs	r3, #0
 800d618:	617b      	str	r3, [r7, #20]
 800d61a:	e009      	b.n	800d630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	60ba      	str	r2, [r7, #8]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	4618      	mov	r0, r3
 800d626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	3301      	adds	r3, #1
 800d62e:	617b      	str	r3, [r7, #20]
 800d630:	697a      	ldr	r2, [r7, #20]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	429a      	cmp	r2, r3
 800d636:	dbf1      	blt.n	800d61c <_write+0x12>
	}
	return len;
 800d638:	687b      	ldr	r3, [r7, #4]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3718      	adds	r7, #24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <_close>:

int _close(int file)
{
 800d642:	b480      	push	{r7}
 800d644:	b083      	sub	sp, #12
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
	return -1;
 800d64a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d66a:	605a      	str	r2, [r3, #4]
	return 0;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <_isatty>:

int _isatty(int file)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b083      	sub	sp, #12
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
	return 1;
 800d682:	2301      	movs	r3, #1
}
 800d684:	4618      	mov	r0, r3
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
	return 0;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
	...

0800d6ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d6b4:	4b11      	ldr	r3, [pc, #68]	; (800d6fc <_sbrk+0x50>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d102      	bne.n	800d6c2 <_sbrk+0x16>
		heap_end = &end;
 800d6bc:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <_sbrk+0x50>)
 800d6be:	4a10      	ldr	r2, [pc, #64]	; (800d700 <_sbrk+0x54>)
 800d6c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d6c2:	4b0e      	ldr	r3, [pc, #56]	; (800d6fc <_sbrk+0x50>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d6c8:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <_sbrk+0x50>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	466a      	mov	r2, sp
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d907      	bls.n	800d6e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d6d6:	f000 fa21 	bl	800db1c <__errno>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	230c      	movs	r3, #12
 800d6de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e4:	e006      	b.n	800d6f4 <_sbrk+0x48>
	}

	heap_end += incr;
 800d6e6:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <_sbrk+0x50>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	4a03      	ldr	r2, [pc, #12]	; (800d6fc <_sbrk+0x50>)
 800d6f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20000288 	.word	0x20000288
 800d700:	20000720 	.word	0x20000720

0800d704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d704:	b480      	push	{r7}
 800d706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d708:	4b16      	ldr	r3, [pc, #88]	; (800d764 <SystemInit+0x60>)
 800d70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d70e:	4a15      	ldr	r2, [pc, #84]	; (800d764 <SystemInit+0x60>)
 800d710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d718:	4b13      	ldr	r3, [pc, #76]	; (800d768 <SystemInit+0x64>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a12      	ldr	r2, [pc, #72]	; (800d768 <SystemInit+0x64>)
 800d71e:	f043 0301 	orr.w	r3, r3, #1
 800d722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d724:	4b10      	ldr	r3, [pc, #64]	; (800d768 <SystemInit+0x64>)
 800d726:	2200      	movs	r2, #0
 800d728:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <SystemInit+0x64>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a0e      	ldr	r2, [pc, #56]	; (800d768 <SystemInit+0x64>)
 800d730:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800d734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d738:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d73a:	4b0b      	ldr	r3, [pc, #44]	; (800d768 <SystemInit+0x64>)
 800d73c:	4a0b      	ldr	r2, [pc, #44]	; (800d76c <SystemInit+0x68>)
 800d73e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d740:	4b09      	ldr	r3, [pc, #36]	; (800d768 <SystemInit+0x64>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a08      	ldr	r2, [pc, #32]	; (800d768 <SystemInit+0x64>)
 800d746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d74a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d74c:	4b06      	ldr	r3, [pc, #24]	; (800d768 <SystemInit+0x64>)
 800d74e:	2200      	movs	r2, #0
 800d750:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d752:	4b04      	ldr	r3, [pc, #16]	; (800d764 <SystemInit+0x60>)
 800d754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d758:	609a      	str	r2, [r3, #8]
#endif
}
 800d75a:	bf00      	nop
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	e000ed00 	.word	0xe000ed00
 800d768:	40023800 	.word	0x40023800
 800d76c:	24003010 	.word	0x24003010

0800d770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d770:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d7a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d776:	e003      	b.n	800d780 <LoopCopyDataInit>

0800d778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d778:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d77a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d77c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d77e:	3104      	adds	r1, #4

0800d780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d780:	480b      	ldr	r0, [pc, #44]	; (800d7b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d788:	d3f6      	bcc.n	800d778 <CopyDataInit>
  ldr  r2, =_sbss
 800d78a:	4a0b      	ldr	r2, [pc, #44]	; (800d7b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d78c:	e002      	b.n	800d794 <LoopFillZerobss>

0800d78e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d78e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d790:	f842 3b04 	str.w	r3, [r2], #4

0800d794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d794:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d798:	d3f9      	bcc.n	800d78e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d79a:	f7ff ffb3 	bl	800d704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d79e:	f000 f9d5 	bl	800db4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d7a2:	f7fd fed7 	bl	800b554 <main>
  bx  lr    
 800d7a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d7a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d7ac:	0800ef48 	.word	0x0800ef48
  ldr  r0, =_sdata
 800d7b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d7b4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800d7b8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800d7bc:	20000720 	.word	0x20000720

0800d7c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d7c0:	e7fe      	b.n	800d7c0 <ADC_IRQHandler>

0800d7c2 <_Znwj>:
 800d7c2:	b510      	push	{r4, lr}
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	bf14      	ite	ne
 800d7c8:	4604      	movne	r4, r0
 800d7ca:	2401      	moveq	r4, #1
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f000 f9e1 	bl	800db94 <malloc>
 800d7d2:	b930      	cbnz	r0, 800d7e2 <_Znwj+0x20>
 800d7d4:	f000 f806 	bl	800d7e4 <_ZSt15get_new_handlerv>
 800d7d8:	b908      	cbnz	r0, 800d7de <_Znwj+0x1c>
 800d7da:	f000 f979 	bl	800dad0 <abort>
 800d7de:	4780      	blx	r0
 800d7e0:	e7f4      	b.n	800d7cc <_Znwj+0xa>
 800d7e2:	bd10      	pop	{r4, pc}

0800d7e4 <_ZSt15get_new_handlerv>:
 800d7e4:	4b02      	ldr	r3, [pc, #8]	; (800d7f0 <_ZSt15get_new_handlerv+0xc>)
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	f3bf 8f5b 	dmb	ish
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	2000028c 	.word	0x2000028c

0800d7f4 <logf>:
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	ed2d 8b02 	vpush	{d8}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	eeb0 8a40 	vmov.f32	s16, s0
 800d800:	f000 f86e 	bl	800d8e0 <__ieee754_logf>
 800d804:	4b31      	ldr	r3, [pc, #196]	; (800d8cc <logf+0xd8>)
 800d806:	f993 4000 	ldrsb.w	r4, [r3]
 800d80a:	1c63      	adds	r3, r4, #1
 800d80c:	d059      	beq.n	800d8c2 <logf+0xce>
 800d80e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d816:	d654      	bvs.n	800d8c2 <logf+0xce>
 800d818:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	dc4f      	bgt.n	800d8c2 <logf+0xce>
 800d822:	4b2b      	ldr	r3, [pc, #172]	; (800d8d0 <logf+0xdc>)
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	ee18 0a10 	vmov	r0, s16
 800d82a:	2300      	movs	r3, #0
 800d82c:	9308      	str	r3, [sp, #32]
 800d82e:	f7f2 fea3 	bl	8000578 <__aeabi_f2d>
 800d832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d83a:	b994      	cbnz	r4, 800d862 <logf+0x6e>
 800d83c:	4b25      	ldr	r3, [pc, #148]	; (800d8d4 <logf+0xe0>)
 800d83e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d842:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d84e:	d025      	beq.n	800d89c <logf+0xa8>
 800d850:	2301      	movs	r3, #1
 800d852:	2c02      	cmp	r4, #2
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	d116      	bne.n	800d886 <logf+0x92>
 800d858:	f000 f960 	bl	800db1c <__errno>
 800d85c:	2321      	movs	r3, #33	; 0x21
 800d85e:	6003      	str	r3, [r0, #0]
 800d860:	e016      	b.n	800d890 <logf+0x9c>
 800d862:	4b1d      	ldr	r3, [pc, #116]	; (800d8d8 <logf+0xe4>)
 800d864:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d868:	2200      	movs	r2, #0
 800d86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d872:	d1ed      	bne.n	800d850 <logf+0x5c>
 800d874:	2302      	movs	r3, #2
 800d876:	429c      	cmp	r4, r3
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	d111      	bne.n	800d8a0 <logf+0xac>
 800d87c:	f000 f94e 	bl	800db1c <__errno>
 800d880:	2322      	movs	r3, #34	; 0x22
 800d882:	6003      	str	r3, [r0, #0]
 800d884:	e011      	b.n	800d8aa <logf+0xb6>
 800d886:	4668      	mov	r0, sp
 800d888:	f000 f918 	bl	800dabc <matherr>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d0e3      	beq.n	800d858 <logf+0x64>
 800d890:	4812      	ldr	r0, [pc, #72]	; (800d8dc <logf+0xe8>)
 800d892:	f000 f915 	bl	800dac0 <nan>
 800d896:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d89a:	e006      	b.n	800d8aa <logf+0xb6>
 800d89c:	2302      	movs	r3, #2
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	4668      	mov	r0, sp
 800d8a2:	f000 f90b 	bl	800dabc <matherr>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d0e8      	beq.n	800d87c <logf+0x88>
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	b11b      	cbz	r3, 800d8b6 <logf+0xc2>
 800d8ae:	f000 f935 	bl	800db1c <__errno>
 800d8b2:	9b08      	ldr	r3, [sp, #32]
 800d8b4:	6003      	str	r3, [r0, #0]
 800d8b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8ba:	f7f2 feb5 	bl	8000628 <__aeabi_d2f>
 800d8be:	ee00 0a10 	vmov	s0, r0
 800d8c2:	b00a      	add	sp, #40	; 0x28
 800d8c4:	ecbd 8b02 	vpop	{d8}
 800d8c8:	bd10      	pop	{r4, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20000028 	.word	0x20000028
 800d8d0:	0800ee58 	.word	0x0800ee58
 800d8d4:	c7efffff 	.word	0xc7efffff
 800d8d8:	fff00000 	.word	0xfff00000
 800d8dc:	0800ee98 	.word	0x0800ee98

0800d8e0 <__ieee754_logf>:
 800d8e0:	ee10 3a10 	vmov	r3, s0
 800d8e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d8e8:	d106      	bne.n	800d8f8 <__ieee754_logf+0x18>
 800d8ea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800da80 <__ieee754_logf+0x1a0>
 800d8ee:	eddf 7a65 	vldr	s15, [pc, #404]	; 800da84 <__ieee754_logf+0x1a4>
 800d8f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d8f6:	4770      	bx	lr
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	da02      	bge.n	800d902 <__ieee754_logf+0x22>
 800d8fc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d900:	e7f5      	b.n	800d8ee <__ieee754_logf+0xe>
 800d902:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d906:	db02      	blt.n	800d90e <__ieee754_logf+0x2e>
 800d908:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d90c:	4770      	bx	lr
 800d90e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d912:	bfbf      	itttt	lt
 800d914:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800da88 <__ieee754_logf+0x1a8>
 800d918:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d91c:	f06f 0118 	mvnlt.w	r1, #24
 800d920:	ee17 3a90 	vmovlt	r3, s15
 800d924:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800d928:	bfa8      	it	ge
 800d92a:	2100      	movge	r1, #0
 800d92c:	3a7f      	subs	r2, #127	; 0x7f
 800d92e:	440a      	add	r2, r1
 800d930:	4956      	ldr	r1, [pc, #344]	; (800da8c <__ieee754_logf+0x1ac>)
 800d932:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d936:	4419      	add	r1, r3
 800d938:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800d93c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800d940:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800d944:	4319      	orrs	r1, r3
 800d946:	ee07 1a90 	vmov	s15, r1
 800d94a:	f103 010f 	add.w	r1, r3, #15
 800d94e:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800d952:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d956:	290f      	cmp	r1, #15
 800d958:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d95c:	dc31      	bgt.n	800d9c2 <__ieee754_logf+0xe2>
 800d95e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d966:	d10f      	bne.n	800d988 <__ieee754_logf+0xa8>
 800d968:	2a00      	cmp	r2, #0
 800d96a:	f000 8085 	beq.w	800da78 <__ieee754_logf+0x198>
 800d96e:	ee07 2a90 	vmov	s15, r2
 800d972:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800da90 <__ieee754_logf+0x1b0>
 800d976:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800da94 <__ieee754_logf+0x1b4>
 800d97a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d97e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d982:	eea7 0a87 	vfma.f32	s0, s15, s14
 800d986:	4770      	bx	lr
 800d988:	eddf 7a43 	vldr	s15, [pc, #268]	; 800da98 <__ieee754_logf+0x1b8>
 800d98c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d990:	eea0 7a67 	vfms.f32	s14, s0, s15
 800d994:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d99c:	b912      	cbnz	r2, 800d9a4 <__ieee754_logf+0xc4>
 800d99e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d9a2:	4770      	bx	lr
 800d9a4:	ee07 2a90 	vmov	s15, r2
 800d9a8:	eddf 6a39 	vldr	s13, [pc, #228]	; 800da90 <__ieee754_logf+0x1b0>
 800d9ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9b0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d9b4:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d9b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800da94 <__ieee754_logf+0x1b4>
 800d9bc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800d9c0:	4770      	bx	lr
 800d9c2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d9c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d9ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800da9c <__ieee754_logf+0x1bc>
 800d9ce:	eddf 4a34 	vldr	s9, [pc, #208]	; 800daa0 <__ieee754_logf+0x1c0>
 800d9d2:	4934      	ldr	r1, [pc, #208]	; (800daa4 <__ieee754_logf+0x1c4>)
 800d9d4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800d9d8:	4419      	add	r1, r3
 800d9da:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800d9de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d9e2:	430b      	orrs	r3, r1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	ee07 2a90 	vmov	s15, r2
 800d9ea:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d9ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d9f2:	ee25 7a05 	vmul.f32	s14, s10, s10
 800d9f6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800daa8 <__ieee754_logf+0x1c8>
 800d9fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d9fe:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800daac <__ieee754_logf+0x1cc>
 800da02:	eee7 5a87 	vfma.f32	s11, s15, s14
 800da06:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800dab0 <__ieee754_logf+0x1d0>
 800da0a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800da0e:	eddf 4a29 	vldr	s9, [pc, #164]	; 800dab4 <__ieee754_logf+0x1d4>
 800da12:	eee7 4a87 	vfma.f32	s9, s15, s14
 800da16:	eddf 7a28 	vldr	s15, [pc, #160]	; 800dab8 <__ieee754_logf+0x1d8>
 800da1a:	eee4 7a87 	vfma.f32	s15, s9, s14
 800da1e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800da22:	eee5 7a87 	vfma.f32	s15, s11, s14
 800da26:	dd1c      	ble.n	800da62 <__ieee754_logf+0x182>
 800da28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800da2c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800da30:	ee27 7a00 	vmul.f32	s14, s14, s0
 800da34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da38:	ee67 7a86 	vmul.f32	s15, s15, s12
 800da3c:	b922      	cbnz	r2, 800da48 <__ieee754_logf+0x168>
 800da3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da42:	ee30 0a67 	vsub.f32	s0, s0, s15
 800da46:	4770      	bx	lr
 800da48:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800da90 <__ieee754_logf+0x1b0>
 800da4c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800da50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800da58:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800da94 <__ieee754_logf+0x1b4>
 800da5c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800da60:	4770      	bx	lr
 800da62:	ee70 7a67 	vsub.f32	s15, s0, s15
 800da66:	ee67 7a86 	vmul.f32	s15, s15, s12
 800da6a:	2a00      	cmp	r2, #0
 800da6c:	d0e9      	beq.n	800da42 <__ieee754_logf+0x162>
 800da6e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800da90 <__ieee754_logf+0x1b0>
 800da72:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da76:	e7ed      	b.n	800da54 <__ieee754_logf+0x174>
 800da78:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800da84 <__ieee754_logf+0x1a4>
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	cc000000 	.word	0xcc000000
 800da84:	00000000 	.word	0x00000000
 800da88:	4c000000 	.word	0x4c000000
 800da8c:	004afb20 	.word	0x004afb20
 800da90:	3717f7d1 	.word	0x3717f7d1
 800da94:	3f317180 	.word	0x3f317180
 800da98:	3eaaaaab 	.word	0x3eaaaaab
 800da9c:	3e1cd04f 	.word	0x3e1cd04f
 800daa0:	3e178897 	.word	0x3e178897
 800daa4:	ffcf5c30 	.word	0xffcf5c30
 800daa8:	3e638e29 	.word	0x3e638e29
 800daac:	3ecccccd 	.word	0x3ecccccd
 800dab0:	3e3a3325 	.word	0x3e3a3325
 800dab4:	3e924925 	.word	0x3e924925
 800dab8:	3f2aaaab 	.word	0x3f2aaaab

0800dabc <matherr>:
 800dabc:	2000      	movs	r0, #0
 800dabe:	4770      	bx	lr

0800dac0 <nan>:
 800dac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dac8 <nan+0x8>
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	00000000 	.word	0x00000000
 800dacc:	7ff80000 	.word	0x7ff80000

0800dad0 <abort>:
 800dad0:	b508      	push	{r3, lr}
 800dad2:	2006      	movs	r0, #6
 800dad4:	f000 fc16 	bl	800e304 <raise>
 800dad8:	2001      	movs	r0, #1
 800dada:	f7ff fd6f 	bl	800d5bc <_exit>
	...

0800dae0 <__assert_func>:
 800dae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dae2:	461c      	mov	r4, r3
 800dae4:	4b09      	ldr	r3, [pc, #36]	; (800db0c <__assert_func+0x2c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4605      	mov	r5, r0
 800daea:	68d8      	ldr	r0, [r3, #12]
 800daec:	b152      	cbz	r2, 800db04 <__assert_func+0x24>
 800daee:	4b08      	ldr	r3, [pc, #32]	; (800db10 <__assert_func+0x30>)
 800daf0:	9100      	str	r1, [sp, #0]
 800daf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800daf6:	4907      	ldr	r1, [pc, #28]	; (800db14 <__assert_func+0x34>)
 800daf8:	462b      	mov	r3, r5
 800dafa:	4622      	mov	r2, r4
 800dafc:	f000 f814 	bl	800db28 <fiprintf>
 800db00:	f7ff ffe6 	bl	800dad0 <abort>
 800db04:	4b04      	ldr	r3, [pc, #16]	; (800db18 <__assert_func+0x38>)
 800db06:	461a      	mov	r2, r3
 800db08:	e7f2      	b.n	800daf0 <__assert_func+0x10>
 800db0a:	bf00      	nop
 800db0c:	2000002c 	.word	0x2000002c
 800db10:	0800ee5d 	.word	0x0800ee5d
 800db14:	0800ee6a 	.word	0x0800ee6a
 800db18:	0800ee98 	.word	0x0800ee98

0800db1c <__errno>:
 800db1c:	4b01      	ldr	r3, [pc, #4]	; (800db24 <__errno+0x8>)
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	2000002c 	.word	0x2000002c

0800db28 <fiprintf>:
 800db28:	b40e      	push	{r1, r2, r3}
 800db2a:	b503      	push	{r0, r1, lr}
 800db2c:	4601      	mov	r1, r0
 800db2e:	ab03      	add	r3, sp, #12
 800db30:	4805      	ldr	r0, [pc, #20]	; (800db48 <fiprintf+0x20>)
 800db32:	f853 2b04 	ldr.w	r2, [r3], #4
 800db36:	6800      	ldr	r0, [r0, #0]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	f000 f90d 	bl	800dd58 <_vfiprintf_r>
 800db3e:	b002      	add	sp, #8
 800db40:	f85d eb04 	ldr.w	lr, [sp], #4
 800db44:	b003      	add	sp, #12
 800db46:	4770      	bx	lr
 800db48:	2000002c 	.word	0x2000002c

0800db4c <__libc_init_array>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	4e0d      	ldr	r6, [pc, #52]	; (800db84 <__libc_init_array+0x38>)
 800db50:	4c0d      	ldr	r4, [pc, #52]	; (800db88 <__libc_init_array+0x3c>)
 800db52:	1ba4      	subs	r4, r4, r6
 800db54:	10a4      	asrs	r4, r4, #2
 800db56:	2500      	movs	r5, #0
 800db58:	42a5      	cmp	r5, r4
 800db5a:	d109      	bne.n	800db70 <__libc_init_array+0x24>
 800db5c:	4e0b      	ldr	r6, [pc, #44]	; (800db8c <__libc_init_array+0x40>)
 800db5e:	4c0c      	ldr	r4, [pc, #48]	; (800db90 <__libc_init_array+0x44>)
 800db60:	f000 ff38 	bl	800e9d4 <_init>
 800db64:	1ba4      	subs	r4, r4, r6
 800db66:	10a4      	asrs	r4, r4, #2
 800db68:	2500      	movs	r5, #0
 800db6a:	42a5      	cmp	r5, r4
 800db6c:	d105      	bne.n	800db7a <__libc_init_array+0x2e>
 800db6e:	bd70      	pop	{r4, r5, r6, pc}
 800db70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db74:	4798      	blx	r3
 800db76:	3501      	adds	r5, #1
 800db78:	e7ee      	b.n	800db58 <__libc_init_array+0xc>
 800db7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db7e:	4798      	blx	r3
 800db80:	3501      	adds	r5, #1
 800db82:	e7f2      	b.n	800db6a <__libc_init_array+0x1e>
 800db84:	0800ef3c 	.word	0x0800ef3c
 800db88:	0800ef3c 	.word	0x0800ef3c
 800db8c:	0800ef3c 	.word	0x0800ef3c
 800db90:	0800ef44 	.word	0x0800ef44

0800db94 <malloc>:
 800db94:	4b02      	ldr	r3, [pc, #8]	; (800dba0 <malloc+0xc>)
 800db96:	4601      	mov	r1, r0
 800db98:	6818      	ldr	r0, [r3, #0]
 800db9a:	f000 b859 	b.w	800dc50 <_malloc_r>
 800db9e:	bf00      	nop
 800dba0:	2000002c 	.word	0x2000002c

0800dba4 <memset>:
 800dba4:	4402      	add	r2, r0
 800dba6:	4603      	mov	r3, r0
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d100      	bne.n	800dbae <memset+0xa>
 800dbac:	4770      	bx	lr
 800dbae:	f803 1b01 	strb.w	r1, [r3], #1
 800dbb2:	e7f9      	b.n	800dba8 <memset+0x4>

0800dbb4 <_free_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d045      	beq.n	800dc48 <_free_r+0x94>
 800dbbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc0:	1f0c      	subs	r4, r1, #4
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	bfb8      	it	lt
 800dbc6:	18e4      	addlt	r4, r4, r3
 800dbc8:	f000 fe56 	bl	800e878 <__malloc_lock>
 800dbcc:	4a1f      	ldr	r2, [pc, #124]	; (800dc4c <_free_r+0x98>)
 800dbce:	6813      	ldr	r3, [r2, #0]
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	b933      	cbnz	r3, 800dbe2 <_free_r+0x2e>
 800dbd4:	6063      	str	r3, [r4, #4]
 800dbd6:	6014      	str	r4, [r2, #0]
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbde:	f000 be4c 	b.w	800e87a <__malloc_unlock>
 800dbe2:	42a3      	cmp	r3, r4
 800dbe4:	d90c      	bls.n	800dc00 <_free_r+0x4c>
 800dbe6:	6821      	ldr	r1, [r4, #0]
 800dbe8:	1862      	adds	r2, r4, r1
 800dbea:	4293      	cmp	r3, r2
 800dbec:	bf04      	itt	eq
 800dbee:	681a      	ldreq	r2, [r3, #0]
 800dbf0:	685b      	ldreq	r3, [r3, #4]
 800dbf2:	6063      	str	r3, [r4, #4]
 800dbf4:	bf04      	itt	eq
 800dbf6:	1852      	addeq	r2, r2, r1
 800dbf8:	6022      	streq	r2, [r4, #0]
 800dbfa:	6004      	str	r4, [r0, #0]
 800dbfc:	e7ec      	b.n	800dbd8 <_free_r+0x24>
 800dbfe:	4613      	mov	r3, r2
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	b10a      	cbz	r2, 800dc08 <_free_r+0x54>
 800dc04:	42a2      	cmp	r2, r4
 800dc06:	d9fa      	bls.n	800dbfe <_free_r+0x4a>
 800dc08:	6819      	ldr	r1, [r3, #0]
 800dc0a:	1858      	adds	r0, r3, r1
 800dc0c:	42a0      	cmp	r0, r4
 800dc0e:	d10b      	bne.n	800dc28 <_free_r+0x74>
 800dc10:	6820      	ldr	r0, [r4, #0]
 800dc12:	4401      	add	r1, r0
 800dc14:	1858      	adds	r0, r3, r1
 800dc16:	4282      	cmp	r2, r0
 800dc18:	6019      	str	r1, [r3, #0]
 800dc1a:	d1dd      	bne.n	800dbd8 <_free_r+0x24>
 800dc1c:	6810      	ldr	r0, [r2, #0]
 800dc1e:	6852      	ldr	r2, [r2, #4]
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	4401      	add	r1, r0
 800dc24:	6019      	str	r1, [r3, #0]
 800dc26:	e7d7      	b.n	800dbd8 <_free_r+0x24>
 800dc28:	d902      	bls.n	800dc30 <_free_r+0x7c>
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	602b      	str	r3, [r5, #0]
 800dc2e:	e7d3      	b.n	800dbd8 <_free_r+0x24>
 800dc30:	6820      	ldr	r0, [r4, #0]
 800dc32:	1821      	adds	r1, r4, r0
 800dc34:	428a      	cmp	r2, r1
 800dc36:	bf04      	itt	eq
 800dc38:	6811      	ldreq	r1, [r2, #0]
 800dc3a:	6852      	ldreq	r2, [r2, #4]
 800dc3c:	6062      	str	r2, [r4, #4]
 800dc3e:	bf04      	itt	eq
 800dc40:	1809      	addeq	r1, r1, r0
 800dc42:	6021      	streq	r1, [r4, #0]
 800dc44:	605c      	str	r4, [r3, #4]
 800dc46:	e7c7      	b.n	800dbd8 <_free_r+0x24>
 800dc48:	bd38      	pop	{r3, r4, r5, pc}
 800dc4a:	bf00      	nop
 800dc4c:	20000290 	.word	0x20000290

0800dc50 <_malloc_r>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	1ccd      	adds	r5, r1, #3
 800dc54:	f025 0503 	bic.w	r5, r5, #3
 800dc58:	3508      	adds	r5, #8
 800dc5a:	2d0c      	cmp	r5, #12
 800dc5c:	bf38      	it	cc
 800dc5e:	250c      	movcc	r5, #12
 800dc60:	2d00      	cmp	r5, #0
 800dc62:	4606      	mov	r6, r0
 800dc64:	db01      	blt.n	800dc6a <_malloc_r+0x1a>
 800dc66:	42a9      	cmp	r1, r5
 800dc68:	d903      	bls.n	800dc72 <_malloc_r+0x22>
 800dc6a:	230c      	movs	r3, #12
 800dc6c:	6033      	str	r3, [r6, #0]
 800dc6e:	2000      	movs	r0, #0
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	f000 fe01 	bl	800e878 <__malloc_lock>
 800dc76:	4a21      	ldr	r2, [pc, #132]	; (800dcfc <_malloc_r+0xac>)
 800dc78:	6814      	ldr	r4, [r2, #0]
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	b991      	cbnz	r1, 800dca4 <_malloc_r+0x54>
 800dc7e:	4c20      	ldr	r4, [pc, #128]	; (800dd00 <_malloc_r+0xb0>)
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	b91b      	cbnz	r3, 800dc8c <_malloc_r+0x3c>
 800dc84:	4630      	mov	r0, r6
 800dc86:	f000 fb05 	bl	800e294 <_sbrk_r>
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f000 fb00 	bl	800e294 <_sbrk_r>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d124      	bne.n	800dce2 <_malloc_r+0x92>
 800dc98:	230c      	movs	r3, #12
 800dc9a:	6033      	str	r3, [r6, #0]
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f000 fdec 	bl	800e87a <__malloc_unlock>
 800dca2:	e7e4      	b.n	800dc6e <_malloc_r+0x1e>
 800dca4:	680b      	ldr	r3, [r1, #0]
 800dca6:	1b5b      	subs	r3, r3, r5
 800dca8:	d418      	bmi.n	800dcdc <_malloc_r+0x8c>
 800dcaa:	2b0b      	cmp	r3, #11
 800dcac:	d90f      	bls.n	800dcce <_malloc_r+0x7e>
 800dcae:	600b      	str	r3, [r1, #0]
 800dcb0:	50cd      	str	r5, [r1, r3]
 800dcb2:	18cc      	adds	r4, r1, r3
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f000 fde0 	bl	800e87a <__malloc_unlock>
 800dcba:	f104 000b 	add.w	r0, r4, #11
 800dcbe:	1d23      	adds	r3, r4, #4
 800dcc0:	f020 0007 	bic.w	r0, r0, #7
 800dcc4:	1ac3      	subs	r3, r0, r3
 800dcc6:	d0d3      	beq.n	800dc70 <_malloc_r+0x20>
 800dcc8:	425a      	negs	r2, r3
 800dcca:	50e2      	str	r2, [r4, r3]
 800dccc:	e7d0      	b.n	800dc70 <_malloc_r+0x20>
 800dcce:	428c      	cmp	r4, r1
 800dcd0:	684b      	ldr	r3, [r1, #4]
 800dcd2:	bf16      	itet	ne
 800dcd4:	6063      	strne	r3, [r4, #4]
 800dcd6:	6013      	streq	r3, [r2, #0]
 800dcd8:	460c      	movne	r4, r1
 800dcda:	e7eb      	b.n	800dcb4 <_malloc_r+0x64>
 800dcdc:	460c      	mov	r4, r1
 800dcde:	6849      	ldr	r1, [r1, #4]
 800dce0:	e7cc      	b.n	800dc7c <_malloc_r+0x2c>
 800dce2:	1cc4      	adds	r4, r0, #3
 800dce4:	f024 0403 	bic.w	r4, r4, #3
 800dce8:	42a0      	cmp	r0, r4
 800dcea:	d005      	beq.n	800dcf8 <_malloc_r+0xa8>
 800dcec:	1a21      	subs	r1, r4, r0
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f000 fad0 	bl	800e294 <_sbrk_r>
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d0cf      	beq.n	800dc98 <_malloc_r+0x48>
 800dcf8:	6025      	str	r5, [r4, #0]
 800dcfa:	e7db      	b.n	800dcb4 <_malloc_r+0x64>
 800dcfc:	20000290 	.word	0x20000290
 800dd00:	20000294 	.word	0x20000294

0800dd04 <__sfputc_r>:
 800dd04:	6893      	ldr	r3, [r2, #8]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	b410      	push	{r4}
 800dd0c:	6093      	str	r3, [r2, #8]
 800dd0e:	da08      	bge.n	800dd22 <__sfputc_r+0x1e>
 800dd10:	6994      	ldr	r4, [r2, #24]
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	db01      	blt.n	800dd1a <__sfputc_r+0x16>
 800dd16:	290a      	cmp	r1, #10
 800dd18:	d103      	bne.n	800dd22 <__sfputc_r+0x1e>
 800dd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd1e:	f000 bb0d 	b.w	800e33c <__swbuf_r>
 800dd22:	6813      	ldr	r3, [r2, #0]
 800dd24:	1c58      	adds	r0, r3, #1
 800dd26:	6010      	str	r0, [r2, #0]
 800dd28:	7019      	strb	r1, [r3, #0]
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <__sfputs_r>:
 800dd32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	4614      	mov	r4, r2
 800dd3a:	18d5      	adds	r5, r2, r3
 800dd3c:	42ac      	cmp	r4, r5
 800dd3e:	d101      	bne.n	800dd44 <__sfputs_r+0x12>
 800dd40:	2000      	movs	r0, #0
 800dd42:	e007      	b.n	800dd54 <__sfputs_r+0x22>
 800dd44:	463a      	mov	r2, r7
 800dd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7ff ffda 	bl	800dd04 <__sfputc_r>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d1f3      	bne.n	800dd3c <__sfputs_r+0xa>
 800dd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd58 <_vfiprintf_r>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	b09d      	sub	sp, #116	; 0x74
 800dd60:	4617      	mov	r7, r2
 800dd62:	461d      	mov	r5, r3
 800dd64:	4606      	mov	r6, r0
 800dd66:	b118      	cbz	r0, 800dd70 <_vfiprintf_r+0x18>
 800dd68:	6983      	ldr	r3, [r0, #24]
 800dd6a:	b90b      	cbnz	r3, 800dd70 <_vfiprintf_r+0x18>
 800dd6c:	f000 fc96 	bl	800e69c <__sinit>
 800dd70:	4b7c      	ldr	r3, [pc, #496]	; (800df64 <_vfiprintf_r+0x20c>)
 800dd72:	429c      	cmp	r4, r3
 800dd74:	d158      	bne.n	800de28 <_vfiprintf_r+0xd0>
 800dd76:	6874      	ldr	r4, [r6, #4]
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	0718      	lsls	r0, r3, #28
 800dd7c:	d55e      	bpl.n	800de3c <_vfiprintf_r+0xe4>
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d05b      	beq.n	800de3c <_vfiprintf_r+0xe4>
 800dd84:	2300      	movs	r3, #0
 800dd86:	9309      	str	r3, [sp, #36]	; 0x24
 800dd88:	2320      	movs	r3, #32
 800dd8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd8e:	2330      	movs	r3, #48	; 0x30
 800dd90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd94:	9503      	str	r5, [sp, #12]
 800dd96:	f04f 0b01 	mov.w	fp, #1
 800dd9a:	46b8      	mov	r8, r7
 800dd9c:	4645      	mov	r5, r8
 800dd9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dda2:	b10b      	cbz	r3, 800dda8 <_vfiprintf_r+0x50>
 800dda4:	2b25      	cmp	r3, #37	; 0x25
 800dda6:	d154      	bne.n	800de52 <_vfiprintf_r+0xfa>
 800dda8:	ebb8 0a07 	subs.w	sl, r8, r7
 800ddac:	d00b      	beq.n	800ddc6 <_vfiprintf_r+0x6e>
 800ddae:	4653      	mov	r3, sl
 800ddb0:	463a      	mov	r2, r7
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7ff ffbc 	bl	800dd32 <__sfputs_r>
 800ddba:	3001      	adds	r0, #1
 800ddbc:	f000 80c2 	beq.w	800df44 <_vfiprintf_r+0x1ec>
 800ddc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc2:	4453      	add	r3, sl
 800ddc4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc6:	f898 3000 	ldrb.w	r3, [r8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 80ba 	beq.w	800df44 <_vfiprintf_r+0x1ec>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	9307      	str	r3, [sp, #28]
 800ddde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dde2:	931a      	str	r3, [sp, #104]	; 0x68
 800dde4:	46a8      	mov	r8, r5
 800dde6:	2205      	movs	r2, #5
 800dde8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ddec:	485e      	ldr	r0, [pc, #376]	; (800df68 <_vfiprintf_r+0x210>)
 800ddee:	f7f2 fa0f 	bl	8000210 <memchr>
 800ddf2:	9b04      	ldr	r3, [sp, #16]
 800ddf4:	bb78      	cbnz	r0, 800de56 <_vfiprintf_r+0xfe>
 800ddf6:	06d9      	lsls	r1, r3, #27
 800ddf8:	bf44      	itt	mi
 800ddfa:	2220      	movmi	r2, #32
 800ddfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de00:	071a      	lsls	r2, r3, #28
 800de02:	bf44      	itt	mi
 800de04:	222b      	movmi	r2, #43	; 0x2b
 800de06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de0a:	782a      	ldrb	r2, [r5, #0]
 800de0c:	2a2a      	cmp	r2, #42	; 0x2a
 800de0e:	d02a      	beq.n	800de66 <_vfiprintf_r+0x10e>
 800de10:	9a07      	ldr	r2, [sp, #28]
 800de12:	46a8      	mov	r8, r5
 800de14:	2000      	movs	r0, #0
 800de16:	250a      	movs	r5, #10
 800de18:	4641      	mov	r1, r8
 800de1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de1e:	3b30      	subs	r3, #48	; 0x30
 800de20:	2b09      	cmp	r3, #9
 800de22:	d969      	bls.n	800def8 <_vfiprintf_r+0x1a0>
 800de24:	b360      	cbz	r0, 800de80 <_vfiprintf_r+0x128>
 800de26:	e024      	b.n	800de72 <_vfiprintf_r+0x11a>
 800de28:	4b50      	ldr	r3, [pc, #320]	; (800df6c <_vfiprintf_r+0x214>)
 800de2a:	429c      	cmp	r4, r3
 800de2c:	d101      	bne.n	800de32 <_vfiprintf_r+0xda>
 800de2e:	68b4      	ldr	r4, [r6, #8]
 800de30:	e7a2      	b.n	800dd78 <_vfiprintf_r+0x20>
 800de32:	4b4f      	ldr	r3, [pc, #316]	; (800df70 <_vfiprintf_r+0x218>)
 800de34:	429c      	cmp	r4, r3
 800de36:	bf08      	it	eq
 800de38:	68f4      	ldreq	r4, [r6, #12]
 800de3a:	e79d      	b.n	800dd78 <_vfiprintf_r+0x20>
 800de3c:	4621      	mov	r1, r4
 800de3e:	4630      	mov	r0, r6
 800de40:	f000 face 	bl	800e3e0 <__swsetup_r>
 800de44:	2800      	cmp	r0, #0
 800de46:	d09d      	beq.n	800dd84 <_vfiprintf_r+0x2c>
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	b01d      	add	sp, #116	; 0x74
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	46a8      	mov	r8, r5
 800de54:	e7a2      	b.n	800dd9c <_vfiprintf_r+0x44>
 800de56:	4a44      	ldr	r2, [pc, #272]	; (800df68 <_vfiprintf_r+0x210>)
 800de58:	1a80      	subs	r0, r0, r2
 800de5a:	fa0b f000 	lsl.w	r0, fp, r0
 800de5e:	4318      	orrs	r0, r3
 800de60:	9004      	str	r0, [sp, #16]
 800de62:	4645      	mov	r5, r8
 800de64:	e7be      	b.n	800dde4 <_vfiprintf_r+0x8c>
 800de66:	9a03      	ldr	r2, [sp, #12]
 800de68:	1d11      	adds	r1, r2, #4
 800de6a:	6812      	ldr	r2, [r2, #0]
 800de6c:	9103      	str	r1, [sp, #12]
 800de6e:	2a00      	cmp	r2, #0
 800de70:	db01      	blt.n	800de76 <_vfiprintf_r+0x11e>
 800de72:	9207      	str	r2, [sp, #28]
 800de74:	e004      	b.n	800de80 <_vfiprintf_r+0x128>
 800de76:	4252      	negs	r2, r2
 800de78:	f043 0302 	orr.w	r3, r3, #2
 800de7c:	9207      	str	r2, [sp, #28]
 800de7e:	9304      	str	r3, [sp, #16]
 800de80:	f898 3000 	ldrb.w	r3, [r8]
 800de84:	2b2e      	cmp	r3, #46	; 0x2e
 800de86:	d10e      	bne.n	800dea6 <_vfiprintf_r+0x14e>
 800de88:	f898 3001 	ldrb.w	r3, [r8, #1]
 800de8c:	2b2a      	cmp	r3, #42	; 0x2a
 800de8e:	d138      	bne.n	800df02 <_vfiprintf_r+0x1aa>
 800de90:	9b03      	ldr	r3, [sp, #12]
 800de92:	1d1a      	adds	r2, r3, #4
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	9203      	str	r2, [sp, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	bfb8      	it	lt
 800de9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dea0:	f108 0802 	add.w	r8, r8, #2
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	4d33      	ldr	r5, [pc, #204]	; (800df74 <_vfiprintf_r+0x21c>)
 800dea8:	f898 1000 	ldrb.w	r1, [r8]
 800deac:	2203      	movs	r2, #3
 800deae:	4628      	mov	r0, r5
 800deb0:	f7f2 f9ae 	bl	8000210 <memchr>
 800deb4:	b140      	cbz	r0, 800dec8 <_vfiprintf_r+0x170>
 800deb6:	2340      	movs	r3, #64	; 0x40
 800deb8:	1b40      	subs	r0, r0, r5
 800deba:	fa03 f000 	lsl.w	r0, r3, r0
 800debe:	9b04      	ldr	r3, [sp, #16]
 800dec0:	4303      	orrs	r3, r0
 800dec2:	f108 0801 	add.w	r8, r8, #1
 800dec6:	9304      	str	r3, [sp, #16]
 800dec8:	f898 1000 	ldrb.w	r1, [r8]
 800decc:	482a      	ldr	r0, [pc, #168]	; (800df78 <_vfiprintf_r+0x220>)
 800dece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ded2:	2206      	movs	r2, #6
 800ded4:	f108 0701 	add.w	r7, r8, #1
 800ded8:	f7f2 f99a 	bl	8000210 <memchr>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d037      	beq.n	800df50 <_vfiprintf_r+0x1f8>
 800dee0:	4b26      	ldr	r3, [pc, #152]	; (800df7c <_vfiprintf_r+0x224>)
 800dee2:	bb1b      	cbnz	r3, 800df2c <_vfiprintf_r+0x1d4>
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	3307      	adds	r3, #7
 800dee8:	f023 0307 	bic.w	r3, r3, #7
 800deec:	3308      	adds	r3, #8
 800deee:	9303      	str	r3, [sp, #12]
 800def0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def2:	444b      	add	r3, r9
 800def4:	9309      	str	r3, [sp, #36]	; 0x24
 800def6:	e750      	b.n	800dd9a <_vfiprintf_r+0x42>
 800def8:	fb05 3202 	mla	r2, r5, r2, r3
 800defc:	2001      	movs	r0, #1
 800defe:	4688      	mov	r8, r1
 800df00:	e78a      	b.n	800de18 <_vfiprintf_r+0xc0>
 800df02:	2300      	movs	r3, #0
 800df04:	f108 0801 	add.w	r8, r8, #1
 800df08:	9305      	str	r3, [sp, #20]
 800df0a:	4619      	mov	r1, r3
 800df0c:	250a      	movs	r5, #10
 800df0e:	4640      	mov	r0, r8
 800df10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df14:	3a30      	subs	r2, #48	; 0x30
 800df16:	2a09      	cmp	r2, #9
 800df18:	d903      	bls.n	800df22 <_vfiprintf_r+0x1ca>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0c3      	beq.n	800dea6 <_vfiprintf_r+0x14e>
 800df1e:	9105      	str	r1, [sp, #20]
 800df20:	e7c1      	b.n	800dea6 <_vfiprintf_r+0x14e>
 800df22:	fb05 2101 	mla	r1, r5, r1, r2
 800df26:	2301      	movs	r3, #1
 800df28:	4680      	mov	r8, r0
 800df2a:	e7f0      	b.n	800df0e <_vfiprintf_r+0x1b6>
 800df2c:	ab03      	add	r3, sp, #12
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	4622      	mov	r2, r4
 800df32:	4b13      	ldr	r3, [pc, #76]	; (800df80 <_vfiprintf_r+0x228>)
 800df34:	a904      	add	r1, sp, #16
 800df36:	4630      	mov	r0, r6
 800df38:	f3af 8000 	nop.w
 800df3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800df40:	4681      	mov	r9, r0
 800df42:	d1d5      	bne.n	800def0 <_vfiprintf_r+0x198>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	065b      	lsls	r3, r3, #25
 800df48:	f53f af7e 	bmi.w	800de48 <_vfiprintf_r+0xf0>
 800df4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df4e:	e77d      	b.n	800de4c <_vfiprintf_r+0xf4>
 800df50:	ab03      	add	r3, sp, #12
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	4622      	mov	r2, r4
 800df56:	4b0a      	ldr	r3, [pc, #40]	; (800df80 <_vfiprintf_r+0x228>)
 800df58:	a904      	add	r1, sp, #16
 800df5a:	4630      	mov	r0, r6
 800df5c:	f000 f888 	bl	800e070 <_printf_i>
 800df60:	e7ec      	b.n	800df3c <_vfiprintf_r+0x1e4>
 800df62:	bf00      	nop
 800df64:	0800eef4 	.word	0x0800eef4
 800df68:	0800eea0 	.word	0x0800eea0
 800df6c:	0800ef14 	.word	0x0800ef14
 800df70:	0800eed4 	.word	0x0800eed4
 800df74:	0800eea6 	.word	0x0800eea6
 800df78:	0800eeaa 	.word	0x0800eeaa
 800df7c:	00000000 	.word	0x00000000
 800df80:	0800dd33 	.word	0x0800dd33

0800df84 <_printf_common>:
 800df84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df88:	4691      	mov	r9, r2
 800df8a:	461f      	mov	r7, r3
 800df8c:	688a      	ldr	r2, [r1, #8]
 800df8e:	690b      	ldr	r3, [r1, #16]
 800df90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df94:	4293      	cmp	r3, r2
 800df96:	bfb8      	it	lt
 800df98:	4613      	movlt	r3, r2
 800df9a:	f8c9 3000 	str.w	r3, [r9]
 800df9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	b112      	cbz	r2, 800dfae <_printf_common+0x2a>
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	f8c9 3000 	str.w	r3, [r9]
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	0699      	lsls	r1, r3, #26
 800dfb2:	bf42      	ittt	mi
 800dfb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dfb8:	3302      	addmi	r3, #2
 800dfba:	f8c9 3000 	strmi.w	r3, [r9]
 800dfbe:	6825      	ldr	r5, [r4, #0]
 800dfc0:	f015 0506 	ands.w	r5, r5, #6
 800dfc4:	d107      	bne.n	800dfd6 <_printf_common+0x52>
 800dfc6:	f104 0a19 	add.w	sl, r4, #25
 800dfca:	68e3      	ldr	r3, [r4, #12]
 800dfcc:	f8d9 2000 	ldr.w	r2, [r9]
 800dfd0:	1a9b      	subs	r3, r3, r2
 800dfd2:	42ab      	cmp	r3, r5
 800dfd4:	dc28      	bgt.n	800e028 <_printf_common+0xa4>
 800dfd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	3300      	adds	r3, #0
 800dfde:	bf18      	it	ne
 800dfe0:	2301      	movne	r3, #1
 800dfe2:	0692      	lsls	r2, r2, #26
 800dfe4:	d42d      	bmi.n	800e042 <_printf_common+0xbe>
 800dfe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfea:	4639      	mov	r1, r7
 800dfec:	4630      	mov	r0, r6
 800dfee:	47c0      	blx	r8
 800dff0:	3001      	adds	r0, #1
 800dff2:	d020      	beq.n	800e036 <_printf_common+0xb2>
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	68e5      	ldr	r5, [r4, #12]
 800dff8:	f8d9 2000 	ldr.w	r2, [r9]
 800dffc:	f003 0306 	and.w	r3, r3, #6
 800e000:	2b04      	cmp	r3, #4
 800e002:	bf08      	it	eq
 800e004:	1aad      	subeq	r5, r5, r2
 800e006:	68a3      	ldr	r3, [r4, #8]
 800e008:	6922      	ldr	r2, [r4, #16]
 800e00a:	bf0c      	ite	eq
 800e00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e010:	2500      	movne	r5, #0
 800e012:	4293      	cmp	r3, r2
 800e014:	bfc4      	itt	gt
 800e016:	1a9b      	subgt	r3, r3, r2
 800e018:	18ed      	addgt	r5, r5, r3
 800e01a:	f04f 0900 	mov.w	r9, #0
 800e01e:	341a      	adds	r4, #26
 800e020:	454d      	cmp	r5, r9
 800e022:	d11a      	bne.n	800e05a <_printf_common+0xd6>
 800e024:	2000      	movs	r0, #0
 800e026:	e008      	b.n	800e03a <_printf_common+0xb6>
 800e028:	2301      	movs	r3, #1
 800e02a:	4652      	mov	r2, sl
 800e02c:	4639      	mov	r1, r7
 800e02e:	4630      	mov	r0, r6
 800e030:	47c0      	blx	r8
 800e032:	3001      	adds	r0, #1
 800e034:	d103      	bne.n	800e03e <_printf_common+0xba>
 800e036:	f04f 30ff 	mov.w	r0, #4294967295
 800e03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e03e:	3501      	adds	r5, #1
 800e040:	e7c3      	b.n	800dfca <_printf_common+0x46>
 800e042:	18e1      	adds	r1, r4, r3
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	2030      	movs	r0, #48	; 0x30
 800e048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e04c:	4422      	add	r2, r4
 800e04e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e052:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e056:	3302      	adds	r3, #2
 800e058:	e7c5      	b.n	800dfe6 <_printf_common+0x62>
 800e05a:	2301      	movs	r3, #1
 800e05c:	4622      	mov	r2, r4
 800e05e:	4639      	mov	r1, r7
 800e060:	4630      	mov	r0, r6
 800e062:	47c0      	blx	r8
 800e064:	3001      	adds	r0, #1
 800e066:	d0e6      	beq.n	800e036 <_printf_common+0xb2>
 800e068:	f109 0901 	add.w	r9, r9, #1
 800e06c:	e7d8      	b.n	800e020 <_printf_common+0x9c>
	...

0800e070 <_printf_i>:
 800e070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e074:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e078:	460c      	mov	r4, r1
 800e07a:	7e09      	ldrb	r1, [r1, #24]
 800e07c:	b085      	sub	sp, #20
 800e07e:	296e      	cmp	r1, #110	; 0x6e
 800e080:	4617      	mov	r7, r2
 800e082:	4606      	mov	r6, r0
 800e084:	4698      	mov	r8, r3
 800e086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e088:	f000 80b3 	beq.w	800e1f2 <_printf_i+0x182>
 800e08c:	d822      	bhi.n	800e0d4 <_printf_i+0x64>
 800e08e:	2963      	cmp	r1, #99	; 0x63
 800e090:	d036      	beq.n	800e100 <_printf_i+0x90>
 800e092:	d80a      	bhi.n	800e0aa <_printf_i+0x3a>
 800e094:	2900      	cmp	r1, #0
 800e096:	f000 80b9 	beq.w	800e20c <_printf_i+0x19c>
 800e09a:	2958      	cmp	r1, #88	; 0x58
 800e09c:	f000 8083 	beq.w	800e1a6 <_printf_i+0x136>
 800e0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e0a8:	e032      	b.n	800e110 <_printf_i+0xa0>
 800e0aa:	2964      	cmp	r1, #100	; 0x64
 800e0ac:	d001      	beq.n	800e0b2 <_printf_i+0x42>
 800e0ae:	2969      	cmp	r1, #105	; 0x69
 800e0b0:	d1f6      	bne.n	800e0a0 <_printf_i+0x30>
 800e0b2:	6820      	ldr	r0, [r4, #0]
 800e0b4:	6813      	ldr	r3, [r2, #0]
 800e0b6:	0605      	lsls	r5, r0, #24
 800e0b8:	f103 0104 	add.w	r1, r3, #4
 800e0bc:	d52a      	bpl.n	800e114 <_printf_i+0xa4>
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6011      	str	r1, [r2, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	da03      	bge.n	800e0ce <_printf_i+0x5e>
 800e0c6:	222d      	movs	r2, #45	; 0x2d
 800e0c8:	425b      	negs	r3, r3
 800e0ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e0ce:	486f      	ldr	r0, [pc, #444]	; (800e28c <_printf_i+0x21c>)
 800e0d0:	220a      	movs	r2, #10
 800e0d2:	e039      	b.n	800e148 <_printf_i+0xd8>
 800e0d4:	2973      	cmp	r1, #115	; 0x73
 800e0d6:	f000 809d 	beq.w	800e214 <_printf_i+0x1a4>
 800e0da:	d808      	bhi.n	800e0ee <_printf_i+0x7e>
 800e0dc:	296f      	cmp	r1, #111	; 0x6f
 800e0de:	d020      	beq.n	800e122 <_printf_i+0xb2>
 800e0e0:	2970      	cmp	r1, #112	; 0x70
 800e0e2:	d1dd      	bne.n	800e0a0 <_printf_i+0x30>
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	f043 0320 	orr.w	r3, r3, #32
 800e0ea:	6023      	str	r3, [r4, #0]
 800e0ec:	e003      	b.n	800e0f6 <_printf_i+0x86>
 800e0ee:	2975      	cmp	r1, #117	; 0x75
 800e0f0:	d017      	beq.n	800e122 <_printf_i+0xb2>
 800e0f2:	2978      	cmp	r1, #120	; 0x78
 800e0f4:	d1d4      	bne.n	800e0a0 <_printf_i+0x30>
 800e0f6:	2378      	movs	r3, #120	; 0x78
 800e0f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e0fc:	4864      	ldr	r0, [pc, #400]	; (800e290 <_printf_i+0x220>)
 800e0fe:	e055      	b.n	800e1ac <_printf_i+0x13c>
 800e100:	6813      	ldr	r3, [r2, #0]
 800e102:	1d19      	adds	r1, r3, #4
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	6011      	str	r1, [r2, #0]
 800e108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e110:	2301      	movs	r3, #1
 800e112:	e08c      	b.n	800e22e <_printf_i+0x1be>
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6011      	str	r1, [r2, #0]
 800e118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e11c:	bf18      	it	ne
 800e11e:	b21b      	sxthne	r3, r3
 800e120:	e7cf      	b.n	800e0c2 <_printf_i+0x52>
 800e122:	6813      	ldr	r3, [r2, #0]
 800e124:	6825      	ldr	r5, [r4, #0]
 800e126:	1d18      	adds	r0, r3, #4
 800e128:	6010      	str	r0, [r2, #0]
 800e12a:	0628      	lsls	r0, r5, #24
 800e12c:	d501      	bpl.n	800e132 <_printf_i+0xc2>
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	e002      	b.n	800e138 <_printf_i+0xc8>
 800e132:	0668      	lsls	r0, r5, #25
 800e134:	d5fb      	bpl.n	800e12e <_printf_i+0xbe>
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	4854      	ldr	r0, [pc, #336]	; (800e28c <_printf_i+0x21c>)
 800e13a:	296f      	cmp	r1, #111	; 0x6f
 800e13c:	bf14      	ite	ne
 800e13e:	220a      	movne	r2, #10
 800e140:	2208      	moveq	r2, #8
 800e142:	2100      	movs	r1, #0
 800e144:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e148:	6865      	ldr	r5, [r4, #4]
 800e14a:	60a5      	str	r5, [r4, #8]
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	f2c0 8095 	blt.w	800e27c <_printf_i+0x20c>
 800e152:	6821      	ldr	r1, [r4, #0]
 800e154:	f021 0104 	bic.w	r1, r1, #4
 800e158:	6021      	str	r1, [r4, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d13d      	bne.n	800e1da <_printf_i+0x16a>
 800e15e:	2d00      	cmp	r5, #0
 800e160:	f040 808e 	bne.w	800e280 <_printf_i+0x210>
 800e164:	4665      	mov	r5, ip
 800e166:	2a08      	cmp	r2, #8
 800e168:	d10b      	bne.n	800e182 <_printf_i+0x112>
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	07db      	lsls	r3, r3, #31
 800e16e:	d508      	bpl.n	800e182 <_printf_i+0x112>
 800e170:	6923      	ldr	r3, [r4, #16]
 800e172:	6862      	ldr	r2, [r4, #4]
 800e174:	429a      	cmp	r2, r3
 800e176:	bfde      	ittt	le
 800e178:	2330      	movle	r3, #48	; 0x30
 800e17a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e17e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e182:	ebac 0305 	sub.w	r3, ip, r5
 800e186:	6123      	str	r3, [r4, #16]
 800e188:	f8cd 8000 	str.w	r8, [sp]
 800e18c:	463b      	mov	r3, r7
 800e18e:	aa03      	add	r2, sp, #12
 800e190:	4621      	mov	r1, r4
 800e192:	4630      	mov	r0, r6
 800e194:	f7ff fef6 	bl	800df84 <_printf_common>
 800e198:	3001      	adds	r0, #1
 800e19a:	d14d      	bne.n	800e238 <_printf_i+0x1c8>
 800e19c:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a0:	b005      	add	sp, #20
 800e1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1a6:	4839      	ldr	r0, [pc, #228]	; (800e28c <_printf_i+0x21c>)
 800e1a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e1ac:	6813      	ldr	r3, [r2, #0]
 800e1ae:	6821      	ldr	r1, [r4, #0]
 800e1b0:	1d1d      	adds	r5, r3, #4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6015      	str	r5, [r2, #0]
 800e1b6:	060a      	lsls	r2, r1, #24
 800e1b8:	d50b      	bpl.n	800e1d2 <_printf_i+0x162>
 800e1ba:	07ca      	lsls	r2, r1, #31
 800e1bc:	bf44      	itt	mi
 800e1be:	f041 0120 	orrmi.w	r1, r1, #32
 800e1c2:	6021      	strmi	r1, [r4, #0]
 800e1c4:	b91b      	cbnz	r3, 800e1ce <_printf_i+0x15e>
 800e1c6:	6822      	ldr	r2, [r4, #0]
 800e1c8:	f022 0220 	bic.w	r2, r2, #32
 800e1cc:	6022      	str	r2, [r4, #0]
 800e1ce:	2210      	movs	r2, #16
 800e1d0:	e7b7      	b.n	800e142 <_printf_i+0xd2>
 800e1d2:	064d      	lsls	r5, r1, #25
 800e1d4:	bf48      	it	mi
 800e1d6:	b29b      	uxthmi	r3, r3
 800e1d8:	e7ef      	b.n	800e1ba <_printf_i+0x14a>
 800e1da:	4665      	mov	r5, ip
 800e1dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1e0:	fb02 3311 	mls	r3, r2, r1, r3
 800e1e4:	5cc3      	ldrb	r3, [r0, r3]
 800e1e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	2900      	cmp	r1, #0
 800e1ee:	d1f5      	bne.n	800e1dc <_printf_i+0x16c>
 800e1f0:	e7b9      	b.n	800e166 <_printf_i+0xf6>
 800e1f2:	6813      	ldr	r3, [r2, #0]
 800e1f4:	6825      	ldr	r5, [r4, #0]
 800e1f6:	6961      	ldr	r1, [r4, #20]
 800e1f8:	1d18      	adds	r0, r3, #4
 800e1fa:	6010      	str	r0, [r2, #0]
 800e1fc:	0628      	lsls	r0, r5, #24
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	d501      	bpl.n	800e206 <_printf_i+0x196>
 800e202:	6019      	str	r1, [r3, #0]
 800e204:	e002      	b.n	800e20c <_printf_i+0x19c>
 800e206:	066a      	lsls	r2, r5, #25
 800e208:	d5fb      	bpl.n	800e202 <_printf_i+0x192>
 800e20a:	8019      	strh	r1, [r3, #0]
 800e20c:	2300      	movs	r3, #0
 800e20e:	6123      	str	r3, [r4, #16]
 800e210:	4665      	mov	r5, ip
 800e212:	e7b9      	b.n	800e188 <_printf_i+0x118>
 800e214:	6813      	ldr	r3, [r2, #0]
 800e216:	1d19      	adds	r1, r3, #4
 800e218:	6011      	str	r1, [r2, #0]
 800e21a:	681d      	ldr	r5, [r3, #0]
 800e21c:	6862      	ldr	r2, [r4, #4]
 800e21e:	2100      	movs	r1, #0
 800e220:	4628      	mov	r0, r5
 800e222:	f7f1 fff5 	bl	8000210 <memchr>
 800e226:	b108      	cbz	r0, 800e22c <_printf_i+0x1bc>
 800e228:	1b40      	subs	r0, r0, r5
 800e22a:	6060      	str	r0, [r4, #4]
 800e22c:	6863      	ldr	r3, [r4, #4]
 800e22e:	6123      	str	r3, [r4, #16]
 800e230:	2300      	movs	r3, #0
 800e232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e236:	e7a7      	b.n	800e188 <_printf_i+0x118>
 800e238:	6923      	ldr	r3, [r4, #16]
 800e23a:	462a      	mov	r2, r5
 800e23c:	4639      	mov	r1, r7
 800e23e:	4630      	mov	r0, r6
 800e240:	47c0      	blx	r8
 800e242:	3001      	adds	r0, #1
 800e244:	d0aa      	beq.n	800e19c <_printf_i+0x12c>
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	079b      	lsls	r3, r3, #30
 800e24a:	d413      	bmi.n	800e274 <_printf_i+0x204>
 800e24c:	68e0      	ldr	r0, [r4, #12]
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	4298      	cmp	r0, r3
 800e252:	bfb8      	it	lt
 800e254:	4618      	movlt	r0, r3
 800e256:	e7a3      	b.n	800e1a0 <_printf_i+0x130>
 800e258:	2301      	movs	r3, #1
 800e25a:	464a      	mov	r2, r9
 800e25c:	4639      	mov	r1, r7
 800e25e:	4630      	mov	r0, r6
 800e260:	47c0      	blx	r8
 800e262:	3001      	adds	r0, #1
 800e264:	d09a      	beq.n	800e19c <_printf_i+0x12c>
 800e266:	3501      	adds	r5, #1
 800e268:	68e3      	ldr	r3, [r4, #12]
 800e26a:	9a03      	ldr	r2, [sp, #12]
 800e26c:	1a9b      	subs	r3, r3, r2
 800e26e:	42ab      	cmp	r3, r5
 800e270:	dcf2      	bgt.n	800e258 <_printf_i+0x1e8>
 800e272:	e7eb      	b.n	800e24c <_printf_i+0x1dc>
 800e274:	2500      	movs	r5, #0
 800e276:	f104 0919 	add.w	r9, r4, #25
 800e27a:	e7f5      	b.n	800e268 <_printf_i+0x1f8>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1ac      	bne.n	800e1da <_printf_i+0x16a>
 800e280:	7803      	ldrb	r3, [r0, #0]
 800e282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e28a:	e76c      	b.n	800e166 <_printf_i+0xf6>
 800e28c:	0800eeb1 	.word	0x0800eeb1
 800e290:	0800eec2 	.word	0x0800eec2

0800e294 <_sbrk_r>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4c06      	ldr	r4, [pc, #24]	; (800e2b0 <_sbrk_r+0x1c>)
 800e298:	2300      	movs	r3, #0
 800e29a:	4605      	mov	r5, r0
 800e29c:	4608      	mov	r0, r1
 800e29e:	6023      	str	r3, [r4, #0]
 800e2a0:	f7ff fa04 	bl	800d6ac <_sbrk>
 800e2a4:	1c43      	adds	r3, r0, #1
 800e2a6:	d102      	bne.n	800e2ae <_sbrk_r+0x1a>
 800e2a8:	6823      	ldr	r3, [r4, #0]
 800e2aa:	b103      	cbz	r3, 800e2ae <_sbrk_r+0x1a>
 800e2ac:	602b      	str	r3, [r5, #0]
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	2000071c 	.word	0x2000071c

0800e2b4 <_raise_r>:
 800e2b4:	291f      	cmp	r1, #31
 800e2b6:	b538      	push	{r3, r4, r5, lr}
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	460d      	mov	r5, r1
 800e2bc:	d904      	bls.n	800e2c8 <_raise_r+0x14>
 800e2be:	2316      	movs	r3, #22
 800e2c0:	6003      	str	r3, [r0, #0]
 800e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e2ca:	b112      	cbz	r2, 800e2d2 <_raise_r+0x1e>
 800e2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d0:	b94b      	cbnz	r3, 800e2e6 <_raise_r+0x32>
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 f830 	bl	800e338 <_getpid_r>
 800e2d8:	462a      	mov	r2, r5
 800e2da:	4601      	mov	r1, r0
 800e2dc:	4620      	mov	r0, r4
 800e2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e2:	f000 b817 	b.w	800e314 <_kill_r>
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d00a      	beq.n	800e300 <_raise_r+0x4c>
 800e2ea:	1c59      	adds	r1, r3, #1
 800e2ec:	d103      	bne.n	800e2f6 <_raise_r+0x42>
 800e2ee:	2316      	movs	r3, #22
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	e7e7      	b.n	800e2c6 <_raise_r+0x12>
 800e2f6:	2400      	movs	r4, #0
 800e2f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	4798      	blx	r3
 800e300:	2000      	movs	r0, #0
 800e302:	e7e0      	b.n	800e2c6 <_raise_r+0x12>

0800e304 <raise>:
 800e304:	4b02      	ldr	r3, [pc, #8]	; (800e310 <raise+0xc>)
 800e306:	4601      	mov	r1, r0
 800e308:	6818      	ldr	r0, [r3, #0]
 800e30a:	f7ff bfd3 	b.w	800e2b4 <_raise_r>
 800e30e:	bf00      	nop
 800e310:	2000002c 	.word	0x2000002c

0800e314 <_kill_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4c07      	ldr	r4, [pc, #28]	; (800e334 <_kill_r+0x20>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4605      	mov	r5, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	4611      	mov	r1, r2
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	f7ff f93b 	bl	800d59c <_kill>
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	d102      	bne.n	800e330 <_kill_r+0x1c>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	b103      	cbz	r3, 800e330 <_kill_r+0x1c>
 800e32e:	602b      	str	r3, [r5, #0]
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	bf00      	nop
 800e334:	2000071c 	.word	0x2000071c

0800e338 <_getpid_r>:
 800e338:	f7ff b928 	b.w	800d58c <_getpid>

0800e33c <__swbuf_r>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	460e      	mov	r6, r1
 800e340:	4614      	mov	r4, r2
 800e342:	4605      	mov	r5, r0
 800e344:	b118      	cbz	r0, 800e34e <__swbuf_r+0x12>
 800e346:	6983      	ldr	r3, [r0, #24]
 800e348:	b90b      	cbnz	r3, 800e34e <__swbuf_r+0x12>
 800e34a:	f000 f9a7 	bl	800e69c <__sinit>
 800e34e:	4b21      	ldr	r3, [pc, #132]	; (800e3d4 <__swbuf_r+0x98>)
 800e350:	429c      	cmp	r4, r3
 800e352:	d12a      	bne.n	800e3aa <__swbuf_r+0x6e>
 800e354:	686c      	ldr	r4, [r5, #4]
 800e356:	69a3      	ldr	r3, [r4, #24]
 800e358:	60a3      	str	r3, [r4, #8]
 800e35a:	89a3      	ldrh	r3, [r4, #12]
 800e35c:	071a      	lsls	r2, r3, #28
 800e35e:	d52e      	bpl.n	800e3be <__swbuf_r+0x82>
 800e360:	6923      	ldr	r3, [r4, #16]
 800e362:	b363      	cbz	r3, 800e3be <__swbuf_r+0x82>
 800e364:	6923      	ldr	r3, [r4, #16]
 800e366:	6820      	ldr	r0, [r4, #0]
 800e368:	1ac0      	subs	r0, r0, r3
 800e36a:	6963      	ldr	r3, [r4, #20]
 800e36c:	b2f6      	uxtb	r6, r6
 800e36e:	4283      	cmp	r3, r0
 800e370:	4637      	mov	r7, r6
 800e372:	dc04      	bgt.n	800e37e <__swbuf_r+0x42>
 800e374:	4621      	mov	r1, r4
 800e376:	4628      	mov	r0, r5
 800e378:	f000 f926 	bl	800e5c8 <_fflush_r>
 800e37c:	bb28      	cbnz	r0, 800e3ca <__swbuf_r+0x8e>
 800e37e:	68a3      	ldr	r3, [r4, #8]
 800e380:	3b01      	subs	r3, #1
 800e382:	60a3      	str	r3, [r4, #8]
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	6022      	str	r2, [r4, #0]
 800e38a:	701e      	strb	r6, [r3, #0]
 800e38c:	6963      	ldr	r3, [r4, #20]
 800e38e:	3001      	adds	r0, #1
 800e390:	4283      	cmp	r3, r0
 800e392:	d004      	beq.n	800e39e <__swbuf_r+0x62>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	07db      	lsls	r3, r3, #31
 800e398:	d519      	bpl.n	800e3ce <__swbuf_r+0x92>
 800e39a:	2e0a      	cmp	r6, #10
 800e39c:	d117      	bne.n	800e3ce <__swbuf_r+0x92>
 800e39e:	4621      	mov	r1, r4
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	f000 f911 	bl	800e5c8 <_fflush_r>
 800e3a6:	b190      	cbz	r0, 800e3ce <__swbuf_r+0x92>
 800e3a8:	e00f      	b.n	800e3ca <__swbuf_r+0x8e>
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <__swbuf_r+0x9c>)
 800e3ac:	429c      	cmp	r4, r3
 800e3ae:	d101      	bne.n	800e3b4 <__swbuf_r+0x78>
 800e3b0:	68ac      	ldr	r4, [r5, #8]
 800e3b2:	e7d0      	b.n	800e356 <__swbuf_r+0x1a>
 800e3b4:	4b09      	ldr	r3, [pc, #36]	; (800e3dc <__swbuf_r+0xa0>)
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	bf08      	it	eq
 800e3ba:	68ec      	ldreq	r4, [r5, #12]
 800e3bc:	e7cb      	b.n	800e356 <__swbuf_r+0x1a>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f000 f80d 	bl	800e3e0 <__swsetup_r>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d0cc      	beq.n	800e364 <__swbuf_r+0x28>
 800e3ca:	f04f 37ff 	mov.w	r7, #4294967295
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	0800eef4 	.word	0x0800eef4
 800e3d8:	0800ef14 	.word	0x0800ef14
 800e3dc:	0800eed4 	.word	0x0800eed4

0800e3e0 <__swsetup_r>:
 800e3e0:	4b32      	ldr	r3, [pc, #200]	; (800e4ac <__swsetup_r+0xcc>)
 800e3e2:	b570      	push	{r4, r5, r6, lr}
 800e3e4:	681d      	ldr	r5, [r3, #0]
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	b125      	cbz	r5, 800e3f6 <__swsetup_r+0x16>
 800e3ec:	69ab      	ldr	r3, [r5, #24]
 800e3ee:	b913      	cbnz	r3, 800e3f6 <__swsetup_r+0x16>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f000 f953 	bl	800e69c <__sinit>
 800e3f6:	4b2e      	ldr	r3, [pc, #184]	; (800e4b0 <__swsetup_r+0xd0>)
 800e3f8:	429c      	cmp	r4, r3
 800e3fa:	d10f      	bne.n	800e41c <__swsetup_r+0x3c>
 800e3fc:	686c      	ldr	r4, [r5, #4]
 800e3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e402:	b29a      	uxth	r2, r3
 800e404:	0715      	lsls	r5, r2, #28
 800e406:	d42c      	bmi.n	800e462 <__swsetup_r+0x82>
 800e408:	06d0      	lsls	r0, r2, #27
 800e40a:	d411      	bmi.n	800e430 <__swsetup_r+0x50>
 800e40c:	2209      	movs	r2, #9
 800e40e:	6032      	str	r2, [r6, #0]
 800e410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	f04f 30ff 	mov.w	r0, #4294967295
 800e41a:	e03e      	b.n	800e49a <__swsetup_r+0xba>
 800e41c:	4b25      	ldr	r3, [pc, #148]	; (800e4b4 <__swsetup_r+0xd4>)
 800e41e:	429c      	cmp	r4, r3
 800e420:	d101      	bne.n	800e426 <__swsetup_r+0x46>
 800e422:	68ac      	ldr	r4, [r5, #8]
 800e424:	e7eb      	b.n	800e3fe <__swsetup_r+0x1e>
 800e426:	4b24      	ldr	r3, [pc, #144]	; (800e4b8 <__swsetup_r+0xd8>)
 800e428:	429c      	cmp	r4, r3
 800e42a:	bf08      	it	eq
 800e42c:	68ec      	ldreq	r4, [r5, #12]
 800e42e:	e7e6      	b.n	800e3fe <__swsetup_r+0x1e>
 800e430:	0751      	lsls	r1, r2, #29
 800e432:	d512      	bpl.n	800e45a <__swsetup_r+0x7a>
 800e434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e436:	b141      	cbz	r1, 800e44a <__swsetup_r+0x6a>
 800e438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e43c:	4299      	cmp	r1, r3
 800e43e:	d002      	beq.n	800e446 <__swsetup_r+0x66>
 800e440:	4630      	mov	r0, r6
 800e442:	f7ff fbb7 	bl	800dbb4 <_free_r>
 800e446:	2300      	movs	r3, #0
 800e448:	6363      	str	r3, [r4, #52]	; 0x34
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e450:	81a3      	strh	r3, [r4, #12]
 800e452:	2300      	movs	r3, #0
 800e454:	6063      	str	r3, [r4, #4]
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f043 0308 	orr.w	r3, r3, #8
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	b94b      	cbnz	r3, 800e47a <__swsetup_r+0x9a>
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e470:	d003      	beq.n	800e47a <__swsetup_r+0x9a>
 800e472:	4621      	mov	r1, r4
 800e474:	4630      	mov	r0, r6
 800e476:	f000 f9bf 	bl	800e7f8 <__smakebuf_r>
 800e47a:	89a2      	ldrh	r2, [r4, #12]
 800e47c:	f012 0301 	ands.w	r3, r2, #1
 800e480:	d00c      	beq.n	800e49c <__swsetup_r+0xbc>
 800e482:	2300      	movs	r3, #0
 800e484:	60a3      	str	r3, [r4, #8]
 800e486:	6963      	ldr	r3, [r4, #20]
 800e488:	425b      	negs	r3, r3
 800e48a:	61a3      	str	r3, [r4, #24]
 800e48c:	6923      	ldr	r3, [r4, #16]
 800e48e:	b953      	cbnz	r3, 800e4a6 <__swsetup_r+0xc6>
 800e490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e494:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e498:	d1ba      	bne.n	800e410 <__swsetup_r+0x30>
 800e49a:	bd70      	pop	{r4, r5, r6, pc}
 800e49c:	0792      	lsls	r2, r2, #30
 800e49e:	bf58      	it	pl
 800e4a0:	6963      	ldrpl	r3, [r4, #20]
 800e4a2:	60a3      	str	r3, [r4, #8]
 800e4a4:	e7f2      	b.n	800e48c <__swsetup_r+0xac>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e7f7      	b.n	800e49a <__swsetup_r+0xba>
 800e4aa:	bf00      	nop
 800e4ac:	2000002c 	.word	0x2000002c
 800e4b0:	0800eef4 	.word	0x0800eef4
 800e4b4:	0800ef14 	.word	0x0800ef14
 800e4b8:	0800eed4 	.word	0x0800eed4

0800e4bc <__sflush_r>:
 800e4bc:	898a      	ldrh	r2, [r1, #12]
 800e4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	0710      	lsls	r0, r2, #28
 800e4c6:	460c      	mov	r4, r1
 800e4c8:	d458      	bmi.n	800e57c <__sflush_r+0xc0>
 800e4ca:	684b      	ldr	r3, [r1, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	dc05      	bgt.n	800e4dc <__sflush_r+0x20>
 800e4d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	dc02      	bgt.n	800e4dc <__sflush_r+0x20>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4de:	2e00      	cmp	r6, #0
 800e4e0:	d0f9      	beq.n	800e4d6 <__sflush_r+0x1a>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4e8:	682f      	ldr	r7, [r5, #0]
 800e4ea:	6a21      	ldr	r1, [r4, #32]
 800e4ec:	602b      	str	r3, [r5, #0]
 800e4ee:	d032      	beq.n	800e556 <__sflush_r+0x9a>
 800e4f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4f2:	89a3      	ldrh	r3, [r4, #12]
 800e4f4:	075a      	lsls	r2, r3, #29
 800e4f6:	d505      	bpl.n	800e504 <__sflush_r+0x48>
 800e4f8:	6863      	ldr	r3, [r4, #4]
 800e4fa:	1ac0      	subs	r0, r0, r3
 800e4fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4fe:	b10b      	cbz	r3, 800e504 <__sflush_r+0x48>
 800e500:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e502:	1ac0      	subs	r0, r0, r3
 800e504:	2300      	movs	r3, #0
 800e506:	4602      	mov	r2, r0
 800e508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e50a:	6a21      	ldr	r1, [r4, #32]
 800e50c:	4628      	mov	r0, r5
 800e50e:	47b0      	blx	r6
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	89a3      	ldrh	r3, [r4, #12]
 800e514:	d106      	bne.n	800e524 <__sflush_r+0x68>
 800e516:	6829      	ldr	r1, [r5, #0]
 800e518:	291d      	cmp	r1, #29
 800e51a:	d848      	bhi.n	800e5ae <__sflush_r+0xf2>
 800e51c:	4a29      	ldr	r2, [pc, #164]	; (800e5c4 <__sflush_r+0x108>)
 800e51e:	40ca      	lsrs	r2, r1
 800e520:	07d6      	lsls	r6, r2, #31
 800e522:	d544      	bpl.n	800e5ae <__sflush_r+0xf2>
 800e524:	2200      	movs	r2, #0
 800e526:	6062      	str	r2, [r4, #4]
 800e528:	04d9      	lsls	r1, r3, #19
 800e52a:	6922      	ldr	r2, [r4, #16]
 800e52c:	6022      	str	r2, [r4, #0]
 800e52e:	d504      	bpl.n	800e53a <__sflush_r+0x7e>
 800e530:	1c42      	adds	r2, r0, #1
 800e532:	d101      	bne.n	800e538 <__sflush_r+0x7c>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	b903      	cbnz	r3, 800e53a <__sflush_r+0x7e>
 800e538:	6560      	str	r0, [r4, #84]	; 0x54
 800e53a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e53c:	602f      	str	r7, [r5, #0]
 800e53e:	2900      	cmp	r1, #0
 800e540:	d0c9      	beq.n	800e4d6 <__sflush_r+0x1a>
 800e542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e546:	4299      	cmp	r1, r3
 800e548:	d002      	beq.n	800e550 <__sflush_r+0x94>
 800e54a:	4628      	mov	r0, r5
 800e54c:	f7ff fb32 	bl	800dbb4 <_free_r>
 800e550:	2000      	movs	r0, #0
 800e552:	6360      	str	r0, [r4, #52]	; 0x34
 800e554:	e7c0      	b.n	800e4d8 <__sflush_r+0x1c>
 800e556:	2301      	movs	r3, #1
 800e558:	4628      	mov	r0, r5
 800e55a:	47b0      	blx	r6
 800e55c:	1c41      	adds	r1, r0, #1
 800e55e:	d1c8      	bne.n	800e4f2 <__sflush_r+0x36>
 800e560:	682b      	ldr	r3, [r5, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d0c5      	beq.n	800e4f2 <__sflush_r+0x36>
 800e566:	2b1d      	cmp	r3, #29
 800e568:	d001      	beq.n	800e56e <__sflush_r+0xb2>
 800e56a:	2b16      	cmp	r3, #22
 800e56c:	d101      	bne.n	800e572 <__sflush_r+0xb6>
 800e56e:	602f      	str	r7, [r5, #0]
 800e570:	e7b1      	b.n	800e4d6 <__sflush_r+0x1a>
 800e572:	89a3      	ldrh	r3, [r4, #12]
 800e574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e578:	81a3      	strh	r3, [r4, #12]
 800e57a:	e7ad      	b.n	800e4d8 <__sflush_r+0x1c>
 800e57c:	690f      	ldr	r7, [r1, #16]
 800e57e:	2f00      	cmp	r7, #0
 800e580:	d0a9      	beq.n	800e4d6 <__sflush_r+0x1a>
 800e582:	0793      	lsls	r3, r2, #30
 800e584:	680e      	ldr	r6, [r1, #0]
 800e586:	bf08      	it	eq
 800e588:	694b      	ldreq	r3, [r1, #20]
 800e58a:	600f      	str	r7, [r1, #0]
 800e58c:	bf18      	it	ne
 800e58e:	2300      	movne	r3, #0
 800e590:	eba6 0807 	sub.w	r8, r6, r7
 800e594:	608b      	str	r3, [r1, #8]
 800e596:	f1b8 0f00 	cmp.w	r8, #0
 800e59a:	dd9c      	ble.n	800e4d6 <__sflush_r+0x1a>
 800e59c:	4643      	mov	r3, r8
 800e59e:	463a      	mov	r2, r7
 800e5a0:	6a21      	ldr	r1, [r4, #32]
 800e5a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	47b0      	blx	r6
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	dc06      	bgt.n	800e5ba <__sflush_r+0xfe>
 800e5ac:	89a3      	ldrh	r3, [r4, #12]
 800e5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b2:	81a3      	strh	r3, [r4, #12]
 800e5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b8:	e78e      	b.n	800e4d8 <__sflush_r+0x1c>
 800e5ba:	4407      	add	r7, r0
 800e5bc:	eba8 0800 	sub.w	r8, r8, r0
 800e5c0:	e7e9      	b.n	800e596 <__sflush_r+0xda>
 800e5c2:	bf00      	nop
 800e5c4:	20400001 	.word	0x20400001

0800e5c8 <_fflush_r>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	690b      	ldr	r3, [r1, #16]
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	b1db      	cbz	r3, 800e60a <_fflush_r+0x42>
 800e5d2:	b118      	cbz	r0, 800e5dc <_fflush_r+0x14>
 800e5d4:	6983      	ldr	r3, [r0, #24]
 800e5d6:	b90b      	cbnz	r3, 800e5dc <_fflush_r+0x14>
 800e5d8:	f000 f860 	bl	800e69c <__sinit>
 800e5dc:	4b0c      	ldr	r3, [pc, #48]	; (800e610 <_fflush_r+0x48>)
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	d109      	bne.n	800e5f6 <_fflush_r+0x2e>
 800e5e2:	686c      	ldr	r4, [r5, #4]
 800e5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5e8:	b17b      	cbz	r3, 800e60a <_fflush_r+0x42>
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5f2:	f7ff bf63 	b.w	800e4bc <__sflush_r>
 800e5f6:	4b07      	ldr	r3, [pc, #28]	; (800e614 <_fflush_r+0x4c>)
 800e5f8:	429c      	cmp	r4, r3
 800e5fa:	d101      	bne.n	800e600 <_fflush_r+0x38>
 800e5fc:	68ac      	ldr	r4, [r5, #8]
 800e5fe:	e7f1      	b.n	800e5e4 <_fflush_r+0x1c>
 800e600:	4b05      	ldr	r3, [pc, #20]	; (800e618 <_fflush_r+0x50>)
 800e602:	429c      	cmp	r4, r3
 800e604:	bf08      	it	eq
 800e606:	68ec      	ldreq	r4, [r5, #12]
 800e608:	e7ec      	b.n	800e5e4 <_fflush_r+0x1c>
 800e60a:	2000      	movs	r0, #0
 800e60c:	bd38      	pop	{r3, r4, r5, pc}
 800e60e:	bf00      	nop
 800e610:	0800eef4 	.word	0x0800eef4
 800e614:	0800ef14 	.word	0x0800ef14
 800e618:	0800eed4 	.word	0x0800eed4

0800e61c <std>:
 800e61c:	2300      	movs	r3, #0
 800e61e:	b510      	push	{r4, lr}
 800e620:	4604      	mov	r4, r0
 800e622:	e9c0 3300 	strd	r3, r3, [r0]
 800e626:	6083      	str	r3, [r0, #8]
 800e628:	8181      	strh	r1, [r0, #12]
 800e62a:	6643      	str	r3, [r0, #100]	; 0x64
 800e62c:	81c2      	strh	r2, [r0, #14]
 800e62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e632:	6183      	str	r3, [r0, #24]
 800e634:	4619      	mov	r1, r3
 800e636:	2208      	movs	r2, #8
 800e638:	305c      	adds	r0, #92	; 0x5c
 800e63a:	f7ff fab3 	bl	800dba4 <memset>
 800e63e:	4b05      	ldr	r3, [pc, #20]	; (800e654 <std+0x38>)
 800e640:	6263      	str	r3, [r4, #36]	; 0x24
 800e642:	4b05      	ldr	r3, [pc, #20]	; (800e658 <std+0x3c>)
 800e644:	62a3      	str	r3, [r4, #40]	; 0x28
 800e646:	4b05      	ldr	r3, [pc, #20]	; (800e65c <std+0x40>)
 800e648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e64a:	4b05      	ldr	r3, [pc, #20]	; (800e660 <std+0x44>)
 800e64c:	6224      	str	r4, [r4, #32]
 800e64e:	6323      	str	r3, [r4, #48]	; 0x30
 800e650:	bd10      	pop	{r4, pc}
 800e652:	bf00      	nop
 800e654:	0800e87d 	.word	0x0800e87d
 800e658:	0800e89f 	.word	0x0800e89f
 800e65c:	0800e8d7 	.word	0x0800e8d7
 800e660:	0800e8fb 	.word	0x0800e8fb

0800e664 <_cleanup_r>:
 800e664:	4901      	ldr	r1, [pc, #4]	; (800e66c <_cleanup_r+0x8>)
 800e666:	f000 b885 	b.w	800e774 <_fwalk_reent>
 800e66a:	bf00      	nop
 800e66c:	0800e5c9 	.word	0x0800e5c9

0800e670 <__sfmoreglue>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	1e4a      	subs	r2, r1, #1
 800e674:	2568      	movs	r5, #104	; 0x68
 800e676:	4355      	muls	r5, r2
 800e678:	460e      	mov	r6, r1
 800e67a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e67e:	f7ff fae7 	bl	800dc50 <_malloc_r>
 800e682:	4604      	mov	r4, r0
 800e684:	b140      	cbz	r0, 800e698 <__sfmoreglue+0x28>
 800e686:	2100      	movs	r1, #0
 800e688:	e9c0 1600 	strd	r1, r6, [r0]
 800e68c:	300c      	adds	r0, #12
 800e68e:	60a0      	str	r0, [r4, #8]
 800e690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e694:	f7ff fa86 	bl	800dba4 <memset>
 800e698:	4620      	mov	r0, r4
 800e69a:	bd70      	pop	{r4, r5, r6, pc}

0800e69c <__sinit>:
 800e69c:	6983      	ldr	r3, [r0, #24]
 800e69e:	b510      	push	{r4, lr}
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	bb33      	cbnz	r3, 800e6f2 <__sinit+0x56>
 800e6a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e6a8:	6503      	str	r3, [r0, #80]	; 0x50
 800e6aa:	4b12      	ldr	r3, [pc, #72]	; (800e6f4 <__sinit+0x58>)
 800e6ac:	4a12      	ldr	r2, [pc, #72]	; (800e6f8 <__sinit+0x5c>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6282      	str	r2, [r0, #40]	; 0x28
 800e6b2:	4298      	cmp	r0, r3
 800e6b4:	bf04      	itt	eq
 800e6b6:	2301      	moveq	r3, #1
 800e6b8:	6183      	streq	r3, [r0, #24]
 800e6ba:	f000 f81f 	bl	800e6fc <__sfp>
 800e6be:	6060      	str	r0, [r4, #4]
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 f81b 	bl	800e6fc <__sfp>
 800e6c6:	60a0      	str	r0, [r4, #8]
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f000 f817 	bl	800e6fc <__sfp>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	60e0      	str	r0, [r4, #12]
 800e6d2:	2104      	movs	r1, #4
 800e6d4:	6860      	ldr	r0, [r4, #4]
 800e6d6:	f7ff ffa1 	bl	800e61c <std>
 800e6da:	2201      	movs	r2, #1
 800e6dc:	2109      	movs	r1, #9
 800e6de:	68a0      	ldr	r0, [r4, #8]
 800e6e0:	f7ff ff9c 	bl	800e61c <std>
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	2112      	movs	r1, #18
 800e6e8:	68e0      	ldr	r0, [r4, #12]
 800e6ea:	f7ff ff97 	bl	800e61c <std>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	61a3      	str	r3, [r4, #24]
 800e6f2:	bd10      	pop	{r4, pc}
 800e6f4:	0800ee9c 	.word	0x0800ee9c
 800e6f8:	0800e665 	.word	0x0800e665

0800e6fc <__sfp>:
 800e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fe:	4b1b      	ldr	r3, [pc, #108]	; (800e76c <__sfp+0x70>)
 800e700:	681e      	ldr	r6, [r3, #0]
 800e702:	69b3      	ldr	r3, [r6, #24]
 800e704:	4607      	mov	r7, r0
 800e706:	b913      	cbnz	r3, 800e70e <__sfp+0x12>
 800e708:	4630      	mov	r0, r6
 800e70a:	f7ff ffc7 	bl	800e69c <__sinit>
 800e70e:	3648      	adds	r6, #72	; 0x48
 800e710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e714:	3b01      	subs	r3, #1
 800e716:	d503      	bpl.n	800e720 <__sfp+0x24>
 800e718:	6833      	ldr	r3, [r6, #0]
 800e71a:	b133      	cbz	r3, 800e72a <__sfp+0x2e>
 800e71c:	6836      	ldr	r6, [r6, #0]
 800e71e:	e7f7      	b.n	800e710 <__sfp+0x14>
 800e720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e724:	b16d      	cbz	r5, 800e742 <__sfp+0x46>
 800e726:	3468      	adds	r4, #104	; 0x68
 800e728:	e7f4      	b.n	800e714 <__sfp+0x18>
 800e72a:	2104      	movs	r1, #4
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7ff ff9f 	bl	800e670 <__sfmoreglue>
 800e732:	6030      	str	r0, [r6, #0]
 800e734:	2800      	cmp	r0, #0
 800e736:	d1f1      	bne.n	800e71c <__sfp+0x20>
 800e738:	230c      	movs	r3, #12
 800e73a:	603b      	str	r3, [r7, #0]
 800e73c:	4604      	mov	r4, r0
 800e73e:	4620      	mov	r0, r4
 800e740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e742:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <__sfp+0x74>)
 800e744:	6665      	str	r5, [r4, #100]	; 0x64
 800e746:	e9c4 5500 	strd	r5, r5, [r4]
 800e74a:	60a5      	str	r5, [r4, #8]
 800e74c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e750:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e754:	2208      	movs	r2, #8
 800e756:	4629      	mov	r1, r5
 800e758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e75c:	f7ff fa22 	bl	800dba4 <memset>
 800e760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e768:	e7e9      	b.n	800e73e <__sfp+0x42>
 800e76a:	bf00      	nop
 800e76c:	0800ee9c 	.word	0x0800ee9c
 800e770:	ffff0001 	.word	0xffff0001

0800e774 <_fwalk_reent>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	4680      	mov	r8, r0
 800e77a:	4689      	mov	r9, r1
 800e77c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e780:	2600      	movs	r6, #0
 800e782:	b914      	cbnz	r4, 800e78a <_fwalk_reent+0x16>
 800e784:	4630      	mov	r0, r6
 800e786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e78a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e78e:	3f01      	subs	r7, #1
 800e790:	d501      	bpl.n	800e796 <_fwalk_reent+0x22>
 800e792:	6824      	ldr	r4, [r4, #0]
 800e794:	e7f5      	b.n	800e782 <_fwalk_reent+0xe>
 800e796:	89ab      	ldrh	r3, [r5, #12]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d907      	bls.n	800e7ac <_fwalk_reent+0x38>
 800e79c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	d003      	beq.n	800e7ac <_fwalk_reent+0x38>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	47c8      	blx	r9
 800e7aa:	4306      	orrs	r6, r0
 800e7ac:	3568      	adds	r5, #104	; 0x68
 800e7ae:	e7ee      	b.n	800e78e <_fwalk_reent+0x1a>

0800e7b0 <__swhatbuf_r>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	b096      	sub	sp, #88	; 0x58
 800e7bc:	4614      	mov	r4, r2
 800e7be:	461d      	mov	r5, r3
 800e7c0:	da07      	bge.n	800e7d2 <__swhatbuf_r+0x22>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	602b      	str	r3, [r5, #0]
 800e7c6:	89b3      	ldrh	r3, [r6, #12]
 800e7c8:	061a      	lsls	r2, r3, #24
 800e7ca:	d410      	bmi.n	800e7ee <__swhatbuf_r+0x3e>
 800e7cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7d0:	e00e      	b.n	800e7f0 <__swhatbuf_r+0x40>
 800e7d2:	466a      	mov	r2, sp
 800e7d4:	f000 f8b8 	bl	800e948 <_fstat_r>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	dbf2      	blt.n	800e7c2 <__swhatbuf_r+0x12>
 800e7dc:	9a01      	ldr	r2, [sp, #4]
 800e7de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7e6:	425a      	negs	r2, r3
 800e7e8:	415a      	adcs	r2, r3
 800e7ea:	602a      	str	r2, [r5, #0]
 800e7ec:	e7ee      	b.n	800e7cc <__swhatbuf_r+0x1c>
 800e7ee:	2340      	movs	r3, #64	; 0x40
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	6023      	str	r3, [r4, #0]
 800e7f4:	b016      	add	sp, #88	; 0x58
 800e7f6:	bd70      	pop	{r4, r5, r6, pc}

0800e7f8 <__smakebuf_r>:
 800e7f8:	898b      	ldrh	r3, [r1, #12]
 800e7fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7fc:	079d      	lsls	r5, r3, #30
 800e7fe:	4606      	mov	r6, r0
 800e800:	460c      	mov	r4, r1
 800e802:	d507      	bpl.n	800e814 <__smakebuf_r+0x1c>
 800e804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	6123      	str	r3, [r4, #16]
 800e80c:	2301      	movs	r3, #1
 800e80e:	6163      	str	r3, [r4, #20]
 800e810:	b002      	add	sp, #8
 800e812:	bd70      	pop	{r4, r5, r6, pc}
 800e814:	ab01      	add	r3, sp, #4
 800e816:	466a      	mov	r2, sp
 800e818:	f7ff ffca 	bl	800e7b0 <__swhatbuf_r>
 800e81c:	9900      	ldr	r1, [sp, #0]
 800e81e:	4605      	mov	r5, r0
 800e820:	4630      	mov	r0, r6
 800e822:	f7ff fa15 	bl	800dc50 <_malloc_r>
 800e826:	b948      	cbnz	r0, 800e83c <__smakebuf_r+0x44>
 800e828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82c:	059a      	lsls	r2, r3, #22
 800e82e:	d4ef      	bmi.n	800e810 <__smakebuf_r+0x18>
 800e830:	f023 0303 	bic.w	r3, r3, #3
 800e834:	f043 0302 	orr.w	r3, r3, #2
 800e838:	81a3      	strh	r3, [r4, #12]
 800e83a:	e7e3      	b.n	800e804 <__smakebuf_r+0xc>
 800e83c:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <__smakebuf_r+0x7c>)
 800e83e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	6020      	str	r0, [r4, #0]
 800e844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e848:	81a3      	strh	r3, [r4, #12]
 800e84a:	9b00      	ldr	r3, [sp, #0]
 800e84c:	6163      	str	r3, [r4, #20]
 800e84e:	9b01      	ldr	r3, [sp, #4]
 800e850:	6120      	str	r0, [r4, #16]
 800e852:	b15b      	cbz	r3, 800e86c <__smakebuf_r+0x74>
 800e854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e858:	4630      	mov	r0, r6
 800e85a:	f000 f887 	bl	800e96c <_isatty_r>
 800e85e:	b128      	cbz	r0, 800e86c <__smakebuf_r+0x74>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	f023 0303 	bic.w	r3, r3, #3
 800e866:	f043 0301 	orr.w	r3, r3, #1
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	431d      	orrs	r5, r3
 800e870:	81a5      	strh	r5, [r4, #12]
 800e872:	e7cd      	b.n	800e810 <__smakebuf_r+0x18>
 800e874:	0800e665 	.word	0x0800e665

0800e878 <__malloc_lock>:
 800e878:	4770      	bx	lr

0800e87a <__malloc_unlock>:
 800e87a:	4770      	bx	lr

0800e87c <__sread>:
 800e87c:	b510      	push	{r4, lr}
 800e87e:	460c      	mov	r4, r1
 800e880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e884:	f000 f894 	bl	800e9b0 <_read_r>
 800e888:	2800      	cmp	r0, #0
 800e88a:	bfab      	itete	ge
 800e88c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e88e:	89a3      	ldrhlt	r3, [r4, #12]
 800e890:	181b      	addge	r3, r3, r0
 800e892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e896:	bfac      	ite	ge
 800e898:	6563      	strge	r3, [r4, #84]	; 0x54
 800e89a:	81a3      	strhlt	r3, [r4, #12]
 800e89c:	bd10      	pop	{r4, pc}

0800e89e <__swrite>:
 800e89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a2:	461f      	mov	r7, r3
 800e8a4:	898b      	ldrh	r3, [r1, #12]
 800e8a6:	05db      	lsls	r3, r3, #23
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	4616      	mov	r6, r2
 800e8ae:	d505      	bpl.n	800e8bc <__swrite+0x1e>
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8b8:	f000 f868 	bl	800e98c <_lseek_r>
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8c6:	81a3      	strh	r3, [r4, #12]
 800e8c8:	4632      	mov	r2, r6
 800e8ca:	463b      	mov	r3, r7
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d2:	f000 b817 	b.w	800e904 <_write_r>

0800e8d6 <__sseek>:
 800e8d6:	b510      	push	{r4, lr}
 800e8d8:	460c      	mov	r4, r1
 800e8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8de:	f000 f855 	bl	800e98c <_lseek_r>
 800e8e2:	1c43      	adds	r3, r0, #1
 800e8e4:	89a3      	ldrh	r3, [r4, #12]
 800e8e6:	bf15      	itete	ne
 800e8e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8f2:	81a3      	strheq	r3, [r4, #12]
 800e8f4:	bf18      	it	ne
 800e8f6:	81a3      	strhne	r3, [r4, #12]
 800e8f8:	bd10      	pop	{r4, pc}

0800e8fa <__sclose>:
 800e8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8fe:	f000 b813 	b.w	800e928 <_close_r>
	...

0800e904 <_write_r>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	4c07      	ldr	r4, [pc, #28]	; (800e924 <_write_r+0x20>)
 800e908:	4605      	mov	r5, r0
 800e90a:	4608      	mov	r0, r1
 800e90c:	4611      	mov	r1, r2
 800e90e:	2200      	movs	r2, #0
 800e910:	6022      	str	r2, [r4, #0]
 800e912:	461a      	mov	r2, r3
 800e914:	f7fe fe79 	bl	800d60a <_write>
 800e918:	1c43      	adds	r3, r0, #1
 800e91a:	d102      	bne.n	800e922 <_write_r+0x1e>
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	b103      	cbz	r3, 800e922 <_write_r+0x1e>
 800e920:	602b      	str	r3, [r5, #0]
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	2000071c 	.word	0x2000071c

0800e928 <_close_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4c06      	ldr	r4, [pc, #24]	; (800e944 <_close_r+0x1c>)
 800e92c:	2300      	movs	r3, #0
 800e92e:	4605      	mov	r5, r0
 800e930:	4608      	mov	r0, r1
 800e932:	6023      	str	r3, [r4, #0]
 800e934:	f7fe fe85 	bl	800d642 <_close>
 800e938:	1c43      	adds	r3, r0, #1
 800e93a:	d102      	bne.n	800e942 <_close_r+0x1a>
 800e93c:	6823      	ldr	r3, [r4, #0]
 800e93e:	b103      	cbz	r3, 800e942 <_close_r+0x1a>
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	bd38      	pop	{r3, r4, r5, pc}
 800e944:	2000071c 	.word	0x2000071c

0800e948 <_fstat_r>:
 800e948:	b538      	push	{r3, r4, r5, lr}
 800e94a:	4c07      	ldr	r4, [pc, #28]	; (800e968 <_fstat_r+0x20>)
 800e94c:	2300      	movs	r3, #0
 800e94e:	4605      	mov	r5, r0
 800e950:	4608      	mov	r0, r1
 800e952:	4611      	mov	r1, r2
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	f7fe fe80 	bl	800d65a <_fstat>
 800e95a:	1c43      	adds	r3, r0, #1
 800e95c:	d102      	bne.n	800e964 <_fstat_r+0x1c>
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	b103      	cbz	r3, 800e964 <_fstat_r+0x1c>
 800e962:	602b      	str	r3, [r5, #0]
 800e964:	bd38      	pop	{r3, r4, r5, pc}
 800e966:	bf00      	nop
 800e968:	2000071c 	.word	0x2000071c

0800e96c <_isatty_r>:
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	4c06      	ldr	r4, [pc, #24]	; (800e988 <_isatty_r+0x1c>)
 800e970:	2300      	movs	r3, #0
 800e972:	4605      	mov	r5, r0
 800e974:	4608      	mov	r0, r1
 800e976:	6023      	str	r3, [r4, #0]
 800e978:	f7fe fe7f 	bl	800d67a <_isatty>
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	d102      	bne.n	800e986 <_isatty_r+0x1a>
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	b103      	cbz	r3, 800e986 <_isatty_r+0x1a>
 800e984:	602b      	str	r3, [r5, #0]
 800e986:	bd38      	pop	{r3, r4, r5, pc}
 800e988:	2000071c 	.word	0x2000071c

0800e98c <_lseek_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4c07      	ldr	r4, [pc, #28]	; (800e9ac <_lseek_r+0x20>)
 800e990:	4605      	mov	r5, r0
 800e992:	4608      	mov	r0, r1
 800e994:	4611      	mov	r1, r2
 800e996:	2200      	movs	r2, #0
 800e998:	6022      	str	r2, [r4, #0]
 800e99a:	461a      	mov	r2, r3
 800e99c:	f7fe fe78 	bl	800d690 <_lseek>
 800e9a0:	1c43      	adds	r3, r0, #1
 800e9a2:	d102      	bne.n	800e9aa <_lseek_r+0x1e>
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	b103      	cbz	r3, 800e9aa <_lseek_r+0x1e>
 800e9a8:	602b      	str	r3, [r5, #0]
 800e9aa:	bd38      	pop	{r3, r4, r5, pc}
 800e9ac:	2000071c 	.word	0x2000071c

0800e9b0 <_read_r>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4c07      	ldr	r4, [pc, #28]	; (800e9d0 <_read_r+0x20>)
 800e9b4:	4605      	mov	r5, r0
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	6022      	str	r2, [r4, #0]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	f7fe fe06 	bl	800d5d0 <_read>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	d102      	bne.n	800e9ce <_read_r+0x1e>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	b103      	cbz	r3, 800e9ce <_read_r+0x1e>
 800e9cc:	602b      	str	r3, [r5, #0]
 800e9ce:	bd38      	pop	{r3, r4, r5, pc}
 800e9d0:	2000071c 	.word	0x2000071c

0800e9d4 <_init>:
 800e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d6:	bf00      	nop
 800e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9da:	bc08      	pop	{r3}
 800e9dc:	469e      	mov	lr, r3
 800e9de:	4770      	bx	lr

0800e9e0 <_fini>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	bf00      	nop
 800e9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e6:	bc08      	pop	{r3}
 800e9e8:	469e      	mov	lr, r3
 800e9ea:	4770      	bx	lr


BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0bc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5d4  0800a5d4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5d4  0800a5d4  0001a5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5dc  0800a5dc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a5dc  0800a5dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000008c  0800a674  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800a674  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048e91  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aa5  00000000  00000000  00068f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0006d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0006f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a18a  00000000  00000000  000705b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190db  00000000  00000000  0009a742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb4c  00000000  00000000  000b381d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b2369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064cc  00000000  00000000  001b23bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a268 	.word	0x0800a268

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	0800a268 	.word	0x0800a268

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <HAL_Init+0x40>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <HAL_Init+0x40>)
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x40>)
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 ff4f 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f009 f9de 	bl	80098f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ff67 	bl	8001432 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 ff2f 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000020 	.word	0x20000020
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000025c 	.word	0x2000025c

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d005      	beq.n	80005de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_Delay+0x44>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005de:	bf00      	nop
 80005e0:	f7ff ffde 	bl	80005a0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d8f7      	bhi.n	80005e0 <HAL_Delay+0x28>
  {
  }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e0ed      	b.n	80007ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f009 f98e 	bl	8009940 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f022 0202 	bic.w	r2, r2, #2
 8000632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000634:	f7ff ffb4 	bl	80005a0 <HAL_GetTick>
 8000638:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800063a:	e012      	b.n	8000662 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800063c:	f7ff ffb0 	bl	80005a0 <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	2b0a      	cmp	r3, #10
 8000648:	d90b      	bls.n	8000662 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2205      	movs	r2, #5
 800065a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e0c5      	b.n	80007ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e5      	bne.n	800063c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000680:	f7ff ff8e 	bl	80005a0 <HAL_GetTick>
 8000684:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000686:	e012      	b.n	80006ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000688:	f7ff ff8a 	bl	80005a0 <HAL_GetTick>
 800068c:	4602      	mov	r2, r0
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	2b0a      	cmp	r3, #10
 8000694:	d90b      	bls.n	80006ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2205      	movs	r2, #5
 80006a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e09f      	b.n	80007ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0e5      	beq.n	8000688 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7e1b      	ldrb	r3, [r3, #24]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d108      	bne.n	80006d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	e007      	b.n	80006e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7e5b      	ldrb	r3, [r3, #25]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d108      	bne.n	8000700 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e007      	b.n	8000710 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800070e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7e9b      	ldrb	r3, [r3, #26]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d108      	bne.n	800072a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f042 0220 	orr.w	r2, r2, #32
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e007      	b.n	800073a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0220 	bic.w	r2, r2, #32
 8000738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7edb      	ldrb	r3, [r3, #27]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d108      	bne.n	8000754 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f022 0210 	bic.w	r2, r2, #16
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e007      	b.n	8000764 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0210 	orr.w	r2, r2, #16
 8000762:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7f1b      	ldrb	r3, [r3, #28]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d108      	bne.n	800077e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 0208 	orr.w	r2, r2, #8
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	e007      	b.n	800078e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0208 	bic.w	r2, r2, #8
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7f5b      	ldrb	r3, [r3, #29]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d108      	bne.n	80007a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f042 0204 	orr.w	r2, r2, #4
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e007      	b.n	80007b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f022 0204 	bic.w	r2, r2, #4
 80007b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	431a      	orrs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	ea42 0103 	orr.w	r1, r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	430a      	orrs	r2, r1
 80007dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2201      	movs	r2, #1
 80007e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800080e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d003      	beq.n	800081e <HAL_CAN_ConfigFilter+0x26>
 8000816:	7cfb      	ldrb	r3, [r7, #19]
 8000818:	2b02      	cmp	r3, #2
 800081a:	f040 80be 	bne.w	800099a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800081e:	4b65      	ldr	r3, [pc, #404]	; (80009b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8000820:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000828:	f043 0201 	orr.w	r2, r3, #1
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000838:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	431a      	orrs	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	2201      	movs	r2, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	43db      	mvns	r3, r3
 8000870:	401a      	ands	r2, r3
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d123      	bne.n	80008c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	43db      	mvns	r3, r3
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3248      	adds	r2, #72	; 0x48
 80008a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008be:	6979      	ldr	r1, [r7, #20]
 80008c0:	3348      	adds	r3, #72	; 0x48
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	440b      	add	r3, r1
 80008c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d122      	bne.n	8000916 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	431a      	orrs	r2, r3
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3248      	adds	r2, #72	; 0x48
 80008f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800090a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800090c:	6979      	ldr	r1, [r7, #20]
 800090e:	3348      	adds	r3, #72	; 0x48
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	440b      	add	r3, r1
 8000914:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d109      	bne.n	8000932 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	43db      	mvns	r3, r3
 8000928:	401a      	ands	r2, r3
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000930:	e007      	b.n	8000942 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	431a      	orrs	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800095c:	e007      	b.n	800096e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d107      	bne.n	8000986 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	431a      	orrs	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800098c:	f023 0201 	bic.w	r2, r3, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e006      	b.n	80009a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
  }
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40006400 	.word	0x40006400

080009b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009d6:	7ffb      	ldrb	r3, [r7, #31]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d003      	beq.n	80009e4 <HAL_CAN_AddTxMessage+0x2c>
 80009dc:	7ffb      	ldrb	r3, [r7, #31]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	f040 80b8 	bne.w	8000b54 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10a      	bne.n	8000a04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d105      	bne.n	8000a04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80a0 	beq.w	8000b44 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	0e1b      	lsrs	r3, r3, #24
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d907      	bls.n	8000a24 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e09e      	b.n	8000b62 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a24:	2201      	movs	r2, #1
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10d      	bne.n	8000a52 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a40:	68f9      	ldr	r1, [r7, #12]
 8000a42:	6809      	ldr	r1, [r1, #0]
 8000a44:	431a      	orrs	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3318      	adds	r3, #24
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	440b      	add	r3, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e00f      	b.n	8000a72 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3318      	adds	r3, #24
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	440b      	add	r3, r1
 8000a70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	440b      	add	r3, r1
 8000a82:	3304      	adds	r3, #4
 8000a84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	7d1b      	ldrb	r3, [r3, #20]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d111      	bne.n	8000ab2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3318      	adds	r3, #24
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	4413      	add	r3, r2
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	6811      	ldr	r1, [r2, #0]
 8000aa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3318      	adds	r3, #24
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	440b      	add	r3, r1
 8000aae:	3304      	adds	r3, #4
 8000ab0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	061a      	lsls	r2, r3, #24
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3306      	adds	r3, #6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	041b      	lsls	r3, r3, #16
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3305      	adds	r3, #5
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	4313      	orrs	r3, r2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	3204      	adds	r2, #4
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	6811      	ldr	r1, [r2, #0]
 8000ada:	ea43 0200 	orr.w	r2, r3, r0
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ae8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3303      	adds	r3, #3
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	061a      	lsls	r2, r3, #24
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3302      	adds	r3, #2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3301      	adds	r3, #1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	4313      	orrs	r3, r2
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	6811      	ldr	r1, [r2, #0]
 8000b10:	ea43 0200 	orr.w	r2, r3, r0
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	440b      	add	r3, r1
 8000b1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3318      	adds	r3, #24
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	6811      	ldr	r1, [r2, #0]
 8000b32:	f043 0201 	orr.w	r2, r3, #1
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	440b      	add	r3, r1
 8000b3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e00e      	b.n	8000b62 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e006      	b.n	8000b62 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
  }
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b087      	sub	sp, #28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d003      	beq.n	8000b92 <HAL_CAN_GetRxMessage+0x24>
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	f040 80f3 	bne.w	8000d78 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d10e      	bne.n	8000bb6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d116      	bne.n	8000bd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e0e7      	b.n	8000d86 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d107      	bne.n	8000bd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e0d8      	b.n	8000d86 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	331b      	adds	r3, #27
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0204 	and.w	r2, r3, #4
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10c      	bne.n	8000c0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	331b      	adds	r3, #27
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	0d5b      	lsrs	r3, r3, #21
 8000c02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e00b      	b.n	8000c24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	331b      	adds	r3, #27
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	4413      	add	r3, r2
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	331b      	adds	r3, #27
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	4413      	add	r3, r2
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0202 	and.w	r2, r3, #2
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	331b      	adds	r3, #27
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4413      	add	r3, r2
 8000c46:	3304      	adds	r3, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 020f 	and.w	r2, r3, #15
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	331b      	adds	r3, #27
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	331b      	adds	r3, #27
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	4413      	add	r3, r2
 8000c76:	3304      	adds	r3, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	4413      	add	r3, r2
 8000c8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	4413      	add	r3, r2
 8000ca2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	0a1a      	lsrs	r2, r3, #8
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	0c1a      	lsrs	r2, r3, #16
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	0e1a      	lsrs	r2, r3, #24
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	3303      	adds	r3, #3
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	4413      	add	r3, r2
 8000cf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	0a1a      	lsrs	r2, r3, #8
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3305      	adds	r3, #5
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0c1a      	lsrs	r2, r3, #16
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3306      	adds	r3, #6
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	0e1a      	lsrs	r2, r3, #24
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	3307      	adds	r3, #7
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d108      	bne.n	8000d64 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0220 	orr.w	r2, r2, #32
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e006      	b.n	8000d86 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d002      	beq.n	8000db0 <HAL_CAN_ActivateNotification+0x1e>
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d109      	bne.n	8000dc4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6959      	ldr	r1, [r3, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e006      	b.n	8000dd2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
  }
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b08a      	sub	sp, #40	; 0x28
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d07c      	beq.n	8000f1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d023      	beq.n	8000e76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2201      	movs	r2, #1
 8000e34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f983 	bl	800114c <HAL_CAN_TxMailbox0CompleteCallback>
 8000e46:	e016      	b.n	8000e76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5a:	e00c      	b.n	8000e76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	e002      	b.n	8000e76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 f989 	bl	8001188 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d024      	beq.n	8000eca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f963 	bl	8001160 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e9a:	e016      	b.n	8000eca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
 8000eae:	e00c      	b.n	8000eca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	e002      	b.n	8000eca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f969 	bl	800119c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d024      	beq.n	8000f1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000edc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f943 	bl	8001174 <HAL_CAN_TxMailbox2CompleteCallback>
 8000eee:	e016      	b.n	8000f1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	e00c      	b.n	8000f1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
 8000f16:	e002      	b.n	8000f1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f949 	bl	80011b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00c      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2210      	movs	r2, #16
 8000f40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00b      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f930 	bl	80011c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f007 ff5f 	bl	8008e40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00c      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	f003 0320 	and.w	r3, r3, #32
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00b      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f908 	bl	80011d8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f007 ffa9 	bl	8008f38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2210      	movs	r2, #16
 8001000:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f8f2 	bl	80011ec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2208      	movs	r2, #8
 8001022:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8eb 	bl	8001200 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d07b      	beq.n	800112c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	d072      	beq.n	8001124 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001098:	2b00      	cmp	r3, #0
 800109a:	d043      	beq.n	8001124 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03e      	beq.n	8001124 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010ac:	2b60      	cmp	r3, #96	; 0x60
 80010ae:	d02b      	beq.n	8001108 <HAL_CAN_IRQHandler+0x32a>
 80010b0:	2b60      	cmp	r3, #96	; 0x60
 80010b2:	d82e      	bhi.n	8001112 <HAL_CAN_IRQHandler+0x334>
 80010b4:	2b50      	cmp	r3, #80	; 0x50
 80010b6:	d022      	beq.n	80010fe <HAL_CAN_IRQHandler+0x320>
 80010b8:	2b50      	cmp	r3, #80	; 0x50
 80010ba:	d82a      	bhi.n	8001112 <HAL_CAN_IRQHandler+0x334>
 80010bc:	2b40      	cmp	r3, #64	; 0x40
 80010be:	d019      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x316>
 80010c0:	2b40      	cmp	r3, #64	; 0x40
 80010c2:	d826      	bhi.n	8001112 <HAL_CAN_IRQHandler+0x334>
 80010c4:	2b30      	cmp	r3, #48	; 0x30
 80010c6:	d010      	beq.n	80010ea <HAL_CAN_IRQHandler+0x30c>
 80010c8:	2b30      	cmp	r3, #48	; 0x30
 80010ca:	d822      	bhi.n	8001112 <HAL_CAN_IRQHandler+0x334>
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	d002      	beq.n	80010d6 <HAL_CAN_IRQHandler+0x2f8>
 80010d0:	2b20      	cmp	r3, #32
 80010d2:	d005      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010d4:	e01d      	b.n	8001112 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010de:	e019      	b.n	8001114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010e8:	e014      	b.n	8001114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	f043 0320 	orr.w	r3, r3, #32
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010f2:	e00f      	b.n	8001114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010fc:	e00a      	b.n	8001114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001106:	e005      	b.n	8001114 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001110:	e000      	b.n	8001114 <HAL_CAN_IRQHandler+0x336>
            break;
 8001112:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001122:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f868 	bl	8001214 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff29 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff3e 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff31 	bl	800128c <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e165      	b.n	8001734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8154 	bne.w	800172e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d00b      	beq.n	80014a6 <HAL_GPIO_Init+0x5a>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149a:	2b11      	cmp	r3, #17
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0xfc>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80ae 	beq.w	800172e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b5d      	ldr	r3, [pc, #372]	; (800174c <HAL_GPIO_Init+0x300>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a5c      	ldr	r2, [pc, #368]	; (800174c <HAL_GPIO_Init+0x300>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <HAL_GPIO_Init+0x300>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_GPIO_Init+0x304>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <HAL_GPIO_Init+0x308>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d025      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_GPIO_Init+0x30c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01f      	beq.n	8001662 <HAL_GPIO_Init+0x216>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4d      	ldr	r2, [pc, #308]	; (800175c <HAL_GPIO_Init+0x310>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x212>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_GPIO_Init+0x314>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x20e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4b      	ldr	r2, [pc, #300]	; (8001764 <HAL_GPIO_Init+0x318>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x20a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4a      	ldr	r2, [pc, #296]	; (8001768 <HAL_GPIO_Init+0x31c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x206>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a49      	ldr	r2, [pc, #292]	; (800176c <HAL_GPIO_Init+0x320>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x202>
 800164a:	2306      	movs	r3, #6
 800164c:	e00c      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 800164e:	2307      	movs	r3, #7
 8001650:	e00a      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001652:	2305      	movs	r3, #5
 8001654:	e008      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001656:	2304      	movs	r3, #4
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 800165a:	2303      	movs	r3, #3
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x21c>
 8001666:	2300      	movs	r3, #0
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4093      	lsls	r3, r2
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001678:	4935      	ldr	r1, [pc, #212]	; (8001750 <HAL_GPIO_Init+0x304>)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001686:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_GPIO_Init+0x324>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_GPIO_Init+0x324>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	f67f ae96 	bls.w	8001468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40013800 	.word	0x40013800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020800 	.word	0x40020800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40021000 	.word	0x40021000
 8001768:	40021400 	.word	0x40021400
 800176c:	40021800 	.word	0x40021800
 8001770:	40013c00 	.word	0x40013c00

08001774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	401a      	ands	r2, r3
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d104      	bne.n	80017fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	041a      	lsls	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0cc      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d90c      	bls.n	8001848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0b8      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	494d      	ldr	r1, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d044      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d119      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e07f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e067      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7fe fe50 	bl	80005a0 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7fe fe4c 	bl	80005a0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e04f      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d20c      	bcs.n	8001954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e032      	b.n	80019ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4916      	ldr	r1, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001992:	f000 fb4b 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdc4 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00
 80019c8:	40023800 	.word	0x40023800
 80019cc:	0800a5c0 	.word	0x0800a5c0
 80019d0:	20000020 	.word	0x20000020
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a10:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a16:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	496c      	ldr	r1, [pc, #432]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d010      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a3e:	4b64      	ldr	r3, [pc, #400]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a44:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	4960      	ldr	r1, [pc, #384]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d017      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a6c:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4955      	ldr	r1, [pc, #340]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d017      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001aa8:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	4946      	ldr	r1, [pc, #280]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac6:	d101      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 808a 	beq.w	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b0e:	f7fe fd47 	bl	80005a0 <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7fe fd43 	bl	80005a0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e278      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d02f      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d028      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d114      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7fe fd11 	bl	80005a0 <HAL_GetTick>
 8001b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7fe fd0d 	bl	80005a0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e240      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bb0:	d114      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc6:	4902      	ldr	r1, [pc, #8]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	e00c      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	42470e40 	.word	0x42470e40
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001be6:	6093      	str	r3, [r2, #8]
 8001be8:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	4944      	ldr	r1, [pc, #272]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001c0e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00a      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4937      	ldr	r1, [pc, #220]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c44:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	492e      	ldr	r1, [pc, #184]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d011      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	4926      	ldr	r1, [pc, #152]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00a      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	491a      	ldr	r1, [pc, #104]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d011      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	4911      	ldr	r1, [pc, #68]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ce4:	f040 80ff 	bne.w	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cee:	f7fe fc57 	bl	80005a0 <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cf4:	e00e      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cf6:	f7fe fc53 	bl	80005a0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d907      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e188      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	424711e0 	.word	0x424711e0
 8001d10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d14:	4b7e      	ldr	r3, [pc, #504]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ea      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d028      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d124      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d48:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d60:	0e1b      	lsrs	r3, r3, #24
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	019b      	lsls	r3, r3, #6
 8001d72:	431a      	orrs	r2, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	071b      	lsls	r3, r3, #28
 8001d8a:	4961      	ldr	r1, [pc, #388]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da6:	d00a      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d035      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dbc:	d130      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dd0:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd6:	0f1b      	lsrs	r3, r3, #28
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	019b      	lsls	r3, r3, #6
 8001de8:	431a      	orrs	r2, r3
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	071b      	lsls	r3, r3, #28
 8001e00:	4943      	ldr	r1, [pc, #268]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0e:	f023 021f 	bic.w	r2, r3, #31
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	493d      	ldr	r1, [pc, #244]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d029      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e34:	d124      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e4e:	0f1b      	lsrs	r3, r3, #28
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	019b      	lsls	r3, r3, #6
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	431a      	orrs	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	071b      	lsls	r3, r3, #28
 8001e78:	4925      	ldr	r1, [pc, #148]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	071b      	lsls	r3, r3, #28
 8001eb2:	4917      	ldr	r1, [pc, #92]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7fe fb6e 	bl	80005a0 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ec8:	f7fe fb6a 	bl	80005a0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e09f      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	f040 8095 	bne.w	8002018 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fb54 	bl	80005a0 <HAL_GetTick>
 8001ef8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001efa:	e00f      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001efc:	f7fe fb50 	bl	80005a0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d908      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e085      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	42470068 	.word	0x42470068
 8001f18:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f1c:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f28:	d0e8      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d02b      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d127      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f52:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	019b      	lsls	r3, r3, #6
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	4928      	ldr	r1, [pc, #160]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	3b01      	subs	r3, #1
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01d      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fb6:	d118      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	0e1b      	lsrs	r3, r3, #24
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	4910      	ldr	r1, [pc, #64]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fad6 	bl	80005a0 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ff8:	f7fe fad2 	bl	80005a0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e007      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002016:	d1ef      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	42470070 	.word	0x42470070

0800202c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002030:	b087      	sub	sp, #28
 8002032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002034:	2600      	movs	r6, #0
 8002036:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002038:	2600      	movs	r6, #0
 800203a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 800203c:	2600      	movs	r6, #0
 800203e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002040:	2600      	movs	r6, #0
 8002042:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002044:	2600      	movs	r6, #0
 8002046:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002048:	4ea3      	ldr	r6, [pc, #652]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800204a:	68b6      	ldr	r6, [r6, #8]
 800204c:	f006 060c 	and.w	r6, r6, #12
 8002050:	2e0c      	cmp	r6, #12
 8002052:	f200 8137 	bhi.w	80022c4 <HAL_RCC_GetSysClockFreq+0x298>
 8002056:	f20f 0c08 	addw	ip, pc, #8
 800205a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002095 	.word	0x08002095
 8002064:	080022c5 	.word	0x080022c5
 8002068:	080022c5 	.word	0x080022c5
 800206c:	080022c5 	.word	0x080022c5
 8002070:	0800209b 	.word	0x0800209b
 8002074:	080022c5 	.word	0x080022c5
 8002078:	080022c5 	.word	0x080022c5
 800207c:	080022c5 	.word	0x080022c5
 8002080:	080020a1 	.word	0x080020a1
 8002084:	080022c5 	.word	0x080022c5
 8002088:	080022c5 	.word	0x080022c5
 800208c:	080022c5 	.word	0x080022c5
 8002090:	080021b7 	.word	0x080021b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b91      	ldr	r3, [pc, #580]	; (80022dc <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002096:	613b      	str	r3, [r7, #16]
       break;
 8002098:	e117      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209a:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800209c:	613b      	str	r3, [r7, #16]
      break;
 800209e:	e114      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	461a      	mov	r2, r3
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020c6:	f04f 0500 	mov.w	r5, #0
 80020ca:	ea02 0004 	and.w	r0, r2, r4
 80020ce:	ea03 0105 	and.w	r1, r3, r5
 80020d2:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020d4:	fb03 f201 	mul.w	r2, r3, r1
 80020d8:	2300      	movs	r3, #0
 80020da:	fb03 f300 	mul.w	r3, r3, r0
 80020de:	4413      	add	r3, r2
 80020e0:	4a7f      	ldr	r2, [pc, #508]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80020e2:	fba0 0102 	umull	r0, r1, r0, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	4619      	mov	r1, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	f7fe f887 	bl	8000204 <__aeabi_uldivmod>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4613      	mov	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e04c      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4b75      	ldr	r3, [pc, #468]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	099b      	lsrs	r3, r3, #6
 8002106:	461a      	mov	r2, r3
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	ea02 0800 	and.w	r8, r2, r0
 8002118:	ea03 0901 	and.w	r9, r3, r1
 800211c:	4640      	mov	r0, r8
 800211e:	4649      	mov	r1, r9
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	014b      	lsls	r3, r1, #5
 800212a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800212e:	0142      	lsls	r2, r0, #5
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	ebb0 0008 	subs.w	r0, r0, r8
 8002138:	eb61 0109 	sbc.w	r1, r1, r9
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	018b      	lsls	r3, r1, #6
 8002146:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800214a:	0182      	lsls	r2, r0, #6
 800214c:	1a12      	subs	r2, r2, r0
 800214e:	eb63 0301 	sbc.w	r3, r3, r1
 8002152:	f04f 0000 	mov.w	r0, #0
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	00d9      	lsls	r1, r3, #3
 800215c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002160:	00d0      	lsls	r0, r2, #3
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	eb12 0208 	adds.w	r2, r2, r8
 800216a:	eb43 0309 	adc.w	r3, r3, r9
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0299      	lsls	r1, r3, #10
 8002178:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800217c:	0290      	lsls	r0, r2, #10
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	461a      	mov	r2, r3
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f7fe f839 	bl	8000204 <__aeabi_uldivmod>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4613      	mov	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800219a:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0c1b      	lsrs	r3, r3, #16
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	3301      	adds	r3, #1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	613b      	str	r3, [r7, #16]
      break;
 80021b4:	e089      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b6:	4948      	ldr	r1, [pc, #288]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021b8:	6849      	ldr	r1, [r1, #4]
 80021ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021be:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c0:	4945      	ldr	r1, [pc, #276]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021c2:	6849      	ldr	r1, [r1, #4]
 80021c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80021c8:	2900      	cmp	r1, #0
 80021ca:	d024      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021cc:	4942      	ldr	r1, [pc, #264]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021ce:	6849      	ldr	r1, [r1, #4]
 80021d0:	0989      	lsrs	r1, r1, #6
 80021d2:	4608      	mov	r0, r1
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80021dc:	f04f 0500 	mov.w	r5, #0
 80021e0:	ea00 0204 	and.w	r2, r0, r4
 80021e4:	ea01 0305 	and.w	r3, r1, r5
 80021e8:	493d      	ldr	r1, [pc, #244]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021ea:	fb01 f003 	mul.w	r0, r1, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	fb01 f102 	mul.w	r1, r1, r2
 80021f4:	1844      	adds	r4, r0, r1
 80021f6:	493a      	ldr	r1, [pc, #232]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021f8:	fba2 0101 	umull	r0, r1, r2, r1
 80021fc:	1863      	adds	r3, r4, r1
 80021fe:	4619      	mov	r1, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	461a      	mov	r2, r3
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	f7fd fffc 	bl	8000204 <__aeabi_uldivmod>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4613      	mov	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e04a      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	461a      	mov	r2, r3
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002226:	f04f 0100 	mov.w	r1, #0
 800222a:	ea02 0400 	and.w	r4, r2, r0
 800222e:	ea03 0501 	and.w	r5, r3, r1
 8002232:	4620      	mov	r0, r4
 8002234:	4629      	mov	r1, r5
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	014b      	lsls	r3, r1, #5
 8002240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002244:	0142      	lsls	r2, r0, #5
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	1b00      	subs	r0, r0, r4
 800224c:	eb61 0105 	sbc.w	r1, r1, r5
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	018b      	lsls	r3, r1, #6
 800225a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800225e:	0182      	lsls	r2, r0, #6
 8002260:	1a12      	subs	r2, r2, r0
 8002262:	eb63 0301 	sbc.w	r3, r3, r1
 8002266:	f04f 0000 	mov.w	r0, #0
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	00d9      	lsls	r1, r3, #3
 8002270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002274:	00d0      	lsls	r0, r2, #3
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	1912      	adds	r2, r2, r4
 800227c:	eb45 0303 	adc.w	r3, r5, r3
 8002280:	f04f 0000 	mov.w	r0, #0
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	0299      	lsls	r1, r3, #10
 800228a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800228e:	0290      	lsls	r0, r2, #10
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	461a      	mov	r2, r3
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f7fd ffb0 	bl	8000204 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0f1b      	lsrs	r3, r3, #28
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	613b      	str	r3, [r7, #16]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetSysClockFreq+0x2b0>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	693b      	ldr	r3, [r7, #16]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	017d7840 	.word	0x017d7840

080022e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8083 	beq.w	8002404 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022fe:	4b95      	ldr	r3, [pc, #596]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800230a:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002316:	4b8f      	ldr	r3, [pc, #572]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d00c      	beq.n	800233e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002324:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d112      	bne.n	8002356 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002330:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233c:	d10b      	bne.n	8002356 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	4b85      	ldr	r3, [pc, #532]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d05b      	beq.n	8002402 <HAL_RCC_OscConfig+0x11e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d157      	bne.n	8002402 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e216      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x8a>
 8002360:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7b      	ldr	r2, [pc, #492]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e01d      	b.n	80023aa <HAL_RCC_OscConfig+0xc6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0xae>
 8002378:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a75      	ldr	r2, [pc, #468]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800237e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a72      	ldr	r2, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0xc6>
 8002392:	4b70      	ldr	r3, [pc, #448]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6f      	ldr	r2, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a6c      	ldr	r2, [pc, #432]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80023a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d013      	beq.n	80023da <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe f8f5 	bl	80005a0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ba:	f7fe f8f1 	bl	80005a0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1db      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0xd6>
 80023d8:	e014      	b.n	8002404 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe f8e1 	bl	80005a0 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e2:	f7fe f8dd 	bl	80005a0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1c7      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f4:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0xfe>
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06f      	beq.n	80024f0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b00      	cmp	r3, #0
 800241a:	d017      	beq.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002424:	2b08      	cmp	r3, #8
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002428:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002434:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800243c:	2b0c      	cmp	r3, #12
 800243e:	d11c      	bne.n	800247a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002440:	4b44      	ldr	r3, [pc, #272]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244c:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_OscConfig+0x180>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e18f      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4938      	ldr	r1, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002478:	e03a      	b.n	80024f0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d020      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002482:	4b35      	ldr	r3, [pc, #212]	; (8002558 <HAL_RCC_OscConfig+0x274>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe f88a 	bl	80005a0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002490:	f7fe f886 	bl	80005a0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e170      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4925      	ldr	r1, [pc, #148]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x274>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe f869 	bl	80005a0 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe f865 	bl	80005a0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e14f      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d037      	beq.n	800256c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d016      	beq.n	8002532 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_RCC_OscConfig+0x278>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe f849 	bl	80005a0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe f845 	bl	80005a0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e12f      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x22e>
 8002530:	e01c      	b.n	800256c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_OscConfig+0x278>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe f832 	bl	80005a0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253e:	e00f      	b.n	8002560 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe f82e 	bl	80005a0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d908      	bls.n	8002560 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e118      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	42470000 	.word	0x42470000
 800255c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	4b8a      	ldr	r3, [pc, #552]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e9      	bne.n	8002540 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8097 	beq.w	80026a8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b83      	ldr	r3, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a7e      	ldr	r2, [pc, #504]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b7c      	ldr	r3, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d118      	bne.n	80025e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c2:	f7fd ffed 	bl	80005a0 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ca:	f7fd ffe9 	bl	80005a0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0d3      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x4ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x31a>
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a65      	ldr	r2, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	e01c      	b.n	8002638 <HAL_RCC_OscConfig+0x354>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b05      	cmp	r3, #5
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x33c>
 8002606:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a60      	ldr	r2, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x354>
 8002620:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a59      	ldr	r2, [pc, #356]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	4a56      	ldr	r2, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d015      	beq.n	800266c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fd ffae 	bl	80005a0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f7fd ffaa 	bl	80005a0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e092      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265e:	4b4b      	ldr	r3, [pc, #300]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ee      	beq.n	8002648 <HAL_RCC_OscConfig+0x364>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fd ff98 	bl	80005a0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fd ff94 	bl	80005a0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e07c      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268a:	4b40      	ldr	r3, [pc, #256]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ee      	bne.n	8002674 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d068      	beq.n	8002782 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d060      	beq.n	800277e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d145      	bne.n	8002750 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <HAL_RCC_OscConfig+0x4b0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fd ff69 	bl	80005a0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fd ff65 	bl	80005a0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e04f      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	071b      	lsls	r3, r3, #28
 800271c:	491b      	ldr	r1, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_RCC_OscConfig+0x4b0>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fd ff3a 	bl	80005a0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fd ff36 	bl	80005a0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e020      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x44c>
 800274e:	e018      	b.n	8002782 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_RCC_OscConfig+0x4b0>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fd ff23 	bl	80005a0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fd ff1f 	bl	80005a0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e009      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x4a8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x47a>
 800277c:	e001      	b.n	8002782 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000
 8002794:	42470060 	.word	0x42470060

08002798 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    /* Check the SPI handle allocation */
    if (hspi == NULL) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Init+0x12>
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e056      	b.n	8002858 <HAL_SPI_Init+0xc0>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
    {
        assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    }
#else
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

    if (hspi->State == HAL_SPI_STATE_RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <HAL_SPI_Init+0x32>
    {
        /* Allocate lock resource and initialize it */
        hspi->Lock = HAL_UNLOCKED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        hspi->MspInitCallback(hspi);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
        HAL_SPI_MspInit(hspi);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f007 f96d 	bl	8009aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }

    hspi->State = HAL_SPI_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Disable the selected SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e0:	601a      	str	r2, [r3, #0]

    /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
    /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
    WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
            hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
            hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

    /* Configure : NSS management, TI Mode */
    WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	f003 0104 	and.w	r1, r3, #4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]
    }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
    /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
    CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    hspi->State     = HAL_SPI_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_SPI_TransmitReceive>:
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef* hspi, uint8_t const * pTxData, uint16_t tx_size, uint8_t* pRxData, uint16_t rx_size,
        uint32_t Timeout) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
    uint16_t             initial_TxXferCount = tx_size;
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	843b      	strh	r3, [r7, #32]
    uint32_t             tmp_mode = hspi->Init.Mode;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	61fb      	str	r3, [r7, #28]
    HAL_SPI_StateTypeDef tmp_state = hspi->State;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002880:	76fb      	strb	r3, [r7, #27]

    /* Variable used to alternate Rx and Tx during transfer */
    uint32_t             txallowed = 1U;
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_StatusTypeDef    errorcode = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_SPI_TransmitReceive+0x3a>
 8002896:	2302      	movs	r3, #2
 8002898:	e17b      	b.n	8002b92 <HAL_SPI_TransmitReceive+0x332>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init tickstart for timeout management*/
    uint32_t const tickstart = HAL_GetTick();
 80028a2:	f7fd fe7d 	bl	80005a0 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028a8:	7efb      	ldrb	r3, [r7, #27]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d00e      	beq.n	80028cc <HAL_SPI_TransmitReceive+0x6c>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b4:	d106      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x64>
            ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x64>
 80028be:	7efb      	ldrb	r3, [r7, #27]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d003      	beq.n	80028cc <HAL_SPI_TransmitReceive+0x6c>
    {
        errorcode = HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
 80028c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80028ca:	e158      	b.n	8002b7e <HAL_SPI_TransmitReceive+0x31e>
    }

    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d003      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x80>
        hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2205      	movs	r2, #5
 80028dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Set the transaction information */
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
    hspi->pRxBuffPtr  = pRxData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferCount = rx_size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80028f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferSize  = rx_size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80028f6:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->pTxBuffPtr  = pTxData;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferCount = tx_size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->TxXferSize  = tx_size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	88fa      	ldrh	r2, [r7, #6]
 8002908:	869a      	strh	r2, [r3, #52]	; 0x34

    /*Init field not used in handle to zero */
    hspi->RxISR       = NULL;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR       = NULL;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
        SPI_RESET_CRC(hspi);
    }
#endif /* USE_SPI_CRC */

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d007      	beq.n	8002934 <HAL_SPI_TransmitReceive+0xd4>
    {
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002932:	601a      	str	r2, [r3, #0]
    }

    /* Transmit and Receive data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	d178      	bne.n	8002a30 <HAL_SPI_TransmitReceive+0x1d0>
    {
        if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_SPI_TransmitReceive+0xec>
 8002946:	8c3b      	ldrh	r3, [r7, #32]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d166      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x1ba>
        {
            hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60da      	str	r2, [r3, #12]
            hspi->pTxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
            hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002970:	e053      	b.n	8002a1a <HAL_SPI_TransmitReceive+0x1ba>
        {
            /* Check TXE flag */
            if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	d11b      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x158>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x158>
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	2b01      	cmp	r3, #1
 800298e:	d113      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x158>
            {
                hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60da      	str	r2, [r3, #12]
                hspi->pTxBuffPtr += sizeof(uint16_t);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
                hspi->TxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	86da      	strh	r2, [r3, #54]	; 0x36
                /* Next Data is a reception (Rx). Tx not allowed */
                txallowed = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
                }
#endif /* USE_SPI_CRC */
            }

            /* Check RXNE flag */
            if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d119      	bne.n	80029fa <HAL_SPI_TransmitReceive+0x19a>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d014      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x19a>
            {
                *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	b292      	uxth	r2, r2
 80029dc:	801a      	strh	r2, [r3, #0]
                hspi->pRxBuffPtr += sizeof(uint16_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	1c9a      	adds	r2, r3, #2
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
                hspi->RxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e
                /* Next Data is a Transmission (Tx). Tx is allowed */
                txallowed = 1U;
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029fa:	f7fd fdd1 	bl	80005a0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d807      	bhi.n	8002a1a <HAL_SPI_TransmitReceive+0x1ba>
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d003      	beq.n	8002a1a <HAL_SPI_TransmitReceive+0x1ba>
            {
                errorcode = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                goto error;
 8002a18:	e0b1      	b.n	8002b7e <HAL_SPI_TransmitReceive+0x31e>
        while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1a6      	bne.n	8002972 <HAL_SPI_TransmitReceive+0x112>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1a1      	bne.n	8002972 <HAL_SPI_TransmitReceive+0x112>
 8002a2e:	e086      	b.n	8002b3e <HAL_SPI_TransmitReceive+0x2de>
        }
    }
    /* Transmit and Receive data in 8 Bit mode */
    else
    {
        if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_TransmitReceive+0x1de>
 8002a38:	8c3b      	ldrh	r3, [r7, #32]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d175      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x2ca>
        {
            *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	701a      	strb	r2, [r3, #0]
            hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
            hspi->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	86da      	strh	r2, [r3, #54]	; 0x36
        }

        while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8002a64:	e061      	b.n	8002b2a <HAL_SPI_TransmitReceive+0x2ca>
            /* Check TXE flag */
            if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (txallowed == 1U)) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d122      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x25a>
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d11f      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x25a>
                if (hspi->TxXferCount > 0U) {
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x24c>
                    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	701a      	strb	r2, [r3, #0]
                    hspi->pTxBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
                    hspi->TxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aaa:	e004      	b.n	8002ab6 <HAL_SPI_TransmitReceive+0x256>
                } else {
                    *(__IO uint8_t *)&hspi->Instance->DR = 0;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
                }
                /* Next Data is a reception (Rx). Tx not allowed */
                txallowed = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
                }
#endif /* USE_SPI_CRC */
            }

            /* Wait until RXNE flag is reset */
            if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))) {
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11d      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x2a4>
                if (hspi->RxXferCount > 0U) {
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d013      	beq.n	8002afa <HAL_SPI_TransmitReceive+0x29a>
                    (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
                    hspi->pRxBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
                    hspi->RxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002af8:	e002      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x2a0>
                } else {
                    (void) hspi->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
                }
                /* Next Data is a Transmission (Tx). Tx is allowed */
                txallowed = 1U;
 8002b00:	2301      	movs	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
            }
            if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8002b04:	f7fd fd4c 	bl	80005a0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d803      	bhi.n	8002b1c <HAL_SPI_TransmitReceive+0x2bc>
 8002b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d102      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x2c2>
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x2ca>
                errorcode = HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                goto error;
 8002b28:	e029      	b.n	8002b7e <HAL_SPI_TransmitReceive+0x31e>
        while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d198      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x206>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d193      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x206>
        errorcode = HAL_ERROR;
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f894 	bl	8002c70 <SPI_EndRxTxTransaction>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_SPI_TransmitReceive+0x2fc>
        errorcode = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
        goto error;
 8002b5a:	e010      	b.n	8002b7e <HAL_SPI_TransmitReceive+0x31e>
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x31c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	e000      	b.n	8002b7e <HAL_SPI_TransmitReceive+0x31e>

    error :
 8002b7c:	bf00      	nop
    hspi->State = HAL_SPI_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    __HAL_UNLOCK(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return errorcode;
 8002b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <SPI_WaitFlagStateUntilTimeout>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
        uint32_t Timeout, uint32_t Tickstart)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	71fb      	strb	r3, [r7, #7]
    while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002baa:	e04c      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
        if (Timeout != HAL_MAX_DELAY)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d048      	beq.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xac>
        {
            if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bb4:	f7fd fcf4 	bl	80005a0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d902      	bls.n	8002bca <SPI_WaitFlagStateUntilTimeout+0x30>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d13d      	bne.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xac>
                /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

                /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
                __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd8:	605a      	str	r2, [r3, #4]

                if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be2:	d111      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d004      	beq.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                        || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf6:	d107      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x6e>
                {
                    /* Disable SPI peripheral */
                    __HAL_SPI_DISABLE(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	601a      	str	r2, [r3, #0]
                }

                /* Reset CRC Calculation */
                if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c10:	d10f      	bne.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0x98>
                {
                    SPI_RESET_CRC(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c30:	601a      	str	r2, [r3, #0]
                }

                hspi->State = HAL_SPI_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

                /* Process Unlocked */
                __HAL_UNLOCK(hspi);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

                return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e00f      	b.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xcc>
    while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1a3      	bne.n	8002bac <SPI_WaitFlagStateUntilTimeout+0x12>
            }
        }
    }

    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <SPI_EndRxTxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <SPI_EndRxTxTransaction+0x7c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <SPI_EndRxTxTransaction+0x80>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0d5b      	lsrs	r3, r3, #21
 8002c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
    /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9a:	d112      	bne.n	8002cc2 <SPI_EndRxTxTransaction+0x52>
    {
        /* Control the BSY flag */
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff ff77 	bl	8002b9a <SPI_WaitFlagStateUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <SPI_EndRxTxTransaction+0x70>
        {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e00f      	b.n	8002ce2 <SPI_EndRxTxTransaction+0x72>
         * User have to calculate the timeout value to fit with the time of 1 byte transfer.
         * This time is directly link with the SPI clock from Master device.
         */
        do
        {
            if (count == 0U)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <SPI_EndRxTxTransaction+0x6e>
            {
                break;
            }
            count--;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
        } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d0f2      	beq.n	8002cc2 <SPI_EndRxTxTransaction+0x52>
 8002cdc:	e000      	b.n	8002ce0 <SPI_EndRxTxTransaction+0x70>
                break;
 8002cde:	bf00      	nop
    }

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000020 	.word	0x20000020
 8002cf0:	165e9f81 	.word	0x165e9f81

08002cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01d      	b.n	8002d42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f006 ff0a 	bl	8009b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 fa06 	bl	8003144 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01d      	b.n	8002d98 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f815 	bl	8002da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f000 f9db 	bl	8003144 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fca6 	bl	8003718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_TIM_PWM_Start+0x74>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_PWM_Start+0x2c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_TIM_PWM_Start+0x78>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_TIM_PWM_Start+0x30>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_TIM_PWM_Start+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d007      	beq.n	8002e1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40010400 	.word	0x40010400

08002e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0b4      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f200 809f 	bhi.w	8002fa0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002fa1 	.word	0x08002fa1
 8002e70:	08002fa1 	.word	0x08002fa1
 8002e74:	08002fa1 	.word	0x08002fa1
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002fa1 	.word	0x08002fa1
 8002e80:	08002fa1 	.word	0x08002fa1
 8002e84:	08002fa1 	.word	0x08002fa1
 8002e88:	08002f1f 	.word	0x08002f1f
 8002e8c:	08002fa1 	.word	0x08002fa1
 8002e90:	08002fa1 	.word	0x08002fa1
 8002e94:	08002fa1 	.word	0x08002fa1
 8002e98:	08002f5f 	.word	0x08002f5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f9ee 	bl	8003284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0204 	bic.w	r2, r2, #4
 8002ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	619a      	str	r2, [r3, #24]
      break;
 8002eda:	e062      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fa3e 	bl	8003364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]
      break;
 8002f1c:	e041      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fa93 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0208 	orr.w	r2, r2, #8
 8002f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0204 	bic.w	r2, r2, #4
 8002f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
      break;
 8002f5c:	e021      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fae7 	bl	8003538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69d9      	ldr	r1, [r3, #28]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	021a      	lsls	r2, r3, #8
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	61da      	str	r2, [r3, #28]
      break;
 8002f9e:	e000      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002fa0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_TIM_ConfigClockSource+0x18>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e0b3      	b.n	800313c <HAL_TIM_ConfigClockSource+0x180>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300c:	d03e      	beq.n	800308c <HAL_TIM_ConfigClockSource+0xd0>
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	f200 8087 	bhi.w	8003124 <HAL_TIM_ConfigClockSource+0x168>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	f000 8085 	beq.w	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	d87f      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b70      	cmp	r3, #112	; 0x70
 8003026:	d01a      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xa2>
 8003028:	2b70      	cmp	r3, #112	; 0x70
 800302a:	d87b      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b60      	cmp	r3, #96	; 0x60
 800302e:	d050      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x116>
 8003030:	2b60      	cmp	r3, #96	; 0x60
 8003032:	d877      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b50      	cmp	r3, #80	; 0x50
 8003036:	d03c      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0xf6>
 8003038:	2b50      	cmp	r3, #80	; 0x50
 800303a:	d873      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d058      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x136>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d86f      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 8003044:	2b30      	cmp	r3, #48	; 0x30
 8003046:	d064      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x156>
 8003048:	2b30      	cmp	r3, #48	; 0x30
 800304a:	d86b      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 800304c:	2b20      	cmp	r3, #32
 800304e:	d060      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x156>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d867      	bhi.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05c      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x156>
 8003058:	2b10      	cmp	r3, #16
 800305a:	d05a      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800305c:	e062      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f000 fb33 	bl	80036d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003080:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	609a      	str	r2, [r3, #8]
      break;
 800308a:	e04e      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f000 fb1c 	bl	80036d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ae:	609a      	str	r2, [r3, #8]
      break;
 80030b0:	e03b      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 fa90 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2150      	movs	r1, #80	; 0x50
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fae9 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 80030d0:	e02b      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 faaf 	bl	8003642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2160      	movs	r1, #96	; 0x60
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fad9 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 80030f0:	e01b      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f000 fa70 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fac9 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003110:	e00b      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f000 fac0 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003122:	e002      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003124:	bf00      	nop
 8003126:	e000      	b.n	800312a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003128:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <TIM_Base_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d00f      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3d      	ldr	r2, [pc, #244]	; (800325c <TIM_Base_SetConfig+0x118>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3c      	ldr	r2, [pc, #240]	; (8003260 <TIM_Base_SetConfig+0x11c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <TIM_Base_SetConfig+0x120>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3a      	ldr	r2, [pc, #232]	; (8003268 <TIM_Base_SetConfig+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <TIM_Base_SetConfig+0x114>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02b      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d027      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2c      	ldr	r2, [pc, #176]	; (800325c <TIM_Base_SetConfig+0x118>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d023      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <TIM_Base_SetConfig+0x11c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01f      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <TIM_Base_SetConfig+0x120>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01b      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a29      	ldr	r2, [pc, #164]	; (8003268 <TIM_Base_SetConfig+0x124>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d017      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <TIM_Base_SetConfig+0x128>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a27      	ldr	r2, [pc, #156]	; (8003270 <TIM_Base_SetConfig+0x12c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a26      	ldr	r2, [pc, #152]	; (8003274 <TIM_Base_SetConfig+0x130>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a25      	ldr	r2, [pc, #148]	; (8003278 <TIM_Base_SetConfig+0x134>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a24      	ldr	r2, [pc, #144]	; (800327c <TIM_Base_SetConfig+0x138>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <TIM_Base_SetConfig+0x13c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <TIM_Base_SetConfig+0x114>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0xf8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <TIM_Base_SetConfig+0x124>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40010400 	.word	0x40010400
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800
 8003278:	40001800 	.word	0x40001800
 800327c:	40001c00 	.word	0x40001c00
 8003280:	40002000 	.word	0x40002000

08003284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a20      	ldr	r2, [pc, #128]	; (800335c <TIM_OC1_SetConfig+0xd8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC1_SetConfig+0x64>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <TIM_OC1_SetConfig+0xdc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10c      	bne.n	8003302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0308 	bic.w	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a15      	ldr	r2, [pc, #84]	; (800335c <TIM_OC1_SetConfig+0xd8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_OC1_SetConfig+0x8e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <TIM_OC1_SetConfig+0xdc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40010000 	.word	0x40010000
 8003360:	40010400 	.word	0x40010400

08003364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0210 	bic.w	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0320 	bic.w	r3, r3, #32
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a22      	ldr	r2, [pc, #136]	; (8003448 <TIM_OC2_SetConfig+0xe4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_OC2_SetConfig+0x68>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_OC2_SetConfig+0xe8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10d      	bne.n	80033e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <TIM_OC2_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x94>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC2_SetConfig+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d113      	bne.n	8003420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40010400 	.word	0x40010400

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <TIM_OC3_SetConfig+0xe0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_OC3_SetConfig+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a20      	ldr	r2, [pc, #128]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10d      	bne.n	80034d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <TIM_OC3_SetConfig+0xe0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC3_SetConfig+0x92>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d113      	bne.n	800350a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40010000 	.word	0x40010000
 8003534:	40010400 	.word	0x40010400

08003538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <TIM_OC4_SetConfig+0xa4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC4_SetConfig+0x68>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <TIM_OC4_SetConfig+0xa8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d109      	bne.n	80035b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010400 	.word	0x40010400

080035e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 030a 	bic.w	r3, r3, #10
 8003620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 0307 	orr.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2201      	movs	r2, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e05a      	b.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d022      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d01d      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10c      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4313      	orrs	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40001800 	.word	0x40001800

0800385c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	4a08      	ldr	r2, [pc, #32]	; (800388c <disk_status+0x30>)
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	79fa      	ldrb	r2, [r7, #7]
 8003874:	4905      	ldr	r1, [pc, #20]	; (800388c <disk_status+0x30>)
 8003876:	440a      	add	r2, r1
 8003878:	7a12      	ldrb	r2, [r2, #8]
 800387a:	4610      	mov	r0, r2
 800387c:	4798      	blx	r3
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200000d0 	.word	0x200000d0

08003890 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <disk_initialize+0x48>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <disk_initialize+0x48>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <disk_initialize+0x48>)
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	79fa      	ldrb	r2, [r7, #7]
 80038be:	4906      	ldr	r1, [pc, #24]	; (80038d8 <disk_initialize+0x48>)
 80038c0:	440a      	add	r2, r1
 80038c2:	7a12      	ldrb	r2, [r2, #8]
 80038c4:	4610      	mov	r0, r2
 80038c6:	4798      	blx	r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200000d0 	.word	0x200000d0

080038dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <disk_read+0x3c>)
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	689c      	ldr	r4, [r3, #8]
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <disk_read+0x3c>)
 80038fc:	4413      	add	r3, r2
 80038fe:	7a18      	ldrb	r0, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	47a0      	blx	r4
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]
  return res;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}
 8003916:	bf00      	nop
 8003918:	200000d0 	.word	0x200000d0

0800391c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4603      	mov	r3, r0
 800392a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <disk_write+0x3c>)
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	68dc      	ldr	r4, [r3, #12]
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <disk_write+0x3c>)
 800393c:	4413      	add	r3, r2
 800393e:	7a18      	ldrb	r0, [r3, #8]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	47a0      	blx	r4
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]
  return res;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
}
 800394e:	4618      	mov	r0, r3
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	200000d0 	.word	0x200000d0

0800395c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	603a      	str	r2, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
 8003968:	460b      	mov	r3, r1
 800396a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <disk_ioctl+0x38>)
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	79fa      	ldrb	r2, [r7, #7]
 800397a:	4906      	ldr	r1, [pc, #24]	; (8003994 <disk_ioctl+0x38>)
 800397c:	440a      	add	r2, r1
 800397e:	7a10      	ldrb	r0, [r2, #8]
 8003980:	79b9      	ldrb	r1, [r7, #6]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4798      	blx	r3
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
  return res;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200000d0 	.word	0x200000d0

08003998 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3301      	adds	r3, #1
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80039a8:	89fb      	ldrh	r3, [r7, #14]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	b21a      	sxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b21b      	sxth	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80039ba:	89fb      	ldrh	r3, [r7, #14]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3303      	adds	r3, #3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	3202      	adds	r2, #2
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	3201      	adds	r2, #1
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8003a00:	68fb      	ldr	r3, [r7, #12]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	887a      	ldrh	r2, [r7, #2]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	1c53      	adds	r3, r2, #1
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	6179      	str	r1, [r7, #20]
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f1      	bne.n	8003ab6 <mem_cpy+0x1a>
	}
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003ade:	b480      	push	{r7}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	617a      	str	r2, [r7, #20]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f3      	bne.n	8003aee <mem_set+0x10>
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003b14:	b480      	push	{r7}
 8003b16:	b089      	sub	sp, #36	; 0x24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	61fa      	str	r2, [r7, #28]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4619      	mov	r1, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	61ba      	str	r2, [r7, #24]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	1acb      	subs	r3, r1, r3
 8003b40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <mem_cmp+0x40>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0eb      	beq.n	8003b2c <mem_cmp+0x18>

	return r;
 8003b54:	697b      	ldr	r3, [r7, #20]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3724      	adds	r7, #36	; 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003b6c:	e002      	b.n	8003b74 <chk_chr+0x12>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3301      	adds	r3, #1
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <chk_chr+0x26>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d1f2      	bne.n	8003b6e <chk_chr+0xc>
	return *str;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e029      	b.n	8003c00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003bac:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <chk_lock+0xb4>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	4413      	add	r3, r2
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01d      	beq.n	8003bf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003bba:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <chk_lock+0xb4>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d116      	bne.n	8003bfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <chk_lock+0xb4>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d10c      	bne.n	8003bfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <chk_lock+0xb4>)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	4413      	add	r3, r2
 8003be8:	3308      	adds	r3, #8
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d102      	bne.n	8003bfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003bf4:	e007      	b.n	8003c06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d9d2      	bls.n	8003bac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d109      	bne.n	8003c20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <chk_lock+0x80>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d101      	bne.n	8003c1c <chk_lock+0x84>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e010      	b.n	8003c3e <chk_lock+0xa6>
 8003c1c:	2312      	movs	r3, #18
 8003c1e:	e00e      	b.n	8003c3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <chk_lock+0xa0>
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <chk_lock+0xb4>)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	4413      	add	r3, r2
 8003c2e:	330c      	adds	r3, #12
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c36:	d101      	bne.n	8003c3c <chk_lock+0xa4>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	e000      	b.n	8003c3e <chk_lock+0xa6>
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	200000b0 	.word	0x200000b0

08003c50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	e002      	b.n	8003c62 <enq_lock+0x12>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d806      	bhi.n	8003c76 <enq_lock+0x26>
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <enq_lock+0x40>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f2      	bne.n	8003c5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	200000b0 	.word	0x200000b0

08003c94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e01f      	b.n	8003ce4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003ca4:	4a41      	ldr	r2, [pc, #260]	; (8003dac <inc_lock+0x118>)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	4413      	add	r3, r2
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d113      	bne.n	8003cde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003cb6:	4a3d      	ldr	r2, [pc, #244]	; (8003dac <inc_lock+0x118>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d109      	bne.n	8003cde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003cca:	4a38      	ldr	r2, [pc, #224]	; (8003dac <inc_lock+0x118>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d006      	beq.n	8003cec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d9dc      	bls.n	8003ca4 <inc_lock+0x10>
 8003cea:	e000      	b.n	8003cee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003cec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d132      	bne.n	8003d5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e002      	b.n	8003d00 <inc_lock+0x6c>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d806      	bhi.n	8003d14 <inc_lock+0x80>
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <inc_lock+0x118>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	4413      	add	r3, r2
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f2      	bne.n	8003cfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d101      	bne.n	8003d1e <inc_lock+0x8a>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e040      	b.n	8003da0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4922      	ldr	r1, [pc, #136]	; (8003dac <inc_lock+0x118>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	440b      	add	r3, r1
 8003d2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	491e      	ldr	r1, [pc, #120]	; (8003dac <inc_lock+0x118>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	440b      	add	r3, r1
 8003d38:	3304      	adds	r3, #4
 8003d3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	491a      	ldr	r1, [pc, #104]	; (8003dac <inc_lock+0x118>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	440b      	add	r3, r1
 8003d48:	3308      	adds	r3, #8
 8003d4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d4c:	4a17      	ldr	r2, [pc, #92]	; (8003dac <inc_lock+0x118>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	330c      	adds	r3, #12
 8003d56:	2200      	movs	r2, #0
 8003d58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <inc_lock+0xe0>
 8003d60:	4a12      	ldr	r2, [pc, #72]	; (8003dac <inc_lock+0x118>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	4413      	add	r3, r2
 8003d68:	330c      	adds	r3, #12
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <inc_lock+0xe0>
 8003d70:	2300      	movs	r3, #0
 8003d72:	e015      	b.n	8003da0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <inc_lock+0xf8>
 8003d7a:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <inc_lock+0x118>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4413      	add	r3, r2
 8003d82:	330c      	adds	r3, #12
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	e001      	b.n	8003d90 <inc_lock+0xfc>
 8003d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d90:	4906      	ldr	r1, [pc, #24]	; (8003dac <inc_lock+0x118>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	440b      	add	r3, r1
 8003d98:	330c      	adds	r3, #12
 8003d9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	200000b0 	.word	0x200000b0

08003db0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d825      	bhi.n	8003e10 <dec_lock+0x60>
		n = Files[i].ctr;
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <dec_lock+0x74>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	330c      	adds	r3, #12
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd8:	d101      	bne.n	8003dde <dec_lock+0x2e>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <dec_lock+0x3a>
 8003de4:	89fb      	ldrh	r3, [r7, #14]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003dea:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <dec_lock+0x74>)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	4413      	add	r3, r2
 8003df2:	330c      	adds	r3, #12
 8003df4:	89fa      	ldrh	r2, [r7, #14]
 8003df6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003df8:	89fb      	ldrh	r3, [r7, #14]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <dec_lock+0x5a>
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <dec_lock+0x74>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4413      	add	r3, r2
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	737b      	strb	r3, [r7, #13]
 8003e0e:	e001      	b.n	8003e14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003e10:	2302      	movs	r3, #2
 8003e12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003e14:	7b7b      	ldrb	r3, [r7, #13]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	200000b0 	.word	0x200000b0

08003e28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e010      	b.n	8003e58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <clear_lock+0x44>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4413      	add	r3, r2
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d105      	bne.n	8003e52 <clear_lock+0x2a>
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <clear_lock+0x44>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	4413      	add	r3, r2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d9eb      	bls.n	8003e36 <clear_lock+0xe>
	}
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	200000b0 	.word	0x200000b0

08003e70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	78db      	ldrb	r3, [r3, #3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d034      	beq.n	8003eee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	7858      	ldrb	r0, [r3, #1]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e94:	2301      	movs	r3, #1
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	f7ff fd40 	bl	800391c <disk_write>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	e022      	b.n	8003eee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d217      	bcs.n	8003eee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	789b      	ldrb	r3, [r3, #2]
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e010      	b.n	8003ee8 <sync_window+0x78>
					wsect += fs->fsize;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4413      	add	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7858      	ldrb	r0, [r3, #1]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003eda:	2301      	movs	r3, #1
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	f7ff fd1d 	bl	800391c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d8eb      	bhi.n	8003ec6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d01b      	beq.n	8003f48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffad 	bl	8003e70 <sync_window>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d113      	bne.n	8003f48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7858      	ldrb	r0, [r3, #1]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	f7ff fcd5 	bl	80038dc <disk_read>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003f38:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff87 	bl	8003e70 <sync_window>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d158      	bne.n	800401e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d148      	bne.n	8004006 <sync_fs+0xb2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	791b      	ldrb	r3, [r3, #4]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d144      	bne.n	8004006 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3330      	adds	r3, #48	; 0x30
 8003f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fda9 	bl	8003ade <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3330      	adds	r3, #48	; 0x30
 8003f90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003f94:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fd38 	bl	8003a0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3330      	adds	r3, #48	; 0x30
 8003fa2:	4921      	ldr	r1, [pc, #132]	; (8004028 <sync_fs+0xd4>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fd4d 	bl	8003a44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3330      	adds	r3, #48	; 0x30
 8003fae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003fb2:	491e      	ldr	r1, [pc, #120]	; (800402c <sync_fs+0xd8>)
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fd45 	bl	8003a44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3330      	adds	r3, #48	; 0x30
 8003fbe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7ff fd3b 	bl	8003a44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3330      	adds	r3, #48	; 0x30
 8003fd2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7ff fd31 	bl	8003a44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	7858      	ldrb	r0, [r3, #1]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f7ff fc8e 	bl	800391c <disk_write>
			fs->fsi_flag = 0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fca4 	bl	800395c <disk_ioctl>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <sync_fs+0xca>
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	41615252 	.word	0x41615252
 800402c:	61417272 	.word	0x61417272

08004030 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	3b02      	subs	r3, #2
 800403e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	3b02      	subs	r3, #2
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d301      	bcc.n	8004050 <clust2sect+0x20>
 800404c:	2300      	movs	r3, #0
 800404e:	e008      	b.n	8004062 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	895b      	ldrh	r3, [r3, #10]
 8004054:	461a      	mov	r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	fb03 f202 	mul.w	r2, r3, r2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	4413      	add	r3, r2
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d904      	bls.n	800408e <get_fat+0x20>
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d302      	bcc.n	8004094 <get_fat+0x26>
		val = 1;	/* Internal error */
 800408e:	2301      	movs	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e08f      	b.n	80041b4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
 8004098:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d062      	beq.n	8004168 <get_fat+0xfa>
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	dc7c      	bgt.n	80041a0 <get_fat+0x132>
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d002      	beq.n	80040b0 <get_fat+0x42>
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d042      	beq.n	8004134 <get_fat+0xc6>
 80040ae:	e077      	b.n	80041a0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0a5b      	lsrs	r3, r3, #9
 80040c6:	4413      	add	r3, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f7ff ff14 	bl	8003ef8 <move_window>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d167      	bne.n	80041a6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	60fa      	str	r2, [r7, #12]
 80040dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0a5b      	lsrs	r3, r3, #9
 80040f2:	4413      	add	r3, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	6938      	ldr	r0, [r7, #16]
 80040f8:	f7ff fefe 	bl	8003ef8 <move_window>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d153      	bne.n	80041aa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	461a      	mov	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4313      	orrs	r3, r2
 8004118:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <get_fat+0xbc>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	e002      	b.n	8004130 <get_fat+0xc2>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	617b      	str	r3, [r7, #20]
			break;
 8004132:	e03f      	b.n	80041b4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	4413      	add	r3, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6938      	ldr	r0, [r7, #16]
 8004142:	f7ff fed9 	bl	8003ef8 <move_window>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d130      	bne.n	80041ae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800415a:	4413      	add	r3, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fc1b 	bl	8003998 <ld_word>
 8004162:	4603      	mov	r3, r0
 8004164:	617b      	str	r3, [r7, #20]
			break;
 8004166:	e025      	b.n	80041b4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	09db      	lsrs	r3, r3, #7
 8004170:	4413      	add	r3, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6938      	ldr	r0, [r7, #16]
 8004176:	f7ff febf 	bl	8003ef8 <move_window>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d118      	bne.n	80041b2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800418e:	4413      	add	r3, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fc19 	bl	80039c8 <ld_dword>
 8004196:	4603      	mov	r3, r0
 8004198:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800419c:	617b      	str	r3, [r7, #20]
			break;
 800419e:	e009      	b.n	80041b4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80041a0:	2301      	movs	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e006      	b.n	80041b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80041b2:	bf00      	nop
		}
	}

	return val;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80041be:	b590      	push	{r4, r7, lr}
 80041c0:	b089      	sub	sp, #36	; 0x24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f240 80d2 	bls.w	800437a <put_fat+0x1bc>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	f080 80cc 	bcs.w	800437a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	f000 8096 	beq.w	8004318 <put_fat+0x15a>
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	f300 80cd 	bgt.w	800438c <put_fat+0x1ce>
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d002      	beq.n	80041fc <put_fat+0x3e>
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d06e      	beq.n	80042d8 <put_fat+0x11a>
 80041fa:	e0c7      	b.n	800438c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	0a5b      	lsrs	r3, r3, #9
 8004212:	4413      	add	r3, r2
 8004214:	4619      	mov	r1, r3
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff fe6e 	bl	8003ef8 <move_window>
 800421c:	4603      	mov	r3, r0
 800421e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 80ab 	bne.w	800437e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	1c59      	adds	r1, r3, #1
 8004232:	61b9      	str	r1, [r7, #24]
 8004234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004238:	4413      	add	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <put_fat+0xa4>
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b25b      	sxtb	r3, r3
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	b25a      	sxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	b25b      	sxtb	r3, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	b25b      	sxtb	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e001      	b.n	8004266 <put_fat+0xa8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	0a5b      	lsrs	r3, r3, #9
 8004278:	4413      	add	r3, r2
 800427a:	4619      	mov	r1, r3
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff fe3b 	bl	8003ef8 <move_window>
 8004282:	4603      	mov	r3, r0
 8004284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d17a      	bne.n	8004382 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	4413      	add	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <put_fat+0xf0>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	e00e      	b.n	80042cc <put_fat+0x10e>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	f023 030f 	bic.w	r3, r3, #15
 80042b8:	b25a      	sxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	70da      	strb	r2, [r3, #3]
			break;
 80042d6:	e059      	b.n	800438c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	4413      	add	r3, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fe07 	bl	8003ef8 <move_window>
 80042ea:	4603      	mov	r3, r0
 80042ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d148      	bne.n	8004386 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004302:	4413      	add	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	b292      	uxth	r2, r2
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fb7f 	bl	8003a0e <st_word>
			fs->wflag = 1;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	70da      	strb	r2, [r3, #3]
			break;
 8004316:	e039      	b.n	800438c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	09db      	lsrs	r3, r3, #7
 8004320:	4413      	add	r3, r2
 8004322:	4619      	mov	r1, r3
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff fde7 	bl	8003ef8 <move_window>
 800432a:	4603      	mov	r3, r0
 800432c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d12a      	bne.n	800438a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004348:	4413      	add	r3, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fb3c 	bl	80039c8 <ld_dword>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004356:	4323      	orrs	r3, r4
 8004358:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004368:	4413      	add	r3, r2
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fb69 	bl	8003a44 <st_dword>
			fs->wflag = 1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	70da      	strb	r2, [r3, #3]
			break;
 8004378:	e008      	b.n	800438c <put_fat+0x1ce>
		}
	}
 800437a:	bf00      	nop
 800437c:	e006      	b.n	800438c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800438a:	bf00      	nop
	return res;
 800438c:	7ffb      	ldrb	r3, [r7, #31]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd90      	pop	{r4, r7, pc}

08004396 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d904      	bls.n	80043bc <remove_chain+0x26>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d301      	bcc.n	80043c0 <remove_chain+0x2a>
 80043bc:	2302      	movs	r3, #2
 80043be:	e04b      	b.n	8004458 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	69b8      	ldr	r0, [r7, #24]
 80043ce:	f7ff fef6 	bl	80041be <put_fat>
 80043d2:	4603      	mov	r3, r0
 80043d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <remove_chain+0x4a>
 80043dc:	7ffb      	ldrb	r3, [r7, #31]
 80043de:	e03b      	b.n	8004458 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fe43 	bl	800406e <get_fat>
 80043e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d031      	beq.n	8004454 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <remove_chain+0x64>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e02e      	b.n	8004458 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d101      	bne.n	8004406 <remove_chain+0x70>
 8004402:	2301      	movs	r3, #1
 8004404:	e028      	b.n	8004458 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004406:	2200      	movs	r2, #0
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	69b8      	ldr	r0, [r7, #24]
 800440c:	f7ff fed7 	bl	80041be <put_fat>
 8004410:	4603      	mov	r3, r0
 8004412:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004414:	7ffb      	ldrb	r3, [r7, #31]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <remove_chain+0x88>
 800441a:	7ffb      	ldrb	r3, [r7, #31]
 800441c:	e01c      	b.n	8004458 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	3b02      	subs	r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d20b      	bcs.n	8004444 <remove_chain+0xae>
			fs->free_clst++;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	791b      	ldrb	r3, [r3, #4]
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d3c6      	bcc.n	80043e0 <remove_chain+0x4a>
 8004452:	e000      	b.n	8004456 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004454:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <create_chain+0x2c>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d31b      	bcc.n	80044c4 <create_chain+0x64>
 800448c:	2301      	movs	r3, #1
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	e018      	b.n	80044c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004492:	6839      	ldr	r1, [r7, #0]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fdea 	bl	800406e <get_fat>
 800449a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d801      	bhi.n	80044a6 <create_chain+0x46>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e070      	b.n	8004588 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d101      	bne.n	80044b2 <create_chain+0x52>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	e06a      	b.n	8004588 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d201      	bcs.n	80044c0 <create_chain+0x60>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	e063      	b.n	8004588 <create_chain+0x128>
		scl = clst;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d307      	bcc.n	80044e8 <create_chain+0x88>
				ncl = 2;
 80044d8:	2302      	movs	r3, #2
 80044da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d901      	bls.n	80044e8 <create_chain+0x88>
 80044e4:	2300      	movs	r3, #0
 80044e6:	e04f      	b.n	8004588 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80044e8:	69f9      	ldr	r1, [r7, #28]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fdbf 	bl	800406e <get_fat>
 80044f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d003      	beq.n	8004506 <create_chain+0xa6>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d101      	bne.n	800450a <create_chain+0xaa>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	e03e      	b.n	8004588 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	429a      	cmp	r2, r3
 8004510:	d1da      	bne.n	80044c8 <create_chain+0x68>
 8004512:	2300      	movs	r3, #0
 8004514:	e038      	b.n	8004588 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004516:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	69f9      	ldr	r1, [r7, #28]
 800451e:	6938      	ldr	r0, [r7, #16]
 8004520:	f7ff fe4d 	bl	80041be <put_fat>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <create_chain+0xe2>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6938      	ldr	r0, [r7, #16]
 800453a:	f7ff fe40 	bl	80041be <put_fat>
 800453e:	4603      	mov	r3, r0
 8004540:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <create_chain+0x116>
		fs->last_clst = ncl;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	3b02      	subs	r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d804      	bhi.n	8004566 <create_chain+0x106>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	791b      	ldrb	r3, [r3, #4]
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	b2da      	uxtb	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	711a      	strb	r2, [r3, #4]
 8004574:	e007      	b.n	8004586 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d102      	bne.n	8004582 <create_chain+0x122>
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	e000      	b.n	8004584 <create_chain+0x124>
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004586:	69fb      	ldr	r3, [r7, #28]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	3304      	adds	r3, #4
 80045a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	0a5b      	lsrs	r3, r3, #9
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	8952      	ldrh	r2, [r2, #10]
 80045b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	613a      	str	r2, [r7, #16]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <clmt_clust+0x3a>
 80045c6:	2300      	movs	r3, #0
 80045c8:	e010      	b.n	80045ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d307      	bcc.n	80045e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3304      	adds	r3, #4
 80045de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045e0:	e7e9      	b.n	80045b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80045e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	4413      	add	r3, r2
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800460e:	d204      	bcs.n	800461a <dir_sdi+0x22>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <dir_sdi+0x26>
		return FR_INT_ERR;
 800461a:	2302      	movs	r3, #2
 800461c:	e063      	b.n	80046e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <dir_sdi+0x46>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d902      	bls.n	800463e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10c      	bne.n	800465e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	8912      	ldrh	r2, [r2, #8]
 800464c:	4293      	cmp	r3, r2
 800464e:	d301      	bcc.n	8004654 <dir_sdi+0x5c>
 8004650:	2302      	movs	r3, #2
 8004652:	e048      	b.n	80046e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	61da      	str	r2, [r3, #28]
 800465c:	e029      	b.n	80046b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	895b      	ldrh	r3, [r3, #10]
 8004662:	025b      	lsls	r3, r3, #9
 8004664:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004666:	e019      	b.n	800469c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6979      	ldr	r1, [r7, #20]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fcfe 	bl	800406e <get_fat>
 8004672:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d101      	bne.n	8004680 <dir_sdi+0x88>
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d904      	bls.n	8004690 <dir_sdi+0x98>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	429a      	cmp	r2, r3
 800468e:	d301      	bcc.n	8004694 <dir_sdi+0x9c>
 8004690:	2302      	movs	r3, #2
 8004692:	e028      	b.n	80046e6 <dir_sdi+0xee>
			ofs -= csz;
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d2e1      	bcs.n	8004668 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80046a4:	6979      	ldr	r1, [r7, #20]
 80046a6:	6938      	ldr	r0, [r7, #16]
 80046a8:	f7ff fcc2 	bl	8004030 <clust2sect>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <dir_sdi+0xcc>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e010      	b.n	80046e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	0a5b      	lsrs	r3, r3, #9
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b086      	sub	sp, #24
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	3320      	adds	r3, #32
 8004704:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <dir_next+0x28>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004714:	d301      	bcc.n	800471a <dir_next+0x2c>
 8004716:	2304      	movs	r3, #4
 8004718:	e0aa      	b.n	8004870 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 8098 	bne.w	8004856 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	8912      	ldrh	r2, [r2, #8]
 8004740:	4293      	cmp	r3, r2
 8004742:	f0c0 8088 	bcc.w	8004856 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	61da      	str	r2, [r3, #28]
 800474c:	2304      	movs	r3, #4
 800474e:	e08f      	b.n	8004870 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	0a5b      	lsrs	r3, r3, #9
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	8952      	ldrh	r2, [r2, #10]
 8004758:	3a01      	subs	r2, #1
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d17a      	bne.n	8004856 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7ff fc80 	bl	800406e <get_fat>
 800476e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d801      	bhi.n	800477a <dir_next+0x8c>
 8004776:	2302      	movs	r3, #2
 8004778:	e07a      	b.n	8004870 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d101      	bne.n	8004786 <dir_next+0x98>
 8004782:	2301      	movs	r3, #1
 8004784:	e074      	b.n	8004870 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	429a      	cmp	r2, r3
 800478e:	d358      	bcc.n	8004842 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	61da      	str	r2, [r3, #28]
 800479c:	2304      	movs	r3, #4
 800479e:	e067      	b.n	8004870 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7ff fe59 	bl	8004460 <create_chain>
 80047ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <dir_next+0xcc>
 80047b6:	2307      	movs	r3, #7
 80047b8:	e05a      	b.n	8004870 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <dir_next+0xd6>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e055      	b.n	8004870 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d101      	bne.n	80047d0 <dir_next+0xe2>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e04f      	b.n	8004870 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fb4d 	bl	8003e70 <sync_window>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <dir_next+0xf2>
 80047dc:	2301      	movs	r3, #1
 80047de:	e047      	b.n	8004870 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3330      	adds	r3, #48	; 0x30
 80047e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff f977 	bl	8003ade <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7ff fc1a 	bl	8004030 <clust2sect>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c
 8004802:	e012      	b.n	800482a <dir_next+0x13c>
						fs->wflag = 1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fb30 	bl	8003e70 <sync_window>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <dir_next+0x12c>
 8004816:	2301      	movs	r3, #1
 8004818:	e02a      	b.n	8004870 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3301      	adds	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	895b      	ldrh	r3, [r3, #10]
 800482e:	461a      	mov	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4293      	cmp	r3, r2
 8004834:	d3e6      	bcc.n	8004804 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad2      	subs	r2, r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fbf0 	bl	8004030 <clust2sect>
 8004850:	4602      	mov	r2, r0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004868:	441a      	add	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004888:	2100      	movs	r1, #0
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff feb4 	bl	80045f8 <dir_sdi>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d12b      	bne.n	80048f2 <dir_alloc+0x7a>
		n = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4619      	mov	r1, r3
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fb27 	bl	8003ef8 <move_window>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11d      	bne.n	80048f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2be5      	cmp	r3, #229	; 0xe5
 80048bc:	d004      	beq.n	80048c8 <dir_alloc+0x50>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	3301      	adds	r3, #1
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d102      	bne.n	80048dc <dir_alloc+0x64>
 80048d6:	e00c      	b.n	80048f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80048dc:	2101      	movs	r1, #1
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ff05 	bl	80046ee <dir_next>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0d7      	beq.n	800489e <dir_alloc+0x26>
 80048ee:	e000      	b.n	80048f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80048f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d101      	bne.n	80048fc <dir_alloc+0x84>
 80048f8:	2307      	movs	r3, #7
 80048fa:	75fb      	strb	r3, [r7, #23]
	return res;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	331a      	adds	r3, #26
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f83f 	bl	8003998 <ld_word>
 800491a:	4603      	mov	r3, r0
 800491c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d109      	bne.n	800493a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff f834 	bl	8003998 <ld_word>
 8004930:	4603      	mov	r3, r0
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	331a      	adds	r3, #26
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	b292      	uxth	r2, r2
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff f857 	bl	8003a0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d109      	bne.n	800497c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f103 0214 	add.w	r2, r3, #20
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f7ff f849 	bl	8003a0e <st_word>
	}
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800498e:	2304      	movs	r3, #4
 8004990:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8004998:	e03c      	b.n	8004a14 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	4619      	mov	r1, r3
 80049a0:	6938      	ldr	r0, [r7, #16]
 80049a2:	f7ff faa9 	bl	8003ef8 <move_window>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d136      	bne.n	8004a1e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80049be:	2304      	movs	r3, #4
 80049c0:	75fb      	strb	r3, [r7, #23]
 80049c2:	e031      	b.n	8004a28 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	330b      	adds	r3, #11
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049d0:	73bb      	strb	r3, [r7, #14]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	7bba      	ldrb	r2, [r7, #14]
 80049d6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2be5      	cmp	r3, #229	; 0xe5
 80049dc:	d011      	beq.n	8004a02 <dir_read+0x7e>
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b2e      	cmp	r3, #46	; 0x2e
 80049e2:	d00e      	beq.n	8004a02 <dir_read+0x7e>
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d00b      	beq.n	8004a02 <dir_read+0x7e>
 80049ea:	7bbb      	ldrb	r3, [r7, #14]
 80049ec:	f023 0320 	bic.w	r3, r3, #32
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8004a02:	2100      	movs	r1, #0
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff fe72 	bl	80046ee <dir_next>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d108      	bne.n	8004a26 <dir_read+0xa2>
	while (dp->sect) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1be      	bne.n	800499a <dir_read+0x16>
 8004a1c:	e004      	b.n	8004a28 <dir_read+0xa4>
		if (res != FR_OK) break;
 8004a1e:	bf00      	nop
 8004a20:	e002      	b.n	8004a28 <dir_read+0xa4>
				break;
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <dir_read+0xa4>
		if (res != FR_OK) break;
 8004a26:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <dir_read+0xb0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	61da      	str	r2, [r3, #28]
	return res;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fdd2 	bl	80045f8 <dir_sdi>
 8004a54:	4603      	mov	r3, r0
 8004a56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <dir_find+0x24>
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	e03e      	b.n	8004ae0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	4619      	mov	r1, r3
 8004a68:	6938      	ldr	r0, [r7, #16]
 8004a6a:	f7ff fa45 	bl	8003ef8 <move_window>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d12f      	bne.n	8004ad8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <dir_find+0x4e>
 8004a86:	2304      	movs	r3, #4
 8004a88:	75fb      	strb	r3, [r7, #23]
 8004a8a:	e028      	b.n	8004ade <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	330b      	adds	r3, #11
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	330b      	adds	r3, #11
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <dir_find+0x86>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a18      	ldr	r0, [r3, #32]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3324      	adds	r3, #36	; 0x24
 8004ab6:	220b      	movs	r2, #11
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f7ff f82b 	bl	8003b14 <mem_cmp>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe11 	bl	80046ee <dir_next>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0c5      	beq.n	8004a62 <dir_find+0x24>
 8004ad6:	e002      	b.n	8004ade <dir_find+0xa0>
		if (res != FR_OK) break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004adc:	bf00      	nop

	return res;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004af6:	2101      	movs	r1, #1
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff febd 	bl	8004878 <dir_alloc>
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11c      	bne.n	8004b42 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68b8      	ldr	r0, [r7, #8]
 8004b10:	f7ff f9f2 	bl	8003ef8 <move_window>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d111      	bne.n	8004b42 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	2220      	movs	r2, #32
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe ffd9 	bl	8003ade <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a18      	ldr	r0, [r3, #32]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	220b      	movs	r2, #11
 8004b36:	4619      	mov	r1, r3
 8004b38:	f7fe ffb0 	bl	8003a9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff f9c9 	bl	8003ef8 <move_window>
 8004b66:	4603      	mov	r3, r0
 8004b68:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	22e5      	movs	r2, #229	; 0xe5
 8004b76:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3324      	adds	r3, #36	; 0x24
 8004b9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004b9e:	220b      	movs	r2, #11
 8004ba0:	2120      	movs	r1, #32
 8004ba2:	68b8      	ldr	r0, [r7, #8]
 8004ba4:	f7fe ff9b 	bl	8003ade <mem_set>
	si = i = 0; ni = 8;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	61fa      	str	r2, [r7, #28]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004bc2:	7efb      	ldrb	r3, [r7, #27]
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d94e      	bls.n	8004c66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004bc8:	7efb      	ldrb	r3, [r7, #27]
 8004bca:	2b2f      	cmp	r3, #47	; 0x2f
 8004bcc:	d006      	beq.n	8004bdc <create_name+0x54>
 8004bce:	7efb      	ldrb	r3, [r7, #27]
 8004bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8004bd2:	d110      	bne.n	8004bf6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004bd4:	e002      	b.n	8004bdc <create_name+0x54>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b2f      	cmp	r3, #47	; 0x2f
 8004be6:	d0f6      	beq.n	8004bd6 <create_name+0x4e>
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8004bf2:	d0f0      	beq.n	8004bd6 <create_name+0x4e>
			break;
 8004bf4:	e038      	b.n	8004c68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004bf6:	7efb      	ldrb	r3, [r7, #27]
 8004bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bfa:	d003      	beq.n	8004c04 <create_name+0x7c>
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d30c      	bcc.n	8004c1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b0b      	cmp	r3, #11
 8004c08:	d002      	beq.n	8004c10 <create_name+0x88>
 8004c0a:	7efb      	ldrb	r3, [r7, #27]
 8004c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c0e:	d001      	beq.n	8004c14 <create_name+0x8c>
 8004c10:	2306      	movs	r3, #6
 8004c12:	e044      	b.n	8004c9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004c14:	2308      	movs	r3, #8
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	230b      	movs	r3, #11
 8004c1a:	617b      	str	r3, [r7, #20]
			continue;
 8004c1c:	e022      	b.n	8004c64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004c1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da04      	bge.n	8004c30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c26:	7efb      	ldrb	r3, [r7, #27]
 8004c28:	3b80      	subs	r3, #128	; 0x80
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <create_name+0x120>)
 8004c2c:	5cd3      	ldrb	r3, [r2, r3]
 8004c2e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004c30:	7efb      	ldrb	r3, [r7, #27]
 8004c32:	4619      	mov	r1, r3
 8004c34:	481d      	ldr	r0, [pc, #116]	; (8004cac <create_name+0x124>)
 8004c36:	f7fe ff94 	bl	8003b62 <chk_chr>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <create_name+0xbc>
 8004c40:	2306      	movs	r3, #6
 8004c42:	e02c      	b.n	8004c9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004c44:	7efb      	ldrb	r3, [r7, #27]
 8004c46:	2b60      	cmp	r3, #96	; 0x60
 8004c48:	d905      	bls.n	8004c56 <create_name+0xce>
 8004c4a:	7efb      	ldrb	r3, [r7, #27]
 8004c4c:	2b7a      	cmp	r3, #122	; 0x7a
 8004c4e:	d802      	bhi.n	8004c56 <create_name+0xce>
 8004c50:	7efb      	ldrb	r3, [r7, #27]
 8004c52:	3b20      	subs	r3, #32
 8004c54:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	613a      	str	r2, [r7, #16]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	4413      	add	r3, r2
 8004c60:	7efa      	ldrb	r2, [r7, #27]
 8004c62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004c64:	e7a6      	b.n	8004bb4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004c66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <create_name+0xf4>
 8004c78:	2306      	movs	r3, #6
 8004c7a:	e010      	b.n	8004c9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2be5      	cmp	r3, #229	; 0xe5
 8004c82:	d102      	bne.n	8004c8a <create_name+0x102>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2205      	movs	r2, #5
 8004c88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c8a:	7efb      	ldrb	r3, [r7, #27]
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d801      	bhi.n	8004c94 <create_name+0x10c>
 8004c90:	2204      	movs	r2, #4
 8004c92:	e000      	b.n	8004c96 <create_name+0x10e>
 8004c94:	2200      	movs	r2, #0
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	330b      	adds	r3, #11
 8004c9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004c9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	0800a30c 	.word	0x0800a30c
 8004cac:	0800a280 	.word	0x0800a280

08004cb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004cc4:	e002      	b.n	8004ccc <follow_path+0x1c>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b2f      	cmp	r3, #47	; 0x2f
 8004cd2:	d0f8      	beq.n	8004cc6 <follow_path+0x16>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b5c      	cmp	r3, #92	; 0x5c
 8004cda:	d0f4      	beq.n	8004cc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b1f      	cmp	r3, #31
 8004ce8:	d80a      	bhi.n	8004d00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2280      	movs	r2, #128	; 0x80
 8004cee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fc7f 	bl	80045f8 <dir_sdi>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	75fb      	strb	r3, [r7, #23]
 8004cfe:	e043      	b.n	8004d88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d00:	463b      	mov	r3, r7
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff3f 	bl	8004b88 <create_name>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d134      	bne.n	8004d7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fe92 	bl	8004a3e <dir_find>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d127      	bne.n	8004d82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004d32:	7afb      	ldrb	r3, [r7, #11]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d122      	bne.n	8004d82 <follow_path+0xd2>
 8004d3c:	2305      	movs	r3, #5
 8004d3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004d40:	e01f      	b.n	8004d82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11c      	bne.n	8004d86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	799b      	ldrb	r3, [r3, #6]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004d58:	2305      	movs	r3, #5
 8004d5a:	75fb      	strb	r3, [r7, #23]
 8004d5c:	e014      	b.n	8004d88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fdc8 	bl	8004906 <ld_clust>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d7c:	e7c0      	b.n	8004d00 <follow_path+0x50>
			if (res != FR_OK) break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <follow_path+0xd8>
				break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d86:	bf00      	nop
			}
		}
	}

	return res;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d031      	beq.n	8004e0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e002      	b.n	8004db6 <get_ldnumber+0x24>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3301      	adds	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d903      	bls.n	8004dc6 <get_ldnumber+0x34>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b3a      	cmp	r3, #58	; 0x3a
 8004dc4:	d1f4      	bne.n	8004db0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b3a      	cmp	r3, #58	; 0x3a
 8004dcc:	d11c      	bne.n	8004e08 <get_ldnumber+0x76>
			tp = *path;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	60fa      	str	r2, [r7, #12]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	3b30      	subs	r3, #48	; 0x30
 8004dde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d80e      	bhi.n	8004e04 <get_ldnumber+0x72>
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d10a      	bne.n	8004e04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <get_ldnumber+0x72>
					vol = (int)i;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	e002      	b.n	8004e0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e0c:	693b      	ldr	r3, [r7, #16]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	70da      	strb	r2, [r3, #3]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff f85e 	bl	8003ef8 <move_window>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <check_fs+0x2a>
 8004e42:	2304      	movs	r3, #4
 8004e44:	e038      	b.n	8004eb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3330      	adds	r3, #48	; 0x30
 8004e4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fda2 	bl	8003998 <ld_word>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <check_fs+0x48>
 8004e60:	2303      	movs	r3, #3
 8004e62:	e029      	b.n	8004eb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e6a:	2be9      	cmp	r3, #233	; 0xe9
 8004e6c:	d009      	beq.n	8004e82 <check_fs+0x66>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e74:	2beb      	cmp	r3, #235	; 0xeb
 8004e76:	d11e      	bne.n	8004eb6 <check_fs+0x9a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e7e:	2b90      	cmp	r3, #144	; 0x90
 8004e80:	d119      	bne.n	8004eb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3330      	adds	r3, #48	; 0x30
 8004e86:	3336      	adds	r3, #54	; 0x36
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe fd9d 	bl	80039c8 <ld_dword>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <check_fs+0xa4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <check_fs+0x82>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e00c      	b.n	8004eb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3330      	adds	r3, #48	; 0x30
 8004ea2:	3352      	adds	r3, #82	; 0x52
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fd8f 	bl	80039c8 <ld_dword>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4a05      	ldr	r2, [pc, #20]	; (8004ec4 <check_fs+0xa8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <check_fs+0x9a>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004eb6:	2302      	movs	r3, #2
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	00544146 	.word	0x00544146
 8004ec4:	33544146 	.word	0x33544146

08004ec8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b096      	sub	sp, #88	; 0x58
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff58 	bl	8004d92 <get_ldnumber>
 8004ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da01      	bge.n	8004eee <find_volume+0x26>
 8004eea:	230b      	movs	r3, #11
 8004eec:	e22e      	b.n	800534c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004eee:	4aa8      	ldr	r2, [pc, #672]	; (8005190 <find_volume+0x2c8>)
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <find_volume+0x3a>
 8004efe:	230c      	movs	r3, #12
 8004f00:	e224      	b.n	800534c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01a      	beq.n	8004f4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe fc9d 	bl	800385c <disk_status>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10c      	bne.n	8004f4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <find_volume+0x82>
 8004f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004f46:	230a      	movs	r3, #10
 8004f48:	e200      	b.n	800534c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e1fe      	b.n	800534c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe fc95 	bl	8003890 <disk_initialize>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e1e7      	b.n	800534c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <find_volume+0xca>
 8004f82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004f8e:	230a      	movs	r3, #10
 8004f90:	e1dc      	b.n	800534c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f9a:	f7ff ff3f 	bl	8004e1c <check_fs>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d14b      	bne.n	8005044 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004fac:	2300      	movs	r3, #0
 8004fae:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb0:	e01f      	b.n	8004ff2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004fc0:	4413      	add	r3, r2
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <find_volume+0x114>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fcf8 	bl	80039c8 <ld_dword>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	e000      	b.n	8004fde <find_volume+0x116>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fee:	3301      	adds	r3, #1
 8004ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d9dc      	bls.n	8004fb2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <find_volume+0x140>
 8005002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005004:	3b01      	subs	r3, #1
 8005006:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005010:	4413      	add	r3, r2
 8005012:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005016:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <find_volume+0x162>
 800501e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005022:	f7ff fefb 	bl	8004e1c <check_fs>
 8005026:	4603      	mov	r3, r0
 8005028:	e000      	b.n	800502c <find_volume+0x164>
 800502a:	2303      	movs	r3, #3
 800502c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005034:	2b01      	cmp	r3, #1
 8005036:	d905      	bls.n	8005044 <find_volume+0x17c>
 8005038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503a:	3301      	adds	r3, #1
 800503c:	643b      	str	r3, [r7, #64]	; 0x40
 800503e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005040:	2b03      	cmp	r3, #3
 8005042:	d9e1      	bls.n	8005008 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005048:	2b04      	cmp	r3, #4
 800504a:	d101      	bne.n	8005050 <find_volume+0x188>
 800504c:	2301      	movs	r3, #1
 800504e:	e17d      	b.n	800534c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005054:	2b01      	cmp	r3, #1
 8005056:	d901      	bls.n	800505c <find_volume+0x194>
 8005058:	230d      	movs	r3, #13
 800505a:	e177      	b.n	800534c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	3330      	adds	r3, #48	; 0x30
 8005060:	330b      	adds	r3, #11
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fc98 	bl	8003998 <ld_word>
 8005068:	4603      	mov	r3, r0
 800506a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506e:	d001      	beq.n	8005074 <find_volume+0x1ac>
 8005070:	230d      	movs	r3, #13
 8005072:	e16b      	b.n	800534c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	3330      	adds	r3, #48	; 0x30
 8005078:	3316      	adds	r3, #22
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fc8c 	bl	8003998 <ld_word>
 8005080:	4603      	mov	r3, r0
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <find_volume+0x1d0>
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	3330      	adds	r3, #48	; 0x30
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fc99 	bl	80039c8 <ld_dword>
 8005096:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800509c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	789b      	ldrb	r3, [r3, #2]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d005      	beq.n	80050bc <find_volume+0x1f4>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d001      	beq.n	80050bc <find_volume+0x1f4>
 80050b8:	230d      	movs	r3, #13
 80050ba:	e147      	b.n	800534c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	789b      	ldrb	r3, [r3, #2]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	895b      	ldrh	r3, [r3, #10]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <find_volume+0x228>
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	895b      	ldrh	r3, [r3, #10]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	895b      	ldrh	r3, [r3, #10]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <find_volume+0x22c>
 80050f0:	230d      	movs	r3, #13
 80050f2:	e12b      	b.n	800534c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	3330      	adds	r3, #48	; 0x30
 80050f8:	3311      	adds	r3, #17
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fc4c 	bl	8003998 <ld_word>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	891b      	ldrh	r3, [r3, #8]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <find_volume+0x252>
 8005116:	230d      	movs	r3, #13
 8005118:	e118      	b.n	800534c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	3330      	adds	r3, #48	; 0x30
 800511e:	3313      	adds	r3, #19
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe fc39 	bl	8003998 <ld_word>
 8005126:	4603      	mov	r3, r0
 8005128:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <find_volume+0x276>
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	3330      	adds	r3, #48	; 0x30
 8005134:	3320      	adds	r3, #32
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe fc46 	bl	80039c8 <ld_dword>
 800513c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	3330      	adds	r3, #48	; 0x30
 8005142:	330e      	adds	r3, #14
 8005144:	4618      	mov	r0, r3
 8005146:	f7fe fc27 	bl	8003998 <ld_word>
 800514a:	4603      	mov	r3, r0
 800514c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800514e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <find_volume+0x290>
 8005154:	230d      	movs	r3, #13
 8005156:	e0f9      	b.n	800534c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005158:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	4413      	add	r3, r2
 800515e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005160:	8912      	ldrh	r2, [r2, #8]
 8005162:	0912      	lsrs	r2, r2, #4
 8005164:	b292      	uxth	r2, r2
 8005166:	4413      	add	r3, r2
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800516a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	429a      	cmp	r2, r3
 8005170:	d201      	bcs.n	8005176 <find_volume+0x2ae>
 8005172:	230d      	movs	r3, #13
 8005174:	e0ea      	b.n	800534c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800517e:	8952      	ldrh	r2, [r2, #10]
 8005180:	fbb3 f3f2 	udiv	r3, r3, r2
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <find_volume+0x2cc>
 800518c:	230d      	movs	r3, #13
 800518e:	e0dd      	b.n	800534c <find_volume+0x484>
 8005190:	200000a8 	.word	0x200000a8
		fmt = FS_FAT32;
 8005194:	2303      	movs	r3, #3
 8005196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d802      	bhi.n	80051aa <find_volume+0x2e2>
 80051a4:	2302      	movs	r3, #2
 80051a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d802      	bhi.n	80051ba <find_volume+0x2f2>
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	1c9a      	adds	r2, r3, #2
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80051c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	441a      	add	r2, r3
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80051d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	441a      	add	r2, r3
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80051dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d11e      	bne.n	8005222 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	3330      	adds	r3, #48	; 0x30
 80051e8:	332a      	adds	r3, #42	; 0x2a
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fbd4 	bl	8003998 <ld_word>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <find_volume+0x332>
 80051f6:	230d      	movs	r3, #13
 80051f8:	e0a8      	b.n	800534c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	891b      	ldrh	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <find_volume+0x33e>
 8005202:	230d      	movs	r3, #13
 8005204:	e0a2      	b.n	800534c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	3330      	adds	r3, #48	; 0x30
 800520a:	332c      	adds	r3, #44	; 0x2c
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fbdb 	bl	80039c8 <ld_dword>
 8005212:	4602      	mov	r2, r0
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	647b      	str	r3, [r7, #68]	; 0x44
 8005220:	e01f      	b.n	8005262 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	891b      	ldrh	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <find_volume+0x366>
 800522a:	230d      	movs	r3, #13
 800522c:	e08e      	b.n	800534c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	441a      	add	r2, r3
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800523a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800523e:	2b02      	cmp	r3, #2
 8005240:	d103      	bne.n	800524a <find_volume+0x382>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	e00a      	b.n	8005260 <find_volume+0x398>
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	085a      	lsrs	r2, r3, #1
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005268:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800526c:	0a5b      	lsrs	r3, r3, #9
 800526e:	429a      	cmp	r2, r3
 8005270:	d201      	bcs.n	8005276 <find_volume+0x3ae>
 8005272:	230d      	movs	r3, #13
 8005274:	e06a      	b.n	800534c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	f04f 32ff 	mov.w	r2, #4294967295
 800527c:	611a      	str	r2, [r3, #16]
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800528c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005290:	2b03      	cmp	r3, #3
 8005292:	d149      	bne.n	8005328 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	3330      	adds	r3, #48	; 0x30
 8005298:	3330      	adds	r3, #48	; 0x30
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fb7c 	bl	8003998 <ld_word>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d140      	bne.n	8005328 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80052a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a8:	3301      	adds	r3, #1
 80052aa:	4619      	mov	r1, r3
 80052ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052ae:	f7fe fe23 	bl	8003ef8 <move_window>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d137      	bne.n	8005328 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2200      	movs	r2, #0
 80052bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	3330      	adds	r3, #48	; 0x30
 80052c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fb66 	bl	8003998 <ld_word>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d127      	bne.n	8005328 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	3330      	adds	r3, #48	; 0x30
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fb73 	bl	80039c8 <ld_dword>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <find_volume+0x48c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d11e      	bne.n	8005328 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	3330      	adds	r3, #48	; 0x30
 80052ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fb68 	bl	80039c8 <ld_dword>
 80052f8:	4603      	mov	r3, r0
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <find_volume+0x490>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d113      	bne.n	8005328 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	3330      	adds	r3, #48	; 0x30
 8005304:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fb5d 	bl	80039c8 <ld_dword>
 800530e:	4602      	mov	r2, r0
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	3330      	adds	r3, #48	; 0x30
 8005318:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe fb53 	bl	80039c8 <ld_dword>
 8005322:	4602      	mov	r2, r0
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800532e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <find_volume+0x494>)
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	4b08      	ldr	r3, [pc, #32]	; (800535c <find_volume+0x494>)
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <find_volume+0x494>)
 800533e:	881a      	ldrh	r2, [r3, #0]
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005346:	f7fe fd6f 	bl	8003e28 <clear_lock>
#endif
	return FR_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3758      	adds	r7, #88	; 0x58
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	41615252 	.word	0x41615252
 8005358:	61417272 	.word	0x61417272
 800535c:	200000ac 	.word	0x200000ac

08005360 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800536a:	2309      	movs	r3, #9
 800536c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01c      	beq.n	80053ae <validate+0x4e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d018      	beq.n	80053ae <validate+0x4e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d013      	beq.n	80053ae <validate+0x4e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	889a      	ldrh	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	88db      	ldrh	r3, [r3, #6]
 8005390:	429a      	cmp	r2, r3
 8005392:	d10c      	bne.n	80053ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fa5e 	bl	800385c <disk_status>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <validate+0x4e>
			res = FR_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d102      	bne.n	80053ba <validate+0x5a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	e000      	b.n	80053bc <validate+0x5c>
 80053ba:	2300      	movs	r3, #0
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	6013      	str	r3, [r2, #0]
	return res;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b098      	sub	sp, #96	; 0x60
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <f_open+0x18>
 80053de:	2309      	movs	r3, #9
 80053e0:	e1ad      	b.n	800573e <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80053ea:	79fa      	ldrb	r2, [r7, #7]
 80053ec:	f107 0110 	add.w	r1, r7, #16
 80053f0:	f107 0308 	add.w	r3, r7, #8
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fd67 	bl	8004ec8 <find_volume>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005404:	2b00      	cmp	r3, #0
 8005406:	f040 8191 	bne.w	800572c <f_open+0x362>
		dj.obj.fs = fs;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fc4a 	bl	8004cb0 <follow_path>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11a      	bne.n	8005460 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800542a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800542e:	b25b      	sxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	da03      	bge.n	800543c <f_open+0x72>
				res = FR_INVALID_NAME;
 8005434:	2306      	movs	r3, #6
 8005436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800543a:	e011      	b.n	8005460 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf14      	ite	ne
 8005446:	2301      	movne	r3, #1
 8005448:	2300      	moveq	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fb9f 	bl	8003b98 <chk_lock>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	f003 031c 	and.w	r3, r3, #28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d07f      	beq.n	800556a <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800546a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800546e:	2b00      	cmp	r3, #0
 8005470:	d017      	beq.n	80054a2 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005476:	2b04      	cmp	r3, #4
 8005478:	d10e      	bne.n	8005498 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800547a:	f7fe fbe9 	bl	8003c50 <enq_lock>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d006      	beq.n	8005492 <f_open+0xc8>
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fb2d 	bl	8004ae8 <dir_register>
 800548e:	4603      	mov	r3, r0
 8005490:	e000      	b.n	8005494 <f_open+0xca>
 8005492:	2312      	movs	r3, #18
 8005494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	f043 0308 	orr.w	r3, r3, #8
 800549e:	71fb      	strb	r3, [r7, #7]
 80054a0:	e010      	b.n	80054c4 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80054a2:	7ebb      	ldrb	r3, [r7, #26]
 80054a4:	f003 0311 	and.w	r3, r3, #17
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <f_open+0xea>
					res = FR_DENIED;
 80054ac:	2307      	movs	r3, #7
 80054ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80054b2:	e007      	b.n	80054c4 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <f_open+0xfa>
 80054be:	2308      	movs	r3, #8
 80054c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80054c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d168      	bne.n	800559e <f_open+0x1d4>
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d063      	beq.n	800559e <f_open+0x1d4>
				dw = GET_FATTIME();
 80054d6:	f002 fb6b 	bl	8007bb0 <get_fattime>
 80054da:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	330e      	adds	r3, #14
 80054e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe faae 	bl	8003a44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	3316      	adds	r3, #22
 80054ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe faa8 	bl	8003a44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	330b      	adds	r3, #11
 80054f8:	2220      	movs	r2, #32
 80054fa:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f9ff 	bl	8004906 <ld_clust>
 8005508:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800550e:	2200      	movs	r2, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fa17 	bl	8004944 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	331c      	adds	r3, #28
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fa91 	bl	8003a44 <st_dword>
					fs->wflag = 1;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2201      	movs	r2, #1
 8005526:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d037      	beq.n	800559e <f_open+0x1d4>
						dw = fs->winsect;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	2200      	movs	r2, #0
 800553a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800553c:	4618      	mov	r0, r3
 800553e:	f7fe ff2a 	bl	8004396 <remove_chain>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800554c:	2b00      	cmp	r3, #0
 800554e:	d126      	bne.n	800559e <f_open+0x1d4>
							res = move_window(fs, dw);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe fccf 	bl	8003ef8 <move_window>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005564:	3a01      	subs	r2, #1
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e019      	b.n	800559e <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800556a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800556e:	2b00      	cmp	r3, #0
 8005570:	d115      	bne.n	800559e <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005572:	7ebb      	ldrb	r3, [r7, #26]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <f_open+0x1ba>
					res = FR_NO_FILE;
 800557c:	2304      	movs	r3, #4
 800557e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005582:	e00c      	b.n	800559e <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <f_open+0x1d4>
 800558e:	7ebb      	ldrb	r3, [r7, #26]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <f_open+0x1d4>
						res = FR_DENIED;
 8005598:	2307      	movs	r3, #7
 800559a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800559e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d128      	bne.n	80055f8 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80055c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	f107 0314 	add.w	r3, r7, #20
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fb58 	bl	8003c94 <inc_lock>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <f_open+0x22e>
 80055f2:	2302      	movs	r3, #2
 80055f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80055f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 8095 	bne.w	800572c <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff f97c 	bl	8004906 <ld_clust>
 800560e:	4602      	mov	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	331c      	adds	r3, #28
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe f9d5 	bl	80039c8 <ld_dword>
 800561e:	4602      	mov	r2, r0
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	88da      	ldrh	r2, [r3, #6]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	79fa      	ldrb	r2, [r7, #7]
 800563c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3330      	adds	r3, #48	; 0x30
 8005654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fa3f 	bl	8003ade <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d060      	beq.n	800572c <f_open+0x362>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d05c      	beq.n	800572c <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	895b      	ldrh	r3, [r3, #10]
 800567e:	025b      	lsls	r3, r3, #9
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	657b      	str	r3, [r7, #84]	; 0x54
 800568e:	e016      	b.n	80056be <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fcea 	bl	800406e <get_fat>
 800569a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800569c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d802      	bhi.n	80056a8 <f_open+0x2de>
 80056a2:	2302      	movs	r3, #2
 80056a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80056a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <f_open+0x2ec>
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	657b      	str	r3, [r7, #84]	; 0x54
 80056be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <f_open+0x304>
 80056c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d8e0      	bhi.n	8005690 <f_open+0x2c6>
				}
				fp->clust = clst;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80056d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d127      	bne.n	800572c <f_open+0x362>
 80056dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d022      	beq.n	800572c <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fca0 	bl	8004030 <clust2sect>
 80056f0:	6478      	str	r0, [r7, #68]	; 0x44
 80056f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <f_open+0x336>
						res = FR_INT_ERR;
 80056f8:	2302      	movs	r3, #2
 80056fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056fe:	e015      	b.n	800572c <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005702:	0a5a      	lsrs	r2, r3, #9
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	441a      	add	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	7858      	ldrb	r0, [r3, #1]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	2301      	movs	r3, #1
 800571c:	f7fe f8de 	bl	80038dc <disk_read>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <f_open+0x362>
 8005726:	2301      	movs	r3, #1
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800572c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <f_open+0x370>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800573a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800573e:	4618      	mov	r0, r3
 8005740:	3760      	adds	r7, #96	; 0x60
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08c      	sub	sp, #48	; 0x30
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f107 0210 	add.w	r2, r7, #16
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fdfa 	bl	8005360 <validate>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <f_write+0x44>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7d5b      	ldrb	r3, [r3, #21]
 800577e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <f_write+0x4a>
 800578a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800578e:	e14b      	b.n	8005a28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	7d1b      	ldrb	r3, [r3, #20]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <f_write+0x5a>
 800579c:	2307      	movs	r3, #7
 800579e:	e143      	b.n	8005a28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	441a      	add	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	f080 812d 	bcs.w	8005a0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80057ba:	e127      	b.n	8005a0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 80e3 	bne.w	8005990 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	0a5b      	lsrs	r3, r3, #9
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	8952      	ldrh	r2, [r2, #10]
 80057d4:	3a01      	subs	r2, #1
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d143      	bne.n	8005868 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10c      	bne.n	8005802 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11a      	bne.n	800582a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fe31 	bl	8004460 <create_chain>
 80057fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8005800:	e013      	b.n	800582a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	4619      	mov	r1, r3
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7fe febd 	bl	8004590 <clmt_clust>
 8005816:	62b8      	str	r0, [r7, #40]	; 0x28
 8005818:	e007      	b.n	800582a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe fe1c 	bl	8004460 <create_chain>
 8005828:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80f2 	beq.w	8005a16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	2b01      	cmp	r3, #1
 8005836:	d104      	bne.n	8005842 <f_write+0xfc>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2202      	movs	r2, #2
 800583c:	755a      	strb	r2, [r3, #21]
 800583e:	2302      	movs	r3, #2
 8005840:	e0f2      	b.n	8005a28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d104      	bne.n	8005854 <f_write+0x10e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	755a      	strb	r2, [r3, #21]
 8005850:	2301      	movs	r3, #1
 8005852:	e0e9      	b.n	8005a28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <f_write+0x122>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005866:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	7d1b      	ldrb	r3, [r3, #20]
 800586c:	b25b      	sxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	da18      	bge.n	80058a4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	7858      	ldrb	r0, [r3, #1]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	2301      	movs	r3, #1
 8005882:	f7fe f84b 	bl	800391c <disk_write>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <f_write+0x150>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	755a      	strb	r2, [r3, #21]
 8005892:	2301      	movs	r3, #1
 8005894:	e0c8      	b.n	8005a28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	7d1b      	ldrb	r3, [r3, #20]
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe fbbf 	bl	8004030 <clust2sect>
 80058b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <f_write+0x17e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	755a      	strb	r2, [r3, #21]
 80058c0:	2302      	movs	r3, #2
 80058c2:	e0b1      	b.n	8005a28 <f_write+0x2e2>
			sect += csect;
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	4413      	add	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0a5b      	lsrs	r3, r3, #9
 80058d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d03c      	beq.n	8005952 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	4413      	add	r3, r2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	8952      	ldrh	r2, [r2, #10]
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d905      	bls.n	80058f2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	895b      	ldrh	r3, [r3, #10]
 80058ea:	461a      	mov	r2, r3
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	7858      	ldrb	r0, [r3, #1]
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	f7fe f80e 	bl	800391c <disk_write>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <f_write+0x1ca>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	755a      	strb	r2, [r3, #21]
 800590c:	2301      	movs	r3, #1
 800590e:	e08b      	b.n	8005a28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	429a      	cmp	r2, r3
 800591c:	d915      	bls.n	800594a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	025b      	lsls	r3, r3, #9
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005936:	4619      	mov	r1, r3
 8005938:	f7fe f8b0 	bl	8003a9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	7d1b      	ldrb	r3, [r3, #20]
 8005940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	025b      	lsls	r3, r3, #9
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005950:	e03f      	b.n	80059d2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	429a      	cmp	r2, r3
 800595a:	d016      	beq.n	800598a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005964:	429a      	cmp	r2, r3
 8005966:	d210      	bcs.n	800598a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	7858      	ldrb	r0, [r3, #1]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005972:	2301      	movs	r3, #1
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	f7fd ffb1 	bl	80038dc <disk_read>
 800597a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	755a      	strb	r2, [r3, #21]
 8005986:	2301      	movs	r3, #1
 8005988:	e04e      	b.n	8005a28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d901      	bls.n	80059aa <f_write+0x264>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b8:	4413      	add	r3, r2
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	69f9      	ldr	r1, [r7, #28]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe f86c 	bl	8003a9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	7d1b      	ldrb	r3, [r3, #20]
 80059c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	4413      	add	r3, r2
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	bf38      	it	cc
 80059f2:	461a      	movcc	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	441a      	add	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f47f aed4 	bne.w	80057bc <f_write+0x76>
 8005a14:	e000      	b.n	8005a18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	7d1b      	ldrb	r3, [r3, #20]
 8005a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3730      	adds	r7, #48	; 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f107 0208 	add.w	r2, r7, #8
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fc8d 	bl	8005360 <validate>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d168      	bne.n	8005b22 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7d1b      	ldrb	r3, [r3, #20]
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d062      	beq.n	8005b22 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7d1b      	ldrb	r3, [r3, #20]
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da15      	bge.n	8005a92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	7858      	ldrb	r0, [r3, #1]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	2301      	movs	r3, #1
 8005a76:	f7fd ff51 	bl	800391c <disk_write>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <f_sync+0x54>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e04f      	b.n	8005b24 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7d1b      	ldrb	r3, [r3, #20]
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005a92:	f002 f88d 	bl	8007bb0 <get_fattime>
 8005a96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fe fa29 	bl	8003ef8 <move_window>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d138      	bne.n	8005b22 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	330b      	adds	r3, #11
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	330b      	adds	r3, #11
 8005ac0:	f042 0220 	orr.w	r2, r2, #32
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f7fe ff36 	bl	8004944 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f103 021c 	add.w	r2, r3, #28
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7fd ffad 	bl	8003a44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3316      	adds	r3, #22
 8005aee:	6939      	ldr	r1, [r7, #16]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fd ffa7 	bl	8003a44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3312      	adds	r3, #18
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fd ff86 	bl	8003a0e <st_word>
					fs->wflag = 1;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2201      	movs	r2, #1
 8005b06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fa22 	bl	8003f54 <sync_fs>
 8005b10:	4603      	mov	r3, r0
 8005b12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	7d1b      	ldrb	r3, [r3, #20]
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff7b 	bl	8005a30 <f_sync>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d118      	bne.n	8005b76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f107 0208 	add.w	r2, r7, #8
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fc07 	bl	8005360 <validate>
 8005b52:	4603      	mov	r3, r0
 8005b54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10c      	bne.n	8005b76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe f925 	bl	8003db0 <dec_lock>
 8005b66:	4603      	mov	r3, r0
 8005b68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b09e      	sub	sp, #120	; 0x78
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8005b8c:	f107 010c 	add.w	r1, r7, #12
 8005b90:	1d3b      	adds	r3, r7, #4
 8005b92:	2202      	movs	r2, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff f997 	bl	8004ec8 <find_volume>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8005ba4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f040 808e 	bne.w	8005cca <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f87a 	bl	8004cb0 <follow_path>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8005bc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d108      	bne.n	8005bdc <f_unlink+0x5c>
 8005bca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bce:	2102      	movs	r1, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fd ffe1 	bl	8003b98 <chk_lock>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8005bdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d172      	bne.n	8005cca <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8005be4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da03      	bge.n	8005bf6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8005bee:	2306      	movs	r3, #6
 8005bf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005bf4:	e008      	b.n	8005c08 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8005bf6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8005c02:	2307      	movs	r3, #7
 8005c04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8005c08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d134      	bne.n	8005c7a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fe75 	bl	8004906 <ld_clust>
 8005c1c:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8005c1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d027      	beq.n	8005c7a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8005c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c30:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8005c32:	f107 0310 	add.w	r3, r7, #16
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fcdd 	bl	80045f8 <dir_sdi>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8005c44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d116      	bne.n	8005c7a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	2100      	movs	r1, #0
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fe96 	bl	8004984 <dir_read>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8005c5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <f_unlink+0xec>
 8005c66:	2307      	movs	r3, #7
 8005c68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8005c6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d102      	bne.n	8005c7a <f_unlink+0xfa>
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8005c7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d123      	bne.n	8005cca <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe ff60 	bl	8004b4c <dir_remove>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8005c92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10c      	bne.n	8005cb4 <f_unlink+0x134>
 8005c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8005ca0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fb74 	bl	8004396 <remove_chain>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8005cb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <f_unlink+0x14a>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe f948 	bl	8003f54 <sync_fs>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8005cca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3778      	adds	r7, #120	; 0x78
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	2b0a      	cmp	r3, #10
 8005ce6:	d103      	bne.n	8005cf0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005ce8:	210d      	movs	r1, #13
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fff3 	bl	8005cd6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	db25      	blt.n	8005d48 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	60fa      	str	r2, [r7, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4413      	add	r3, r2
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b3c      	cmp	r3, #60	; 0x3c
 8005d0e:	dd12      	ble.n	8005d36 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f103 010c 	add.w	r1, r3, #12
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f107 0308 	add.w	r3, r7, #8
 8005d20:	f7ff fd11 	bl	8005746 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d101      	bne.n	8005d30 <putc_bfd+0x5a>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e001      	b.n	8005d34 <putc_bfd+0x5e>
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
 8005d46:	e000      	b.n	8005d4a <putc_bfd+0x74>
	if (i < 0) return;
 8005d48:	bf00      	nop
}
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db16      	blt.n	8005d8e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f103 010c 	add.w	r1, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	f7ff fce7 	bl	8005746 <f_write>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d102      	bne.n	8005d8e <putc_flush+0x3e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	e001      	b.n	8005d92 <putc_flush+0x42>
	return EOF;
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8005dc4:	b40e      	push	{r1, r2, r3}
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b0a7      	sub	sp, #156	; 0x9c
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8005dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff ffe0 	bl	8005d9a <putc_init>

	va_start(arp, fmt);
 8005dda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005dde:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8005de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8005df0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 81f4 	beq.w	80061e2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8005dfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005dfe:	2b25      	cmp	r3, #37	; 0x25
 8005e00:	d008      	beq.n	8005e14 <f_printf+0x50>
			putc_bfd(&pb, c);
 8005e02:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8005e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff ff62 	bl	8005cd6 <putc_bfd>
			continue;
 8005e12:	e1e5      	b.n	80061e0 <f_printf+0x41c>
		}
		w = f = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8005e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8005e30:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d10b      	bne.n	8005e50 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8005e4e:	e024      	b.n	8005e9a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8005e50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e54:	2b2d      	cmp	r3, #45	; 0x2d
 8005e56:	d120      	bne.n	8005e9a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8005e6e:	e014      	b.n	8005e9a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8005e70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e82:	4413      	add	r3, r2
 8005e84:	3b30      	subs	r3, #48	; 0x30
 8005e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8005e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8005e9a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e9e:	2b2f      	cmp	r3, #47	; 0x2f
 8005ea0:	d903      	bls.n	8005eaa <f_printf+0xe6>
 8005ea2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005ea6:	2b39      	cmp	r3, #57	; 0x39
 8005ea8:	d9e2      	bls.n	8005e70 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005eaa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005eae:	2b6c      	cmp	r3, #108	; 0x6c
 8005eb0:	d003      	beq.n	8005eba <f_printf+0xf6>
 8005eb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005eb6:	2b4c      	cmp	r3, #76	; 0x4c
 8005eb8:	d10d      	bne.n	8005ed6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8005eba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005ebe:	f043 0304 	orr.w	r3, r3, #4
 8005ec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8005ed6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8183 	beq.w	80061e6 <f_printf+0x422>
		d = c;
 8005ee0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005ee4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8005ee8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005eec:	2b60      	cmp	r3, #96	; 0x60
 8005eee:	d908      	bls.n	8005f02 <f_printf+0x13e>
 8005ef0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005ef4:	2b7a      	cmp	r3, #122	; 0x7a
 8005ef6:	d804      	bhi.n	8005f02 <f_printf+0x13e>
 8005ef8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005efc:	3b20      	subs	r3, #32
 8005efe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8005f02:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005f06:	3b42      	subs	r3, #66	; 0x42
 8005f08:	2b16      	cmp	r3, #22
 8005f0a:	f200 8098 	bhi.w	800603e <f_printf+0x27a>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <f_printf+0x150>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	0800601f 	.word	0x0800601f
 8005f18:	08006007 	.word	0x08006007
 8005f1c:	0800602f 	.word	0x0800602f
 8005f20:	0800603f 	.word	0x0800603f
 8005f24:	0800603f 	.word	0x0800603f
 8005f28:	0800603f 	.word	0x0800603f
 8005f2c:	0800603f 	.word	0x0800603f
 8005f30:	0800603f 	.word	0x0800603f
 8005f34:	0800603f 	.word	0x0800603f
 8005f38:	0800603f 	.word	0x0800603f
 8005f3c:	0800603f 	.word	0x0800603f
 8005f40:	0800603f 	.word	0x0800603f
 8005f44:	0800603f 	.word	0x0800603f
 8005f48:	08006027 	.word	0x08006027
 8005f4c:	0800603f 	.word	0x0800603f
 8005f50:	0800603f 	.word	0x0800603f
 8005f54:	0800603f 	.word	0x0800603f
 8005f58:	08005f71 	.word	0x08005f71
 8005f5c:	0800603f 	.word	0x0800603f
 8005f60:	0800602f 	.word	0x0800602f
 8005f64:	0800603f 	.word	0x0800603f
 8005f68:	0800603f 	.word	0x0800603f
 8005f6c:	08006037 	.word	0x08006037
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8005f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	67ba      	str	r2, [r7, #120]	; 0x78
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f80:	e004      	b.n	8005f8c <f_printf+0x1c8>
 8005f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f86:	3301      	adds	r3, #1
 8005f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f92:	4413      	add	r3, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f3      	bne.n	8005f82 <f_printf+0x1be>
			if (!(f & 2)) {
 8005f9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11a      	bne.n	8005fdc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005fa6:	e005      	b.n	8005fb4 <f_printf+0x1f0>
 8005fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fac:	2120      	movs	r1, #32
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fe91 	bl	8005cd6 <putc_bfd>
 8005fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d8f0      	bhi.n	8005fa8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8005fc6:	e009      	b.n	8005fdc <f_printf+0x218>
 8005fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fce:	781a      	ldrb	r2, [r3, #0]
 8005fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fe7d 	bl	8005cd6 <putc_bfd>
 8005fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f1      	bne.n	8005fc8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005fe4:	e005      	b.n	8005ff2 <f_printf+0x22e>
 8005fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fea:	2120      	movs	r1, #32
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fe72 	bl	8005cd6 <putc_bfd>
 8005ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ffc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006000:	429a      	cmp	r2, r3
 8006002:	d8f0      	bhi.n	8005fe6 <f_printf+0x222>
			continue;
 8006004:	e0ec      	b.n	80061e0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8006006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006008:	1d1a      	adds	r2, r3, #4
 800600a:	67ba      	str	r2, [r7, #120]	; 0x78
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fe5d 	bl	8005cd6 <putc_bfd>
 800601c:	e0e0      	b.n	80061e0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800601e:	2302      	movs	r3, #2
 8006020:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006024:	e014      	b.n	8006050 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8006026:	2308      	movs	r3, #8
 8006028:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800602c:	e010      	b.n	8006050 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800602e:	230a      	movs	r3, #10
 8006030:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006034:	e00c      	b.n	8006050 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8006036:	2310      	movs	r3, #16
 8006038:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800603c:	e008      	b.n	8006050 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800603e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8006042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fe44 	bl	8005cd6 <putc_bfd>
 800604e:	e0c7      	b.n	80061e0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8006050:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <f_printf+0x2a2>
 800605c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	67ba      	str	r2, [r7, #120]	; 0x78
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	e00c      	b.n	8006080 <f_printf+0x2bc>
 8006066:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800606a:	2b44      	cmp	r3, #68	; 0x44
 800606c:	d104      	bne.n	8006078 <f_printf+0x2b4>
 800606e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	67ba      	str	r2, [r7, #120]	; 0x78
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	e003      	b.n	8006080 <f_printf+0x2bc>
 8006078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	67ba      	str	r2, [r7, #120]	; 0x78
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8006084:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8006088:	2b44      	cmp	r3, #68	; 0x44
 800608a:	d10e      	bne.n	80060aa <f_printf+0x2e6>
 800608c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006090:	2b00      	cmp	r3, #0
 8006092:	da0a      	bge.n	80060aa <f_printf+0x2e6>
			v = 0 - v;
 8006094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006098:	425b      	negs	r3, r3
 800609a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800609e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80060a2:	f043 0308 	orr.w	r3, r3, #8
 80060a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80060b0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80060b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80060bc:	fb02 f201 	mul.w	r2, r2, r1
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80060c6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80060ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80060d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d90b      	bls.n	80060f6 <f_printf+0x332>
 80060de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80060e2:	2b78      	cmp	r3, #120	; 0x78
 80060e4:	d101      	bne.n	80060ea <f_printf+0x326>
 80060e6:	2227      	movs	r2, #39	; 0x27
 80060e8:	e000      	b.n	80060ec <f_printf+0x328>
 80060ea:	2207      	movs	r2, #7
 80060ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80060f0:	4413      	add	r3, r2
 80060f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80060f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006100:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8006104:	3230      	adds	r2, #48	; 0x30
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800610c:	440b      	add	r3, r1
 800610e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8006112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <f_printf+0x35e>
 800611a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800611e:	2b1f      	cmp	r3, #31
 8006120:	d9c6      	bls.n	80060b0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8006122:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <f_printf+0x380>
 800612e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006138:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800613c:	4413      	add	r3, r2
 800613e:	222d      	movs	r2, #45	; 0x2d
 8006140:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8006144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800614c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <f_printf+0x398>
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	e000      	b.n	800615e <f_printf+0x39a>
 800615c:	2320      	movs	r3, #32
 800615e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8006162:	e007      	b.n	8006174 <f_printf+0x3b0>
 8006164:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8006168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fdb1 	bl	8005cd6 <putc_bfd>
 8006174:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <f_printf+0x3ce>
 8006180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800618a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800618e:	429a      	cmp	r2, r3
 8006190:	d8e8      	bhi.n	8006164 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8006192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006196:	3b01      	subs	r3, #1
 8006198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800619c:	f107 020c 	add.w	r2, r7, #12
 80061a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061a4:	4413      	add	r3, r2
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fd91 	bl	8005cd6 <putc_bfd>
		} while (i);
 80061b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1ea      	bne.n	8006192 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80061bc:	e007      	b.n	80061ce <f_printf+0x40a>
 80061be:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80061c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fd84 	bl	8005cd6 <putc_bfd>
 80061ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80061dc:	429a      	cmp	r2, r3
 80061de:	d8ee      	bhi.n	80061be <f_printf+0x3fa>
		c = *fmt++;
 80061e0:	e5fe      	b.n	8005de0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <f_printf+0x424>
		if (!c) break;
 80061e6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80061e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fdaf 	bl	8005d50 <putc_flush>
 80061f2:	4603      	mov	r3, r0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	379c      	adds	r7, #156	; 0x9c
 80061f8:	46bd      	mov	sp, r7
 80061fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061fe:	b003      	add	sp, #12
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop

08006204 <_ZN3IVT17compare_prechargeEm>:
#include "IVT.h"

[[nodiscard]] IVT::State IVT::compare_precharge(uint32_t const sum_of_cells) noexcept {
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
    static constexpr float kPrechargeMinStartVoltage{ 470.0f };
    static constexpr float kPrechargeMaxEndVoltage{ 450.0f };
    static constexpr uint8_t kHysteresis{ 10 };

    if (is_lost())
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f8fe 	bl	8006410 <_ZN3IVT7is_lostEv>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <_ZN3IVT17compare_prechargeEm+0x1a>
        return Lost;
 800621a:	2303      	movs	r3, #3
 800621c:	e07a      	b.n	8006314 <_ZN3IVT17compare_prechargeEm+0x110>

    float const percentage = voltage1 * 100 / voltage2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	edd3 7a00 	vldr	s15, [r3]
 8006224:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800631c <_ZN3IVT17compare_prechargeEm+0x118>
 8006228:	ee67 6a87 	vmul.f32	s13, s15, s14
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006236:	edc7 7a05 	vstr	s15, [r7, #20]
    float const match_percentage = voltage2 * 100 / sum_of_cells - 100;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006240:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800631c <_ZN3IVT17compare_prechargeEm+0x118>
 8006244:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006256:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800631c <_ZN3IVT17compare_prechargeEm+0x118>
 800625a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800625e:	edc7 7a04 	vstr	s15, [r7, #16]
    bool const is_voltage_match = match_percentage < kHysteresis && match_percentage > -kHysteresis;
 8006262:	edd7 7a04 	vldr	s15, [r7, #16]
 8006266:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800626a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006272:	d50a      	bpl.n	800628a <_ZN3IVT17compare_prechargeEm+0x86>
 8006274:	edd7 7a04 	vldr	s15, [r7, #16]
 8006278:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800627c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006284:	dd01      	ble.n	800628a <_ZN3IVT17compare_prechargeEm+0x86>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <_ZN3IVT17compare_prechargeEm+0x88>
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]

    if (percentage >= 95 && is_voltage_match && voltage1 > kPrechargeMinStartVoltage && voltage2 > kPrechargeMinStartVoltage)
 800628e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006292:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006320 <_ZN3IVT17compare_prechargeEm+0x11c>
 8006296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629e:	db18      	blt.n	80062d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d015      	beq.n	80062d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	edd3 7a00 	vldr	s15, [r3]
 80062ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006324 <_ZN3IVT17compare_prechargeEm+0x120>
 80062b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b8:	dd0b      	ble.n	80062d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80062c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006324 <_ZN3IVT17compare_prechargeEm+0x120>
 80062c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062cc:	dd01      	ble.n	80062d2 <_ZN3IVT17compare_prechargeEm+0xce>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <_ZN3IVT17compare_prechargeEm+0xd0>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <_ZN3IVT17compare_prechargeEm+0xd8>
        return Charged;
 80062d8:	2300      	movs	r3, #0
 80062da:	e01b      	b.n	8006314 <_ZN3IVT17compare_prechargeEm+0x110>
    else if (voltage1 < kPrechargeMaxEndVoltage || voltage2 < kPrechargeMaxEndVoltage)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	edd3 7a00 	vldr	s15, [r3]
 80062e2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006328 <_ZN3IVT17compare_prechargeEm+0x124>
 80062e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ee:	d409      	bmi.n	8006304 <_ZN3IVT17compare_prechargeEm+0x100>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80062f6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006328 <_ZN3IVT17compare_prechargeEm+0x124>
 80062fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006302:	d501      	bpl.n	8006308 <_ZN3IVT17compare_prechargeEm+0x104>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <_ZN3IVT17compare_prechargeEm+0x106>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <_ZN3IVT17compare_prechargeEm+0x10e>
        return NotCharged;
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <_ZN3IVT17compare_prechargeEm+0x110>
    else
        return Hysteresis;
 8006312:	2302      	movs	r3, #2
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	42c80000 	.word	0x42c80000
 8006320:	42be0000 	.word	0x42be0000
 8006324:	43eb0000 	.word	0x43eb0000
 8006328:	43e10000 	.word	0x43e10000

0800632c <_ZN3IVT11set_currentEf>:

void IVT::set_current(float const new_current) noexcept {
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	ed87 0a00 	vstr	s0, [r7]
    current = new_current;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	609a      	str	r2, [r3, #8]
    last_update = uwTick;
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <_ZN3IVT11set_currentEf+0x28>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	2000025c 	.word	0x2000025c

08006358 <_ZN3IVT11get_currentEv>:

[[nodiscard]] float IVT::get_current() noexcept {
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    return current;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	ee07 3a90 	vmov	s15, r3
}
 8006368:	eeb0 0a67 	vmov.f32	s0, s15
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <_ZN3IVT12set_voltage1Ef>:

void IVT::set_voltage1(float const new_voltage1) noexcept {
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	ed87 0a00 	vstr	s0, [r7]
    voltage1 = new_voltage1;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	601a      	str	r2, [r3, #0]
    last_update = uwTick;
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <_ZN3IVT12set_voltage1Ef+0x28>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	2000025c 	.word	0x2000025c

080063a4 <_ZN3IVT12get_voltage1Ev>:

[[nodiscard]] float IVT::get_voltage1() noexcept {
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
    return voltage1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	ee07 3a90 	vmov	s15, r3
}
 80063b4:	eeb0 0a67 	vmov.f32	s0, s15
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <_ZN3IVT12set_voltage2Ef>:

void IVT::set_voltage2(float const new_voltage2) noexcept {
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	ed87 0a00 	vstr	s0, [r7]
    voltage2 = new_voltage2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	605a      	str	r2, [r3, #4]
    last_update = uwTick;
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <_ZN3IVT12set_voltage2Ef+0x28>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60da      	str	r2, [r3, #12]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	2000025c 	.word	0x2000025c

080063f0 <_ZN3IVT12get_voltage2Ev>:

[[nodiscard]] float IVT::get_voltage2() noexcept {
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    return voltage2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	ee07 3a90 	vmov	s15, r3
}
 8006400:	eeb0 0a67 	vmov.f32	s0, s15
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <_ZN3IVT7is_lostEv>:

[[nodiscard]] bool IVT::is_lost() noexcept {
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
    static constexpr uint32_t kMaxDelay{ 500 }; // time in ms / ticks

    return uwTick - last_update > kMaxDelay;
 8006418:	4b08      	ldr	r3, [pc, #32]	; (800643c <_ZN3IVT7is_lostEv+0x2c>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006426:	bf8c      	ite	hi
 8006428:	2301      	movhi	r3, #1
 800642a:	2300      	movls	r3, #0
 800642c:	b2db      	uxtb	r3, r3
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	2000025c 	.word	0x2000025c

08006440 <_ZN10DWTWrapper11getInstanceEv>:
class DWTWrapper {
public:
    DWTWrapper(DWTWrapper const&)       = delete;
    void operator=(DWTWrapper const&)   = delete;

    [[nodiscard]] static const DWTWrapper& getInstance() noexcept {
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
        static const DWTWrapper dwtSingleton;
 8006444:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <_ZN10DWTWrapper11getInstanceEv+0x60>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f3bf 8f5b 	dmb	ish
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d010      	beq.n	8006482 <_ZN10DWTWrapper11getInstanceEv+0x42>
 8006460:	480f      	ldr	r0, [pc, #60]	; (80064a0 <_ZN10DWTWrapper11getInstanceEv+0x60>)
 8006462:	f003 fcae 	bl	8009dc2 <__cxa_guard_acquire>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <_ZN10DWTWrapper11getInstanceEv+0x42>
 8006476:	480b      	ldr	r0, [pc, #44]	; (80064a4 <_ZN10DWTWrapper11getInstanceEv+0x64>)
 8006478:	f000 f846 	bl	8006508 <_ZN10DWTWrapperC1Ev>
 800647c:	4808      	ldr	r0, [pc, #32]	; (80064a0 <_ZN10DWTWrapper11getInstanceEv+0x60>)
 800647e:	f003 fcac 	bl	8009dda <__cxa_guard_release>

        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <_ZN10DWTWrapper11getInstanceEv+0x68>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <_ZN10DWTWrapper11getInstanceEv+0x68>)
 8006488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648c:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <_ZN10DWTWrapper11getInstanceEv+0x6c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a06      	ldr	r2, [pc, #24]	; (80064ac <_ZN10DWTWrapper11getInstanceEv+0x6c>)
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	6013      	str	r3, [r2, #0]

        return dwtSingleton;
 800649a:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <_ZN10DWTWrapper11getInstanceEv+0x64>)
    }
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200000e0 	.word	0x200000e0
 80064a4:	200000dc 	.word	0x200000dc
 80064a8:	e000edf0 	.word	0xe000edf0
 80064ac:	e0001000 	.word	0xe0001000

080064b0 <_ZNK10DWTWrapper5delayEm>:

    void delay(uint32_t const microseconds) const noexcept {
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
        uint32_t const startTicks = DWT->CYCCNT;
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <_ZNK10DWTWrapper5delayEm+0x4c>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]
        uint32_t const delayTicks = (SystemCoreClock / 1'000'000) * microseconds;
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <_ZNK10DWTWrapper5delayEm+0x50>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <_ZNK10DWTWrapper5delayEm+0x54>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0c9a      	lsrs	r2, r3, #18
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	60bb      	str	r3, [r7, #8]

        while (DWT->CYCCNT - startTicks < delayTicks);
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <_ZNK10DWTWrapper5delayEm+0x4c>)
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bf8c      	ite	hi
 80064e2:	2301      	movhi	r3, #1
 80064e4:	2300      	movls	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d000      	beq.n	80064ee <_ZNK10DWTWrapper5delayEm+0x3e>
 80064ec:	e7f2      	b.n	80064d4 <_ZNK10DWTWrapper5delayEm+0x24>
    }
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	e0001000 	.word	0xe0001000
 8006500:	20000020 	.word	0x20000020
 8006504:	431bde83 	.word	0x431bde83

08006508 <_ZN10DWTWrapperC1Ev>:
    [[nodiscard]] uint32_t getTicks() const noexcept {
        return DWT->CYCCNT;
    }

private:
    constexpr DWTWrapper() {};
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <_ZN7LTC6811L15wake_from_sleepEv>:
    command[2] = static_cast<uint8_t>(PEC);
    command[3] = static_cast<uint8_t>(PEC >> 8);
    return command;
}();

static void wake_from_sleep() noexcept {
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
    static constexpr uint16_t ktWake{ 480 }; // Time in us

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8006526:	2300      	movs	r3, #0
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d11c      	bne.n	800656a <_ZN7LTC6811L15wake_from_sleepEv+0x4a>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8006530:	2200      	movs	r2, #0
 8006532:	2140      	movs	r1, #64	; 0x40
 8006534:	480f      	ldr	r0, [pc, #60]	; (8006574 <_ZN7LTC6811L15wake_from_sleepEv+0x54>)
 8006536:	f7fb f935 	bl	80017a4 <HAL_GPIO_WritePin>
        DWTWrapper::getInstance().delay(ktWake); // Guarantees the LTC6811 will be in standby
 800653a:	f7ff ff81 	bl	8006440 <_ZN10DWTWrapper11getInstanceEv>
 800653e:	4603      	mov	r3, r0
 8006540:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff ffb3 	bl	80064b0 <_ZNK10DWTWrapper5delayEm>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800654a:	2201      	movs	r2, #1
 800654c:	2140      	movs	r1, #64	; 0x40
 800654e:	4809      	ldr	r0, [pc, #36]	; (8006574 <_ZN7LTC6811L15wake_from_sleepEv+0x54>)
 8006550:	f7fb f928 	bl	80017a4 <HAL_GPIO_WritePin>
        DWTWrapper::getInstance().delay(10);
 8006554:	f7ff ff74 	bl	8006440 <_ZN10DWTWrapper11getInstanceEv>
 8006558:	4603      	mov	r3, r0
 800655a:	210a      	movs	r1, #10
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ffa7 	bl	80064b0 <_ZNK10DWTWrapper5delayEm>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3301      	adds	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e7df      	b.n	800652a <_ZN7LTC6811L15wake_from_sleepEv+0xa>
    }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40020400 	.word	0x40020400

08006578 <_ZN7LTC6811L14wake_from_idleEv>:

static void wake_from_idle() noexcept {
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF;
 800657e:	23ff      	movs	r3, #255	; 0xff
 8006580:	70fb      	strb	r3, [r7, #3]

    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d119      	bne.n	80065c0 <_ZN7LTC6811L14wake_from_idleEv+0x48>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800658c:	2200      	movs	r2, #0
 800658e:	2140      	movs	r1, #64	; 0x40
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <_ZN7LTC6811L14wake_from_idleEv+0x50>)
 8006592:	f7fb f907 	bl	80017a4 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(spi, &dummy, 1, nullptr, 0, HAL_MAX_DELAY);
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <_ZN7LTC6811L14wake_from_idleEv+0x54>)
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	1cf9      	adds	r1, r7, #3
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	2300      	movs	r3, #0
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	2300      	movs	r3, #0
 80065a8:	2201      	movs	r2, #1
 80065aa:	f7fc f959 	bl	8002860 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80065ae:	2201      	movs	r2, #1
 80065b0:	2140      	movs	r1, #64	; 0x40
 80065b2:	4805      	ldr	r0, [pc, #20]	; (80065c8 <_ZN7LTC6811L14wake_from_idleEv+0x50>)
 80065b4:	f7fb f8f6 	bl	80017a4 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < kDaisyChainLength; ++i) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3301      	adds	r3, #1
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e7e2      	b.n	8006586 <_ZN7LTC6811L14wake_from_idleEv+0xe>
    }
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40020400 	.word	0x40020400
 80065cc:	200000e4 	.word	0x200000e4

080065d0 <_ZN7LTC6811L16start_conversionERKSt5arrayIhLj4EE>:

/* Start a conversion */
static uint32_t start_conversion(Command const& command) noexcept {
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }() * 1.1f;

    wake_from_idle();
 80065d8:	f7ff ffce 	bl	8006578 <_ZN7LTC6811L14wake_from_idleEv>

    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80065dc:	2200      	movs	r2, #0
 80065de:	2140      	movs	r1, #64	; 0x40
 80065e0:	4813      	ldr	r0, [pc, #76]	; (8006630 <_ZN7LTC6811L16start_conversionERKSt5arrayIhLj4EE+0x60>)
 80065e2:	f7fb f8df 	bl	80017a4 <HAL_GPIO_WritePin>
    auto result = HAL_SPI_TransmitReceive(spi, command.data(), sizeof(command), nullptr, 0, HAL_MAX_DELAY);
 80065e6:	4b13      	ldr	r3, [pc, #76]	; (8006634 <_ZN7LTC6811L16start_conversionERKSt5arrayIhLj4EE+0x64>)
 80065e8:	681c      	ldr	r4, [r3, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fc71 	bl	8006ed2 <_ZNKSt5arrayIhLj4EE4dataEv>
 80065f0:	4601      	mov	r1, r0
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	2300      	movs	r3, #0
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2300      	movs	r3, #0
 80065fe:	2204      	movs	r2, #4
 8006600:	4620      	mov	r0, r4
 8006602:	f7fc f92d 	bl	8002860 <HAL_SPI_TransmitReceive>
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800660a:	2201      	movs	r2, #1
 800660c:	2140      	movs	r1, #64	; 0x40
 800660e:	4808      	ldr	r0, [pc, #32]	; (8006630 <_ZN7LTC6811L16start_conversionERKSt5arrayIhLj4EE+0x60>)
 8006610:	f7fb f8c8 	bl	80017a4 <HAL_GPIO_WritePin>

    DWTWrapper::getInstance().delay(kConversionTime);
 8006614:	f7ff ff14 	bl	8006440 <_ZN10DWTWrapper11getInstanceEv>
 8006618:	4603      	mov	r3, r0
 800661a:	f640 11e2 	movw	r1, #2530	; 0x9e2
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff ff46 	bl	80064b0 <_ZNK10DWTWrapper5delayEm>

    return result;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bd90      	pop	{r4, r7, pc}
 800662e:	bf00      	nop
 8006630:	40020400 	.word	0x40020400
 8006634:	200000e4 	.word	0x200000e4

08006638 <_ZN7LTC6811L27write_config_register_groupERSt5arrayINS_8RegisterIhEELj1EE>:
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);

    return result;
}

static uint32_t write_config_register_group(RegisterGroup<uint8_t>& register_group) noexcept {
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
    constexpr Command kCommand{ 0x00, 0x01, 0x3D, 0x6E };
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <_ZN7LTC6811L27write_config_register_groupERSt5arrayINS_8RegisterIhEELj1EE+0x24>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]
    return write_register_group(kCommand, register_group);
 8006646:	f107 030c 	add.w	r3, r7, #12
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fc4d 	bl	8006eec <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE>
 8006652:	4603      	mov	r3, r0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	0800a2c4 	.word	0x0800a2c4

08006660 <_ZN7LTC6811L27read_voltage_register_groupEhRSt5arrayIS0_INS_8RegisterItEELj1EELj4EE>:

static uint32_t read_voltage_register_group(uint8_t const group_id, CellData& cell_data) noexcept {
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	71fb      	strb	r3, [r7, #7]
    static constexpr std::array<Command, 4> kCommands{ Command{ 0, 4, 7, 194}, Command{ 0, 6, 154, 148 }, Command{ 0, 8, 94, 82 }, Command{ 0, 10, 195, 4 } };
    return read_register_group(kCommands[group_id], cell_data[group_id]);
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	4619      	mov	r1, r3
 8006670:	4809      	ldr	r0, [pc, #36]	; (8006698 <_ZN7LTC6811L27read_voltage_register_groupEhRSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x38>)
 8006672:	f000 fc7b 	bl	8006f6c <_ZNKSt5arrayIS_IhLj4EELj4EEixEj>
 8006676:	4604      	mov	r4, r0
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	4619      	mov	r1, r3
 800667c:	6838      	ldr	r0, [r7, #0]
 800667e:	f000 fc84 	bl	8006f8a <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EEixEj>
 8006682:	4603      	mov	r3, r0
 8006684:	4619      	mov	r1, r3
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fc8e 	bl	8006fa8 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>
 800668c:	4603      	mov	r3, r0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	0800a594 	.word	0x0800a594

0800669c <_ZN7LTC6811L23read_aux_register_groupEhRSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE>:

static uint32_t read_aux_register_group(uint8_t const group_id, TempData& temp_data) noexcept {
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4603      	mov	r3, r0
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	71fb      	strb	r3, [r7, #7]
    static const std::array<Command, 2> kCommands{ Command{ 0, 12, 239, 204 }, Command{ 0, 14, 114, 154 } };
    return read_register_group(kCommands[group_id], temp_data[group_id]);
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	4619      	mov	r1, r3
 80066ac:	4809      	ldr	r0, [pc, #36]	; (80066d4 <_ZN7LTC6811L23read_aux_register_groupEhRSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x38>)
 80066ae:	f000 fce3 	bl	8007078 <_ZNKSt5arrayIS_IhLj4EELj2EEixEj>
 80066b2:	4604      	mov	r4, r0
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6838      	ldr	r0, [r7, #0]
 80066ba:	f000 fcec 	bl	8007096 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEixEj>
 80066be:	4603      	mov	r3, r0
 80066c0:	4619      	mov	r1, r3
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fcf6 	bl	80070b4 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>
 80066c8:	4603      	mov	r3, r0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd90      	pop	{r4, r7, pc}
 80066d2:	bf00      	nop
 80066d4:	0800a5a4 	.word	0x0800a5a4

080066d8 <_ZN7LTC68114initEP19__SPI_HandleTypeDef>:
static uint32_t read_status_register_group(uint8_t const group_id, StatusData& status_data) noexcept {
    static const std::array<Command, 2> kCommands{ Command{ 0x00, 0x10, 0xED, 0x72 }, Command{ 0x00, 0x12, 0x70, 0x24 }};
    return read_register_group(kCommands[group_id], status_data[group_id]);
}

void init(SPI_HandleTypeDef* spi_handle) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
    constexpr auto ktRefup{ 4400 }; // Time in us
 80066e0:	f241 1330 	movw	r3, #4400	; 0x1130
 80066e4:	61bb      	str	r3, [r7, #24]

    spi = spi_handle;
 80066e6:	4a1a      	ldr	r2, [pc, #104]	; (8006750 <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x78>)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6013      	str	r3, [r2, #0]

    for (auto& IC : config_register_group) {
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x7c>)
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	4b18      	ldr	r3, [pc, #96]	; (8006754 <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x7c>)
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x80>)
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d016      	beq.n	800672e <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x56>
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	60fb      	str	r3, [r7, #12]
        IC.data[0] = CFGR0;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fd3b 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 800670e:	4603      	mov	r3, r0
 8006710:	22fe      	movs	r2, #254	; 0xfe
 8006712:	701a      	strb	r2, [r3, #0]
        IC.PEC = PEC15Calc(IC.data);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2106      	movs	r1, #6
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fd51 	bl	80071c0 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 800671e:	4603      	mov	r3, r0
 8006720:	461a      	mov	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	80da      	strh	r2, [r3, #6]
    for (auto& IC : config_register_group) {
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3308      	adds	r3, #8
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e7e4      	b.n	80066f8 <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x20>
    }

    wake_from_sleep();
 800672e:	f7ff fef7 	bl	8006520 <_ZN7LTC6811L15wake_from_sleepEv>
    write_config_register_group(config_register_group);
 8006732:	4808      	ldr	r0, [pc, #32]	; (8006754 <_ZN7LTC68114initEP19__SPI_HandleTypeDef+0x7c>)
 8006734:	f7ff ff80 	bl	8006638 <_ZN7LTC6811L27write_config_register_groupERSt5arrayINS_8RegisterIhEELj1EE>
    DWTWrapper::getInstance().delay(ktRefup);
 8006738:	f7ff fe82 	bl	8006440 <_ZN10DWTWrapper11getInstanceEv>
 800673c:	4603      	mov	r3, r0
 800673e:	f241 1130 	movw	r1, #4400	; 0x1130
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff feb4 	bl	80064b0 <_ZNK10DWTWrapper5delayEm>
};
 8006748:	bf00      	nop
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	200000e4 	.word	0x200000e4
 8006754:	200000e8 	.word	0x200000e8
 8006758:	200000f0 	.word	0x200000f0

0800675c <_ZN7LTC681125get_config_register_groupEv>:

RegisterGroup<uint8_t> const & get_config_register_group() noexcept {
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
    return config_register_group;
 8006760:	4b02      	ldr	r3, [pc, #8]	; (800676c <_ZN7LTC681125get_config_register_groupEv+0x10>)
}
 8006762:	4618      	mov	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	200000e8 	.word	0x200000e8

08006770 <_ZNKSt5arrayItLj3EE5beginEv>:
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
      { return iterator(data()); }

      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fd96 	bl	80072aa <_ZNKSt5arrayItLj3EE4dataEv>
 800677e:	4603      	mov	r3, r0
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <_ZNKSt5arrayItLj3EE3endEv>:
      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      _GLIBCXX17_CONSTEXPR const_iterator
      end() const noexcept
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fd8a 	bl	80072aa <_ZNKSt5arrayItLj3EE4dataEv>
 8006796:	4603      	mov	r3, r0
 8006798:	3306      	adds	r3, #6
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE>:

uint32_t update_config_register_group(CellData const & cell_data, VoltageStatus const & voltage_status, DischargeMode discharge_mode) noexcept {
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b09f      	sub	sp, #124	; 0x7c
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
    constexpr static uint8_t kDelta{ 100 };

    uint16_t DCCx{ 0 };
 80067b2:	2300      	movs	r3, #0
 80067b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    uint8_t current_cell{ 0 }, current_ic{ kDaisyChainLength - 1 };
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80067be:	2300      	movs	r3, #0
 80067c0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch (discharge_mode) {
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	f000 8111 	beq.w	80069ee <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x24a>
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	f300 81ae 	bgt.w	8006b2e <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x38a>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x3a>
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	f000 808e 	beq.w	80068f8 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x154>
 80067dc:	e1a7      	b.n	8006b2e <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x38a>
    case GTMinPlusDelta:
        for (auto& IC : config_register_group) { // 12 register groups
 80067de:	4bb3      	ldr	r3, [pc, #716]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 80067e0:	633b      	str	r3, [r7, #48]	; 0x30
 80067e2:	4bb2      	ldr	r3, [pc, #712]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 80067e4:	673b      	str	r3, [r7, #112]	; 0x70
 80067e6:	4bb2      	ldr	r3, [pc, #712]	; (8006ab0 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x30c>)
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	429a      	cmp	r2, r3
 80067f0:	f000 8198 	beq.w	8006b24 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x380>
 80067f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28
            DCCx = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            current_cell = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
 8006808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800680a:	f000 fd1b 	bl	8007244 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 800680e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8006810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006812:	f000 fd23 	bl	800725c <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8006816:	6238      	str	r0, [r7, #32]
 8006818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	429a      	cmp	r2, r3
 800681e:	d037      	beq.n	8006890 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0xec>
 8006820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006822:	61fb      	str	r3, [r7, #28]
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8006824:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8006828:	4619      	mov	r1, r3
 800682a:	69f8      	ldr	r0, [r7, #28]
 800682c:	f000 fd23 	bl	8007276 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 8006830:	4603      	mov	r3, r0
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	69b8      	ldr	r0, [r7, #24]
 8006836:	f7ff ff9b 	bl	8006770 <_ZNKSt5arrayItLj3EE5beginEv>
 800683a:	66b8      	str	r0, [r7, #104]	; 0x68
 800683c:	69b8      	ldr	r0, [r7, #24]
 800683e:	f7ff ffa3 	bl	8006788 <_ZNKSt5arrayItLj3EE3endEv>
 8006842:	6178      	str	r0, [r7, #20]
 8006844:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	429a      	cmp	r2, r3
 800684a:	d01d      	beq.n	8006888 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0xe4>
 800684c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	827b      	strh	r3, [r7, #18]
                    if (voltage > voltage_status.min + kDelta)
 8006852:	8a7a      	ldrh	r2, [r7, #18]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	3364      	adds	r3, #100	; 0x64
 800685a:	429a      	cmp	r2, r3
 800685c:	dd0b      	ble.n	8006876 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0xd2>
                        DCCx |= 1 << current_cell;
 800685e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8006862:	2201      	movs	r2, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	b21a      	sxth	r2, r3
 800686a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800686e:	4313      	orrs	r3, r2
 8006870:	b21b      	sxth	r3, r3
 8006872:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                    ++current_cell;
 8006876:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800687a:	3301      	adds	r3, #1
 800687c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8006880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006882:	3302      	adds	r3, #2
 8006884:	66bb      	str	r3, [r7, #104]	; 0x68
 8006886:	e7dd      	b.n	8006844 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0xa0>
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8006888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688a:	3308      	adds	r3, #8
 800688c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688e:	e7c3      	b.n	8006818 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x74>
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            --current_ic;
 8006890:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8006894:	3b01      	subs	r3, #1
 8006896:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            IC.data[0] = LTC6811::CFGR0;
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2100      	movs	r1, #0
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fc70 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 80068a4:	4603      	mov	r3, r0
 80068a6:	22fe      	movs	r2, #254	; 0xfe
 80068a8:	701a      	strb	r2, [r3, #0]
            IC.data[4] = DCCx >> 0 & 0xFF;
 80068aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80068ae:	b2dc      	uxtb	r4, r3
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	2104      	movs	r1, #4
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fc65 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 80068ba:	4603      	mov	r3, r0
 80068bc:	4622      	mov	r2, r4
 80068be:	701a      	strb	r2, [r3, #0]
            IC.data[5] = DCCx >> 8 & 0x0F;
 80068c0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80068c4:	121b      	asrs	r3, r3, #8
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	b2dc      	uxtb	r4, r3
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	2105      	movs	r1, #5
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc56 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 80068d8:	4603      	mov	r3, r0
 80068da:	4622      	mov	r2, r4
 80068dc:	701a      	strb	r2, [r3, #0]
            IC.PEC = LTC6811::PEC15Calc(IC.data);
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	2106      	movs	r1, #6
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fc6c 	bl	80071c0 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	80da      	strh	r2, [r3, #6]
        for (auto& IC : config_register_group) { // 12 register groups
 80068f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068f2:	3308      	adds	r3, #8
 80068f4:	673b      	str	r3, [r7, #112]	; 0x70
 80068f6:	e778      	b.n	80067ea <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x46>
        } // 12 * 12 = 144 voltages associated with the entire daisy chain
        break;

    case MaxOnly:
        if (voltage_status.max - voltage_status.min > kDelta) {
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	899b      	ldrh	r3, [r3, #12]
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	889b      	ldrh	r3, [r3, #4]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b64      	cmp	r3, #100	; 0x64
 8006906:	f340 810f 	ble.w	8006b28 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x384>
            current_ic = voltage_status.max_id / 3 % 12;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	4a69      	ldr	r2, [pc, #420]	; (8006ab4 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x310>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	0859      	lsrs	r1, r3, #1
 8006916:	4b67      	ldr	r3, [pc, #412]	; (8006ab4 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x310>)
 8006918:	fba3 2301 	umull	r2, r3, r3, r1
 800691c:	08da      	lsrs	r2, r3, #3
 800691e:	4613      	mov	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	1aca      	subs	r2, r1, r3
 8006928:	4613      	mov	r3, r2
 800692a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            DCCx |= 1 << voltage_status.max_id % 11;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6919      	ldr	r1, [r3, #16]
 8006932:	4b61      	ldr	r3, [pc, #388]	; (8006ab8 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x314>)
 8006934:	fba3 2301 	umull	r2, r3, r3, r1
 8006938:	08da      	lsrs	r2, r3, #3
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4413      	add	r3, r2
 8006944:	1aca      	subs	r2, r1, r3
 8006946:	2301      	movs	r3, #1
 8006948:	4093      	lsls	r3, r2
 800694a:	b21a      	sxth	r2, r3
 800694c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8006950:	4313      	orrs	r3, r2
 8006952:	b21b      	sxth	r3, r3
 8006954:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            config_register_group[current_ic].data[0] = LTC6811::CFGR0;
 8006958:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800695c:	4619      	mov	r1, r3
 800695e:	4853      	ldr	r0, [pc, #332]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 8006960:	f000 fcb0 	bl	80072c4 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 8006964:	4603      	mov	r3, r0
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fc0b 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 800696e:	4603      	mov	r3, r0
 8006970:	22fe      	movs	r2, #254	; 0xfe
 8006972:	701a      	strb	r2, [r3, #0]
            config_register_group[current_ic].data[4] = DCCx >> 0 & 0xFF;
 8006974:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006978:	b2dc      	uxtb	r4, r3
 800697a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800697e:	4619      	mov	r1, r3
 8006980:	484a      	ldr	r0, [pc, #296]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 8006982:	f000 fc9f 	bl	80072c4 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 8006986:	4603      	mov	r3, r0
 8006988:	2104      	movs	r1, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fbfa 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 8006990:	4603      	mov	r3, r0
 8006992:	4622      	mov	r2, r4
 8006994:	701a      	strb	r2, [r3, #0]
            config_register_group[current_ic].data[5] = DCCx >> 8 & 0x0F;
 8006996:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800699a:	121b      	asrs	r3, r3, #8
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	b2dc      	uxtb	r4, r3
 80069a4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80069a8:	4619      	mov	r1, r3
 80069aa:	4840      	ldr	r0, [pc, #256]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 80069ac:	f000 fc8a 	bl	80072c4 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2105      	movs	r1, #5
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fbe5 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4622      	mov	r2, r4
 80069be:	701a      	strb	r2, [r3, #0]
            config_register_group[current_ic].PEC = LTC6811::PEC15Calc(config_register_group[current_ic].data);
 80069c0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80069c4:	4619      	mov	r1, r3
 80069c6:	4839      	ldr	r0, [pc, #228]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 80069c8:	f000 fc7c 	bl	80072c4 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2106      	movs	r1, #6
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fbf5 	bl	80071c0 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461c      	mov	r4, r3
 80069da:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80069de:	4619      	mov	r1, r3
 80069e0:	4832      	ldr	r0, [pc, #200]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 80069e2:	f000 fc6f 	bl	80072c4 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4622      	mov	r2, r4
 80069ea:	80da      	strh	r2, [r3, #6]
        }
        break;
 80069ec:	e09c      	b.n	8006b28 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x384>

    case GTMeanPlusDelta: {
        size_t const average_voltage{ voltage_status.sum / (4 * LTC6811::kDaisyChainLength * 3) };
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a30      	ldr	r2, [pc, #192]	; (8006ab4 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x310>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	08db      	lsrs	r3, r3, #3
 80069fa:	65bb      	str	r3, [r7, #88]	; 0x58

        for (auto& IC : config_register_group) {
 80069fc:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 80069fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006a00:	4b2a      	ldr	r3, [pc, #168]	; (8006aac <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x308>)
 8006a02:	667b      	str	r3, [r7, #100]	; 0x64
 8006a04:	4b2a      	ldr	r3, [pc, #168]	; (8006ab0 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x30c>)
 8006a06:	653b      	str	r3, [r7, #80]	; 0x50
 8006a08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	f000 808d 	beq.w	8006b2c <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x388>
 8006a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a14:	64fb      	str	r3, [r7, #76]	; 0x4c
            DCCx = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
            current_cell = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006a28:	f000 fc0c 	bl	8007244 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 8006a2c:	6638      	str	r0, [r7, #96]	; 0x60
 8006a2e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006a30:	f000 fc14 	bl	800725c <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8006a34:	6478      	str	r0, [r7, #68]	; 0x44
 8006a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d03e      	beq.n	8006abc <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x318>
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8006a42:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8006a46:	4619      	mov	r1, r3
 8006a48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a4a:	f000 fc14 	bl	8007276 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a54:	f7ff fe8c 	bl	8006770 <_ZNKSt5arrayItLj3EE5beginEv>
 8006a58:	65f8      	str	r0, [r7, #92]	; 0x5c
 8006a5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a5c:	f7ff fe94 	bl	8006788 <_ZNKSt5arrayItLj3EE3endEv>
 8006a60:	63b8      	str	r0, [r7, #56]	; 0x38
 8006a62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d01c      	beq.n	8006aa4 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x300>
 8006a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
                    if (voltage > average_voltage + kDelta)
 8006a70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a74:	3364      	adds	r3, #100	; 0x64
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d90b      	bls.n	8006a92 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x2ee>
                        DCCx |= 1 << current_cell;
 8006a7a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8006a7e:	2201      	movs	r2, #1
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	b21a      	sxth	r2, r3
 8006a86:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                    ++current_cell;
 8006a92:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8006a96:	3301      	adds	r3, #1
 8006a98:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                for (auto const voltage : register_group[current_ic].data) { // 3 voltages per IC
 8006a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa2:	e7de      	b.n	8006a62 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x2be>
            for (auto const& register_group : cell_data) { // 4 voltage register groups
 8006aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8006aaa:	e7c4      	b.n	8006a36 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x292>
 8006aac:	200000e8 	.word	0x200000e8
 8006ab0:	200000f0 	.word	0x200000f0
 8006ab4:	aaaaaaab 	.word	0xaaaaaaab
 8006ab8:	ba2e8ba3 	.word	0xba2e8ba3
                } // 4 * 3 = 12 voltages associated with each LTC6811 in the daisy chain
            }
            --current_ic;
 8006abc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            IC.data[0] = LTC6811::CFGR0;
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fb5a 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	22fe      	movs	r2, #254	; 0xfe
 8006ad4:	701a      	strb	r2, [r3, #0]
            IC.data[4] = DCCx >> 0 & 0xFF;
 8006ad6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006ada:	b2dc      	uxtb	r4, r3
 8006adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ade:	2104      	movs	r1, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fb4f 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4622      	mov	r2, r4
 8006aea:	701a      	strb	r2, [r3, #0]
            IC.data[5] = DCCx >> 8 & 0x0F;
 8006aec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006af0:	121b      	asrs	r3, r3, #8
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	b2dc      	uxtb	r4, r3
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	2105      	movs	r1, #5
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fb40 	bl	8007184 <_ZNSt5arrayIhLj6EEixEj>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4622      	mov	r2, r4
 8006b08:	701a      	strb	r2, [r3, #0]
            IC.PEC = LTC6811::PEC15Calc(IC.data);
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0c:	2106      	movs	r1, #6
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fb56 	bl	80071c0 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1a:	80da      	strh	r2, [r3, #6]
        for (auto& IC : config_register_group) {
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	3308      	adds	r3, #8
 8006b20:	667b      	str	r3, [r7, #100]	; 0x64
 8006b22:	e771      	b.n	8006a08 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x264>
        break;
 8006b24:	bf00      	nop
 8006b26:	e002      	b.n	8006b2e <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x38a>
        break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x38a>
        }
        break;
 8006b2c:	bf00      	nop
    }
    }

    return write_config_register_group(config_register_group);
 8006b2e:	4804      	ldr	r0, [pc, #16]	; (8006b40 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE+0x39c>)
 8006b30:	f7ff fd82 	bl	8006638 <_ZN7LTC6811L27write_config_register_groupERSt5arrayINS_8RegisterIhEELj1EE>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	377c      	adds	r7, #124	; 0x7c
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200000e8 	.word	0x200000e8

08006b44 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE>:
    return clear_register_group({ 7, 18, 223, 164 });
}

/* Read cell data and generate a status report of the cell voltage register groups.
 * Returns a VoltageStatus on success, nullopt if error. */
[[nodiscard]] std::optional<VoltageStatus> read_cell_data(CellData& cell_data) noexcept {
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b097      	sub	sp, #92	; 0x5c
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
    LTC6811::VoltageStatus status;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b56:	823b      	strh	r3, [r7, #16]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	833b      	strh	r3, [r7, #24]
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
    size_t count{ 0 };
 8006b64:	2300      	movs	r3, #0
 8006b66:	657b      	str	r3, [r7, #84]	; 0x54

    start_conversion(ADCV);
 8006b68:	4846      	ldr	r0, [pc, #280]	; (8006c84 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x140>)
 8006b6a:	f7ff fd31 	bl	80065d0 <_ZN7LTC6811L16start_conversionERKSt5arrayIhLj4EE>
    for (size_t i = 0; i < cell_data.size(); ++i)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
 8006b72:	6838      	ldr	r0, [r7, #0]
 8006b74:	f000 fbb5 	bl	80072e2 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4sizeEv>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bf34      	ite	cc
 8006b80:	2301      	movcc	r3, #1
 8006b82:	2300      	movcs	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x74>
        if (read_voltage_register_group(i, cell_data) != HAL_OK)
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fd65 	bl	8006660 <_ZN7LTC6811L27read_voltage_register_groupEhRSt5arrayIS0_INS_8RegisterItEELj1EELj4EE>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x6c>
            return std::nullopt;
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fbda 	bl	8007362 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>
 8006bae:	e064      	b.n	8006c7a <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x136>
    for (size_t i = 0; i < cell_data.size(); ++i)
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	653b      	str	r3, [r7, #80]	; 0x50
 8006bb6:	e7dc      	b.n	8006b72 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x2e>

    for (const auto& register_group : cell_data) {
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
 8006bbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006bbe:	f000 fbde 	bl	800737e <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>
 8006bc2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006bc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006bc6:	f000 fbe6 	bl	8007396 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>
 8006bca:	63f8      	str	r0, [r7, #60]	; 0x3c
 8006bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d046      	beq.n	8006c62 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x11e>
 8006bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd6:	63bb      	str	r3, [r7, #56]	; 0x38
        for (const auto& IC : register_group) {
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006bde:	f000 fbe7 	bl	80073b0 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 8006be2:	64b8      	str	r0, [r7, #72]	; 0x48
 8006be4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006be6:	f000 fbef 	bl	80073c8 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 8006bea:	6338      	str	r0, [r7, #48]	; 0x30
 8006bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d032      	beq.n	8006c5a <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x116>
 8006bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (const auto voltage : IC.data) {
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f7ff fdb7 	bl	8006770 <_ZNKSt5arrayItLj3EE5beginEv>
 8006c02:	6478      	str	r0, [r7, #68]	; 0x44
 8006c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c06:	f7ff fdbf 	bl	8006788 <_ZNKSt5arrayItLj3EE3endEv>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d01e      	beq.n	8006c52 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x10e>
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	847b      	strh	r3, [r7, #34]	; 0x22
                status.sum += voltage;
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c1e:	4413      	add	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

                if (voltage < status.min) {
 8006c22:	8a3b      	ldrh	r3, [r7, #16]
 8006c24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d204      	bcs.n	8006c34 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0xf0>
                    status.min = voltage;
 8006c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c2c:	823b      	strh	r3, [r7, #16]
                    status.min_id = count;
 8006c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e007      	b.n	8006c44 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x100>
                } else if (voltage > status.max) {
 8006c34:	8b3b      	ldrh	r3, [r7, #24]
 8006c36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d903      	bls.n	8006c44 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x100>
                    status.max = voltage;
 8006c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c3e:	833b      	strh	r3, [r7, #24]
                    status.max_id = count;
 8006c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c42:	61fb      	str	r3, [r7, #28]
                }
                ++count;
 8006c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c46:	3301      	adds	r3, #1
 8006c48:	657b      	str	r3, [r7, #84]	; 0x54
            for (const auto voltage : IC.data) {
 8006c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c50:	e7dc      	b.n	8006c0c <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0xc8>
        for (const auto& IC : register_group) {
 8006c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c54:	3308      	adds	r3, #8
 8006c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c58:	e7c8      	b.n	8006bec <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0xa8>
    for (const auto& register_group : cell_data) {
 8006c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c60:	e7b4      	b.n	8006bcc <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x88>
            }
        }
    }

    status.sum /= 10000; // Convert centiDegC to DegC (with rounding errors, but this is what the old code did...)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE+0x144>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	0b5b      	lsrs	r3, r3, #13
 8006c6c:	60fb      	str	r3, [r7, #12]
    return status;
 8006c6e:	f107 030c 	add.w	r3, r7, #12
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fbb4 	bl	80073e2 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1IS1_Lb1EEEOT_>
}
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	375c      	adds	r7, #92	; 0x5c
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd90      	pop	{r4, r7, pc}
 8006c82:	bf00      	nop
 8006c84:	0800a58c 	.word	0x0800a58c
 8006c88:	d1b71759 	.word	0xd1b71759

08006c8c <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs>:

/* Read temp data and generate a status report of the current temperatures from aux voltage register groups.
 * Returns a TempStatus on success, nullopt if error. */
[[nodiscard]] std::optional<TempStatus> read_temp_data(TempData& temp_data) noexcept {
    constexpr static auto steinharthart = [](int16_t const NTC_voltage) noexcept {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	807b      	strh	r3, [r7, #2]
        constexpr auto Vin = 30000.0f; // 3[V], or 30000[V * 10-5]
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xac>)
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
        constexpr auto KtoC = 27315; // centiKelvin to centiDegCelsius
 8006c9c:	f646 23b3 	movw	r3, #27315	; 0x6ab3
 8006ca0:	623b      	str	r3, [r7, #32]
        constexpr auto A = 0.003354016f;
 8006ca2:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xb0>)
 8006ca4:	61fb      	str	r3, [r7, #28]
        constexpr auto B = 0.000256524f;
 8006ca6:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xb4>)
 8006ca8:	61bb      	str	r3, [r7, #24]
        constexpr auto C = 0.00000260597f;
 8006caa:	4b26      	ldr	r3, [pc, #152]	; (8006d44 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xb8>)
 8006cac:	617b      	str	r3, [r7, #20]
        constexpr auto D = 0.0000000632926f;
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xbc>)
 8006cb0:	613b      	str	r3, [r7, #16]
        auto log = -logf(Vin / NTC_voltage - 1);
 8006cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cbe:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006d4c <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xc0>
 8006cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cce:	eeb0 0a67 	vmov.f32	s0, s15
 8006cd2:	f003 f89f 	bl	8009e14 <logf>
 8006cd6:	eef0 7a40 	vmov.f32	s15, s0
 8006cda:	eef1 7a67 	vneg.f32	s15, s15
 8006cde:	edc7 7a03 	vstr	s15, [r7, #12]

        return static_cast<int16_t>(100.0f / (A + log * ( B + log * (C + D * log))) - KtoC);
 8006ce2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ce6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006d50 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xc4>
 8006cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006d54 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xc8>
 8006cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006d58 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xcc>
 8006d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006d5c <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xd0>
 8006d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d16:	eddf 6a12 	vldr	s13, [pc, #72]	; 8006d60 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xd4>
 8006d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006d64 <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs+0xd8>
 8006d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d2a:	ee17 3a90 	vmov	r3, s15
 8006d2e:	b21b      	sxth	r3, r3
    };
 8006d30:	4618      	mov	r0, r3
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	46ea6000 	.word	0x46ea6000
 8006d3c:	3b5bcf0d 	.word	0x3b5bcf0d
 8006d40:	39867e12 	.word	0x39867e12
 8006d44:	362ee239 	.word	0x362ee239
 8006d48:	3387eb7a 	.word	0x3387eb7a
 8006d4c:	46ea6000 	.word	0x46ea6000
 8006d50:	3387eb7a 	.word	0x3387eb7a
 8006d54:	362ee239 	.word	0x362ee239
 8006d58:	39867e12 	.word	0x39867e12
 8006d5c:	3b5bcf0d 	.word	0x3b5bcf0d
 8006d60:	42c80000 	.word	0x42c80000
 8006d64:	46d56600 	.word	0x46d56600

08006d68 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE>:
[[nodiscard]] std::optional<TempStatus> read_temp_data(TempData& temp_data) noexcept {
 8006d68:	b5b0      	push	{r4, r5, r7, lr}
 8006d6a:	b094      	sub	sp, #80	; 0x50
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]

    LTC6811::TempStatus status;
 8006d72:	4b4f      	ldr	r3, [pc, #316]	; (8006eb0 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x148>)
 8006d74:	f107 0408 	add.w	r4, r7, #8
 8006d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t count{ 0 };
 8006d7e:	2300      	movs	r3, #0
 8006d80:	64fb      	str	r3, [r7, #76]	; 0x4c

    start_conversion(ADAX);
 8006d82:	484c      	ldr	r0, [pc, #304]	; (8006eb4 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x14c>)
 8006d84:	f7ff fc24 	bl	80065d0 <_ZN7LTC6811L16start_conversionERKSt5arrayIhLj4EE>
    for (size_t i = 0; i < temp_data.size(); ++i)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8c:	6838      	ldr	r0, [r7, #0]
 8006d8e:	f000 fb3c 	bl	800740a <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4sizeEv>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bf34      	ite	cc
 8006d9a:	2301      	movcc	r3, #1
 8006d9c:	2300      	movcs	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d016      	beq.n	8006dd2 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x6a>
        if (read_aux_register_group(i, temp_data) != HAL_OK)
 8006da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff fc76 	bl	800669c <_ZN7LTC6811L23read_aux_register_groupEhRSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf14      	ite	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	2300      	moveq	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x62>
            return std::nullopt;
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb61 	bl	800748a <_ZNSt8optionalIN7LTC681110TempStatusEEC1ESt9nullopt_t>
 8006dc8:	e06e      	b.n	8006ea8 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x140>
    for (size_t i = 0; i < temp_data.size(); ++i)
 8006dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dcc:	3301      	adds	r3, #1
 8006dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd0:	e7dc      	b.n	8006d8c <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x24>

    for (auto& register_group : temp_data) {
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dd8:	f000 fb65 	bl	80074a6 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>
 8006ddc:	6478      	str	r0, [r7, #68]	; 0x44
 8006dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006de0:	f000 fb6d 	bl	80074be <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>
 8006de4:	6378      	str	r0, [r7, #52]	; 0x34
 8006de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d056      	beq.n	8006e9c <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x134>
 8006dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df0:	633b      	str	r3, [r7, #48]	; 0x30
        for (auto& IC : register_group) {
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006df8:	f000 fb6e 	bl	80074d8 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 8006dfc:	6438      	str	r0, [r7, #64]	; 0x40
 8006dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e00:	f000 fb76 	bl	80074f0 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8006e04:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d042      	beq.n	8006e94 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x12c>
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
            for (auto& temperature : IC.data) {
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	6a38      	ldr	r0, [r7, #32]
 8006e18:	f000 fb77 	bl	800750a <_ZNSt5arrayIsLj3EE5beginEv>
 8006e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8006e1e:	6a38      	ldr	r0, [r7, #32]
 8006e20:	f000 fb7f 	bl	8007522 <_ZNSt5arrayIsLj3EE3endEv>
 8006e24:	61f8      	str	r0, [r7, #28]
 8006e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d02e      	beq.n	8006e8c <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x124>
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	61bb      	str	r3, [r7, #24]
                temperature = steinharthart(temperature);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	481f      	ldr	r0, [pc, #124]	; (8006eb8 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x150>)
 8006e3c:	f7ff ff26 	bl	8006c8c <_ZZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EEENKUlsE_clEs>
 8006e40:	4603      	mov	r3, r0
 8006e42:	461a      	mov	r2, r3
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	801a      	strh	r2, [r3, #0]

                if (temperature < status.min) {
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	da06      	bge.n	8006e64 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0xfc>
                    status.min = temperature;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e5c:	813b      	strh	r3, [r7, #8]
                    status.min_id = count;
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e00c      	b.n	8006e7e <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x116>
                } else if (temperature > status.max) {
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	dd05      	ble.n	8006e7e <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x116>
                    status.max = temperature;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e78:	823b      	strh	r3, [r7, #16]
                    status.max_id = count;
 8006e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7c:	617b      	str	r3, [r7, #20]
                }

                ++count;
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e80:	3301      	adds	r3, #1
 8006e82:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (auto& temperature : IC.data) {
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	3302      	adds	r3, #2
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8a:	e7cc      	b.n	8006e26 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0xbe>
        for (auto& IC : register_group) {
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	3308      	adds	r3, #8
 8006e90:	643b      	str	r3, [r7, #64]	; 0x40
 8006e92:	e7b8      	b.n	8006e06 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x9e>
    for (auto& register_group : temp_data) {
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	3308      	adds	r3, #8
 8006e98:	647b      	str	r3, [r7, #68]	; 0x44
 8006e9a:	e7a4      	b.n	8006de6 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE+0x7e>
            }
        }
    }
    return status;
 8006e9c:	f107 0308 	add.w	r3, r7, #8
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fb4a 	bl	800753c <_ZNSt8optionalIN7LTC681110TempStatusEEC1IS1_Lb1EEEOT_>
}
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	3750      	adds	r7, #80	; 0x50
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb0:	0800a2c8 	.word	0x0800a2c8
 8006eb4:	0800a590 	.word	0x0800a590
 8006eb8:	0800a5ac 	.word	0x0800a5ac

08006ebc <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <_ZNKSt5arrayIhLj4EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff ffed 	bl	8006ebc <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE>:
static uint32_t write_register_group(Command const& command, RegisterGroup<T> const& register_group) noexcept {
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
    auto serialized = reinterpret_cast<uint8_t const *>(&register_group);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	60bb      	str	r3, [r7, #8]
    wake_from_idle();
 8006efa:	f7ff fb3d 	bl	8006578 <_ZN7LTC6811L14wake_from_idleEv>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8006efe:	2200      	movs	r2, #0
 8006f00:	2140      	movs	r1, #64	; 0x40
 8006f02:	4818      	ldr	r0, [pc, #96]	; (8006f64 <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x78>)
 8006f04:	f7fa fc4e 	bl	80017a4 <HAL_GPIO_WritePin>
    auto result = HAL_SPI_TransmitReceive(spi, command.data(), sizeof(command), nullptr, 0, HAL_MAX_DELAY);
 8006f08:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x7c>)
 8006f0a:	681c      	ldr	r4, [r3, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ffe0 	bl	8006ed2 <_ZNKSt5arrayIhLj4EE4dataEv>
 8006f12:	4601      	mov	r1, r0
 8006f14:	f04f 33ff 	mov.w	r3, #4294967295
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2204      	movs	r2, #4
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7fb fc9c 	bl	8002860 <HAL_SPI_TransmitReceive>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]
    if (result == HAL_OK)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10d      	bne.n	8006f4e <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x62>
        result = HAL_SPI_TransmitReceive(spi, serialized, sizeof(register_group), nullptr, 0, HAL_MAX_DELAY);
 8006f32:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x7c>)
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	2300      	movs	r3, #0
 8006f42:	2208      	movs	r2, #8
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	f7fb fc8b 	bl	8002860 <HAL_SPI_TransmitReceive>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8006f4e:	2201      	movs	r2, #1
 8006f50:	2140      	movs	r1, #64	; 0x40
 8006f52:	4804      	ldr	r0, [pc, #16]	; (8006f64 <_ZN7LTC6811L20write_register_groupIhEEmRKSt5arrayIhLj4EERKS1_INS_8RegisterIT_EELj1EE+0x78>)
 8006f54:	f7fa fc26 	bl	80017a4 <HAL_GPIO_WritePin>
    return result;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd90      	pop	{r4, r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40020400 	.word	0x40020400
 8006f68:	200000e4 	.word	0x200000e4

08006f6c <_ZNKSt5arrayIS_IhLj4EELj4EEixEj>:
      operator[](size_type __n) const noexcept
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 faf2 	bl	8007564 <_ZNSt14__array_traitsISt5arrayIhLj4EELj4EE6_S_refERA4_KS1_j>
 8006f80:	4603      	mov	r3, r0
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 faf2 	bl	8007582 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_refERA4_KS4_j>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>:
static uint32_t read_register_group(Command const& command, RegisterGroup<T>& register_group) noexcept {
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b08b      	sub	sp, #44	; 0x2c
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
    auto serialized = reinterpret_cast<uint8_t*>(&register_group);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	617b      	str	r3, [r7, #20]
    wake_from_idle();
 8006fb6:	f7ff fadf 	bl	8006578 <_ZN7LTC6811L14wake_from_idleEv>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2140      	movs	r1, #64	; 0x40
 8006fbe:	482c      	ldr	r0, [pc, #176]	; (8007070 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>)
 8006fc0:	f7fa fbf0 	bl	80017a4 <HAL_GPIO_WritePin>
    auto result = HAL_SPI_TransmitReceive(spi, command.data(), sizeof(Command), nullptr, 0, HAL_MAX_DELAY);
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xcc>)
 8006fc6:	681c      	ldr	r4, [r3, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff82 	bl	8006ed2 <_ZNKSt5arrayIhLj4EE4dataEv>
 8006fce:	4601      	mov	r1, r0
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2204      	movs	r2, #4
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f7fb fc3e 	bl	8002860 <HAL_SPI_TransmitReceive>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	77fb      	strb	r3, [r7, #31]
    if (result == HAL_OK)
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x62>
        result = HAL_SPI_TransmitReceive(spi, nullptr, 0, serialized, sizeof(register_group), HAL_MAX_DELAY);
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xcc>)
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2200      	movs	r2, #0
 8007000:	2100      	movs	r1, #0
 8007002:	f7fb fc2d 	bl	8002860 <HAL_SPI_TransmitReceive>
 8007006:	4603      	mov	r3, r0
 8007008:	77fb      	strb	r3, [r7, #31]
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800700a:	2201      	movs	r2, #1
 800700c:	2140      	movs	r1, #64	; 0x40
 800700e:	4818      	ldr	r0, [pc, #96]	; (8007070 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>)
 8007010:	f7fa fbc8 	bl	80017a4 <HAL_GPIO_WritePin>
    if (result == HAL_OK) {
 8007014:	7ffb      	ldrb	r3, [r7, #31]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d124      	bne.n	8007064 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xbc>
        for (auto& IC : register_group)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	6938      	ldr	r0, [r7, #16]
 8007020:	f000 fabe 	bl	80075a0 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 8007024:	61b8      	str	r0, [r7, #24]
 8007026:	6938      	ldr	r0, [r7, #16]
 8007028:	f000 fac6 	bl	80075b8 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d016      	beq.n	8007064 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xbc>
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	60bb      	str	r3, [r7, #8]
            if (IC.PEC != PEC15Calc(IC.data))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	88dc      	ldrh	r4, [r3, #6]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2106      	movs	r1, #6
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fac6 	bl	80075d4 <_ZN7LTC6811L9PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>
 8007048:	4603      	mov	r3, r0
 800704a:	429c      	cmp	r4, r3
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xb4>
                return HAL_ERROR; // TODO make this PEC error
 8007058:	2301      	movs	r3, #1
 800705a:	e004      	b.n	8007066 <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xbe>
        for (auto& IC : register_group)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	3308      	adds	r3, #8
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e7e4      	b.n	800702e <_ZN7LTC6811L19read_register_groupItEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x86>
    return result;
 8007064:	7ffb      	ldrb	r3, [r7, #31]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3724      	adds	r7, #36	; 0x24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd90      	pop	{r4, r7, pc}
 800706e:	bf00      	nop
 8007070:	40020400 	.word	0x40020400
 8007074:	200000e4 	.word	0x200000e4

08007078 <_ZNKSt5arrayIS_IhLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fae6 	bl	8007658 <_ZNSt14__array_traitsISt5arrayIhLj4EELj2EE6_S_refERA2_KS1_j>
 800708c:	4603      	mov	r3, r0
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EEixEj>:
      operator[](size_type __n) noexcept
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fae6 	bl	8007676 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_refERA2_KS4_j>
 80070aa:	4603      	mov	r3, r0
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE>:
static uint32_t read_register_group(Command const& command, RegisterGroup<T>& register_group) noexcept {
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b08b      	sub	sp, #44	; 0x2c
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
    auto serialized = reinterpret_cast<uint8_t*>(&register_group);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	617b      	str	r3, [r7, #20]
    wake_from_idle();
 80070c2:	f7ff fa59 	bl	8006578 <_ZN7LTC6811L14wake_from_idleEv>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80070c6:	2200      	movs	r2, #0
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	482c      	ldr	r0, [pc, #176]	; (800717c <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>)
 80070cc:	f7fa fb6a 	bl	80017a4 <HAL_GPIO_WritePin>
    auto result = HAL_SPI_TransmitReceive(spi, command.data(), sizeof(Command), nullptr, 0, HAL_MAX_DELAY);
 80070d0:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xcc>)
 80070d2:	681c      	ldr	r4, [r3, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff fefc 	bl	8006ed2 <_ZNKSt5arrayIhLj4EE4dataEv>
 80070da:	4601      	mov	r1, r0
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	2300      	movs	r3, #0
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	2300      	movs	r3, #0
 80070e8:	2204      	movs	r2, #4
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7fb fbb8 	bl	8002860 <HAL_SPI_TransmitReceive>
 80070f0:	4603      	mov	r3, r0
 80070f2:	77fb      	strb	r3, [r7, #31]
    if (result == HAL_OK)
 80070f4:	7ffb      	ldrb	r3, [r7, #31]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10d      	bne.n	8007116 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x62>
        result = HAL_SPI_TransmitReceive(spi, nullptr, 0, serialized, sizeof(register_group), HAL_MAX_DELAY);
 80070fa:	4b21      	ldr	r3, [pc, #132]	; (8007180 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xcc>)
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2308      	movs	r3, #8
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	f7fb fba7 	bl	8002860 <HAL_SPI_TransmitReceive>
 8007112:	4603      	mov	r3, r0
 8007114:	77fb      	strb	r3, [r7, #31]
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8007116:	2201      	movs	r2, #1
 8007118:	2140      	movs	r1, #64	; 0x40
 800711a:	4818      	ldr	r0, [pc, #96]	; (800717c <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xc8>)
 800711c:	f7fa fb42 	bl	80017a4 <HAL_GPIO_WritePin>
    if (result == HAL_OK) {
 8007120:	7ffb      	ldrb	r3, [r7, #31]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d124      	bne.n	8007170 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xbc>
        for (auto& IC : register_group)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	6938      	ldr	r0, [r7, #16]
 800712c:	f000 f9d4 	bl	80074d8 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 8007130:	61b8      	str	r0, [r7, #24]
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f000 f9dc 	bl	80074f0 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	429a      	cmp	r2, r3
 8007140:	d016      	beq.n	8007170 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xbc>
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	60bb      	str	r3, [r7, #8]
            if (IC.PEC != PEC15Calc(IC.data))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	88dc      	ldrh	r4, [r3, #6]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2106      	movs	r1, #6
 800714e:	4618      	mov	r0, r3
 8007150:	f000 faa0 	bl	8007694 <_ZN7LTC6811L9PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj>
 8007154:	4603      	mov	r3, r0
 8007156:	429c      	cmp	r4, r3
 8007158:	bf14      	ite	ne
 800715a:	2301      	movne	r3, #1
 800715c:	2300      	moveq	r3, #0
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xb4>
                return HAL_ERROR; // TODO make this PEC error
 8007164:	2301      	movs	r3, #1
 8007166:	e004      	b.n	8007172 <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0xbe>
        for (auto& IC : register_group)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	3308      	adds	r3, #8
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e7e4      	b.n	800713a <_ZN7LTC6811L19read_register_groupIsEEmRKSt5arrayIhLj4EERS1_INS_8RegisterIT_EELj1EE+0x86>
    return result;
 8007170:	7ffb      	ldrb	r3, [r7, #31]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3724      	adds	r7, #36	; 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
 800717a:	bf00      	nop
 800717c:	40020400 	.word	0x40020400
 8007180:	200000e4 	.word	0x200000e4

08007184 <_ZNSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) noexcept
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fac0 	bl	8007718 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 8007198:	4603      	mov	r3, r0
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <_ZNKSt5arrayIhLj6EEixEj>:
      operator[](size_type __n) const noexcept
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fab1 	bl	8007718 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj>:
[[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
    uint16_t PEC{ 16 }, addr{ 0 };
 80071ca:	2310      	movs	r3, #16
 80071cc:	81fb      	strh	r3, [r7, #14]
 80071ce:	2300      	movs	r3, #0
 80071d0:	817b      	strh	r3, [r7, #10]
        for (uint8_t i = 0; i < size; ++i) {
 80071d2:	2300      	movs	r3, #0
 80071d4:	737b      	strb	r3, [r7, #13]
 80071d6:	7b7b      	ldrb	r3, [r7, #13]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d91e      	bls.n	800721c <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x5c>
            addr = ((PEC >> 7) ^ data[i]) & 0xFF;
 80071de:	89fb      	ldrh	r3, [r7, #14]
 80071e0:	11db      	asrs	r3, r3, #7
 80071e2:	b21c      	sxth	r4, r3
 80071e4:	7b7b      	ldrb	r3, [r7, #13]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ffda 	bl	80071a2 <_ZNKSt5arrayIhLj6EEixEj>
 80071ee:	4603      	mov	r3, r0
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b21b      	sxth	r3, r3
 80071f4:	4063      	eors	r3, r4
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	817b      	strh	r3, [r7, #10]
            PEC = (PEC << 8) ^ crc15Table[addr];
 80071fe:	89fb      	ldrh	r3, [r7, #14]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	b21a      	sxth	r2, r3
 8007204:	897b      	ldrh	r3, [r7, #10]
 8007206:	490e      	ldr	r1, [pc, #56]	; (8007240 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 8007208:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800720c:	b21b      	sxth	r3, r3
 800720e:	4053      	eors	r3, r2
 8007210:	b21b      	sxth	r3, r3
 8007212:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0; i < size; ++i) {
 8007214:	7b7b      	ldrb	r3, [r7, #13]
 8007216:	3301      	adds	r3, #1
 8007218:	737b      	strb	r3, [r7, #13]
 800721a:	e7dc      	b.n	80071d6 <_ZN7LTC6811L9PEC15CalcIhLj6EEEtRKSt5arrayIT_XT0_EEj+0x16>
    PEC <<= 1; // The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800721c:	89fb      	ldrh	r3, [r7, #14]
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	81fb      	strh	r3, [r7, #14]
    return ((PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8); // Swapping byte order just because it makes life easier by allowing "if (IC.PEC != PEC15Calc(IC.data))"
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	b21a      	sxth	r2, r3
 8007228:	89fb      	ldrh	r3, [r7, #14]
 800722a:	0a1b      	lsrs	r3, r3, #8
 800722c:	b29b      	uxth	r3, r3
 800722e:	b21b      	sxth	r3, r3
 8007230:	4313      	orrs	r3, r2
 8007232:	b21b      	sxth	r3, r3
 8007234:	b29b      	uxth	r3, r3
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	bd90      	pop	{r4, r7, pc}
 800723e:	bf00      	nop
 8007240:	0800a38c 	.word	0x0800a38c

08007244 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>:
      begin() const noexcept
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa7c 	bl	800774a <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 8007252:	4603      	mov	r3, r0
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>:
      end() const noexcept
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa70 	bl	800774a <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 800726a:	4603      	mov	r3, r0
 800726c:	3320      	adds	r3, #32
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>:
      operator[](size_type __n) const noexcept
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fa6d 	bl	8007764 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_refERA1_KS2_j>
 800728a:	4603      	mov	r3, r0
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>:
      _S_ptr(const _Type& __t) noexcept
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <_ZNKSt5arrayItLj3EE4dataEv>:
      data() const noexcept
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ffed 	bl	8007294 <_ZNSt14__array_traitsItLj3EE6_S_ptrERA3_Kt>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <_ZNSt5arrayIN7LTC68118RegisterIhEELj1EEixEj>:
      operator[](size_type __n) noexcept
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fa55 	bl	8007782 <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_refERA1_KS2_j>
 80072d8:	4603      	mov	r3, r0
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	2304      	movs	r3, #4
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEE8_StorageIS1_Lb1EEC1Ev>:
      struct _Empty_byte { };

      template<typename _Up, bool = is_trivially_destructible_v<_Up>>
	union _Storage
	{
	  constexpr _Storage() noexcept : _M_empty() { }
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEEC1Ev>:
      _Optional_payload_base() = default;
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff ffed 	bl	80072f8 <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEE8_StorageIS1_Lb1EEC1Ev>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	751a      	strb	r2, [r3, #20]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1ELb1EEC1Ev>:
    struct _Optional_payload<_Tp, true, true, true>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff ffe8 	bl	800730e <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEEC1Ev>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusELb1ELb1EEC1Ev>:
  template<typename _Tp>
    struct _Optional_base<_Tp, true, true>
      : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff ffeb 	bl	800732e <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1ELb1EEC1Ev>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() = default;

      constexpr optional(nullopt_t) noexcept { }
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	7039      	strb	r1, [r7, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff ffea 	bl	8007348 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusELb1ELb1EEC1Ev>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE5beginEv>:
      begin() noexcept
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa0a 	bl	80077a0 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 800738c:	4603      	mov	r3, r0
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE3endEv>:
      end() noexcept
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f9fe 	bl	80077a0 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>
 80073a4:	4603      	mov	r3, r0
 80073a6:	3320      	adds	r3, #32
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>:
      begin() const noexcept
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa09 	bl	80077d0 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 80073be:	4603      	mov	r3, r0
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>:
      end() const noexcept
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9fd 	bl	80077d0 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 80073d6:	4603      	mov	r3, r0
 80073d8:	3308      	adds	r3, #8
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <_ZNSt8optionalIN7LTC681113VoltageStatusEEC1IS1_Lb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up&&>,
			 is_convertible<_Up&&, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 80073e2:	b5b0      	push	{r4, r5, r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80073ec:	687c      	ldr	r4, [r7, #4]
 80073ee:	6838      	ldr	r0, [r7, #0]
 80073f0:	f000 f9fb 	bl	80077ea <_ZSt7forwardIN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461a      	mov	r2, r3
 80073f8:	4629      	mov	r1, r5
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fa11 	bl	8007822 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bdb0      	pop	{r4, r5, r7, pc}

0800740a <_ZNKSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	2302      	movs	r3, #2
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEE8_StorageIS1_Lb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEEC1Ev>:
      _Optional_payload_base() = default;
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff ffed 	bl	8007420 <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEE8_StorageIS1_Lb1EEC1Ev>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	741a      	strb	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff ffe8 	bl	8007436 <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEEC1Ev>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <_ZNSt14_Optional_baseIN7LTC681110TempStatusELb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff ffeb 	bl	8007456 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1ELb1EEC1Ev>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <_ZNSt8optionalIN7LTC681110TempStatusEEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	7039      	strb	r1, [r7, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff ffea 	bl	8007470 <_ZNSt14_Optional_baseIN7LTC681110TempStatusELb1ELb1EEC1Ev>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE5beginEv>:
      begin() noexcept
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9cc 	bl	800784c <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 80074b4:	4603      	mov	r3, r0
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE3endEv>:
      end() noexcept
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9c0 	bl	800784c <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>
 80074cc:	4603      	mov	r3, r0
 80074ce:	3310      	adds	r3, #16
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>:
      begin() noexcept
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f9c0 	bl	8007866 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>:
      end() noexcept
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9b4 	bl	8007866 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 80074fe:	4603      	mov	r3, r0
 8007500:	3308      	adds	r3, #8
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <_ZNSt5arrayIsLj3EE5beginEv>:
      begin() noexcept
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9b4 	bl	8007880 <_ZNSt5arrayIsLj3EE4dataEv>
 8007518:	4603      	mov	r3, r0
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <_ZNSt5arrayIsLj3EE3endEv>:
      end() noexcept
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9a8 	bl	8007880 <_ZNSt5arrayIsLj3EE4dataEv>
 8007530:	4603      	mov	r3, r0
 8007532:	3306      	adds	r3, #6
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <_ZNSt8optionalIN7LTC681110TempStatusEEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800753c:	b5b0      	push	{r4, r5, r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8007546:	687c      	ldr	r4, [r7, #4]
 8007548:	6838      	ldr	r0, [r7, #0]
 800754a:	f000 f9a6 	bl	800789a <_ZSt7forwardIN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 800754e:	4603      	mov	r3, r0
 8007550:	461a      	mov	r2, r3
 8007552:	4629      	mov	r1, r5
 8007554:	4620      	mov	r0, r4
 8007556:	f000 f9bc 	bl	80078d2 <_ZNSt14_Optional_baseIN7LTC681110TempStatusELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bdb0      	pop	{r4, r5, r7, pc}

08007564 <_ZNSt14__array_traitsISt5arrayIhLj4EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4413      	add	r3, r2
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_refERA4_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	4413      	add	r3, r2
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>:
      begin() noexcept
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f9a7 	bl	80078fc <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 80075ae:	4603      	mov	r3, r0
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>:
      end() noexcept
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f99b 	bl	80078fc <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>
 80075c6:	4603      	mov	r3, r0
 80075c8:	3308      	adds	r3, #8
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <_ZN7LTC6811L9PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj>:
[[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
    uint16_t PEC{ 16 }, addr{ 0 };
 80075de:	2310      	movs	r3, #16
 80075e0:	82fb      	strh	r3, [r7, #22]
 80075e2:	2300      	movs	r3, #0
 80075e4:	827b      	strh	r3, [r7, #18]
        auto serialized = reinterpret_cast<uint8_t const*>(&data);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 80075ea:	2300      	movs	r3, #0
 80075ec:	757b      	strb	r3, [r7, #21]
 80075ee:	7d7b      	ldrb	r3, [r7, #21]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d91b      	bls.n	800762e <_ZN7LTC6811L9PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x5a>
            addr = ((PEC >> 7) ^ serialized[i]) & 0xFF;
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	11db      	asrs	r3, r3, #7
 80075fa:	b21a      	sxth	r2, r3
 80075fc:	7d7b      	ldrb	r3, [r7, #21]
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	440b      	add	r3, r1
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b21b      	sxth	r3, r3
 8007606:	4053      	eors	r3, r2
 8007608:	b21b      	sxth	r3, r3
 800760a:	b29b      	uxth	r3, r3
 800760c:	b2db      	uxtb	r3, r3
 800760e:	827b      	strh	r3, [r7, #18]
            PEC = (PEC << 8) ^ crc15Table[addr];
 8007610:	8afb      	ldrh	r3, [r7, #22]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	b21a      	sxth	r2, r3
 8007616:	8a7b      	ldrh	r3, [r7, #18]
 8007618:	490e      	ldr	r1, [pc, #56]	; (8007654 <_ZN7LTC6811L9PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 800761a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800761e:	b21b      	sxth	r3, r3
 8007620:	4053      	eors	r3, r2
 8007622:	b21b      	sxth	r3, r3
 8007624:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 8007626:	7d7b      	ldrb	r3, [r7, #21]
 8007628:	3301      	adds	r3, #1
 800762a:	757b      	strb	r3, [r7, #21]
 800762c:	e7df      	b.n	80075ee <_ZN7LTC6811L9PEC15CalcItLj3EEEtRKSt5arrayIT_XT0_EEj+0x1a>
    PEC <<= 1; // The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 800762e:	8afb      	ldrh	r3, [r7, #22]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	82fb      	strh	r3, [r7, #22]
    return ((PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8); // Swapping byte order just because it makes life easier by allowing "if (IC.PEC != PEC15Calc(IC.data))"
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	b21a      	sxth	r2, r3
 800763a:	8afb      	ldrh	r3, [r7, #22]
 800763c:	0a1b      	lsrs	r3, r3, #8
 800763e:	b29b      	uxth	r3, r3
 8007640:	b21b      	sxth	r3, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	b21b      	sxth	r3, r3
 8007646:	b29b      	uxth	r3, r3
}
 8007648:	4618      	mov	r0, r3
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	0800a38c 	.word	0x0800a38c

08007658 <_ZNSt14__array_traitsISt5arrayIhLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_refERA2_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	4413      	add	r3, r2
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <_ZN7LTC6811L9PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj>:
[[nodiscard]] constexpr static uint16_t PEC15Calc(std::array<T, S> const& data, size_t const size = S * sizeof(T)) noexcept {
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
    uint16_t PEC{ 16 }, addr{ 0 };
 800769e:	2310      	movs	r3, #16
 80076a0:	82fb      	strh	r3, [r7, #22]
 80076a2:	2300      	movs	r3, #0
 80076a4:	827b      	strh	r3, [r7, #18]
        auto serialized = reinterpret_cast<uint8_t const*>(&data);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
        for (uint8_t i = 0; i < size; ++i) {
 80076aa:	2300      	movs	r3, #0
 80076ac:	757b      	strb	r3, [r7, #21]
 80076ae:	7d7b      	ldrb	r3, [r7, #21]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d91b      	bls.n	80076ee <_ZN7LTC6811L9PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj+0x5a>
            addr = ((PEC >> 7) ^ serialized[i]) & 0xFF;
 80076b6:	8afb      	ldrh	r3, [r7, #22]
 80076b8:	11db      	asrs	r3, r3, #7
 80076ba:	b21a      	sxth	r2, r3
 80076bc:	7d7b      	ldrb	r3, [r7, #21]
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	440b      	add	r3, r1
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b21b      	sxth	r3, r3
 80076c6:	4053      	eors	r3, r2
 80076c8:	b21b      	sxth	r3, r3
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	827b      	strh	r3, [r7, #18]
            PEC = (PEC << 8) ^ crc15Table[addr];
 80076d0:	8afb      	ldrh	r3, [r7, #22]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b21a      	sxth	r2, r3
 80076d6:	8a7b      	ldrh	r3, [r7, #18]
 80076d8:	490e      	ldr	r1, [pc, #56]	; (8007714 <_ZN7LTC6811L9PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj+0x80>)
 80076da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80076de:	b21b      	sxth	r3, r3
 80076e0:	4053      	eors	r3, r2
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i < size; ++i) {
 80076e6:	7d7b      	ldrb	r3, [r7, #21]
 80076e8:	3301      	adds	r3, #1
 80076ea:	757b      	strb	r3, [r7, #21]
 80076ec:	e7df      	b.n	80076ae <_ZN7LTC6811L9PEC15CalcIsLj3EEEtRKSt5arrayIT_XT0_EEj+0x1a>
    PEC <<= 1; // The final PEC is the 15-bit value in the PEC register with a 0 bit appended to its LSB.
 80076ee:	8afb      	ldrh	r3, [r7, #22]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	82fb      	strh	r3, [r7, #22]
    return ((PEC & 0xFF) << 8 | (PEC & 0xFF00) >> 8); // Swapping byte order just because it makes life easier by allowing "if (IC.PEC != PEC15Calc(IC.data))"
 80076f4:	8afb      	ldrh	r3, [r7, #22]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	b21a      	sxth	r2, r3
 80076fa:	8afb      	ldrh	r3, [r7, #22]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b29b      	uxth	r3, r3
 8007700:	b21b      	sxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b21b      	sxth	r3, r3
 8007706:	b29b      	uxth	r3, r3
}
 8007708:	4618      	mov	r0, r3
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	0800a38c 	.word	0x0800a38c

08007718 <_ZNSt14__array_traitsIhLj6EE6_S_refERA6_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	4413      	add	r3, r2
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>:
      _S_ptr(const _Type& __t) noexcept
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <_ZNKSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>:
      data() const noexcept
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff ffed 	bl	8007734 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>
 800775a:	4603      	mov	r3, r0
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <_ZNSt5arrayIS_IN7LTC68118RegisterItEELj1EELj4EE4dataEv>:
      data() noexcept
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff ffc2 	bl	8007734 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterItEELj1EELj4EE6_S_ptrERA4_KS4_>
 80077b0:	4603      	mov	r3, r0
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>:
      data() const noexcept
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff ffed 	bl	80077ba <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>
 80077e0:	4603      	mov	r3, r0
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <_ZSt7forwardIN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	7239      	strb	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4621      	mov	r1, r4
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f895 	bl	8007942 <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEEC1IJS1_EEESt10in_place_tDpOT_>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bd90      	pop	{r4, r7, pc}

08007822 <_ZNSt14_Optional_baseIN7LTC681113VoltageStatusELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8007822:	b5b0      	push	{r4, r5, r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	7239      	strb	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800782e:	68fc      	ldr	r4, [r7, #12]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ffda 	bl	80077ea <_ZSt7forwardIN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	4629      	mov	r1, r5
 800783c:	4620      	mov	r0, r4
 800783e:	f7ff ffdf 	bl	8007800 <_ZNSt17_Optional_payloadIN7LTC681113VoltageStatusELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bdb0      	pop	{r4, r5, r7, pc}

0800784c <_ZNSt5arrayIS_IN7LTC68118RegisterIsEELj1EELj2EE4dataEv>:
      data() noexcept
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f88b 	bl	8007972 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>
 800785c:	4603      	mov	r3, r0
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>:
      data() noexcept
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f889 	bl	8007988 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>
 8007876:	4603      	mov	r3, r0
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZNSt5arrayIsLj3EE4dataEv>:
      data() noexcept
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f887 	bl	800799e <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 8007890:	4603      	mov	r3, r0
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <_ZSt7forwardIN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	7239      	strb	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	4621      	mov	r1, r4
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f88b 	bl	80079de <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEEC1IJS1_EEESt10in_place_tDpOT_>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd90      	pop	{r4, r7, pc}

080078d2 <_ZNSt14_Optional_baseIN7LTC681110TempStatusELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 80078d2:	b5b0      	push	{r4, r5, r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	7239      	strb	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 80078de:	68fc      	ldr	r4, [r7, #12]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff ffda 	bl	800789a <_ZSt7forwardIN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 80078e6:	4603      	mov	r3, r0
 80078e8:	461a      	mov	r2, r3
 80078ea:	4629      	mov	r1, r5
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7ff ffdf 	bl	80078b0 <_ZNSt17_Optional_payloadIN7LTC681110TempStatusELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bdb0      	pop	{r4, r5, r7, pc}

080078fc <_ZNSt5arrayIN7LTC68118RegisterItEELj1EE4dataEv>:
      data() noexcept
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ff57 	bl	80077ba <_ZNSt14__array_traitsIN7LTC68118RegisterItEELj1EE6_S_ptrERA1_KS2_>
 800790c:	4603      	mov	r3, r0
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8007916:	b5b0      	push	{r4, r5, r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	7239      	strb	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff61 	bl	80077ea <_ZSt7forwardIN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007928:	4602      	mov	r2, r0
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	461c      	mov	r4, r3
 800792e:	4615      	mov	r5, r2
 8007930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	6023      	str	r3, [r4, #0]
	    { }
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bdb0      	pop	{r4, r5, r7, pc}

08007942 <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8007942:	b5b0      	push	{r4, r5, r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	7239      	strb	r1, [r7, #8]
 800794c:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800794e:	68fc      	ldr	r4, [r7, #12]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ff4a 	bl	80077ea <_ZSt7forwardIN7LTC681113VoltageStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007956:	4603      	mov	r3, r0
 8007958:	461a      	mov	r2, r3
 800795a:	4629      	mov	r1, r5
 800795c:	4620      	mov	r0, r4
 800795e:	f7ff ffda 	bl	8007916 <_ZNSt22_Optional_payload_baseIN7LTC681113VoltageStatusEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	751a      	strb	r2, [r3, #20]
	{ }
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bdb0      	pop	{r4, r5, r7, pc}

08007972 <_ZNSt14__array_traitsISt5arrayIN7LTC68118RegisterIsEELj1EELj2EE6_S_ptrERA2_KS4_>:
      _S_ptr(const _Type& __t) noexcept
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>:
      _S_ptr(const _Type& __t) noexcept
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	7239      	strb	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff ff6a 	bl	800789a <_ZSt7forwardIN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 80079c6:	4602      	mov	r2, r0
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	461c      	mov	r4, r3
 80079cc:	4613      	mov	r3, r2
 80079ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    { }
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd90      	pop	{r4, r7, pc}

080079de <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80079de:	b5b0      	push	{r4, r5, r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	7239      	strb	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80079ea:	68fc      	ldr	r4, [r7, #12]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff54 	bl	800789a <_ZSt7forwardIN7LTC681110TempStatusEEOT_RNSt16remove_referenceIS2_E4typeE>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	4629      	mov	r1, r5
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7ff ffdb 	bl	80079b4 <_ZNSt22_Optional_payload_baseIN7LTC681110TempStatusEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	741a      	strb	r2, [r3, #16]
	{ }
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bdb0      	pop	{r4, r5, r7, pc}

08007a0e <_ZN6StatusC1Eh>:
 *      Author: Joshua
 */

#include "Status.h"

Status::Status(uint8_t op_mode) : op_mode{ op_mode } {
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	705a      	strb	r2, [r3, #1]
    set_precharge_state(GPIO_PIN_RESET);
 8007a26:	2100      	movs	r1, #0
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f809 	bl	8007a40 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
    set_AIR_state(GPIO_PIN_RESET);
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f82f 	bl	8007a94 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
};
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>:

void Status::set_precharge_state(GPIO_PinState state) const noexcept {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(PreCharge_GPIO_Port, PreCharge_Pin, state);
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2101      	movs	r1, #1
 8007a52:	4806      	ldr	r0, [pc, #24]	; (8007a6c <_ZNK6Status19set_precharge_stateE13GPIO_PinState+0x2c>)
 8007a54:	f7f9 fea6 	bl	80017a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, state);
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4804      	ldr	r0, [pc, #16]	; (8007a70 <_ZNK6Status19set_precharge_stateE13GPIO_PinState+0x30>)
 8007a60:	f7f9 fea0 	bl	80017a4 <HAL_GPIO_WritePin>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40020400 	.word	0x40020400
 8007a70:	40020800 	.word	0x40020800

08007a74 <_ZNK6Status19get_precharge_stateEv>:

[[nodiscard]] GPIO_PinState Status::get_precharge_state() const noexcept {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(PreCharge_GPIO_Port, PreCharge_Pin);
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4804      	ldr	r0, [pc, #16]	; (8007a90 <_ZNK6Status19get_precharge_stateEv+0x1c>)
 8007a80:	f7f9 fe78 	bl	8001774 <HAL_GPIO_ReadPin>
 8007a84:	4603      	mov	r3, r0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40020400 	.word	0x40020400

08007a94 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>:

void Status::set_AIR_state(GPIO_PinState state) const noexcept {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(BMSrelay_GPIO_Port, BMSrelay_Pin, state);
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	4806      	ldr	r0, [pc, #24]	; (8007ac0 <_ZNK6Status13set_AIR_stateE13GPIO_PinState+0x2c>)
 8007aa8:	f7f9 fe7c 	bl	80017a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, state);
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2104      	movs	r1, #4
 8007ab2:	4804      	ldr	r0, [pc, #16]	; (8007ac4 <_ZNK6Status13set_AIR_stateE13GPIO_PinState+0x30>)
 8007ab4:	f7f9 fe76 	bl	80017a4 <HAL_GPIO_WritePin>
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	40020400 	.word	0x40020400
 8007ac4:	40020800 	.word	0x40020800

08007ac8 <_ZNK6Status13get_AIR_stateEv>:

[[nodiscard]] GPIO_PinState Status::get_AIR_state() const noexcept {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(BMSrelay_GPIO_Port, BMSrelay_Pin);
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	4804      	ldr	r0, [pc, #16]	; (8007ae4 <_ZNK6Status13get_AIR_stateEv+0x1c>)
 8007ad4:	f7f9 fe4e 	bl	8001774 <HAL_GPIO_ReadPin>
 8007ad8:	4603      	mov	r3, r0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40020400 	.word	0x40020400

08007ae8 <_ZN6Status8is_errorE5Errorb>:

bool Status::is_error(Error const e, bool const error) noexcept {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
 8007af4:	4613      	mov	r3, r2
 8007af6:	70bb      	strb	r3, [r7, #2]
    if (error) {
 8007af8:	78bb      	ldrb	r3, [r7, #2]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d040      	beq.n	8007b80 <_ZN6Status8is_errorE5Errorb+0x98>
        ++error_counters[e];
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	441a      	add	r2, r3
 8007b04:	7892      	ldrb	r2, [r2, #2]
 8007b06:	3201      	adds	r2, #1
 8007b08:	b2d1      	uxtb	r1, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	460a      	mov	r2, r1
 8007b10:	709a      	strb	r2, [r3, #2]
        if (error_counters[e] > error_limits[e]) {
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	4413      	add	r3, r2
 8007b18:	789a      	ldrb	r2, [r3, #2]
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	4923      	ldr	r1, [pc, #140]	; (8007bac <_ZN6Status8is_errorE5Errorb+0xc4>)
 8007b1e:	5ccb      	ldrb	r3, [r1, r3]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d93d      	bls.n	8007ba0 <_ZN6Status8is_errorE5Errorb+0xb8>
            if (e == Limping)
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d10b      	bne.n	8007b42 <_ZN6Status8is_errorE5Errorb+0x5a>
                error_counters[e] += 9; // Add some amount to the counter when limping so that it takes some time to return to non-limping
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	4413      	add	r3, r2
 8007b30:	789a      	ldrb	r2, [r3, #2]
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	3209      	adds	r2, #9
 8007b36:	b2d1      	uxtb	r1, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	460a      	mov	r2, r1
 8007b3e:	709a      	strb	r2, [r3, #2]
 8007b40:	e01a      	b.n	8007b78 <_ZN6Status8is_errorE5Errorb+0x90>
            else {
#if BMS_RELAY_CTRL_BYPASS
                // Do nothing.
#elif SKIP_PEC_ERROR_ACTIONS
                if (e != PECError) {
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	2b09      	cmp	r3, #9
 8007b46:	d007      	beq.n	8007b58 <_ZN6Status8is_errorE5Errorb+0x70>
                    set_AIR_state(GPIO_PIN_RESET);
 8007b48:	2100      	movs	r1, #0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff ffa2 	bl	8007a94 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
                    set_precharge_state(GPIO_PIN_RESET);
 8007b50:	2100      	movs	r1, #0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff74 	bl	8007a40 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
#else
                set_AIR_state(GPIO_PIN_RESET);
                setPrechargeState(GPIO_PIN_RESET);
#endif
#if STOP_CORE_ON_SAFE_STATE
                op_mode &= ~Core;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	701a      	strb	r2, [r3, #0]
#endif
#if START_DEBUG_ON_SAFE_STATE
                op_mode |= Debug;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	f043 0308 	orr.w	r3, r3, #8
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	701a      	strb	r2, [r3, #0]
#endif
            }
            last_error = e;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	705a      	strb	r2, [r3, #1]
 8007b7e:	e00f      	b.n	8007ba0 <_ZN6Status8is_errorE5Errorb+0xb8>
        }
    } else if (error_counters[e] > 0) { // If no error, decrement counter if it is greater than 0.
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	4413      	add	r3, r2
 8007b86:	789b      	ldrb	r3, [r3, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <_ZN6Status8is_errorE5Errorb+0xb8>
        --error_counters[e];
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	441a      	add	r2, r3
 8007b92:	7892      	ldrb	r2, [r2, #2]
 8007b94:	3a01      	subs	r2, #1
 8007b96:	b2d1      	uxtb	r1, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	709a      	strb	r2, [r3, #2]
    }

    return error;
 8007ba0:	78bb      	ldrb	r3, [r7, #2]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	0800a5b0 	.word	0x0800a5b0

08007bb0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
    return 0;
 8007bb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	b25a      	sxtb	r2, r3
 8007bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	b2db      	uxtb	r3, r3
  }
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <_ZNSt6atomicImEC1Em>:
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f001 fd66 	bl	80096c6 <_ZNSt13__atomic_baseImEC1Em>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <_ZN4NLG5C1ER19__CAN_HandleTypeDefR19CAN_TxHeaderTypeDefttt>:

public:
    /*** Bit definitions in NLG5 Control Bitmap (NLG5_CTLB) ***/
    enum { C_CP_V = 1 << 5, C_C_EL = 1 << 6, C_C_EN = 1 << 7 }; // From http://media3.ev-tv.me/BrusaCANbusspec201.pdf

    NLG5(CAN_HandleTypeDef& hcan, CAN_TxHeaderTypeDef& TxHeader, uint16_t const mc_limit = 160, uint16_t const oc_limit = 60, uint16_t const ov_limit = 2990)
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	807b      	strh	r3, [r7, #2]
    : hcan{ hcan }, TxHeader{ TxHeader}, ctrl{ C_C_EN }, mc_limit { mc_limit }, oc_limit { oc_limit }, ov_limit { ov_limit }, a_buffer{ 0 }, b_buffer{ 0 } {};
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3308      	adds	r3, #8
 8007c22:	2100      	movs	r1, #0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff ffde 	bl	8007be6 <_ZNSt6atomicImEC1Em>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2280      	movs	r2, #128	; 0x80
 8007c2e:	731a      	strb	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	887a      	ldrh	r2, [r7, #2]
 8007c34:	81da      	strh	r2, [r3, #14]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8b3a      	ldrh	r2, [r7, #24]
 8007c3a:	821a      	strh	r2, [r3, #16]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8bba      	ldrh	r2, [r7, #28]
 8007c40:	825a      	strh	r2, [r3, #18]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	615a      	str	r2, [r3, #20]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	619a      	str	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <_ZN4NLG516setChargeCurrentEt>:

    void setChargeCurrent(uint16_t const max_voltage) noexcept {
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	807b      	strh	r3, [r7, #2]
        if (max_voltage > kChargerDis)
 8007c64:	887b      	ldrh	r3, [r7, #2]
 8007c66:	f24a 3248 	movw	r2, #41800	; 0xa348
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d903      	bls.n	8007c76 <_ZN4NLG516setChargeCurrentEt+0x1e>
            ctrl = 0;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	731a      	strb	r2, [r3, #12]
        else if (max_voltage < kChargerEn)
            ctrl = C_C_EN;
    }
 8007c74:	e007      	b.n	8007c86 <_ZN4NLG516setChargeCurrentEt+0x2e>
        else if (max_voltage < kChargerEn)
 8007c76:	887b      	ldrh	r3, [r7, #2]
 8007c78:	f24a 221b 	movw	r2, #41499	; 0xa21b
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d802      	bhi.n	8007c86 <_ZN4NLG516setChargeCurrentEt+0x2e>
            ctrl = C_C_EN;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2280      	movs	r2, #128	; 0x80
 8007c84:	731a      	strb	r2, [r3, #12]
    }
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <_ZN4NLG54tickEv>:

    void tick() noexcept {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
        /* Every fifth time the timeout occurs, ctrl is set to a reset command if charger is in fault state. Otherwise it is set to a charge command.  */

#if CAN_ENABLED
        static std::atomic<uint8_t> event_counter{ 0 };

        if (++mCounter >= kChargerEventTimeout) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 fd1f 	bl	80096e4 <_ZNSt13__atomic_baseImEppEv>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b63      	cmp	r3, #99	; 0x63
 8007caa:	bf8c      	ite	hi
 8007cac:	2301      	movhi	r3, #1
 8007cae:	2300      	movls	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d06a      	beq.n	8007d8c <_ZN4NLG54tickEv+0xf8>
            mCounter = 0;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	2100      	movs	r1, #0
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 fd29 	bl	8009714 <_ZNSt13__atomic_baseImEaSEm>

            /* Checks specified chargers MOB status */
            if ((a_buffer[0] != 136 && a_buffer[0] != 152) || (b_buffer[0] != 136 && b_buffer[0] != 152)) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7d1b      	ldrb	r3, [r3, #20]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b88      	cmp	r3, #136	; 0x88
 8007cca:	d004      	beq.n	8007cd6 <_ZN4NLG54tickEv+0x42>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7d1b      	ldrb	r3, [r3, #20]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b98      	cmp	r3, #152	; 0x98
 8007cd4:	d109      	bne.n	8007cea <_ZN4NLG54tickEv+0x56>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7e1b      	ldrb	r3, [r3, #24]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b88      	cmp	r3, #136	; 0x88
 8007cde:	d006      	beq.n	8007cee <_ZN4NLG54tickEv+0x5a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7e1b      	ldrb	r3, [r3, #24]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b98      	cmp	r3, #152	; 0x98
 8007ce8:	d001      	beq.n	8007cee <_ZN4NLG54tickEv+0x5a>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <_ZN4NLG54tickEv+0x5c>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d015      	beq.n	8007d20 <_ZN4NLG54tickEv+0x8c>
                if (++event_counter >= 5) {
 8007cf4:	4827      	ldr	r0, [pc, #156]	; (8007d94 <_ZN4NLG54tickEv+0x100>)
 8007cf6:	f001 fd2d 	bl	8009754 <_ZNSt13__atomic_baseIhEppEv>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	bf8c      	ite	hi
 8007d00:	2301      	movhi	r3, #1
 8007d02:	2300      	movls	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <_ZN4NLG54tickEv+0x86>
                    ctrl = C_C_EL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2240      	movs	r2, #64	; 0x40
 8007d0e:	731a      	strb	r2, [r3, #12]
                    event_counter = 0;
 8007d10:	2100      	movs	r1, #0
 8007d12:	4820      	ldr	r0, [pc, #128]	; (8007d94 <_ZN4NLG54tickEv+0x100>)
 8007d14:	f001 fd36 	bl	8009784 <_ZNSt13__atomic_baseIhEaSEh>
 8007d18:	e002      	b.n	8007d20 <_ZN4NLG54tickEv+0x8c>
                } else {
                    ctrl = C_C_EN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	731a      	strb	r2, [r3, #12]
                }
            }

            TxHeader.StdId = NLGACtrl;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8007d28:	601a      	str	r2, [r3, #0]
            TxHeader.DLC = 7;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2207      	movs	r2, #7
 8007d30:	611a      	str	r2, [r3, #16]
            uint32_t mailbox{ 0 };
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
            uint8_t data[7] {
                ctrl,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7b1b      	ldrb	r3, [r3, #12]
 8007d3a:	b2db      	uxtb	r3, r3
                static_cast<uint8_t>(mc_limit),
                static_cast<uint8_t>(ov_limit >> 8),
                static_cast<uint8_t>(ov_limit),
                static_cast<uint8_t>(oc_limit >> 8),
                static_cast<uint8_t>(oc_limit)
            };
 8007d3c:	733b      	strb	r3, [r7, #12]
                static_cast<uint8_t>(mc_limit >> 8),
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	89db      	ldrh	r3, [r3, #14]
 8007d42:	121b      	asrs	r3, r3, #8
            };
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	737b      	strb	r3, [r7, #13]
                static_cast<uint8_t>(mc_limit),
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	89db      	ldrh	r3, [r3, #14]
            };
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	73bb      	strb	r3, [r7, #14]
                static_cast<uint8_t>(ov_limit >> 8),
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8a5b      	ldrh	r3, [r3, #18]
 8007d54:	121b      	asrs	r3, r3, #8
            };
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	73fb      	strb	r3, [r7, #15]
                static_cast<uint8_t>(ov_limit),
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8a5b      	ldrh	r3, [r3, #18]
            };
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	743b      	strb	r3, [r7, #16]
                static_cast<uint8_t>(oc_limit >> 8),
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8a1b      	ldrh	r3, [r3, #16]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	121b      	asrs	r3, r3, #8
            };
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	747b      	strb	r3, [r7, #17]
                static_cast<uint8_t>(oc_limit)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8a1b      	ldrh	r3, [r3, #16]
 8007d72:	b29b      	uxth	r3, r3
            };
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	74bb      	strb	r3, [r7, #18]

            HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &mailbox);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6859      	ldr	r1, [r3, #4]
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	f107 020c 	add.w	r2, r7, #12
 8007d88:	f7f8 fe16 	bl	80009b8 <HAL_CAN_AddTxMessage>
        }
#endif
    }
 8007d8c:	bf00      	nop
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200000f0 	.word	0x200000f0

08007d98 <_ZN7PWM_FanC1Eh>:
#include <algorithm>
class PWM_Fan {
public:
    enum Mode { Manual, Automatic };

    PWM_Fan(uint8_t const duty_cycle = kLowDutyCycle) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	701a      	strb	r2, [r3, #0]
        setDutyCycle(duty_cycle);
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f822 	bl	8007df8 <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <_ZSt5clampIhERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d309      	bcc.n	8007dea <_ZSt5clampIhERKT_S2_S2_S2_+0x2c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781a      	ldrb	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d201      	bcs.n	8007de6 <_ZSt5clampIhERKT_S2_S2_S2_+0x28>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	e002      	b.n	8007dec <_ZSt5clampIhERKT_S2_S2_S2_+0x2e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	e000      	b.n	8007dec <_ZSt5clampIhERKT_S2_S2_S2_+0x2e>
 8007dea:	68bb      	ldr	r3, [r7, #8]
    }
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <_ZNK7PWM_Fan12setDutyCycleEh>:

    void setDutyCycle(uint8_t const duty_cycle) const noexcept {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
        /* PWM period is 20000 cycles, so the duty cycle is:
         * (duty_cycle / 100) * 20000 or, duty_cycle * 200
         * TODO: This is probably not working right! */
        TIM2->CCR4 = std::clamp(duty_cycle, kMinDutyCycle, kMaxDutyCycle) * 200;
 8007e04:	1cfb      	adds	r3, r7, #3
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <_ZNK7PWM_Fan12setDutyCycleEh+0x34>)
 8007e08:	4909      	ldr	r1, [pc, #36]	; (8007e30 <_ZNK7PWM_Fan12setDutyCycleEh+0x38>)
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff ffd7 	bl	8007dbe <_ZSt5clampIhERKT_S2_S2_S2_>
 8007e10:	4603      	mov	r3, r0
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	23c8      	movs	r3, #200	; 0xc8
 8007e18:	fb03 f202 	mul.w	r2, r3, r2
 8007e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	0800a5be 	.word	0x0800a5be
 8007e30:	0800a5bd 	.word	0x0800a5bd

08007e34 <_ZN7PWM_Fan13calcDutyCycleEs>:


    void calcDutyCycle(int16_t const max_temp) noexcept {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	817b      	strh	r3, [r7, #10]
        if (max_temp > kHighTemp)
 8007e40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e44:	f241 7270 	movw	r2, #6000	; 0x1770
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	dd04      	ble.n	8007e56 <_ZN7PWM_Fan13calcDutyCycleEs+0x22>
            setDutyCycle(kMaxDutyCycle);
 8007e4c:	2164      	movs	r1, #100	; 0x64
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff ffd2 	bl	8007df8 <_ZNK7PWM_Fan12setDutyCycleEh>
        else if (max_temp < kLowTemp)
            setDutyCycle(kLowDutyCycle);
        else
            setDutyCycle(kM * max_temp + kB);

    }
 8007e54:	e021      	b.n	8007e9a <_ZN7PWM_Fan13calcDutyCycleEs+0x66>
        else if (max_temp < kLowTemp)
 8007e56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e5e:	da04      	bge.n	8007e6a <_ZN7PWM_Fan13calcDutyCycleEs+0x36>
            setDutyCycle(kLowDutyCycle);
 8007e60:	210a      	movs	r1, #10
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff ffc8 	bl	8007df8 <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 8007e68:	e017      	b.n	8007e9a <_ZN7PWM_Fan13calcDutyCycleEs+0x66>
            setDutyCycle(kM * max_temp + kB);
 8007e6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e76:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007ea4 <_ZN7PWM_Fan13calcDutyCycleEs+0x70>
 8007e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e7e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007ea8 <_ZN7PWM_Fan13calcDutyCycleEs+0x74>
 8007e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8007e8e:	793b      	ldrb	r3, [r7, #4]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	4619      	mov	r1, r3
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff ffaf 	bl	8007df8 <_ZNK7PWM_Fan12setDutyCycleEh>
    }
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	3cb851ec 	.word	0x3cb851ec
 8007ea8:	420c0000 	.word	0x420c0000

08007eac <_ZN7PWM_Fan7setModeENS_4ModeE>:

    void setMode(Mode const mode) noexcept {
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
        this->mode = mode;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	78fa      	ldrb	r2, [r7, #3]
 8007ebc:	701a      	strb	r2, [r3, #0]
    }
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <_ZNK7PWM_Fan7getModeEv>:

    [[nodiscard]] Mode getMode() const noexcept {
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
        return mode;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b2db      	uxtb	r3, r3
    }
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <_ZNK6Status11get_op_modeEv>:

    [[nodiscard]] GPIO_PinState get_AIR_state() const noexcept;

    bool is_error(Error const e, bool const error) noexcept;

    uint8_t get_op_mode() const noexcept {
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
        return op_mode;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b2db      	uxtb	r3, r3
    }
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <_ZN6Status11set_op_modeE7Op_Mode>:

    void set_op_mode(Op_Mode op_mode) noexcept {
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	70fb      	strb	r3, [r7, #3]
        this->op_mode = op_mode;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	701a      	strb	r2, [r3, #0]
    }
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <_ZNK6Status14get_last_errorEv>:

    Error get_last_error() const noexcept {
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
        return last_error;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	785b      	ldrb	r3, [r3, #1]
    }
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <_ZN6Status15get_error_countE5Error>:

    uint8_t get_error_count(Error error) {
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
        return error_counters[error];
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4413      	add	r3, r2
 8007f46:	789b      	ldrb	r3, [r3, #2]
    }
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <_ZN6Status20get_error_over_limitE5Error>:

    bool get_error_over_limit(Error error) {
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
        return error_counters[error] > error_limits[error];
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	789a      	ldrb	r2, [r3, #2]
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	4906      	ldr	r1, [pc, #24]	; (8007f84 <_ZN6Status20get_error_over_limitE5Error+0x30>)
 8007f6c:	5ccb      	ldrb	r3, [r1, r3]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	bf8c      	ite	hi
 8007f72:	2301      	movhi	r3, #1
 8007f74:	2300      	movls	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
    }
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	0800a5b0 	.word	0x0800a5b0

08007f88 <_ZN7RTClock4tickEv>:
    volatile uint8_t days{ 0 };
    volatile uint8_t hours{ 0 };
    volatile uint8_t minutes{ 0 };
    volatile uint8_t seconds{ 0 };

    void tick() noexcept {
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
        if (++seconds >= 60) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	799b      	ldrb	r3, [r3, #6]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	3301      	adds	r3, #1
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	7191      	strb	r1, [r2, #6]
 8007fa0:	2b3b      	cmp	r3, #59	; 0x3b
 8007fa2:	bf8c      	ite	hi
 8007fa4:	2301      	movhi	r3, #1
 8007fa6:	2300      	movls	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d026      	beq.n	8007ffc <_ZN7RTClock4tickEv+0x74>
            seconds = 0;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	719a      	strb	r2, [r3, #6]
            if (++minutes >= 60) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	795b      	ldrb	r3, [r3, #5]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	3301      	adds	r3, #1
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	7151      	strb	r1, [r2, #5]
 8007fc4:	2b3b      	cmp	r3, #59	; 0x3b
 8007fc6:	bf8c      	ite	hi
 8007fc8:	2301      	movhi	r3, #1
 8007fca:	2300      	movls	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d014      	beq.n	8007ffc <_ZN7RTClock4tickEv+0x74>
                minutes = 0;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	715a      	strb	r2, [r3, #5]
                if (++hours >= 24) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	791b      	ldrb	r3, [r3, #4]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	7111      	strb	r1, [r2, #4]
 8007fe8:	2b17      	cmp	r3, #23
 8007fea:	bf8c      	ite	hi
 8007fec:	2301      	movhi	r3, #1
 8007fee:	2300      	movls	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <_ZN7RTClock4tickEv+0x74>
                    hours = 0;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	711a      	strb	r2, [r3, #4]
                }
            }
        }
    }
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <_Z10get_uptimev>:
HAL_StatusTypeDef CANTxVoltage();
HAL_StatusTypeDef CANTxTemperature();
HAL_StatusTypeDef CANTxStatus();
HAL_StatusTypeDef CANTxPECError();
HAL_StatusTypeDef CANTxVolumeSize(uint32_t const size_of_log);
inline auto get_uptime() {
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
    return uwTick / 10;
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <_Z10get_uptimev+0x1c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a05      	ldr	r2, [pc, #20]	; (8008028 <_Z10get_uptimev+0x20>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	08db      	lsrs	r3, r3, #3
}
 8008018:	4618      	mov	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	2000025c 	.word	0x2000025c
 8008028:	cccccccd 	.word	0xcccccccd

0800802c <HAL_IncTick>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern "C" { void HAL_IncTick() {
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <HAL_IncTick+0x4c>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	4b11      	ldr	r3, [pc, #68]	; (800807c <HAL_IncTick+0x50>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4413      	add	r3, r2
 800803c:	4a0f      	ldr	r2, [pc, #60]	; (800807c <HAL_IncTick+0x50>)
 800803e:	6013      	str	r3, [r2, #0]

    if (nlg5 != nullptr && status.get_op_mode() & Charging)
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <HAL_IncTick+0x54>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <HAL_IncTick+0x30>
 8008048:	480e      	ldr	r0, [pc, #56]	; (8008084 <HAL_IncTick+0x58>)
 800804a:	f7ff ff4b 	bl	8007ee4 <_ZNK6Status11get_op_modeEv>
 800804e:	4603      	mov	r3, r0
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <HAL_IncTick+0x30>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <HAL_IncTick+0x32>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <HAL_IncTick+0x40>
        nlg5->tick();
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_IncTick+0x54>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff fe14 	bl	8007c94 <_ZN4NLG54tickEv>

    rtc.tick();
 800806c:	4806      	ldr	r0, [pc, #24]	; (8008088 <HAL_IncTick+0x5c>)
 800806e:	f7ff ff8b 	bl	8007f88 <_ZN7RTClock4tickEv>
}}
 8008072:	bf00      	nop
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000004 	.word	0x20000004
 800807c:	2000025c 	.word	0x2000025c
 8008080:	200001e4 	.word	0x200001e4
 8008084:	20000200 	.word	0x20000200
 8008088:	200000f4 	.word	0x200000f4

0800808c <_ZNKSt8optionalIN7LTC681113VoltageStatusEE9has_valueEv>:
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
      { return this->_M_is_engaged(); }

      constexpr bool has_value() const noexcept
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f805 	bl	80080a4 <_ZNKSt19_Optional_base_implIN7LTC681113VoltageStatusESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800809a:	4603      	mov	r3, r0
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNKSt19_Optional_base_implIN7LTC681113VoltageStatusESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7d1b      	ldrb	r3, [r3, #20]
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <_ZNKSt8optionalIN7LTC681110TempStatusEE9has_valueEv>:
      constexpr bool has_value() const noexcept
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f805 	bl	80080d4 <_ZNKSt19_Optional_base_implIN7LTC681110TempStatusESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 80080ca:	4603      	mov	r3, r0
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <_ZNKSt19_Optional_base_implIN7LTC681110TempStatusESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>:
      operator->() const
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f814 	bl	8008122 <_ZNKSt19_Optional_base_implIN7LTC681113VoltageStatusESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 80080fa:	4603      	mov	r3, r0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 f805 	bl	800810c <_ZSt11__addressofIKN7LTC681113VoltageStatusEEPT_RS3_>
 8008102:	4603      	mov	r3, r0
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <_ZSt11__addressofIKN7LTC681113VoltageStatusEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <_ZNKSt19_Optional_base_implIN7LTC681113VoltageStatusESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() const noexcept
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f805 	bl	800813c <_ZNKSt22_Optional_payload_baseIN7LTC681113VoltageStatusEE6_M_getEv>
 8008132:	4603      	mov	r3, r0
      }
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <_ZNKSt22_Optional_payload_baseIN7LTC681113VoltageStatusEE6_M_getEv>:
      _M_get() const noexcept
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>:
      operator->() const
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
      { return std::__addressof(this->_M_get()); }
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f814 	bl	8008188 <_ZNKSt19_Optional_base_implIN7LTC681110TempStatusESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 8008160:	4603      	mov	r3, r0
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f805 	bl	8008172 <_ZSt11__addressofIKN7LTC681110TempStatusEEPT_RS3_>
 8008168:	4603      	mov	r3, r0
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <_ZSt11__addressofIKN7LTC681110TempStatusEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <_ZNKSt19_Optional_base_implIN7LTC681110TempStatusESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() const noexcept
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f805 	bl	80081a2 <_ZNKSt22_Optional_payload_baseIN7LTC681110TempStatusEE6_M_getEv>
 8008198:	4603      	mov	r3, r0
      }
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <_ZNKSt22_Optional_payload_baseIN7LTC681110TempStatusEE6_M_getEv>:
      _M_get() const noexcept
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <main>:
/* USER CODE END 0 */

int main() {
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	ed2d 8b02 	vpush	{d8}
 80081be:	b0b0      	sub	sp, #192	; 0xc0
 80081c0:	af04      	add	r7, sp, #16
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80081c2:	f7f8 f99b 	bl	80004fc <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */
    /* Configure the system clock */
    SystemClock_Config();
 80081c6:	f000 fb85 	bl	80088d4 <_ZL18SystemClock_Configv>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80081ca:	f000 fda1 	bl	8008d10 <_ZL12MX_GPIO_Initv>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80081ce:	2201      	movs	r2, #1
 80081d0:	2140      	movs	r1, #64	; 0x40
 80081d2:	4877      	ldr	r0, [pc, #476]	; (80083b0 <main+0x1f8>)
 80081d4:	f7f9 fae6 	bl	80017a4 <HAL_GPIO_WritePin>
    //MX_FATFS_Init();
    MX_CAN1_Init();
 80081d8:	f000 fc18 	bl	8008a0c <_ZL12MX_CAN1_Initv>
    MX_CAN2_Init();
 80081dc:	f000 fc70 	bl	8008ac0 <_ZL12MX_CAN2_Initv>
    //MX_SDIO_SD_Init();
    MX_SPI1_Init();
 80081e0:	f000 fcca 	bl	8008b78 <_ZL12MX_SPI1_Initv>
    MX_TIM2_Init();
 80081e4:	f000 fd04 	bl	8008bf0 <_ZL12MX_TIM2_Initv>

    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80081e8:	210c      	movs	r1, #12
 80081ea:	4872      	ldr	r0, [pc, #456]	; (80083b4 <main+0x1fc>)
 80081ec:	f7fa fde2 	bl	8002db4 <HAL_TIM_PWM_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80081f0:	2113      	movs	r1, #19
 80081f2:	4871      	ldr	r0, [pc, #452]	; (80083b8 <main+0x200>)
 80081f4:	f7f8 fdcd 	bl	8000d92 <HAL_CAN_ActivateNotification>
    LTC6811::init(&hspi1);
 80081f8:	4870      	ldr	r0, [pc, #448]	; (80083bc <main+0x204>)
 80081fa:	f7fe fa6d 	bl	80066d8 <_ZN7LTC68114initEP19__SPI_HandleTypeDef>
    nlg5 = new NLG5(hcan1, TxHeader);
 80081fe:	201c      	movs	r0, #28
 8008200:	f001 fdee 	bl	8009de0 <_Znwj>
 8008204:	4603      	mov	r3, r0
 8008206:	461c      	mov	r4, r3
 8008208:	f640 33ae 	movw	r3, #2990	; 0xbae
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	233c      	movs	r3, #60	; 0x3c
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	23a0      	movs	r3, #160	; 0xa0
 8008214:	4a6a      	ldr	r2, [pc, #424]	; (80083c0 <main+0x208>)
 8008216:	4968      	ldr	r1, [pc, #416]	; (80083b8 <main+0x200>)
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff fcf3 	bl	8007c04 <_ZN4NLG5C1ER19__CAN_HandleTypeDefR19CAN_TxHeaderTypeDefttt>
 800821e:	4b69      	ldr	r3, [pc, #420]	; (80083c4 <main+0x20c>)
 8008220:	601c      	str	r4, [r3, #0]
    pwm_fan = new PWM_Fan;
 8008222:	2001      	movs	r0, #1
 8008224:	f001 fddc 	bl	8009de0 <_Znwj>
 8008228:	4603      	mov	r3, r0
 800822a:	461c      	mov	r4, r3
 800822c:	210a      	movs	r1, #10
 800822e:	4620      	mov	r0, r4
 8008230:	f7ff fdb2 	bl	8007d98 <_ZN7PWM_FanC1Eh>
 8008234:	4b64      	ldr	r3, [pc, #400]	; (80083c8 <main+0x210>)
 8008236:	601c      	str	r4, [r3, #0]

#if BYPASS_INITIAL_CHECK
    status.set_AIR_state(GPIO_PIN_SET);
 8008238:	2101      	movs	r1, #1
 800823a:	4864      	ldr	r0, [pc, #400]	; (80083cc <main+0x214>)
 800823c:	f7ff fc2a 	bl	8007a94 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
    HAL_Delay(5000);
 8008240:	f241 3088 	movw	r0, #5000	; 0x1388
 8008244:	f7f8 f9b8 	bl	80005b8 <HAL_Delay>
    status.set_precharge_state(GPIO_PIN_SET);
 8008248:	2101      	movs	r1, #1
 800824a:	4860      	ldr	r0, [pc, #384]	; (80083cc <main+0x214>)
 800824c:	f7ff fbf8 	bl	8007a40 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
    /* USER CODE BEGIN WHILE */
    while (true) {
        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */

        HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 8008250:	2101      	movs	r1, #1
 8008252:	485f      	ldr	r0, [pc, #380]	; (80083d0 <main+0x218>)
 8008254:	f7f9 fabf 	bl	80017d6 <HAL_GPIO_TogglePin>
        auto const op_mode = status.get_op_mode();
 8008258:	485c      	ldr	r0, [pc, #368]	; (80083cc <main+0x214>)
 800825a:	f7ff fe43 	bl	8007ee4 <_ZNK6Status11get_op_modeEv>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        /*  Core routine for monitoring voltage and temperature of the cells.  */
        if (op_mode & Core) {
 8008264:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 81da 	beq.w	8008626 <main+0x46e>
            auto const voltage_status = LTC6811::read_cell_data(cell_data);
 8008272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008276:	4957      	ldr	r1, [pc, #348]	; (80083d4 <main+0x21c>)
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fc63 	bl	8006b44 <_ZN7LTC681114read_cell_dataERSt5arrayIS0_INS_8RegisterItEELj1EELj4EE>
            auto const temp_status = LTC6811::read_temp_data(temp_data);
 800827e:	f107 031c 	add.w	r3, r7, #28
 8008282:	4955      	ldr	r1, [pc, #340]	; (80083d8 <main+0x220>)
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fd6f 	bl	8006d68 <_ZN7LTC681114read_temp_dataERSt5arrayIS0_INS_8RegisterIsEELj1EELj2EE>
            // The boolean logic here is confusing, I know, but it's correct. The error handling needs a full rewrite.
            if (!status.is_error(PECError, !voltage_status.has_value()) &&
 800828a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fefc 	bl	800808c <_ZNKSt8optionalIN7LTC681113VoltageStatusEE9has_valueEv>
 8008294:	4603      	mov	r3, r0
 8008296:	f083 0301 	eor.w	r3, r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	2109      	movs	r1, #9
 80082a0:	484a      	ldr	r0, [pc, #296]	; (80083cc <main+0x214>)
 80082a2:	f7ff fc21 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f083 0301 	eor.w	r3, r3, #1
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d015      	beq.n	80082de <main+0x126>
                    !status.is_error(PECError, !temp_status.has_value())) { // If no PEC errors and we have both statuses
 80082b2:	f107 031c 	add.w	r3, r7, #28
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff ff00 	bl	80080bc <_ZNKSt8optionalIN7LTC681110TempStatusEE9has_valueEv>
 80082bc:	4603      	mov	r3, r0
 80082be:	f083 0301 	eor.w	r3, r3, #1
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	2109      	movs	r1, #9
 80082c8:	4840      	ldr	r0, [pc, #256]	; (80083cc <main+0x214>)
 80082ca:	f7ff fc0d 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f083 0301 	eor.w	r3, r3, #1
 80082d4:	b2db      	uxtb	r3, r3
            if (!status.is_error(PECError, !voltage_status.has_value()) &&
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <main+0x126>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <main+0x128>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 819c 	beq.w	800861e <main+0x466>
                status.is_error(Limping, voltage_status->min < kLimpMinVoltage);
 80082e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff fefe 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 80082f0:	4603      	mov	r3, r0
 80082f2:	889b      	ldrh	r3, [r3, #4]
 80082f4:	f248 42cf 	movw	r2, #33999	; 0x84cf
 80082f8:	4293      	cmp	r3, r2
 80082fa:	bf94      	ite	ls
 80082fc:	2301      	movls	r3, #1
 80082fe:	2300      	movhi	r3, #0
 8008300:	b2db      	uxtb	r3, r3
 8008302:	461a      	mov	r2, r3
 8008304:	2103      	movs	r1, #3
 8008306:	4831      	ldr	r0, [pc, #196]	; (80083cc <main+0x214>)
 8008308:	f7ff fbee 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
                nlg5->setChargeCurrent(voltage_status->max);
 800830c:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <main+0x20c>)
 800830e:	681c      	ldr	r4, [r3, #0]
 8008310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff fee9 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800831a:	4603      	mov	r3, r0
 800831c:	899b      	ldrh	r3, [r3, #12]
 800831e:	4619      	mov	r1, r3
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff fc99 	bl	8007c58 <_ZN4NLG516setChargeCurrentEt>

                if (op_mode & Balance)
 8008326:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00c      	beq.n	800834c <main+0x194>
                    LTC6811::update_config_register_group(cell_data, *voltage_status, discharge_mode);
 8008332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fa45 	bl	80097c6 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEEdeEv>
 800833c:	4601      	mov	r1, r0
 800833e:	4b27      	ldr	r3, [pc, #156]	; (80083dc <main+0x224>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	4823      	ldr	r0, [pc, #140]	; (80083d4 <main+0x21c>)
 8008348:	f7fe fa2c 	bl	80067a4 <_ZN7LTC681128update_config_register_groupERKSt5arrayIS0_INS_8RegisterItEELj1EELj4EERKNS_13VoltageStatusENS_13DischargeModeE>

                if (pwm_fan->getMode() == PWM_Fan::Automatic)
 800834c:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <main+0x210>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fdba 	bl	8007eca <_ZNK7PWM_Fan7getModeEv>
 8008356:	4603      	mov	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	bf0c      	ite	eq
 800835c:	2301      	moveq	r3, #1
 800835e:	2300      	movne	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00d      	beq.n	8008382 <main+0x1ca>
                    pwm_fan->calcDutyCycle(temp_status->max);
 8008366:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <main+0x210>)
 8008368:	681c      	ldr	r4, [r3, #0]
 800836a:	f107 031c 	add.w	r3, r7, #28
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff feef 	bl	8008152 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 8008374:	4603      	mov	r3, r0
 8008376:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800837a:	4619      	mov	r1, r3
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff fd59 	bl	8007e34 <_ZN7PWM_Fan13calcDutyCycleEs>

#if CHECK_IVT
                switch (ivt.compare_precharge(voltage_status->sum)) {
 8008382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff feb0 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 800838c:	4603      	mov	r3, r0
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4619      	mov	r1, r3
 8008392:	4813      	ldr	r0, [pc, #76]	; (80083e0 <main+0x228>)
 8008394:	f7fd ff36 	bl	8006204 <_ZN3IVT17compare_prechargeEm>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <main+0x1ec>
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d020      	beq.n	80083e4 <main+0x22c>

                case ivt.Hysteresis:
                case ivt.Lost:
                default:
                    // Do nothing.
                    break;
 80083a2:	e024      	b.n	80083ee <main+0x236>
                    status.set_precharge_state(GPIO_PIN_SET);
 80083a4:	2101      	movs	r1, #1
 80083a6:	4809      	ldr	r0, [pc, #36]	; (80083cc <main+0x214>)
 80083a8:	f7ff fb4a 	bl	8007a40 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
                    break;
 80083ac:	e01f      	b.n	80083ee <main+0x236>
 80083ae:	bf00      	nop
 80083b0:	40020400 	.word	0x40020400
 80083b4:	200001a4 	.word	0x200001a4
 80083b8:	200000fc 	.word	0x200000fc
 80083bc:	2000014c 	.word	0x2000014c
 80083c0:	20000008 	.word	0x20000008
 80083c4:	200001e4 	.word	0x200001e4
 80083c8:	200001e8 	.word	0x200001e8
 80083cc:	20000200 	.word	0x20000200
 80083d0:	40020800 	.word	0x40020800
 80083d4:	20000210 	.word	0x20000210
 80083d8:	20000230 	.word	0x20000230
 80083dc:	20000240 	.word	0x20000240
 80083e0:	200001ec 	.word	0x200001ec
                    status.set_precharge_state(GPIO_PIN_RESET);
 80083e4:	2100      	movs	r1, #0
 80083e6:	48a3      	ldr	r0, [pc, #652]	; (8008674 <main+0x4bc>)
 80083e8:	f7ff fb2a 	bl	8007a40 <_ZNK6Status19set_precharge_stateE13GPIO_PinState>
                    break;
 80083ec:	bf00      	nop
#endif

                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all status.is_error() calls to happen, so do not replace & with &&.
#if CHECK_IVT
#if IVT_TIMEOUT
                        !status.is_error(IVTLost, ivt.is_lost()) &
 80083ee:	48a2      	ldr	r0, [pc, #648]	; (8008678 <main+0x4c0>)
 80083f0:	f7fe f80e 	bl	8006410 <_ZN3IVT7is_lostEv>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	210b      	movs	r1, #11
 80083fa:	489e      	ldr	r0, [pc, #632]	; (8008674 <main+0x4bc>)
 80083fc:	f7ff fb74 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 8008400:	4603      	mov	r3, r0
 8008402:	f083 0301 	eor.w	r3, r3, #1
 8008406:	b2db      	uxtb	r3, r3
 8008408:	461c      	mov	r4, r3
#endif
#if TEST_OVERPOWER
                        !status.is_error(OverPower, voltage_status->sum * ivt.get_current() > kMaxPower) &
 800840a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fe6c 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 8008414:	4603      	mov	r3, r0
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8008420:	4895      	ldr	r0, [pc, #596]	; (8008678 <main+0x4c0>)
 8008422:	f7fd ff99 	bl	8006358 <_ZN3IVT11get_currentEv>
 8008426:	eef0 7a40 	vmov.f32	s15, s0
 800842a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800842e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800867c <main+0x4c4>
 8008432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843a:	bfcc      	ite	gt
 800843c:	2301      	movgt	r3, #1
 800843e:	2300      	movle	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	461a      	mov	r2, r3
 8008444:	2107      	movs	r1, #7
 8008446:	488b      	ldr	r0, [pc, #556]	; (8008674 <main+0x4bc>)
 8008448:	f7ff fb4e 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 800844c:	4603      	mov	r3, r0
 800844e:	f083 0301 	eor.w	r3, r3, #1
 8008452:	b2db      	uxtb	r3, r3
                        !status.is_error(IVTLost, ivt.is_lost()) &
 8008454:	401c      	ands	r4, r3
#endif
#if TEST_OVERCURRENT
                        !status.is_error(OverCurrent, ivt.get_current() > kMaxCurrent) &
 8008456:	4888      	ldr	r0, [pc, #544]	; (8008678 <main+0x4c0>)
 8008458:	f7fd ff7e 	bl	8006358 <_ZN3IVT11get_currentEv>
 800845c:	eef0 7a40 	vmov.f32	s15, s0
 8008460:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8008680 <main+0x4c8>
 8008464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	bfcc      	ite	gt
 800846e:	2301      	movgt	r3, #1
 8008470:	2300      	movle	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	2106      	movs	r1, #6
 8008478:	487e      	ldr	r0, [pc, #504]	; (8008674 <main+0x4bc>)
 800847a:	f7ff fb35 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 800847e:	4603      	mov	r3, r0
 8008480:	f083 0301 	eor.w	r3, r3, #1
 8008484:	b2db      	uxtb	r3, r3
                        !status.is_error(OverPower, voltage_status->sum * ivt.get_current() > kMaxPower) &
 8008486:	401c      	ands	r4, r3
#endif
#if TEST_ACCU_UNDERVOLTAGE
                        !status.is_error(AccuUnderVoltage, ivt.get_voltage2() < kAccuMinVoltage) &
 8008488:	487b      	ldr	r0, [pc, #492]	; (8008678 <main+0x4c0>)
 800848a:	f7fd ffb1 	bl	80063f0 <_ZN3IVT12get_voltage2Ev>
 800848e:	eef0 7a40 	vmov.f32	s15, s0
 8008492:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8008684 <main+0x4cc>
 8008496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849e:	bf4c      	ite	mi
 80084a0:	2301      	movmi	r3, #1
 80084a2:	2300      	movpl	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	210a      	movs	r1, #10
 80084aa:	4872      	ldr	r0, [pc, #456]	; (8008674 <main+0x4bc>)
 80084ac:	f7ff fb1c 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f083 0301 	eor.w	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
                        !status.is_error(OverCurrent, ivt.get_current() > kMaxCurrent) &
 80084b8:	401c      	ands	r4, r3
#endif
#endif
#if TEST_UNDERVOLTAGE
                        !status.is_error(UnderVoltage, voltage_status->min < kMinVoltage) &
 80084ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff fe14 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 80084c4:	4603      	mov	r3, r0
 80084c6:	889b      	ldrh	r3, [r3, #4]
 80084c8:	f647 1217 	movw	r2, #30999	; 0x7917
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bf94      	ite	ls
 80084d0:	2301      	movls	r3, #1
 80084d2:	2300      	movhi	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	461a      	mov	r2, r3
 80084d8:	2102      	movs	r1, #2
 80084da:	4866      	ldr	r0, [pc, #408]	; (8008674 <main+0x4bc>)
 80084dc:	f7ff fb04 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f083 0301 	eor.w	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
                        !status.is_error(AccuUnderVoltage, ivt.get_voltage2() < kAccuMinVoltage) &
 80084e8:	401c      	ands	r4, r3
#endif
#if TEST_OVERVOLTAGE
                        !status.is_error(OverVoltage, voltage_status->max > kMaxVoltage) &
 80084ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff fdfc 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	899b      	ldrh	r3, [r3, #12]
 80084f8:	f24a 4210 	movw	r2, #42000	; 0xa410
 80084fc:	4293      	cmp	r3, r2
 80084fe:	bf8c      	ite	hi
 8008500:	2301      	movhi	r3, #1
 8008502:	2300      	movls	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	2101      	movs	r1, #1
 800850a:	485a      	ldr	r0, [pc, #360]	; (8008674 <main+0x4bc>)
 800850c:	f7ff faec 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 8008510:	4603      	mov	r3, r0
 8008512:	f083 0301 	eor.w	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
                        !status.is_error(UnderVoltage, voltage_status->min < kMinVoltage) &
 8008518:	401c      	ands	r4, r3
#endif
#if TEST_UNDERTEMPERATURE
                        !status.is_error(UnderTemp, temp_status->min < kMinTemp) &
 800851a:	f107 031c 	add.w	r3, r7, #28
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fe17 	bl	8008152 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 8008524:	4603      	mov	r3, r0
 8008526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800852a:	4a57      	ldr	r2, [pc, #348]	; (8008688 <main+0x4d0>)
 800852c:	4293      	cmp	r3, r2
 800852e:	bfb4      	ite	lt
 8008530:	2301      	movlt	r3, #1
 8008532:	2300      	movge	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	2105      	movs	r1, #5
 800853a:	484e      	ldr	r0, [pc, #312]	; (8008674 <main+0x4bc>)
 800853c:	f7ff fad4 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 8008540:	4603      	mov	r3, r0
 8008542:	f083 0301 	eor.w	r3, r3, #1
 8008546:	b2db      	uxtb	r3, r3
                        !status.is_error(OverVoltage, voltage_status->max > kMaxVoltage) &
 8008548:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE
                        !status.is_error(OverTemp, temp_status->max > kMaxTemp) &
 800854a:	f107 031c 	add.w	r3, r7, #28
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fdff 	bl	8008152 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 8008554:	4603      	mov	r3, r0
 8008556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800855a:	f241 720c 	movw	r2, #5900	; 0x170c
 800855e:	4293      	cmp	r3, r2
 8008560:	bfcc      	ite	gt
 8008562:	2301      	movgt	r3, #1
 8008564:	2300      	movle	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	2104      	movs	r1, #4
 800856c:	4841      	ldr	r0, [pc, #260]	; (8008674 <main+0x4bc>)
 800856e:	f7ff fabb 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 8008572:	4603      	mov	r3, r0
 8008574:	f083 0301 	eor.w	r3, r3, #1
 8008578:	b2db      	uxtb	r3, r3
                        !status.is_error(UnderTemp, temp_status->min < kMinTemp) &
 800857a:	401c      	ands	r4, r3
#endif
#if TEST_OVERTEMPERATURE_CHARGING
                        !status.is_error(OverTempCharging, (op_mode & Charging) && (temp_status->max > kMaxChargeTemp)) &
 800857c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <main+0x3ec>
 8008588:	f107 031c 	add.w	r3, r7, #28
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fde0 	bl	8008152 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 8008592:	4603      	mov	r3, r0
 8008594:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008598:	f241 1230 	movw	r2, #4400	; 0x1130
 800859c:	4293      	cmp	r3, r2
 800859e:	dd01      	ble.n	80085a4 <main+0x3ec>
 80085a0:	2301      	movs	r3, #1
 80085a2:	e000      	b.n	80085a6 <main+0x3ee>
 80085a4:	2300      	movs	r3, #0
 80085a6:	461a      	mov	r2, r3
 80085a8:	210c      	movs	r1, #12
 80085aa:	4832      	ldr	r0, [pc, #200]	; (8008674 <main+0x4bc>)
 80085ac:	f7ff fa9c 	bl	8007ae8 <_ZN6Status8is_errorE5Errorb>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f083 0301 	eor.w	r3, r3, #1
 80085b6:	b2db      	uxtb	r3, r3
                        !status.is_error(OverTemp, temp_status->max > kMaxTemp) &
 80085b8:	4023      	ands	r3, r4
                        !status.is_error(OverTempCharging, (op_mode & Charging) && (temp_status->max > kMaxChargeTemp)) &
 80085ba:	f003 0301 	and.w	r3, r3, #1
#endif
                        true
                ) {
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bf14      	ite	ne
 80085c2:	2301      	movne	r3, #1
 80085c4:	2300      	moveq	r3, #0
 80085c6:	b2db      	uxtb	r3, r3
                if ( // NOTE: Bitwise & will not short circuit like Logical &&. We want all status.is_error() calls to happen, so do not replace & with &&.
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <main+0x41c>
                    // If no errors occurred, including PEC errors, since that's the condition of entering this scope.
                    status.set_AIR_state(GPIO_PIN_SET);
 80085cc:	2101      	movs	r1, #1
 80085ce:	4829      	ldr	r0, [pc, #164]	; (8008674 <main+0x4bc>)
 80085d0:	f7ff fa60 	bl	8007a94 <_ZNK6Status13set_AIR_stateE13GPIO_PinState>
#if !CHECK_IVT
                    status.set_precharge_state(GPIO_PIN_SET);
#endif
                }
#if CAN_ENABLED
                CANTxData(voltage_status->min, voltage_status->max, temp_status->max);
 80085d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fd87 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	889c      	ldrh	r4, [r3, #4]
 80085e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fd80 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 80085ec:	4603      	mov	r3, r0
 80085ee:	899d      	ldrh	r5, [r3, #12]
 80085f0:	f107 031c 	add.w	r3, r7, #28
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff fdac 	bl	8008152 <_ZNKSt8optionalIN7LTC681110TempStatusEEptEv>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008600:	461a      	mov	r2, r3
 8008602:	4629      	mov	r1, r5
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fe01 	bl	800920c <_Z9CANTxDatatts>
                CANTxVoltageLimpTotal(voltage_status->sum);
 800860a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fd6c 	bl	80080ec <_ZNKSt8optionalIN7LTC681113VoltageStatusEEptEv>
 8008614:	4603      	mov	r3, r0
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 ff67 	bl	80094ec <_Z21CANTxVoltageLimpTotalm>
#endif
            }
#if CAN_ENABLED
            CANTxStatus();
 800861e:	f000 fd69 	bl	80090f4 <_Z11CANTxStatusv>
            CANTxPECError();
 8008622:	f000 fda9 	bl	8009178 <_Z13CANTxPECErrorv>
        }

#if CAN_DEBUG
        /*  Functions for debugging and untested code.  */
        if (op_mode & Debug) {
 8008626:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <main+0x486>
            CANTxVoltage();
 8008632:	f000 fe35 	bl	80092a0 <_Z12CANTxVoltagev>
            CANTxTemperature();
 8008636:	f000 fecd 	bl	80093d4 <_Z16CANTxTemperaturev>
            CANTxDCCfg();
 800863a:	f000 ffa9 	bl	8009590 <_Z10CANTxDCCfgv>
        }
#endif
#endif
        /*  Log data to SD card.  */
        if (op_mode & Logging) {
 800863e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b00      	cmp	r3, #0
 8008648:	f43f ae02 	beq.w	8008250 <main+0x98>
            if (retSD == FR_OK) {
 800864c:	4b0f      	ldr	r3, [pc, #60]	; (800868c <main+0x4d4>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f adfd 	bne.w	8008250 <main+0x98>
                if (f_size(&SDFile) < 524288000 && f_open(&SDFile, kFile, FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
 8008656:	4b0e      	ldr	r3, [pc, #56]	; (8008690 <main+0x4d8>)
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f1b3 5ffa 	cmp.w	r3, #524288000	; 0x1f400000
 800865e:	d21b      	bcs.n	8008698 <main+0x4e0>
 8008660:	2232      	movs	r2, #50	; 0x32
 8008662:	490c      	ldr	r1, [pc, #48]	; (8008694 <main+0x4dc>)
 8008664:	480a      	ldr	r0, [pc, #40]	; (8008690 <main+0x4d8>)
 8008666:	f7fc feb0 	bl	80053ca <f_open>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d113      	bne.n	8008698 <main+0x4e0>
 8008670:	2301      	movs	r3, #1
 8008672:	e012      	b.n	800869a <main+0x4e2>
 8008674:	20000200 	.word	0x20000200
 8008678:	200001ec 	.word	0x200001ec
 800867c:	4af42400 	.word	0x4af42400
 8008680:	43340000 	.word	0x43340000
 8008684:	43f50000 	.word	0x43f50000
 8008688:	fffffa24 	.word	0xfffffa24
 800868c:	20000260 	.word	0x20000260
 8008690:	20000268 	.word	0x20000268
 8008694:	0800a2d8 	.word	0x0800a2d8
 8008698:	2300      	movs	r3, #0
 800869a:	2b00      	cmp	r3, #0
 800869c:	f43f add8 	beq.w	8008250 <main+0x98>
                    HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 80086a0:	2104      	movs	r1, #4
 80086a2:	4883      	ldr	r0, [pc, #524]	; (80088b0 <main+0x6f8>)
 80086a4:	f7f9 f897 	bl	80017d6 <HAL_GPIO_TogglePin>

                    /* NOTE: f_printf might be pretty slow compared to f_write. */
                    f_printf(&SDFile, "%u,", get_uptime());
 80086a8:	f7ff fcae 	bl	8008008 <_Z10get_uptimev>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	4980      	ldr	r1, [pc, #512]	; (80088b4 <main+0x6fc>)
 80086b2:	4881      	ldr	r0, [pc, #516]	; (80088b8 <main+0x700>)
 80086b4:	f7fd fb86 	bl	8005dc4 <f_printf>
                    /* ISO 8601 Notation (yyyy-mm-ddThh:mm:ss) */
                    // TODO Not implemented.
                    f_printf(&SDFile, "%04u-%02u-%02uT%02u:%02u:%02u\n", rtc.year, rtc.month, rtc.days, rtc.hours, rtc.minutes, rtc.seconds);
 80086b8:	4b80      	ldr	r3, [pc, #512]	; (80088bc <main+0x704>)
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	461c      	mov	r4, r3
 80086c0:	4b7e      	ldr	r3, [pc, #504]	; (80088bc <main+0x704>)
 80086c2:	789b      	ldrb	r3, [r3, #2]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	461d      	mov	r5, r3
 80086c8:	4b7c      	ldr	r3, [pc, #496]	; (80088bc <main+0x704>)
 80086ca:	78db      	ldrb	r3, [r3, #3]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b7a      	ldr	r3, [pc, #488]	; (80088bc <main+0x704>)
 80086d2:	791b      	ldrb	r3, [r3, #4]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	4619      	mov	r1, r3
 80086d8:	4b78      	ldr	r3, [pc, #480]	; (80088bc <main+0x704>)
 80086da:	795b      	ldrb	r3, [r3, #5]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	4618      	mov	r0, r3
 80086e0:	4b76      	ldr	r3, [pc, #472]	; (80088bc <main+0x704>)
 80086e2:	799b      	ldrb	r3, [r3, #6]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	9303      	str	r3, [sp, #12]
 80086e8:	9002      	str	r0, [sp, #8]
 80086ea:	9101      	str	r1, [sp, #4]
 80086ec:	9200      	str	r2, [sp, #0]
 80086ee:	462b      	mov	r3, r5
 80086f0:	4622      	mov	r2, r4
 80086f2:	4973      	ldr	r1, [pc, #460]	; (80088c0 <main+0x708>)
 80086f4:	4870      	ldr	r0, [pc, #448]	; (80088b8 <main+0x700>)
 80086f6:	f7fd fb65 	bl	8005dc4 <f_printf>

                    UINT number_written{ 0 };
 80086fa:	2300      	movs	r3, #0
 80086fc:	61bb      	str	r3, [r7, #24]
                    uint16_t buffer[4 * LTC6811::kDaisyChainLength * 3]{ 0 };
 80086fe:	463b      	mov	r3, r7
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	609a      	str	r2, [r3, #8]
 8008708:	60da      	str	r2, [r3, #12]
 800870a:	611a      	str	r2, [r3, #16]
 800870c:	615a      	str	r2, [r3, #20]
                    size_t position{ 0 };
 800870e:	2300      	movs	r3, #0
 8008710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    for (auto const& register_group : cell_data) // 4 voltage register groups
 8008714:	4b6b      	ldr	r3, [pc, #428]	; (80088c4 <main+0x70c>)
 8008716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800871a:	4b6a      	ldr	r3, [pc, #424]	; (80088c4 <main+0x70c>)
 800871c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008720:	4b69      	ldr	r3, [pc, #420]	; (80088c8 <main+0x710>)
 8008722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800872a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800872e:	429a      	cmp	r2, r3
 8008730:	d04f      	beq.n	80087d2 <main+0x61a>
 8008732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800873a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800873e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008742:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008746:	f7fe fe33 	bl	80073b0 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE5beginEv>
 800874a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800874e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008752:	f7fe fe39 	bl	80073c8 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EE3endEv>
 8008756:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008758:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800875c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800875e:	429a      	cmp	r2, r3
 8008760:	d031      	beq.n	80087c6 <main+0x60e>
 8008762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008766:	67bb      	str	r3, [r7, #120]	; 0x78
                            for (auto const voltage : IC.data) // 3 voltages in IC.data
 8008768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800876a:	677b      	str	r3, [r7, #116]	; 0x74
 800876c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800876e:	f7fd ffff 	bl	8006770 <_ZNKSt5arrayItLj3EE5beginEv>
 8008772:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8008776:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008778:	f7fe f806 	bl	8006788 <_ZNKSt5arrayItLj3EE3endEv>
 800877c:	6738      	str	r0, [r7, #112]	; 0x70
 800877e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008784:	429a      	cmp	r2, r3
 8008786:	d018      	beq.n	80087ba <main+0x602>
 8008788:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                                buffer[position++] = voltage;
 8008792:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 8008796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80087a6:	4413      	add	r3, r2
 80087a8:	460a      	mov	r2, r1
 80087aa:	f823 2cb0 	strh.w	r2, [r3, #-176]
                            for (auto const voltage : IC.data) // 3 voltages in IC.data
 80087ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087b2:	3302      	adds	r3, #2
 80087b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087b8:	e7e1      	b.n	800877e <main+0x5c6>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 80087ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087be:	3308      	adds	r3, #8
 80087c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087c4:	e7c8      	b.n	8008758 <main+0x5a0>
                    for (auto const& register_group : cell_data) // 4 voltage register groups
 80087c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ca:	3308      	adds	r3, #8
 80087cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087d0:	e7a9      	b.n	8008726 <main+0x56e>
                    f_write(&SDFile, buffer, sizeof(buffer), &number_written);
 80087d2:	f107 0318 	add.w	r3, r7, #24
 80087d6:	4639      	mov	r1, r7
 80087d8:	2218      	movs	r2, #24
 80087da:	4837      	ldr	r0, [pc, #220]	; (80088b8 <main+0x700>)
 80087dc:	f7fc ffb3 	bl	8005746 <f_write>

                    position = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    for (auto const& register_group : temp_data) // 2 temperature register groups
 80087e6:	4b39      	ldr	r3, [pc, #228]	; (80088cc <main+0x714>)
 80087e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ea:	4b38      	ldr	r3, [pc, #224]	; (80088cc <main+0x714>)
 80087ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087f0:	4b37      	ldr	r3, [pc, #220]	; (80088d0 <main+0x718>)
 80087f2:	667b      	str	r3, [r7, #100]	; 0x64
 80087f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80087f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d04a      	beq.n	8008894 <main+0x6dc>
 80087fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008802:	663b      	str	r3, [r7, #96]	; 0x60
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 8008804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008808:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800880a:	f000 ffe8 	bl	80097de <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>
 800880e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8008812:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008814:	f000 ffef 	bl	80097f6 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>
 8008818:	65b8      	str	r0, [r7, #88]	; 0x58
 800881a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800881e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008820:	429a      	cmp	r2, r3
 8008822:	d031      	beq.n	8008888 <main+0x6d0>
 8008824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008828:	657b      	str	r3, [r7, #84]	; 0x54
                            for (auto const temperature : IC.data) // 3 temperatures in IC.data
 800882a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800882c:	653b      	str	r3, [r7, #80]	; 0x50
 800882e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008830:	f000 fdb6 	bl	80093a0 <_ZNKSt5arrayIsLj3EE5beginEv>
 8008834:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8008838:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800883a:	f000 fdbd 	bl	80093b8 <_ZNKSt5arrayIsLj3EE3endEv>
 800883e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008840:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008846:	429a      	cmp	r2, r3
 8008848:	d018      	beq.n	800887c <main+0x6c4>
 800884a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                                buffer[position++] = temperature;
 8008854:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8008858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008868:	4413      	add	r3, r2
 800886a:	460a      	mov	r2, r1
 800886c:	f823 2cb0 	strh.w	r2, [r3, #-176]
                            for (auto const temperature : IC.data) // 3 temperatures in IC.data
 8008870:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008874:	3302      	adds	r3, #2
 8008876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800887a:	e7e1      	b.n	8008840 <main+0x688>
                        for (auto const& IC : register_group) // N ICs in daisy chain, determined by kDaisyChainLength
 800887c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008880:	3308      	adds	r3, #8
 8008882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008886:	e7c8      	b.n	800881a <main+0x662>
                    for (auto const& register_group : temp_data) // 2 temperature register groups
 8008888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800888c:	3308      	adds	r3, #8
 800888e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008892:	e7af      	b.n	80087f4 <main+0x63c>
                    f_write(&SDFile, buffer, sizeof(buffer) / 2, &number_written);
 8008894:	f107 0318 	add.w	r3, r7, #24
 8008898:	4639      	mov	r1, r7
 800889a:	220c      	movs	r2, #12
 800889c:	4806      	ldr	r0, [pc, #24]	; (80088b8 <main+0x700>)
 800889e:	f7fc ff52 	bl	8005746 <f_write>

                    f_sync(&SDFile);
 80088a2:	4805      	ldr	r0, [pc, #20]	; (80088b8 <main+0x700>)
 80088a4:	f7fd f8c4 	bl	8005a30 <f_sync>
                    f_close(&SDFile);
 80088a8:	4803      	ldr	r0, [pc, #12]	; (80088b8 <main+0x700>)
 80088aa:	f7fd f93f 	bl	8005b2c <f_close>
                }
            }
        }
    }
 80088ae:	e4cf      	b.n	8008250 <main+0x98>
 80088b0:	40020800 	.word	0x40020800
 80088b4:	0800a2e8 	.word	0x0800a2e8
 80088b8:	20000268 	.word	0x20000268
 80088bc:	200000f4 	.word	0x200000f4
 80088c0:	0800a2ec 	.word	0x0800a2ec
 80088c4:	20000210 	.word	0x20000210
 80088c8:	20000230 	.word	0x20000230
 80088cc:	20000230 	.word	0x20000230
 80088d0:	20000240 	.word	0x20000240

080088d4 <_ZL18SystemClock_Configv>:
}
/* USER CODE END 3 */

static void SystemClock_Config() {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0ac      	sub	sp, #176	; 0xb0
 80088d8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80088da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80088de:	2234      	movs	r2, #52	; 0x34
 80088e0:	2100      	movs	r1, #0
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 fbfc 	bl	800a0e0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80088e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	605a      	str	r2, [r3, #4]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	60da      	str	r2, [r3, #12]
 80088f6:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088f8:	f107 030c 	add.w	r3, r7, #12
 80088fc:	225c      	movs	r2, #92	; 0x5c
 80088fe:	2100      	movs	r1, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f001 fbed 	bl	800a0e0 <memset>

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 8008906:	2300      	movs	r3, #0
 8008908:	60bb      	str	r3, [r7, #8]
 800890a:	4b3e      	ldr	r3, [pc, #248]	; (8008a04 <_ZL18SystemClock_Configv+0x130>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	4a3d      	ldr	r2, [pc, #244]	; (8008a04 <_ZL18SystemClock_Configv+0x130>)
 8008910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008914:	6413      	str	r3, [r2, #64]	; 0x40
 8008916:	4b3b      	ldr	r3, [pc, #236]	; (8008a04 <_ZL18SystemClock_Configv+0x130>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800891e:	60bb      	str	r3, [r7, #8]
 8008920:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008922:	2300      	movs	r3, #0
 8008924:	607b      	str	r3, [r7, #4]
 8008926:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <_ZL18SystemClock_Configv+0x134>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800892e:	4a36      	ldr	r2, [pc, #216]	; (8008a08 <_ZL18SystemClock_Configv+0x134>)
 8008930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	4b34      	ldr	r3, [pc, #208]	; (8008a08 <_ZL18SystemClock_Configv+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	687b      	ldr	r3, [r7, #4]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008942:	2302      	movs	r3, #2
 8008944:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008946:	2301      	movs	r3, #1
 8008948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800894c:	2310      	movs	r3, #16
 800894e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008952:	2302      	movs	r3, #2
 8008954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008958:	2300      	movs	r3, #0
 800895a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 8;
 800895e:	2308      	movs	r3, #8
 8008960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 50;
 8008964:	2332      	movs	r3, #50	; 0x32
 8008966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800896a:	2302      	movs	r3, #2
 800896c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8008970:	2303      	movs	r3, #3
 8008972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = 2;
 8008976:	2302      	movs	r3, #2
 8008978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800897c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008980:	4618      	mov	r0, r3
 8008982:	f7f9 fcaf 	bl	80022e4 <HAL_RCC_OscConfig>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <_ZL18SystemClock_Configv+0xc6>
        Error_Handler();
 8008996:	f000 fe8f 	bl	80096b8 <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800899a:	230f      	movs	r3, #15
 800899c:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800899e:	2300      	movs	r3, #0
 80089a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80089a2:	2300      	movs	r3, #0
 80089a4:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80089a6:	2300      	movs	r3, #0
 80089a8:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80089aa:	2300      	movs	r3, #0
 80089ac:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80089ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80089b2:	2100      	movs	r1, #0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7f8 ff29 	bl	800180c <HAL_RCC_ClockConfig>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <_ZL18SystemClock_Configv+0xfa>
        Error_Handler();
 80089ca:	f000 fe75 	bl	80096b8 <Error_Handler>

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80089ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80089d4:	2300      	movs	r3, #0
 80089d6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80089d8:	2300      	movs	r3, #0
 80089da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80089dc:	f107 030c 	add.w	r3, r7, #12
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f8 fff9 	bl	80019d8 <HAL_RCCEx_PeriphCLKConfig>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2301      	movne	r3, #1
 80089ee:	2300      	moveq	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <_ZL18SystemClock_Configv+0x126>
        Error_Handler();
 80089f6:	f000 fe5f 	bl	80096b8 <Error_Handler>
}
 80089fa:	bf00      	nop
 80089fc:	37b0      	adds	r7, #176	; 0xb0
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40007000 	.word	0x40007000

08008a0c <_ZL12MX_CAN1_Initv>:

static void MX_CAN1_Init() {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN CAN1_Init 1 */


    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 8008a12:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a14:	4a29      	ldr	r2, [pc, #164]	; (8008abc <_ZL12MX_CAN1_Initv+0xb0>)
 8008a16:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 16;
 8008a18:	4b27      	ldr	r3, [pc, #156]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008a1e:	4b26      	ldr	r3, [pc, #152]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008a24:	4b24      	ldr	r3, [pc, #144]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008a2a:	4b23      	ldr	r3, [pc, #140]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008a30:	4b21      	ldr	r3, [pc, #132]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8008a36:	4b20      	ldr	r3, [pc, #128]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 8008a3c:	4b1e      	ldr	r3, [pc, #120]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 8008a42:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 8008a48:	4b1b      	ldr	r3, [pc, #108]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008a4e:	4b1a      	ldr	r3, [pc, #104]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8008a54:	4b18      	ldr	r3, [pc, #96]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008a5a:	4817      	ldr	r0, [pc, #92]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008a5c:	f7f7 fdd0 	bl	8000600 <HAL_CAN_Init>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bf14      	ite	ne
 8008a66:	2301      	movne	r3, #1
 8008a68:	2300      	moveq	r3, #0
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <_ZL12MX_CAN1_Initv+0x68>
        Error_Handler();
 8008a70:	f000 fe22 	bl	80096b8 <Error_Handler>
    /* USER CODE BEGIN CAN1_Init 2 */
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8008a74:	2301      	movs	r3, #1
 8008a76:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // allows 4 IDs to be set to one filter with IDLIST
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8008a84:	230e      	movs	r3, #14
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24

    sFilterConfig.FilterBank = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = Setting << 5;
 8008a8c:	f64e 53c0 	movw	r3, #60864	; 0xedc0
 8008a90:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = NLGAStat << 5;
 8008a92:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 8008a96:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = NLGBStat << 5;
 8008a98:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8008a9c:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = LoggerReq << 5;
 8008a9e:	f24f 6380 	movw	r3, #63104	; 0xf680
 8008aa2:	60fb      	str	r3, [r7, #12]
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4803      	ldr	r0, [pc, #12]	; (8008ab8 <_ZL12MX_CAN1_Initv+0xac>)
 8008aaa:	f7f7 fea5 	bl	80007f8 <HAL_CAN_ConfigFilter>
    /* USER CODE END CAN1_Init 2 */
}
 8008aae:	bf00      	nop
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200000fc 	.word	0x200000fc
 8008abc:	40006400 	.word	0x40006400

08008ac0 <_ZL12MX_CAN2_Initv>:

static void MX_CAN2_Init() {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08a      	sub	sp, #40	; 0x28
 8008ac4:	af00      	add	r7, sp, #0
    /* USER CODE END CAN2_Init 0 */

    /* USER CODE BEGIN CAN2_Init 1 */

    /* USER CODE END CAN2_Init 1 */
    hcan2.Instance = CAN2;
 8008ac6:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008ac8:	4a2a      	ldr	r2, [pc, #168]	; (8008b74 <_ZL12MX_CAN2_Initv+0xb4>)
 8008aca:	601a      	str	r2, [r3, #0]
    hcan2.Init.Prescaler = 16;
 8008acc:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008ace:	2210      	movs	r2, #16
 8008ad0:	605a      	str	r2, [r3, #4]
    hcan2.Init.Mode = CAN_MODE_NORMAL;
 8008ad2:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	609a      	str	r2, [r3, #8]
    hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	60da      	str	r2, [r3, #12]
    hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	611a      	str	r2, [r3, #16]
    hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	615a      	str	r2, [r3, #20]
    hcan2.Init.TimeTriggeredMode = DISABLE;
 8008aea:	4b21      	ldr	r3, [pc, #132]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	761a      	strb	r2, [r3, #24]
    hcan2.Init.AutoBusOff = DISABLE;
 8008af0:	4b1f      	ldr	r3, [pc, #124]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	765a      	strb	r2, [r3, #25]
    hcan2.Init.AutoWakeUp = DISABLE;
 8008af6:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	769a      	strb	r2, [r3, #26]
    hcan2.Init.AutoRetransmission = DISABLE;
 8008afc:	4b1c      	ldr	r3, [pc, #112]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	76da      	strb	r2, [r3, #27]
    hcan2.Init.ReceiveFifoLocked = DISABLE;
 8008b02:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
    hcan2.Init.TransmitFifoPriority = DISABLE;
 8008b08:	4b19      	ldr	r3, [pc, #100]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8008b0e:	4818      	ldr	r0, [pc, #96]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008b10:	f7f7 fd76 	bl	8000600 <HAL_CAN_Init>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bf14      	ite	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	2300      	moveq	r3, #0
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <_ZL12MX_CAN2_Initv+0x68>
        Error_Handler();
 8008b24:	f000 fdc8 	bl	80096b8 <Error_Handler>
    /* USER CODE BEGIN CAN2_Init 2 */
    CAN_FilterTypeDef  sFilterConfig;
    sFilterConfig.FilterBank = 14;
 8008b28:	230e      	movs	r3, #14
 8008b2a:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // allows two IDs to be set to one filter with IDLIST
 8008b30:	2300      	movs	r3, #0
 8008b32:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 8008b34:	2301      	movs	r3, #1
 8008b36:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	613b      	str	r3, [r7, #16]
    sFilterConfig.SlaveStartFilterBank = 14;
 8008b3c:	230e      	movs	r3, #14
 8008b3e:	627b      	str	r3, [r7, #36]	; 0x24

    sFilterConfig.FilterBank = 14;
 8008b40:	230e      	movs	r3, #14
 8008b42:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdHigh = IVT_I << 5;
 8008b44:	f24a 4320 	movw	r3, #42016	; 0xa420
 8008b48:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = IVT_U1 << 5;
 8008b4a:	f24a 4340 	movw	r3, #42048	; 0xa440
 8008b4e:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = IVT_U2 << 5;
 8008b50:	f24a 4360 	movw	r3, #42080	; 0xa460
 8008b54:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = IVT_U3 << 5;
 8008b56:	f24a 4380 	movw	r3, #42112	; 0xa480
 8008b5a:	60fb      	str	r3, [r7, #12]
    HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4803      	ldr	r0, [pc, #12]	; (8008b70 <_ZL12MX_CAN2_Initv+0xb0>)
 8008b62:	f7f7 fe49 	bl	80007f8 <HAL_CAN_ConfigFilter>
    /* USER CODE END CAN2_Init 2 */
}
 8008b66:	bf00      	nop
 8008b68:	3728      	adds	r7, #40	; 0x28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000124 	.word	0x20000124
 8008b74:	40006800 	.word	0x40006800

08008b78 <_ZL12MX_SPI1_Initv>:
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */
}

static void MX_SPI1_Init() {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008b7e:	4a1b      	ldr	r2, [pc, #108]	; (8008bec <_ZL12MX_SPI1_Initv+0x74>)
 8008b80:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8008b82:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008b88:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008b8a:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008b90:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b9c:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8008ba2:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008bac:	2230      	movs	r2, #48	; 0x30
 8008bae:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 1;
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008bc8:	4807      	ldr	r0, [pc, #28]	; (8008be8 <_ZL12MX_SPI1_Initv+0x70>)
 8008bca:	f7f9 fde5 	bl	8002798 <HAL_SPI_Init>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bf14      	ite	ne
 8008bd4:	2301      	movne	r3, #1
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <_ZL12MX_SPI1_Initv+0x6a>
        Error_Handler();
 8008bde:	f000 fd6b 	bl	80096b8 <Error_Handler>
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8008be2:	bf00      	nop
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	2000014c 	.word	0x2000014c
 8008bec:	40013000 	.word	0x40013000

08008bf0 <_ZL12MX_TIM2_Initv>:

static void MX_TIM2_Init() {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08e      	sub	sp, #56	; 0x38
 8008bf4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
 8008c00:	609a      	str	r2, [r3, #8]
 8008c02:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c04:	f107 0320 	add.w	r3, r7, #32
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008c0e:	1d3b      	adds	r3, r7, #4
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	605a      	str	r2, [r3, #4]
 8008c16:	609a      	str	r2, [r3, #8]
 8008c18:	60da      	str	r2, [r3, #12]
 8008c1a:	611a      	str	r2, [r3, #16]
 8008c1c:	615a      	str	r2, [r3, #20]
 8008c1e:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */
    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8008c20:	4b3a      	ldr	r3, [pc, #232]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008c26:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 800; // Prescaler is 800 as 16MHz / 800 == 20kHz, I guess?
 8008c28:	4b38      	ldr	r3, [pc, #224]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c2a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008c2e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c30:	4b36      	ldr	r3, [pc, #216]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 19999;
 8008c36:	4b35      	ldr	r3, [pc, #212]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c38:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008c3c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c3e:	4b33      	ldr	r3, [pc, #204]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c44:	4b31      	ldr	r3, [pc, #196]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008c4a:	4830      	ldr	r0, [pc, #192]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c4c:	f7fa f852 	bl	8002cf4 <HAL_TIM_Base_Init>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bf14      	ite	ne
 8008c56:	2301      	movne	r3, #1
 8008c58:	2300      	moveq	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <_ZL12MX_TIM2_Initv+0x74>
        Error_Handler();
 8008c60:	f000 fd2a 	bl	80096b8 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c68:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4826      	ldr	r0, [pc, #152]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c72:	f7fa f9a3 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bf14      	ite	ne
 8008c7c:	2301      	movne	r3, #1
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <_ZL12MX_TIM2_Initv+0x9a>
        Error_Handler();
 8008c86:	f000 fd17 	bl	80096b8 <Error_Handler>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008c8a:	4820      	ldr	r0, [pc, #128]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008c8c:	f7fa f85d 	bl	8002d4a <HAL_TIM_PWM_Init>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bf14      	ite	ne
 8008c96:	2301      	movne	r3, #1
 8008c98:	2300      	moveq	r3, #0
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <_ZL12MX_TIM2_Initv+0xb4>
        Error_Handler();
 8008ca0:	f000 fd0a 	bl	80096b8 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008cac:	f107 0320 	add.w	r3, r7, #32
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4816      	ldr	r0, [pc, #88]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008cb4:	f7fa fd56 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bf14      	ite	ne
 8008cbe:	2301      	movne	r3, #1
 8008cc0:	2300      	moveq	r3, #0
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <_ZL12MX_TIM2_Initv+0xdc>
        Error_Handler();
 8008cc8:	f000 fcf6 	bl	80096b8 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ccc:	2360      	movs	r3, #96	; 0x60
 8008cce:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	220c      	movs	r2, #12
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	480a      	ldr	r0, [pc, #40]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008ce4:	f7fa f8a4 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2301      	movne	r3, #1
 8008cf0:	2300      	moveq	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <_ZL12MX_TIM2_Initv+0x10c>
        Error_Handler();
 8008cf8:	f000 fcde 	bl	80096b8 <Error_Handler>
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <_ZL12MX_TIM2_Initv+0x11c>)
 8008cfe:	f000 ff39 	bl	8009b74 <HAL_TIM_MspPostInit>

}
 8008d02:	bf00      	nop
 8008d04:	3738      	adds	r7, #56	; 0x38
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	200001a4 	.word	0x200001a4

08008d10 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init() {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	; 0x28
 8008d14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d16:	f107 0314 	add.w	r3, r7, #20
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	605a      	str	r2, [r3, #4]
 8008d20:	609a      	str	r2, [r3, #8]
 8008d22:	60da      	str	r2, [r3, #12]
 8008d24:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d26:	2300      	movs	r3, #0
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	4b41      	ldr	r3, [pc, #260]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	4a40      	ldr	r2, [pc, #256]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d30:	f043 0304 	orr.w	r3, r3, #4
 8008d34:	6313      	str	r3, [r2, #48]	; 0x30
 8008d36:	4b3e      	ldr	r3, [pc, #248]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	613b      	str	r3, [r7, #16]
 8008d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	4b3a      	ldr	r3, [pc, #232]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	4a39      	ldr	r2, [pc, #228]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d50:	6313      	str	r3, [r2, #48]	; 0x30
 8008d52:	4b37      	ldr	r3, [pc, #220]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	4b33      	ldr	r3, [pc, #204]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	4a32      	ldr	r2, [pc, #200]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d68:	f043 0301 	orr.w	r3, r3, #1
 8008d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d6e:	4b30      	ldr	r3, [pc, #192]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	60bb      	str	r3, [r7, #8]
 8008d78:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	4b2c      	ldr	r3, [pc, #176]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	4a2b      	ldr	r2, [pc, #172]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d84:	f043 0302 	orr.w	r3, r3, #2
 8008d88:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8a:	4b29      	ldr	r3, [pc, #164]	; (8008e30 <_ZL12MX_GPIO_Initv+0x120>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin|IO_1_Pin|IO_2_Pin, GPIO_PIN_RESET);
 8008d96:	2200      	movs	r2, #0
 8008d98:	213f      	movs	r1, #63	; 0x3f
 8008d9a:	4826      	ldr	r0, [pc, #152]	; (8008e34 <_ZL12MX_GPIO_Initv+0x124>)
 8008d9c:	f7f8 fd02 	bl	80017a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(IO_0_GPIO_Port, IO_0_Pin, GPIO_PIN_RESET);
 8008da0:	2200      	movs	r2, #0
 8008da2:	2180      	movs	r1, #128	; 0x80
 8008da4:	4824      	ldr	r0, [pc, #144]	; (8008e38 <_ZL12MX_GPIO_Initv+0x128>)
 8008da6:	f7f8 fcfd 	bl	80017a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, PreCharge_Pin|BMSrelay_Pin, GPIO_PIN_RESET);
 8008daa:	2200      	movs	r2, #0
 8008dac:	2103      	movs	r1, #3
 8008dae:	4823      	ldr	r0, [pc, #140]	; (8008e3c <_ZL12MX_GPIO_Initv+0x12c>)
 8008db0:	f7f8 fcf8 	bl	80017a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8008db4:	2201      	movs	r2, #1
 8008db6:	2140      	movs	r1, #64	; 0x40
 8008db8:	4820      	ldr	r0, [pc, #128]	; (8008e3c <_ZL12MX_GPIO_Initv+0x12c>)
 8008dba:	f7f8 fcf3 	bl	80017a4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin IO_1_Pin IO_2_Pin */
    GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin|IO_1_Pin|IO_2_Pin;
 8008dbe:	233f      	movs	r3, #63	; 0x3f
 8008dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dce:	f107 0314 	add.w	r3, r7, #20
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4817      	ldr	r0, [pc, #92]	; (8008e34 <_ZL12MX_GPIO_Initv+0x124>)
 8008dd6:	f7f8 fb39 	bl	800144c <HAL_GPIO_Init>

    /*Configure GPIO pin : IO_0_Pin */
    GPIO_InitStruct.Pin = IO_0_Pin;
 8008dda:	2380      	movs	r3, #128	; 0x80
 8008ddc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IO_0_GPIO_Port, &GPIO_InitStruct);
 8008dde:	f107 0314 	add.w	r3, r7, #20
 8008de2:	4619      	mov	r1, r3
 8008de4:	4814      	ldr	r0, [pc, #80]	; (8008e38 <_ZL12MX_GPIO_Initv+0x128>)
 8008de6:	f7f8 fb31 	bl	800144c <HAL_GPIO_Init>

    /*Configure GPIO pins : PreCharge_Pin BMSrelay_Pin NSS_Pin */
    GPIO_InitStruct.Pin = PreCharge_Pin|BMSrelay_Pin|NSS_Pin;
 8008dea:	2343      	movs	r3, #67	; 0x43
 8008dec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dee:	f107 0314 	add.w	r3, r7, #20
 8008df2:	4619      	mov	r1, r3
 8008df4:	4811      	ldr	r0, [pc, #68]	; (8008e3c <_ZL12MX_GPIO_Initv+0x12c>)
 8008df6:	f7f8 fb29 	bl	800144c <HAL_GPIO_Init>

    /*Configure GPIO pins : Det_Pin Lock_Pin Det_Lock_Pin */
    GPIO_InitStruct.Pin = Det_Pin|Lock_Pin|Det_Lock_Pin;
 8008dfa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	4619      	mov	r1, r3
 8008e0a:	480b      	ldr	r0, [pc, #44]	; (8008e38 <_ZL12MX_GPIO_Initv+0x128>)
 8008e0c:	f7f8 fb1e 	bl	800144c <HAL_GPIO_Init>

    /*Configure GPIO pin : SOS_Pin */
    GPIO_InitStruct.Pin = SOS_Pin;
 8008e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e16:	2303      	movs	r3, #3
 8008e18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SOS_GPIO_Port, &GPIO_InitStruct);
 8008e1a:	f107 0314 	add.w	r3, r7, #20
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4806      	ldr	r0, [pc, #24]	; (8008e3c <_ZL12MX_GPIO_Initv+0x12c>)
 8008e22:	f7f8 fb13 	bl	800144c <HAL_GPIO_Init>

}
 8008e26:	bf00      	nop
 8008e28:	3728      	adds	r7, #40	; 0x28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	40023800 	.word	0x40023800
 8008e34:	40020800 	.word	0x40020800
 8008e38:	40020000 	.word	0x40020000
 8008e3c:	40020400 	.word	0x40020400

08008e40 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN0 / CAN2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08c      	sub	sp, #48	; 0x30
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	613b      	str	r3, [r7, #16]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, data) == HAL_OK) {
 8008e50:	f107 030c 	add.w	r3, r7, #12
 8008e54:	f107 0214 	add.w	r2, r7, #20
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7f7 fe87 	bl	8000b6e <HAL_CAN_GetRxMessage>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bf0c      	ite	eq
 8008e66:	2301      	moveq	r3, #1
 8008e68:	2300      	movne	r3, #0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d05a      	beq.n	8008f26 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
        switch(RxHeader.StdId) {
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f240 5223 	movw	r2, #1315	; 0x523
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d03c      	beq.n	8008ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8008e7a:	f240 5223 	movw	r2, #1315	; 0x523
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d850      	bhi.n	8008f24 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
 8008e82:	f240 5221 	movw	r2, #1313	; 0x521
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
 8008e8a:	f240 5222 	movw	r2, #1314	; 0x522
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
        case IVT_U2:
            ivt.set_voltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
            break;

        default:
            break;
 8008e92:	e047      	b.n	8008f24 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
            ivt.set_current(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	061a      	lsls	r2, r3, #24
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	041b      	lsls	r3, r3, #16
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	7c3b      	ldrb	r3, [r7, #16]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	7c7a      	ldrb	r2, [r7, #17]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008f30 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8008eb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8008ebc:	481d      	ldr	r0, [pc, #116]	; (8008f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8008ebe:	f7fd fa35 	bl	800632c <_ZN3IVT11set_currentEf>
            break;
 8008ec2:	e030      	b.n	8008f26 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            ivt.set_voltage1(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	061a      	lsls	r2, r3, #24
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	7c3b      	ldrb	r3, [r7, #16]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	7c7a      	ldrb	r2, [r7, #17]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ee0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8008f30 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8008ee4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8008eec:	4811      	ldr	r0, [pc, #68]	; (8008f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8008eee:	f7fd fa43 	bl	8006378 <_ZN3IVT12set_voltage1Ef>
            break;
 8008ef2:	e018      	b.n	8008f26 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            ivt.set_voltage2(static_cast<int32_t>(data[2] << 24 | data[3] << 16 | data[4] << 8 | data[5]) / 1000.0f);
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	061a      	lsls	r2, r3, #24
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	041b      	lsls	r3, r3, #16
 8008efc:	431a      	orrs	r2, r3
 8008efe:	7c3b      	ldrb	r3, [r7, #16]
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	4313      	orrs	r3, r2
 8008f04:	7c7a      	ldrb	r2, [r7, #17]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f10:	eddf 6a07 	vldr	s13, [pc, #28]	; 8008f30 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8008f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f18:	eeb0 0a47 	vmov.f32	s0, s14
 8008f1c:	4805      	ldr	r0, [pc, #20]	; (8008f34 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8008f1e:	f7fd fa51 	bl	80063c4 <_ZN3IVT12set_voltage2Ef>
            break;
 8008f22:	e000      	b.n	8008f26 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
            break;
 8008f24:	bf00      	nop
        }
    }
}
 8008f26:	bf00      	nop
 8008f28:	3730      	adds	r7, #48	; 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	447a0000 	.word	0x447a0000
 8008f34:	200001ec 	.word	0x200001ec

08008f38 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN1
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08c      	sub	sp, #48	; 0x30
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t data[8]{ 0 };
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, data) == HAL_OK) {
 8008f48:	f107 030c 	add.w	r3, r7, #12
 8008f4c:	f107 0214 	add.w	r2, r7, #20
 8008f50:	2101      	movs	r1, #1
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7f7 fe0b 	bl	8000b6e <HAL_CAN_GetRxMessage>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bf0c      	ite	eq
 8008f5e:	2301      	moveq	r3, #1
 8008f60:	2300      	movne	r3, #0
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80b0 	beq.w	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
        switch(RxHeader.StdId) {
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f240 72b4 	movw	r2, #1972	; 0x7b4
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d053      	beq.n	800901c <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 8008f74:	f240 72b4 	movw	r2, #1972	; 0x7b4
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	f200 80a3 	bhi.w	80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
 8008f7e:	f240 726e 	movw	r2, #1902	; 0x76e
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d072      	beq.n	800906c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>
 8008f86:	f240 726e 	movw	r2, #1902	; 0x76e
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	f200 809a 	bhi.w	80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
 8008f90:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8008f94:	d031      	beq.n	8008ffa <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
 8008f96:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8008f9a:	f200 8093 	bhi.w	80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
 8008f9e:	2b7b      	cmp	r3, #123	; 0x7b
 8008fa0:	d003      	beq.n	8008faa <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
 8008fa2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8008fa6:	d017      	beq.n	8008fd8 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>
                pwm_fan->setDutyCycle(data[7]);

            break;

        default:
            break;
 8008fa8:	e08c      	b.n	80090c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x18c>
            rtc.year = data[0] + 2000;
 8008faa:	7b3b      	ldrb	r3, [r7, #12]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	4b47      	ldr	r3, [pc, #284]	; (80090d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fb6:	801a      	strh	r2, [r3, #0]
            rtc.month = data[1];
 8008fb8:	7b7a      	ldrb	r2, [r7, #13]
 8008fba:	4b46      	ldr	r3, [pc, #280]	; (80090d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fbc:	709a      	strb	r2, [r3, #2]
            rtc.days = data[2];
 8008fbe:	7bba      	ldrb	r2, [r7, #14]
 8008fc0:	4b44      	ldr	r3, [pc, #272]	; (80090d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fc2:	70da      	strb	r2, [r3, #3]
            rtc.hours = data[3];
 8008fc4:	7bfa      	ldrb	r2, [r7, #15]
 8008fc6:	4b43      	ldr	r3, [pc, #268]	; (80090d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fc8:	711a      	strb	r2, [r3, #4]
            rtc.minutes = data[4];
 8008fca:	7c3a      	ldrb	r2, [r7, #16]
 8008fcc:	4b41      	ldr	r3, [pc, #260]	; (80090d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fce:	715a      	strb	r2, [r3, #5]
            rtc.seconds = data[5];
 8008fd0:	7c7a      	ldrb	r2, [r7, #17]
 8008fd2:	4b40      	ldr	r3, [pc, #256]	; (80090d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x19c>)
 8008fd4:	719a      	strb	r2, [r3, #6]
            break;
 8008fd6:	e078      	b.n	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            nlg5->a_buffer[0] = data[0];
 8008fd8:	4b3f      	ldr	r3, [pc, #252]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	7b3a      	ldrb	r2, [r7, #12]
 8008fde:	751a      	strb	r2, [r3, #20]
            nlg5->a_buffer[1] = data[1];
 8008fe0:	4b3d      	ldr	r3, [pc, #244]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	7b7a      	ldrb	r2, [r7, #13]
 8008fe6:	755a      	strb	r2, [r3, #21]
            nlg5->a_buffer[2] = data[2];
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	7bba      	ldrb	r2, [r7, #14]
 8008fee:	759a      	strb	r2, [r3, #22]
            nlg5->a_buffer[3] = data[3];
 8008ff0:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	7bfa      	ldrb	r2, [r7, #15]
 8008ff6:	75da      	strb	r2, [r3, #23]
            break;
 8008ff8:	e067      	b.n	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            nlg5->b_buffer[0] = data[0];
 8008ffa:	4b37      	ldr	r3, [pc, #220]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	7b3a      	ldrb	r2, [r7, #12]
 8009000:	761a      	strb	r2, [r3, #24]
            nlg5->b_buffer[1] = data[1];
 8009002:	4b35      	ldr	r3, [pc, #212]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	7b7a      	ldrb	r2, [r7, #13]
 8009008:	765a      	strb	r2, [r3, #25]
            nlg5->b_buffer[2] = data[2];
 800900a:	4b33      	ldr	r3, [pc, #204]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	7bba      	ldrb	r2, [r7, #14]
 8009010:	769a      	strb	r2, [r3, #26]
            nlg5->b_buffer[3] = data[3];
 8009012:	4b31      	ldr	r3, [pc, #196]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	7bfa      	ldrb	r2, [r7, #15]
 8009018:	76da      	strb	r2, [r3, #27]
            break;
 800901a:	e056      	b.n	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            switch (data[3]) {
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	2b03      	cmp	r3, #3
 8009020:	d820      	bhi.n	8009064 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
 8009022:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <HAL_CAN_RxFifo1MsgPendingCallback+0xf0>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009065 	.word	0x08009065
 800902c:	08009039 	.word	0x08009039
 8009030:	08009055 	.word	0x08009055
 8009034:	08009065 	.word	0x08009065
                if (retSD == FR_OK)
 8009038:	4b28      	ldr	r3, [pc, #160]	; (80090dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d105      	bne.n	800904c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>
                    CANTxVolumeSize(f_size(&SDFile));
 8009040:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>)
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fb0b 	bl	8009660 <_Z15CANTxVolumeSizem>
                break;
 800904a:	e00e      	b.n	800906a <HAL_CAN_RxFifo1MsgPendingCallback+0x132>
                    CANTxVolumeSize(0);
 800904c:	2000      	movs	r0, #0
 800904e:	f000 fb07 	bl	8009660 <_Z15CANTxVolumeSizem>
                break;
 8009052:	e00a      	b.n	800906a <HAL_CAN_RxFifo1MsgPendingCallback+0x132>
                if (retSD == FR_OK)
 8009054:	4b21      	ldr	r3, [pc, #132]	; (80090dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a4>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>
                    f_unlink(kFile);
 800905c:	4821      	ldr	r0, [pc, #132]	; (80090e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1ac>)
 800905e:	f7fc fd8f 	bl	8005b80 <f_unlink>
                break;
 8009062:	e001      	b.n	8009068 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>
                break;
 8009064:	bf00      	nop
 8009066:	e030      	b.n	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
                break;
 8009068:	bf00      	nop
            break;
 800906a:	e02e      	b.n	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            status.set_op_mode(static_cast<Op_Mode>(data[2]));
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	4619      	mov	r1, r3
 8009070:	481d      	ldr	r0, [pc, #116]	; (80090e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>)
 8009072:	f7fe ff44 	bl	8007efe <_ZN6Status11set_op_modeE7Op_Mode>
            discharge_mode = static_cast<LTC6811::DischargeMode>(data[3]);
 8009076:	7bfa      	ldrb	r2, [r7, #15]
 8009078:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <HAL_CAN_RxFifo1MsgPendingCallback+0x1b4>)
 800907a:	701a      	strb	r2, [r3, #0]
            nlg5->oc_limit = data[6];
 800907c:	7cba      	ldrb	r2, [r7, #18]
 800907e:	4b16      	ldr	r3, [pc, #88]	; (80090d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	b292      	uxth	r2, r2
 8009084:	821a      	strh	r2, [r3, #16]
            pwm_fan->setMode(static_cast<PWM_Fan::Mode>(data[7] & 0x80));
 8009086:	4b1a      	ldr	r3, [pc, #104]	; (80090f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	7cfb      	ldrb	r3, [r7, #19]
 800908c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009090:	b2db      	uxtb	r3, r3
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7fe ff09 	bl	8007eac <_ZN7PWM_Fan7setModeENS_4ModeE>
            if (pwm_fan->getMode() == PWM_Fan::Manual)
 800909a:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe ff13 	bl	8007eca <_ZNK7PWM_Fan7getModeEv>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bf0c      	ite	eq
 80090aa:	2301      	moveq	r3, #1
 80090ac:	2300      	movne	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d009      	beq.n	80090c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
                pwm_fan->setDutyCycle(data[7]);
 80090b4:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	7cfa      	ldrb	r2, [r7, #19]
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe fe9b 	bl	8007df8 <_ZNK7PWM_Fan12setDutyCycleEh>
            break;
 80090c2:	e001      	b.n	80090c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x190>
            break;
 80090c4:	bf00      	nop
 80090c6:	e000      	b.n	80090ca <HAL_CAN_RxFifo1MsgPendingCallback+0x192>
            break;
 80090c8:	bf00      	nop
        }
    }
}
 80090ca:	bf00      	nop
 80090cc:	3730      	adds	r7, #48	; 0x30
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	200000f4 	.word	0x200000f4
 80090d8:	200001e4 	.word	0x200001e4
 80090dc:	20000260 	.word	0x20000260
 80090e0:	20000268 	.word	0x20000268
 80090e4:	0800a2d8 	.word	0x0800a2d8
 80090e8:	20000200 	.word	0x20000200
 80090ec:	20000240 	.word	0x20000240
 80090f0:	200001e8 	.word	0x200001e8

080090f4 <_Z11CANTxStatusv>:

HAL_StatusTypeDef CANTxStatus() {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
    TxHeader.StdId = OpMode;
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <_Z11CANTxStatusv+0x74>)
 80090fc:	2208      	movs	r2, #8
 80090fe:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8009100:	4b19      	ldr	r3, [pc, #100]	; (8009168 <_Z11CANTxStatusv+0x74>)
 8009102:	2208      	movs	r2, #8
 8009104:	611a      	str	r2, [r3, #16]

    uint32_t const uptime = get_uptime();
 8009106:	f7fe ff7f 	bl	8008008 <_Z10get_uptimev>
 800910a:	60f8      	str	r0, [r7, #12]

    uint8_t data[] = {
            static_cast<uint8_t>(uptime >> 24),
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(uptime >>  0),
            status.get_op_mode(),
            status.get_last_error(),
            status.get_precharge_state(),
            status.get_AIR_state()
    };
 8009110:	b2db      	uxtb	r3, r3
 8009112:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(uptime >> 16),
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	0c1b      	lsrs	r3, r3, #16
    };
 8009118:	b2db      	uxtb	r3, r3
 800911a:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(uptime >>  8),
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0a1b      	lsrs	r3, r3, #8
    };
 8009120:	b2db      	uxtb	r3, r3
 8009122:	71bb      	strb	r3, [r7, #6]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	b2db      	uxtb	r3, r3
 8009128:	71fb      	strb	r3, [r7, #7]
            status.get_op_mode(),
 800912a:	4810      	ldr	r0, [pc, #64]	; (800916c <_Z11CANTxStatusv+0x78>)
 800912c:	f7fe feda 	bl	8007ee4 <_ZNK6Status11get_op_modeEv>
 8009130:	4603      	mov	r3, r0
    };
 8009132:	723b      	strb	r3, [r7, #8]
            status.get_last_error(),
 8009134:	480d      	ldr	r0, [pc, #52]	; (800916c <_Z11CANTxStatusv+0x78>)
 8009136:	f7fe fef1 	bl	8007f1c <_ZNK6Status14get_last_errorEv>
 800913a:	4603      	mov	r3, r0
    };
 800913c:	727b      	strb	r3, [r7, #9]
            status.get_precharge_state(),
 800913e:	480b      	ldr	r0, [pc, #44]	; (800916c <_Z11CANTxStatusv+0x78>)
 8009140:	f7fe fc98 	bl	8007a74 <_ZNK6Status19get_precharge_stateEv>
 8009144:	4603      	mov	r3, r0
    };
 8009146:	72bb      	strb	r3, [r7, #10]
            status.get_AIR_state()
 8009148:	4808      	ldr	r0, [pc, #32]	; (800916c <_Z11CANTxStatusv+0x78>)
 800914a:	f7fe fcbd 	bl	8007ac8 <_ZNK6Status13get_AIR_stateEv>
 800914e:	4603      	mov	r3, r0
    };
 8009150:	72fb      	strb	r3, [r7, #11]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009152:	1d3a      	adds	r2, r7, #4
 8009154:	4b06      	ldr	r3, [pc, #24]	; (8009170 <_Z11CANTxStatusv+0x7c>)
 8009156:	4904      	ldr	r1, [pc, #16]	; (8009168 <_Z11CANTxStatusv+0x74>)
 8009158:	4806      	ldr	r0, [pc, #24]	; (8009174 <_Z11CANTxStatusv+0x80>)
 800915a:	f7f7 fc2d 	bl	80009b8 <HAL_CAN_AddTxMessage>
 800915e:	4603      	mov	r3, r0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000008 	.word	0x20000008
 800916c:	20000200 	.word	0x20000200
 8009170:	200001fc 	.word	0x200001fc
 8009174:	200000fc 	.word	0x200000fc

08009178 <_Z13CANTxPECErrorv>:

HAL_StatusTypeDef CANTxPECError() {
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
    TxHeader.StdId = PECError;
 800917e:	4b1e      	ldr	r3, [pc, #120]	; (80091f8 <_Z13CANTxPECErrorv+0x80>)
 8009180:	2209      	movs	r2, #9
 8009182:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8009184:	4b1c      	ldr	r3, [pc, #112]	; (80091f8 <_Z13CANTxPECErrorv+0x80>)
 8009186:	2208      	movs	r2, #8
 8009188:	611a      	str	r2, [r3, #16]

    static uint32_t last_error;

    uint32_t const total_error{ status.get_error_count(PECError) };
 800918a:	2109      	movs	r1, #9
 800918c:	481b      	ldr	r0, [pc, #108]	; (80091fc <_Z13CANTxPECErrorv+0x84>)
 800918e:	f7fe fed1 	bl	8007f34 <_ZN6Status15get_error_countE5Error>
 8009192:	4603      	mov	r3, r0
 8009194:	60fb      	str	r3, [r7, #12]
    uint32_t const error_change = total_error - last_error;
 8009196:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <_Z13CANTxPECErrorv+0x88>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	60bb      	str	r3, [r7, #8]
    uint8_t data[] = {
            static_cast<uint8_t>(total_error >> 24),
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(total_error >>  0),
            static_cast<uint8_t>(error_change >> 24),
            static_cast<uint8_t>(error_change >> 16),
            static_cast<uint8_t>(error_change >>  8),
            static_cast<uint8_t>(error_change >>  0),
    };
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	703b      	strb	r3, [r7, #0]
            static_cast<uint8_t>(total_error >> 16),
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	0c1b      	lsrs	r3, r3, #16
    };
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	707b      	strb	r3, [r7, #1]
            static_cast<uint8_t>(total_error >>  8),
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	0a1b      	lsrs	r3, r3, #8
    };
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	70bb      	strb	r3, [r7, #2]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	70fb      	strb	r3, [r7, #3]
            static_cast<uint8_t>(error_change >> 24),
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	0e1b      	lsrs	r3, r3, #24
    };
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	713b      	strb	r3, [r7, #4]
            static_cast<uint8_t>(error_change >> 16),
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	0c1b      	lsrs	r3, r3, #16
    };
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	717b      	strb	r3, [r7, #5]
            static_cast<uint8_t>(error_change >>  8),
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	0a1b      	lsrs	r3, r3, #8
    };
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	71bb      	strb	r3, [r7, #6]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	71fb      	strb	r3, [r7, #7]

    last_error = total_error;
 80091dc:	4a08      	ldr	r2, [pc, #32]	; (8009200 <_Z13CANTxPECErrorv+0x88>)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6013      	str	r3, [r2, #0]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 80091e2:	463a      	mov	r2, r7
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <_Z13CANTxPECErrorv+0x8c>)
 80091e6:	4904      	ldr	r1, [pc, #16]	; (80091f8 <_Z13CANTxPECErrorv+0x80>)
 80091e8:	4807      	ldr	r0, [pc, #28]	; (8009208 <_Z13CANTxPECErrorv+0x90>)
 80091ea:	f7f7 fbe5 	bl	80009b8 <HAL_CAN_AddTxMessage>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	20000008 	.word	0x20000008
 80091fc:	20000200 	.word	0x20000200
 8009200:	20000244 	.word	0x20000244
 8009204:	200001fc 	.word	0x200001fc
 8009208:	200000fc 	.word	0x200000fc

0800920c <_Z9CANTxDatatts>:

HAL_StatusTypeDef CANTxData(uint16_t const v_min, uint16_t const v_max, int16_t const t_max) {
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	80fb      	strh	r3, [r7, #6]
 8009216:	460b      	mov	r3, r1
 8009218:	80bb      	strh	r3, [r7, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	807b      	strh	r3, [r7, #2]
    TxHeader.StdId = Data;
 800921e:	4b1c      	ldr	r3, [pc, #112]	; (8009290 <_Z9CANTxDatatts+0x84>)
 8009220:	220a      	movs	r2, #10
 8009222:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8009224:	4b1a      	ldr	r3, [pc, #104]	; (8009290 <_Z9CANTxDatatts+0x84>)
 8009226:	2208      	movs	r2, #8
 8009228:	611a      	str	r2, [r3, #16]

    uint16_t U1 = static_cast<uint16_t>(ivt.get_voltage1()); // TODO this is bad
 800922a:	481a      	ldr	r0, [pc, #104]	; (8009294 <_Z9CANTxDatatts+0x88>)
 800922c:	f7fd f8ba 	bl	80063a4 <_ZN3IVT12get_voltage1Ev>
 8009230:	eef0 7a40 	vmov.f32	s15, s0
 8009234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009238:	ee17 3a90 	vmov	r3, s15
 800923c:	82fb      	strh	r3, [r7, #22]
    uint8_t data[] = {
            static_cast<uint8_t>(U1 >> 8),
 800923e:	8afb      	ldrh	r3, [r7, #22]
 8009240:	121b      	asrs	r3, r3, #8
            static_cast<uint8_t>(v_min >> 0),
            static_cast<uint8_t>(v_max >> 8),
            static_cast<uint8_t>(v_max >> 0),
            static_cast<uint8_t>(t_max >> 8),
            static_cast<uint8_t>(t_max >> 0)
    };
 8009242:	b2db      	uxtb	r3, r3
 8009244:	733b      	strb	r3, [r7, #12]
 8009246:	8afb      	ldrh	r3, [r7, #22]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(v_min >> 8),
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	121b      	asrs	r3, r3, #8
    };
 8009250:	b2db      	uxtb	r3, r3
 8009252:	73bb      	strb	r3, [r7, #14]
 8009254:	88fb      	ldrh	r3, [r7, #6]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	73fb      	strb	r3, [r7, #15]
            static_cast<uint8_t>(v_max >> 8),
 800925a:	88bb      	ldrh	r3, [r7, #4]
 800925c:	121b      	asrs	r3, r3, #8
    };
 800925e:	b2db      	uxtb	r3, r3
 8009260:	743b      	strb	r3, [r7, #16]
 8009262:	88bb      	ldrh	r3, [r7, #4]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	747b      	strb	r3, [r7, #17]
            static_cast<uint8_t>(t_max >> 8),
 8009268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800926c:	121b      	asrs	r3, r3, #8
    };
 800926e:	b2db      	uxtb	r3, r3
 8009270:	74bb      	strb	r3, [r7, #18]
 8009272:	887b      	ldrh	r3, [r7, #2]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	74fb      	strb	r3, [r7, #19]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009278:	f107 020c 	add.w	r2, r7, #12
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <_Z9CANTxDatatts+0x8c>)
 800927e:	4904      	ldr	r1, [pc, #16]	; (8009290 <_Z9CANTxDatatts+0x84>)
 8009280:	4806      	ldr	r0, [pc, #24]	; (800929c <_Z9CANTxDatatts+0x90>)
 8009282:	f7f7 fb99 	bl	80009b8 <HAL_CAN_AddTxMessage>
 8009286:	4603      	mov	r3, r0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000008 	.word	0x20000008
 8009294:	200001ec 	.word	0x200001ec
 8009298:	200001fc 	.word	0x200001fc
 800929c:	200000fc 	.word	0x200000fc

080092a0 <_Z12CANTxVoltagev>:

HAL_StatusTypeDef CANTxVoltage() {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	; 0x38
 80092a4:	af00      	add	r7, sp, #0
    TxHeader.StdId = Volt;
 80092a6:	4b39      	ldr	r3, [pc, #228]	; (800938c <_Z12CANTxVoltagev+0xec>)
 80092a8:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 80092ac:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80092ae:	4b37      	ldr	r3, [pc, #220]	; (800938c <_Z12CANTxVoltagev+0xec>)
 80092b0:	2208      	movs	r2, #8
 80092b2:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 80092b4:	2300      	movs	r3, #0
 80092b6:	607b      	str	r3, [r7, #4]
 80092b8:	2300      	movs	r3, #0
 80092ba:	60bb      	str	r3, [r7, #8]
    uint8_t byte_position{ 0 };
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    HAL_StatusTypeDef result{ HAL_OK };
 80092c2:	2300      	movs	r3, #0
 80092c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 80092c8:	2300      	movs	r3, #0
 80092ca:	633b      	str	r3, [r7, #48]	; 0x30
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d155      	bne.n	800937e <_Z12CANTxVoltagev+0xde>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 80092d2:	4b2f      	ldr	r3, [pc, #188]	; (8009390 <_Z12CANTxVoltagev+0xf0>)
 80092d4:	623b      	str	r3, [r7, #32]
 80092d6:	4b2e      	ldr	r3, [pc, #184]	; (8009390 <_Z12CANTxVoltagev+0xf0>)
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092da:	4b2e      	ldr	r3, [pc, #184]	; (8009394 <_Z12CANTxVoltagev+0xf4>)
 80092dc:	61fb      	str	r3, [r7, #28]
 80092de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d047      	beq.n	8009376 <_Z12CANTxVoltagev+0xd6>
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	61bb      	str	r3, [r7, #24]
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 80092ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ec:	69b8      	ldr	r0, [r7, #24]
 80092ee:	f7fd ffc2 	bl	8007276 <_ZNKSt5arrayIN7LTC68118RegisterItEELj1EEixEj>
 80092f2:	4603      	mov	r3, r0
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f7fd fa3a 	bl	8006770 <_ZNKSt5arrayItLj3EE5beginEv>
 80092fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80092fe:	6978      	ldr	r0, [r7, #20]
 8009300:	f7fd fa42 	bl	8006788 <_ZNKSt5arrayItLj3EE3endEv>
 8009304:	6138      	str	r0, [r7, #16]
 8009306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	429a      	cmp	r2, r3
 800930c:	d02f      	beq.n	800936e <_Z12CANTxVoltagev+0xce>
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	81fb      	strh	r3, [r7, #14]
                data[byte_position++] = static_cast<uint8_t>(voltage >> 8);
 8009314:	89fb      	ldrh	r3, [r7, #14]
 8009316:	121b      	asrs	r3, r3, #8
 8009318:	b2da      	uxtb	r2, r3
 800931a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800931e:	1c59      	adds	r1, r3, #1
 8009320:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 8009324:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009328:	440b      	add	r3, r1
 800932a:	f803 2c34 	strb.w	r2, [r3, #-52]
                data[byte_position++] = static_cast<uint8_t>(voltage);
 800932e:	89fb      	ldrh	r3, [r7, #14]
 8009330:	b2da      	uxtb	r2, r3
 8009332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009336:	1c59      	adds	r1, r3, #1
 8009338:	f887 1037 	strb.w	r1, [r7, #55]	; 0x37
 800933c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009340:	440b      	add	r3, r1
 8009342:	f803 2c34 	strb.w	r2, [r3, #-52]

                if (byte_position == 8) {
 8009346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800934a:	2b08      	cmp	r3, #8
 800934c:	d10b      	bne.n	8009366 <_Z12CANTxVoltagev+0xc6>
                    result = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 800934e:	1d3a      	adds	r2, r7, #4
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <_Z12CANTxVoltagev+0xf8>)
 8009352:	490e      	ldr	r1, [pc, #56]	; (800938c <_Z12CANTxVoltagev+0xec>)
 8009354:	4811      	ldr	r0, [pc, #68]	; (800939c <_Z12CANTxVoltagev+0xfc>)
 8009356:	f7f7 fb2f 	bl	80009b8 <HAL_CAN_AddTxMessage>
 800935a:	4603      	mov	r3, r0
 800935c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    return result;
 8009360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009364:	e00d      	b.n	8009382 <_Z12CANTxVoltagev+0xe2>
            for (const auto voltage : register_group[current_ic].data) { // 3 voltages per IC
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	3302      	adds	r3, #2
 800936a:	62bb      	str	r3, [r7, #40]	; 0x28
 800936c:	e7cb      	b.n	8009306 <_Z12CANTxVoltagev+0x66>
        for (const auto& register_group : cell_data) { // 4 voltage register groups
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	3308      	adds	r3, #8
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009374:	e7b3      	b.n	80092de <_Z12CANTxVoltagev+0x3e>
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	3301      	adds	r3, #1
 800937a:	633b      	str	r3, [r7, #48]	; 0x30
 800937c:	e7a6      	b.n	80092cc <_Z12CANTxVoltagev+0x2c>
                    ++TxHeader.StdId;
                }
            } // 4 * 3 == 12 voltages associated with each LTC6811 in the daisy chain
        }
    } // 4 * 3 * kDaisyChainLength == all voltages associated with the daisy chain
    return result;
 800937e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009382:	4618      	mov	r0, r3
 8009384:	3738      	adds	r7, #56	; 0x38
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000008 	.word	0x20000008
 8009390:	20000210 	.word	0x20000210
 8009394:	20000230 	.word	0x20000230
 8009398:	200001fc 	.word	0x200001fc
 800939c:	200000fc 	.word	0x200000fc

080093a0 <_ZNKSt5arrayIsLj3EE5beginEv>:
      begin() const noexcept
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa40 	bl	800982e <_ZNKSt5arrayIsLj3EE4dataEv>
 80093ae:	4603      	mov	r3, r0
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <_ZNKSt5arrayIsLj3EE3endEv>:
      end() const noexcept
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fa34 	bl	800982e <_ZNKSt5arrayIsLj3EE4dataEv>
 80093c6:	4603      	mov	r3, r0
 80093c8:	3306      	adds	r3, #6
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <_Z16CANTxTemperaturev>:

HAL_StatusTypeDef CANTxTemperature() {
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08c      	sub	sp, #48	; 0x30
 80093d8:	af00      	add	r7, sp, #0
    TxHeader.StdId = Temp;
 80093da:	4b3f      	ldr	r3, [pc, #252]	; (80094d8 <_Z16CANTxTemperaturev+0x104>)
 80093dc:	f240 729c 	movw	r2, #1948	; 0x79c
 80093e0:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80093e2:	4b3d      	ldr	r3, [pc, #244]	; (80094d8 <_Z16CANTxTemperaturev+0x104>)
 80093e4:	2208      	movs	r2, #8
 80093e6:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 80093e8:	2300      	movs	r3, #0
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	2300      	movs	r3, #0
 80093ee:	607b      	str	r3, [r7, #4]
    uint8_t byte_position{ 0 };
 80093f0:	2300      	movs	r3, #0
 80093f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    HAL_StatusTypeDef result{ HAL_OK };
 80093f6:	2300      	movs	r3, #0
 80093f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 80093fc:	2300      	movs	r3, #0
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d162      	bne.n	80094cc <_Z16CANTxTemperaturev+0xf8>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 8009406:	4b35      	ldr	r3, [pc, #212]	; (80094dc <_Z16CANTxTemperaturev+0x108>)
 8009408:	61fb      	str	r3, [r7, #28]
 800940a:	4b34      	ldr	r3, [pc, #208]	; (80094dc <_Z16CANTxTemperaturev+0x108>)
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
 800940e:	4b34      	ldr	r3, [pc, #208]	; (80094e0 <_Z16CANTxTemperaturev+0x10c>)
 8009410:	61bb      	str	r3, [r7, #24]
 8009412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	429a      	cmp	r2, r3
 8009418:	d054      	beq.n	80094c4 <_Z16CANTxTemperaturev+0xf0>
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	617b      	str	r3, [r7, #20]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 800941e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009420:	6978      	ldr	r0, [r7, #20]
 8009422:	f000 f9f5 	bl	8009810 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EEixEj>
 8009426:	4603      	mov	r3, r0
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f7ff ffb8 	bl	80093a0 <_ZNKSt5arrayIsLj3EE5beginEv>
 8009430:	6238      	str	r0, [r7, #32]
 8009432:	6938      	ldr	r0, [r7, #16]
 8009434:	f7ff ffc0 	bl	80093b8 <_ZNKSt5arrayIsLj3EE3endEv>
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	6a3a      	ldr	r2, [r7, #32]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	429a      	cmp	r2, r3
 8009440:	d03c      	beq.n	80094bc <_Z16CANTxTemperaturev+0xe8>
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	817b      	strh	r3, [r7, #10]
                data[byte_position++] = static_cast<uint8_t>(temperature >> 8);
 8009448:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800944c:	121b      	asrs	r3, r3, #8
 800944e:	b2da      	uxtb	r2, r3
 8009450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009454:	1c59      	adds	r1, r3, #1
 8009456:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 800945a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800945e:	440b      	add	r3, r1
 8009460:	f803 2c30 	strb.w	r2, [r3, #-48]
                data[byte_position++] = static_cast<uint8_t>(temperature);
 8009464:	897b      	ldrh	r3, [r7, #10]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800946c:	1c59      	adds	r1, r3, #1
 800946e:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8009472:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009476:	440b      	add	r3, r1
 8009478:	f803 2c30 	strb.w	r2, [r3, #-48]

                if (byte_position == 8) {
 800947c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009480:	2b08      	cmp	r3, #8
 8009482:	d117      	bne.n	80094b4 <_Z16CANTxTemperaturev+0xe0>
                    result = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009484:	463a      	mov	r2, r7
 8009486:	4b17      	ldr	r3, [pc, #92]	; (80094e4 <_Z16CANTxTemperaturev+0x110>)
 8009488:	4913      	ldr	r1, [pc, #76]	; (80094d8 <_Z16CANTxTemperaturev+0x104>)
 800948a:	4817      	ldr	r0, [pc, #92]	; (80094e8 <_Z16CANTxTemperaturev+0x114>)
 800948c:	f7f7 fa94 	bl	80009b8 <HAL_CAN_AddTxMessage>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    if (result != HAL_OK)
 8009496:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <_Z16CANTxTemperaturev+0xd0>
                        return result;
 800949e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80094a2:	e015      	b.n	80094d0 <_Z16CANTxTemperaturev+0xfc>

                    byte_position = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    ++TxHeader.StdId;
 80094aa:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <_Z16CANTxTemperaturev+0x104>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3301      	adds	r3, #1
 80094b0:	4a09      	ldr	r2, [pc, #36]	; (80094d8 <_Z16CANTxTemperaturev+0x104>)
 80094b2:	6013      	str	r3, [r2, #0]
            for (const auto temperature : register_group[current_ic].data) { // 3 temperatures per IC
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	3302      	adds	r3, #2
 80094b8:	623b      	str	r3, [r7, #32]
 80094ba:	e7be      	b.n	800943a <_Z16CANTxTemperaturev+0x66>
        for (const auto& register_group : temp_data) { // 2 voltage register groups
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	3308      	adds	r3, #8
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
 80094c2:	e7a6      	b.n	8009412 <_Z16CANTxTemperaturev+0x3e>
    for (size_t current_ic = 0; current_ic < LTC6811::kDaisyChainLength; ++current_ic) {
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	3301      	adds	r3, #1
 80094c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ca:	e799      	b.n	8009400 <_Z16CANTxTemperaturev+0x2c>
                }
            } // 2 * 3 == 6 temperatures associated with each LTC6811 in the daisy chain
        }
    } // 2 * 3 * kDaisyChainLength == all temperatures associated with the daisy chain

    return result;
 80094cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3730      	adds	r7, #48	; 0x30
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000008 	.word	0x20000008
 80094dc:	20000230 	.word	0x20000230
 80094e0:	20000240 	.word	0x20000240
 80094e4:	200001fc 	.word	0x200001fc
 80094e8:	200000fc 	.word	0x200000fc

080094ec <_Z21CANTxVoltageLimpTotalm>:

HAL_StatusTypeDef CANTxVoltageLimpTotal(uint32_t const sum_of_cells) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = VoltTotal;
 80094f4:	4b15      	ldr	r3, [pc, #84]	; (800954c <_Z21CANTxVoltageLimpTotalm+0x60>)
 80094f6:	220b      	movs	r2, #11
 80094f8:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 80094fa:	4b14      	ldr	r3, [pc, #80]	; (800954c <_Z21CANTxVoltageLimpTotalm+0x60>)
 80094fc:	2208      	movs	r2, #8
 80094fe:	611a      	str	r2, [r3, #16]
    uint8_t data[8] {
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	605a      	str	r2, [r3, #4]
        static_cast<uint8_t>(sum_of_cells >> 24),
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	0e1b      	lsrs	r3, r3, #24
                static_cast<uint8_t>(sum_of_cells >>  0),
                status.get_error_over_limit(Limping),
                0x0,
                0x0,
                0x0
    };
 800950e:	b2db      	uxtb	r3, r3
 8009510:	723b      	strb	r3, [r7, #8]
                static_cast<uint8_t>(sum_of_cells >> 16),
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	0c1b      	lsrs	r3, r3, #16
    };
 8009516:	b2db      	uxtb	r3, r3
 8009518:	727b      	strb	r3, [r7, #9]
                static_cast<uint8_t>(sum_of_cells >>  8),
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	0a1b      	lsrs	r3, r3, #8
    };
 800951e:	b2db      	uxtb	r3, r3
 8009520:	72bb      	strb	r3, [r7, #10]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	72fb      	strb	r3, [r7, #11]
                status.get_error_over_limit(Limping),
 8009528:	2103      	movs	r1, #3
 800952a:	4809      	ldr	r0, [pc, #36]	; (8009550 <_Z21CANTxVoltageLimpTotalm+0x64>)
 800952c:	f7fe fd12 	bl	8007f54 <_ZN6Status20get_error_over_limitE5Error>
 8009530:	4603      	mov	r3, r0
    };
 8009532:	733b      	strb	r3, [r7, #12]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009534:	f107 0208 	add.w	r2, r7, #8
 8009538:	4b06      	ldr	r3, [pc, #24]	; (8009554 <_Z21CANTxVoltageLimpTotalm+0x68>)
 800953a:	4904      	ldr	r1, [pc, #16]	; (800954c <_Z21CANTxVoltageLimpTotalm+0x60>)
 800953c:	4806      	ldr	r0, [pc, #24]	; (8009558 <_Z21CANTxVoltageLimpTotalm+0x6c>)
 800953e:	f7f7 fa3b 	bl	80009b8 <HAL_CAN_AddTxMessage>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20000008 	.word	0x20000008
 8009550:	20000200 	.word	0x20000200
 8009554:	200001fc 	.word	0x200001fc
 8009558:	200000fc 	.word	0x200000fc

0800955c <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>:
      begin() const noexcept
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f97a 	bl	800985e <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 800956a:	4603      	mov	r3, r0
 800956c:	4618      	mov	r0, r3
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>:
      end() const noexcept
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f96e 	bl	800985e <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>
 8009582:	4603      	mov	r3, r0
 8009584:	3308      	adds	r3, #8
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <_Z10CANTxDCCfgv>:

/* Put discharge flag data on CAN bus. */
HAL_StatusTypeDef CANTxDCCfg() {
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
    TxHeader.StdId = DishB;
 8009596:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <_Z10CANTxDCCfgv+0xc4>)
 8009598:	f240 7275 	movw	r2, #1909	; 0x775
 800959c:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 800959e:	4b2d      	ldr	r3, [pc, #180]	; (8009654 <_Z10CANTxDCCfgv+0xc4>)
 80095a0:	2208      	movs	r2, #8
 80095a2:	611a      	str	r2, [r3, #16]

    uint8_t data[8]{ 0 };
 80095a4:	2300      	movs	r3, #0
 80095a6:	607b      	str	r3, [r7, #4]
 80095a8:	2300      	movs	r3, #0
 80095aa:	60bb      	str	r3, [r7, #8]
    uint8_t byte_position{ 0 };
 80095ac:	2300      	movs	r3, #0
 80095ae:	77fb      	strb	r3, [r7, #31]
    HAL_StatusTypeDef result{ HAL_OK };
 80095b0:	2300      	movs	r3, #0
 80095b2:	77bb      	strb	r3, [r7, #30]

    for (const auto& IC : LTC6811::get_config_register_group()) {
 80095b4:	f7fd f8d2 	bl	800675c <_ZN7LTC681125get_config_register_groupEv>
 80095b8:	6178      	str	r0, [r7, #20]
 80095ba:	6978      	ldr	r0, [r7, #20]
 80095bc:	f7ff ffce 	bl	800955c <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE5beginEv>
 80095c0:	61b8      	str	r0, [r7, #24]
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f7ff ffd6 	bl	8009574 <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE3endEv>
 80095c8:	6138      	str	r0, [r7, #16]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d03a      	beq.n	8009648 <_Z10CANTxDCCfgv+0xb8>
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	60fb      	str	r3, [r7, #12]
        data[byte_position++] = IC.data[5];
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2105      	movs	r1, #5
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fd fde1 	bl	80071a2 <_ZNKSt5arrayIhLj6EEixEj>
 80095e0:	4603      	mov	r3, r0
 80095e2:	781a      	ldrb	r2, [r3, #0]
 80095e4:	7ffb      	ldrb	r3, [r7, #31]
 80095e6:	1c59      	adds	r1, r3, #1
 80095e8:	77f9      	strb	r1, [r7, #31]
 80095ea:	f107 0120 	add.w	r1, r7, #32
 80095ee:	440b      	add	r3, r1
 80095f0:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[byte_position++] = IC.data[4];
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2104      	movs	r1, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fd fdd2 	bl	80071a2 <_ZNKSt5arrayIhLj6EEixEj>
 80095fe:	4603      	mov	r3, r0
 8009600:	781a      	ldrb	r2, [r3, #0]
 8009602:	7ffb      	ldrb	r3, [r7, #31]
 8009604:	1c59      	adds	r1, r3, #1
 8009606:	77f9      	strb	r1, [r7, #31]
 8009608:	f107 0120 	add.w	r1, r7, #32
 800960c:	440b      	add	r3, r1
 800960e:	f803 2c1c 	strb.w	r2, [r3, #-28]

        if (byte_position == 8) {
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	2b08      	cmp	r3, #8
 8009616:	d113      	bne.n	8009640 <_Z10CANTxDCCfgv+0xb0>
            result  = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009618:	1d3a      	adds	r2, r7, #4
 800961a:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <_Z10CANTxDCCfgv+0xc8>)
 800961c:	490d      	ldr	r1, [pc, #52]	; (8009654 <_Z10CANTxDCCfgv+0xc4>)
 800961e:	480f      	ldr	r0, [pc, #60]	; (800965c <_Z10CANTxDCCfgv+0xcc>)
 8009620:	f7f7 f9ca 	bl	80009b8 <HAL_CAN_AddTxMessage>
 8009624:	4603      	mov	r3, r0
 8009626:	77bb      	strb	r3, [r7, #30]
            if (result != HAL_OK)
 8009628:	7fbb      	ldrb	r3, [r7, #30]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <_Z10CANTxDCCfgv+0xa2>
                return result;
 800962e:	7fbb      	ldrb	r3, [r7, #30]
 8009630:	e00b      	b.n	800964a <_Z10CANTxDCCfgv+0xba>

            byte_position = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	77fb      	strb	r3, [r7, #31]
            ++TxHeader.StdId;
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <_Z10CANTxDCCfgv+0xc4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	4a05      	ldr	r2, [pc, #20]	; (8009654 <_Z10CANTxDCCfgv+0xc4>)
 800963e:	6013      	str	r3, [r2, #0]
    for (const auto& IC : LTC6811::get_config_register_group()) {
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	3308      	adds	r3, #8
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	e7c0      	b.n	80095ca <_Z10CANTxDCCfgv+0x3a>
        }
    }

    return result;
 8009648:	7fbb      	ldrb	r3, [r7, #30]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000008 	.word	0x20000008
 8009658:	200001fc 	.word	0x200001fc
 800965c:	200000fc 	.word	0x200000fc

08009660 <_Z15CANTxVolumeSizem>:

HAL_StatusTypeDef CANTxVolumeSize(uint32_t const size_of_log) {
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
    TxHeader.StdId = LoggerResp;
 8009668:	4b10      	ldr	r3, [pc, #64]	; (80096ac <_Z15CANTxVolumeSizem+0x4c>)
 800966a:	f240 72b5 	movw	r2, #1973	; 0x7b5
 800966e:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 4;
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <_Z15CANTxVolumeSizem+0x4c>)
 8009672:	2204      	movs	r2, #4
 8009674:	611a      	str	r2, [r3, #16]

    uint8_t data[] = {
            static_cast<uint8_t>(size_of_log >> 24),
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	0e1b      	lsrs	r3, r3, #24
            static_cast<uint8_t>(size_of_log >> 16),
            static_cast<uint8_t>(size_of_log >>  8),
            static_cast<uint8_t>(size_of_log >>  0)
    };
 800967a:	b2db      	uxtb	r3, r3
 800967c:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(size_of_log >> 16),
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	0c1b      	lsrs	r3, r3, #16
    };
 8009682:	b2db      	uxtb	r3, r3
 8009684:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(size_of_log >>  8),
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0a1b      	lsrs	r3, r3, #8
    };
 800968a:	b2db      	uxtb	r3, r3
 800968c:	73bb      	strb	r3, [r7, #14]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	73fb      	strb	r3, [r7, #15]

    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &mailbox);
 8009694:	f107 020c 	add.w	r2, r7, #12
 8009698:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <_Z15CANTxVolumeSizem+0x50>)
 800969a:	4904      	ldr	r1, [pc, #16]	; (80096ac <_Z15CANTxVolumeSizem+0x4c>)
 800969c:	4805      	ldr	r0, [pc, #20]	; (80096b4 <_Z15CANTxVolumeSizem+0x54>)
 800969e:	f7f7 f98b 	bl	80009b8 <HAL_CAN_AddTxMessage>
 80096a2:	4603      	mov	r3, r0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20000008 	.word	0x20000008
 80096b0:	200001fc 	.word	0x200001fc
 80096b4:	200000fc 	.word	0x200000fc

080096b8 <Error_Handler>:

void Error_Handler() {
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80096bc:	bf00      	nop
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <_ZNSt13__atomic_baseImEC1Em>:
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <_ZNSt13__atomic_baseImEppEv>:
      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f3bf 8f5b 	dmb	ish
 80096f2:	e853 2f00 	ldrex	r2, [r3]
 80096f6:	f102 0201 	add.w	r2, r2, #1
 80096fa:	e843 2100 	strex	r1, r2, [r3]
 80096fe:	2900      	cmp	r1, #0
 8009700:	d1f7      	bne.n	80096f2 <_ZNSt13__atomic_baseImEppEv+0xe>
 8009702:	f3bf 8f5b 	dmb	ish
 8009706:	4613      	mov	r3, r2
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <_ZNSt13__atomic_baseImEaSEm>:
      operator=(__int_type __i) noexcept
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	2305      	movs	r3, #5
 8009728:	73fb      	strb	r3, [r7, #15]
      }

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fa45 	bl	8007bc0 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f3bf 8f5b 	dmb	ish
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	f3bf 8f5b 	dmb	ish
      }
 8009748:	bf00      	nop
	return __i;
 800974a:	683b      	ldr	r3, [r7, #0]
      }
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <_ZNSt13__atomic_baseIhEppEv>:
      operator++() noexcept
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f3bf 8f5b 	dmb	ish
 8009762:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009766:	f102 0201 	add.w	r2, r2, #1
 800976a:	e8c3 2f41 	strexb	r1, r2, [r3]
 800976e:	2900      	cmp	r1, #0
 8009770:	d1f7      	bne.n	8009762 <_ZNSt13__atomic_baseIhEppEv+0xe>
 8009772:	f3bf 8f5b 	dmb	ish
 8009776:	b2d3      	uxtb	r3, r2
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <_ZNSt13__atomic_baseIhEaSEh>:
      operator=(__int_type __i) noexcept
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	72fb      	strb	r3, [r7, #11]
 8009798:	2305      	movs	r3, #5
 800979a:	72bb      	strb	r3, [r7, #10]
	memory_order __b = __m & __memory_order_mask;
 800979c:	7abb      	ldrb	r3, [r7, #10]
 800979e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fa0c 	bl	8007bc0 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80097a8:	4603      	mov	r3, r0
 80097aa:	727b      	strb	r3, [r7, #9]
	__atomic_store_n(&_M_i, __i, int(__m));
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f3bf 8f5b 	dmb	ish
 80097b2:	7afa      	ldrb	r2, [r7, #11]
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	f3bf 8f5b 	dmb	ish
      }
 80097ba:	bf00      	nop
	return __i;
 80097bc:	78fb      	ldrb	r3, [r7, #3]
      }
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <_ZNKRSt8optionalIN7LTC681113VoltageStatusEEdeEv>:
      operator*() const&
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
      { return this->_M_get(); }
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fe fca7 	bl	8008122 <_ZNKSt19_Optional_base_implIN7LTC681113VoltageStatusESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 80097d4:	4603      	mov	r3, r0
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE5beginEv>:
      begin() const noexcept
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f846 	bl	8009878 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 80097ec:	4603      	mov	r3, r0
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE3endEv>:
      end() const noexcept
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f83a 	bl	8009878 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>
 8009804:	4603      	mov	r3, r0
 8009806:	3308      	adds	r3, #8
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EEixEj>:
      operator[](size_type __n) const noexcept
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f837 	bl	8009892 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_refERA1_KS2_j>
 8009824:	4603      	mov	r3, r0
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <_ZNKSt5arrayIsLj3EE4dataEv>:
      data() const noexcept
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe f8b0 	bl	800799e <_ZNSt14__array_traitsIsLj3EE6_S_ptrERA3_Ks>
 800983e:	4603      	mov	r3, r0
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <_ZNKSt5arrayIN7LTC68118RegisterIhEELj1EE4dataEv>:
      data() const noexcept
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff ffed 	bl	8009848 <_ZNSt14__array_traitsIN7LTC68118RegisterIhEELj1EE6_S_ptrERA1_KS2_>
 800986e:	4603      	mov	r3, r0
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <_ZNKSt5arrayIN7LTC68118RegisterIsEELj1EE4dataEv>:
      data() const noexcept
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe f880 	bl	8007988 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_ptrERA1_KS2_>
 8009888:	4603      	mov	r3, r0
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <_ZNSt14__array_traitsIN7LTC68118RegisterIsEELj1EE6_S_refERA1_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <_Z41__static_initialization_and_destruction_0ii>:
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d108      	bne.n	80098d2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d103      	bne.n	80098d2 <_Z41__static_initialization_and_destruction_0ii+0x22>
Status status{ Core | Charging };
 80098ca:	2105      	movs	r1, #5
 80098cc:	4803      	ldr	r0, [pc, #12]	; (80098dc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80098ce:	f7fe f89e 	bl	8007a0e <_ZN6StatusC1Eh>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000200 	.word	0x20000200

080098e0 <_GLOBAL__sub_I_rtc>:
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7ff ffe1 	bl	80098b0 <_Z41__static_initialization_and_destruction_0ii>
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098f6:	2300      	movs	r3, #0
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	4b10      	ldr	r3, [pc, #64]	; (800993c <HAL_MspInit+0x4c>)
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	4a0f      	ldr	r2, [pc, #60]	; (800993c <HAL_MspInit+0x4c>)
 8009900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009904:	6453      	str	r3, [r2, #68]	; 0x44
 8009906:	4b0d      	ldr	r3, [pc, #52]	; (800993c <HAL_MspInit+0x4c>)
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800990e:	607b      	str	r3, [r7, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8009912:	2300      	movs	r3, #0
 8009914:	603b      	str	r3, [r7, #0]
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <HAL_MspInit+0x4c>)
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	4a08      	ldr	r2, [pc, #32]	; (800993c <HAL_MspInit+0x4c>)
 800991c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009920:	6413      	str	r3, [r2, #64]	; 0x40
 8009922:	4b06      	ldr	r3, [pc, #24]	; (800993c <HAL_MspInit+0x4c>)
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40023800 	.word	0x40023800

08009940 <HAL_CAN_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	; 0x30
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009948:	f107 031c 	add.w	r3, r7, #28
 800994c:	2200      	movs	r2, #0
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	605a      	str	r2, [r3, #4]
 8009952:	609a      	str	r2, [r3, #8]
 8009954:	60da      	str	r2, [r3, #12]
 8009956:	611a      	str	r2, [r3, #16]
    if(hcan->Instance==CAN1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a4b      	ldr	r2, [pc, #300]	; (8009a8c <HAL_CAN_MspInit+0x14c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d13e      	bne.n	80099e0 <HAL_CAN_MspInit+0xa0>
    {
        /* USER CODE BEGIN CAN1_MspInit 0 */

        /* USER CODE END CAN1_MspInit 0 */
        /* Peripheral clock enable */
        HAL_RCC_CAN1_CLK_ENABLED++;
 8009962:	4b4b      	ldr	r3, [pc, #300]	; (8009a90 <HAL_CAN_MspInit+0x150>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3301      	adds	r3, #1
 8009968:	4a49      	ldr	r2, [pc, #292]	; (8009a90 <HAL_CAN_MspInit+0x150>)
 800996a:	6013      	str	r3, [r2, #0]
        if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800996c:	4b48      	ldr	r3, [pc, #288]	; (8009a90 <HAL_CAN_MspInit+0x150>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d10d      	bne.n	8009990 <HAL_CAN_MspInit+0x50>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	4b46      	ldr	r3, [pc, #280]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	4a45      	ldr	r2, [pc, #276]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 800997e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009982:	6413      	str	r3, [r2, #64]	; 0x40
 8009984:	4b43      	ldr	r3, [pc, #268]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998c:	61bb      	str	r3, [r7, #24]
 800998e:	69bb      	ldr	r3, [r7, #24]
        }

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	4b3f      	ldr	r3, [pc, #252]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009998:	4a3e      	ldr	r2, [pc, #248]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	6313      	str	r3, [r2, #48]	; 0x30
 80099a0:	4b3c      	ldr	r3, [pc, #240]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 80099a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	697b      	ldr	r3, [r7, #20]
        /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80099b0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b2:	2302      	movs	r3, #2
 80099b4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099ba:	2303      	movs	r3, #3
 80099bc:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80099be:	2309      	movs	r3, #9
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c2:	f107 031c 	add.w	r3, r7, #28
 80099c6:	4619      	mov	r1, r3
 80099c8:	4833      	ldr	r0, [pc, #204]	; (8009a98 <HAL_CAN_MspInit+0x158>)
 80099ca:	f7f7 fd3f 	bl	800144c <HAL_GPIO_Init>

        /* CAN1 interrupt Init */
        HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	2014      	movs	r0, #20
 80099d4:	f7f7 fd03 	bl	80013de <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80099d8:	2014      	movs	r0, #20
 80099da:	f7f7 fd1c 	bl	8001416 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN CAN2_MspInit 1 */

        /* USER CODE END CAN2_MspInit 1 */
    }

}
 80099de:	e050      	b.n	8009a82 <HAL_CAN_MspInit+0x142>
    else if(hcan->Instance==CAN2)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a2d      	ldr	r2, [pc, #180]	; (8009a9c <HAL_CAN_MspInit+0x15c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d14b      	bne.n	8009a82 <HAL_CAN_MspInit+0x142>
        __HAL_RCC_CAN2_CLK_ENABLE();
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	4a28      	ldr	r2, [pc, #160]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 80099f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099f8:	6413      	str	r3, [r2, #64]	; 0x40
 80099fa:	4b26      	ldr	r3, [pc, #152]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a02:	613b      	str	r3, [r7, #16]
 8009a04:	693b      	ldr	r3, [r7, #16]
        HAL_RCC_CAN1_CLK_ENABLED++;
 8009a06:	4b22      	ldr	r3, [pc, #136]	; (8009a90 <HAL_CAN_MspInit+0x150>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	4a20      	ldr	r2, [pc, #128]	; (8009a90 <HAL_CAN_MspInit+0x150>)
 8009a0e:	6013      	str	r3, [r2, #0]
        if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009a10:	4b1f      	ldr	r3, [pc, #124]	; (8009a90 <HAL_CAN_MspInit+0x150>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10d      	bne.n	8009a34 <HAL_CAN_MspInit+0xf4>
            __HAL_RCC_CAN1_CLK_ENABLE();
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a26:	6413      	str	r3, [r2, #64]	; 0x40
 8009a28:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a34:	2300      	movs	r3, #0
 8009a36:	60bb      	str	r3, [r7, #8]
 8009a38:	4b16      	ldr	r3, [pc, #88]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3c:	4a15      	ldr	r2, [pc, #84]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009a3e:	f043 0302 	orr.w	r3, r3, #2
 8009a42:	6313      	str	r3, [r2, #48]	; 0x30
 8009a44:	4b13      	ldr	r3, [pc, #76]	; (8009a94 <HAL_CAN_MspInit+0x154>)
 8009a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	60bb      	str	r3, [r7, #8]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8009a50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009a54:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a56:	2302      	movs	r3, #2
 8009a58:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8009a62:	2309      	movs	r3, #9
 8009a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a66:	f107 031c 	add.w	r3, r7, #28
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	480c      	ldr	r0, [pc, #48]	; (8009aa0 <HAL_CAN_MspInit+0x160>)
 8009a6e:	f7f7 fced 	bl	800144c <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8009a72:	2200      	movs	r2, #0
 8009a74:	2100      	movs	r1, #0
 8009a76:	2041      	movs	r0, #65	; 0x41
 8009a78:	f7f7 fcb1 	bl	80013de <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8009a7c:	2041      	movs	r0, #65	; 0x41
 8009a7e:	f7f7 fcca 	bl	8001416 <HAL_NVIC_EnableIRQ>
}
 8009a82:	bf00      	nop
 8009a84:	3730      	adds	r7, #48	; 0x30
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	40006400 	.word	0x40006400
 8009a90:	20000248 	.word	0x20000248
 8009a94:	40023800 	.word	0x40023800
 8009a98:	40020000 	.word	0x40020000
 8009a9c:	40006800 	.word	0x40006800
 8009aa0:	40020400 	.word	0x40020400

08009aa4 <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	; 0x28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aac:	f107 0314 	add.w	r3, r7, #20
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	605a      	str	r2, [r3, #4]
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	611a      	str	r2, [r3, #16]
    if(hspi->Instance==SPI1) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a19      	ldr	r2, [pc, #100]	; (8009b28 <HAL_SPI_MspInit+0x84>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d12b      	bne.n	8009b1e <HAL_SPI_MspInit+0x7a>
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	4b18      	ldr	r3, [pc, #96]	; (8009b2c <HAL_SPI_MspInit+0x88>)
 8009acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ace:	4a17      	ldr	r2, [pc, #92]	; (8009b2c <HAL_SPI_MspInit+0x88>)
 8009ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ad6:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <HAL_SPI_MspInit+0x88>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <HAL_SPI_MspInit+0x88>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	4a10      	ldr	r2, [pc, #64]	; (8009b2c <HAL_SPI_MspInit+0x88>)
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	6313      	str	r3, [r2, #48]	; 0x30
 8009af2:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <HAL_SPI_MspInit+0x88>)
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
         */
        GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8009afe:	2338      	movs	r3, #56	; 0x38
 8009b00:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b02:	2302      	movs	r3, #2
 8009b04:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009b06:	2302      	movs	r3, #2
 8009b08:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009b0e:	2305      	movs	r3, #5
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b12:	f107 0314 	add.w	r3, r7, #20
 8009b16:	4619      	mov	r1, r3
 8009b18:	4805      	ldr	r0, [pc, #20]	; (8009b30 <HAL_SPI_MspInit+0x8c>)
 8009b1a:	f7f7 fc97 	bl	800144c <HAL_GPIO_Init>
        /* USER CODE BEGIN SPI1_MspInit 1 */

        /* USER CODE END SPI1_MspInit 1 */
    }

}
 8009b1e:	bf00      	nop
 8009b20:	3728      	adds	r7, #40	; 0x28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	40013000 	.word	0x40013000
 8009b2c:	40023800 	.word	0x40023800
 8009b30:	40020400 	.word	0x40020400

08009b34 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance==TIM2)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b44:	d10d      	bne.n	8009b62 <HAL_TIM_Base_MspInit+0x2e>
    {
        /* USER CODE BEGIN TIM2_MspInit 0 */

        /* USER CODE END TIM2_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <HAL_TIM_Base_MspInit+0x3c>)
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <HAL_TIM_Base_MspInit+0x3c>)
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	6413      	str	r3, [r2, #64]	; 0x40
 8009b56:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <HAL_TIM_Base_MspInit+0x3c>)
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	68fb      	ldr	r3, [r7, #12]
        /* USER CODE BEGIN TIM2_MspInit 1 */

        /* USER CODE END TIM2_MspInit 1 */
    }

}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	40023800 	.word	0x40023800

08009b74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	605a      	str	r2, [r3, #4]
 8009b86:	609a      	str	r2, [r3, #8]
 8009b88:	60da      	str	r2, [r3, #12]
 8009b8a:	611a      	str	r2, [r3, #16]
    if(htim->Instance==TIM2)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b94:	d11d      	bne.n	8009bd2 <HAL_TIM_MspPostInit+0x5e>
    {
        /* USER CODE BEGIN TIM2_MspPostInit 0 */

        /* USER CODE END TIM2_MspPostInit 0 */

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	4b10      	ldr	r3, [pc, #64]	; (8009bdc <HAL_TIM_MspPostInit+0x68>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	4a0f      	ldr	r2, [pc, #60]	; (8009bdc <HAL_TIM_MspPostInit+0x68>)
 8009ba0:	f043 0302 	orr.w	r3, r3, #2
 8009ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <HAL_TIM_MspPostInit+0x68>)
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	60bb      	str	r3, [r7, #8]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
        /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4 
         */
        GPIO_InitStruct.Pin = FansPWM_Pin;
 8009bb2:	2304      	movs	r3, #4
 8009bb4:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(FansPWM_GPIO_Port, &GPIO_InitStruct);
 8009bc6:	f107 030c 	add.w	r3, r7, #12
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4804      	ldr	r0, [pc, #16]	; (8009be0 <HAL_TIM_MspPostInit+0x6c>)
 8009bce:	f7f7 fc3d 	bl	800144c <HAL_GPIO_Init>
        /* USER CODE BEGIN TIM2_MspPostInit 1 */

        /* USER CODE END TIM2_MspPostInit 1 */
    }

}
 8009bd2:	bf00      	nop
 8009bd4:	3720      	adds	r7, #32
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	40023800 	.word	0x40023800
 8009be0:	40020400 	.word	0x40020400

08009be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009be8:	bf00      	nop
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009bf6:	e7fe      	b.n	8009bf6 <HardFault_Handler+0x4>

08009bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009bfc:	e7fe      	b.n	8009bfc <MemManage_Handler+0x4>

08009bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c02:	e7fe      	b.n	8009c02 <BusFault_Handler+0x4>

08009c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c08:	e7fe      	b.n	8009c08 <UsageFault_Handler+0x4>

08009c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c0e:	bf00      	nop
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c1c:	bf00      	nop
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c26:	b480      	push	{r7}
 8009c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c38:	f7fe f9f8 	bl	800802c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c3c:	bf00      	nop
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009c44:	4802      	ldr	r0, [pc, #8]	; (8009c50 <CAN1_RX0_IRQHandler+0x10>)
 8009c46:	f7f7 f8ca 	bl	8000dde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009c4a:	bf00      	nop
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	200000fc 	.word	0x200000fc

08009c54 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009c58:	4802      	ldr	r0, [pc, #8]	; (8009c64 <CAN2_RX1_IRQHandler+0x10>)
 8009c5a:	f7f7 f8c0 	bl	8000dde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8009c5e:	bf00      	nop
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000124 	.word	0x20000124

08009c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
	return 1;
 8009c6c:	2301      	movs	r3, #1
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <_kill>:

int _kill(int pid, int sig)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009c82:	f000 f9fb 	bl	800a07c <__errno>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2216      	movs	r2, #22
 8009c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8009c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <_exit>:

void _exit (int status)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff ffe7 	bl	8009c78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009caa:	e7fe      	b.n	8009caa <_exit+0x12>

08009cac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009cb4:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <_sbrk+0x50>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <_sbrk+0x16>
		heap_end = &end;
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <_sbrk+0x50>)
 8009cbe:	4a10      	ldr	r2, [pc, #64]	; (8009d00 <_sbrk+0x54>)
 8009cc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	; (8009cfc <_sbrk+0x50>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009cc8:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <_sbrk+0x50>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4413      	add	r3, r2
 8009cd0:	466a      	mov	r2, sp
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d907      	bls.n	8009ce6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009cd6:	f000 f9d1 	bl	800a07c <__errno>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	220c      	movs	r2, #12
 8009cde:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce4:	e006      	b.n	8009cf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <_sbrk+0x50>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	4a03      	ldr	r2, [pc, #12]	; (8009cfc <_sbrk+0x50>)
 8009cf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	2000024c 	.word	0x2000024c
 8009d00:	200006f0 	.word	0x200006f0

08009d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009d08:	4b16      	ldr	r3, [pc, #88]	; (8009d64 <SystemInit+0x60>)
 8009d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0e:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <SystemInit+0x60>)
 8009d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009d18:	4b13      	ldr	r3, [pc, #76]	; (8009d68 <SystemInit+0x64>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <SystemInit+0x64>)
 8009d1e:	f043 0301 	orr.w	r3, r3, #1
 8009d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009d24:	4b10      	ldr	r3, [pc, #64]	; (8009d68 <SystemInit+0x64>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009d2a:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <SystemInit+0x64>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a0e      	ldr	r2, [pc, #56]	; (8009d68 <SystemInit+0x64>)
 8009d30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <SystemInit+0x64>)
 8009d3c:	4a0b      	ldr	r2, [pc, #44]	; (8009d6c <SystemInit+0x68>)
 8009d3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009d40:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <SystemInit+0x64>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a08      	ldr	r2, [pc, #32]	; (8009d68 <SystemInit+0x64>)
 8009d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <SystemInit+0x64>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <SystemInit+0x60>)
 8009d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d58:	609a      	str	r2, [r3, #8]
#endif
}
 8009d5a:	bf00      	nop
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	e000ed00 	.word	0xe000ed00
 8009d68:	40023800 	.word	0x40023800
 8009d6c:	24003010 	.word	0x24003010

08009d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009d76:	e003      	b.n	8009d80 <LoopCopyDataInit>

08009d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009d78:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009d7e:	3104      	adds	r1, #4

08009d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009d80:	480b      	ldr	r0, [pc, #44]	; (8009db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009d82:	4b0c      	ldr	r3, [pc, #48]	; (8009db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009d88:	d3f6      	bcc.n	8009d78 <CopyDataInit>
  ldr  r2, =_sbss
 8009d8a:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009d8c:	e002      	b.n	8009d94 <LoopFillZerobss>

08009d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009d90:	f842 3b04 	str.w	r3, [r2], #4

08009d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009d94:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009d98:	d3f9      	bcc.n	8009d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009d9a:	f7ff ffb3 	bl	8009d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009d9e:	f000 f973 	bl	800a088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009da2:	f7fe fa09 	bl	80081b8 <main>
  bx  lr    
 8009da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009dac:	0800a5e8 	.word	0x0800a5e8
  ldr  r0, =_sdata
 8009db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009db4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8009db8:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8009dbc:	200006f0 	.word	0x200006f0

08009dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009dc0:	e7fe      	b.n	8009dc0 <ADC_IRQHandler>

08009dc2 <__cxa_guard_acquire>:
 8009dc2:	6803      	ldr	r3, [r0, #0]
 8009dc4:	07db      	lsls	r3, r3, #31
 8009dc6:	d406      	bmi.n	8009dd6 <__cxa_guard_acquire+0x14>
 8009dc8:	7843      	ldrb	r3, [r0, #1]
 8009dca:	b103      	cbz	r3, 8009dce <__cxa_guard_acquire+0xc>
 8009dcc:	deff      	udf	#255	; 0xff
 8009dce:	2301      	movs	r3, #1
 8009dd0:	7043      	strb	r3, [r0, #1]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	4770      	bx	lr
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	4770      	bx	lr

08009dda <__cxa_guard_release>:
 8009dda:	2301      	movs	r3, #1
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	4770      	bx	lr

08009de0 <_Znwj>:
 8009de0:	2801      	cmp	r0, #1
 8009de2:	bf38      	it	cc
 8009de4:	2001      	movcc	r0, #1
 8009de6:	b510      	push	{r4, lr}
 8009de8:	4604      	mov	r4, r0
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 f970 	bl	800a0d0 <malloc>
 8009df0:	b930      	cbnz	r0, 8009e00 <_Znwj+0x20>
 8009df2:	f000 f807 	bl	8009e04 <_ZSt15get_new_handlerv>
 8009df6:	b908      	cbnz	r0, 8009dfc <_Znwj+0x1c>
 8009df8:	f000 f938 	bl	800a06c <abort>
 8009dfc:	4780      	blx	r0
 8009dfe:	e7f4      	b.n	8009dea <_Znwj+0xa>
 8009e00:	bd10      	pop	{r4, pc}
	...

08009e04 <_ZSt15get_new_handlerv>:
 8009e04:	4b02      	ldr	r3, [pc, #8]	; (8009e10 <_ZSt15get_new_handlerv+0xc>)
 8009e06:	6818      	ldr	r0, [r3, #0]
 8009e08:	f3bf 8f5b 	dmb	ish
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000250 	.word	0x20000250

08009e14 <logf>:
 8009e14:	b508      	push	{r3, lr}
 8009e16:	ed2d 8b02 	vpush	{d8}
 8009e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8009e1e:	f000 f82f 	bl	8009e80 <__ieee754_logf>
 8009e22:	4b14      	ldr	r3, [pc, #80]	; (8009e74 <logf+0x60>)
 8009e24:	f993 3000 	ldrsb.w	r3, [r3]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	d014      	beq.n	8009e56 <logf+0x42>
 8009e2c:	eeb4 8a48 	vcmp.f32	s16, s16
 8009e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e34:	d60f      	bvs.n	8009e56 <logf+0x42>
 8009e36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3e:	dc0a      	bgt.n	8009e56 <logf+0x42>
 8009e40:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e48:	d108      	bne.n	8009e5c <logf+0x48>
 8009e4a:	f000 f917 	bl	800a07c <__errno>
 8009e4e:	2322      	movs	r3, #34	; 0x22
 8009e50:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009e78 <logf+0x64>
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	ecbd 8b02 	vpop	{d8}
 8009e5a:	bd08      	pop	{r3, pc}
 8009e5c:	f000 f90e 	bl	800a07c <__errno>
 8009e60:	ecbd 8b02 	vpop	{d8}
 8009e64:	2321      	movs	r3, #33	; 0x21
 8009e66:	6003      	str	r3, [r0, #0]
 8009e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e6c:	4803      	ldr	r0, [pc, #12]	; (8009e7c <logf+0x68>)
 8009e6e:	f000 b8f7 	b.w	800a060 <nanf>
 8009e72:	bf00      	nop
 8009e74:	20000024 	.word	0x20000024
 8009e78:	ff800000 	.word	0xff800000
 8009e7c:	0800a5d0 	.word	0x0800a5d0

08009e80 <__ieee754_logf>:
 8009e80:	ee10 3a10 	vmov	r3, s0
 8009e84:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009e88:	d106      	bne.n	8009e98 <__ieee754_logf+0x18>
 8009e8a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a020 <__ieee754_logf+0x1a0>
 8009e8e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a024 <__ieee754_logf+0x1a4>
 8009e92:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009e96:	4770      	bx	lr
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	da02      	bge.n	8009ea2 <__ieee754_logf+0x22>
 8009e9c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009ea0:	e7f5      	b.n	8009e8e <__ieee754_logf+0xe>
 8009ea2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009ea6:	db02      	blt.n	8009eae <__ieee754_logf+0x2e>
 8009ea8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009eac:	4770      	bx	lr
 8009eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009eb2:	bfb8      	it	lt
 8009eb4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a028 <__ieee754_logf+0x1a8>
 8009eb8:	485c      	ldr	r0, [pc, #368]	; (800a02c <__ieee754_logf+0x1ac>)
 8009eba:	bfbe      	ittt	lt
 8009ebc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009ec0:	f06f 0118 	mvnlt.w	r1, #24
 8009ec4:	ee17 3a90 	vmovlt	r3, s15
 8009ec8:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009ecc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ed0:	4418      	add	r0, r3
 8009ed2:	bfa8      	it	ge
 8009ed4:	2100      	movge	r1, #0
 8009ed6:	3a7f      	subs	r2, #127	; 0x7f
 8009ed8:	440a      	add	r2, r1
 8009eda:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8009ede:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8009ee2:	4319      	orrs	r1, r3
 8009ee4:	ee00 1a10 	vmov	s0, r1
 8009ee8:	4951      	ldr	r1, [pc, #324]	; (800a030 <__ieee754_logf+0x1b0>)
 8009eea:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8009eee:	f103 000f 	add.w	r0, r3, #15
 8009ef2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ef6:	4001      	ands	r1, r0
 8009ef8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009efc:	bb89      	cbnz	r1, 8009f62 <__ieee754_logf+0xe2>
 8009efe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f06:	d10f      	bne.n	8009f28 <__ieee754_logf+0xa8>
 8009f08:	2a00      	cmp	r2, #0
 8009f0a:	f000 8085 	beq.w	800a018 <__ieee754_logf+0x198>
 8009f0e:	ee07 2a90 	vmov	s15, r2
 8009f12:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a034 <__ieee754_logf+0x1b4>
 8009f16:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a038 <__ieee754_logf+0x1b8>
 8009f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009f22:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009f26:	4770      	bx	lr
 8009f28:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a03c <__ieee754_logf+0x1bc>
 8009f2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009f30:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009f34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f3c:	b912      	cbnz	r2, 8009f44 <__ieee754_logf+0xc4>
 8009f3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009f42:	4770      	bx	lr
 8009f44:	ee07 2a90 	vmov	s15, r2
 8009f48:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a034 <__ieee754_logf+0x1b4>
 8009f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f50:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009f54:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009f58:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a038 <__ieee754_logf+0x1b8>
 8009f5c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009f60:	4770      	bx	lr
 8009f62:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009f66:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009f6a:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a040 <__ieee754_logf+0x1c0>
 8009f6e:	eddf 4a35 	vldr	s9, [pc, #212]	; 800a044 <__ieee754_logf+0x1c4>
 8009f72:	4935      	ldr	r1, [pc, #212]	; (800a048 <__ieee754_logf+0x1c8>)
 8009f74:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009f78:	4419      	add	r1, r3
 8009f7a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8009f7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009f82:	430b      	orrs	r3, r1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	ee07 2a90 	vmov	s15, r2
 8009f8a:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009f8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009f92:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009f96:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a04c <__ieee754_logf+0x1cc>
 8009f9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009f9e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800a050 <__ieee754_logf+0x1d0>
 8009fa2:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009fa6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a054 <__ieee754_logf+0x1d4>
 8009faa:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009fae:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800a058 <__ieee754_logf+0x1d8>
 8009fb2:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009fb6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a05c <__ieee754_logf+0x1dc>
 8009fba:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009fbe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009fc2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009fc6:	dd1c      	ble.n	800a002 <__ieee754_logf+0x182>
 8009fc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009fcc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009fd0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fd8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009fdc:	b922      	cbnz	r2, 8009fe8 <__ieee754_logf+0x168>
 8009fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fe2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009fe6:	4770      	bx	lr
 8009fe8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800a034 <__ieee754_logf+0x1b4>
 8009fec:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009ff8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a038 <__ieee754_logf+0x1b8>
 8009ffc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a000:	4770      	bx	lr
 800a002:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a006:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d0e9      	beq.n	8009fe2 <__ieee754_logf+0x162>
 800a00e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a034 <__ieee754_logf+0x1b4>
 800a012:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a016:	e7ed      	b.n	8009ff4 <__ieee754_logf+0x174>
 800a018:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a024 <__ieee754_logf+0x1a4>
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	cc000000 	.word	0xcc000000
 800a024:	00000000 	.word	0x00000000
 800a028:	4c000000 	.word	0x4c000000
 800a02c:	004afb20 	.word	0x004afb20
 800a030:	007ffff0 	.word	0x007ffff0
 800a034:	3717f7d1 	.word	0x3717f7d1
 800a038:	3f317180 	.word	0x3f317180
 800a03c:	3eaaaaab 	.word	0x3eaaaaab
 800a040:	3e1cd04f 	.word	0x3e1cd04f
 800a044:	3e178897 	.word	0x3e178897
 800a048:	ffcf5c30 	.word	0xffcf5c30
 800a04c:	3e638e29 	.word	0x3e638e29
 800a050:	3ecccccd 	.word	0x3ecccccd
 800a054:	3e3a3325 	.word	0x3e3a3325
 800a058:	3e924925 	.word	0x3e924925
 800a05c:	3f2aaaab 	.word	0x3f2aaaab

0800a060 <nanf>:
 800a060:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a068 <nanf+0x8>
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	7fc00000 	.word	0x7fc00000

0800a06c <abort>:
 800a06c:	b508      	push	{r3, lr}
 800a06e:	2006      	movs	r0, #6
 800a070:	f000 f8d0 	bl	800a214 <raise>
 800a074:	2001      	movs	r0, #1
 800a076:	f7ff fe0f 	bl	8009c98 <_exit>
	...

0800a07c <__errno>:
 800a07c:	4b01      	ldr	r3, [pc, #4]	; (800a084 <__errno+0x8>)
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000028 	.word	0x20000028

0800a088 <__libc_init_array>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	4d0d      	ldr	r5, [pc, #52]	; (800a0c0 <__libc_init_array+0x38>)
 800a08c:	4c0d      	ldr	r4, [pc, #52]	; (800a0c4 <__libc_init_array+0x3c>)
 800a08e:	1b64      	subs	r4, r4, r5
 800a090:	10a4      	asrs	r4, r4, #2
 800a092:	2600      	movs	r6, #0
 800a094:	42a6      	cmp	r6, r4
 800a096:	d109      	bne.n	800a0ac <__libc_init_array+0x24>
 800a098:	4d0b      	ldr	r5, [pc, #44]	; (800a0c8 <__libc_init_array+0x40>)
 800a09a:	4c0c      	ldr	r4, [pc, #48]	; (800a0cc <__libc_init_array+0x44>)
 800a09c:	f000 f8e4 	bl	800a268 <_init>
 800a0a0:	1b64      	subs	r4, r4, r5
 800a0a2:	10a4      	asrs	r4, r4, #2
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	42a6      	cmp	r6, r4
 800a0a8:	d105      	bne.n	800a0b6 <__libc_init_array+0x2e>
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b0:	4798      	blx	r3
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	e7ee      	b.n	800a094 <__libc_init_array+0xc>
 800a0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ba:	4798      	blx	r3
 800a0bc:	3601      	adds	r6, #1
 800a0be:	e7f2      	b.n	800a0a6 <__libc_init_array+0x1e>
 800a0c0:	0800a5dc 	.word	0x0800a5dc
 800a0c4:	0800a5dc 	.word	0x0800a5dc
 800a0c8:	0800a5dc 	.word	0x0800a5dc
 800a0cc:	0800a5e4 	.word	0x0800a5e4

0800a0d0 <malloc>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <malloc+0xc>)
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f000 b80b 	b.w	800a0f0 <_malloc_r>
 800a0da:	bf00      	nop
 800a0dc:	20000028 	.word	0x20000028

0800a0e0 <memset>:
 800a0e0:	4402      	add	r2, r0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d100      	bne.n	800a0ea <memset+0xa>
 800a0e8:	4770      	bx	lr
 800a0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ee:	e7f9      	b.n	800a0e4 <memset+0x4>

0800a0f0 <_malloc_r>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	1ccd      	adds	r5, r1, #3
 800a0f4:	f025 0503 	bic.w	r5, r5, #3
 800a0f8:	3508      	adds	r5, #8
 800a0fa:	2d0c      	cmp	r5, #12
 800a0fc:	bf38      	it	cc
 800a0fe:	250c      	movcc	r5, #12
 800a100:	2d00      	cmp	r5, #0
 800a102:	4606      	mov	r6, r0
 800a104:	db01      	blt.n	800a10a <_malloc_r+0x1a>
 800a106:	42a9      	cmp	r1, r5
 800a108:	d903      	bls.n	800a112 <_malloc_r+0x22>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	2000      	movs	r0, #0
 800a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a112:	f000 f89b 	bl	800a24c <__malloc_lock>
 800a116:	4921      	ldr	r1, [pc, #132]	; (800a19c <_malloc_r+0xac>)
 800a118:	680a      	ldr	r2, [r1, #0]
 800a11a:	4614      	mov	r4, r2
 800a11c:	b99c      	cbnz	r4, 800a146 <_malloc_r+0x56>
 800a11e:	4f20      	ldr	r7, [pc, #128]	; (800a1a0 <_malloc_r+0xb0>)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	b923      	cbnz	r3, 800a12e <_malloc_r+0x3e>
 800a124:	4621      	mov	r1, r4
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f83c 	bl	800a1a4 <_sbrk_r>
 800a12c:	6038      	str	r0, [r7, #0]
 800a12e:	4629      	mov	r1, r5
 800a130:	4630      	mov	r0, r6
 800a132:	f000 f837 	bl	800a1a4 <_sbrk_r>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	d123      	bne.n	800a182 <_malloc_r+0x92>
 800a13a:	230c      	movs	r3, #12
 800a13c:	6033      	str	r3, [r6, #0]
 800a13e:	4630      	mov	r0, r6
 800a140:	f000 f88a 	bl	800a258 <__malloc_unlock>
 800a144:	e7e3      	b.n	800a10e <_malloc_r+0x1e>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	1b5b      	subs	r3, r3, r5
 800a14a:	d417      	bmi.n	800a17c <_malloc_r+0x8c>
 800a14c:	2b0b      	cmp	r3, #11
 800a14e:	d903      	bls.n	800a158 <_malloc_r+0x68>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	441c      	add	r4, r3
 800a154:	6025      	str	r5, [r4, #0]
 800a156:	e004      	b.n	800a162 <_malloc_r+0x72>
 800a158:	6863      	ldr	r3, [r4, #4]
 800a15a:	42a2      	cmp	r2, r4
 800a15c:	bf0c      	ite	eq
 800a15e:	600b      	streq	r3, [r1, #0]
 800a160:	6053      	strne	r3, [r2, #4]
 800a162:	4630      	mov	r0, r6
 800a164:	f000 f878 	bl	800a258 <__malloc_unlock>
 800a168:	f104 000b 	add.w	r0, r4, #11
 800a16c:	1d23      	adds	r3, r4, #4
 800a16e:	f020 0007 	bic.w	r0, r0, #7
 800a172:	1ac2      	subs	r2, r0, r3
 800a174:	d0cc      	beq.n	800a110 <_malloc_r+0x20>
 800a176:	1a1b      	subs	r3, r3, r0
 800a178:	50a3      	str	r3, [r4, r2]
 800a17a:	e7c9      	b.n	800a110 <_malloc_r+0x20>
 800a17c:	4622      	mov	r2, r4
 800a17e:	6864      	ldr	r4, [r4, #4]
 800a180:	e7cc      	b.n	800a11c <_malloc_r+0x2c>
 800a182:	1cc4      	adds	r4, r0, #3
 800a184:	f024 0403 	bic.w	r4, r4, #3
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d0e3      	beq.n	800a154 <_malloc_r+0x64>
 800a18c:	1a21      	subs	r1, r4, r0
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f808 	bl	800a1a4 <_sbrk_r>
 800a194:	3001      	adds	r0, #1
 800a196:	d1dd      	bne.n	800a154 <_malloc_r+0x64>
 800a198:	e7cf      	b.n	800a13a <_malloc_r+0x4a>
 800a19a:	bf00      	nop
 800a19c:	20000254 	.word	0x20000254
 800a1a0:	20000258 	.word	0x20000258

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7ff fd7c 	bl	8009cac <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	200006e0 	.word	0x200006e0

0800a1c4 <_raise_r>:
 800a1c4:	291f      	cmp	r1, #31
 800a1c6:	b538      	push	{r3, r4, r5, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	460d      	mov	r5, r1
 800a1cc:	d904      	bls.n	800a1d8 <_raise_r+0x14>
 800a1ce:	2316      	movs	r3, #22
 800a1d0:	6003      	str	r3, [r0, #0]
 800a1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1da:	b112      	cbz	r2, 800a1e2 <_raise_r+0x1e>
 800a1dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1e0:	b94b      	cbnz	r3, 800a1f6 <_raise_r+0x32>
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 f830 	bl	800a248 <_getpid_r>
 800a1e8:	462a      	mov	r2, r5
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f2:	f000 b817 	b.w	800a224 <_kill_r>
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d00a      	beq.n	800a210 <_raise_r+0x4c>
 800a1fa:	1c59      	adds	r1, r3, #1
 800a1fc:	d103      	bne.n	800a206 <_raise_r+0x42>
 800a1fe:	2316      	movs	r3, #22
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	2001      	movs	r0, #1
 800a204:	e7e7      	b.n	800a1d6 <_raise_r+0x12>
 800a206:	2400      	movs	r4, #0
 800a208:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a20c:	4628      	mov	r0, r5
 800a20e:	4798      	blx	r3
 800a210:	2000      	movs	r0, #0
 800a212:	e7e0      	b.n	800a1d6 <_raise_r+0x12>

0800a214 <raise>:
 800a214:	4b02      	ldr	r3, [pc, #8]	; (800a220 <raise+0xc>)
 800a216:	4601      	mov	r1, r0
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	f7ff bfd3 	b.w	800a1c4 <_raise_r>
 800a21e:	bf00      	nop
 800a220:	20000028 	.word	0x20000028

0800a224 <_kill_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_kill_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7ff fd21 	bl	8009c78 <_kill>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_kill_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_kill_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	200006e0 	.word	0x200006e0

0800a248 <_getpid_r>:
 800a248:	f7ff bd0e 	b.w	8009c68 <_getpid>

0800a24c <__malloc_lock>:
 800a24c:	4801      	ldr	r0, [pc, #4]	; (800a254 <__malloc_lock+0x8>)
 800a24e:	f000 b809 	b.w	800a264 <__retarget_lock_acquire_recursive>
 800a252:	bf00      	nop
 800a254:	200006e8 	.word	0x200006e8

0800a258 <__malloc_unlock>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__malloc_unlock+0x8>)
 800a25a:	f000 b804 	b.w	800a266 <__retarget_lock_release_recursive>
 800a25e:	bf00      	nop
 800a260:	200006e8 	.word	0x200006e8

0800a264 <__retarget_lock_acquire_recursive>:
 800a264:	4770      	bx	lr

0800a266 <__retarget_lock_release_recursive>:
 800a266:	4770      	bx	lr

0800a268 <_init>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	bf00      	nop
 800a26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26e:	bc08      	pop	{r3}
 800a270:	469e      	mov	lr, r3
 800a272:	4770      	bx	lr

0800a274 <_fini>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	bf00      	nop
 800a278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27a:	bc08      	pop	{r3}
 800a27c:	469e      	mov	lr, r3
 800a27e:	4770      	bx	lr
